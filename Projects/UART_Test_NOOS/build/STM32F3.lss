
build/STM32F3.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080041fc 	.word	0x080041fc

080001ac <frame_dummy>:
 80001ac:	4b08      	ldr	r3, [pc, #32]	; (80001d0 <frame_dummy+0x24>)
 80001ae:	b510      	push	{r4, lr}
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4808      	ldr	r0, [pc, #32]	; (80001d4 <frame_dummy+0x28>)
 80001b4:	4908      	ldr	r1, [pc, #32]	; (80001d8 <frame_dummy+0x2c>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	4808      	ldr	r0, [pc, #32]	; (80001dc <frame_dummy+0x30>)
 80001bc:	6803      	ldr	r3, [r0, #0]
 80001be:	b903      	cbnz	r3, 80001c2 <frame_dummy+0x16>
 80001c0:	bd10      	pop	{r4, pc}
 80001c2:	4b07      	ldr	r3, [pc, #28]	; (80001e0 <frame_dummy+0x34>)
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d0fb      	beq.n	80001c0 <frame_dummy+0x14>
 80001c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80001cc:	4718      	bx	r3
 80001ce:	bf00      	nop
 80001d0:	00000000 	.word	0x00000000
 80001d4:	080041fc 	.word	0x080041fc
 80001d8:	20000008 	.word	0x20000008
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000

080001e4 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b082      	sub	sp, #8
 80001e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80001ea:	4a1e      	ldr	r2, [pc, #120]	; (8000264 <HAL_MspInit+0x80>)
 80001ec:	4b1d      	ldr	r3, [pc, #116]	; (8000264 <HAL_MspInit+0x80>)
 80001ee:	699b      	ldr	r3, [r3, #24]
 80001f0:	f043 0301 	orr.w	r3, r3, #1
 80001f4:	6193      	str	r3, [r2, #24]
 80001f6:	4b1b      	ldr	r3, [pc, #108]	; (8000264 <HAL_MspInit+0x80>)
 80001f8:	699b      	ldr	r3, [r3, #24]
 80001fa:	f003 0301 	and.w	r3, r3, #1
 80001fe:	607b      	str	r3, [r7, #4]
 8000200:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000202:	2003      	movs	r0, #3
 8000204:	f000 fb66 	bl	80008d4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000208:	f06f 000b 	mvn.w	r0, #11
 800020c:	2100      	movs	r1, #0
 800020e:	2200      	movs	r2, #0
 8000210:	f000 fb6a 	bl	80008e8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000214:	f06f 000a 	mvn.w	r0, #10
 8000218:	2100      	movs	r1, #0
 800021a:	2200      	movs	r2, #0
 800021c:	f000 fb64 	bl	80008e8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000220:	f06f 0009 	mvn.w	r0, #9
 8000224:	2100      	movs	r1, #0
 8000226:	2200      	movs	r2, #0
 8000228:	f000 fb5e 	bl	80008e8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800022c:	f06f 0004 	mvn.w	r0, #4
 8000230:	2100      	movs	r1, #0
 8000232:	2200      	movs	r2, #0
 8000234:	f000 fb58 	bl	80008e8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000238:	f06f 0003 	mvn.w	r0, #3
 800023c:	2100      	movs	r1, #0
 800023e:	2200      	movs	r2, #0
 8000240:	f000 fb52 	bl	80008e8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000244:	f06f 0001 	mvn.w	r0, #1
 8000248:	210f      	movs	r1, #15
 800024a:	2200      	movs	r2, #0
 800024c:	f000 fb4c 	bl	80008e8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8000250:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000254:	210f      	movs	r1, #15
 8000256:	2200      	movs	r2, #0
 8000258:	f000 fb46 	bl	80008e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800025c:	3708      	adds	r7, #8
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	40021000 	.word	0x40021000

08000268 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b08a      	sub	sp, #40	; 0x28
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a22      	ldr	r2, [pc, #136]	; (8000300 <HAL_UART_MspInit+0x98>)
 8000276:	4293      	cmp	r3, r2
 8000278:	d11c      	bne.n	80002b4 <HAL_UART_MspInit+0x4c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800027a:	4a22      	ldr	r2, [pc, #136]	; (8000304 <HAL_UART_MspInit+0x9c>)
 800027c:	4b21      	ldr	r3, [pc, #132]	; (8000304 <HAL_UART_MspInit+0x9c>)
 800027e:	699b      	ldr	r3, [r3, #24]
 8000280:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000284:	6193      	str	r3, [r2, #24]
 8000286:	4b1f      	ldr	r3, [pc, #124]	; (8000304 <HAL_UART_MspInit+0x9c>)
 8000288:	699b      	ldr	r3, [r3, #24]
 800028a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800028e:	613b      	str	r3, [r7, #16]
 8000290:	693b      	ldr	r3, [r7, #16]

    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000292:	2330      	movs	r3, #48	; 0x30
 8000294:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000296:	2302      	movs	r3, #2
 8000298:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800029a:	2301      	movs	r3, #1
 800029c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800029e:	2300      	movs	r3, #0
 80002a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80002a2:	2307      	movs	r3, #7
 80002a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002a6:	f107 0314 	add.w	r3, r7, #20
 80002aa:	4817      	ldr	r0, [pc, #92]	; (8000308 <HAL_UART_MspInit+0xa0>)
 80002ac:	4619      	mov	r1, r3
 80002ae:	f001 ff25 	bl	80020fc <HAL_GPIO_Init>
 80002b2:	e021      	b.n	80002f8 <HAL_UART_MspInit+0x90>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a14      	ldr	r2, [pc, #80]	; (800030c <HAL_UART_MspInit+0xa4>)
 80002ba:	4293      	cmp	r3, r2
 80002bc:	d11c      	bne.n	80002f8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80002be:	4a11      	ldr	r2, [pc, #68]	; (8000304 <HAL_UART_MspInit+0x9c>)
 80002c0:	4b10      	ldr	r3, [pc, #64]	; (8000304 <HAL_UART_MspInit+0x9c>)
 80002c2:	69db      	ldr	r3, [r3, #28]
 80002c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002c8:	61d3      	str	r3, [r2, #28]
 80002ca:	4b0e      	ldr	r3, [pc, #56]	; (8000304 <HAL_UART_MspInit+0x9c>)
 80002cc:	69db      	ldr	r3, [r3, #28]
 80002ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002d2:	60fb      	str	r3, [r7, #12]
 80002d4:	68fb      	ldr	r3, [r7, #12]

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80002d6:	230c      	movs	r3, #12
 80002d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002da:	2302      	movs	r3, #2
 80002dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002de:	2300      	movs	r3, #0
 80002e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002e2:	2300      	movs	r3, #0
 80002e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80002e6:	2307      	movs	r3, #7
 80002e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002ea:	f107 0314 	add.w	r3, r7, #20
 80002ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002f2:	4619      	mov	r1, r3
 80002f4:	f001 ff02 	bl	80020fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80002f8:	3728      	adds	r7, #40	; 0x28
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	40013800 	.word	0x40013800
 8000304:	40021000 	.word	0x40021000
 8000308:	48000800 	.word	0x48000800
 800030c:	40004400 	.word	0x40004400

08000310 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b08c      	sub	sp, #48	; 0x30
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000318:	2300      	movs	r3, #0
 800031a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800031c:	2300      	movs	r3, #0
 800031e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8000320:	2019      	movs	r0, #25
 8000322:	6879      	ldr	r1, [r7, #4]
 8000324:	2200      	movs	r2, #0
 8000326:	f000 fadf 	bl	80008e8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 800032a:	2019      	movs	r0, #25
 800032c:	f000 faf8 	bl	8000920 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000330:	4a1e      	ldr	r2, [pc, #120]	; (80003ac <HAL_InitTick+0x9c>)
 8000332:	4b1e      	ldr	r3, [pc, #120]	; (80003ac <HAL_InitTick+0x9c>)
 8000334:	699b      	ldr	r3, [r3, #24]
 8000336:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800033a:	6193      	str	r3, [r2, #24]
 800033c:	4b1b      	ldr	r3, [pc, #108]	; (80003ac <HAL_InitTick+0x9c>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000344:	60fb      	str	r3, [r7, #12]
 8000346:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000348:	f107 0214 	add.w	r2, r7, #20
 800034c:	f107 0310 	add.w	r3, r7, #16
 8000350:	4610      	mov	r0, r2
 8000352:	4619      	mov	r1, r3
 8000354:	f001 fea2 	bl	800209c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000358:	f001 fe7e 	bl	8002058 <HAL_RCC_GetPCLK2Freq>
 800035c:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800035e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000360:	4a13      	ldr	r2, [pc, #76]	; (80003b0 <HAL_InitTick+0xa0>)
 8000362:	fba2 2303 	umull	r2, r3, r2, r3
 8000366:	0c9b      	lsrs	r3, r3, #18
 8000368:	3b01      	subs	r3, #1
 800036a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800036c:	4b11      	ldr	r3, [pc, #68]	; (80003b4 <HAL_InitTick+0xa4>)
 800036e:	4a12      	ldr	r2, [pc, #72]	; (80003b8 <HAL_InitTick+0xa8>)
 8000370:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000372:	4b10      	ldr	r3, [pc, #64]	; (80003b4 <HAL_InitTick+0xa4>)
 8000374:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000378:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800037a:	4a0e      	ldr	r2, [pc, #56]	; (80003b4 <HAL_InitTick+0xa4>)
 800037c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800037e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000380:	4b0c      	ldr	r3, [pc, #48]	; (80003b4 <HAL_InitTick+0xa4>)
 8000382:	2200      	movs	r2, #0
 8000384:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000386:	4b0b      	ldr	r3, [pc, #44]	; (80003b4 <HAL_InitTick+0xa4>)
 8000388:	2200      	movs	r2, #0
 800038a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800038c:	4809      	ldr	r0, [pc, #36]	; (80003b4 <HAL_InitTick+0xa4>)
 800038e:	f002 fc7b 	bl	8002c88 <HAL_TIM_Base_Init>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d104      	bne.n	80003a2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000398:	4806      	ldr	r0, [pc, #24]	; (80003b4 <HAL_InitTick+0xa4>)
 800039a:	f002 fcab 	bl	8002cf4 <HAL_TIM_Base_Start_IT>
 800039e:	4603      	mov	r3, r0
 80003a0:	e000      	b.n	80003a4 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80003a2:	2301      	movs	r3, #1
}
 80003a4:	4618      	mov	r0, r3
 80003a6:	3730      	adds	r7, #48	; 0x30
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	40021000 	.word	0x40021000
 80003b0:	431bde83 	.word	0x431bde83
 80003b4:	2000154c 	.word	0x2000154c
 80003b8:	40012c00 	.word	0x40012c00

080003bc <main>:
void Error_Handler(void);
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);

int main(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003c0:	f000 f990 	bl	80006e4 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80003c4:	f000 f834 	bl	8000430 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003c8:	f000 f8a8 	bl	800051c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80003cc:	f000 f878 	bl	80004c0 <MX_USART1_UART_Init>

  SEGGER_SYSVIEW_Conf();
 80003d0:	f003 fea2 	bl	8004118 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start(); // start SystemView
 80003d4:	f003 fb8a 	bl	8003aec <SEGGER_SYSVIEW_Start>
  //setvbuf(stdin, NULL, _IONBF, 0);

  /* Infinite loop */
	while(1){
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	// Debugging, watch Calculation Time
 80003d8:	4810      	ldr	r0, [pc, #64]	; (800041c <main+0x60>)
 80003da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003de:	2200      	movs	r2, #0
 80003e0:	f001 fffc 	bl	80023dc <HAL_GPIO_WritePin>
		  SEGGER_SYSVIEW_Print("LED ON");
 80003e4:	480e      	ldr	r0, [pc, #56]	; (8000420 <main+0x64>)
 80003e6:	f003 fe2f 	bl	8004048 <SEGGER_SYSVIEW_Print>
		  HAL_UART_Receive( &huart1, (uint8_t *)aRxBuffer,sizeof(aRxBuffer) , HAL_MAX_DELAY);
 80003ea:	480e      	ldr	r0, [pc, #56]	; (8000424 <main+0x68>)
 80003ec:	490e      	ldr	r1, [pc, #56]	; (8000428 <main+0x6c>)
 80003ee:	2204      	movs	r2, #4
 80003f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80003f4:	f002 f8ea 	bl	80025cc <HAL_UART_Receive>
		  HAL_UART_Transmit( &huart1, (uint8_t *)aRxBuffer,sizeof(aRxBuffer) , HAL_MAX_DELAY);
 80003f8:	480a      	ldr	r0, [pc, #40]	; (8000424 <main+0x68>)
 80003fa:	490b      	ldr	r1, [pc, #44]	; (8000428 <main+0x6c>)
 80003fc:	2204      	movs	r2, #4
 80003fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000402:	f002 f855 	bl	80024b0 <HAL_UART_Transmit>
		  //HAL_UART_Transmit(&huart1, (uint8_t*) newline, 2, 10);
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);	// Debugging, watch Calculation Time
 8000406:	4805      	ldr	r0, [pc, #20]	; (800041c <main+0x60>)
 8000408:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800040c:	2201      	movs	r2, #1
 800040e:	f001 ffe5 	bl	80023dc <HAL_GPIO_WritePin>
		  SEGGER_SYSVIEW_Print("LED OFF");
 8000412:	4806      	ldr	r0, [pc, #24]	; (800042c <main+0x70>)
 8000414:	f003 fe18 	bl	8004048 <SEGGER_SYSVIEW_Print>
		  //HAL_Delay(500);
	}
 8000418:	e7de      	b.n	80003d8 <main+0x1c>
 800041a:	bf00      	nop
 800041c:	48000400 	.word	0x48000400
 8000420:	08004214 	.word	0x08004214
 8000424:	2000158c 	.word	0x2000158c
 8000428:	200015fc 	.word	0x200015fc
 800042c:	0800421c 	.word	0x0800421c

08000430 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b090      	sub	sp, #64	; 0x40
 8000434:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000436:	2302      	movs	r3, #2
 8000438:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800043a:	2301      	movs	r3, #1
 800043c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800043e:	2310      	movs	r3, #16
 8000440:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000442:	2302      	movs	r3, #2
 8000444:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000446:	2300      	movs	r3, #0
 8000448:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800044a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800044e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000450:	f107 0318 	add.w	r3, r7, #24
 8000454:	4618      	mov	r0, r3
 8000456:	f000 fa99 	bl	800098c <HAL_RCC_OscConfig>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000460:	f000 f8c6 	bl	80005f0 <Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000464:	230f      	movs	r3, #15
 8000466:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000468:	2302      	movs	r3, #2
 800046a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800046c:	2300      	movs	r3, #0
 800046e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000470:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000474:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000476:	2300      	movs	r3, #0
 8000478:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800047a:	1d3b      	adds	r3, r7, #4
 800047c:	4618      	mov	r0, r3
 800047e:	2102      	movs	r1, #2
 8000480:	f001 fb50 	bl	8001b24 <HAL_RCC_ClockConfig>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800048a:	f000 f8b1 	bl	80005f0 <Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800048e:	f001 fdb5 	bl	8001ffc <HAL_RCC_GetHCLKFreq>
 8000492:	4602      	mov	r2, r0
 8000494:	4b09      	ldr	r3, [pc, #36]	; (80004bc <SystemClock_Config+0x8c>)
 8000496:	fba3 2302 	umull	r2, r3, r3, r2
 800049a:	099b      	lsrs	r3, r3, #6
 800049c:	4618      	mov	r0, r3
 800049e:	f000 fa4d 	bl	800093c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80004a2:	2004      	movs	r0, #4
 80004a4:	f000 fa56 	bl	8000954 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80004a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80004ac:	210f      	movs	r1, #15
 80004ae:	2200      	movs	r2, #0
 80004b0:	f000 fa1a 	bl	80008e8 <HAL_NVIC_SetPriority>
}
 80004b4:	3740      	adds	r7, #64	; 0x40
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	10624dd3 	.word	0x10624dd3

080004c0 <MX_USART1_UART_Init>:

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80004c4:	4b13      	ldr	r3, [pc, #76]	; (8000514 <MX_USART1_UART_Init+0x54>)
 80004c6:	4a14      	ldr	r2, [pc, #80]	; (8000518 <MX_USART1_UART_Init+0x58>)
 80004c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80004ca:	4b12      	ldr	r3, [pc, #72]	; (8000514 <MX_USART1_UART_Init+0x54>)
 80004cc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80004d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004d2:	4b10      	ldr	r3, [pc, #64]	; (8000514 <MX_USART1_UART_Init+0x54>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004d8:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <MX_USART1_UART_Init+0x54>)
 80004da:	2200      	movs	r2, #0
 80004dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004de:	4b0d      	ldr	r3, [pc, #52]	; (8000514 <MX_USART1_UART_Init+0x54>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004e4:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <MX_USART1_UART_Init+0x54>)
 80004e6:	220c      	movs	r2, #12
 80004e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004ea:	4b0a      	ldr	r3, [pc, #40]	; (8000514 <MX_USART1_UART_Init+0x54>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004f0:	4b08      	ldr	r3, [pc, #32]	; (8000514 <MX_USART1_UART_Init+0x54>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004f6:	4b07      	ldr	r3, [pc, #28]	; (8000514 <MX_USART1_UART_Init+0x54>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004fc:	4b05      	ldr	r3, [pc, #20]	; (8000514 <MX_USART1_UART_Init+0x54>)
 80004fe:	2200      	movs	r2, #0
 8000500:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000502:	4804      	ldr	r0, [pc, #16]	; (8000514 <MX_USART1_UART_Init+0x54>)
 8000504:	f001 ff82 	bl	800240c <HAL_UART_Init>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800050e:	f000 f86f 	bl	80005f0 <Error_Handler>
  }

}
 8000512:	bd80      	pop	{r7, pc}
 8000514:	2000158c 	.word	0x2000158c
 8000518:	40013800 	.word	0x40013800

0800051c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b08a      	sub	sp, #40	; 0x28
 8000520:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000522:	4a2a      	ldr	r2, [pc, #168]	; (80005cc <MX_GPIO_Init+0xb0>)
 8000524:	4b29      	ldr	r3, [pc, #164]	; (80005cc <MX_GPIO_Init+0xb0>)
 8000526:	695b      	ldr	r3, [r3, #20]
 8000528:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800052c:	6153      	str	r3, [r2, #20]
 800052e:	4b27      	ldr	r3, [pc, #156]	; (80005cc <MX_GPIO_Init+0xb0>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000536:	613b      	str	r3, [r7, #16]
 8000538:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800053a:	4a24      	ldr	r2, [pc, #144]	; (80005cc <MX_GPIO_Init+0xb0>)
 800053c:	4b23      	ldr	r3, [pc, #140]	; (80005cc <MX_GPIO_Init+0xb0>)
 800053e:	695b      	ldr	r3, [r3, #20]
 8000540:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000544:	6153      	str	r3, [r2, #20]
 8000546:	4b21      	ldr	r3, [pc, #132]	; (80005cc <MX_GPIO_Init+0xb0>)
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000552:	4a1e      	ldr	r2, [pc, #120]	; (80005cc <MX_GPIO_Init+0xb0>)
 8000554:	4b1d      	ldr	r3, [pc, #116]	; (80005cc <MX_GPIO_Init+0xb0>)
 8000556:	695b      	ldr	r3, [r3, #20]
 8000558:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800055c:	6153      	str	r3, [r2, #20]
 800055e:	4b1b      	ldr	r3, [pc, #108]	; (80005cc <MX_GPIO_Init+0xb0>)
 8000560:	695b      	ldr	r3, [r3, #20]
 8000562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056a:	4a18      	ldr	r2, [pc, #96]	; (80005cc <MX_GPIO_Init+0xb0>)
 800056c:	4b17      	ldr	r3, [pc, #92]	; (80005cc <MX_GPIO_Init+0xb0>)
 800056e:	695b      	ldr	r3, [r3, #20]
 8000570:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000574:	6153      	str	r3, [r2, #20]
 8000576:	4b15      	ldr	r3, [pc, #84]	; (80005cc <MX_GPIO_Init+0xb0>)
 8000578:	695b      	ldr	r3, [r3, #20]
 800057a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000582:	4813      	ldr	r0, [pc, #76]	; (80005d0 <MX_GPIO_Init+0xb4>)
 8000584:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000588:	2200      	movs	r2, #0
 800058a:	f001 ff27 	bl	80023dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800058e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000594:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <MX_GPIO_Init+0xb8>)
 8000596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800059c:	f107 0314 	add.w	r3, r7, #20
 80005a0:	480d      	ldr	r0, [pc, #52]	; (80005d8 <MX_GPIO_Init+0xbc>)
 80005a2:	4619      	mov	r1, r3
 80005a4:	f001 fdaa 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ae:	2301      	movs	r3, #1
 80005b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b2:	2300      	movs	r3, #0
 80005b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b6:	2300      	movs	r3, #0
 80005b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	4804      	ldr	r0, [pc, #16]	; (80005d0 <MX_GPIO_Init+0xb4>)
 80005c0:	4619      	mov	r1, r3
 80005c2:	f001 fd9b 	bl	80020fc <HAL_GPIO_Init>

}
 80005c6:	3728      	adds	r7, #40	; 0x28
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40021000 	.word	0x40021000
 80005d0:	48000400 	.word	0x48000400
 80005d4:	10210000 	.word	0x10210000
 80005d8:	48000800 	.word	0x48000800

080005dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
    //HAL_IncTick();
  }
/* USER CODE BEGIN Callback 1 */

/* USER CODE END Callback 1 */
}
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
  }
 80005f4:	e7fe      	b.n	80005f4 <Error_Handler+0x4>
 80005f6:	bf00      	nop

080005f8 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005fc:	4a1f      	ldr	r2, [pc, #124]	; (800067c <SystemInit+0x84>)
 80005fe:	4b1f      	ldr	r3, [pc, #124]	; (800067c <SystemInit+0x84>)
 8000600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000604:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000608:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800060c:	4a1c      	ldr	r2, [pc, #112]	; (8000680 <SystemInit+0x88>)
 800060e:	4b1c      	ldr	r3, [pc, #112]	; (8000680 <SystemInit+0x88>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8000618:	4919      	ldr	r1, [pc, #100]	; (8000680 <SystemInit+0x88>)
 800061a:	4b19      	ldr	r3, [pc, #100]	; (8000680 <SystemInit+0x88>)
 800061c:	685a      	ldr	r2, [r3, #4]
 800061e:	4b19      	ldr	r3, [pc, #100]	; (8000684 <SystemInit+0x8c>)
 8000620:	4013      	ands	r3, r2
 8000622:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000624:	4a16      	ldr	r2, [pc, #88]	; (8000680 <SystemInit+0x88>)
 8000626:	4b16      	ldr	r3, [pc, #88]	; (8000680 <SystemInit+0x88>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800062e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000632:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000634:	4a12      	ldr	r2, [pc, #72]	; (8000680 <SystemInit+0x88>)
 8000636:	4b12      	ldr	r3, [pc, #72]	; (8000680 <SystemInit+0x88>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800063e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000640:	4a0f      	ldr	r2, [pc, #60]	; (8000680 <SystemInit+0x88>)
 8000642:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <SystemInit+0x88>)
 8000644:	685b      	ldr	r3, [r3, #4]
 8000646:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800064a:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 800064c:	4a0c      	ldr	r2, [pc, #48]	; (8000680 <SystemInit+0x88>)
 800064e:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <SystemInit+0x88>)
 8000650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000652:	f023 030f 	bic.w	r3, r3, #15
 8000656:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8000658:	4909      	ldr	r1, [pc, #36]	; (8000680 <SystemInit+0x88>)
 800065a:	4b09      	ldr	r3, [pc, #36]	; (8000680 <SystemInit+0x88>)
 800065c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800065e:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <SystemInit+0x90>)
 8000660:	4013      	ands	r3, r2
 8000662:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <SystemInit+0x88>)
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800066a:	4b04      	ldr	r3, [pc, #16]	; (800067c <SystemInit+0x84>)
 800066c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000670:	609a      	str	r2, [r3, #8]
#endif
}
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	e000ed00 	.word	0xe000ed00
 8000680:	40021000 	.word	0x40021000
 8000684:	f87fc00c 	.word	0xf87fc00c
 8000688:	ff00fccc 	.word	0xff00fccc

0800068c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000690:	f000 f83e 	bl	8000710 <HAL_IncTick>
  //HAL_SYSTICK_IRQHandler();
  //HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop

08000698 <TIM1_UP_TIM16_IRQHandler>:

/**
* @brief This function handles TIM1 update and TIM16 interrupts.
*/
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800069c:	4801      	ldr	r0, [pc, #4]	; (80006a4 <TIM1_UP_TIM16_IRQHandler+0xc>)
 800069e:	f002 fb45 	bl	8002d2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	2000154c 	.word	0x2000154c

080006a8 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 80006b0:	370c      	adds	r7, #12
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop

080006d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop

080006e4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006e8:	4a08      	ldr	r2, [pc, #32]	; (800070c <HAL_Init+0x28>)
 80006ea:	4b08      	ldr	r3, [pc, #32]	; (800070c <HAL_Init+0x28>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f043 0310 	orr.w	r3, r3, #16
 80006f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006f4:	2003      	movs	r0, #3
 80006f6:	f000 f8ed 	bl	80008d4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006fa:	2000      	movs	r0, #0
 80006fc:	f7ff fe08 	bl	8000310 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000700:	f7ff fd70 	bl	80001e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000704:	2300      	movs	r3, #0
}
 8000706:	4618      	mov	r0, r3
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40022000 	.word	0x40022000

08000710 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  uwTick++;
 8000714:	4b04      	ldr	r3, [pc, #16]	; (8000728 <HAL_IncTick+0x18>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	3301      	adds	r3, #1
 800071a:	4a03      	ldr	r2, [pc, #12]	; (8000728 <HAL_IncTick+0x18>)
 800071c:	6013      	str	r3, [r2, #0]
}
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	20001600 	.word	0x20001600

0800072c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000730:	4b03      	ldr	r3, [pc, #12]	; (8000740 <HAL_GetTick+0x14>)
 8000732:	681b      	ldr	r3, [r3, #0]
}
 8000734:	4618      	mov	r0, r3
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	20001600 	.word	0x20001600

08000744 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000744:	b480      	push	{r7}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	f003 0307 	and.w	r3, r3, #7
 8000752:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <NVIC_SetPriorityGrouping+0x44>)
 8000756:	68db      	ldr	r3, [r3, #12]
 8000758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800075a:	68ba      	ldr	r2, [r7, #8]
 800075c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000760:	4013      	ands	r3, r2
 8000762:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800076c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000774:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000776:	4a04      	ldr	r2, [pc, #16]	; (8000788 <NVIC_SetPriorityGrouping+0x44>)
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	60d3      	str	r3, [r2, #12]
}
 800077c:	3714      	adds	r7, #20
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	e000ed00 	.word	0xe000ed00

0800078c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000790:	4b04      	ldr	r3, [pc, #16]	; (80007a4 <NVIC_GetPriorityGrouping+0x18>)
 8000792:	68db      	ldr	r3, [r3, #12]
 8000794:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000798:	0a1b      	lsrs	r3, r3, #8
}
 800079a:	4618      	mov	r0, r3
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	e000ed00 	.word	0xe000ed00

080007a8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80007b2:	4908      	ldr	r1, [pc, #32]	; (80007d4 <NVIC_EnableIRQ+0x2c>)
 80007b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b8:	095b      	lsrs	r3, r3, #5
 80007ba:	79fa      	ldrb	r2, [r7, #7]
 80007bc:	f002 021f 	and.w	r2, r2, #31
 80007c0:	2001      	movs	r0, #1
 80007c2:	fa00 f202 	lsl.w	r2, r0, r2
 80007c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr
 80007d4:	e000e100 	.word	0xe000e100

080007d8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	6039      	str	r1, [r7, #0]
 80007e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80007e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	da0b      	bge.n	8000804 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ec:	490d      	ldr	r1, [pc, #52]	; (8000824 <NVIC_SetPriority+0x4c>)
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	f003 030f 	and.w	r3, r3, #15
 80007f4:	3b04      	subs	r3, #4
 80007f6:	683a      	ldr	r2, [r7, #0]
 80007f8:	b2d2      	uxtb	r2, r2
 80007fa:	0112      	lsls	r2, r2, #4
 80007fc:	b2d2      	uxtb	r2, r2
 80007fe:	440b      	add	r3, r1
 8000800:	761a      	strb	r2, [r3, #24]
 8000802:	e009      	b.n	8000818 <NVIC_SetPriority+0x40>
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000804:	4908      	ldr	r1, [pc, #32]	; (8000828 <NVIC_SetPriority+0x50>)
 8000806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080a:	683a      	ldr	r2, [r7, #0]
 800080c:	b2d2      	uxtb	r2, r2
 800080e:	0112      	lsls	r2, r2, #4
 8000810:	b2d2      	uxtb	r2, r2
 8000812:	440b      	add	r3, r1
 8000814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	e000ed00 	.word	0xe000ed00
 8000828:	e000e100 	.word	0xe000e100

0800082c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800082c:	b480      	push	{r7}
 800082e:	b089      	sub	sp, #36	; 0x24
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	f003 0307 	and.w	r3, r3, #7
 800083e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000840:	69fb      	ldr	r3, [r7, #28]
 8000842:	f1c3 0307 	rsb	r3, r3, #7
 8000846:	2b04      	cmp	r3, #4
 8000848:	bf28      	it	cs
 800084a:	2304      	movcs	r3, #4
 800084c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	3304      	adds	r3, #4
 8000852:	2b06      	cmp	r3, #6
 8000854:	d902      	bls.n	800085c <NVIC_EncodePriority+0x30>
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	3b03      	subs	r3, #3
 800085a:	e000      	b.n	800085e <NVIC_EncodePriority+0x32>
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000860:	69bb      	ldr	r3, [r7, #24]
 8000862:	2201      	movs	r2, #1
 8000864:	fa02 f303 	lsl.w	r3, r2, r3
 8000868:	1e5a      	subs	r2, r3, #1
 800086a:	68bb      	ldr	r3, [r7, #8]
 800086c:	401a      	ands	r2, r3
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	2101      	movs	r1, #1
 8000876:	fa01 f303 	lsl.w	r3, r1, r3
 800087a:	1e59      	subs	r1, r3, #1
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000880:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8000882:	4618      	mov	r0, r3
 8000884:	3724      	adds	r7, #36	; 0x24
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop

08000890 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	3b01      	subs	r3, #1
 800089c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008a0:	d301      	bcc.n	80008a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008a2:	2301      	movs	r3, #1
 80008a4:	e00f      	b.n	80008c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008a6:	4a0a      	ldr	r2, [pc, #40]	; (80008d0 <SysTick_Config+0x40>)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	3b01      	subs	r3, #1
 80008ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008b2:	210f      	movs	r1, #15
 80008b4:	f7ff ff90 	bl	80007d8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008b8:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <SysTick_Config+0x40>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008be:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <SysTick_Config+0x40>)
 80008c0:	2207      	movs	r2, #7
 80008c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008c4:	2300      	movs	r3, #0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	e000e010 	.word	0xe000e010

080008d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f7ff ff31 	bl	8000744 <NVIC_SetPriorityGrouping>
}
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	607a      	str	r2, [r7, #4]
 80008f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008fa:	f7ff ff47 	bl	800078c <NVIC_GetPriorityGrouping>
 80008fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000900:	6978      	ldr	r0, [r7, #20]
 8000902:	68b9      	ldr	r1, [r7, #8]
 8000904:	687a      	ldr	r2, [r7, #4]
 8000906:	f7ff ff91 	bl	800082c <NVIC_EncodePriority>
 800090a:	4602      	mov	r2, r0
 800090c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000910:	4618      	mov	r0, r3
 8000912:	4611      	mov	r1, r2
 8000914:	f7ff ff60 	bl	80007d8 <NVIC_SetPriority>
}
 8000918:	3718      	adds	r7, #24
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop

08000920 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800092a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092e:	4618      	mov	r0, r3
 8000930:	f7ff ff3a 	bl	80007a8 <NVIC_EnableIRQ>
}
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop

0800093c <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	f7ff ffa3 	bl	8000890 <SysTick_Config>
 800094a:	4603      	mov	r3, r0
}
 800094c:	4618      	mov	r0, r3
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2b04      	cmp	r3, #4
 8000960:	d106      	bne.n	8000970 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000962:	4a09      	ldr	r2, [pc, #36]	; (8000988 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000964:	4b08      	ldr	r3, [pc, #32]	; (8000988 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f043 0304 	orr.w	r3, r3, #4
 800096c:	6013      	str	r3, [r2, #0]
 800096e:	e005      	b.n	800097c <HAL_SYSTICK_CLKSourceConfig+0x28>
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000970:	4a05      	ldr	r2, [pc, #20]	; (8000988 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000972:	4b05      	ldr	r3, [pc, #20]	; (8000988 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f023 0304 	bic.w	r3, r3, #4
 800097a:	6013      	str	r3, [r2, #0]
  }
}
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	e000e010 	.word	0xe000e010

0800098c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000992:	af00      	add	r7, sp, #0
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	6018      	str	r0, [r3, #0]
   uint32_t tickstart = 0U;
 8000998:	2300      	movs	r3, #0
 800099a:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f003 0301 	and.w	r3, r3, #1
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	f000 81cc 	beq.w	8000d46 <HAL_RCC_OscConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80009ae:	4baf      	ldr	r3, [pc, #700]	; (8000c6c <HAL_RCC_OscConfig+0x2e0>)
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	f003 030c 	and.w	r3, r3, #12
 80009b6:	2b04      	cmp	r3, #4
 80009b8:	d00b      	beq.n	80009d2 <HAL_RCC_OscConfig+0x46>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80009ba:	4bac      	ldr	r3, [pc, #688]	; (8000c6c <HAL_RCC_OscConfig+0x2e0>)
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	f003 030c 	and.w	r3, r3, #12
 80009c2:	2b08      	cmp	r3, #8
 80009c4:	d179      	bne.n	8000aba <HAL_RCC_OscConfig+0x12e>
 80009c6:	4ba9      	ldr	r3, [pc, #676]	; (8000c6c <HAL_RCC_OscConfig+0x2e0>)
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d073      	beq.n	8000aba <HAL_RCC_OscConfig+0x12e>
 80009d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009d6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009da:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80009de:	fa93 f3a3 	rbit	r3, r3
 80009e2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80009e6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009ea:	fab3 f383 	clz	r3, r3
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	f043 0320 	orr.w	r3, r3, #32
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	095b      	lsrs	r3, r3, #5
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d102      	bne.n	8000a06 <HAL_RCC_OscConfig+0x7a>
 8000a00:	4b9a      	ldr	r3, [pc, #616]	; (8000c6c <HAL_RCC_OscConfig+0x2e0>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	e035      	b.n	8000a72 <HAL_RCC_OscConfig+0xe6>
 8000a06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a0a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a0e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000a12:	fa93 f3a3 	rbit	r3, r3
 8000a16:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000a1a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000a1e:	fab3 f383 	clz	r3, r3
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	f043 0320 	orr.w	r3, r3, #32
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	095b      	lsrs	r3, r3, #5
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	2b02      	cmp	r3, #2
 8000a32:	d102      	bne.n	8000a3a <HAL_RCC_OscConfig+0xae>
 8000a34:	4b8d      	ldr	r3, [pc, #564]	; (8000c6c <HAL_RCC_OscConfig+0x2e0>)
 8000a36:	6a1b      	ldr	r3, [r3, #32]
 8000a38:	e01b      	b.n	8000a72 <HAL_RCC_OscConfig+0xe6>
 8000a3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a3e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a42:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000a46:	fa93 f3a3 	rbit	r3, r3
 8000a4a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000a4e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000a52:	fab3 f383 	clz	r3, r3
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	f043 0320 	orr.w	r3, r3, #32
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	095b      	lsrs	r3, r3, #5
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	2b04      	cmp	r3, #4
 8000a66:	d102      	bne.n	8000a6e <HAL_RCC_OscConfig+0xe2>
 8000a68:	4b80      	ldr	r3, [pc, #512]	; (8000c6c <HAL_RCC_OscConfig+0x2e0>)
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	e001      	b.n	8000a72 <HAL_RCC_OscConfig+0xe6>
 8000a6e:	4b7f      	ldr	r3, [pc, #508]	; (8000c6c <HAL_RCC_OscConfig+0x2e0>)
 8000a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a76:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a7a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000a7e:	fa92 f2a2 	rbit	r2, r2
 8000a82:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000a86:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000a8a:	fab2 f282 	clz	r2, r2
 8000a8e:	b2d2      	uxtb	r2, r2
 8000a90:	f042 0220 	orr.w	r2, r2, #32
 8000a94:	b2d2      	uxtb	r2, r2
 8000a96:	b2d2      	uxtb	r2, r2
 8000a98:	f002 021f 	and.w	r2, r2, #31
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d007      	beq.n	8000ab8 <HAL_RCC_OscConfig+0x12c>
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d102      	bne.n	8000ab8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	f001 b831 	b.w	8001b1a <HAL_RCC_OscConfig+0x118e>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ab8:	e145      	b.n	8000d46 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ac4:	d106      	bne.n	8000ad4 <HAL_RCC_OscConfig+0x148>
 8000ac6:	4a69      	ldr	r2, [pc, #420]	; (8000c6c <HAL_RCC_OscConfig+0x2e0>)
 8000ac8:	4b68      	ldr	r3, [pc, #416]	; (8000c6c <HAL_RCC_OscConfig+0x2e0>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ad0:	6013      	str	r3, [r2, #0]
 8000ad2:	e030      	b.n	8000b36 <HAL_RCC_OscConfig+0x1aa>
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d10c      	bne.n	8000af8 <HAL_RCC_OscConfig+0x16c>
 8000ade:	4a63      	ldr	r2, [pc, #396]	; (8000c6c <HAL_RCC_OscConfig+0x2e0>)
 8000ae0:	4b62      	ldr	r3, [pc, #392]	; (8000c6c <HAL_RCC_OscConfig+0x2e0>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ae8:	6013      	str	r3, [r2, #0]
 8000aea:	4a60      	ldr	r2, [pc, #384]	; (8000c6c <HAL_RCC_OscConfig+0x2e0>)
 8000aec:	4b5f      	ldr	r3, [pc, #380]	; (8000c6c <HAL_RCC_OscConfig+0x2e0>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000af4:	6013      	str	r3, [r2, #0]
 8000af6:	e01e      	b.n	8000b36 <HAL_RCC_OscConfig+0x1aa>
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b02:	d10c      	bne.n	8000b1e <HAL_RCC_OscConfig+0x192>
 8000b04:	4a59      	ldr	r2, [pc, #356]	; (8000c6c <HAL_RCC_OscConfig+0x2e0>)
 8000b06:	4b59      	ldr	r3, [pc, #356]	; (8000c6c <HAL_RCC_OscConfig+0x2e0>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b0e:	6013      	str	r3, [r2, #0]
 8000b10:	4a56      	ldr	r2, [pc, #344]	; (8000c6c <HAL_RCC_OscConfig+0x2e0>)
 8000b12:	4b56      	ldr	r3, [pc, #344]	; (8000c6c <HAL_RCC_OscConfig+0x2e0>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b1a:	6013      	str	r3, [r2, #0]
 8000b1c:	e00b      	b.n	8000b36 <HAL_RCC_OscConfig+0x1aa>
 8000b1e:	4a53      	ldr	r2, [pc, #332]	; (8000c6c <HAL_RCC_OscConfig+0x2e0>)
 8000b20:	4b52      	ldr	r3, [pc, #328]	; (8000c6c <HAL_RCC_OscConfig+0x2e0>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b28:	6013      	str	r3, [r2, #0]
 8000b2a:	4a50      	ldr	r2, [pc, #320]	; (8000c6c <HAL_RCC_OscConfig+0x2e0>)
 8000b2c:	4b4f      	ldr	r3, [pc, #316]	; (8000c6c <HAL_RCC_OscConfig+0x2e0>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b34:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000b36:	494d      	ldr	r1, [pc, #308]	; (8000c6c <HAL_RCC_OscConfig+0x2e0>)
 8000b38:	4b4c      	ldr	r3, [pc, #304]	; (8000c6c <HAL_RCC_OscConfig+0x2e0>)
 8000b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b3c:	f023 020f 	bic.w	r2, r3, #15
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	689b      	ldr	r3, [r3, #8]
 8000b46:	4313      	orrs	r3, r2
 8000b48:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d07b      	beq.n	8000c4c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b54:	f7ff fdea 	bl	800072c <HAL_GetTick>
 8000b58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b5c:	e00a      	b.n	8000b74 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b5e:	f7ff fde5 	bl	800072c <HAL_GetTick>
 8000b62:	4602      	mov	r2, r0
 8000b64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	2b64      	cmp	r3, #100	; 0x64
 8000b6c:	d902      	bls.n	8000b74 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	f000 bfd3 	b.w	8001b1a <HAL_RCC_OscConfig+0x118e>
 8000b74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b78:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b7c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000b80:	fa93 f3a3 	rbit	r3, r3
 8000b84:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000b88:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b8c:	fab3 f383 	clz	r3, r3
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	f043 0320 	orr.w	r3, r3, #32
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	095b      	lsrs	r3, r3, #5
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d102      	bne.n	8000ba8 <HAL_RCC_OscConfig+0x21c>
 8000ba2:	4b32      	ldr	r3, [pc, #200]	; (8000c6c <HAL_RCC_OscConfig+0x2e0>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	e035      	b.n	8000c14 <HAL_RCC_OscConfig+0x288>
 8000ba8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bac:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bb0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000bb4:	fa93 f3a3 	rbit	r3, r3
 8000bb8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000bbc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000bc0:	fab3 f383 	clz	r3, r3
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	f043 0320 	orr.w	r3, r3, #32
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	095b      	lsrs	r3, r3, #5
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	2b02      	cmp	r3, #2
 8000bd4:	d102      	bne.n	8000bdc <HAL_RCC_OscConfig+0x250>
 8000bd6:	4b25      	ldr	r3, [pc, #148]	; (8000c6c <HAL_RCC_OscConfig+0x2e0>)
 8000bd8:	6a1b      	ldr	r3, [r3, #32]
 8000bda:	e01b      	b.n	8000c14 <HAL_RCC_OscConfig+0x288>
 8000bdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000be0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000be4:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000be8:	fa93 f3a3 	rbit	r3, r3
 8000bec:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000bf0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000bf4:	fab3 f383 	clz	r3, r3
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	f043 0320 	orr.w	r3, r3, #32
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	095b      	lsrs	r3, r3, #5
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	2b04      	cmp	r3, #4
 8000c08:	d102      	bne.n	8000c10 <HAL_RCC_OscConfig+0x284>
 8000c0a:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <HAL_RCC_OscConfig+0x2e0>)
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	e001      	b.n	8000c14 <HAL_RCC_OscConfig+0x288>
 8000c10:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <HAL_RCC_OscConfig+0x2e0>)
 8000c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c14:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c18:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c1c:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000c20:	fa92 f2a2 	rbit	r2, r2
 8000c24:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000c28:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b2d2      	uxtb	r2, r2
 8000c32:	f042 0220 	orr.w	r2, r2, #32
 8000c36:	b2d2      	uxtb	r2, r2
 8000c38:	b2d2      	uxtb	r2, r2
 8000c3a:	f002 021f 	and.w	r2, r2, #31
 8000c3e:	2101      	movs	r1, #1
 8000c40:	fa01 f202 	lsl.w	r2, r1, r2
 8000c44:	4013      	ands	r3, r2
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d089      	beq.n	8000b5e <HAL_RCC_OscConfig+0x1d2>
 8000c4a:	e07c      	b.n	8000d46 <HAL_RCC_OscConfig+0x3ba>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c4c:	f7ff fd6e 	bl	800072c <HAL_GetTick>
 8000c50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c54:	e00c      	b.n	8000c70 <HAL_RCC_OscConfig+0x2e4>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c56:	f7ff fd69 	bl	800072c <HAL_GetTick>
 8000c5a:	4602      	mov	r2, r0
 8000c5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	2b64      	cmp	r3, #100	; 0x64
 8000c64:	d904      	bls.n	8000c70 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8000c66:	2303      	movs	r3, #3
 8000c68:	f000 bf57 	b.w	8001b1a <HAL_RCC_OscConfig+0x118e>
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c74:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c78:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000c7c:	fa93 f3a3 	rbit	r3, r3
 8000c80:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000c84:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c88:	fab3 f383 	clz	r3, r3
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	f043 0320 	orr.w	r3, r3, #32
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	095b      	lsrs	r3, r3, #5
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d102      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x318>
 8000c9e:	4bb7      	ldr	r3, [pc, #732]	; (8000f7c <HAL_RCC_OscConfig+0x5f0>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	e035      	b.n	8000d10 <HAL_RCC_OscConfig+0x384>
 8000ca4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ca8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cac:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000cb0:	fa93 f3a3 	rbit	r3, r3
 8000cb4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000cb8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000cbc:	fab3 f383 	clz	r3, r3
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	f043 0320 	orr.w	r3, r3, #32
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	095b      	lsrs	r3, r3, #5
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	d102      	bne.n	8000cd8 <HAL_RCC_OscConfig+0x34c>
 8000cd2:	4baa      	ldr	r3, [pc, #680]	; (8000f7c <HAL_RCC_OscConfig+0x5f0>)
 8000cd4:	6a1b      	ldr	r3, [r3, #32]
 8000cd6:	e01b      	b.n	8000d10 <HAL_RCC_OscConfig+0x384>
 8000cd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cdc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ce0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000ce4:	fa93 f3a3 	rbit	r3, r3
 8000ce8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000cec:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000cf0:	fab3 f383 	clz	r3, r3
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	f043 0320 	orr.w	r3, r3, #32
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	095b      	lsrs	r3, r3, #5
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	2b04      	cmp	r3, #4
 8000d04:	d102      	bne.n	8000d0c <HAL_RCC_OscConfig+0x380>
 8000d06:	4b9d      	ldr	r3, [pc, #628]	; (8000f7c <HAL_RCC_OscConfig+0x5f0>)
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	e001      	b.n	8000d10 <HAL_RCC_OscConfig+0x384>
 8000d0c:	4b9b      	ldr	r3, [pc, #620]	; (8000f7c <HAL_RCC_OscConfig+0x5f0>)
 8000d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d10:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d14:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d18:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000d1c:	fa92 f2a2 	rbit	r2, r2
 8000d20:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000d24:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000d28:	fab2 f282 	clz	r2, r2
 8000d2c:	b2d2      	uxtb	r2, r2
 8000d2e:	f042 0220 	orr.w	r2, r2, #32
 8000d32:	b2d2      	uxtb	r2, r2
 8000d34:	b2d2      	uxtb	r2, r2
 8000d36:	f002 021f 	and.w	r2, r2, #31
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d40:	4013      	ands	r3, r2
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d187      	bne.n	8000c56 <HAL_RCC_OscConfig+0x2ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d46:	1d3b      	adds	r3, r7, #4
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f003 0302 	and.w	r3, r3, #2
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	f000 81d7 	beq.w	8001104 <HAL_RCC_OscConfig+0x778>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d56:	4b89      	ldr	r3, [pc, #548]	; (8000f7c <HAL_RCC_OscConfig+0x5f0>)
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f003 030c 	and.w	r3, r3, #12
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d00d      	beq.n	8000d7e <HAL_RCC_OscConfig+0x3f2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000d62:	4b86      	ldr	r3, [pc, #536]	; (8000f7c <HAL_RCC_OscConfig+0x5f0>)
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f003 030c 	and.w	r3, r3, #12
 8000d6a:	2b08      	cmp	r3, #8
 8000d6c:	f040 8090 	bne.w	8000e90 <HAL_RCC_OscConfig+0x504>
 8000d70:	4b82      	ldr	r3, [pc, #520]	; (8000f7c <HAL_RCC_OscConfig+0x5f0>)
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	f040 8089 	bne.w	8000e90 <HAL_RCC_OscConfig+0x504>
 8000d7e:	2302      	movs	r3, #2
 8000d80:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d84:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000d88:	fa93 f3a3 	rbit	r3, r3
 8000d8c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000d90:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d94:	fab3 f383 	clz	r3, r3
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	f043 0320 	orr.w	r3, r3, #32
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	095b      	lsrs	r3, r3, #5
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d102      	bne.n	8000db0 <HAL_RCC_OscConfig+0x424>
 8000daa:	4b74      	ldr	r3, [pc, #464]	; (8000f7c <HAL_RCC_OscConfig+0x5f0>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	e033      	b.n	8000e18 <HAL_RCC_OscConfig+0x48c>
 8000db0:	2302      	movs	r3, #2
 8000db2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000db6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000dba:	fa93 f3a3 	rbit	r3, r3
 8000dbe:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000dc2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000dc6:	fab3 f383 	clz	r3, r3
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	f043 0320 	orr.w	r3, r3, #32
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	095b      	lsrs	r3, r3, #5
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d102      	bne.n	8000de2 <HAL_RCC_OscConfig+0x456>
 8000ddc:	4b67      	ldr	r3, [pc, #412]	; (8000f7c <HAL_RCC_OscConfig+0x5f0>)
 8000dde:	6a1b      	ldr	r3, [r3, #32]
 8000de0:	e01a      	b.n	8000e18 <HAL_RCC_OscConfig+0x48c>
 8000de2:	2302      	movs	r3, #2
 8000de4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000de8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000dec:	fa93 f3a3 	rbit	r3, r3
 8000df0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000df4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000df8:	fab3 f383 	clz	r3, r3
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	f043 0320 	orr.w	r3, r3, #32
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	095b      	lsrs	r3, r3, #5
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	2b04      	cmp	r3, #4
 8000e0c:	d102      	bne.n	8000e14 <HAL_RCC_OscConfig+0x488>
 8000e0e:	4b5b      	ldr	r3, [pc, #364]	; (8000f7c <HAL_RCC_OscConfig+0x5f0>)
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	e001      	b.n	8000e18 <HAL_RCC_OscConfig+0x48c>
 8000e14:	4b59      	ldr	r3, [pc, #356]	; (8000f7c <HAL_RCC_OscConfig+0x5f0>)
 8000e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e18:	2202      	movs	r2, #2
 8000e1a:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e1e:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000e22:	fa92 f2a2 	rbit	r2, r2
 8000e26:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000e2a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000e2e:	fab2 f282 	clz	r2, r2
 8000e32:	b2d2      	uxtb	r2, r2
 8000e34:	f042 0220 	orr.w	r2, r2, #32
 8000e38:	b2d2      	uxtb	r2, r2
 8000e3a:	b2d2      	uxtb	r2, r2
 8000e3c:	f002 021f 	and.w	r2, r2, #31
 8000e40:	2101      	movs	r1, #1
 8000e42:	fa01 f202 	lsl.w	r2, r1, r2
 8000e46:	4013      	ands	r3, r2
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d007      	beq.n	8000e5c <HAL_RCC_OscConfig+0x4d0>
 8000e4c:	1d3b      	adds	r3, r7, #4
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	691b      	ldr	r3, [r3, #16]
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d002      	beq.n	8000e5c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	f000 be5f 	b.w	8001b1a <HAL_RCC_OscConfig+0x118e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e5c:	4847      	ldr	r0, [pc, #284]	; (8000f7c <HAL_RCC_OscConfig+0x5f0>)
 8000e5e:	4b47      	ldr	r3, [pc, #284]	; (8000f7c <HAL_RCC_OscConfig+0x5f0>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	6959      	ldr	r1, [r3, #20]
 8000e6c:	23f8      	movs	r3, #248	; 0xf8
 8000e6e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e72:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000e76:	fa93 f3a3 	rbit	r3, r3
 8000e7a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000e7e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8000e82:	fab3 f383 	clz	r3, r3
 8000e86:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	6003      	str	r3, [r0, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e8e:	e139      	b.n	8001104 <HAL_RCC_OscConfig+0x778>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e90:	1d3b      	adds	r3, r7, #4
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	691b      	ldr	r3, [r3, #16]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	f000 80a8 	beq.w	8000fec <HAL_RCC_OscConfig+0x660>
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea2:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000ea6:	fa93 f3a3 	rbit	r3, r3
 8000eaa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000eae:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000eb2:	fab3 f383 	clz	r3, r3
 8000eb6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000eba:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec6:	f7ff fc31 	bl	800072c <HAL_GetTick>
 8000eca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ece:	e00a      	b.n	8000ee6 <HAL_RCC_OscConfig+0x55a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ed0:	f7ff fc2c 	bl	800072c <HAL_GetTick>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d902      	bls.n	8000ee6 <HAL_RCC_OscConfig+0x55a>
          {
            return HAL_TIMEOUT;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	f000 be1a 	b.w	8001b1a <HAL_RCC_OscConfig+0x118e>
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eec:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000ef0:	fa93 f3a3 	rbit	r3, r3
 8000ef4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000ef8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000efc:	fab3 f383 	clz	r3, r3
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	f043 0320 	orr.w	r3, r3, #32
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	095b      	lsrs	r3, r3, #5
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d102      	bne.n	8000f18 <HAL_RCC_OscConfig+0x58c>
 8000f12:	4b1a      	ldr	r3, [pc, #104]	; (8000f7c <HAL_RCC_OscConfig+0x5f0>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	e035      	b.n	8000f84 <HAL_RCC_OscConfig+0x5f8>
 8000f18:	2302      	movs	r3, #2
 8000f1a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f1e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000f22:	fa93 f3a3 	rbit	r3, r3
 8000f26:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000f2a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8000f2e:	fab3 f383 	clz	r3, r3
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	f043 0320 	orr.w	r3, r3, #32
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	095b      	lsrs	r3, r3, #5
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d102      	bne.n	8000f4a <HAL_RCC_OscConfig+0x5be>
 8000f44:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <HAL_RCC_OscConfig+0x5f0>)
 8000f46:	6a1b      	ldr	r3, [r3, #32]
 8000f48:	e01c      	b.n	8000f84 <HAL_RCC_OscConfig+0x5f8>
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f50:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000f54:	fa93 f3a3 	rbit	r3, r3
 8000f58:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000f5c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000f60:	fab3 f383 	clz	r3, r3
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	f043 0320 	orr.w	r3, r3, #32
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	095b      	lsrs	r3, r3, #5
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2b04      	cmp	r3, #4
 8000f74:	d104      	bne.n	8000f80 <HAL_RCC_OscConfig+0x5f4>
 8000f76:	4b01      	ldr	r3, [pc, #4]	; (8000f7c <HAL_RCC_OscConfig+0x5f0>)
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	e003      	b.n	8000f84 <HAL_RCC_OscConfig+0x5f8>
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	4bc6      	ldr	r3, [pc, #792]	; (800129c <HAL_RCC_OscConfig+0x910>)
 8000f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f84:	2202      	movs	r2, #2
 8000f86:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f8a:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000f8e:	fa92 f2a2 	rbit	r2, r2
 8000f92:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000f96:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000f9a:	fab2 f282 	clz	r2, r2
 8000f9e:	b2d2      	uxtb	r2, r2
 8000fa0:	f042 0220 	orr.w	r2, r2, #32
 8000fa4:	b2d2      	uxtb	r2, r2
 8000fa6:	b2d2      	uxtb	r2, r2
 8000fa8:	f002 021f 	and.w	r2, r2, #31
 8000fac:	2101      	movs	r1, #1
 8000fae:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d08b      	beq.n	8000ed0 <HAL_RCC_OscConfig+0x544>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fb8:	48b8      	ldr	r0, [pc, #736]	; (800129c <HAL_RCC_OscConfig+0x910>)
 8000fba:	4bb8      	ldr	r3, [pc, #736]	; (800129c <HAL_RCC_OscConfig+0x910>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	6959      	ldr	r1, [r3, #20]
 8000fc8:	23f8      	movs	r3, #248	; 0xf8
 8000fca:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fce:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000fd2:	fa93 f3a3 	rbit	r3, r3
 8000fd6:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000fda:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000fde:	fab3 f383 	clz	r3, r3
 8000fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	6003      	str	r3, [r0, #0]
 8000fea:	e08b      	b.n	8001104 <HAL_RCC_OscConfig+0x778>
 8000fec:	2301      	movs	r3, #1
 8000fee:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ff2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000ff6:	fa93 f3a3 	rbit	r3, r3
 8000ffa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000ffe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001002:	fab3 f383 	clz	r3, r3
 8001006:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800100a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	461a      	mov	r2, r3
 8001012:	2300      	movs	r3, #0
 8001014:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001016:	f7ff fb89 	bl	800072c <HAL_GetTick>
 800101a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800101e:	e00a      	b.n	8001036 <HAL_RCC_OscConfig+0x6aa>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001020:	f7ff fb84 	bl	800072c <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	2b02      	cmp	r3, #2
 800102e:	d902      	bls.n	8001036 <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 8001030:	2303      	movs	r3, #3
 8001032:	f000 bd72 	b.w	8001b1a <HAL_RCC_OscConfig+0x118e>
 8001036:	2302      	movs	r3, #2
 8001038:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800103c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001040:	fa93 f3a3 	rbit	r3, r3
 8001044:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001048:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800104c:	fab3 f383 	clz	r3, r3
 8001050:	b2db      	uxtb	r3, r3
 8001052:	f043 0320 	orr.w	r3, r3, #32
 8001056:	b2db      	uxtb	r3, r3
 8001058:	b2db      	uxtb	r3, r3
 800105a:	095b      	lsrs	r3, r3, #5
 800105c:	b2db      	uxtb	r3, r3
 800105e:	2b01      	cmp	r3, #1
 8001060:	d102      	bne.n	8001068 <HAL_RCC_OscConfig+0x6dc>
 8001062:	4b8e      	ldr	r3, [pc, #568]	; (800129c <HAL_RCC_OscConfig+0x910>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	e033      	b.n	80010d0 <HAL_RCC_OscConfig+0x744>
 8001068:	2302      	movs	r3, #2
 800106a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800106e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001072:	fa93 f3a3 	rbit	r3, r3
 8001076:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800107a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800107e:	fab3 f383 	clz	r3, r3
 8001082:	b2db      	uxtb	r3, r3
 8001084:	f043 0320 	orr.w	r3, r3, #32
 8001088:	b2db      	uxtb	r3, r3
 800108a:	b2db      	uxtb	r3, r3
 800108c:	095b      	lsrs	r3, r3, #5
 800108e:	b2db      	uxtb	r3, r3
 8001090:	2b02      	cmp	r3, #2
 8001092:	d102      	bne.n	800109a <HAL_RCC_OscConfig+0x70e>
 8001094:	4b81      	ldr	r3, [pc, #516]	; (800129c <HAL_RCC_OscConfig+0x910>)
 8001096:	6a1b      	ldr	r3, [r3, #32]
 8001098:	e01a      	b.n	80010d0 <HAL_RCC_OscConfig+0x744>
 800109a:	2302      	movs	r3, #2
 800109c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80010a4:	fa93 f3a3 	rbit	r3, r3
 80010a8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80010ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80010b0:	fab3 f383 	clz	r3, r3
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	f043 0320 	orr.w	r3, r3, #32
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	095b      	lsrs	r3, r3, #5
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	2b04      	cmp	r3, #4
 80010c4:	d102      	bne.n	80010cc <HAL_RCC_OscConfig+0x740>
 80010c6:	4b75      	ldr	r3, [pc, #468]	; (800129c <HAL_RCC_OscConfig+0x910>)
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	e001      	b.n	80010d0 <HAL_RCC_OscConfig+0x744>
 80010cc:	4b73      	ldr	r3, [pc, #460]	; (800129c <HAL_RCC_OscConfig+0x910>)
 80010ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d0:	2202      	movs	r2, #2
 80010d2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80010da:	fa92 f2a2 	rbit	r2, r2
 80010de:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80010e2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80010e6:	fab2 f282 	clz	r2, r2
 80010ea:	b2d2      	uxtb	r2, r2
 80010ec:	f042 0220 	orr.w	r2, r2, #32
 80010f0:	b2d2      	uxtb	r2, r2
 80010f2:	b2d2      	uxtb	r2, r2
 80010f4:	f002 021f 	and.w	r2, r2, #31
 80010f8:	2101      	movs	r1, #1
 80010fa:	fa01 f202 	lsl.w	r2, r1, r2
 80010fe:	4013      	ands	r3, r2
 8001100:	2b00      	cmp	r3, #0
 8001102:	d18d      	bne.n	8001020 <HAL_RCC_OscConfig+0x694>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 0308 	and.w	r3, r3, #8
 800110e:	2b00      	cmp	r3, #0
 8001110:	f000 8140 	beq.w	8001394 <HAL_RCC_OscConfig+0xa08>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	699b      	ldr	r3, [r3, #24]
 800111a:	2b00      	cmp	r3, #0
 800111c:	f000 8096 	beq.w	800124c <HAL_RCC_OscConfig+0x8c0>
 8001120:	2301      	movs	r3, #1
 8001122:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001126:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800112a:	fa93 f3a3 	rbit	r3, r3
 800112e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001132:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001136:	fab3 f383 	clz	r3, r3
 800113a:	461a      	mov	r2, r3
 800113c:	4b58      	ldr	r3, [pc, #352]	; (80012a0 <HAL_RCC_OscConfig+0x914>)
 800113e:	4413      	add	r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	461a      	mov	r2, r3
 8001144:	2301      	movs	r3, #1
 8001146:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001148:	f7ff faf0 	bl	800072c <HAL_GetTick>
 800114c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001150:	e00a      	b.n	8001168 <HAL_RCC_OscConfig+0x7dc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001152:	f7ff faeb 	bl	800072c <HAL_GetTick>
 8001156:	4602      	mov	r2, r0
 8001158:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b02      	cmp	r3, #2
 8001160:	d902      	bls.n	8001168 <HAL_RCC_OscConfig+0x7dc>
        {
          return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	f000 bcd9 	b.w	8001b1a <HAL_RCC_OscConfig+0x118e>
 8001168:	2302      	movs	r3, #2
 800116a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800116e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001172:	fa93 f3a3 	rbit	r3, r3
 8001176:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800117a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800117e:	fab3 f383 	clz	r3, r3
 8001182:	b2db      	uxtb	r3, r3
 8001184:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001188:	b2db      	uxtb	r3, r3
 800118a:	b2db      	uxtb	r3, r3
 800118c:	095b      	lsrs	r3, r3, #5
 800118e:	b2db      	uxtb	r3, r3
 8001190:	2b01      	cmp	r3, #1
 8001192:	d102      	bne.n	800119a <HAL_RCC_OscConfig+0x80e>
 8001194:	4b41      	ldr	r3, [pc, #260]	; (800129c <HAL_RCC_OscConfig+0x910>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	e039      	b.n	800120e <HAL_RCC_OscConfig+0x882>
 800119a:	2302      	movs	r3, #2
 800119c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80011a4:	fa93 f2a3 	rbit	r2, r3
 80011a8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80011ac:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80011ae:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	fab3 f383 	clz	r3, r3
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	095b      	lsrs	r3, r3, #5
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d102      	bne.n	80011d0 <HAL_RCC_OscConfig+0x844>
 80011ca:	4b34      	ldr	r3, [pc, #208]	; (800129c <HAL_RCC_OscConfig+0x910>)
 80011cc:	6a1b      	ldr	r3, [r3, #32]
 80011ce:	e01e      	b.n	800120e <HAL_RCC_OscConfig+0x882>
 80011d0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80011d4:	2202      	movs	r2, #2
 80011d6:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	fa93 f2a3 	rbit	r2, r3
 80011e2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80011e6:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80011e8:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	fab3 f383 	clz	r3, r3
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	095b      	lsrs	r3, r3, #5
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	2b04      	cmp	r3, #4
 8001202:	d102      	bne.n	800120a <HAL_RCC_OscConfig+0x87e>
 8001204:	4b25      	ldr	r3, [pc, #148]	; (800129c <HAL_RCC_OscConfig+0x910>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	e001      	b.n	800120e <HAL_RCC_OscConfig+0x882>
 800120a:	4b24      	ldr	r3, [pc, #144]	; (800129c <HAL_RCC_OscConfig+0x910>)
 800120c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120e:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8001212:	2102      	movs	r1, #2
 8001214:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001216:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 800121a:	6812      	ldr	r2, [r2, #0]
 800121c:	fa92 f1a2 	rbit	r1, r2
 8001220:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001224:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001226:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800122a:	6812      	ldr	r2, [r2, #0]
 800122c:	fab2 f282 	clz	r2, r2
 8001230:	b2d2      	uxtb	r2, r2
 8001232:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001236:	b2d2      	uxtb	r2, r2
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	f002 021f 	and.w	r2, r2, #31
 800123e:	2101      	movs	r1, #1
 8001240:	fa01 f202 	lsl.w	r2, r1, r2
 8001244:	4013      	ands	r3, r2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d083      	beq.n	8001152 <HAL_RCC_OscConfig+0x7c6>
 800124a:	e0a3      	b.n	8001394 <HAL_RCC_OscConfig+0xa08>
 800124c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001250:	2201      	movs	r2, #1
 8001252:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001254:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	fa93 f2a3 	rbit	r2, r3
 800125e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001262:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001264:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001268:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800126a:	fab3 f383 	clz	r3, r3
 800126e:	461a      	mov	r2, r3
 8001270:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <HAL_RCC_OscConfig+0x914>)
 8001272:	4413      	add	r3, r2
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	461a      	mov	r2, r3
 8001278:	2300      	movs	r3, #0
 800127a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800127c:	f7ff fa56 	bl	800072c <HAL_GetTick>
 8001280:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001284:	e00e      	b.n	80012a4 <HAL_RCC_OscConfig+0x918>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001286:	f7ff fa51 	bl	800072c <HAL_GetTick>
 800128a:	4602      	mov	r2, r0
 800128c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b02      	cmp	r3, #2
 8001294:	d906      	bls.n	80012a4 <HAL_RCC_OscConfig+0x918>
        {
          return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	f000 bc3f 	b.w	8001b1a <HAL_RCC_OscConfig+0x118e>
 800129c:	40021000 	.word	0x40021000
 80012a0:	10908120 	.word	0x10908120
 80012a4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80012a8:	2202      	movs	r2, #2
 80012aa:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ac:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	fa93 f2a3 	rbit	r2, r3
 80012b6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80012ba:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80012bc:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80012c0:	681b      	ldr	r3, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012c2:	fab3 f383 	clz	r3, r3
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	095b      	lsrs	r3, r3, #5
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d102      	bne.n	80012de <HAL_RCC_OscConfig+0x952>
 80012d8:	4ba6      	ldr	r3, [pc, #664]	; (8001574 <HAL_RCC_OscConfig+0xbe8>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	e03b      	b.n	8001356 <HAL_RCC_OscConfig+0x9ca>
 80012de:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012e2:	2202      	movs	r2, #2
 80012e4:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	fa93 f2a3 	rbit	r2, r3
 80012f0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80012f4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80012f6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	fab3 f383 	clz	r3, r3
 8001300:	b2db      	uxtb	r3, r3
 8001302:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001306:	b2db      	uxtb	r3, r3
 8001308:	b2db      	uxtb	r3, r3
 800130a:	095b      	lsrs	r3, r3, #5
 800130c:	b2db      	uxtb	r3, r3
 800130e:	2b02      	cmp	r3, #2
 8001310:	d102      	bne.n	8001318 <HAL_RCC_OscConfig+0x98c>
 8001312:	4b98      	ldr	r3, [pc, #608]	; (8001574 <HAL_RCC_OscConfig+0xbe8>)
 8001314:	6a1b      	ldr	r3, [r3, #32]
 8001316:	e01e      	b.n	8001356 <HAL_RCC_OscConfig+0x9ca>
 8001318:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800131c:	2202      	movs	r2, #2
 800131e:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001320:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	fa93 f2a3 	rbit	r2, r3
 800132a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800132e:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001330:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	fab3 f383 	clz	r3, r3
 800133a:	b2db      	uxtb	r3, r3
 800133c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001340:	b2db      	uxtb	r3, r3
 8001342:	b2db      	uxtb	r3, r3
 8001344:	095b      	lsrs	r3, r3, #5
 8001346:	b2db      	uxtb	r3, r3
 8001348:	2b04      	cmp	r3, #4
 800134a:	d102      	bne.n	8001352 <HAL_RCC_OscConfig+0x9c6>
 800134c:	4b89      	ldr	r3, [pc, #548]	; (8001574 <HAL_RCC_OscConfig+0xbe8>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	e001      	b.n	8001356 <HAL_RCC_OscConfig+0x9ca>
 8001352:	4b88      	ldr	r3, [pc, #544]	; (8001574 <HAL_RCC_OscConfig+0xbe8>)
 8001354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001356:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 800135a:	2102      	movs	r1, #2
 800135c:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800135e:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8001362:	6812      	ldr	r2, [r2, #0]
 8001364:	fa92 f1a2 	rbit	r1, r2
 8001368:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800136c:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800136e:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8001372:	6812      	ldr	r2, [r2, #0]
 8001374:	fab2 f282 	clz	r2, r2
 8001378:	b2d2      	uxtb	r2, r2
 800137a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800137e:	b2d2      	uxtb	r2, r2
 8001380:	b2d2      	uxtb	r2, r2
 8001382:	f002 021f 	and.w	r2, r2, #31
 8001386:	2101      	movs	r1, #1
 8001388:	fa01 f202 	lsl.w	r2, r1, r2
 800138c:	4013      	ands	r3, r2
 800138e:	2b00      	cmp	r3, #0
 8001390:	f47f af79 	bne.w	8001286 <HAL_RCC_OscConfig+0x8fa>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001394:	1d3b      	adds	r3, r7, #4
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0304 	and.w	r3, r3, #4
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f000 81a1 	beq.w	80016e6 <HAL_RCC_OscConfig+0xd5a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013a4:	2300      	movs	r3, #0
 80013a6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013aa:	4b72      	ldr	r3, [pc, #456]	; (8001574 <HAL_RCC_OscConfig+0xbe8>)
 80013ac:	69db      	ldr	r3, [r3, #28]
 80013ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d112      	bne.n	80013dc <HAL_RCC_OscConfig+0xa50>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013b6:	4a6f      	ldr	r2, [pc, #444]	; (8001574 <HAL_RCC_OscConfig+0xbe8>)
 80013b8:	4b6e      	ldr	r3, [pc, #440]	; (8001574 <HAL_RCC_OscConfig+0xbe8>)
 80013ba:	69db      	ldr	r3, [r3, #28]
 80013bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c0:	61d3      	str	r3, [r2, #28]
 80013c2:	4b6c      	ldr	r3, [pc, #432]	; (8001574 <HAL_RCC_OscConfig+0xbe8>)
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80013ca:	f107 030c 	add.w	r3, r7, #12
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	f107 030c 	add.w	r3, r7, #12
 80013d4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80013d6:	2301      	movs	r3, #1
 80013d8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013dc:	4b66      	ldr	r3, [pc, #408]	; (8001578 <HAL_RCC_OscConfig+0xbec>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d11a      	bne.n	800141e <HAL_RCC_OscConfig+0xa92>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013e8:	4a63      	ldr	r2, [pc, #396]	; (8001578 <HAL_RCC_OscConfig+0xbec>)
 80013ea:	4b63      	ldr	r3, [pc, #396]	; (8001578 <HAL_RCC_OscConfig+0xbec>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013f2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013f4:	f7ff f99a 	bl	800072c <HAL_GetTick>
 80013f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013fc:	e009      	b.n	8001412 <HAL_RCC_OscConfig+0xa86>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013fe:	f7ff f995 	bl	800072c <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b64      	cmp	r3, #100	; 0x64
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0xa86>
        {
          return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e383      	b.n	8001b1a <HAL_RCC_OscConfig+0x118e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001412:	4b59      	ldr	r3, [pc, #356]	; (8001578 <HAL_RCC_OscConfig+0xbec>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800141a:	2b00      	cmp	r3, #0
 800141c:	d0ef      	beq.n	80013fe <HAL_RCC_OscConfig+0xa72>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d106      	bne.n	8001436 <HAL_RCC_OscConfig+0xaaa>
 8001428:	4a52      	ldr	r2, [pc, #328]	; (8001574 <HAL_RCC_OscConfig+0xbe8>)
 800142a:	4b52      	ldr	r3, [pc, #328]	; (8001574 <HAL_RCC_OscConfig+0xbe8>)
 800142c:	6a1b      	ldr	r3, [r3, #32]
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	6213      	str	r3, [r2, #32]
 8001434:	e02f      	b.n	8001496 <HAL_RCC_OscConfig+0xb0a>
 8001436:	1d3b      	adds	r3, r7, #4
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d10c      	bne.n	800145a <HAL_RCC_OscConfig+0xace>
 8001440:	4a4c      	ldr	r2, [pc, #304]	; (8001574 <HAL_RCC_OscConfig+0xbe8>)
 8001442:	4b4c      	ldr	r3, [pc, #304]	; (8001574 <HAL_RCC_OscConfig+0xbe8>)
 8001444:	6a1b      	ldr	r3, [r3, #32]
 8001446:	f023 0301 	bic.w	r3, r3, #1
 800144a:	6213      	str	r3, [r2, #32]
 800144c:	4a49      	ldr	r2, [pc, #292]	; (8001574 <HAL_RCC_OscConfig+0xbe8>)
 800144e:	4b49      	ldr	r3, [pc, #292]	; (8001574 <HAL_RCC_OscConfig+0xbe8>)
 8001450:	6a1b      	ldr	r3, [r3, #32]
 8001452:	f023 0304 	bic.w	r3, r3, #4
 8001456:	6213      	str	r3, [r2, #32]
 8001458:	e01d      	b.n	8001496 <HAL_RCC_OscConfig+0xb0a>
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	2b05      	cmp	r3, #5
 8001462:	d10c      	bne.n	800147e <HAL_RCC_OscConfig+0xaf2>
 8001464:	4a43      	ldr	r2, [pc, #268]	; (8001574 <HAL_RCC_OscConfig+0xbe8>)
 8001466:	4b43      	ldr	r3, [pc, #268]	; (8001574 <HAL_RCC_OscConfig+0xbe8>)
 8001468:	6a1b      	ldr	r3, [r3, #32]
 800146a:	f043 0304 	orr.w	r3, r3, #4
 800146e:	6213      	str	r3, [r2, #32]
 8001470:	4a40      	ldr	r2, [pc, #256]	; (8001574 <HAL_RCC_OscConfig+0xbe8>)
 8001472:	4b40      	ldr	r3, [pc, #256]	; (8001574 <HAL_RCC_OscConfig+0xbe8>)
 8001474:	6a1b      	ldr	r3, [r3, #32]
 8001476:	f043 0301 	orr.w	r3, r3, #1
 800147a:	6213      	str	r3, [r2, #32]
 800147c:	e00b      	b.n	8001496 <HAL_RCC_OscConfig+0xb0a>
 800147e:	4a3d      	ldr	r2, [pc, #244]	; (8001574 <HAL_RCC_OscConfig+0xbe8>)
 8001480:	4b3c      	ldr	r3, [pc, #240]	; (8001574 <HAL_RCC_OscConfig+0xbe8>)
 8001482:	6a1b      	ldr	r3, [r3, #32]
 8001484:	f023 0301 	bic.w	r3, r3, #1
 8001488:	6213      	str	r3, [r2, #32]
 800148a:	4a3a      	ldr	r2, [pc, #232]	; (8001574 <HAL_RCC_OscConfig+0xbe8>)
 800148c:	4b39      	ldr	r3, [pc, #228]	; (8001574 <HAL_RCC_OscConfig+0xbe8>)
 800148e:	6a1b      	ldr	r3, [r3, #32]
 8001490:	f023 0304 	bic.w	r3, r3, #4
 8001494:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	2b00      	cmp	r3, #0
 800149e:	f000 808f 	beq.w	80015c0 <HAL_RCC_OscConfig+0xc34>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a2:	f7ff f943 	bl	800072c <HAL_GetTick>
 80014a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014aa:	e00b      	b.n	80014c4 <HAL_RCC_OscConfig+0xb38>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014ac:	f7ff f93e 	bl	800072c <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014bc:	4293      	cmp	r3, r2
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0xb38>
        {
          return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e32a      	b.n	8001b1a <HAL_RCC_OscConfig+0x118e>
 80014c4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80014c8:	2202      	movs	r2, #2
 80014ca:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014cc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	fa93 f2a3 	rbit	r2, r3
 80014d6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80014da:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80014dc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80014e0:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014e2:	fab3 f383 	clz	r3, r3
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	095b      	lsrs	r3, r3, #5
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d102      	bne.n	80014fe <HAL_RCC_OscConfig+0xb72>
 80014f8:	4b1e      	ldr	r3, [pc, #120]	; (8001574 <HAL_RCC_OscConfig+0xbe8>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	e040      	b.n	8001580 <HAL_RCC_OscConfig+0xbf4>
 80014fe:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001502:	2202      	movs	r2, #2
 8001504:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001506:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	fa93 f2a3 	rbit	r2, r3
 8001510:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001514:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001516:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	fab3 f383 	clz	r3, r3
 8001520:	b2db      	uxtb	r3, r3
 8001522:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001526:	b2db      	uxtb	r3, r3
 8001528:	b2db      	uxtb	r3, r3
 800152a:	095b      	lsrs	r3, r3, #5
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b02      	cmp	r3, #2
 8001530:	d102      	bne.n	8001538 <HAL_RCC_OscConfig+0xbac>
 8001532:	4b10      	ldr	r3, [pc, #64]	; (8001574 <HAL_RCC_OscConfig+0xbe8>)
 8001534:	6a1b      	ldr	r3, [r3, #32]
 8001536:	e023      	b.n	8001580 <HAL_RCC_OscConfig+0xbf4>
 8001538:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800153c:	2202      	movs	r2, #2
 800153e:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001540:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	fa93 f2a3 	rbit	r2, r3
 800154a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800154e:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001550:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	fab3 f383 	clz	r3, r3
 800155a:	b2db      	uxtb	r3, r3
 800155c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001560:	b2db      	uxtb	r3, r3
 8001562:	b2db      	uxtb	r3, r3
 8001564:	095b      	lsrs	r3, r3, #5
 8001566:	b2db      	uxtb	r3, r3
 8001568:	2b04      	cmp	r3, #4
 800156a:	d107      	bne.n	800157c <HAL_RCC_OscConfig+0xbf0>
 800156c:	4b01      	ldr	r3, [pc, #4]	; (8001574 <HAL_RCC_OscConfig+0xbe8>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	e006      	b.n	8001580 <HAL_RCC_OscConfig+0xbf4>
 8001572:	bf00      	nop
 8001574:	40021000 	.word	0x40021000
 8001578:	40007000 	.word	0x40007000
 800157c:	4ba5      	ldr	r3, [pc, #660]	; (8001814 <HAL_RCC_OscConfig+0xe88>)
 800157e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001580:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001584:	2102      	movs	r1, #2
 8001586:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001588:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800158c:	6812      	ldr	r2, [r2, #0]
 800158e:	fa92 f1a2 	rbit	r1, r2
 8001592:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001596:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001598:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800159c:	6812      	ldr	r2, [r2, #0]
 800159e:	fab2 f282 	clz	r2, r2
 80015a2:	b2d2      	uxtb	r2, r2
 80015a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015a8:	b2d2      	uxtb	r2, r2
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	f002 021f 	and.w	r2, r2, #31
 80015b0:	2101      	movs	r1, #1
 80015b2:	fa01 f202 	lsl.w	r2, r1, r2
 80015b6:	4013      	ands	r3, r2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	f43f af77 	beq.w	80014ac <HAL_RCC_OscConfig+0xb20>
 80015be:	e088      	b.n	80016d2 <HAL_RCC_OscConfig+0xd46>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c0:	f7ff f8b4 	bl	800072c <HAL_GetTick>
 80015c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c8:	e00b      	b.n	80015e2 <HAL_RCC_OscConfig+0xc56>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ca:	f7ff f8af 	bl	800072c <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015da:	4293      	cmp	r3, r2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0xc56>
        {
          return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e29b      	b.n	8001b1a <HAL_RCC_OscConfig+0x118e>
 80015e2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015e6:	2202      	movs	r2, #2
 80015e8:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ea:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	fa93 f2a3 	rbit	r2, r3
 80015f4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80015f8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80015fa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80015fe:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001600:	fab3 f383 	clz	r3, r3
 8001604:	b2db      	uxtb	r3, r3
 8001606:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800160a:	b2db      	uxtb	r3, r3
 800160c:	b2db      	uxtb	r3, r3
 800160e:	095b      	lsrs	r3, r3, #5
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b01      	cmp	r3, #1
 8001614:	d102      	bne.n	800161c <HAL_RCC_OscConfig+0xc90>
 8001616:	4b7f      	ldr	r3, [pc, #508]	; (8001814 <HAL_RCC_OscConfig+0xe88>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	e03b      	b.n	8001694 <HAL_RCC_OscConfig+0xd08>
 800161c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001620:	2202      	movs	r2, #2
 8001622:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001624:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	fa93 f2a3 	rbit	r2, r3
 800162e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001632:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001634:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	fab3 f383 	clz	r3, r3
 800163e:	b2db      	uxtb	r3, r3
 8001640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001644:	b2db      	uxtb	r3, r3
 8001646:	b2db      	uxtb	r3, r3
 8001648:	095b      	lsrs	r3, r3, #5
 800164a:	b2db      	uxtb	r3, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d102      	bne.n	8001656 <HAL_RCC_OscConfig+0xcca>
 8001650:	4b70      	ldr	r3, [pc, #448]	; (8001814 <HAL_RCC_OscConfig+0xe88>)
 8001652:	6a1b      	ldr	r3, [r3, #32]
 8001654:	e01e      	b.n	8001694 <HAL_RCC_OscConfig+0xd08>
 8001656:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800165a:	2202      	movs	r2, #2
 800165c:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	fa93 f2a3 	rbit	r2, r3
 8001668:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800166c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800166e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	fab3 f383 	clz	r3, r3
 8001678:	b2db      	uxtb	r3, r3
 800167a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800167e:	b2db      	uxtb	r3, r3
 8001680:	b2db      	uxtb	r3, r3
 8001682:	095b      	lsrs	r3, r3, #5
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b04      	cmp	r3, #4
 8001688:	d102      	bne.n	8001690 <HAL_RCC_OscConfig+0xd04>
 800168a:	4b62      	ldr	r3, [pc, #392]	; (8001814 <HAL_RCC_OscConfig+0xe88>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	e001      	b.n	8001694 <HAL_RCC_OscConfig+0xd08>
 8001690:	4b60      	ldr	r3, [pc, #384]	; (8001814 <HAL_RCC_OscConfig+0xe88>)
 8001692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001694:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001698:	2102      	movs	r1, #2
 800169a:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169c:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80016a0:	6812      	ldr	r2, [r2, #0]
 80016a2:	fa92 f1a2 	rbit	r1, r2
 80016a6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80016aa:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80016ac:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80016b0:	6812      	ldr	r2, [r2, #0]
 80016b2:	fab2 f282 	clz	r2, r2
 80016b6:	b2d2      	uxtb	r2, r2
 80016b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016bc:	b2d2      	uxtb	r2, r2
 80016be:	b2d2      	uxtb	r2, r2
 80016c0:	f002 021f 	and.w	r2, r2, #31
 80016c4:	2101      	movs	r1, #1
 80016c6:	fa01 f202 	lsl.w	r2, r1, r2
 80016ca:	4013      	ands	r3, r2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f47f af7c 	bne.w	80015ca <HAL_RCC_OscConfig+0xc3e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016d2:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d105      	bne.n	80016e6 <HAL_RCC_OscConfig+0xd5a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016da:	4a4e      	ldr	r2, [pc, #312]	; (8001814 <HAL_RCC_OscConfig+0xe88>)
 80016dc:	4b4d      	ldr	r3, [pc, #308]	; (8001814 <HAL_RCC_OscConfig+0xe88>)
 80016de:	69db      	ldr	r3, [r3, #28]
 80016e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016e4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	69db      	ldr	r3, [r3, #28]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	f000 8213 	beq.w	8001b18 <HAL_RCC_OscConfig+0x118c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016f2:	4b48      	ldr	r3, [pc, #288]	; (8001814 <HAL_RCC_OscConfig+0xe88>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f003 030c 	and.w	r3, r3, #12
 80016fa:	2b08      	cmp	r3, #8
 80016fc:	f000 8208 	beq.w	8001b10 <HAL_RCC_OscConfig+0x1184>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001700:	1d3b      	adds	r3, r7, #4
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	2b02      	cmp	r3, #2
 8001708:	f040 815c 	bne.w	80019c4 <HAL_RCC_OscConfig+0x1038>
 800170c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001710:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001714:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001716:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	fa93 f2a3 	rbit	r2, r3
 8001720:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001724:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001726:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800172a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800172c:	fab3 f383 	clz	r3, r3
 8001730:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001734:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	461a      	mov	r2, r3
 800173c:	2300      	movs	r3, #0
 800173e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001740:	f7fe fff4 	bl	800072c <HAL_GetTick>
 8001744:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001748:	e009      	b.n	800175e <HAL_RCC_OscConfig+0xdd2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800174a:	f7fe ffef 	bl	800072c <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0xdd2>
          {
            return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e1dd      	b.n	8001b1a <HAL_RCC_OscConfig+0x118e>
 800175e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001762:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001766:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001768:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	fa93 f2a3 	rbit	r2, r3
 8001772:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001776:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001778:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800177c:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800177e:	fab3 f383 	clz	r3, r3
 8001782:	b2db      	uxtb	r3, r3
 8001784:	f043 0320 	orr.w	r3, r3, #32
 8001788:	b2db      	uxtb	r3, r3
 800178a:	b2db      	uxtb	r3, r3
 800178c:	095b      	lsrs	r3, r3, #5
 800178e:	b2db      	uxtb	r3, r3
 8001790:	2b01      	cmp	r3, #1
 8001792:	d102      	bne.n	800179a <HAL_RCC_OscConfig+0xe0e>
 8001794:	4b1f      	ldr	r3, [pc, #124]	; (8001814 <HAL_RCC_OscConfig+0xe88>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	e040      	b.n	800181c <HAL_RCC_OscConfig+0xe90>
 800179a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800179e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017a2:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	fa93 f2a3 	rbit	r2, r3
 80017ae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80017b2:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80017b4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	fab3 f383 	clz	r3, r3
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	f043 0320 	orr.w	r3, r3, #32
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	095b      	lsrs	r3, r3, #5
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d102      	bne.n	80017d6 <HAL_RCC_OscConfig+0xe4a>
 80017d0:	4b10      	ldr	r3, [pc, #64]	; (8001814 <HAL_RCC_OscConfig+0xe88>)
 80017d2:	6a1b      	ldr	r3, [r3, #32]
 80017d4:	e022      	b.n	800181c <HAL_RCC_OscConfig+0xe90>
 80017d6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80017da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017de:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	fa93 f2a3 	rbit	r2, r3
 80017ea:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80017ee:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80017f0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	fab3 f383 	clz	r3, r3
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	f043 0320 	orr.w	r3, r3, #32
 8001800:	b2db      	uxtb	r3, r3
 8001802:	b2db      	uxtb	r3, r3
 8001804:	095b      	lsrs	r3, r3, #5
 8001806:	b2db      	uxtb	r3, r3
 8001808:	2b04      	cmp	r3, #4
 800180a:	d105      	bne.n	8001818 <HAL_RCC_OscConfig+0xe8c>
 800180c:	4b01      	ldr	r3, [pc, #4]	; (8001814 <HAL_RCC_OscConfig+0xe88>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	e004      	b.n	800181c <HAL_RCC_OscConfig+0xe90>
 8001812:	bf00      	nop
 8001814:	40021000 	.word	0x40021000
 8001818:	4bbe      	ldr	r3, [pc, #760]	; (8001b14 <HAL_RCC_OscConfig+0x1188>)
 800181a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001820:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001824:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001826:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800182a:	6812      	ldr	r2, [r2, #0]
 800182c:	fa92 f1a2 	rbit	r1, r2
 8001830:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001834:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001836:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800183a:	6812      	ldr	r2, [r2, #0]
 800183c:	fab2 f282 	clz	r2, r2
 8001840:	b2d2      	uxtb	r2, r2
 8001842:	f042 0220 	orr.w	r2, r2, #32
 8001846:	b2d2      	uxtb	r2, r2
 8001848:	b2d2      	uxtb	r2, r2
 800184a:	f002 021f 	and.w	r2, r2, #31
 800184e:	2101      	movs	r1, #1
 8001850:	fa01 f202 	lsl.w	r2, r1, r2
 8001854:	4013      	ands	r3, r2
 8001856:	2b00      	cmp	r3, #0
 8001858:	f47f af77 	bne.w	800174a <HAL_RCC_OscConfig+0xdbe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800185c:	48ad      	ldr	r0, [pc, #692]	; (8001b14 <HAL_RCC_OscConfig+0x1188>)
 800185e:	4bad      	ldr	r3, [pc, #692]	; (8001b14 <HAL_RCC_OscConfig+0x1188>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800186c:	1d3b      	adds	r3, r7, #4
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6a1b      	ldr	r3, [r3, #32]
 8001872:	430b      	orrs	r3, r1
 8001874:	4313      	orrs	r3, r2
 8001876:	6043      	str	r3, [r0, #4]
 8001878:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800187c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001880:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001882:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	fa93 f2a3 	rbit	r2, r3
 800188c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001890:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001892:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001896:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001898:	fab3 f383 	clz	r3, r3
 800189c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	461a      	mov	r2, r3
 80018a8:	2301      	movs	r3, #1
 80018aa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ac:	f7fe ff3e 	bl	800072c <HAL_GetTick>
 80018b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018b4:	e009      	b.n	80018ca <HAL_RCC_OscConfig+0xf3e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018b6:	f7fe ff39 	bl	800072c <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0xf3e>
          {
            return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e127      	b.n	8001b1a <HAL_RCC_OscConfig+0x118e>
 80018ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018d2:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	fa93 f2a3 	rbit	r2, r3
 80018de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80018e2:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80018e4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80018e8:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018ea:	fab3 f383 	clz	r3, r3
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	f043 0320 	orr.w	r3, r3, #32
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	095b      	lsrs	r3, r3, #5
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d102      	bne.n	8001906 <HAL_RCC_OscConfig+0xf7a>
 8001900:	4b84      	ldr	r3, [pc, #528]	; (8001b14 <HAL_RCC_OscConfig+0x1188>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	e03d      	b.n	8001982 <HAL_RCC_OscConfig+0xff6>
 8001906:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800190a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800190e:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001910:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	fa93 f2a3 	rbit	r2, r3
 800191a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800191e:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001920:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	fab3 f383 	clz	r3, r3
 800192a:	b2db      	uxtb	r3, r3
 800192c:	f043 0320 	orr.w	r3, r3, #32
 8001930:	b2db      	uxtb	r3, r3
 8001932:	b2db      	uxtb	r3, r3
 8001934:	095b      	lsrs	r3, r3, #5
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d102      	bne.n	8001942 <HAL_RCC_OscConfig+0xfb6>
 800193c:	4b75      	ldr	r3, [pc, #468]	; (8001b14 <HAL_RCC_OscConfig+0x1188>)
 800193e:	6a1b      	ldr	r3, [r3, #32]
 8001940:	e01f      	b.n	8001982 <HAL_RCC_OscConfig+0xff6>
 8001942:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001946:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800194a:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	fa93 f2a3 	rbit	r2, r3
 8001956:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800195a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800195c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	fab3 f383 	clz	r3, r3
 8001966:	b2db      	uxtb	r3, r3
 8001968:	f043 0320 	orr.w	r3, r3, #32
 800196c:	b2db      	uxtb	r3, r3
 800196e:	b2db      	uxtb	r3, r3
 8001970:	095b      	lsrs	r3, r3, #5
 8001972:	b2db      	uxtb	r3, r3
 8001974:	2b04      	cmp	r3, #4
 8001976:	d102      	bne.n	800197e <HAL_RCC_OscConfig+0xff2>
 8001978:	4b66      	ldr	r3, [pc, #408]	; (8001b14 <HAL_RCC_OscConfig+0x1188>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	e001      	b.n	8001982 <HAL_RCC_OscConfig+0xff6>
 800197e:	4b65      	ldr	r3, [pc, #404]	; (8001b14 <HAL_RCC_OscConfig+0x1188>)
 8001980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001982:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001986:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800198a:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001990:	6812      	ldr	r2, [r2, #0]
 8001992:	fa92 f1a2 	rbit	r1, r2
 8001996:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800199a:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800199c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80019a0:	6812      	ldr	r2, [r2, #0]
 80019a2:	fab2 f282 	clz	r2, r2
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	f042 0220 	orr.w	r2, r2, #32
 80019ac:	b2d2      	uxtb	r2, r2
 80019ae:	b2d2      	uxtb	r2, r2
 80019b0:	f002 021f 	and.w	r2, r2, #31
 80019b4:	2101      	movs	r1, #1
 80019b6:	fa01 f202 	lsl.w	r2, r1, r2
 80019ba:	4013      	ands	r3, r2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f43f af7a 	beq.w	80018b6 <HAL_RCC_OscConfig+0xf2a>
 80019c2:	e0a9      	b.n	8001b18 <HAL_RCC_OscConfig+0x118c>
 80019c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019cc:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	fa93 f2a3 	rbit	r2, r3
 80019d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019dc:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80019de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019e2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e4:	fab3 f383 	clz	r3, r3
 80019e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	461a      	mov	r2, r3
 80019f4:	2300      	movs	r3, #0
 80019f6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f8:	f7fe fe98 	bl	800072c <HAL_GetTick>
 80019fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a00:	e009      	b.n	8001a16 <HAL_RCC_OscConfig+0x108a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a02:	f7fe fe93 	bl	800072c <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x108a>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e081      	b.n	8001b1a <HAL_RCC_OscConfig+0x118e>
 8001a16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a1e:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	fa93 f2a3 	rbit	r2, r3
 8001a2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a2e:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001a30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a34:	681b      	ldr	r3, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a36:	fab3 f383 	clz	r3, r3
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	f043 0320 	orr.w	r3, r3, #32
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	095b      	lsrs	r3, r3, #5
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d102      	bne.n	8001a52 <HAL_RCC_OscConfig+0x10c6>
 8001a4c:	4b31      	ldr	r3, [pc, #196]	; (8001b14 <HAL_RCC_OscConfig+0x1188>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	e03d      	b.n	8001ace <HAL_RCC_OscConfig+0x1142>
 8001a52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a5a:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	fa93 f2a3 	rbit	r2, r3
 8001a66:	f107 0320 	add.w	r3, r7, #32
 8001a6a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001a6c:	f107 0320 	add.w	r3, r7, #32
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	fab3 f383 	clz	r3, r3
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	f043 0320 	orr.w	r3, r3, #32
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	095b      	lsrs	r3, r3, #5
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d102      	bne.n	8001a8e <HAL_RCC_OscConfig+0x1102>
 8001a88:	4b22      	ldr	r3, [pc, #136]	; (8001b14 <HAL_RCC_OscConfig+0x1188>)
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
 8001a8c:	e01f      	b.n	8001ace <HAL_RCC_OscConfig+0x1142>
 8001a8e:	f107 031c 	add.w	r3, r7, #28
 8001a92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a96:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a98:	f107 031c 	add.w	r3, r7, #28
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	fa93 f2a3 	rbit	r2, r3
 8001aa2:	f107 0318 	add.w	r3, r7, #24
 8001aa6:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001aa8:	f107 0318 	add.w	r3, r7, #24
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	fab3 f383 	clz	r3, r3
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	f043 0320 	orr.w	r3, r3, #32
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	095b      	lsrs	r3, r3, #5
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	2b04      	cmp	r3, #4
 8001ac2:	d102      	bne.n	8001aca <HAL_RCC_OscConfig+0x113e>
 8001ac4:	4b13      	ldr	r3, [pc, #76]	; (8001b14 <HAL_RCC_OscConfig+0x1188>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	e001      	b.n	8001ace <HAL_RCC_OscConfig+0x1142>
 8001aca:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <HAL_RCC_OscConfig+0x1188>)
 8001acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ace:	f107 0214 	add.w	r2, r7, #20
 8001ad2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ad6:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad8:	f107 0214 	add.w	r2, r7, #20
 8001adc:	6812      	ldr	r2, [r2, #0]
 8001ade:	fa92 f1a2 	rbit	r1, r2
 8001ae2:	f107 0210 	add.w	r2, r7, #16
 8001ae6:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001ae8:	f107 0210 	add.w	r2, r7, #16
 8001aec:	6812      	ldr	r2, [r2, #0]
 8001aee:	fab2 f282 	clz	r2, r2
 8001af2:	b2d2      	uxtb	r2, r2
 8001af4:	f042 0220 	orr.w	r2, r2, #32
 8001af8:	b2d2      	uxtb	r2, r2
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	f002 021f 	and.w	r2, r2, #31
 8001b00:	2101      	movs	r1, #1
 8001b02:	fa01 f202 	lsl.w	r2, r1, r2
 8001b06:	4013      	ands	r3, r2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f47f af7a 	bne.w	8001a02 <HAL_RCC_OscConfig+0x1076>
 8001b0e:	e003      	b.n	8001b18 <HAL_RCC_OscConfig+0x118c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e002      	b.n	8001b1a <HAL_RCC_OscConfig+0x118e>
 8001b14:	40021000 	.word	0x40021000
    }
  }
  
  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b09e      	sub	sp, #120	; 0x78
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	677b      	str	r3, [r7, #116]	; 0x74
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001b32:	4ba5      	ldr	r3, [pc, #660]	; (8001dc8 <HAL_RCC_ClockConfig+0x2a4>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0207 	and.w	r2, r3, #7
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d210      	bcs.n	8001b62 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b40:	49a1      	ldr	r1, [pc, #644]	; (8001dc8 <HAL_RCC_ClockConfig+0x2a4>)
 8001b42:	4ba1      	ldr	r3, [pc, #644]	; (8001dc8 <HAL_RCC_ClockConfig+0x2a4>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f023 0207 	bic.w	r2, r3, #7
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b50:	4b9d      	ldr	r3, [pc, #628]	; (8001dc8 <HAL_RCC_ClockConfig+0x2a4>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0207 	and.w	r2, r3, #7
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d001      	beq.n	8001b62 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e1d5      	b.n	8001f0e <HAL_RCC_ClockConfig+0x3ea>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d008      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b6e:	4997      	ldr	r1, [pc, #604]	; (8001dcc <HAL_RCC_ClockConfig+0x2a8>)
 8001b70:	4b96      	ldr	r3, [pc, #600]	; (8001dcc <HAL_RCC_ClockConfig+0x2a8>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f000 816d 	beq.w	8001e68 <HAL_RCC_ClockConfig+0x344>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d15d      	bne.n	8001c52 <HAL_RCC_ClockConfig+0x12e>
 8001b96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b9a:	673b      	str	r3, [r7, #112]	; 0x70
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b9e:	fa93 f3a3 	rbit	r3, r3
 8001ba2:	66fb      	str	r3, [r7, #108]	; 0x6c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001ba4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba6:	fab3 f383 	clz	r3, r3
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	f043 0320 	orr.w	r3, r3, #32
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	095b      	lsrs	r3, r3, #5
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d102      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0x9e>
 8001bbc:	4b83      	ldr	r3, [pc, #524]	; (8001dcc <HAL_RCC_ClockConfig+0x2a8>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	e02d      	b.n	8001c1e <HAL_RCC_ClockConfig+0xfa>
 8001bc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bc6:	66bb      	str	r3, [r7, #104]	; 0x68
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bca:	fa93 f3a3 	rbit	r3, r3
 8001bce:	667b      	str	r3, [r7, #100]	; 0x64
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001bd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001bd2:	fab3 f383 	clz	r3, r3
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	f043 0320 	orr.w	r3, r3, #32
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	095b      	lsrs	r3, r3, #5
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d102      	bne.n	8001bee <HAL_RCC_ClockConfig+0xca>
 8001be8:	4b78      	ldr	r3, [pc, #480]	; (8001dcc <HAL_RCC_ClockConfig+0x2a8>)
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	e017      	b.n	8001c1e <HAL_RCC_ClockConfig+0xfa>
 8001bee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bf2:	663b      	str	r3, [r7, #96]	; 0x60
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bf6:	fa93 f3a3 	rbit	r3, r3
 8001bfa:	65fb      	str	r3, [r7, #92]	; 0x5c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001bfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bfe:	fab3 f383 	clz	r3, r3
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	f043 0320 	orr.w	r3, r3, #32
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	095b      	lsrs	r3, r3, #5
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	2b04      	cmp	r3, #4
 8001c12:	d102      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xf6>
 8001c14:	4b6d      	ldr	r3, [pc, #436]	; (8001dcc <HAL_RCC_ClockConfig+0x2a8>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	e001      	b.n	8001c1e <HAL_RCC_ClockConfig+0xfa>
 8001c1a:	4b6c      	ldr	r3, [pc, #432]	; (8001dcc <HAL_RCC_ClockConfig+0x2a8>)
 8001c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c22:	65ba      	str	r2, [r7, #88]	; 0x58
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001c26:	fa92 f2a2 	rbit	r2, r2
 8001c2a:	657a      	str	r2, [r7, #84]	; 0x54
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001c2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001c2e:	fab2 f282 	clz	r2, r2
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	f042 0220 	orr.w	r2, r2, #32
 8001c38:	b2d2      	uxtb	r2, r2
 8001c3a:	b2d2      	uxtb	r2, r2
 8001c3c:	f002 021f 	and.w	r2, r2, #31
 8001c40:	2101      	movs	r1, #1
 8001c42:	fa01 f202 	lsl.w	r2, r1, r2
 8001c46:	4013      	ands	r3, r2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f040 80c1 	bne.w	8001dd0 <HAL_RCC_ClockConfig+0x2ac>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e15d      	b.n	8001f0e <HAL_RCC_ClockConfig+0x3ea>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d15c      	bne.n	8001d14 <HAL_RCC_ClockConfig+0x1f0>
 8001c5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c5e:	653b      	str	r3, [r7, #80]	; 0x50
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c62:	fa93 f3a3 	rbit	r3, r3
 8001c66:	64fb      	str	r3, [r7, #76]	; 0x4c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001c68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c6a:	fab3 f383 	clz	r3, r3
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	f043 0320 	orr.w	r3, r3, #32
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	095b      	lsrs	r3, r3, #5
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d102      	bne.n	8001c86 <HAL_RCC_ClockConfig+0x162>
 8001c80:	4b52      	ldr	r3, [pc, #328]	; (8001dcc <HAL_RCC_ClockConfig+0x2a8>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	e02d      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1be>
 8001c86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c8a:	64bb      	str	r3, [r7, #72]	; 0x48
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c8e:	fa93 f3a3 	rbit	r3, r3
 8001c92:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001c94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c96:	fab3 f383 	clz	r3, r3
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	f043 0320 	orr.w	r3, r3, #32
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	095b      	lsrs	r3, r3, #5
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d102      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0x18e>
 8001cac:	4b47      	ldr	r3, [pc, #284]	; (8001dcc <HAL_RCC_ClockConfig+0x2a8>)
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	e017      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1be>
 8001cb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cb6:	643b      	str	r3, [r7, #64]	; 0x40
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cba:	fa93 f3a3 	rbit	r3, r3
 8001cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cc2:	fab3 f383 	clz	r3, r3
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	f043 0320 	orr.w	r3, r3, #32
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	095b      	lsrs	r3, r3, #5
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2b04      	cmp	r3, #4
 8001cd6:	d102      	bne.n	8001cde <HAL_RCC_ClockConfig+0x1ba>
 8001cd8:	4b3c      	ldr	r3, [pc, #240]	; (8001dcc <HAL_RCC_ClockConfig+0x2a8>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	e001      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1be>
 8001cde:	4b3b      	ldr	r3, [pc, #236]	; (8001dcc <HAL_RCC_ClockConfig+0x2a8>)
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ce6:	63ba      	str	r2, [r7, #56]	; 0x38
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cea:	fa92 f2a2 	rbit	r2, r2
 8001cee:	637a      	str	r2, [r7, #52]	; 0x34
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001cf0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cf2:	fab2 f282 	clz	r2, r2
 8001cf6:	b2d2      	uxtb	r2, r2
 8001cf8:	f042 0220 	orr.w	r2, r2, #32
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	b2d2      	uxtb	r2, r2
 8001d00:	f002 021f 	and.w	r2, r2, #31
 8001d04:	2101      	movs	r1, #1
 8001d06:	fa01 f202 	lsl.w	r2, r1, r2
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d15f      	bne.n	8001dd0 <HAL_RCC_ClockConfig+0x2ac>
      {
        return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e0fc      	b.n	8001f0e <HAL_RCC_ClockConfig+0x3ea>
 8001d14:	2302      	movs	r3, #2
 8001d16:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d1a:	fa93 f3a3 	rbit	r3, r3
 8001d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d22:	fab3 f383 	clz	r3, r3
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	f043 0320 	orr.w	r3, r3, #32
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	095b      	lsrs	r3, r3, #5
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d102      	bne.n	8001d3e <HAL_RCC_ClockConfig+0x21a>
 8001d38:	4b24      	ldr	r3, [pc, #144]	; (8001dcc <HAL_RCC_ClockConfig+0x2a8>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	e02b      	b.n	8001d96 <HAL_RCC_ClockConfig+0x272>
 8001d3e:	2302      	movs	r3, #2
 8001d40:	62bb      	str	r3, [r7, #40]	; 0x28
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d44:	fa93 f3a3 	rbit	r3, r3
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	fab3 f383 	clz	r3, r3
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	f043 0320 	orr.w	r3, r3, #32
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	095b      	lsrs	r3, r3, #5
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d102      	bne.n	8001d68 <HAL_RCC_ClockConfig+0x244>
 8001d62:	4b1a      	ldr	r3, [pc, #104]	; (8001dcc <HAL_RCC_ClockConfig+0x2a8>)
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	e016      	b.n	8001d96 <HAL_RCC_ClockConfig+0x272>
 8001d68:	2302      	movs	r3, #2
 8001d6a:	623b      	str	r3, [r7, #32]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6c:	6a3b      	ldr	r3, [r7, #32]
 8001d6e:	fa93 f3a3 	rbit	r3, r3
 8001d72:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	fab3 f383 	clz	r3, r3
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	f043 0320 	orr.w	r3, r3, #32
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	095b      	lsrs	r3, r3, #5
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b04      	cmp	r3, #4
 8001d8a:	d102      	bne.n	8001d92 <HAL_RCC_ClockConfig+0x26e>
 8001d8c:	4b0f      	ldr	r3, [pc, #60]	; (8001dcc <HAL_RCC_ClockConfig+0x2a8>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	e001      	b.n	8001d96 <HAL_RCC_ClockConfig+0x272>
 8001d92:	4b0e      	ldr	r3, [pc, #56]	; (8001dcc <HAL_RCC_ClockConfig+0x2a8>)
 8001d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d96:	2202      	movs	r2, #2
 8001d98:	61ba      	str	r2, [r7, #24]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	fa92 f2a2 	rbit	r2, r2
 8001da0:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	fab2 f282 	clz	r2, r2
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	f042 0220 	orr.w	r2, r2, #32
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	f002 021f 	and.w	r2, r2, #31
 8001db6:	2101      	movs	r1, #1
 8001db8:	fa01 f202 	lsl.w	r2, r1, r2
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d106      	bne.n	8001dd0 <HAL_RCC_ClockConfig+0x2ac>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e0a3      	b.n	8001f0e <HAL_RCC_ClockConfig+0x3ea>
 8001dc6:	bf00      	nop
 8001dc8:	40022000 	.word	0x40022000
 8001dcc:	40021000 	.word	0x40021000
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dd0:	4951      	ldr	r1, [pc, #324]	; (8001f18 <HAL_RCC_ClockConfig+0x3f4>)
 8001dd2:	4b51      	ldr	r3, [pc, #324]	; (8001f18 <HAL_RCC_ClockConfig+0x3f4>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f023 0203 	bic.w	r2, r3, #3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001de2:	f7fe fca3 	bl	800072c <HAL_GetTick>
 8001de6:	6778      	str	r0, [r7, #116]	; 0x74
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d112      	bne.n	8001e16 <HAL_RCC_ClockConfig+0x2f2>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001df0:	e00a      	b.n	8001e08 <HAL_RCC_ClockConfig+0x2e4>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001df2:	f7fe fc9b 	bl	800072c <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d901      	bls.n	8001e08 <HAL_RCC_ClockConfig+0x2e4>
        {
          return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e082      	b.n	8001f0e <HAL_RCC_ClockConfig+0x3ea>
    /* Get Start Tick */
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e08:	4b43      	ldr	r3, [pc, #268]	; (8001f18 <HAL_RCC_ClockConfig+0x3f4>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 030c 	and.w	r3, r3, #12
 8001e10:	2b04      	cmp	r3, #4
 8001e12:	d1ee      	bne.n	8001df2 <HAL_RCC_ClockConfig+0x2ce>
 8001e14:	e028      	b.n	8001e68 <HAL_RCC_ClockConfig+0x344>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d112      	bne.n	8001e44 <HAL_RCC_ClockConfig+0x320>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e1e:	e00a      	b.n	8001e36 <HAL_RCC_ClockConfig+0x312>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e20:	f7fe fc84 	bl	800072c <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_ClockConfig+0x312>
        {
          return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e06b      	b.n	8001f0e <HAL_RCC_ClockConfig+0x3ea>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e36:	4b38      	ldr	r3, [pc, #224]	; (8001f18 <HAL_RCC_ClockConfig+0x3f4>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f003 030c 	and.w	r3, r3, #12
 8001e3e:	2b08      	cmp	r3, #8
 8001e40:	d1ee      	bne.n	8001e20 <HAL_RCC_ClockConfig+0x2fc>
 8001e42:	e011      	b.n	8001e68 <HAL_RCC_ClockConfig+0x344>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e44:	e00a      	b.n	8001e5c <HAL_RCC_ClockConfig+0x338>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e46:	f7fe fc71 	bl	800072c <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_ClockConfig+0x338>
        {
          return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e058      	b.n	8001f0e <HAL_RCC_ClockConfig+0x3ea>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e5c:	4b2e      	ldr	r3, [pc, #184]	; (8001f18 <HAL_RCC_ClockConfig+0x3f4>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f003 030c 	and.w	r3, r3, #12
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1ee      	bne.n	8001e46 <HAL_RCC_ClockConfig+0x322>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001e68:	4b2c      	ldr	r3, [pc, #176]	; (8001f1c <HAL_RCC_ClockConfig+0x3f8>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0207 	and.w	r2, r3, #7
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d910      	bls.n	8001e98 <HAL_RCC_ClockConfig+0x374>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e76:	4929      	ldr	r1, [pc, #164]	; (8001f1c <HAL_RCC_ClockConfig+0x3f8>)
 8001e78:	4b28      	ldr	r3, [pc, #160]	; (8001f1c <HAL_RCC_ClockConfig+0x3f8>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f023 0207 	bic.w	r2, r3, #7
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e86:	4b25      	ldr	r3, [pc, #148]	; (8001f1c <HAL_RCC_ClockConfig+0x3f8>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0207 	and.w	r2, r3, #7
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d001      	beq.n	8001e98 <HAL_RCC_ClockConfig+0x374>
    {
      return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e03a      	b.n	8001f0e <HAL_RCC_ClockConfig+0x3ea>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d008      	beq.n	8001eb6 <HAL_RCC_ClockConfig+0x392>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ea4:	491c      	ldr	r1, [pc, #112]	; (8001f18 <HAL_RCC_ClockConfig+0x3f4>)
 8001ea6:	4b1c      	ldr	r3, [pc, #112]	; (8001f18 <HAL_RCC_ClockConfig+0x3f4>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0308 	and.w	r3, r3, #8
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d009      	beq.n	8001ed6 <HAL_RCC_ClockConfig+0x3b2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ec2:	4915      	ldr	r1, [pc, #84]	; (8001f18 <HAL_RCC_ClockConfig+0x3f4>)
 8001ec4:	4b14      	ldr	r3, [pc, #80]	; (8001f18 <HAL_RCC_ClockConfig+0x3f4>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001ed6:	f000 f827 	bl	8001f28 <HAL_RCC_GetSysClockFreq>
 8001eda:	4601      	mov	r1, r0
 8001edc:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <HAL_RCC_ClockConfig+0x3f4>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ee4:	23f0      	movs	r3, #240	; 0xf0
 8001ee6:	613b      	str	r3, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	fa93 f3a3 	rbit	r3, r3
 8001eee:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	fab3 f383 	clz	r3, r3
 8001ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8001efa:	4a09      	ldr	r2, [pc, #36]	; (8001f20 <HAL_RCC_ClockConfig+0x3fc>)
 8001efc:	5cd3      	ldrb	r3, [r2, r3]
 8001efe:	fa21 f303 	lsr.w	r3, r1, r3
 8001f02:	4a08      	ldr	r2, [pc, #32]	; (8001f24 <HAL_RCC_ClockConfig+0x400>)
 8001f04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001f06:	2000      	movs	r0, #0
 8001f08:	f7fe fa02 	bl	8000310 <HAL_InitTick>
  
  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3778      	adds	r7, #120	; 0x78
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	40022000 	.word	0x40022000
 8001f20:	08004274 	.word	0x08004274
 8001f24:	20000000 	.word	0x20000000

08001f28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b08b      	sub	sp, #44	; 0x2c
 8001f2c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61fb      	str	r3, [r7, #28]
 8001f32:	2300      	movs	r3, #0
 8001f34:	61bb      	str	r3, [r7, #24]
 8001f36:	2300      	movs	r3, #0
 8001f38:	627b      	str	r3, [r7, #36]	; 0x24
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001f42:	4b29      	ldr	r3, [pc, #164]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	f003 030c 	and.w	r3, r3, #12
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	d002      	beq.n	8001f58 <HAL_RCC_GetSysClockFreq+0x30>
 8001f52:	2b08      	cmp	r3, #8
 8001f54:	d003      	beq.n	8001f5e <HAL_RCC_GetSysClockFreq+0x36>
 8001f56:	e03c      	b.n	8001fd2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f58:	4b24      	ldr	r3, [pc, #144]	; (8001fec <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f5a:	623b      	str	r3, [r7, #32]
      break;
 8001f5c:	e03c      	b.n	8001fd8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f64:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8001f68:	613b      	str	r3, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	fa93 f3a3 	rbit	r3, r3
 8001f70:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	fab3 f383 	clz	r3, r3
 8001f78:	fa22 f303 	lsr.w	r3, r2, r3
 8001f7c:	4a1c      	ldr	r2, [pc, #112]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f7e:	5cd3      	ldrb	r3, [r2, r3]
 8001f80:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001f82:	4b19      	ldr	r3, [pc, #100]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f86:	f003 020f 	and.w	r2, r3, #15
 8001f8a:	230f      	movs	r3, #15
 8001f8c:	60bb      	str	r3, [r7, #8]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	fa93 f3a3 	rbit	r3, r3
 8001f94:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	fab3 f383 	clz	r3, r3
 8001f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa0:	4a14      	ldr	r2, [pc, #80]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001fa2:	5cd3      	ldrb	r3, [r2, r3]
 8001fa4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d008      	beq.n	8001fc2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001fb0:	4a0e      	ldr	r2, [pc, #56]	; (8001fec <HAL_RCC_GetSysClockFreq+0xc4>)
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb8:	697a      	ldr	r2, [r7, #20]
 8001fba:	fb02 f303 	mul.w	r3, r2, r3
 8001fbe:	627b      	str	r3, [r7, #36]	; 0x24
 8001fc0:	e004      	b.n	8001fcc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	4a0c      	ldr	r2, [pc, #48]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001fc6:	fb02 f303 	mul.w	r3, r2, r3
 8001fca:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	623b      	str	r3, [r7, #32]
      break;
 8001fd0:	e002      	b.n	8001fd8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fd2:	4b06      	ldr	r3, [pc, #24]	; (8001fec <HAL_RCC_GetSysClockFreq+0xc4>)
 8001fd4:	623b      	str	r3, [r7, #32]
      break;
 8001fd6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fd8:	6a3b      	ldr	r3, [r7, #32]
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	372c      	adds	r7, #44	; 0x2c
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	007a1200 	.word	0x007a1200
 8001ff0:	0800428c 	.word	0x0800428c
 8001ff4:	0800429c 	.word	0x0800429c
 8001ff8:	003d0900 	.word	0x003d0900

08001ffc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002000:	4b03      	ldr	r3, [pc, #12]	; (8002010 <HAL_RCC_GetHCLKFreq+0x14>)
 8002002:	681b      	ldr	r3, [r3, #0]
}
 8002004:	4618      	mov	r0, r3
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	20000000 	.word	0x20000000

08002014 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800201a:	f7ff ffef 	bl	8001ffc <HAL_RCC_GetHCLKFreq>
 800201e:	4601      	mov	r1, r0
 8002020:	4b0b      	ldr	r3, [pc, #44]	; (8002050 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002028:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800202c:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	fa93 f3a3 	rbit	r3, r3
 8002034:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	fab3 f383 	clz	r3, r3
 800203c:	fa22 f303 	lsr.w	r3, r2, r3
 8002040:	4a04      	ldr	r2, [pc, #16]	; (8002054 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002042:	5cd3      	ldrb	r3, [r2, r3]
 8002044:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002048:	4618      	mov	r0, r3
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40021000 	.word	0x40021000
 8002054:	08004284 	.word	0x08004284

08002058 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800205e:	f7ff ffcd 	bl	8001ffc <HAL_RCC_GetHCLKFreq>
 8002062:	4601      	mov	r1, r0
 8002064:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 800206c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002070:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	fa93 f3a3 	rbit	r3, r3
 8002078:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	fab3 f383 	clz	r3, r3
 8002080:	fa22 f303 	lsr.w	r3, r2, r3
 8002084:	4a04      	ldr	r2, [pc, #16]	; (8002098 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002086:	5cd3      	ldrb	r3, [r2, r3]
 8002088:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800208c:	4618      	mov	r0, r3
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40021000 	.word	0x40021000
 8002098:	08004284 	.word	0x08004284

0800209c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	220f      	movs	r2, #15
 80020aa:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80020ac:	4b11      	ldr	r3, [pc, #68]	; (80020f4 <HAL_RCC_GetClockConfig+0x58>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f003 0203 	and.w	r2, r3, #3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80020b8:	4b0e      	ldr	r3, [pc, #56]	; (80020f4 <HAL_RCC_GetClockConfig+0x58>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80020c4:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <HAL_RCC_GetClockConfig+0x58>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80020d0:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <HAL_RCC_GetClockConfig+0x58>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80020d8:	08da      	lsrs	r2, r3, #3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80020de:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <HAL_RCC_GetClockConfig+0x5c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0207 	and.w	r2, r3, #7
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	601a      	str	r2, [r3, #0]
}
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	40021000 	.word	0x40021000
 80020f8:	40022000 	.word	0x40022000

080020fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b087      	sub	sp, #28
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800210e:	2300      	movs	r3, #0
 8002110:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8002112:	e14a      	b.n	80023aa <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	2101      	movs	r1, #1
 800211c:	fa01 f303 	lsl.w	r3, r1, r3
 8002120:	4013      	ands	r3, r2
 8002122:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2b00      	cmp	r3, #0
 8002128:	f000 813c 	beq.w	80023a4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2b02      	cmp	r3, #2
 8002132:	d003      	beq.n	800213c <HAL_GPIO_Init+0x40>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2b12      	cmp	r3, #18
 800213a:	d122      	bne.n	8002182 <HAL_GPIO_Init+0x86>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	08da      	lsrs	r2, r3, #3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3208      	adds	r2, #8
 8002144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002148:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	461a      	mov	r2, r3
 8002154:	230f      	movs	r3, #15
 8002156:	4093      	lsls	r3, r2
 8002158:	43db      	mvns	r3, r3
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	4013      	ands	r3, r2
 800215e:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	697a      	ldr	r2, [r7, #20]
 8002166:	f002 0207 	and.w	r2, r2, #7
 800216a:	0092      	lsls	r2, r2, #2
 800216c:	4093      	lsls	r3, r2
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	4313      	orrs	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	08da      	lsrs	r2, r3, #3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3208      	adds	r2, #8
 800217c:	6939      	ldr	r1, [r7, #16]
 800217e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	461a      	mov	r2, r3
 800218e:	2303      	movs	r3, #3
 8002190:	4093      	lsls	r3, r2
 8002192:	43db      	mvns	r3, r3
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	4013      	ands	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f003 0303 	and.w	r3, r3, #3
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	0052      	lsls	r2, r2, #1
 80021a6:	4093      	lsls	r3, r2
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d00b      	beq.n	80021d4 <HAL_GPIO_Init+0xd8>
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d007      	beq.n	80021d4 <HAL_GPIO_Init+0xd8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021c8:	2b11      	cmp	r3, #17
 80021ca:	d003      	beq.n	80021d4 <HAL_GPIO_Init+0xd8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2b12      	cmp	r3, #18
 80021d2:	d12f      	bne.n	8002234 <HAL_GPIO_Init+0x138>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	461a      	mov	r2, r3
 80021e0:	2303      	movs	r3, #3
 80021e2:	4093      	lsls	r3, r2
 80021e4:	43db      	mvns	r3, r3
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	4013      	ands	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	697a      	ldr	r2, [r7, #20]
 80021f2:	0052      	lsls	r2, r2, #1
 80021f4:	4093      	lsls	r3, r2
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	2201      	movs	r2, #1
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	43db      	mvns	r3, r3
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	4013      	ands	r3, r2
 8002216:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 0310 	and.w	r3, r3, #16
 8002220:	091a      	lsrs	r2, r3, #4
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	4313      	orrs	r3, r2
 800222c:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	461a      	mov	r2, r3
 8002240:	2303      	movs	r3, #3
 8002242:	4093      	lsls	r3, r2
 8002244:	43db      	mvns	r3, r3
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	4013      	ands	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	0052      	lsls	r2, r2, #1
 8002254:	4093      	lsls	r3, r2
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	4313      	orrs	r3, r2
 800225a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226a:	2b00      	cmp	r3, #0
 800226c:	f000 809a 	beq.w	80023a4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002270:	4a54      	ldr	r2, [pc, #336]	; (80023c4 <HAL_GPIO_Init+0x2c8>)
 8002272:	4b54      	ldr	r3, [pc, #336]	; (80023c4 <HAL_GPIO_Init+0x2c8>)
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	6193      	str	r3, [r2, #24]
 800227c:	4b51      	ldr	r3, [pc, #324]	; (80023c4 <HAL_GPIO_Init+0x2c8>)
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	60bb      	str	r3, [r7, #8]
 8002286:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002288:	4a4f      	ldr	r2, [pc, #316]	; (80023c8 <HAL_GPIO_Init+0x2cc>)
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	089b      	lsrs	r3, r3, #2
 800228e:	3302      	adds	r3, #2
 8002290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002294:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	f003 0303 	and.w	r3, r3, #3
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	461a      	mov	r2, r3
 80022a0:	230f      	movs	r3, #15
 80022a2:	4093      	lsls	r3, r2
 80022a4:	43db      	mvns	r3, r3
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	4013      	ands	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022b2:	d013      	beq.n	80022dc <HAL_GPIO_Init+0x1e0>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a45      	ldr	r2, [pc, #276]	; (80023cc <HAL_GPIO_Init+0x2d0>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d00d      	beq.n	80022d8 <HAL_GPIO_Init+0x1dc>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a44      	ldr	r2, [pc, #272]	; (80023d0 <HAL_GPIO_Init+0x2d4>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d007      	beq.n	80022d4 <HAL_GPIO_Init+0x1d8>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a43      	ldr	r2, [pc, #268]	; (80023d4 <HAL_GPIO_Init+0x2d8>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d101      	bne.n	80022d0 <HAL_GPIO_Init+0x1d4>
 80022cc:	2303      	movs	r3, #3
 80022ce:	e006      	b.n	80022de <HAL_GPIO_Init+0x1e2>
 80022d0:	2305      	movs	r3, #5
 80022d2:	e004      	b.n	80022de <HAL_GPIO_Init+0x1e2>
 80022d4:	2302      	movs	r3, #2
 80022d6:	e002      	b.n	80022de <HAL_GPIO_Init+0x1e2>
 80022d8:	2301      	movs	r3, #1
 80022da:	e000      	b.n	80022de <HAL_GPIO_Init+0x1e2>
 80022dc:	2300      	movs	r3, #0
 80022de:	697a      	ldr	r2, [r7, #20]
 80022e0:	f002 0203 	and.w	r2, r2, #3
 80022e4:	0092      	lsls	r2, r2, #2
 80022e6:	4093      	lsls	r3, r2
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80022ee:	4936      	ldr	r1, [pc, #216]	; (80023c8 <HAL_GPIO_Init+0x2cc>)
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	089b      	lsrs	r3, r3, #2
 80022f4:	3302      	adds	r3, #2
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022fc:	4b36      	ldr	r3, [pc, #216]	; (80023d8 <HAL_GPIO_Init+0x2dc>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	43db      	mvns	r3, r3
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	4013      	ands	r3, r2
 800230a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d003      	beq.n	8002320 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	4313      	orrs	r3, r2
 800231e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002320:	4a2d      	ldr	r2, [pc, #180]	; (80023d8 <HAL_GPIO_Init+0x2dc>)
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002326:	4b2c      	ldr	r3, [pc, #176]	; (80023d8 <HAL_GPIO_Init+0x2dc>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	43db      	mvns	r3, r3
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	4013      	ands	r3, r2
 8002334:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	4313      	orrs	r3, r2
 8002348:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800234a:	4a23      	ldr	r2, [pc, #140]	; (80023d8 <HAL_GPIO_Init+0x2dc>)
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002350:	4b21      	ldr	r3, [pc, #132]	; (80023d8 <HAL_GPIO_Init+0x2dc>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	43db      	mvns	r3, r3
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	4013      	ands	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d003      	beq.n	8002374 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	4313      	orrs	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002374:	4a18      	ldr	r2, [pc, #96]	; (80023d8 <HAL_GPIO_Init+0x2dc>)
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800237a:	4b17      	ldr	r3, [pc, #92]	; (80023d8 <HAL_GPIO_Init+0x2dc>)
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	43db      	mvns	r3, r3
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	4013      	ands	r3, r2
 8002388:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	4313      	orrs	r3, r2
 800239c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800239e:	4a0e      	ldr	r2, [pc, #56]	; (80023d8 <HAL_GPIO_Init+0x2dc>)
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	3301      	adds	r3, #1
 80023a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	fa22 f303 	lsr.w	r3, r2, r3
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f47f aead 	bne.w	8002114 <HAL_GPIO_Init+0x18>
      }
    }
    
    position++;
  }
}
 80023ba:	371c      	adds	r7, #28
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	40021000 	.word	0x40021000
 80023c8:	40010000 	.word	0x40010000
 80023cc:	48000400 	.word	0x48000400
 80023d0:	48000800 	.word	0x48000800
 80023d4:	48000c00 	.word	0x48000c00
 80023d8:	40010400 	.word	0x40010400

080023dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	460b      	mov	r3, r1
 80023e6:	807b      	strh	r3, [r7, #2]
 80023e8:	4613      	mov	r3, r2
 80023ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023ec:	787b      	ldrb	r3, [r7, #1]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023f2:	887a      	ldrh	r2, [r7, #2]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	619a      	str	r2, [r3, #24]
 80023f8:	e002      	b.n	8002400 <HAL_GPIO_WritePin+0x24>
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023fa:	887a      	ldrh	r2, [r7, #2]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop

0800240c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e043      	b.n	80024a6 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d106      	bne.n	8002438 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f7fd ff18 	bl	8000268 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2224      	movs	r2, #36	; 0x24
 800243c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	6812      	ldr	r2, [r2, #0]
 8002448:	6812      	ldr	r2, [r2, #0]
 800244a:	f022 0201 	bic.w	r2, r2, #1
 800244e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 f97f 	bl	8002754 <UART_SetConfig>
 8002456:	4603      	mov	r3, r0
 8002458:	2b01      	cmp	r3, #1
 800245a:	d101      	bne.n	8002460 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e022      	b.n	80024a6 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002464:	2b00      	cmp	r3, #0
 8002466:	d002      	beq.n	800246e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 fad7 	bl	8002a1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	6812      	ldr	r2, [r2, #0]
 8002476:	6852      	ldr	r2, [r2, #4]
 8002478:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800247c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	6812      	ldr	r2, [r2, #0]
 8002486:	6892      	ldr	r2, [r2, #8]
 8002488:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800248c:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	6812      	ldr	r2, [r2, #0]
 8002496:	6812      	ldr	r2, [r2, #0]
 8002498:	f042 0201 	orr.w	r2, r2, #1
 800249c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 fb5e 	bl	8002b60 <UART_CheckIdleState>
 80024a4:	4603      	mov	r3, r0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop

080024b0 <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b088      	sub	sp, #32
 80024b4:	af02      	add	r7, sp, #8
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	603b      	str	r3, [r7, #0]
 80024bc:	4613      	mov	r3, r2
 80024be:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b20      	cmp	r3, #32
 80024ce:	d177      	bne.n	80025c0 <HAL_UART_Transmit+0x110>
  {
    if((pData == NULL ) || (Size == 0U))
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d002      	beq.n	80024dc <HAL_UART_Transmit+0x2c>
 80024d6:	88fb      	ldrh	r3, [r7, #6]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d101      	bne.n	80024e0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e070      	b.n	80025c2 <HAL_UART_Transmit+0x112>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d101      	bne.n	80024ee <HAL_UART_Transmit+0x3e>
 80024ea:	2302      	movs	r3, #2
 80024ec:	e069      	b.n	80025c2 <HAL_UART_Transmit+0x112>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2201      	movs	r2, #1
 80024f2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2221      	movs	r2, #33	; 0x21
 8002500:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002504:	f7fe f912 	bl	800072c <HAL_GetTick>
 8002508:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	88fa      	ldrh	r2, [r7, #6]
 800250e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	88fa      	ldrh	r2, [r7, #6]
 8002516:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 800251a:	e034      	b.n	8002586 <HAL_UART_Transmit+0xd6>
    {
      huart->TxXferCount--;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002522:	b29b      	uxth	r3, r3
 8002524:	3b01      	subs	r3, #1
 8002526:	b29a      	uxth	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	2180      	movs	r1, #128	; 0x80
 8002536:	2200      	movs	r2, #0
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	f000 fb5b 	bl	8002bf4 <UART_WaitOnFlagUntilTimeout>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e03c      	b.n	80025c2 <HAL_UART_Transmit+0x112>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002550:	d111      	bne.n	8002576 <HAL_UART_Transmit+0xc6>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10d      	bne.n	8002576 <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	8812      	ldrh	r2, [r2, #0]
 8002566:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800256a:	b292      	uxth	r2, r2
 800256c:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2U;
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	3302      	adds	r3, #2
 8002572:	60bb      	str	r3, [r7, #8]
 8002574:	e007      	b.n	8002586 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	1c59      	adds	r1, r3, #1
 800257e:	60b9      	str	r1, [r7, #8]
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	b29b      	uxth	r3, r3
 8002584:	8513      	strh	r3, [r2, #40]	; 0x28
    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0U)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800258c:	b29b      	uxth	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1c4      	bne.n	800251c <HAL_UART_Transmit+0x6c>
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	9300      	str	r3, [sp, #0]
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	2140      	movs	r1, #64	; 0x40
 800259a:	2200      	movs	r2, #0
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	f000 fb29 	bl	8002bf4 <UART_WaitOnFlagUntilTimeout>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <HAL_UART_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e00a      	b.n	80025c2 <HAL_UART_Transmit+0x112>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2220      	movs	r2, #32
 80025b0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 80025bc:	2300      	movs	r3, #0
 80025be:	e000      	b.n	80025c2 <HAL_UART_Transmit+0x112>
  }
  else
  {
    return HAL_BUSY;
 80025c0:	2302      	movs	r3, #2
  }
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3718      	adds	r7, #24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop

080025cc <HAL_UART_Receive>:
  * @param Size amount of data to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b08a      	sub	sp, #40	; 0x28
 80025d0:	af02      	add	r7, sp, #8
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	603b      	str	r3, [r7, #0]
 80025d8:	4613      	mov	r3, r2
 80025da:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0U;
 80025dc:	2300      	movs	r3, #0
 80025de:	61fb      	str	r3, [r7, #28]

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b20      	cmp	r3, #32
 80025ea:	f040 80ad 	bne.w	8002748 <HAL_UART_Receive+0x17c>
  {
    if((pData == NULL ) || (Size == 0U))
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d002      	beq.n	80025fa <HAL_UART_Receive+0x2e>
 80025f4:	88fb      	ldrh	r3, [r7, #6]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e0a5      	b.n	800274a <HAL_UART_Receive+0x17e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8002604:	2b01      	cmp	r3, #1
 8002606:	d101      	bne.n	800260c <HAL_UART_Receive+0x40>
 8002608:	2302      	movs	r3, #2
 800260a:	e09e      	b.n	800274a <HAL_UART_Receive+0x17e>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2222      	movs	r2, #34	; 0x22
 800261e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002622:	f7fe f883 	bl	800072c <HAL_GetTick>
 8002626:	61f8      	str	r0, [r7, #28]

    huart->RxXferSize = Size;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	88fa      	ldrh	r2, [r7, #6]
 800262c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	88fa      	ldrh	r2, [r7, #6]
 8002634:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002640:	d10e      	bne.n	8002660 <HAL_UART_Receive+0x94>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d105      	bne.n	8002656 <HAL_UART_Receive+0x8a>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002650:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002654:	e028      	b.n	80026a8 <HAL_UART_Receive+0xdc>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	22ff      	movs	r2, #255	; 0xff
 800265a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800265e:	e023      	b.n	80026a8 <HAL_UART_Receive+0xdc>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d10d      	bne.n	8002684 <HAL_UART_Receive+0xb8>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d104      	bne.n	800267a <HAL_UART_Receive+0xae>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	22ff      	movs	r2, #255	; 0xff
 8002674:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002678:	e016      	b.n	80026a8 <HAL_UART_Receive+0xdc>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	227f      	movs	r2, #127	; 0x7f
 800267e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002682:	e011      	b.n	80026a8 <HAL_UART_Receive+0xdc>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800268c:	d10c      	bne.n	80026a8 <HAL_UART_Receive+0xdc>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d104      	bne.n	80026a0 <HAL_UART_Receive+0xd4>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	227f      	movs	r2, #127	; 0x7f
 800269a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800269e:	e003      	b.n	80026a8 <HAL_UART_Receive+0xdc>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	223f      	movs	r2, #63	; 0x3f
 80026a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80026ae:	837b      	strh	r3, [r7, #26]

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 80026b0:	e03a      	b.n	8002728 <HAL_UART_Receive+0x15c>
    {
      huart->RxXferCount--;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	3b01      	subs	r3, #1
 80026bc:	b29a      	uxth	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	68f8      	ldr	r0, [r7, #12]
 80026ca:	2120      	movs	r1, #32
 80026cc:	2200      	movs	r2, #0
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	f000 fa90 	bl	8002bf4 <UART_WaitOnFlagUntilTimeout>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <HAL_UART_Receive+0x112>
      {
        return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e035      	b.n	800274a <HAL_UART_Receive+0x17e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026e6:	d112      	bne.n	800270e <HAL_UART_Receive+0x142>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10e      	bne.n	800270e <HAL_UART_Receive+0x142>
      {
        tmp = (uint16_t*) pData ;
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	617b      	str	r3, [r7, #20]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	8b7b      	ldrh	r3, [r7, #26]
 80026fe:	4013      	ands	r3, r2
 8002700:	b29a      	uxth	r2, r3
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	801a      	strh	r2, [r3, #0]
        pData +=2U;
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	3302      	adds	r3, #2
 800270a:	60bb      	str	r3, [r7, #8]
 800270c:	e00c      	b.n	8002728 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	1c5a      	adds	r2, r3, #1
 8002712:	60ba      	str	r2, [r7, #8]
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	6812      	ldr	r2, [r2, #0]
 8002718:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800271a:	b292      	uxth	r2, r2
 800271c:	b2d1      	uxtb	r1, r2
 800271e:	8b7a      	ldrh	r2, [r7, #26]
 8002720:	b2d2      	uxtb	r2, r2
 8002722:	400a      	ands	r2, r1
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	701a      	strb	r2, [r3, #0]
    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
    uhMask = huart->Mask;

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800272e:	b29b      	uxth	r3, r3
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1be      	bne.n	80026b2 <HAL_UART_Receive+0xe6>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2220      	movs	r2, #32
 8002738:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 8002744:	2300      	movs	r3, #0
 8002746:	e000      	b.n	800274a <HAL_UART_Receive+0x17e>
  }
  else
  {
    return HAL_BUSY;
 8002748:	2302      	movs	r3, #2
  }
}
 800274a:	4618      	mov	r0, r3
 800274c:	3720      	adds	r7, #32
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop

08002754 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002754:	b590      	push	{r4, r7, lr}
 8002756:	b087      	sub	sp, #28
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 800275c:	2300      	movs	r3, #0
 800275e:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002760:	2310      	movs	r3, #16
 8002762:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8002764:	2300      	movs	r3, #0
 8002766:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8002768:	2300      	movs	r3, #0
 800276a:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 800276c:	2300      	movs	r3, #0
 800276e:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689a      	ldr	r2, [r3, #8]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	431a      	orrs	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	431a      	orrs	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	69db      	ldr	r3, [r3, #28]
 8002784:	4313      	orrs	r3, r2
 8002786:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6819      	ldr	r1, [r3, #0]
 8002792:	4b9d      	ldr	r3, [pc, #628]	; (8002a08 <UART_SetConfig+0x2b4>)
 8002794:	400b      	ands	r3, r1
 8002796:	68f9      	ldr	r1, [r7, #12]
 8002798:	430b      	orrs	r3, r1
 800279a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	6812      	ldr	r2, [r2, #0]
 80027a4:	6852      	ldr	r2, [r2, #4]
 80027a6:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	68d2      	ldr	r2, [r2, #12]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	699a      	ldr	r2, [r3, #24]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	6812      	ldr	r2, [r2, #0]
 80027c6:	6892      	ldr	r2, [r2, #8]
 80027c8:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	430a      	orrs	r2, r1
 80027d0:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a8d      	ldr	r2, [pc, #564]	; (8002a0c <UART_SetConfig+0x2b8>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d121      	bne.n	8002820 <UART_SetConfig+0xcc>
 80027dc:	4b8c      	ldr	r3, [pc, #560]	; (8002a10 <UART_SetConfig+0x2bc>)
 80027de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e0:	f003 0303 	and.w	r3, r3, #3
 80027e4:	2b03      	cmp	r3, #3
 80027e6:	d817      	bhi.n	8002818 <UART_SetConfig+0xc4>
 80027e8:	a201      	add	r2, pc, #4	; (adr r2, 80027f0 <UART_SetConfig+0x9c>)
 80027ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ee:	bf00      	nop
 80027f0:	08002801 	.word	0x08002801
 80027f4:	0800280d 	.word	0x0800280d
 80027f8:	08002813 	.word	0x08002813
 80027fc:	08002807 	.word	0x08002807
 8002800:	2300      	movs	r3, #0
 8002802:	75fb      	strb	r3, [r7, #23]
 8002804:	e00a      	b.n	800281c <UART_SetConfig+0xc8>
 8002806:	2302      	movs	r3, #2
 8002808:	75fb      	strb	r3, [r7, #23]
 800280a:	e007      	b.n	800281c <UART_SetConfig+0xc8>
 800280c:	2304      	movs	r3, #4
 800280e:	75fb      	strb	r3, [r7, #23]
 8002810:	e004      	b.n	800281c <UART_SetConfig+0xc8>
 8002812:	2308      	movs	r3, #8
 8002814:	75fb      	strb	r3, [r7, #23]
 8002816:	e001      	b.n	800281c <UART_SetConfig+0xc8>
 8002818:	2310      	movs	r3, #16
 800281a:	75fb      	strb	r3, [r7, #23]
 800281c:	bf00      	nop
 800281e:	e011      	b.n	8002844 <UART_SetConfig+0xf0>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a7b      	ldr	r2, [pc, #492]	; (8002a14 <UART_SetConfig+0x2c0>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d102      	bne.n	8002830 <UART_SetConfig+0xdc>
 800282a:	2300      	movs	r3, #0
 800282c:	75fb      	strb	r3, [r7, #23]
 800282e:	e009      	b.n	8002844 <UART_SetConfig+0xf0>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a78      	ldr	r2, [pc, #480]	; (8002a18 <UART_SetConfig+0x2c4>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d102      	bne.n	8002840 <UART_SetConfig+0xec>
 800283a:	2300      	movs	r3, #0
 800283c:	75fb      	strb	r3, [r7, #23]
 800283e:	e001      	b.n	8002844 <UART_SetConfig+0xf0>
 8002840:	2310      	movs	r3, #16
 8002842:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	69db      	ldr	r3, [r3, #28]
 8002848:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800284c:	d16e      	bne.n	800292c <UART_SetConfig+0x1d8>
  {
    switch (clocksource)
 800284e:	7dfb      	ldrb	r3, [r7, #23]
 8002850:	2b08      	cmp	r3, #8
 8002852:	d857      	bhi.n	8002904 <UART_SetConfig+0x1b0>
 8002854:	a201      	add	r2, pc, #4	; (adr r2, 800285c <UART_SetConfig+0x108>)
 8002856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800285a:	bf00      	nop
 800285c:	08002881 	.word	0x08002881
 8002860:	0800289d 	.word	0x0800289d
 8002864:	080028b9 	.word	0x080028b9
 8002868:	08002905 	.word	0x08002905
 800286c:	080028d3 	.word	0x080028d3
 8002870:	08002905 	.word	0x08002905
 8002874:	08002905 	.word	0x08002905
 8002878:	08002905 	.word	0x08002905
 800287c:	080028ef 	.word	0x080028ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002880:	f7ff fbc8 	bl	8002014 <HAL_RCC_GetPCLK1Freq>
 8002884:	4603      	mov	r3, r0
 8002886:	005a      	lsls	r2, r3, #1
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	085b      	lsrs	r3, r3, #1
 800288e:	441a      	add	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	fbb2 f3f3 	udiv	r3, r2, r3
 8002898:	82bb      	strh	r3, [r7, #20]
        break;
 800289a:	e036      	b.n	800290a <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800289c:	f7ff fbdc 	bl	8002058 <HAL_RCC_GetPCLK2Freq>
 80028a0:	4603      	mov	r3, r0
 80028a2:	005a      	lsls	r2, r3, #1
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	085b      	lsrs	r3, r3, #1
 80028aa:	441a      	add	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b4:	82bb      	strh	r3, [r7, #20]
        break;
 80028b6:	e028      	b.n	800290a <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	085b      	lsrs	r3, r3, #1
 80028be:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80028c2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	6852      	ldr	r2, [r2, #4]
 80028ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80028ce:	82bb      	strh	r3, [r7, #20]
        break;
 80028d0:	e01b      	b.n	800290a <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80028d2:	f7ff fb29 	bl	8001f28 <HAL_RCC_GetSysClockFreq>
 80028d6:	4603      	mov	r3, r0
 80028d8:	005a      	lsls	r2, r3, #1
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	085b      	lsrs	r3, r3, #1
 80028e0:	441a      	add	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ea:	82bb      	strh	r3, [r7, #20]
        break;
 80028ec:	e00d      	b.n	800290a <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	085b      	lsrs	r3, r3, #1
 80028f4:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002900:	82bb      	strh	r3, [r7, #20]
        break;
 8002902:	e002      	b.n	800290a <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	74fb      	strb	r3, [r7, #19]
        break;
 8002908:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 800290a:	8abb      	ldrh	r3, [r7, #20]
 800290c:	f023 030f 	bic.w	r3, r3, #15
 8002910:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002912:	8abb      	ldrh	r3, [r7, #20]
 8002914:	f003 030f 	and.w	r3, r3, #15
 8002918:	105b      	asrs	r3, r3, #1
 800291a:	b29a      	uxth	r2, r3
 800291c:	897b      	ldrh	r3, [r7, #10]
 800291e:	4313      	orrs	r3, r2
 8002920:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	897a      	ldrh	r2, [r7, #10]
 8002928:	60da      	str	r2, [r3, #12]
 800292a:	e068      	b.n	80029fe <UART_SetConfig+0x2aa>
  }
  else
  {
    switch (clocksource)
 800292c:	7dfb      	ldrb	r3, [r7, #23]
 800292e:	2b08      	cmp	r3, #8
 8002930:	d862      	bhi.n	80029f8 <UART_SetConfig+0x2a4>
 8002932:	a201      	add	r2, pc, #4	; (adr r2, 8002938 <UART_SetConfig+0x1e4>)
 8002934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002938:	0800295d 	.word	0x0800295d
 800293c:	0800297d 	.word	0x0800297d
 8002940:	0800299d 	.word	0x0800299d
 8002944:	080029f9 	.word	0x080029f9
 8002948:	080029bd 	.word	0x080029bd
 800294c:	080029f9 	.word	0x080029f9
 8002950:	080029f9 	.word	0x080029f9
 8002954:	080029f9 	.word	0x080029f9
 8002958:	080029dd 	.word	0x080029dd
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681c      	ldr	r4, [r3, #0]
 8002960:	f7ff fb58 	bl	8002014 <HAL_RCC_GetPCLK1Freq>
 8002964:	4602      	mov	r2, r0
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	085b      	lsrs	r3, r3, #1
 800296c:	441a      	add	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	fbb2 f3f3 	udiv	r3, r2, r3
 8002976:	b29b      	uxth	r3, r3
 8002978:	60e3      	str	r3, [r4, #12]
        break;
 800297a:	e040      	b.n	80029fe <UART_SetConfig+0x2aa>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681c      	ldr	r4, [r3, #0]
 8002980:	f7ff fb6a 	bl	8002058 <HAL_RCC_GetPCLK2Freq>
 8002984:	4602      	mov	r2, r0
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	085b      	lsrs	r3, r3, #1
 800298c:	441a      	add	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	fbb2 f3f3 	udiv	r3, r2, r3
 8002996:	b29b      	uxth	r3, r3
 8002998:	60e3      	str	r3, [r4, #12]
        break;
 800299a:	e030      	b.n	80029fe <UART_SetConfig+0x2aa>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	085b      	lsrs	r3, r3, #1
 80029a6:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80029aa:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	6849      	ldr	r1, [r1, #4]
 80029b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	60d3      	str	r3, [r2, #12]
        break;
 80029ba:	e020      	b.n	80029fe <UART_SetConfig+0x2aa>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681c      	ldr	r4, [r3, #0]
 80029c0:	f7ff fab2 	bl	8001f28 <HAL_RCC_GetSysClockFreq>
 80029c4:	4602      	mov	r2, r0
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	085b      	lsrs	r3, r3, #1
 80029cc:	441a      	add	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	60e3      	str	r3, [r4, #12]
        break;
 80029da:	e010      	b.n	80029fe <UART_SetConfig+0x2aa>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	6852      	ldr	r2, [r2, #4]
 80029e4:	0852      	lsrs	r2, r2, #1
 80029e6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6852      	ldr	r2, [r2, #4]
 80029ee:	fbb1 f2f2 	udiv	r2, r1, r2
 80029f2:	b292      	uxth	r2, r2
 80029f4:	60da      	str	r2, [r3, #12]
        break;
 80029f6:	e002      	b.n	80029fe <UART_SetConfig+0x2aa>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	74fb      	strb	r3, [r7, #19]
        break;
 80029fc:	bf00      	nop
    }
  }

  return ret;
 80029fe:	7cfb      	ldrb	r3, [r7, #19]

}
 8002a00:	4618      	mov	r0, r3
 8002a02:	371c      	adds	r7, #28
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd90      	pop	{r4, r7, pc}
 8002a08:	efff69f3 	.word	0xefff69f3
 8002a0c:	40013800 	.word	0x40013800
 8002a10:	40021000 	.word	0x40021000
 8002a14:	40004400 	.word	0x40004400
 8002a18:	40004800 	.word	0x40004800

08002a1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00a      	beq.n	8002a46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	6812      	ldr	r2, [r2, #0]
 8002a38:	6852      	ldr	r2, [r2, #4]
 8002a3a:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002a42:	430a      	orrs	r2, r1
 8002a44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00a      	beq.n	8002a68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	6812      	ldr	r2, [r2, #0]
 8002a5a:	6852      	ldr	r2, [r2, #4]
 8002a5c:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002a64:	430a      	orrs	r2, r1
 8002a66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00a      	beq.n	8002a8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6812      	ldr	r2, [r2, #0]
 8002a7c:	6852      	ldr	r2, [r2, #4]
 8002a7e:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a86:	430a      	orrs	r2, r1
 8002a88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8e:	f003 0308 	and.w	r3, r3, #8
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00a      	beq.n	8002aac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	6812      	ldr	r2, [r2, #0]
 8002a9e:	6852      	ldr	r2, [r2, #4]
 8002aa0:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab0:	f003 0310 	and.w	r3, r3, #16
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00a      	beq.n	8002ace <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6812      	ldr	r2, [r2, #0]
 8002ac0:	6892      	ldr	r2, [r2, #8]
 8002ac2:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002aca:	430a      	orrs	r2, r1
 8002acc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad2:	f003 0320 	and.w	r3, r3, #32
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00a      	beq.n	8002af0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	6812      	ldr	r2, [r2, #0]
 8002ae2:	6892      	ldr	r2, [r2, #8]
 8002ae4:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002aec:	430a      	orrs	r2, r1
 8002aee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d01a      	beq.n	8002b32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6812      	ldr	r2, [r2, #0]
 8002b04:	6852      	ldr	r2, [r2, #4]
 8002b06:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b1a:	d10a      	bne.n	8002b32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	6812      	ldr	r2, [r2, #0]
 8002b24:	6852      	ldr	r2, [r2, #4]
 8002b26:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00a      	beq.n	8002b54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6812      	ldr	r2, [r2, #0]
 8002b46:	6852      	ldr	r2, [r2, #4]
 8002b48:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002b50:	430a      	orrs	r2, r1
 8002b52:	605a      	str	r2, [r3, #4]
  }
}
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop

08002b60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af02      	add	r7, sp, #8
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002b72:	f7fd fddb 	bl	800072c <HAL_GetTick>
 8002b76:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0308 	and.w	r3, r3, #8
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00e      	beq.n	8002ba4 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b86:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002b92:	2200      	movs	r2, #0
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f000 f82d 	bl	8002bf4 <UART_WaitOnFlagUntilTimeout>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e022      	b.n	8002bea <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0304 	and.w	r3, r3, #4
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00e      	beq.n	8002bd0 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bb2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f000 f817 	bl	8002bf4 <UART_WaitOnFlagUntilTimeout>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e00c      	b.n	8002bea <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2220      	movs	r2, #32
 8002bdc:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop

08002bf4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	603b      	str	r3, [r7, #0]
 8002c00:	4613      	mov	r3, r2
 8002c02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c04:	e02c      	b.n	8002c60 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c0c:	d028      	beq.n	8002c60 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d007      	beq.n	8002c24 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c14:	f7fd fd8a 	bl	800072c <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	1ad2      	subs	r2, r2, r3
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d91d      	bls.n	8002c60 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	6812      	ldr	r2, [r2, #0]
 8002c2c:	6812      	ldr	r2, [r2, #0]
 8002c2e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002c32:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	6812      	ldr	r2, [r2, #0]
 8002c3c:	6892      	ldr	r2, [r2, #8]
 8002c3e:	f022 0201 	bic.w	r2, r2, #1
 8002c42:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2220      	movs	r2, #32
 8002c48:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2220      	movs	r2, #32
 8002c50:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e00f      	b.n	8002c80 <UART_WaitOnFlagUntilTimeout+0x8c>
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	69da      	ldr	r2, [r3, #28]
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	401a      	ands	r2, r3
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	bf0c      	ite	eq
 8002c70:	2301      	moveq	r3, #1
 8002c72:	2300      	movne	r3, #0
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	461a      	mov	r2, r3
 8002c78:	79fb      	ldrb	r3, [r7, #7]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d0c3      	beq.n	8002c06 <UART_WaitOnFlagUntilTimeout+0x12>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e01d      	b.n	8002cd6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d106      	bne.n	8002cb4 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 f816 	bl	8002ce0 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3304      	adds	r3, #4
 8002cc4:	4610      	mov	r0, r2
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	f000 f976 	bl	8002fb8 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop

08002ce0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop

08002cf4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	6812      	ldr	r2, [r2, #0]
 8002d04:	68d2      	ldr	r2, [r2, #12]
 8002d06:	f042 0201 	orr.w	r2, r2, #1
 8002d0a:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	6812      	ldr	r2, [r2, #0]
 8002d14:	6812      	ldr	r2, [r2, #0]
 8002d16:	f042 0201 	orr.w	r2, r2, #1
 8002d1a:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop

08002d2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d022      	beq.n	8002d88 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d01b      	beq.n	8002d88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f06f 0202 	mvn.w	r2, #2
 8002d58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	771a      	strb	r2, [r3, #28]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	f003 0303 	and.w	r3, r3, #3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f904 	bl	8002f7c <HAL_TIM_IC_CaptureCallback>
 8002d74:	e005      	b.n	8002d82 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 f8f6 	bl	8002f68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 f907 	bl	8002f90 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	f003 0304 	and.w	r3, r3, #4
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d022      	beq.n	8002ddc <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	f003 0304 	and.w	r3, r3, #4
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d01b      	beq.n	8002ddc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f06f 0204 	mvn.w	r2, #4
 8002dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2202      	movs	r2, #2
 8002db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d003      	beq.n	8002dca <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f8da 	bl	8002f7c <HAL_TIM_IC_CaptureCallback>
 8002dc8:	e005      	b.n	8002dd6 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f8cc 	bl	8002f68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 f8dd 	bl	8002f90 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	f003 0308 	and.w	r3, r3, #8
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d022      	beq.n	8002e30 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	f003 0308 	and.w	r3, r3, #8
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d01b      	beq.n	8002e30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f06f 0208 	mvn.w	r2, #8
 8002e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2204      	movs	r2, #4
 8002e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	f003 0303 	and.w	r3, r3, #3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d003      	beq.n	8002e1e <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 f8b0 	bl	8002f7c <HAL_TIM_IC_CaptureCallback>
 8002e1c:	e005      	b.n	8002e2a <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 f8a2 	bl	8002f68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 f8b3 	bl	8002f90 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	f003 0310 	and.w	r3, r3, #16
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d022      	beq.n	8002e84 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	f003 0310 	and.w	r3, r3, #16
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d01b      	beq.n	8002e84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f06f 0210 	mvn.w	r2, #16
 8002e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2208      	movs	r2, #8
 8002e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d003      	beq.n	8002e72 <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 f886 	bl	8002f7c <HAL_TIM_IC_CaptureCallback>
 8002e70:	e005      	b.n	8002e7e <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 f878 	bl	8002f68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 f889 	bl	8002f90 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00e      	beq.n	8002eb0 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d007      	beq.n	8002eb0 <HAL_TIM_IRQHandler+0x184>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f06f 0201 	mvn.w	r2, #1
 8002ea8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f7fd fb96 	bl	80005dc <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00e      	beq.n	8002edc <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d007      	beq.n	8002edc <HAL_TIM_IRQHandler+0x1b0>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ed4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7fd fbf0 	bl	80006bc <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00e      	beq.n	8002f08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d007      	beq.n	8002f08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002f00:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7fd fbe4 	bl	80006d0 <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00e      	beq.n	8002f34 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d007      	beq.n	8002f34 <HAL_TIM_IRQHandler+0x208>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f2c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 f838 	bl	8002fa4 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	f003 0320 	and.w	r3, r3, #32
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00e      	beq.n	8002f60 <HAL_TIM_IRQHandler+0x234>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	f003 0320 	and.w	r3, r3, #32
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d007      	beq.n	8002f60 <HAL_TIM_IRQHandler+0x234>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f06f 0220 	mvn.w	r2, #32
 8002f58:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7fd fba4 	bl	80006a8 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop

08002f68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop

08002f7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop

08002f90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop

08002fa4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop

08002fb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a2d      	ldr	r2, [pc, #180]	; (8003084 <TIM_Base_SetConfig+0xcc>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d003      	beq.n	8002fdc <TIM_Base_SetConfig+0x24>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fda:	d108      	bne.n	8002fee <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fe2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a24      	ldr	r2, [pc, #144]	; (8003084 <TIM_Base_SetConfig+0xcc>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d00f      	beq.n	8003016 <TIM_Base_SetConfig+0x5e>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ffc:	d00b      	beq.n	8003016 <TIM_Base_SetConfig+0x5e>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a21      	ldr	r2, [pc, #132]	; (8003088 <TIM_Base_SetConfig+0xd0>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d007      	beq.n	8003016 <TIM_Base_SetConfig+0x5e>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a20      	ldr	r2, [pc, #128]	; (800308c <TIM_Base_SetConfig+0xd4>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d003      	beq.n	8003016 <TIM_Base_SetConfig+0x5e>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a1f      	ldr	r2, [pc, #124]	; (8003090 <TIM_Base_SetConfig+0xd8>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d108      	bne.n	8003028 <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800301c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	4313      	orrs	r3, r2
 8003026:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	4313      	orrs	r3, r2
 8003034:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	689a      	ldr	r2, [r3, #8]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	629a      	str	r2, [r3, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a0d      	ldr	r2, [pc, #52]	; (8003084 <TIM_Base_SetConfig+0xcc>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d00b      	beq.n	800306c <TIM_Base_SetConfig+0xb4>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a0c      	ldr	r2, [pc, #48]	; (8003088 <TIM_Base_SetConfig+0xd0>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d007      	beq.n	800306c <TIM_Base_SetConfig+0xb4>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a0b      	ldr	r2, [pc, #44]	; (800308c <TIM_Base_SetConfig+0xd4>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d003      	beq.n	800306c <TIM_Base_SetConfig+0xb4>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a0a      	ldr	r2, [pc, #40]	; (8003090 <TIM_Base_SetConfig+0xd8>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d103      	bne.n	8003074 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	691a      	ldr	r2, [r3, #16]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	615a      	str	r2, [r3, #20]
}
 800307a:	3714      	adds	r7, #20
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	40012c00 	.word	0x40012c00
 8003088:	40014000 	.word	0x40014000
 800308c:	40014400 	.word	0x40014400
 8003090:	40014800 	.word	0x40014800

08003094 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 800309a:	4b21      	ldr	r3, [pc, #132]	; (8003120 <_DoInit+0x8c>)
 800309c:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2203      	movs	r2, #3
 80030a2:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2203      	movs	r2, #3
 80030a8:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a1d      	ldr	r2, [pc, #116]	; (8003124 <_DoInit+0x90>)
 80030ae:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a1d      	ldr	r2, [pc, #116]	; (8003128 <_DoInit+0x94>)
 80030b4:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030bc:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a14      	ldr	r2, [pc, #80]	; (8003124 <_DoInit+0x90>)
 80030d4:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a14      	ldr	r2, [pc, #80]	; (800312c <_DoInit+0x98>)
 80030da:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2210      	movs	r2, #16
 80030e0:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3307      	adds	r3, #7
 80030f8:	4a0d      	ldr	r2, [pc, #52]	; (8003130 <_DoInit+0x9c>)
 80030fa:	6810      	ldr	r0, [r2, #0]
 80030fc:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a0c      	ldr	r2, [pc, #48]	; (8003134 <_DoInit+0xa0>)
 8003102:	6810      	ldr	r0, [r2, #0]
 8003104:	6018      	str	r0, [r3, #0]
 8003106:	8891      	ldrh	r1, [r2, #4]
 8003108:	7992      	ldrb	r2, [r2, #6]
 800310a:	8099      	strh	r1, [r3, #4]
 800310c:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2220      	movs	r2, #32
 8003112:	719a      	strb	r2, [r3, #6]
}
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	20001604 	.word	0x20001604
 8003124:	08004224 	.word	0x08004224
 8003128:	20000020 	.word	0x20000020
 800312c:	20000420 	.word	0x20000420
 8003130:	08004230 	.word	0x08004230
 8003134:	08004234 	.word	0x08004234

08003138 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003138:	b580      	push	{r7, lr}
 800313a:	b08a      	sub	sp, #40	; 0x28
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
  unsigned                RdOff;
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  //
  INIT();
 8003144:	4b3c      	ldr	r3, [pc, #240]	; (8003238 <SEGGER_RTT_ReadNoLock+0x100>)
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d101      	bne.n	8003150 <SEGGER_RTT_ReadNoLock+0x18>
 800314c:	f7ff ffa2 	bl	8003094 <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	4613      	mov	r3, r2
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	4413      	add	r3, r2
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	3360      	adds	r3, #96	; 0x60
 800315c:	4a36      	ldr	r2, [pc, #216]	; (8003238 <SEGGER_RTT_ReadNoLock+0x100>)
 800315e:	4413      	add	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 8003172:	2300      	movs	r3, #0
 8003174:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003176:	6a3a      	ldr	r2, [r7, #32]
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	429a      	cmp	r2, r3
 800317c:	d92a      	bls.n	80031d4 <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	689a      	ldr	r2, [r3, #8]
 8003182:	6a3b      	ldr	r3, [r7, #32]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4293      	cmp	r3, r2
 800318e:	bf28      	it	cs
 8003190:	4613      	movcs	r3, r2
 8003192:	613b      	str	r3, [r7, #16]
    memcpy(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	685a      	ldr	r2, [r3, #4]
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	4413      	add	r3, r2
 800319c:	69f8      	ldr	r0, [r7, #28]
 800319e:	4619      	mov	r1, r3
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	f001 f81f 	bl	80041e4 <memcpy>
    NumBytesRead += NumBytesRem;
 80031a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	4413      	add	r3, r2
 80031ac:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 80031ae:	69fa      	ldr	r2, [r7, #28]
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	4413      	add	r3, r2
 80031b4:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80031be:	6a3a      	ldr	r2, [r7, #32]
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	4413      	add	r3, r2
 80031c4:	623b      	str	r3, [r7, #32]
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	689a      	ldr	r2, [r3, #8]
 80031ca:	6a3b      	ldr	r3, [r7, #32]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d101      	bne.n	80031d4 <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 80031d0:	2300      	movs	r3, #0
 80031d2:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	6a3b      	ldr	r3, [r7, #32]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4293      	cmp	r3, r2
 80031e2:	bf28      	it	cs
 80031e4:	4613      	movcs	r3, r2
 80031e6:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d018      	beq.n	8003220 <SEGGER_RTT_ReadNoLock+0xe8>
    memcpy(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	6a3b      	ldr	r3, [r7, #32]
 80031f4:	4413      	add	r3, r2
 80031f6:	69f8      	ldr	r0, [r7, #28]
 80031f8:	4619      	mov	r1, r3
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	f000 fff2 	bl	80041e4 <memcpy>
    NumBytesRead += NumBytesRem;
 8003200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	4413      	add	r3, r2
 8003206:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8003208:	69fa      	ldr	r2, [r7, #28]
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	4413      	add	r3, r2
 800320e:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003218:	6a3a      	ldr	r2, [r7, #32]
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	4413      	add	r3, r2
 800321e:	623b      	str	r3, [r7, #32]
  }
  if (NumBytesRead) {
 8003220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003222:	2b00      	cmp	r3, #0
 8003224:	d002      	beq.n	800322c <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	6a3a      	ldr	r2, [r7, #32]
 800322a:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800322e:	4618      	mov	r0, r3
 8003230:	3728      	adds	r7, #40	; 0x28
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	20001604 	.word	0x20001604

0800323c <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800323c:	b580      	push	{r7, lr}
 800323e:	b08c      	sub	sp, #48	; 0x30
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
  unsigned              Avail;
  unsigned              RdOff;
  unsigned              WrOff;
  unsigned              Rem;

  pData = (const char *)pBuffer;
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	1c5a      	adds	r2, r3, #1
 8003250:	4613      	mov	r3, r2
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	4413      	add	r3, r2
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	4a46      	ldr	r2, [pc, #280]	; (8003374 <SEGGER_RTT_WriteSkipNoLock+0x138>)
 800325a:	4413      	add	r3, r2
 800325c:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800325e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	61fb      	str	r3, [r7, #28]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 800326a:	6a3a      	ldr	r2, [r7, #32]
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	429a      	cmp	r2, r3
 8003270:	d862      	bhi.n	8003338 <SEGGER_RTT_WriteSkipNoLock+0xfc>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 8003272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003274:	689a      	ldr	r2, [r3, #8]
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	3b01      	subs	r3, #1
 800327c:	61bb      	str	r3, [r7, #24]
    if (Avail >= NumBytes) {
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	429a      	cmp	r2, r3
 8003284:	d31d      	bcc.n	80032c2 <SEGGER_RTT_WriteSkipNoLock+0x86>
#if 1 // memcpy() is good for large amounts of data, but the overhead is too big for small amounts. Use a simple byte loop instead.
      char* pDst;
      pDst = pRing->pBuffer + WrOff;
 8003286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	4413      	add	r3, r2
 800328e:	62bb      	str	r3, [r7, #40]	; 0x28
      WrOff += NumBytes;
 8003290:	69fa      	ldr	r2, [r7, #28]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4413      	add	r3, r2
 8003296:	61fb      	str	r3, [r7, #28]
      do {
        *pDst++ = *pData++;
 8003298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329a:	1c5a      	adds	r2, r3, #1
 800329c:	62ba      	str	r2, [r7, #40]	; 0x28
 800329e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032a0:	1c51      	adds	r1, r2, #1
 80032a2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80032a4:	7812      	ldrb	r2, [r2, #0]
 80032a6:	701a      	strb	r2, [r3, #0]
      } while (--NumBytes);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3b01      	subs	r3, #1
 80032ac:	607b      	str	r3, [r7, #4]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1f1      	bne.n	8003298 <SEGGER_RTT_WriteSkipNoLock+0x5c>
      pRing->WrOff = WrOff + NumBytes;
 80032b4:	69fa      	ldr	r2, [r7, #28]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	441a      	add	r2, r3
 80032ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032bc:	60da      	str	r2, [r3, #12]
#else
      memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
      pRing->WrOff = WrOff + NumBytes;
#endif
      return 1;
 80032be:	2301      	movs	r3, #1
 80032c0:	e054      	b.n	800336c <SEGGER_RTT_WriteSkipNoLock+0x130>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	6a3b      	ldr	r3, [r7, #32]
 80032c6:	4413      	add	r3, r2
 80032c8:	61bb      	str	r3, [r7, #24]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d34b      	bcc.n	800336a <SEGGER_RTT_WriteSkipNoLock+0x12e>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 80032d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d4:	689a      	ldr	r2, [r3, #8]
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	617b      	str	r3, [r7, #20]
      if (Rem > NumBytes) {
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d90e      	bls.n	8003302 <SEGGER_RTT_WriteSkipNoLock+0xc6>
        memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e6:	685a      	ldr	r2, [r3, #4]
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	4413      	add	r3, r2
 80032ec:	4618      	mov	r0, r3
 80032ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	f000 ff77 	bl	80041e4 <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 80032f6:	69fa      	ldr	r2, [r7, #28]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	441a      	add	r2, r3
 80032fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fe:	60da      	str	r2, [r3, #12]
 8003300:	e018      	b.n	8003334 <SEGGER_RTT_WriteSkipNoLock+0xf8>
      } else {
        //
        // We reach the end of the buffer, so need to wrap around
        //
        memcpy(pRing->pBuffer + WrOff, pData, Rem);
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	685a      	ldr	r2, [r3, #4]
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	4413      	add	r3, r2
 800330a:	4618      	mov	r0, r3
 800330c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	f000 ff68 	bl	80041e4 <memcpy>
        memcpy(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 8003314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003316:	6858      	ldr	r0, [r3, #4]
 8003318:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	18d1      	adds	r1, r2, r3
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	461a      	mov	r2, r3
 8003326:	f000 ff5d 	bl	80041e4 <memcpy>
        pRing->WrOff = NumBytes - Rem;
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	1ad2      	subs	r2, r2, r3
 8003330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003332:	60da      	str	r2, [r3, #12]
      }
      return 1;
 8003334:	2301      	movs	r3, #1
 8003336:	e019      	b.n	800336c <SEGGER_RTT_WriteSkipNoLock+0x130>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 8003338:	6a3a      	ldr	r2, [r7, #32]
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	3b01      	subs	r3, #1
 8003340:	61bb      	str	r3, [r7, #24]
    if (Avail >= NumBytes) {
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	429a      	cmp	r2, r3
 8003348:	d30f      	bcc.n	800336a <SEGGER_RTT_WriteSkipNoLock+0x12e>
      memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
 800334a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	4413      	add	r3, r2
 8003352:	4618      	mov	r0, r3
 8003354:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	f000 ff44 	bl	80041e4 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 800335c:	69fa      	ldr	r2, [r7, #28]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	441a      	add	r2, r3
 8003362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003364:	60da      	str	r2, [r3, #12]
      return 1;
 8003366:	2301      	movs	r3, #1
 8003368:	e000      	b.n	800336c <SEGGER_RTT_WriteSkipNoLock+0x130>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3730      	adds	r7, #48	; 0x30
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	20001604 	.word	0x20001604

08003378 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003378:	b580      	push	{r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
 8003384:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8003386:	4b30      	ldr	r3, [pc, #192]	; (8003448 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <SEGGER_RTT_ConfigUpBuffer+0x1a>
 800338e:	f7ff fe81 	bl	8003094 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 8003392:	4b2d      	ldr	r3, [pc, #180]	; (8003448 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	461a      	mov	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	429a      	cmp	r2, r3
 800339c:	d94b      	bls.n	8003436 <SEGGER_RTT_ConfigUpBuffer+0xbe>
    SEGGER_RTT_LOCK();
 800339e:	f3ef 8311 	mrs	r3, BASEPRI
 80033a2:	f04f 0120 	mov.w	r1, #32
 80033a6:	f381 8811 	msr	BASEPRI, r1
 80033aa:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d031      	beq.n	8003416 <SEGGER_RTT_ConfigUpBuffer+0x9e>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 80033b2:	4925      	ldr	r1, [pc, #148]	; (8003448 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	1c5a      	adds	r2, r3, #1
 80033b8:	4613      	mov	r3, r2
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	4413      	add	r3, r2
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	440b      	add	r3, r1
 80033c2:	68ba      	ldr	r2, [r7, #8]
 80033c4:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80033c6:	4920      	ldr	r1, [pc, #128]	; (8003448 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	1c5a      	adds	r2, r3, #1
 80033cc:	4613      	mov	r3, r2
 80033ce:	005b      	lsls	r3, r3, #1
 80033d0:	4413      	add	r3, r2
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	440b      	add	r3, r1
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	605a      	str	r2, [r3, #4]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80033da:	491b      	ldr	r1, [pc, #108]	; (8003448 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	4613      	mov	r3, r2
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	4413      	add	r3, r2
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	440b      	add	r3, r1
 80033e8:	3320      	adds	r3, #32
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 80033ee:	4916      	ldr	r1, [pc, #88]	; (8003448 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	4613      	mov	r3, r2
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	4413      	add	r3, r2
 80033f8:	00db      	lsls	r3, r3, #3
 80033fa:	440b      	add	r3, r1
 80033fc:	3328      	adds	r3, #40	; 0x28
 80033fe:	2200      	movs	r2, #0
 8003400:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 8003402:	4911      	ldr	r1, [pc, #68]	; (8003448 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	4613      	mov	r3, r2
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	4413      	add	r3, r2
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	440b      	add	r3, r1
 8003410:	3320      	adds	r3, #32
 8003412:	2200      	movs	r2, #0
 8003414:	605a      	str	r2, [r3, #4]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 8003416:	490c      	ldr	r1, [pc, #48]	; (8003448 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	4613      	mov	r3, r2
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	4413      	add	r3, r2
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	440b      	add	r3, r1
 8003424:	3328      	adds	r3, #40	; 0x28
 8003426:	6a3a      	ldr	r2, [r7, #32]
 8003428:	605a      	str	r2, [r3, #4]
    SEGGER_RTT_UNLOCK();
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003430:	2300      	movs	r3, #0
 8003432:	617b      	str	r3, [r7, #20]
 8003434:	e002      	b.n	800343c <SEGGER_RTT_ConfigUpBuffer+0xc4>
  } else {
    r = -1;
 8003436:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800343a:	617b      	str	r3, [r7, #20]
  }
  return r;
 800343c:	697b      	ldr	r3, [r7, #20]
}
 800343e:	4618      	mov	r0, r3
 8003440:	3718      	adds	r7, #24
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	20001604 	.word	0x20001604

0800344c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
 8003458:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 800345a:	4b30      	ldr	r3, [pc, #192]	; (800351c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <SEGGER_RTT_ConfigDownBuffer+0x1a>
 8003462:	f7ff fe17 	bl	8003094 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 8003466:	4b2d      	ldr	r3, [pc, #180]	; (800351c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	461a      	mov	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	429a      	cmp	r2, r3
 8003470:	d94b      	bls.n	800350a <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 8003472:	f3ef 8311 	mrs	r3, BASEPRI
 8003476:	f04f 0120 	mov.w	r1, #32
 800347a:	f381 8811 	msr	BASEPRI, r1
 800347e:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d031      	beq.n	80034ea <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 8003486:	4925      	ldr	r1, [pc, #148]	; (800351c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	4613      	mov	r3, r2
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	4413      	add	r3, r2
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	440b      	add	r3, r1
 8003494:	3360      	adds	r3, #96	; 0x60
 8003496:	68ba      	ldr	r2, [r7, #8]
 8003498:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 800349a:	4920      	ldr	r1, [pc, #128]	; (800351c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	4613      	mov	r3, r2
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	4413      	add	r3, r2
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	440b      	add	r3, r1
 80034a8:	3360      	adds	r3, #96	; 0x60
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	605a      	str	r2, [r3, #4]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80034ae:	491b      	ldr	r1, [pc, #108]	; (800351c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	4613      	mov	r3, r2
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	4413      	add	r3, r2
 80034b8:	00db      	lsls	r3, r3, #3
 80034ba:	440b      	add	r3, r1
 80034bc:	3368      	adds	r3, #104	; 0x68
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 80034c2:	4916      	ldr	r1, [pc, #88]	; (800351c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	4613      	mov	r3, r2
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	4413      	add	r3, r2
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	440b      	add	r3, r1
 80034d0:	3370      	adds	r3, #112	; 0x70
 80034d2:	2200      	movs	r2, #0
 80034d4:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 80034d6:	4911      	ldr	r1, [pc, #68]	; (800351c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	4613      	mov	r3, r2
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	4413      	add	r3, r2
 80034e0:	00db      	lsls	r3, r3, #3
 80034e2:	440b      	add	r3, r1
 80034e4:	3368      	adds	r3, #104	; 0x68
 80034e6:	2200      	movs	r2, #0
 80034e8:	605a      	str	r2, [r3, #4]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 80034ea:	490c      	ldr	r1, [pc, #48]	; (800351c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	4613      	mov	r3, r2
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	4413      	add	r3, r2
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	440b      	add	r3, r1
 80034f8:	3370      	adds	r3, #112	; 0x70
 80034fa:	6a3a      	ldr	r2, [r7, #32]
 80034fc:	605a      	str	r2, [r3, #4]
    SEGGER_RTT_UNLOCK();
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003504:	2300      	movs	r3, #0
 8003506:	617b      	str	r3, [r7, #20]
 8003508:	e002      	b.n	8003510 <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 800350a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800350e:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003510:	697b      	ldr	r3, [r7, #20]
}
 8003512:	4618      	mov	r0, r3
 8003514:	3718      	adds	r7, #24
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	20001604 	.word	0x20001604

08003520 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003520:	b480      	push	{r7}
 8003522:	b087      	sub	sp, #28
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800352c:	2300      	movs	r3, #0
 800352e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003530:	e002      	b.n	8003538 <_EncodeStr+0x18>
    Len++;
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	3301      	adds	r3, #1
 8003536:	613b      	str	r3, [r7, #16]
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
  while(*(pText + Len) != 0) {
 8003538:	68ba      	ldr	r2, [r7, #8]
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	4413      	add	r3, r2
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1f6      	bne.n	8003532 <_EncodeStr+0x12>
    Len++;
  }
  if (Len > Limit) {
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	429a      	cmp	r2, r3
 800354a:	d901      	bls.n	8003550 <_EncodeStr+0x30>
    Len = Limit;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	2bfe      	cmp	r3, #254	; 0xfe
 8003554:	d806      	bhi.n	8003564 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	1c5a      	adds	r2, r3, #1
 800355a:	60fa      	str	r2, [r7, #12]
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	b2d2      	uxtb	r2, r2
 8003560:	701a      	strb	r2, [r3, #0]
 8003562:	e011      	b.n	8003588 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	1c5a      	adds	r2, r3, #1
 8003568:	60fa      	str	r2, [r7, #12]
 800356a:	22ff      	movs	r2, #255	; 0xff
 800356c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	1c5a      	adds	r2, r3, #1
 8003572:	60fa      	str	r2, [r7, #12]
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	b2d2      	uxtb	r2, r2
 8003578:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	1c5a      	adds	r2, r3, #1
 800357e:	60fa      	str	r2, [r7, #12]
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	0a12      	lsrs	r2, r2, #8
 8003584:	b2d2      	uxtb	r2, r2
 8003586:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003588:	2300      	movs	r3, #0
 800358a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800358c:	e00a      	b.n	80035a4 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	1c5a      	adds	r2, r3, #1
 8003592:	60fa      	str	r2, [r7, #12]
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	1c51      	adds	r1, r2, #1
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	7812      	ldrb	r2, [r2, #0]
 800359c:	701a      	strb	r2, [r3, #0]
    n++;
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	3301      	adds	r3, #1
 80035a2:	617b      	str	r3, [r7, #20]
  }
  //
  // copy string
  //
  n = 0;
  while (n < Len) {
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d3f0      	bcc.n	800358e <_EncodeStr+0x6e>
    *pPayload++ = *pText++;
    n++;
  }
  return pPayload;
 80035ac:	68fb      	ldr	r3, [r7, #12]
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	371c      	adds	r7, #28
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop

080035bc <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3304      	adds	r3, #4
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80035da:	1cfb      	adds	r3, r7, #3
 80035dc:	2001      	movs	r0, #1
 80035de:	4619      	mov	r1, r3
 80035e0:	2201      	movs	r2, #1
 80035e2:	f7ff fda9 	bl	8003138 <SEGGER_RTT_ReadNoLock>
 80035e6:	4603      	mov	r3, r0
 80035e8:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	dd46      	ble.n	800367e <_HandleIncomingPacket+0xaa>
    switch (Cmd) {
 80035f0:	78fb      	ldrb	r3, [r7, #3]
 80035f2:	2b04      	cmp	r3, #4
 80035f4:	d01a      	beq.n	800362c <_HandleIncomingPacket+0x58>
 80035f6:	2b04      	cmp	r3, #4
 80035f8:	dc06      	bgt.n	8003608 <_HandleIncomingPacket+0x34>
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d010      	beq.n	8003620 <_HandleIncomingPacket+0x4c>
 80035fe:	2b02      	cmp	r3, #2
 8003600:	dc11      	bgt.n	8003626 <_HandleIncomingPacket+0x52>
 8003602:	2b01      	cmp	r3, #1
 8003604:	d009      	beq.n	800361a <_HandleIncomingPacket+0x46>
 8003606:	e02e      	b.n	8003666 <_HandleIncomingPacket+0x92>
 8003608:	2b06      	cmp	r3, #6
 800360a:	d015      	beq.n	8003638 <_HandleIncomingPacket+0x64>
 800360c:	2b06      	cmp	r3, #6
 800360e:	db10      	blt.n	8003632 <_HandleIncomingPacket+0x5e>
 8003610:	2b07      	cmp	r3, #7
 8003612:	d014      	beq.n	800363e <_HandleIncomingPacket+0x6a>
 8003614:	2b80      	cmp	r3, #128	; 0x80
 8003616:	d015      	beq.n	8003644 <_HandleIncomingPacket+0x70>
 8003618:	e025      	b.n	8003666 <_HandleIncomingPacket+0x92>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800361a:	f000 fa67 	bl	8003aec <SEGGER_SYSVIEW_Start>
      break;
 800361e:	e02e      	b.n	800367e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003620:	f000 fb20 	bl	8003c64 <SEGGER_SYSVIEW_Stop>
      break;
 8003624:	e02b      	b.n	800367e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003626:	f000 fc0f 	bl	8003e48 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800362a:	e028      	b.n	800367e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800362c:	f000 fbd8 	bl	8003de0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003630:	e025      	b.n	800367e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003632:	f000 fb3b 	bl	8003cac <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003636:	e022      	b.n	800367e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003638:	f000 fcca 	bl	8003fd0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800363c:	e01f      	b.n	800367e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800363e:	f000 fcab 	bl	8003f98 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003642:	e01c      	b.n	800367e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003644:	1cfb      	adds	r3, r7, #3
 8003646:	2001      	movs	r0, #1
 8003648:	4619      	mov	r1, r3
 800364a:	2201      	movs	r2, #1
 800364c:	f7ff fd74 	bl	8003138 <SEGGER_RTT_ReadNoLock>
 8003650:	4603      	mov	r3, r0
 8003652:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	dd04      	ble.n	8003664 <_HandleIncomingPacket+0x90>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800365a:	78fb      	ldrb	r3, [r7, #3]
 800365c:	4618      	mov	r0, r3
 800365e:	f000 fc1d 	bl	8003e9c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003662:	e00c      	b.n	800367e <_HandleIncomingPacket+0xaa>
 8003664:	e00b      	b.n	800367e <_HandleIncomingPacket+0xaa>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003666:	78fb      	ldrb	r3, [r7, #3]
 8003668:	b2db      	uxtb	r3, r3
 800366a:	b25b      	sxtb	r3, r3
 800366c:	2b00      	cmp	r3, #0
 800366e:	da05      	bge.n	800367c <_HandleIncomingPacket+0xa8>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003670:	1cfb      	adds	r3, r7, #3
 8003672:	2001      	movs	r0, #1
 8003674:	4619      	mov	r1, r3
 8003676:	2201      	movs	r2, #1
 8003678:	f7ff fd5e 	bl	8003138 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800367c:	bf00      	nop
    }
  }
}
 800367e:	3708      	adds	r7, #8
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003684:	b580      	push	{r7, lr}
 8003686:	b08c      	sub	sp, #48	; 0x30
 8003688:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800368a:	2301      	movs	r3, #1
 800368c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800368e:	1d3b      	adds	r3, r7, #4
 8003690:	3301      	adds	r3, #1
 8003692:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003698:	4b30      	ldr	r3, [pc, #192]	; (800375c <_TrySendOverflowPacket+0xd8>)
 800369a:	695b      	ldr	r3, [r3, #20]
 800369c:	62bb      	str	r3, [r7, #40]	; 0x28
 800369e:	e00b      	b.n	80036b8 <_TrySendOverflowPacket+0x34>
 80036a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a2:	1c5a      	adds	r2, r3, #1
 80036a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036a8:	b2d2      	uxtb	r2, r2
 80036aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80036ae:	b2d2      	uxtb	r2, r2
 80036b0:	701a      	strb	r2, [r3, #0]
 80036b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b4:	09db      	lsrs	r3, r3, #7
 80036b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80036b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ba:	2b7f      	cmp	r3, #127	; 0x7f
 80036bc:	d8f0      	bhi.n	80036a0 <_TrySendOverflowPacket+0x1c>
 80036be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c0:	1c5a      	adds	r2, r3, #1
 80036c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036c6:	b2d2      	uxtb	r2, r2
 80036c8:	701a      	strb	r2, [r3, #0]
 80036ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036cc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80036ce:	4b24      	ldr	r3, [pc, #144]	; (8003760 <_TrySendOverflowPacket+0xdc>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80036d4:	4b21      	ldr	r3, [pc, #132]	; (800375c <_TrySendOverflowPacket+0xd8>)
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	627b      	str	r3, [r7, #36]	; 0x24
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	623b      	str	r3, [r7, #32]
 80036e6:	e00b      	b.n	8003700 <_TrySendOverflowPacket+0x7c>
 80036e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ea:	1c5a      	adds	r2, r3, #1
 80036ec:	627a      	str	r2, [r7, #36]	; 0x24
 80036ee:	6a3a      	ldr	r2, [r7, #32]
 80036f0:	b2d2      	uxtb	r2, r2
 80036f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80036f6:	b2d2      	uxtb	r2, r2
 80036f8:	701a      	strb	r2, [r3, #0]
 80036fa:	6a3b      	ldr	r3, [r7, #32]
 80036fc:	09db      	lsrs	r3, r3, #7
 80036fe:	623b      	str	r3, [r7, #32]
 8003700:	6a3b      	ldr	r3, [r7, #32]
 8003702:	2b7f      	cmp	r3, #127	; 0x7f
 8003704:	d8f0      	bhi.n	80036e8 <_TrySendOverflowPacket+0x64>
 8003706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003708:	1c5a      	adds	r2, r3, #1
 800370a:	627a      	str	r2, [r7, #36]	; 0x24
 800370c:	6a3a      	ldr	r2, [r7, #32]
 800370e:	b2d2      	uxtb	r2, r2
 8003710:	701a      	strb	r2, [r3, #0]
 8003712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003714:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8003716:	69fa      	ldr	r2, [r7, #28]
 8003718:	1d3b      	adds	r3, r7, #4
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	461a      	mov	r2, r3
 800371e:	1d3b      	adds	r3, r7, #4
 8003720:	2001      	movs	r0, #1
 8003722:	4619      	mov	r1, r3
 8003724:	f7ff fd8a 	bl	800323c <SEGGER_RTT_WriteSkipNoLock>
 8003728:	4603      	mov	r3, r0
 800372a:	613b      	str	r3, [r7, #16]
  if (Status) {
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d009      	beq.n	8003746 <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003732:	4a0a      	ldr	r2, [pc, #40]	; (800375c <_TrySendOverflowPacket+0xd8>)
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003738:	4b08      	ldr	r3, [pc, #32]	; (800375c <_TrySendOverflowPacket+0xd8>)
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	3b01      	subs	r3, #1
 800373e:	b2da      	uxtb	r2, r3
 8003740:	4b06      	ldr	r3, [pc, #24]	; (800375c <_TrySendOverflowPacket+0xd8>)
 8003742:	701a      	strb	r2, [r3, #0]
 8003744:	e004      	b.n	8003750 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003746:	4b05      	ldr	r3, [pc, #20]	; (800375c <_TrySendOverflowPacket+0xd8>)
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	3301      	adds	r3, #1
 800374c:	4a03      	ldr	r2, [pc, #12]	; (800375c <_TrySendOverflowPacket+0xd8>)
 800374e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003750:	693b      	ldr	r3, [r7, #16]
}
 8003752:	4618      	mov	r0, r3
 8003754:	3730      	adds	r7, #48	; 0x30
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	20001438 	.word	0x20001438
 8003760:	e0001004 	.word	0xe0001004

08003764 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003764:	b580      	push	{r7, lr}
 8003766:	b08a      	sub	sp, #40	; 0x28
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003770:	4b5e      	ldr	r3, [pc, #376]	; (80038ec <_SendPacket+0x188>)
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d100      	bne.n	800377a <_SendPacket+0x16>
    goto Send;
 8003778:	e00f      	b.n	800379a <_SendPacket+0x36>
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800377a:	4b5c      	ldr	r3, [pc, #368]	; (80038ec <_SendPacket+0x188>)
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d100      	bne.n	8003784 <_SendPacket+0x20>
    goto SendDone;
 8003782:	e09b      	b.n	80038bc <_SendPacket+0x158>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8003784:	4b59      	ldr	r3, [pc, #356]	; (80038ec <_SendPacket+0x188>)
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	2b02      	cmp	r3, #2
 800378a:	d106      	bne.n	800379a <_SendPacket+0x36>
    _TrySendOverflowPacket();
 800378c:	f7ff ff7a 	bl	8003684 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8003790:	4b56      	ldr	r3, [pc, #344]	; (80038ec <_SendPacket+0x188>)
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d000      	beq.n	800379a <_SendPacket+0x36>
      goto SendDone;
 8003798:	e090      	b.n	80038bc <_SendPacket+0x158>
Send:
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b1f      	cmp	r3, #31
 800379e:	d809      	bhi.n	80037b4 <_SendPacket+0x50>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80037a0:	4b52      	ldr	r3, [pc, #328]	; (80038ec <_SendPacket+0x188>)
 80037a2:	69da      	ldr	r2, [r3, #28]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	fa22 f303 	lsr.w	r3, r2, r3
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d000      	beq.n	80037b4 <_SendPacket+0x50>
      goto SendDone;
 80037b2:	e083      	b.n	80038bc <_SendPacket+0x158>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b17      	cmp	r3, #23
 80037b8:	d807      	bhi.n	80037ca <_SendPacket+0x66>
    *--pStartPacket = EventId;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	3b01      	subs	r3, #1
 80037be:	60fb      	str	r3, [r7, #12]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	b2da      	uxtb	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	701a      	strb	r2, [r3, #0]
 80037c8:	e03d      	b.n	8003846 <_SendPacket+0xe2>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	2b7f      	cmp	r3, #127	; 0x7f
 80037d6:	d912      	bls.n	80037fe <_SendPacket+0x9a>
      *--pStartPacket = (NumBytes >> 7);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	3b01      	subs	r3, #1
 80037dc:	60fb      	str	r3, [r7, #12]
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	09db      	lsrs	r3, r3, #7
 80037e2:	b2da      	uxtb	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	3b01      	subs	r3, #1
 80037ec:	60fb      	str	r3, [r7, #12]
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80037f6:	b2da      	uxtb	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	701a      	strb	r2, [r3, #0]
 80037fc:	e006      	b.n	800380c <_SendPacket+0xa8>
    } else {
      *--pStartPacket = NumBytes;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	3b01      	subs	r3, #1
 8003802:	60fb      	str	r3, [r7, #12]
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	b2da      	uxtb	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b7f      	cmp	r3, #127	; 0x7f
 8003810:	d912      	bls.n	8003838 <_SendPacket+0xd4>
      *--pStartPacket = (EventId >> 7);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	3b01      	subs	r3, #1
 8003816:	60fb      	str	r3, [r7, #12]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	09db      	lsrs	r3, r3, #7
 800381c:	b2da      	uxtb	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	3b01      	subs	r3, #1
 8003826:	60fb      	str	r3, [r7, #12]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	b2db      	uxtb	r3, r3
 800382c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003830:	b2da      	uxtb	r2, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	701a      	strb	r2, [r3, #0]
 8003836:	e006      	b.n	8003846 <_SendPacket+0xe2>
    } else {
      *--pStartPacket = EventId;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	3b01      	subs	r3, #1
 800383c:	60fb      	str	r3, [r7, #12]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	b2da      	uxtb	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003846:	4b2a      	ldr	r3, [pc, #168]	; (80038f0 <_SendPacket+0x18c>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800384c:	4b27      	ldr	r3, [pc, #156]	; (80038ec <_SendPacket+0x188>)
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	627b      	str	r3, [r7, #36]	; 0x24
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	623b      	str	r3, [r7, #32]
 800385e:	e00b      	b.n	8003878 <_SendPacket+0x114>
 8003860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003862:	1c5a      	adds	r2, r3, #1
 8003864:	627a      	str	r2, [r7, #36]	; 0x24
 8003866:	6a3a      	ldr	r2, [r7, #32]
 8003868:	b2d2      	uxtb	r2, r2
 800386a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800386e:	b2d2      	uxtb	r2, r2
 8003870:	701a      	strb	r2, [r3, #0]
 8003872:	6a3b      	ldr	r3, [r7, #32]
 8003874:	09db      	lsrs	r3, r3, #7
 8003876:	623b      	str	r3, [r7, #32]
 8003878:	6a3b      	ldr	r3, [r7, #32]
 800387a:	2b7f      	cmp	r3, #127	; 0x7f
 800387c:	d8f0      	bhi.n	8003860 <_SendPacket+0xfc>
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	1c5a      	adds	r2, r3, #1
 8003882:	627a      	str	r2, [r7, #36]	; 0x24
 8003884:	6a3a      	ldr	r2, [r7, #32]
 8003886:	b2d2      	uxtb	r2, r2
 8003888:	701a      	strb	r2, [r3, #0]
 800388a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800388e:	68ba      	ldr	r2, [r7, #8]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2001      	movs	r0, #1
 8003896:	68f9      	ldr	r1, [r7, #12]
 8003898:	461a      	mov	r2, r3
 800389a:	f7ff fccf 	bl	800323c <SEGGER_RTT_WriteSkipNoLock>
 800389e:	4603      	mov	r3, r0
 80038a0:	613b      	str	r3, [r7, #16]
  if (Status) {
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d003      	beq.n	80038b0 <_SendPacket+0x14c>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80038a8:	4a10      	ldr	r2, [pc, #64]	; (80038ec <_SendPacket+0x188>)
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	60d3      	str	r3, [r2, #12]
 80038ae:	e005      	b.n	80038bc <_SendPacket+0x158>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80038b0:	4b0e      	ldr	r3, [pc, #56]	; (80038ec <_SendPacket+0x188>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	3301      	adds	r3, #1
 80038b6:	b2da      	uxtb	r2, r3
 80038b8:	4b0c      	ldr	r3, [pc, #48]	; (80038ec <_SendPacket+0x188>)
 80038ba:	701a      	strb	r2, [r3, #0]
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80038bc:	4b0d      	ldr	r3, [pc, #52]	; (80038f4 <_SendPacket+0x190>)
 80038be:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80038c2:	4b0c      	ldr	r3, [pc, #48]	; (80038f4 <_SendPacket+0x190>)
 80038c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d00b      	beq.n	80038e4 <_SendPacket+0x180>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80038cc:	4b07      	ldr	r3, [pc, #28]	; (80038ec <_SendPacket+0x188>)
 80038ce:	789b      	ldrb	r3, [r3, #2]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d107      	bne.n	80038e4 <_SendPacket+0x180>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80038d4:	4b05      	ldr	r3, [pc, #20]	; (80038ec <_SendPacket+0x188>)
 80038d6:	2201      	movs	r2, #1
 80038d8:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80038da:	f7ff fe7b 	bl	80035d4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80038de:	4b03      	ldr	r3, [pc, #12]	; (80038ec <_SendPacket+0x188>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80038e4:	3728      	adds	r7, #40	; 0x28
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	20001438 	.word	0x20001438
 80038f0:	e0001004 	.word	0xe0001004
 80038f4:	20001604 	.word	0x20001604

080038f8 <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b086      	sub	sp, #24
 80038fc:	af02      	add	r7, sp, #8
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
 8003904:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003906:	2300      	movs	r3, #0
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	2001      	movs	r0, #1
 800390c:	4913      	ldr	r1, [pc, #76]	; (800395c <SEGGER_SYSVIEW_Init+0x64>)
 800390e:	4a14      	ldr	r2, [pc, #80]	; (8003960 <SEGGER_SYSVIEW_Init+0x68>)
 8003910:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003914:	f7ff fd30 	bl	8003378 <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003918:	2300      	movs	r3, #0
 800391a:	9300      	str	r3, [sp, #0]
 800391c:	2001      	movs	r0, #1
 800391e:	490f      	ldr	r1, [pc, #60]	; (800395c <SEGGER_SYSVIEW_Init+0x64>)
 8003920:	4a10      	ldr	r2, [pc, #64]	; (8003964 <SEGGER_SYSVIEW_Init+0x6c>)
 8003922:	2308      	movs	r3, #8
 8003924:	f7ff fd92 	bl	800344c <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8003928:	4b0f      	ldr	r3, [pc, #60]	; (8003968 <SEGGER_SYSVIEW_Init+0x70>)
 800392a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800392e:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003930:	4b0e      	ldr	r3, [pc, #56]	; (800396c <SEGGER_SYSVIEW_Init+0x74>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a0c      	ldr	r2, [pc, #48]	; (8003968 <SEGGER_SYSVIEW_Init+0x70>)
 8003936:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8003938:	4a0b      	ldr	r2, [pc, #44]	; (8003968 <SEGGER_SYSVIEW_Init+0x70>)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800393e:	4a0a      	ldr	r2, [pc, #40]	; (8003968 <SEGGER_SYSVIEW_Init+0x70>)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8003944:	4a08      	ldr	r2, [pc, #32]	; (8003968 <SEGGER_SYSVIEW_Init+0x70>)
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800394a:	4a07      	ldr	r2, [pc, #28]	; (8003968 <SEGGER_SYSVIEW_Init+0x70>)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8003950:	4b05      	ldr	r3, [pc, #20]	; (8003968 <SEGGER_SYSVIEW_Init+0x70>)
 8003952:	2200      	movs	r2, #0
 8003954:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	0800423c 	.word	0x0800423c
 8003960:	20000430 	.word	0x20000430
 8003964:	20001430 	.word	0x20001430
 8003968:	20001438 	.word	0x20001438
 800396c:	e0001004 	.word	0xe0001004

08003970 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8003978:	4a03      	ldr	r2, [pc, #12]	; (8003988 <SEGGER_SYSVIEW_SetRAMBase+0x18>)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6113      	str	r3, [r2, #16]
}
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr
 8003988:	20001438 	.word	0x20001438

0800398c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003994:	f3ef 8311 	mrs	r3, BASEPRI
 8003998:	f04f 0120 	mov.w	r1, #32
 800399c:	f381 8811 	msr	BASEPRI, r1
 80039a0:	60fb      	str	r3, [r7, #12]
 80039a2:	4807      	ldr	r0, [pc, #28]	; (80039c0 <SEGGER_SYSVIEW_RecordVoid+0x34>)
 80039a4:	f7ff fe0a 	bl	80035bc <_PreparePacket>
 80039a8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80039aa:	68b8      	ldr	r0, [r7, #8]
 80039ac:	68b9      	ldr	r1, [r7, #8]
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	f7ff fed8 	bl	8003764 <_SendPacket>
  RECORD_END();
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f383 8811 	msr	BASEPRI, r3
}
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	20001468 	.word	0x20001468

080039c4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b088      	sub	sp, #32
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80039ce:	f3ef 8311 	mrs	r3, BASEPRI
 80039d2:	f04f 0120 	mov.w	r1, #32
 80039d6:	f381 8811 	msr	BASEPRI, r1
 80039da:	617b      	str	r3, [r7, #20]
 80039dc:	4816      	ldr	r0, [pc, #88]	; (8003a38 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80039de:	f7ff fded 	bl	80035bc <_PreparePacket>
 80039e2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	61fb      	str	r3, [r7, #28]
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	61bb      	str	r3, [r7, #24]
 80039f0:	e00b      	b.n	8003a0a <SEGGER_SYSVIEW_RecordU32+0x46>
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	1c5a      	adds	r2, r3, #1
 80039f6:	61fa      	str	r2, [r7, #28]
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	b2d2      	uxtb	r2, r2
 80039fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a00:	b2d2      	uxtb	r2, r2
 8003a02:	701a      	strb	r2, [r3, #0]
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	09db      	lsrs	r3, r3, #7
 8003a08:	61bb      	str	r3, [r7, #24]
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	2b7f      	cmp	r3, #127	; 0x7f
 8003a0e:	d8f0      	bhi.n	80039f2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	1c5a      	adds	r2, r3, #1
 8003a14:	61fa      	str	r2, [r7, #28]
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	b2d2      	uxtb	r2, r2
 8003a1a:	701a      	strb	r2, [r3, #0]
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003a20:	6938      	ldr	r0, [r7, #16]
 8003a22:	68f9      	ldr	r1, [r7, #12]
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	f7ff fe9d 	bl	8003764 <_SendPacket>
  RECORD_END();
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	f383 8811 	msr	BASEPRI, r3
}
 8003a30:	3720      	adds	r7, #32
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	20001468 	.word	0x20001468

08003a3c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b08c      	sub	sp, #48	; 0x30
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003a48:	f3ef 8311 	mrs	r3, BASEPRI
 8003a4c:	f04f 0120 	mov.w	r1, #32
 8003a50:	f381 8811 	msr	BASEPRI, r1
 8003a54:	61fb      	str	r3, [r7, #28]
 8003a56:	4824      	ldr	r0, [pc, #144]	; (8003ae8 <SEGGER_SYSVIEW_RecordU32x2+0xac>)
 8003a58:	f7ff fdb0 	bl	80035bc <_PreparePacket>
 8003a5c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a6a:	e00b      	b.n	8003a84 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8003a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a6e:	1c5a      	adds	r2, r3, #1
 8003a70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a74:	b2d2      	uxtb	r2, r2
 8003a76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a7a:	b2d2      	uxtb	r2, r2
 8003a7c:	701a      	strb	r2, [r3, #0]
 8003a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a80:	09db      	lsrs	r3, r3, #7
 8003a82:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a86:	2b7f      	cmp	r3, #127	; 0x7f
 8003a88:	d8f0      	bhi.n	8003a6c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8003a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a8c:	1c5a      	adds	r2, r3, #1
 8003a8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a92:	b2d2      	uxtb	r2, r2
 8003a94:	701a      	strb	r2, [r3, #0]
 8003a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a98:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	623b      	str	r3, [r7, #32]
 8003aa2:	e00b      	b.n	8003abc <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8003aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa6:	1c5a      	adds	r2, r3, #1
 8003aa8:	627a      	str	r2, [r7, #36]	; 0x24
 8003aaa:	6a3a      	ldr	r2, [r7, #32]
 8003aac:	b2d2      	uxtb	r2, r2
 8003aae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ab2:	b2d2      	uxtb	r2, r2
 8003ab4:	701a      	strb	r2, [r3, #0]
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	09db      	lsrs	r3, r3, #7
 8003aba:	623b      	str	r3, [r7, #32]
 8003abc:	6a3b      	ldr	r3, [r7, #32]
 8003abe:	2b7f      	cmp	r3, #127	; 0x7f
 8003ac0:	d8f0      	bhi.n	8003aa4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac4:	1c5a      	adds	r2, r3, #1
 8003ac6:	627a      	str	r2, [r7, #36]	; 0x24
 8003ac8:	6a3a      	ldr	r2, [r7, #32]
 8003aca:	b2d2      	uxtb	r2, r2
 8003acc:	701a      	strb	r2, [r3, #0]
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003ad2:	69b8      	ldr	r0, [r7, #24]
 8003ad4:	6979      	ldr	r1, [r7, #20]
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	f7ff fe44 	bl	8003764 <_SendPacket>
  RECORD_END();
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	f383 8811 	msr	BASEPRI, r3
}
 8003ae2:	3730      	adds	r7, #48	; 0x30
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	20001468 	.word	0x20001468

08003aec <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b08c      	sub	sp, #48	; 0x30
 8003af0:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003af2:	4b59      	ldr	r3, [pc, #356]	; (8003c58 <SEGGER_SYSVIEW_Start+0x16c>)
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f040 80aa 	bne.w	8003c50 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 8003afc:	4b56      	ldr	r3, [pc, #344]	; (8003c58 <SEGGER_SYSVIEW_Start+0x16c>)
 8003afe:	2201      	movs	r2, #1
 8003b00:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8003b02:	f3ef 8311 	mrs	r3, BASEPRI
 8003b06:	f04f 0120 	mov.w	r1, #32
 8003b0a:	f381 8811 	msr	BASEPRI, r1
 8003b0e:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8003b10:	2001      	movs	r0, #1
 8003b12:	4952      	ldr	r1, [pc, #328]	; (8003c5c <SEGGER_SYSVIEW_Start+0x170>)
 8003b14:	220a      	movs	r2, #10
 8003b16:	f7ff fb91 	bl	800323c <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8003b20:	200a      	movs	r0, #10
 8003b22:	f7ff ff33 	bl	800398c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003b26:	f3ef 8311 	mrs	r3, BASEPRI
 8003b2a:	f04f 0120 	mov.w	r1, #32
 8003b2e:	f381 8811 	msr	BASEPRI, r1
 8003b32:	60bb      	str	r3, [r7, #8]
 8003b34:	484a      	ldr	r0, [pc, #296]	; (8003c60 <SEGGER_SYSVIEW_Start+0x174>)
 8003b36:	f7ff fd41 	bl	80035bc <_PreparePacket>
 8003b3a:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b44:	4b44      	ldr	r3, [pc, #272]	; (8003c58 <SEGGER_SYSVIEW_Start+0x16c>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b4a:	e00b      	b.n	8003b64 <SEGGER_SYSVIEW_Start+0x78>
 8003b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4e:	1c5a      	adds	r2, r3, #1
 8003b50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b54:	b2d2      	uxtb	r2, r2
 8003b56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b5a:	b2d2      	uxtb	r2, r2
 8003b5c:	701a      	strb	r2, [r3, #0]
 8003b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b60:	09db      	lsrs	r3, r3, #7
 8003b62:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b66:	2b7f      	cmp	r3, #127	; 0x7f
 8003b68:	d8f0      	bhi.n	8003b4c <SEGGER_SYSVIEW_Start+0x60>
 8003b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b6c:	1c5a      	adds	r2, r3, #1
 8003b6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b72:	b2d2      	uxtb	r2, r2
 8003b74:	701a      	strb	r2, [r3, #0]
 8003b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b78:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b7e:	4b36      	ldr	r3, [pc, #216]	; (8003c58 <SEGGER_SYSVIEW_Start+0x16c>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	623b      	str	r3, [r7, #32]
 8003b84:	e00b      	b.n	8003b9e <SEGGER_SYSVIEW_Start+0xb2>
 8003b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b88:	1c5a      	adds	r2, r3, #1
 8003b8a:	627a      	str	r2, [r7, #36]	; 0x24
 8003b8c:	6a3a      	ldr	r2, [r7, #32]
 8003b8e:	b2d2      	uxtb	r2, r2
 8003b90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b94:	b2d2      	uxtb	r2, r2
 8003b96:	701a      	strb	r2, [r3, #0]
 8003b98:	6a3b      	ldr	r3, [r7, #32]
 8003b9a:	09db      	lsrs	r3, r3, #7
 8003b9c:	623b      	str	r3, [r7, #32]
 8003b9e:	6a3b      	ldr	r3, [r7, #32]
 8003ba0:	2b7f      	cmp	r3, #127	; 0x7f
 8003ba2:	d8f0      	bhi.n	8003b86 <SEGGER_SYSVIEW_Start+0x9a>
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba6:	1c5a      	adds	r2, r3, #1
 8003ba8:	627a      	str	r2, [r7, #36]	; 0x24
 8003baa:	6a3a      	ldr	r2, [r7, #32]
 8003bac:	b2d2      	uxtb	r2, r2
 8003bae:	701a      	strb	r2, [r3, #0]
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	61fb      	str	r3, [r7, #28]
 8003bb8:	4b27      	ldr	r3, [pc, #156]	; (8003c58 <SEGGER_SYSVIEW_Start+0x16c>)
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	61bb      	str	r3, [r7, #24]
 8003bbe:	e00b      	b.n	8003bd8 <SEGGER_SYSVIEW_Start+0xec>
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	1c5a      	adds	r2, r3, #1
 8003bc4:	61fa      	str	r2, [r7, #28]
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	b2d2      	uxtb	r2, r2
 8003bca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003bce:	b2d2      	uxtb	r2, r2
 8003bd0:	701a      	strb	r2, [r3, #0]
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	09db      	lsrs	r3, r3, #7
 8003bd6:	61bb      	str	r3, [r7, #24]
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	2b7f      	cmp	r3, #127	; 0x7f
 8003bdc:	d8f0      	bhi.n	8003bc0 <SEGGER_SYSVIEW_Start+0xd4>
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	1c5a      	adds	r2, r3, #1
 8003be2:	61fa      	str	r2, [r7, #28]
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	b2d2      	uxtb	r2, r2
 8003be8:	701a      	strb	r2, [r3, #0]
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	617b      	str	r3, [r7, #20]
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	613b      	str	r3, [r7, #16]
 8003bf6:	e00b      	b.n	8003c10 <SEGGER_SYSVIEW_Start+0x124>
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	1c5a      	adds	r2, r3, #1
 8003bfc:	617a      	str	r2, [r7, #20]
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	b2d2      	uxtb	r2, r2
 8003c02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c06:	b2d2      	uxtb	r2, r2
 8003c08:	701a      	strb	r2, [r3, #0]
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	09db      	lsrs	r3, r3, #7
 8003c0e:	613b      	str	r3, [r7, #16]
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	2b7f      	cmp	r3, #127	; 0x7f
 8003c14:	d8f0      	bhi.n	8003bf8 <SEGGER_SYSVIEW_Start+0x10c>
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	1c5a      	adds	r2, r3, #1
 8003c1a:	617a      	str	r2, [r7, #20]
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	b2d2      	uxtb	r2, r2
 8003c20:	701a      	strb	r2, [r3, #0]
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	6839      	ldr	r1, [r7, #0]
 8003c2a:	2218      	movs	r2, #24
 8003c2c:	f7ff fd9a 	bl	8003764 <_SendPacket>
      RECORD_END();
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003c36:	4b08      	ldr	r3, [pc, #32]	; (8003c58 <SEGGER_SYSVIEW_Start+0x16c>)
 8003c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d002      	beq.n	8003c44 <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 8003c3e:	4b06      	ldr	r3, [pc, #24]	; (8003c58 <SEGGER_SYSVIEW_Start+0x16c>)
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8003c44:	f000 f900 	bl	8003e48 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8003c48:	f000 f8ca 	bl	8003de0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8003c4c:	f000 f9c0 	bl	8003fd0 <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 8003c50:	3730      	adds	r7, #48	; 0x30
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	20001438 	.word	0x20001438
 8003c5c:	080042ac 	.word	0x080042ac
 8003c60:	20001468 	.word	0x20001468

08003c64 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003c6a:	f3ef 8311 	mrs	r3, BASEPRI
 8003c6e:	f04f 0120 	mov.w	r1, #32
 8003c72:	f381 8811 	msr	BASEPRI, r1
 8003c76:	607b      	str	r3, [r7, #4]
 8003c78:	480a      	ldr	r0, [pc, #40]	; (8003ca4 <SEGGER_SYSVIEW_Stop+0x40>)
 8003c7a:	f7ff fc9f 	bl	80035bc <_PreparePacket>
 8003c7e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8003c80:	4b09      	ldr	r3, [pc, #36]	; (8003ca8 <SEGGER_SYSVIEW_Stop+0x44>)
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d007      	beq.n	8003c98 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8003c88:	6838      	ldr	r0, [r7, #0]
 8003c8a:	6839      	ldr	r1, [r7, #0]
 8003c8c:	220b      	movs	r2, #11
 8003c8e:	f7ff fd69 	bl	8003764 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8003c92:	4b05      	ldr	r3, [pc, #20]	; (8003ca8 <SEGGER_SYSVIEW_Stop+0x44>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f383 8811 	msr	BASEPRI, r3
}
 8003c9e:	3708      	adds	r7, #8
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	20001468 	.word	0x20001468
 8003ca8:	20001438 	.word	0x20001438

08003cac <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b08c      	sub	sp, #48	; 0x30
 8003cb0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003cb2:	f3ef 8311 	mrs	r3, BASEPRI
 8003cb6:	f04f 0120 	mov.w	r1, #32
 8003cba:	f381 8811 	msr	BASEPRI, r1
 8003cbe:	60fb      	str	r3, [r7, #12]
 8003cc0:	4845      	ldr	r0, [pc, #276]	; (8003dd8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8003cc2:	f7ff fc7b 	bl	80035bc <_PreparePacket>
 8003cc6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cd0:	4b42      	ldr	r3, [pc, #264]	; (8003ddc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cd6:	e00b      	b.n	8003cf0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8003cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cda:	1c5a      	adds	r2, r3, #1
 8003cdc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ce0:	b2d2      	uxtb	r2, r2
 8003ce2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ce6:	b2d2      	uxtb	r2, r2
 8003ce8:	701a      	strb	r2, [r3, #0]
 8003cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cec:	09db      	lsrs	r3, r3, #7
 8003cee:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf2:	2b7f      	cmp	r3, #127	; 0x7f
 8003cf4:	d8f0      	bhi.n	8003cd8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8003cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf8:	1c5a      	adds	r2, r3, #1
 8003cfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cfe:	b2d2      	uxtb	r2, r2
 8003d00:	701a      	strb	r2, [r3, #0]
 8003d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d04:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	627b      	str	r3, [r7, #36]	; 0x24
 8003d0a:	4b34      	ldr	r3, [pc, #208]	; (8003ddc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	623b      	str	r3, [r7, #32]
 8003d10:	e00b      	b.n	8003d2a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8003d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d14:	1c5a      	adds	r2, r3, #1
 8003d16:	627a      	str	r2, [r7, #36]	; 0x24
 8003d18:	6a3a      	ldr	r2, [r7, #32]
 8003d1a:	b2d2      	uxtb	r2, r2
 8003d1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d20:	b2d2      	uxtb	r2, r2
 8003d22:	701a      	strb	r2, [r3, #0]
 8003d24:	6a3b      	ldr	r3, [r7, #32]
 8003d26:	09db      	lsrs	r3, r3, #7
 8003d28:	623b      	str	r3, [r7, #32]
 8003d2a:	6a3b      	ldr	r3, [r7, #32]
 8003d2c:	2b7f      	cmp	r3, #127	; 0x7f
 8003d2e:	d8f0      	bhi.n	8003d12 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8003d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d32:	1c5a      	adds	r2, r3, #1
 8003d34:	627a      	str	r2, [r7, #36]	; 0x24
 8003d36:	6a3a      	ldr	r2, [r7, #32]
 8003d38:	b2d2      	uxtb	r2, r2
 8003d3a:	701a      	strb	r2, [r3, #0]
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	61fb      	str	r3, [r7, #28]
 8003d44:	4b25      	ldr	r3, [pc, #148]	; (8003ddc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	61bb      	str	r3, [r7, #24]
 8003d4a:	e00b      	b.n	8003d64 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	1c5a      	adds	r2, r3, #1
 8003d50:	61fa      	str	r2, [r7, #28]
 8003d52:	69ba      	ldr	r2, [r7, #24]
 8003d54:	b2d2      	uxtb	r2, r2
 8003d56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d5a:	b2d2      	uxtb	r2, r2
 8003d5c:	701a      	strb	r2, [r3, #0]
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	09db      	lsrs	r3, r3, #7
 8003d62:	61bb      	str	r3, [r7, #24]
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	2b7f      	cmp	r3, #127	; 0x7f
 8003d68:	d8f0      	bhi.n	8003d4c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	1c5a      	adds	r2, r3, #1
 8003d6e:	61fa      	str	r2, [r7, #28]
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	b2d2      	uxtb	r2, r2
 8003d74:	701a      	strb	r2, [r3, #0]
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	617b      	str	r3, [r7, #20]
 8003d7e:	2302      	movs	r3, #2
 8003d80:	613b      	str	r3, [r7, #16]
 8003d82:	e00b      	b.n	8003d9c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	1c5a      	adds	r2, r3, #1
 8003d88:	617a      	str	r2, [r7, #20]
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	b2d2      	uxtb	r2, r2
 8003d8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d92:	b2d2      	uxtb	r2, r2
 8003d94:	701a      	strb	r2, [r3, #0]
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	09db      	lsrs	r3, r3, #7
 8003d9a:	613b      	str	r3, [r7, #16]
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	2b7f      	cmp	r3, #127	; 0x7f
 8003da0:	d8f0      	bhi.n	8003d84 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	1c5a      	adds	r2, r3, #1
 8003da6:	617a      	str	r2, [r7, #20]
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	b2d2      	uxtb	r2, r2
 8003dac:	701a      	strb	r2, [r3, #0]
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003db2:	68b8      	ldr	r0, [r7, #8]
 8003db4:	6879      	ldr	r1, [r7, #4]
 8003db6:	2218      	movs	r2, #24
 8003db8:	f7ff fcd4 	bl	8003764 <_SendPacket>
  RECORD_END();
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003dc2:	4b06      	ldr	r3, [pc, #24]	; (8003ddc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d002      	beq.n	8003dd0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8003dca:	4b04      	ldr	r3, [pc, #16]	; (8003ddc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dce:	4798      	blx	r3
  }
}
 8003dd0:	3730      	adds	r7, #48	; 0x30
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	20001468 	.word	0x20001468
 8003ddc:	20001438 	.word	0x20001438

08003de0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8003de4:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <SEGGER_SYSVIEW_SendTaskList+0x20>)
 8003de6:	6a1b      	ldr	r3, [r3, #32]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d008      	beq.n	8003dfe <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8003dec:	4b04      	ldr	r3, [pc, #16]	; (8003e00 <SEGGER_SYSVIEW_SendTaskList+0x20>)
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8003df6:	4b02      	ldr	r3, [pc, #8]	; (8003e00 <SEGGER_SYSVIEW_SendTaskList+0x20>)
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	4798      	blx	r3
  }
}
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	20001438 	.word	0x20001438

08003e04 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003e0c:	f3ef 8311 	mrs	r3, BASEPRI
 8003e10:	f04f 0120 	mov.w	r1, #32
 8003e14:	f381 8811 	msr	BASEPRI, r1
 8003e18:	617b      	str	r3, [r7, #20]
 8003e1a:	480a      	ldr	r0, [pc, #40]	; (8003e44 <SEGGER_SYSVIEW_SendSysDesc+0x40>)
 8003e1c:	f7ff fbce 	bl	80035bc <_PreparePacket>
 8003e20:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003e22:	6938      	ldr	r0, [r7, #16]
 8003e24:	6879      	ldr	r1, [r7, #4]
 8003e26:	2280      	movs	r2, #128	; 0x80
 8003e28:	f7ff fb7a 	bl	8003520 <_EncodeStr>
 8003e2c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8003e2e:	6938      	ldr	r0, [r7, #16]
 8003e30:	68f9      	ldr	r1, [r7, #12]
 8003e32:	220e      	movs	r2, #14
 8003e34:	f7ff fc96 	bl	8003764 <_SendPacket>
  RECORD_END();
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	f383 8811 	msr	BASEPRI, r3
}
 8003e3e:	3718      	adds	r7, #24
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	20001468 	.word	0x20001468

08003e48 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8003e48:	b5b0      	push	{r4, r5, r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8003e4e:	4b11      	ldr	r3, [pc, #68]	; (8003e94 <SEGGER_SYSVIEW_RecordSystime+0x4c>)
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d015      	beq.n	8003e82 <SEGGER_SYSVIEW_RecordSystime+0x3a>
 8003e56:	4b0f      	ldr	r3, [pc, #60]	; (8003e94 <SEGGER_SYSVIEW_RecordSystime+0x4c>)
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d010      	beq.n	8003e82 <SEGGER_SYSVIEW_RecordSystime+0x3a>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8003e60:	4b0c      	ldr	r3, [pc, #48]	; (8003e94 <SEGGER_SYSVIEW_RecordSystime+0x4c>)
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4798      	blx	r3
 8003e68:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003e6c:	6839      	ldr	r1, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8003e6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e72:	001c      	movs	r4, r3
 8003e74:	2500      	movs	r5, #0
void SEGGER_SYSVIEW_RecordSystime(void) {
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003e76:	4623      	mov	r3, r4
 8003e78:	200d      	movs	r0, #13
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	f7ff fdde 	bl	8003a3c <SEGGER_SYSVIEW_RecordU32x2>
 8003e80:	e005      	b.n	8003e8e <SEGGER_SYSVIEW_RecordSystime+0x46>
                               (U32)(Systime),
                               (U32)(Systime >> 32));
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8003e82:	4b05      	ldr	r3, [pc, #20]	; (8003e98 <SEGGER_SYSVIEW_RecordSystime+0x50>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	200c      	movs	r0, #12
 8003e88:	4619      	mov	r1, r3
 8003e8a:	f7ff fd9b 	bl	80039c4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8003e8e:	3708      	adds	r7, #8
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bdb0      	pop	{r4, r5, r7, pc}
 8003e94:	20001438 	.word	0x20001438
 8003e98:	e0001004 	.word	0xe0001004

08003e9c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b08c      	sub	sp, #48	; 0x30
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8003ea6:	4b3a      	ldr	r3, [pc, #232]	; (8003f90 <SEGGER_SYSVIEW_SendModule+0xf4>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d06c      	beq.n	8003f88 <SEGGER_SYSVIEW_SendModule+0xec>
    pModule = _pFirstModule;
 8003eae:	4b38      	ldr	r3, [pc, #224]	; (8003f90 <SEGGER_SYSVIEW_SendModule+0xf4>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003eb8:	e009      	b.n	8003ece <SEGGER_SYSVIEW_SendModule+0x32>
      pModule = pModule->pNext;
 8003eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8003ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d100      	bne.n	8003ec8 <SEGGER_SYSVIEW_SendModule+0x2c>
        break;
 8003ec6:	e006      	b.n	8003ed6 <SEGGER_SYSVIEW_SendModule+0x3a>
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
    pModule = _pFirstModule;
    for (n = 0; n < ModuleId; n++) {
 8003ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eca:	3301      	adds	r3, #1
 8003ecc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ece:	79fa      	ldrb	r2, [r7, #7]
 8003ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d8f1      	bhi.n	8003eba <SEGGER_SYSVIEW_SendModule+0x1e>
      pModule = pModule->pNext;
      if (pModule == 0) {
        break;
      }
    }
    if (pModule != 0) {
 8003ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d055      	beq.n	8003f88 <SEGGER_SYSVIEW_SendModule+0xec>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003edc:	f3ef 8311 	mrs	r3, BASEPRI
 8003ee0:	f04f 0120 	mov.w	r1, #32
 8003ee4:	f381 8811 	msr	BASEPRI, r1
 8003ee8:	617b      	str	r3, [r7, #20]
 8003eea:	482a      	ldr	r0, [pc, #168]	; (8003f94 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8003eec:	f7ff fb66 	bl	80035bc <_PreparePacket>
 8003ef0:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8003efa:	79fb      	ldrb	r3, [r7, #7]
 8003efc:	623b      	str	r3, [r7, #32]
 8003efe:	e00b      	b.n	8003f18 <SEGGER_SYSVIEW_SendModule+0x7c>
 8003f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f02:	1c5a      	adds	r2, r3, #1
 8003f04:	627a      	str	r2, [r7, #36]	; 0x24
 8003f06:	6a3a      	ldr	r2, [r7, #32]
 8003f08:	b2d2      	uxtb	r2, r2
 8003f0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f0e:	b2d2      	uxtb	r2, r2
 8003f10:	701a      	strb	r2, [r3, #0]
 8003f12:	6a3b      	ldr	r3, [r7, #32]
 8003f14:	09db      	lsrs	r3, r3, #7
 8003f16:	623b      	str	r3, [r7, #32]
 8003f18:	6a3b      	ldr	r3, [r7, #32]
 8003f1a:	2b7f      	cmp	r3, #127	; 0x7f
 8003f1c:	d8f0      	bhi.n	8003f00 <SEGGER_SYSVIEW_SendModule+0x64>
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f20:	1c5a      	adds	r2, r3, #1
 8003f22:	627a      	str	r2, [r7, #36]	; 0x24
 8003f24:	6a3a      	ldr	r2, [r7, #32]
 8003f26:	b2d2      	uxtb	r2, r2
 8003f28:	701a      	strb	r2, [r3, #0]
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2c:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	61fb      	str	r3, [r7, #28]
 8003f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	61bb      	str	r3, [r7, #24]
 8003f38:	e00b      	b.n	8003f52 <SEGGER_SYSVIEW_SendModule+0xb6>
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	1c5a      	adds	r2, r3, #1
 8003f3e:	61fa      	str	r2, [r7, #28]
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	b2d2      	uxtb	r2, r2
 8003f44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f48:	b2d2      	uxtb	r2, r2
 8003f4a:	701a      	strb	r2, [r3, #0]
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	09db      	lsrs	r3, r3, #7
 8003f50:	61bb      	str	r3, [r7, #24]
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	2b7f      	cmp	r3, #127	; 0x7f
 8003f56:	d8f0      	bhi.n	8003f3a <SEGGER_SYSVIEW_SendModule+0x9e>
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	1c5a      	adds	r2, r3, #1
 8003f5c:	61fa      	str	r2, [r7, #28]
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	b2d2      	uxtb	r2, r2
 8003f62:	701a      	strb	r2, [r3, #0]
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	4619      	mov	r1, r3
 8003f70:	2280      	movs	r2, #128	; 0x80
 8003f72:	f7ff fad5 	bl	8003520 <_EncodeStr>
 8003f76:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8003f78:	6938      	ldr	r0, [r7, #16]
 8003f7a:	68f9      	ldr	r1, [r7, #12]
 8003f7c:	2216      	movs	r2, #22
 8003f7e:	f7ff fbf1 	bl	8003764 <_SendPacket>
      RECORD_END();
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8003f88:	3730      	adds	r7, #48	; 0x30
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	20001460 	.word	0x20001460
 8003f94:	20001468 	.word	0x20001468

08003f98 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8003f9e:	4b0b      	ldr	r3, [pc, #44]	; (8003fcc <SEGGER_SYSVIEW_SendModuleDescription+0x34>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00f      	beq.n	8003fc6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8003fa6:	4b09      	ldr	r3, [pc, #36]	; (8003fcc <SEGGER_SYSVIEW_SendModuleDescription+0x34>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d002      	beq.n	8003fba <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1f2      	bne.n	8003fac <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8003fc6:	3708      	adds	r7, #8
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	20001460 	.word	0x20001460

08003fd0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8003fd6:	f3ef 8311 	mrs	r3, BASEPRI
 8003fda:	f04f 0120 	mov.w	r1, #32
 8003fde:	f381 8811 	msr	BASEPRI, r1
 8003fe2:	60fb      	str	r3, [r7, #12]
 8003fe4:	4816      	ldr	r0, [pc, #88]	; (8004040 <SEGGER_SYSVIEW_SendNumModules+0x70>)
 8003fe6:	f7ff fae9 	bl	80035bc <_PreparePacket>
 8003fea:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	617b      	str	r3, [r7, #20]
 8003ff4:	4b13      	ldr	r3, [pc, #76]	; (8004044 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	613b      	str	r3, [r7, #16]
 8003ffa:	e00b      	b.n	8004014 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	1c5a      	adds	r2, r3, #1
 8004000:	617a      	str	r2, [r7, #20]
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	b2d2      	uxtb	r2, r2
 8004006:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800400a:	b2d2      	uxtb	r2, r2
 800400c:	701a      	strb	r2, [r3, #0]
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	09db      	lsrs	r3, r3, #7
 8004012:	613b      	str	r3, [r7, #16]
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	2b7f      	cmp	r3, #127	; 0x7f
 8004018:	d8f0      	bhi.n	8003ffc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	1c5a      	adds	r2, r3, #1
 800401e:	617a      	str	r2, [r7, #20]
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	b2d2      	uxtb	r2, r2
 8004024:	701a      	strb	r2, [r3, #0]
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800402a:	68b8      	ldr	r0, [r7, #8]
 800402c:	6879      	ldr	r1, [r7, #4]
 800402e:	221b      	movs	r2, #27
 8004030:	f7ff fb98 	bl	8003764 <_SendPacket>
  RECORD_END();
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f383 8811 	msr	BASEPRI, r3
}
 800403a:	3718      	adds	r7, #24
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	20001468 	.word	0x20001468
 8004044:	20001464 	.word	0x20001464

08004048 <SEGGER_SYSVIEW_Print>:
*    Print a string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Print(const char* s) {
 8004048:	b580      	push	{r7, lr}
 800404a:	b08a      	sub	sp, #40	; 0x28
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004050:	f3ef 8311 	mrs	r3, BASEPRI
 8004054:	f04f 0120 	mov.w	r1, #32
 8004058:	f381 8811 	msr	BASEPRI, r1
 800405c:	617b      	str	r3, [r7, #20]
 800405e:	4826      	ldr	r0, [pc, #152]	; (80040f8 <SEGGER_SYSVIEW_Print+0xb0>)
 8004060:	f7ff faac 	bl	80035bc <_PreparePacket>
 8004064:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004066:	6938      	ldr	r0, [r7, #16]
 8004068:	6879      	ldr	r1, [r7, #4]
 800406a:	2280      	movs	r2, #128	; 0x80
 800406c:	f7ff fa58 	bl	8003520 <_EncodeStr>
 8004070:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_LOG);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	627b      	str	r3, [r7, #36]	; 0x24
 8004076:	2300      	movs	r3, #0
 8004078:	623b      	str	r3, [r7, #32]
 800407a:	e00b      	b.n	8004094 <SEGGER_SYSVIEW_Print+0x4c>
 800407c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407e:	1c5a      	adds	r2, r3, #1
 8004080:	627a      	str	r2, [r7, #36]	; 0x24
 8004082:	6a3a      	ldr	r2, [r7, #32]
 8004084:	b2d2      	uxtb	r2, r2
 8004086:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800408a:	b2d2      	uxtb	r2, r2
 800408c:	701a      	strb	r2, [r3, #0]
 800408e:	6a3b      	ldr	r3, [r7, #32]
 8004090:	09db      	lsrs	r3, r3, #7
 8004092:	623b      	str	r3, [r7, #32]
 8004094:	6a3b      	ldr	r3, [r7, #32]
 8004096:	2b7f      	cmp	r3, #127	; 0x7f
 8004098:	d8f0      	bhi.n	800407c <SEGGER_SYSVIEW_Print+0x34>
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	1c5a      	adds	r2, r3, #1
 800409e:	627a      	str	r2, [r7, #36]	; 0x24
 80040a0:	6a3a      	ldr	r2, [r7, #32]
 80040a2:	b2d2      	uxtb	r2, r2
 80040a4:	701a      	strb	r2, [r3, #0]
 80040a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	61fb      	str	r3, [r7, #28]
 80040ae:	2300      	movs	r3, #0
 80040b0:	61bb      	str	r3, [r7, #24]
 80040b2:	e00b      	b.n	80040cc <SEGGER_SYSVIEW_Print+0x84>
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	1c5a      	adds	r2, r3, #1
 80040b8:	61fa      	str	r2, [r7, #28]
 80040ba:	69ba      	ldr	r2, [r7, #24]
 80040bc:	b2d2      	uxtb	r2, r2
 80040be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040c2:	b2d2      	uxtb	r2, r2
 80040c4:	701a      	strb	r2, [r3, #0]
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	09db      	lsrs	r3, r3, #7
 80040ca:	61bb      	str	r3, [r7, #24]
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	2b7f      	cmp	r3, #127	; 0x7f
 80040d0:	d8f0      	bhi.n	80040b4 <SEGGER_SYSVIEW_Print+0x6c>
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	1c5a      	adds	r2, r3, #1
 80040d6:	61fa      	str	r2, [r7, #28]
 80040d8:	69ba      	ldr	r2, [r7, #24]
 80040da:	b2d2      	uxtb	r2, r2
 80040dc:	701a      	strb	r2, [r3, #0]
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80040e2:	6938      	ldr	r0, [r7, #16]
 80040e4:	68f9      	ldr	r1, [r7, #12]
 80040e6:	221a      	movs	r2, #26
 80040e8:	f7ff fb3c 	bl	8003764 <_SendPacket>
  RECORD_END();
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	f383 8811 	msr	BASEPRI, r3
}
 80040f2:	3728      	adds	r7, #40	; 0x28
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	20001468 	.word	0x20001468

080040fc <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80040fc:	b580      	push	{r7, lr}
 80040fe:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME);
 8004100:	4803      	ldr	r0, [pc, #12]	; (8004110 <_cbSendSystemDesc+0x14>)
 8004102:	f7ff fe7f 	bl	8003e04 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004106:	4803      	ldr	r0, [pc, #12]	; (8004114 <_cbSendSystemDesc+0x18>)
 8004108:	f7ff fe7c 	bl	8003e04 <SEGGER_SYSVIEW_SendSysDesc>
}
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	08004244 	.word	0x08004244
 8004114:	08004264 	.word	0x08004264

08004118 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004118:	b580      	push	{r7, lr}
 800411a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800411c:	4b07      	ldr	r3, [pc, #28]	; (800413c <SEGGER_SYSVIEW_Conf+0x24>)
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	4b06      	ldr	r3, [pc, #24]	; (800413c <SEGGER_SYSVIEW_Conf+0x24>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4610      	mov	r0, r2
 8004126:	4619      	mov	r1, r3
 8004128:	2200      	movs	r2, #0
 800412a:	4b05      	ldr	r3, [pc, #20]	; (8004140 <SEGGER_SYSVIEW_Conf+0x28>)
 800412c:	f7ff fbe4 	bl	80038f8 <SEGGER_SYSVIEW_Init>
                      0, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004130:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004134:	f7ff fc1c 	bl	8003970 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	20000000 	.word	0x20000000
 8004140:	080040fd 	.word	0x080040fd

08004144 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004144:	f8df d034 	ldr.w	sp, [pc, #52]	; 800417c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004148:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800414a:	e003      	b.n	8004154 <LoopCopyDataInit>

0800414c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800414c:	4b0c      	ldr	r3, [pc, #48]	; (8004180 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800414e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004150:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004152:	3104      	adds	r1, #4

08004154 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004154:	480b      	ldr	r0, [pc, #44]	; (8004184 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004156:	4b0c      	ldr	r3, [pc, #48]	; (8004188 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004158:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800415a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800415c:	d3f6      	bcc.n	800414c <CopyDataInit>
	ldr	r2, =_sbss
 800415e:	4a0b      	ldr	r2, [pc, #44]	; (800418c <LoopForever+0x12>)
	b	LoopFillZerobss
 8004160:	e002      	b.n	8004168 <LoopFillZerobss>

08004162 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004162:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004164:	f842 3b04 	str.w	r3, [r2], #4

08004168 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004168:	4b09      	ldr	r3, [pc, #36]	; (8004190 <LoopForever+0x16>)
	cmp	r2, r3
 800416a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800416c:	d3f9      	bcc.n	8004162 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800416e:	f7fc fa43 	bl	80005f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004172:	f000 f811 	bl	8004198 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004176:	f7fc f921 	bl	80003bc <main>

0800417a <LoopForever>:

LoopForever:
    b LoopForever
 800417a:	e7fe      	b.n	800417a <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800417c:	20004000 	.word	0x20004000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8004180:	080042c0 	.word	0x080042c0
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004184:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004188:	20000004 	.word	0x20000004
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 800418c:	20000004 	.word	0x20000004
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8004190:	200016ac 	.word	0x200016ac

08004194 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004194:	e7fe      	b.n	8004194 <ADC1_IRQHandler>
	...

08004198 <__libc_init_array>:
 8004198:	b570      	push	{r4, r5, r6, lr}
 800419a:	4b0e      	ldr	r3, [pc, #56]	; (80041d4 <__libc_init_array+0x3c>)
 800419c:	4c0e      	ldr	r4, [pc, #56]	; (80041d8 <__libc_init_array+0x40>)
 800419e:	1ae4      	subs	r4, r4, r3
 80041a0:	10a4      	asrs	r4, r4, #2
 80041a2:	2500      	movs	r5, #0
 80041a4:	461e      	mov	r6, r3
 80041a6:	42a5      	cmp	r5, r4
 80041a8:	d004      	beq.n	80041b4 <__libc_init_array+0x1c>
 80041aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80041ae:	4798      	blx	r3
 80041b0:	3501      	adds	r5, #1
 80041b2:	e7f8      	b.n	80041a6 <__libc_init_array+0xe>
 80041b4:	f000 f822 	bl	80041fc <_init>
 80041b8:	4c08      	ldr	r4, [pc, #32]	; (80041dc <__libc_init_array+0x44>)
 80041ba:	4b09      	ldr	r3, [pc, #36]	; (80041e0 <__libc_init_array+0x48>)
 80041bc:	1ae4      	subs	r4, r4, r3
 80041be:	10a4      	asrs	r4, r4, #2
 80041c0:	2500      	movs	r5, #0
 80041c2:	461e      	mov	r6, r3
 80041c4:	42a5      	cmp	r5, r4
 80041c6:	d004      	beq.n	80041d2 <__libc_init_array+0x3a>
 80041c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80041cc:	4798      	blx	r3
 80041ce:	3501      	adds	r5, #1
 80041d0:	e7f8      	b.n	80041c4 <__libc_init_array+0x2c>
 80041d2:	bd70      	pop	{r4, r5, r6, pc}
 80041d4:	080042b8 	.word	0x080042b8
 80041d8:	080042b8 	.word	0x080042b8
 80041dc:	080042bc 	.word	0x080042bc
 80041e0:	080042b8 	.word	0x080042b8

080041e4 <memcpy>:
 80041e4:	b510      	push	{r4, lr}
 80041e6:	1e43      	subs	r3, r0, #1
 80041e8:	440a      	add	r2, r1
 80041ea:	4291      	cmp	r1, r2
 80041ec:	d004      	beq.n	80041f8 <memcpy+0x14>
 80041ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041f6:	e7f8      	b.n	80041ea <memcpy+0x6>
 80041f8:	bd10      	pop	{r4, pc}
	...

080041fc <_init>:
 80041fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041fe:	bf00      	nop
 8004200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004202:	bc08      	pop	{r3}
 8004204:	469e      	mov	lr, r3
 8004206:	4770      	bx	lr

08004208 <_fini>:
 8004208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800420a:	bf00      	nop
 800420c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800420e:	bc08      	pop	{r3}
 8004210:	469e      	mov	lr, r3
 8004212:	4770      	bx	lr
