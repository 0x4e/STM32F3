ARM GAS  /tmp/ccgQTKgw.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"stm32f3xx_hal_rtc.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.HAL_RTC_Init,"ax",%progbits
  21              		.align	2
  22              		.global	HAL_RTC_Init
  23              		.thumb
  24              		.thumb_func
  26              	HAL_RTC_Init:
  27              	.LFB123:
  28              		.file 1 "../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c"
   1:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** /**
   2:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   ******************************************************************************
   3:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @file    stm32f3xx_hal_rtc.c
   4:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @author  MCD Application Team
   5:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @brief   RTC HAL module driver.
   6:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *          This file provides firmware functions to manage the following 
   7:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *          functionalities of the Real-Time Clock (RTC) peripheral:
   8:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *           + Initialization
   9:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *           + Calendar (Time and Date) configuration
  10:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *           + Alarms (Alarm A and Alarm B) configuration
  11:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *           + WakeUp Timer configuration
  12:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *           + TimeStamp configuration
  13:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *           + Tampers configuration
  14:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *           + Backup Data Registers configuration  
  15:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *           + RTC Tamper and TimeStamp Pins Selection 
  16:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *           + Interrupts and flags management
  17:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *
  18:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   @verbatim
  19:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
  20:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****  ===============================================================================     
  21:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****                           ##### RTC Operating Condition #####
  22:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****  ===============================================================================
  23:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     [..] The real-time clock (RTC) and the RTC backup registers can be powered
  24:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****          from the VBAT voltage when the main VDD supply is powered off.
  25:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****          To retain the content of the RTC backup registers and supply the RTC 
  26:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****          when VDD is turned off, VBAT pin can be connected to an optional
  27:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****          standby voltage supplied by a battery or by another source.
  28:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
  29:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     [..] To allow the RTC to operate even when the main digital supply (VDD) 
  30:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****          is turned off, the VBAT pin powers the following blocks:
ARM GAS  /tmp/ccgQTKgw.s 			page 2


  31:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****            (#) The RTC
  32:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****            (#) The LSE oscillator
  33:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****            (#) PC13 to PC15 I/Os (when available)
  34:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
  35:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     [..] When the backup domain is supplied by VDD (analog switch connected 
  36:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****          to VDD), the following functions are available:
  37:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****            (#) PC14 and PC15 can be used as either GPIO or LSE pins
  38:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****            (#) PC13 can be used as a GPIO or as the RTC_OUT pin
  39:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
  40:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     [..] When the backup domain is supplied by VBAT (analog switch connected 
  41:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****          to VBAT because VDD is not present), the following functions are available:
  42:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****            (#) PC14 and PC15 can be used as LSE pins only
  43:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****            (#) PC13 can be used as the RTC_OUT pin 
  44:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****              
  45:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****                         ##### Backup Domain Reset #####
  46:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****  ===============================================================================
  47:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     [..] The backup domain reset sets all RTC registers and the RCC_BDCR 
  48:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****          register to their reset values. 
  49:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****          A backup domain reset is generated when one of the following events
  50:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****          occurs:
  51:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****            (#) Software reset, triggered by setting the BDRST bit in the 
  52:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****                RCC Backup domain control register (RCC_BDCR).
  53:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****            (#) VDD or VBAT power on, if both supplies have previously been
  54:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****                powered off.
  55:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
  56:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****                    ##### Backup Domain Access #####
  57:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****  ===================================================================
  58:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     [..] After reset, the backup domain (RTC registers, RTC backup data 
  59:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****          registers and backup SRAM) is protected against possible unwanted write 
  60:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****          accesses.
  61:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
  62:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     [..] To enable access to the RTC Domain and RTC registers, proceed as follows:
  63:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****            (#) Enable the Power Controller (PWR) APB1 interface clock using the
  64:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****                __HAL_RCC_PWR_CLK_ENABLE() function.
  65:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****            (#) Enable access to RTC domain using the HAL_PWR_EnableBkUpAccess() function.
  66:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****            (#) Select the RTC clock source using the __HAL_RCC_RTC_CONFIG() function.
  67:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****            (#) Enable RTC Clock using the __HAL_RCC_RTC_ENABLE() function.
  68:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
  69:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
  70:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****                   ##### How to use RTC Driver #####
  71:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****  ===================================================================
  72:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     [..] 
  73:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         (+) Enable the RTC domain access (see description in the section above).
  74:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         (+) Configure the RTC Prescaler (Asynchronous and Synchronous) and RTC hour 
  75:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****             format using the HAL_RTC_Init() function.
  76:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
  77:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     *** Time and Date configuration ***
  78:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     ===================================
  79:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     [..] 
  80:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         (+) To configure the RTC Calendar (Time and Date) use the HAL_RTC_SetTime() 
  81:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****             and HAL_RTC_SetDate() functions.
  82:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         (+) To read the RTC Calendar, use the HAL_RTC_GetTime() and HAL_RTC_GetDate() functions. 
  83:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
  84:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     *** Alarm configuration ***
  85:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     ===========================
  86:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     [..]
  87:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         (+) To configure the RTC Alarm use the HAL_RTC_SetAlarm() function. 
ARM GAS  /tmp/ccgQTKgw.s 			page 3


  88:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****             You can also configure the RTC Alarm with interrupt mode using the 
  89:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****             HAL_RTC_SetAlarm_IT() function.
  90:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         (+) To read the RTC Alarm, use the HAL_RTC_GetAlarm() function.
  91:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
  92:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     *** RTC Wakeup configuration ***
  93:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     ================================
  94:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     [..] 
  95:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         (+) To configure the RTC Wakeup Clock source and Counter use the HAL_RTC_SetWakeUpTimer()
  96:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****             function. You can also configure the RTC Wakeup timer with interrupt mode 
  97:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****             using the HAL_RTC_SetWakeUpTimer_IT() function.
  98:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         (+) To read the RTC WakeUp Counter register, use the HAL_RTC_GetWakeUpTimer() 
  99:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****             function.
 100:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
 101:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     *** TimeStamp configuration ***
 102:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     ===============================
 103:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     [..]
 104:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         (+) Configure the RTC_AF trigger and enables the RTC TimeStamp using the 
 105:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****             HAL_RTC_SetTimeStamp() function. You can also configure the RTC TimeStamp with 
 106:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****             interrupt mode using the HAL_RTC_SetTimeStamp_IT() function.
 107:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         (+) To read the RTC TimeStamp Time and Date register, use the HAL_RTC_GetTimeStamp()
 108:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****             function.
 109:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
 110:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     *** Tamper configuration ***
 111:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     ============================
 112:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     [..]
 113:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         (+) Enable the RTC Tamper and Configure the Tamper filter count, trigger Edge 
 114:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****             or Level according to the Tamper filter (if equal to 0 Edge else Level) 
 115:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****             value, sampling frequency, precharge or discharge and Pull-UP using the 
 116:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****             HAL_RTC_SetTamper() function. You can configure RTC Tamper with interrupt 
 117:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****             mode using HAL_RTC_SetTamper_IT() function.
 118:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
 119:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     *** Backup Data Registers configuration ***
 120:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     ===========================================
 121:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     [..]
 122:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         (+) To write to the RTC Backup Data registers, use the HAL_RTC_BKUPWrite()
 123:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****             function.  
 124:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         (+) To read the RTC Backup Data registers, use the HAL_RTC_BKUPRead()
 125:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****             function.
 126:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****    
 127:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
 128:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****                   ##### RTC and low power modes #####
 129:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****  ===================================================================
 130:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     [..] The MCU can be woken up from a low power mode by an RTC alternate 
 131:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****          function.
 132:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     [..] The RTC alternate functions are the RTC alarms (Alarm A and Alarm B), 
 133:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****          RTC wakeup, RTC tamper event detection and RTC time stamp event detection.
 134:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****          These RTC alternate functions can wake up the system from the Stop and 
 135:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****          Standby low power modes.
 136:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     [..] The system can also wake up from low power modes without depending 
 137:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****          on an external interrupt (Auto-wakeup mode), by using the RTC alarm 
 138:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****          or the RTC wakeup events.
 139:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     [..] The RTC provides a programmable time base for waking up from the 
 140:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****          Stop or Standby mode at regular intervals.
 141:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****          Wakeup from STOP and Standby modes is possible only when the RTC clock source
 142:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****          is LSE or LSI.
 143:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****      
 144:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   @endverbatim
ARM GAS  /tmp/ccgQTKgw.s 			page 4


 145:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
 146:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   ******************************************************************************
 147:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @attention
 148:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *
 149:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
 150:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *
 151:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * Redistribution and use in source and binary forms, with or without modification,
 152:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * are permitted provided that the following conditions are met:
 153:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 154:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *      this list of conditions and the following disclaimer.
 155:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 156:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *      this list of conditions and the following disclaimer in the documentation
 157:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *      and/or other materials provided with the distribution.
 158:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 159:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *      may be used to endorse or promote products derived from this software
 160:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *      without specific prior written permission.
 161:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *
 162:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 163:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 164:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 165:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 166:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 167:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 168:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 169:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 170:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 171:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 172:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *
 173:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   ******************************************************************************  
 174:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   */
 175:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
 176:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** /* Includes ------------------------------------------------------------------*/
 177:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** #include "stm32f3xx_hal.h"
 178:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
 179:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** /** @addtogroup STM32F3xx_HAL_Driver
 180:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @{
 181:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   */
 182:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
 183:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** /** @addtogroup RTC
 184:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @brief RTC HAL module driver
 185:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @{
 186:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   */
 187:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
 188:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** #ifdef HAL_RTC_MODULE_ENABLED
 189:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
 190:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** /* Private typedef -----------------------------------------------------------*/
 191:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** /* Private define ------------------------------------------------------------*/
 192:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** /* Private macro -------------------------------------------------------------*/
 193:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** /* Private variables ---------------------------------------------------------*/
 194:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** /* Private function prototypes -----------------------------------------------*/
 195:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** /* Exported functions ---------------------------------------------------------*/
 196:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
 197:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** /** @addtogroup RTC_Exported_Functions
 198:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @{
 199:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   */
 200:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
 201:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** /** @addtogroup RTC_Exported_Functions_Group1
ARM GAS  /tmp/ccgQTKgw.s 			page 5


 202:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****  *  @brief    Initialization and Configuration functions 
 203:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****  *
 204:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** @verbatim    
 205:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****  ===============================================================================
 206:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ##### Initialization and de-initialization functions #####
 207:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****  ===============================================================================
 208:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****    [..] This section provides functions allowing to initialize and configure the 
 209:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****          RTC Prescaler (Synchronous and Asynchronous), RTC Hour format, disable 
 210:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****          RTC registers Write protection, enter and exit the RTC initialization mode, 
 211:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****          RTC registers synchronization check and reference clock detection enable.
 212:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****          (#) The RTC Prescaler is programmed to generate the RTC 1Hz time base. 
 213:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****              It is split into 2 programmable prescalers to minimize power consumption.
 214:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****              (++) A 7-bit asynchronous prescaler and a 15-bit synchronous prescaler.
 215:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****              (++) When both prescalers are used, it is recommended to configure the 
 216:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****                  asynchronous prescaler to a high value to minimize power consumption.
 217:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****          (#) All RTC registers are Write protected. Writing to the RTC registers
 218:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****              is enabled by writing a key into the Write Protection register, RTC_WPR.
 219:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****          (#) To configure the RTC Calendar, user application should enter 
 220:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****              initialization mode. In this mode, the calendar counter is stopped 
 221:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****              and its value can be updated. When the initialization sequence is 
 222:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****              complete, the calendar restarts counting after 4 RTCCLK cycles.
 223:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****          (#) To read the calendar through the shadow registers after Calendar 
 224:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****              initialization, calendar update or after wakeup from low power modes 
 225:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****              the software must first clear the RSF flag. The software must then 
 226:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****              wait until it is set again before reading the calendar, which means 
 227:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****              that the calendar registers have been correctly copied into the 
 228:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****              RTC_TR and RTC_DR shadow registers.The HAL_RTC_WaitForSynchro() function 
 229:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****              implements the above software sequence (RSF clear and RSF check).
 230:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****  
 231:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** @endverbatim
 232:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @{
 233:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   */
 234:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
 235:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** /**
 236:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @brief  Initialize the RTC according to the specified parameters 
 237:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *         in the RTC_InitTypeDef structure and initialize the associated handle.
 238:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @param  hrtc RTC handle
 239:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @retval HAL status
 240:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   */
 241:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
 242:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** {
  29              		.loc 1 242 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 8
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33 0000 80B5     		push	{r7, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 82B0     		sub	sp, sp, #8
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 16
  41 0004 00AF     		add	r7, sp, #0
  42              	.LCFI2:
  43              		.cfi_def_cfa_register 7
  44 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/ccgQTKgw.s 			page 6


 243:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Check the RTC peripheral state */
 244:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   if(hrtc == NULL)
  45              		.loc 1 244 0
  46 0008 7B68     		ldr	r3, [r7, #4]
  47 000a 002B     		cmp	r3, #0
  48 000c 01D1     		bne	.L2
 245:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   {
 246:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****      return HAL_ERROR;
  49              		.loc 1 246 0
  50 000e 0123     		movs	r3, #1
  51 0010 83E0     		b	.L3
  52              	.L2:
 247:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   }
 248:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
 249:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Check the parameters */
 250:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 251:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 252:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 253:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 254:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 255:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 256:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 257:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
 258:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   if(hrtc->State == HAL_RTC_STATE_RESET)
  53              		.loc 1 258 0
  54 0012 7B68     		ldr	r3, [r7, #4]
  55 0014 5B7F     		ldrb	r3, [r3, #29]
  56 0016 DBB2     		uxtb	r3, r3
  57 0018 002B     		cmp	r3, #0
  58 001a 05D1     		bne	.L4
 259:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   {
 260:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Allocate lock resource and initialize it */
 261:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     hrtc->Lock = HAL_UNLOCKED;
  59              		.loc 1 261 0
  60 001c 7B68     		ldr	r3, [r7, #4]
  61 001e 0022     		movs	r2, #0
  62 0020 1A77     		strb	r2, [r3, #28]
 262:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
 263:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Initialize RTC MSP */
 264:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     HAL_RTC_MspInit(hrtc);
  63              		.loc 1 264 0
  64 0022 7868     		ldr	r0, [r7, #4]
  65 0024 FFF7FEFF 		bl	HAL_RTC_MspInit
  66              	.L4:
 265:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   }
 266:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
 267:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Set RTC state */  
 268:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;  
  67              		.loc 1 268 0
  68 0028 7B68     		ldr	r3, [r7, #4]
  69 002a 0222     		movs	r2, #2
  70 002c 5A77     		strb	r2, [r3, #29]
 269:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****        
 270:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
 271:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
  71              		.loc 1 271 0
  72 002e 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccgQTKgw.s 			page 7


  73 0030 1B68     		ldr	r3, [r3]
  74 0032 CA22     		movs	r2, #202
  75 0034 5A62     		str	r2, [r3, #36]
  76 0036 7B68     		ldr	r3, [r7, #4]
  77 0038 1B68     		ldr	r3, [r3]
  78 003a 5322     		movs	r2, #83
  79 003c 5A62     		str	r2, [r3, #36]
 272:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
 273:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Set Initialization mode */
 274:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   if(RTC_EnterInitMode(hrtc) != HAL_OK)
  80              		.loc 1 274 0
  81 003e 7868     		ldr	r0, [r7, #4]
  82 0040 FFF7FEFF 		bl	RTC_EnterInitMode
  83 0044 0346     		mov	r3, r0
  84 0046 002B     		cmp	r3, #0
  85 0048 08D0     		beq	.L5
 275:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   {
 276:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 277:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
  86              		.loc 1 277 0
  87 004a 7B68     		ldr	r3, [r7, #4]
  88 004c 1B68     		ldr	r3, [r3]
  89 004e FF22     		movs	r2, #255
  90 0050 5A62     		str	r2, [r3, #36]
 278:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
 279:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Set RTC state */
 280:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_ERROR;
  91              		.loc 1 280 0
  92 0052 7B68     		ldr	r3, [r7, #4]
  93 0054 0422     		movs	r2, #4
  94 0056 5A77     		strb	r2, [r3, #29]
 281:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
 282:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     return HAL_ERROR;
  95              		.loc 1 282 0
  96 0058 0123     		movs	r3, #1
  97 005a 5EE0     		b	.L3
  98              	.L5:
 283:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   } 
 284:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   else
 285:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   { 
 286:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Clear RTC_CR FMT, OSEL and POL Bits */
 287:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
  99              		.loc 1 287 0
 100 005c 7B68     		ldr	r3, [r7, #4]
 101 005e 1A68     		ldr	r2, [r3]
 102 0060 7B68     		ldr	r3, [r7, #4]
 103 0062 1B68     		ldr	r3, [r3]
 104 0064 9B68     		ldr	r3, [r3, #8]
 105 0066 23F4E003 		bic	r3, r3, #7340032
 106 006a 23F04003 		bic	r3, r3, #64
 107 006e 9360     		str	r3, [r2, #8]
 288:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Set RTC_CR register */
 289:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutP
 108              		.loc 1 289 0
 109 0070 7B68     		ldr	r3, [r7, #4]
 110 0072 1B68     		ldr	r3, [r3]
 111 0074 7A68     		ldr	r2, [r7, #4]
ARM GAS  /tmp/ccgQTKgw.s 			page 8


 112 0076 1268     		ldr	r2, [r2]
 113 0078 9168     		ldr	r1, [r2, #8]
 114 007a 7A68     		ldr	r2, [r7, #4]
 115 007c 5068     		ldr	r0, [r2, #4]
 116 007e 7A68     		ldr	r2, [r7, #4]
 117 0080 1269     		ldr	r2, [r2, #16]
 118 0082 1043     		orrs	r0, r0, r2
 119 0084 7A68     		ldr	r2, [r7, #4]
 120 0086 5269     		ldr	r2, [r2, #20]
 121 0088 0243     		orrs	r2, r2, r0
 122 008a 0A43     		orrs	r2, r2, r1
 123 008c 9A60     		str	r2, [r3, #8]
 290:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
 291:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Configure the RTC PRER */
 292:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 124              		.loc 1 292 0
 125 008e 7B68     		ldr	r3, [r7, #4]
 126 0090 1B68     		ldr	r3, [r3]
 127 0092 7A68     		ldr	r2, [r7, #4]
 128 0094 D268     		ldr	r2, [r2, #12]
 129 0096 1A61     		str	r2, [r3, #16]
 293:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 130              		.loc 1 293 0
 131 0098 7B68     		ldr	r3, [r7, #4]
 132 009a 1B68     		ldr	r3, [r3]
 133 009c 7A68     		ldr	r2, [r7, #4]
 134 009e 1268     		ldr	r2, [r2]
 135 00a0 1169     		ldr	r1, [r2, #16]
 136 00a2 7A68     		ldr	r2, [r7, #4]
 137 00a4 9268     		ldr	r2, [r2, #8]
 138 00a6 1204     		lsls	r2, r2, #16
 139 00a8 0A43     		orrs	r2, r2, r1
 140 00aa 1A61     		str	r2, [r3, #16]
 294:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
 295:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Exit Initialization mode */
 296:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 141              		.loc 1 296 0
 142 00ac 7B68     		ldr	r3, [r7, #4]
 143 00ae 1B68     		ldr	r3, [r3]
 144 00b0 7A68     		ldr	r2, [r7, #4]
 145 00b2 1268     		ldr	r2, [r2]
 146 00b4 D268     		ldr	r2, [r2, #12]
 147 00b6 22F08002 		bic	r2, r2, #128
 148 00ba DA60     		str	r2, [r3, #12]
 297:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
 298:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
 299:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 149              		.loc 1 299 0
 150 00bc 7B68     		ldr	r3, [r7, #4]
 151 00be 1B68     		ldr	r3, [r3]
 152 00c0 9B68     		ldr	r3, [r3, #8]
 153 00c2 03F02003 		and	r3, r3, #32
 154 00c6 002B     		cmp	r3, #0
 155 00c8 0ED1     		bne	.L6
 300:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     {
 301:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 156              		.loc 1 301 0
ARM GAS  /tmp/ccgQTKgw.s 			page 9


 157 00ca 7868     		ldr	r0, [r7, #4]
 158 00cc FFF7FEFF 		bl	HAL_RTC_WaitForSynchro
 159 00d0 0346     		mov	r3, r0
 160 00d2 002B     		cmp	r3, #0
 161 00d4 08D0     		beq	.L6
 302:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       {
 303:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
 304:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 162              		.loc 1 304 0
 163 00d6 7B68     		ldr	r3, [r7, #4]
 164 00d8 1B68     		ldr	r3, [r3]
 165 00da FF22     		movs	r2, #255
 166 00dc 5A62     		str	r2, [r3, #36]
 305:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
 306:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_ERROR;
 167              		.loc 1 306 0
 168 00de 7B68     		ldr	r3, [r7, #4]
 169 00e0 0422     		movs	r2, #4
 170 00e2 5A77     		strb	r2, [r3, #29]
 307:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
 308:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         return HAL_ERROR;
 171              		.loc 1 308 0
 172 00e4 0123     		movs	r3, #1
 173 00e6 18E0     		b	.L3
 174              	.L6:
 309:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       }
 310:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     }
 311:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
 312:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 175              		.loc 1 312 0
 176 00e8 7B68     		ldr	r3, [r7, #4]
 177 00ea 1B68     		ldr	r3, [r3]
 178 00ec 7A68     		ldr	r2, [r7, #4]
 179 00ee 1268     		ldr	r2, [r2]
 180 00f0 126C     		ldr	r2, [r2, #64]
 181 00f2 22F48022 		bic	r2, r2, #262144
 182 00f6 1A64     		str	r2, [r3, #64]
 313:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 183              		.loc 1 313 0
 184 00f8 7B68     		ldr	r3, [r7, #4]
 185 00fa 1B68     		ldr	r3, [r3]
 186 00fc 7A68     		ldr	r2, [r7, #4]
 187 00fe 1268     		ldr	r2, [r2]
 188 0100 116C     		ldr	r1, [r2, #64]
 189 0102 7A68     		ldr	r2, [r7, #4]
 190 0104 9269     		ldr	r2, [r2, #24]
 191 0106 0A43     		orrs	r2, r2, r1
 192 0108 1A64     		str	r2, [r3, #64]
 314:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
 315:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 316:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 193              		.loc 1 316 0
 194 010a 7B68     		ldr	r3, [r7, #4]
 195 010c 1B68     		ldr	r3, [r3]
 196 010e FF22     		movs	r2, #255
 197 0110 5A62     		str	r2, [r3, #36]
 317:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
ARM GAS  /tmp/ccgQTKgw.s 			page 10


 318:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Set RTC state */
 319:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_READY;
 198              		.loc 1 319 0
 199 0112 7B68     		ldr	r3, [r7, #4]
 200 0114 0122     		movs	r2, #1
 201 0116 5A77     		strb	r2, [r3, #29]
 320:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
 321:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     return HAL_OK;
 202              		.loc 1 321 0
 203 0118 0023     		movs	r3, #0
 204              	.L3:
 322:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   }
 323:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** }
 205              		.loc 1 323 0
 206 011a 1846     		mov	r0, r3
 207 011c 0837     		adds	r7, r7, #8
 208              	.LCFI3:
 209              		.cfi_def_cfa_offset 8
 210 011e BD46     		mov	sp, r7
 211              	.LCFI4:
 212              		.cfi_def_cfa_register 13
 213              		@ sp needed
 214 0120 80BD     		pop	{r7, pc}
 215              		.cfi_endproc
 216              	.LFE123:
 218 0122 00BF     		.section	.text.HAL_RTC_DeInit,"ax",%progbits
 219              		.align	2
 220              		.global	HAL_RTC_DeInit
 221              		.thumb
 222              		.thumb_func
 224              	HAL_RTC_DeInit:
 225              	.LFB124:
 324:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
 325:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** /**
 326:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @brief  DeInitialize the RTC peripheral.
 327:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @param  hrtc RTC handle
 328:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @note   This function doesn't reset the RTC Backup Data registers.   
 329:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @retval HAL status
 330:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   */
 331:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_DeInit(RTC_HandleTypeDef *hrtc)
 332:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** {
 226              		.loc 1 332 0
 227              		.cfi_startproc
 228              		@ args = 0, pretend = 0, frame = 16
 229              		@ frame_needed = 1, uses_anonymous_args = 0
 230 0000 80B5     		push	{r7, lr}
 231              	.LCFI5:
 232              		.cfi_def_cfa_offset 8
 233              		.cfi_offset 7, -8
 234              		.cfi_offset 14, -4
 235 0002 84B0     		sub	sp, sp, #16
 236              	.LCFI6:
 237              		.cfi_def_cfa_offset 24
 238 0004 00AF     		add	r7, sp, #0
 239              	.LCFI7:
 240              		.cfi_def_cfa_register 7
 241 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/ccgQTKgw.s 			page 11


 333:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   uint32_t tickstart = 0U;
 242              		.loc 1 333 0
 243 0008 0023     		movs	r3, #0
 244 000a FB60     		str	r3, [r7, #12]
 334:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
 335:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Check the parameters */
 336:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 337:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
 338:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Set RTC state */
 339:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY; 
 245              		.loc 1 339 0
 246 000c 7B68     		ldr	r3, [r7, #4]
 247 000e 0222     		movs	r2, #2
 248 0010 5A77     		strb	r2, [r3, #29]
 340:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
 341:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
 342:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 249              		.loc 1 342 0
 250 0012 7B68     		ldr	r3, [r7, #4]
 251 0014 1B68     		ldr	r3, [r3]
 252 0016 CA22     		movs	r2, #202
 253 0018 5A62     		str	r2, [r3, #36]
 254 001a 7B68     		ldr	r3, [r7, #4]
 255 001c 1B68     		ldr	r3, [r3]
 256 001e 5322     		movs	r2, #83
 257 0020 5A62     		str	r2, [r3, #36]
 343:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
 344:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Set Initialization mode */
 345:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   if(RTC_EnterInitMode(hrtc) != HAL_OK)
 258              		.loc 1 345 0
 259 0022 7868     		ldr	r0, [r7, #4]
 260 0024 FFF7FEFF 		bl	RTC_EnterInitMode
 261 0028 0346     		mov	r3, r0
 262 002a 002B     		cmp	r3, #0
 263 002c 08D0     		beq	.L8
 346:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   {
 347:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 348:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 264              		.loc 1 348 0
 265 002e 7B68     		ldr	r3, [r7, #4]
 266 0030 1B68     		ldr	r3, [r3]
 267 0032 FF22     		movs	r2, #255
 268 0034 5A62     		str	r2, [r3, #36]
 349:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
 350:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Set RTC state */
 351:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_ERROR;
 269              		.loc 1 351 0
 270 0036 7B68     		ldr	r3, [r7, #4]
 271 0038 0422     		movs	r2, #4
 272 003a 5A77     		strb	r2, [r3, #29]
 352:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
 353:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     return HAL_ERROR;
 273              		.loc 1 353 0
 274 003c 0123     		movs	r3, #1
 275 003e 80E0     		b	.L9
 276              	.L8:
 354:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   }  
ARM GAS  /tmp/ccgQTKgw.s 			page 12


 355:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   else
 356:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   {
 357:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Reset TR, DR and CR registers */
 358:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     hrtc->Instance->TR = 0x00000000U;
 277              		.loc 1 358 0
 278 0040 7B68     		ldr	r3, [r7, #4]
 279 0042 1B68     		ldr	r3, [r3]
 280 0044 0022     		movs	r2, #0
 281 0046 1A60     		str	r2, [r3]
 359:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     hrtc->Instance->DR = (RTC_DR_WDU_0 | RTC_DR_MU_0 | RTC_DR_DU_0);
 282              		.loc 1 359 0
 283 0048 7B68     		ldr	r3, [r7, #4]
 284 004a 1B68     		ldr	r3, [r3]
 285 004c 42F20112 		movw	r2, #8449
 286 0050 5A60     		str	r2, [r3, #4]
 360:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Reset All CR bits except CR[2:0] */
 361:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     hrtc->Instance->CR &= RTC_CR_WUCKSEL;
 287              		.loc 1 361 0
 288 0052 7B68     		ldr	r3, [r7, #4]
 289 0054 1B68     		ldr	r3, [r3]
 290 0056 7A68     		ldr	r2, [r7, #4]
 291 0058 1268     		ldr	r2, [r2]
 292 005a 9268     		ldr	r2, [r2, #8]
 293 005c 02F00702 		and	r2, r2, #7
 294 0060 9A60     		str	r2, [r3, #8]
 362:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
 363:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 295              		.loc 1 363 0
 296 0062 FFF7FEFF 		bl	HAL_GetTick
 297 0066 F860     		str	r0, [r7, #12]
 364:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
 365:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Wait till WUTWF flag is set and if Time out is reached exit */
 366:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     while(((hrtc->Instance->ISR) & RTC_ISR_WUTWF) == (uint32_t)RESET)
 298              		.loc 1 366 0
 299 0068 10E0     		b	.L10
 300              	.L11:
 367:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     {
 368:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 301              		.loc 1 368 0
 302 006a FFF7FEFF 		bl	HAL_GetTick
 303 006e 0246     		mov	r2, r0
 304 0070 FB68     		ldr	r3, [r7, #12]
 305 0072 D31A     		subs	r3, r2, r3
 306 0074 B3F57A7F 		cmp	r3, #1000
 307 0078 08D9     		bls	.L10
 369:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       { 
 370:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
 371:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 308              		.loc 1 371 0
 309 007a 7B68     		ldr	r3, [r7, #4]
 310 007c 1B68     		ldr	r3, [r3]
 311 007e FF22     		movs	r2, #255
 312 0080 5A62     		str	r2, [r3, #36]
 372:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         
 373:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         /* Set RTC state */
 374:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 313              		.loc 1 374 0
ARM GAS  /tmp/ccgQTKgw.s 			page 13


 314 0082 7B68     		ldr	r3, [r7, #4]
 315 0084 0322     		movs	r2, #3
 316 0086 5A77     		strb	r2, [r3, #29]
 375:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         
 376:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         return HAL_TIMEOUT;
 317              		.loc 1 376 0
 318 0088 0323     		movs	r3, #3
 319 008a 5AE0     		b	.L9
 320              	.L10:
 366:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     {
 321              		.loc 1 366 0
 322 008c 7B68     		ldr	r3, [r7, #4]
 323 008e 1B68     		ldr	r3, [r3]
 324 0090 DB68     		ldr	r3, [r3, #12]
 325 0092 03F00403 		and	r3, r3, #4
 326 0096 002B     		cmp	r3, #0
 327 0098 E7D0     		beq	.L11
 377:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       } 
 378:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     }
 379:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
 380:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Reset all RTC CR register bits */
 381:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     hrtc->Instance->CR &= 0x00000000U;
 328              		.loc 1 381 0
 329 009a 7B68     		ldr	r3, [r7, #4]
 330 009c 1B68     		ldr	r3, [r3]
 331 009e 9B68     		ldr	r3, [r3, #8]
 332 00a0 7B68     		ldr	r3, [r7, #4]
 333 00a2 1B68     		ldr	r3, [r3]
 334 00a4 0022     		movs	r2, #0
 335 00a6 9A60     		str	r2, [r3, #8]
 382:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     hrtc->Instance->WUTR = RTC_WUTR_WUT;
 336              		.loc 1 382 0
 337 00a8 7B68     		ldr	r3, [r7, #4]
 338 00aa 1B68     		ldr	r3, [r3]
 339 00ac 4FF6FF72 		movw	r2, #65535
 340 00b0 5A61     		str	r2, [r3, #20]
 383:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     hrtc->Instance->PRER = ((uint32_t)(RTC_PRER_PREDIV_A | 0x000000FFU));
 341              		.loc 1 383 0
 342 00b2 7B68     		ldr	r3, [r7, #4]
 343 00b4 1B68     		ldr	r3, [r3]
 344 00b6 254A     		ldr	r2, .L13
 345 00b8 1A61     		str	r2, [r3, #16]
 384:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     hrtc->Instance->ALRMAR = 0x00000000U;        
 346              		.loc 1 384 0
 347 00ba 7B68     		ldr	r3, [r7, #4]
 348 00bc 1B68     		ldr	r3, [r3]
 349 00be 0022     		movs	r2, #0
 350 00c0 DA61     		str	r2, [r3, #28]
 385:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     hrtc->Instance->ALRMBR = 0x00000000U;
 351              		.loc 1 385 0
 352 00c2 7B68     		ldr	r3, [r7, #4]
 353 00c4 1B68     		ldr	r3, [r3]
 354 00c6 0022     		movs	r2, #0
 355 00c8 1A62     		str	r2, [r3, #32]
 386:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     hrtc->Instance->SHIFTR = 0x00000000U;
 356              		.loc 1 386 0
 357 00ca 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccgQTKgw.s 			page 14


 358 00cc 1B68     		ldr	r3, [r3]
 359 00ce 0022     		movs	r2, #0
 360 00d0 DA62     		str	r2, [r3, #44]
 387:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     hrtc->Instance->CALR = 0x00000000U;
 361              		.loc 1 387 0
 362 00d2 7B68     		ldr	r3, [r7, #4]
 363 00d4 1B68     		ldr	r3, [r3]
 364 00d6 0022     		movs	r2, #0
 365 00d8 DA63     		str	r2, [r3, #60]
 388:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     hrtc->Instance->ALRMASSR = 0x00000000U;
 366              		.loc 1 388 0
 367 00da 7B68     		ldr	r3, [r7, #4]
 368 00dc 1B68     		ldr	r3, [r3]
 369 00de 0022     		movs	r2, #0
 370 00e0 5A64     		str	r2, [r3, #68]
 389:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     hrtc->Instance->ALRMBSSR = 0x00000000U;
 371              		.loc 1 389 0
 372 00e2 7B68     		ldr	r3, [r7, #4]
 373 00e4 1B68     		ldr	r3, [r3]
 374 00e6 0022     		movs	r2, #0
 375 00e8 9A64     		str	r2, [r3, #72]
 390:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
 391:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Reset ISR register and exit initialization mode */
 392:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     hrtc->Instance->ISR = 0x00000000U;
 376              		.loc 1 392 0
 377 00ea 7B68     		ldr	r3, [r7, #4]
 378 00ec 1B68     		ldr	r3, [r3]
 379 00ee 0022     		movs	r2, #0
 380 00f0 DA60     		str	r2, [r3, #12]
 393:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
 394:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Reset Tamper and alternate functions configuration register */
 395:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     hrtc->Instance->TAFCR = 0x00000000U;
 381              		.loc 1 395 0
 382 00f2 7B68     		ldr	r3, [r7, #4]
 383 00f4 1B68     		ldr	r3, [r3]
 384 00f6 0022     		movs	r2, #0
 385 00f8 1A64     		str	r2, [r3, #64]
 396:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
 397:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* If  RTC_CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
 398:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 386              		.loc 1 398 0
 387 00fa 7B68     		ldr	r3, [r7, #4]
 388 00fc 1B68     		ldr	r3, [r3]
 389 00fe 9B68     		ldr	r3, [r3, #8]
 390 0100 03F02003 		and	r3, r3, #32
 391 0104 002B     		cmp	r3, #0
 392 0106 0ED1     		bne	.L12
 399:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     {
 400:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 393              		.loc 1 400 0
 394 0108 7868     		ldr	r0, [r7, #4]
 395 010a FFF7FEFF 		bl	HAL_RTC_WaitForSynchro
 396 010e 0346     		mov	r3, r0
 397 0110 002B     		cmp	r3, #0
 398 0112 08D0     		beq	.L12
 401:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       {
 402:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
ARM GAS  /tmp/ccgQTKgw.s 			page 15


 403:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 399              		.loc 1 403 0
 400 0114 7B68     		ldr	r3, [r7, #4]
 401 0116 1B68     		ldr	r3, [r3]
 402 0118 FF22     		movs	r2, #255
 403 011a 5A62     		str	r2, [r3, #36]
 404:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         
 405:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_ERROR;
 404              		.loc 1 405 0
 405 011c 7B68     		ldr	r3, [r7, #4]
 406 011e 0422     		movs	r2, #4
 407 0120 5A77     		strb	r2, [r3, #29]
 406:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         
 407:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         return HAL_ERROR;
 408              		.loc 1 407 0
 409 0122 0123     		movs	r3, #1
 410 0124 0DE0     		b	.L9
 411              	.L12:
 408:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       }
 409:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     }    
 410:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   }
 411:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
 412:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
 413:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 412              		.loc 1 413 0
 413 0126 7B68     		ldr	r3, [r7, #4]
 414 0128 1B68     		ldr	r3, [r3]
 415 012a FF22     		movs	r2, #255
 416 012c 5A62     		str	r2, [r3, #36]
 414:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
 415:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* De-Initialize RTC MSP */
 416:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   HAL_RTC_MspDeInit(hrtc);
 417              		.loc 1 416 0
 418 012e 7868     		ldr	r0, [r7, #4]
 419 0130 FFF7FEFF 		bl	HAL_RTC_MspDeInit
 417:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
 418:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_RESET; 
 420              		.loc 1 418 0
 421 0134 7B68     		ldr	r3, [r7, #4]
 422 0136 0022     		movs	r2, #0
 423 0138 5A77     		strb	r2, [r3, #29]
 419:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
 420:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Release Lock */
 421:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 424              		.loc 1 421 0
 425 013a 7B68     		ldr	r3, [r7, #4]
 426 013c 0022     		movs	r2, #0
 427 013e 1A77     		strb	r2, [r3, #28]
 422:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
 423:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   return HAL_OK;
 428              		.loc 1 423 0
 429 0140 0023     		movs	r3, #0
 430              	.L9:
 424:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** }
 431              		.loc 1 424 0
 432 0142 1846     		mov	r0, r3
 433 0144 1037     		adds	r7, r7, #16
ARM GAS  /tmp/ccgQTKgw.s 			page 16


 434              	.LCFI8:
 435              		.cfi_def_cfa_offset 8
 436 0146 BD46     		mov	sp, r7
 437              	.LCFI9:
 438              		.cfi_def_cfa_register 13
 439              		@ sp needed
 440 0148 80BD     		pop	{r7, pc}
 441              	.L14:
 442 014a 00BF     		.align	2
 443              	.L13:
 444 014c FF007F00 		.word	8323327
 445              		.cfi_endproc
 446              	.LFE124:
 448              		.section	.text.HAL_RTC_MspInit,"ax",%progbits
 449              		.align	2
 450              		.weak	HAL_RTC_MspInit
 451              		.thumb
 452              		.thumb_func
 454              	HAL_RTC_MspInit:
 455              	.LFB125:
 425:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
 426:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** /**
 427:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @brief  Initialize the RTC MSP.
 428:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @param  hrtc RTC handle  
 429:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @retval None
 430:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   */
 431:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** __weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
 432:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** {
 456              		.loc 1 432 0
 457              		.cfi_startproc
 458              		@ args = 0, pretend = 0, frame = 8
 459              		@ frame_needed = 1, uses_anonymous_args = 0
 460              		@ link register save eliminated.
 461 0000 80B4     		push	{r7}
 462              	.LCFI10:
 463              		.cfi_def_cfa_offset 4
 464              		.cfi_offset 7, -4
 465 0002 83B0     		sub	sp, sp, #12
 466              	.LCFI11:
 467              		.cfi_def_cfa_offset 16
 468 0004 00AF     		add	r7, sp, #0
 469              	.LCFI12:
 470              		.cfi_def_cfa_register 7
 471 0006 7860     		str	r0, [r7, #4]
 433:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Prevent unused argument(s) compilation warning */
 434:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   UNUSED(hrtc);
 435:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
 436:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 437:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****             the HAL_RTC_MspInit could be implemented in the user file
 438:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****    */ 
 439:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** }
 472              		.loc 1 439 0
 473 0008 0C37     		adds	r7, r7, #12
 474              	.LCFI13:
 475              		.cfi_def_cfa_offset 4
 476 000a BD46     		mov	sp, r7
 477              	.LCFI14:
ARM GAS  /tmp/ccgQTKgw.s 			page 17


 478              		.cfi_def_cfa_register 13
 479              		@ sp needed
 480 000c 5DF8047B 		ldr	r7, [sp], #4
 481              	.LCFI15:
 482              		.cfi_restore 7
 483              		.cfi_def_cfa_offset 0
 484 0010 7047     		bx	lr
 485              		.cfi_endproc
 486              	.LFE125:
 488 0012 00BF     		.section	.text.HAL_RTC_MspDeInit,"ax",%progbits
 489              		.align	2
 490              		.weak	HAL_RTC_MspDeInit
 491              		.thumb
 492              		.thumb_func
 494              	HAL_RTC_MspDeInit:
 495              	.LFB126:
 440:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
 441:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** /**
 442:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @brief  DeInitialize the RTC MSP.
 443:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @param  hrtc RTC handle 
 444:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @retval None
 445:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   */
 446:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** __weak void HAL_RTC_MspDeInit(RTC_HandleTypeDef* hrtc)
 447:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** {
 496              		.loc 1 447 0
 497              		.cfi_startproc
 498              		@ args = 0, pretend = 0, frame = 8
 499              		@ frame_needed = 1, uses_anonymous_args = 0
 500              		@ link register save eliminated.
 501 0000 80B4     		push	{r7}
 502              	.LCFI16:
 503              		.cfi_def_cfa_offset 4
 504              		.cfi_offset 7, -4
 505 0002 83B0     		sub	sp, sp, #12
 506              	.LCFI17:
 507              		.cfi_def_cfa_offset 16
 508 0004 00AF     		add	r7, sp, #0
 509              	.LCFI18:
 510              		.cfi_def_cfa_register 7
 511 0006 7860     		str	r0, [r7, #4]
 448:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Prevent unused argument(s) compilation warning */
 449:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   UNUSED(hrtc);
 450:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
 451:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 452:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****             the HAL_RTC_MspDeInit could be implemented in the user file
 453:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****    */ 
 454:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** }
 512              		.loc 1 454 0
 513 0008 0C37     		adds	r7, r7, #12
 514              	.LCFI19:
 515              		.cfi_def_cfa_offset 4
 516 000a BD46     		mov	sp, r7
 517              	.LCFI20:
 518              		.cfi_def_cfa_register 13
 519              		@ sp needed
 520 000c 5DF8047B 		ldr	r7, [sp], #4
 521              	.LCFI21:
ARM GAS  /tmp/ccgQTKgw.s 			page 18


 522              		.cfi_restore 7
 523              		.cfi_def_cfa_offset 0
 524 0010 7047     		bx	lr
 525              		.cfi_endproc
 526              	.LFE126:
 528 0012 00BF     		.section	.text.HAL_RTC_SetTime,"ax",%progbits
 529              		.align	2
 530              		.global	HAL_RTC_SetTime
 531              		.thumb
 532              		.thumb_func
 534              	HAL_RTC_SetTime:
 535              	.LFB127:
 455:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
 456:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** /**
 457:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @}
 458:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   */
 459:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
 460:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** /** @addtogroup RTC_Exported_Functions_Group2
 461:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****  *  @brief   RTC Time and Date functions
 462:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****  *
 463:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** @verbatim   
 464:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****  ===============================================================================
 465:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****                  ##### RTC Time and Date functions #####
 466:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****  ===============================================================================  
 467:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****  
 468:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****  [..] This section provides functions allowing to configure Time and Date features
 469:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
 470:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** @endverbatim
 471:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @{
 472:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   */
 473:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
 474:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** /**
 475:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @brief  Set RTC current time.
 476:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @param  hrtc RTC handle
 477:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @param  sTime Pointer to Time structure
 478:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
 479:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 480:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN: Binary data format 
 481:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD: BCD data format
 482:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @retval HAL status
 483:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   */
 484:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
 485:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** {
 536              		.loc 1 485 0
 537              		.cfi_startproc
 538              		@ args = 0, pretend = 0, frame = 24
 539              		@ frame_needed = 1, uses_anonymous_args = 0
 540 0000 90B5     		push	{r4, r7, lr}
 541              	.LCFI22:
 542              		.cfi_def_cfa_offset 12
 543              		.cfi_offset 4, -12
 544              		.cfi_offset 7, -8
 545              		.cfi_offset 14, -4
 546 0002 87B0     		sub	sp, sp, #28
 547              	.LCFI23:
 548              		.cfi_def_cfa_offset 40
 549 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccgQTKgw.s 			page 19


 550              	.LCFI24:
 551              		.cfi_def_cfa_register 7
 552 0006 F860     		str	r0, [r7, #12]
 553 0008 B960     		str	r1, [r7, #8]
 554 000a 7A60     		str	r2, [r7, #4]
 486:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   uint32_t tmpreg = 0U;
 555              		.loc 1 486 0
 556 000c 0023     		movs	r3, #0
 557 000e 7B61     		str	r3, [r7, #20]
 487:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
 488:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****  /* Check the parameters */
 489:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 490:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 491:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 492:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
 493:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Process Locked */ 
 494:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 558              		.loc 1 494 0
 559 0010 FB68     		ldr	r3, [r7, #12]
 560 0012 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 561 0014 012B     		cmp	r3, #1
 562 0016 01D1     		bne	.L18
 563              		.loc 1 494 0 is_stmt 0 discriminator 1
 564 0018 0223     		movs	r3, #2
 565 001a B2E0     		b	.L19
 566              	.L18:
 567              		.loc 1 494 0 discriminator 2
 568 001c FB68     		ldr	r3, [r7, #12]
 569 001e 0122     		movs	r2, #1
 570 0020 1A77     		strb	r2, [r3, #28]
 495:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
 496:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 571              		.loc 1 496 0 is_stmt 1 discriminator 2
 572 0022 FB68     		ldr	r3, [r7, #12]
 573 0024 0222     		movs	r2, #2
 574 0026 5A77     		strb	r2, [r3, #29]
 497:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
 498:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 575              		.loc 1 498 0 discriminator 2
 576 0028 7B68     		ldr	r3, [r7, #4]
 577 002a 002B     		cmp	r3, #0
 578 002c 26D1     		bne	.L20
 499:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   {
 500:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 579              		.loc 1 500 0
 580 002e FB68     		ldr	r3, [r7, #12]
 581 0030 1B68     		ldr	r3, [r3]
 582 0032 9B68     		ldr	r3, [r3, #8]
 583 0034 03F04003 		and	r3, r3, #64
 584 0038 002B     		cmp	r3, #0
 585 003a 02D1     		bne	.L21
 501:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     {
 502:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(sTime->Hours));
 503:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 504:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     } 
 505:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     else
 506:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     {
ARM GAS  /tmp/ccgQTKgw.s 			page 20


 507:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       sTime->TimeFormat = 0x00U;
 586              		.loc 1 507 0
 587 003c BB68     		ldr	r3, [r7, #8]
 588 003e 0022     		movs	r2, #0
 589 0040 DA70     		strb	r2, [r3, #3]
 590              	.L21:
 508:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sTime->Hours));
 509:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     }
 510:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(sTime->Minutes));
 511:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(sTime->Seconds));
 512:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
 513:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 591              		.loc 1 513 0
 592 0042 BB68     		ldr	r3, [r7, #8]
 593 0044 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 594 0046 1846     		mov	r0, r3
 595 0048 FFF7FEFF 		bl	RTC_ByteToBcd2
 596 004c 0346     		mov	r3, r0
 597 004e 1C04     		lsls	r4, r3, #16
 514:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****                         ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 598              		.loc 1 514 0
 599 0050 BB68     		ldr	r3, [r7, #8]
 600 0052 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 601 0054 1846     		mov	r0, r3
 602 0056 FFF7FEFF 		bl	RTC_ByteToBcd2
 603 005a 0346     		mov	r3, r0
 604 005c 1B02     		lsls	r3, r3, #8
 513:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****                         ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 605              		.loc 1 513 0
 606 005e 1C43     		orrs	r4, r4, r3
 515:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****                         ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 607              		.loc 1 515 0
 608 0060 BB68     		ldr	r3, [r7, #8]
 609 0062 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 610 0064 1846     		mov	r0, r3
 611 0066 FFF7FEFF 		bl	RTC_ByteToBcd2
 612 006a 0346     		mov	r3, r0
 514:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****                         ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 613              		.loc 1 514 0
 614 006c 44EA0302 		orr	r2, r4, r3
 516:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****                         (((uint32_t)sTime->TimeFormat) << 16U));  
 615              		.loc 1 516 0
 616 0070 BB68     		ldr	r3, [r7, #8]
 617 0072 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 618 0074 1B04     		lsls	r3, r3, #16
 513:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****                         ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 619              		.loc 1 513 0
 620 0076 1343     		orrs	r3, r3, r2
 621 0078 7B61     		str	r3, [r7, #20]
 622 007a 20E0     		b	.L22
 623              	.L20:
 517:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   }
 518:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   else
 519:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   {
 520:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 624              		.loc 1 520 0
 625 007c FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccgQTKgw.s 			page 21


 626 007e 1B68     		ldr	r3, [r3]
 627 0080 9B68     		ldr	r3, [r3, #8]
 628 0082 03F04003 		and	r3, r3, #64
 629 0086 002B     		cmp	r3, #0
 630 0088 07D0     		beq	.L23
 521:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     {
 522:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       tmpreg = RTC_Bcd2ToByte(sTime->Hours);
 631              		.loc 1 522 0
 632 008a BB68     		ldr	r3, [r7, #8]
 633 008c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 634 008e 1846     		mov	r0, r3
 635 0090 FFF7FEFF 		bl	RTC_Bcd2ToByte
 636 0094 0346     		mov	r3, r0
 637 0096 7B61     		str	r3, [r7, #20]
 638 0098 02E0     		b	.L24
 639              	.L23:
 523:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
 524:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat)); 
 525:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     } 
 526:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     else
 527:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     {
 528:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       sTime->TimeFormat = 0x00U;
 640              		.loc 1 528 0
 641 009a BB68     		ldr	r3, [r7, #8]
 642 009c 0022     		movs	r2, #0
 643 009e DA70     		strb	r2, [r3, #3]
 644              	.L24:
 529:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 530:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     }
 531:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 532:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 533:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 645              		.loc 1 533 0
 646 00a0 BB68     		ldr	r3, [r7, #8]
 647 00a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 648 00a4 1A04     		lsls	r2, r3, #16
 534:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t)(sTime->Minutes) << 8U) | \
 649              		.loc 1 534 0
 650 00a6 BB68     		ldr	r3, [r7, #8]
 651 00a8 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 652 00aa 1B02     		lsls	r3, r3, #8
 533:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t)(sTime->Minutes) << 8U) | \
 653              		.loc 1 533 0
 654 00ac 1343     		orrs	r3, r3, r2
 535:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t)sTime->Seconds) | \
 655              		.loc 1 535 0
 656 00ae BA68     		ldr	r2, [r7, #8]
 657 00b0 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 534:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t)(sTime->Minutes) << 8U) | \
 658              		.loc 1 534 0
 659 00b2 1A43     		orrs	r2, r2, r3
 536:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t)(sTime->TimeFormat) << 16U));   
 660              		.loc 1 536 0
 661 00b4 BB68     		ldr	r3, [r7, #8]
 662 00b6 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 663 00b8 1B04     		lsls	r3, r3, #16
 533:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t)(sTime->Minutes) << 8U) | \
ARM GAS  /tmp/ccgQTKgw.s 			page 22


 664              		.loc 1 533 0
 665 00ba 1343     		orrs	r3, r3, r2
 666 00bc 7B61     		str	r3, [r7, #20]
 667              	.L22:
 537:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   }
 538:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
 539:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
 540:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 668              		.loc 1 540 0
 669 00be FB68     		ldr	r3, [r7, #12]
 670 00c0 1B68     		ldr	r3, [r3]
 671 00c2 CA22     		movs	r2, #202
 672 00c4 5A62     		str	r2, [r3, #36]
 673 00c6 FB68     		ldr	r3, [r7, #12]
 674 00c8 1B68     		ldr	r3, [r3]
 675 00ca 5322     		movs	r2, #83
 676 00cc 5A62     		str	r2, [r3, #36]
 541:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
 542:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Set Initialization mode */
 543:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   if(RTC_EnterInitMode(hrtc) != HAL_OK)
 677              		.loc 1 543 0
 678 00ce F868     		ldr	r0, [r7, #12]
 679 00d0 FFF7FEFF 		bl	RTC_EnterInitMode
 680 00d4 0346     		mov	r3, r0
 681 00d6 002B     		cmp	r3, #0
 682 00d8 0BD0     		beq	.L25
 544:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   {
 545:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 546:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 683              		.loc 1 546 0
 684 00da FB68     		ldr	r3, [r7, #12]
 685 00dc 1B68     		ldr	r3, [r3]
 686 00de FF22     		movs	r2, #255
 687 00e0 5A62     		str	r2, [r3, #36]
 547:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
 548:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Set RTC state */
 549:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_ERROR;
 688              		.loc 1 549 0
 689 00e2 FB68     		ldr	r3, [r7, #12]
 690 00e4 0422     		movs	r2, #4
 691 00e6 5A77     		strb	r2, [r3, #29]
 550:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
 551:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Process Unlocked */ 
 552:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     __HAL_UNLOCK(hrtc);
 692              		.loc 1 552 0
 693 00e8 FB68     		ldr	r3, [r7, #12]
 694 00ea 0022     		movs	r2, #0
 695 00ec 1A77     		strb	r2, [r3, #28]
 553:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
 554:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     return HAL_ERROR;
 696              		.loc 1 554 0
 697 00ee 0123     		movs	r3, #1
 698 00f0 47E0     		b	.L19
 699              	.L25:
 555:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   } 
 556:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   else
 557:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   {
ARM GAS  /tmp/ccgQTKgw.s 			page 23


 558:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Set the RTC_TR register */
 559:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 700              		.loc 1 559 0
 701 00f2 FB68     		ldr	r3, [r7, #12]
 702 00f4 1A68     		ldr	r2, [r3]
 703 00f6 7B69     		ldr	r3, [r7, #20]
 704 00f8 03F07F33 		and	r3, r3, #2139062143
 705 00fc 23F0FE43 		bic	r3, r3, #2130706432
 706 0100 1360     		str	r3, [r2]
 560:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****      
 561:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Clear the bits to be configured */
 562:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 707              		.loc 1 562 0
 708 0102 FB68     		ldr	r3, [r7, #12]
 709 0104 1B68     		ldr	r3, [r3]
 710 0106 FA68     		ldr	r2, [r7, #12]
 711 0108 1268     		ldr	r2, [r2]
 712 010a 9268     		ldr	r2, [r2, #8]
 713 010c 22F48022 		bic	r2, r2, #262144
 714 0110 9A60     		str	r2, [r3, #8]
 563:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
 564:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Configure the RTC_CR register */
 565:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 715              		.loc 1 565 0
 716 0112 FB68     		ldr	r3, [r7, #12]
 717 0114 1B68     		ldr	r3, [r3]
 718 0116 FA68     		ldr	r2, [r7, #12]
 719 0118 1268     		ldr	r2, [r2]
 720 011a 9168     		ldr	r1, [r2, #8]
 721 011c BA68     		ldr	r2, [r7, #8]
 722 011e D068     		ldr	r0, [r2, #12]
 723 0120 BA68     		ldr	r2, [r7, #8]
 724 0122 1269     		ldr	r2, [r2, #16]
 725 0124 0243     		orrs	r2, r2, r0
 726 0126 0A43     		orrs	r2, r2, r1
 727 0128 9A60     		str	r2, [r3, #8]
 566:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
 567:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Exit Initialization mode */
 568:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 728              		.loc 1 568 0
 729 012a FB68     		ldr	r3, [r7, #12]
 730 012c 1B68     		ldr	r3, [r3]
 731 012e FA68     		ldr	r2, [r7, #12]
 732 0130 1268     		ldr	r2, [r2]
 733 0132 D268     		ldr	r2, [r2, #12]
 734 0134 22F08002 		bic	r2, r2, #128
 735 0138 DA60     		str	r2, [r3, #12]
 569:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
 570:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
 571:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 736              		.loc 1 571 0
 737 013a FB68     		ldr	r3, [r7, #12]
 738 013c 1B68     		ldr	r3, [r3]
 739 013e 9B68     		ldr	r3, [r3, #8]
 740 0140 03F02003 		and	r3, r3, #32
 741 0144 002B     		cmp	r3, #0
 742 0146 11D1     		bne	.L26
ARM GAS  /tmp/ccgQTKgw.s 			page 24


 572:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     {
 573:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 743              		.loc 1 573 0
 744 0148 F868     		ldr	r0, [r7, #12]
 745 014a FFF7FEFF 		bl	HAL_RTC_WaitForSynchro
 746 014e 0346     		mov	r3, r0
 747 0150 002B     		cmp	r3, #0
 748 0152 0BD0     		beq	.L26
 574:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       {        
 575:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
 576:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 749              		.loc 1 576 0
 750 0154 FB68     		ldr	r3, [r7, #12]
 751 0156 1B68     		ldr	r3, [r3]
 752 0158 FF22     		movs	r2, #255
 753 015a 5A62     		str	r2, [r3, #36]
 577:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         
 578:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_ERROR;
 754              		.loc 1 578 0
 755 015c FB68     		ldr	r3, [r7, #12]
 756 015e 0422     		movs	r2, #4
 757 0160 5A77     		strb	r2, [r3, #29]
 579:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         
 580:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         /* Process Unlocked */ 
 581:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 758              		.loc 1 581 0
 759 0162 FB68     		ldr	r3, [r7, #12]
 760 0164 0022     		movs	r2, #0
 761 0166 1A77     		strb	r2, [r3, #28]
 582:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         
 583:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         return HAL_ERROR;
 762              		.loc 1 583 0
 763 0168 0123     		movs	r3, #1
 764 016a 0AE0     		b	.L19
 765              	.L26:
 584:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       }
 585:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     }
 586:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
 587:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 588:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 766              		.loc 1 588 0
 767 016c FB68     		ldr	r3, [r7, #12]
 768 016e 1B68     		ldr	r3, [r3]
 769 0170 FF22     		movs	r2, #255
 770 0172 5A62     		str	r2, [r3, #36]
 589:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
 590:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****    hrtc->State = HAL_RTC_STATE_READY;
 771              		.loc 1 590 0
 772 0174 FB68     		ldr	r3, [r7, #12]
 773 0176 0122     		movs	r2, #1
 774 0178 5A77     		strb	r2, [r3, #29]
 591:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
 592:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****    __HAL_UNLOCK(hrtc); 
 775              		.loc 1 592 0
 776 017a FB68     		ldr	r3, [r7, #12]
 777 017c 0022     		movs	r2, #0
 778 017e 1A77     		strb	r2, [r3, #28]
ARM GAS  /tmp/ccgQTKgw.s 			page 25


 593:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****      
 594:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****    return HAL_OK;
 779              		.loc 1 594 0
 780 0180 0023     		movs	r3, #0
 781              	.L19:
 595:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   }
 596:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** }
 782              		.loc 1 596 0
 783 0182 1846     		mov	r0, r3
 784 0184 1C37     		adds	r7, r7, #28
 785              	.LCFI25:
 786              		.cfi_def_cfa_offset 12
 787 0186 BD46     		mov	sp, r7
 788              	.LCFI26:
 789              		.cfi_def_cfa_register 13
 790              		@ sp needed
 791 0188 90BD     		pop	{r4, r7, pc}
 792              		.cfi_endproc
 793              	.LFE127:
 795 018a 00BF     		.section	.text.HAL_RTC_GetTime,"ax",%progbits
 796              		.align	2
 797              		.global	HAL_RTC_GetTime
 798              		.thumb
 799              		.thumb_func
 801              	HAL_RTC_GetTime:
 802              	.LFB128:
 597:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
 598:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** /**
 599:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @brief  Get RTC current time.
 600:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @param  hrtc RTC handle
 601:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @param  sTime Pointer to Time structure
 602:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
 603:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 604:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN: Binary data format 
 605:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD: BCD data format
 606:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @note  You can use SubSeconds and SecondFraction (sTime structure fields returned) to convert S
 607:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *        value in second fraction ratio with time unit following generic formula:
 608:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *        Second fraction ratio * time_unit= [(SecondFraction-SubSeconds)/(SecondFraction+1)] * ti
 609:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *        This conversion can be performed only if no shift operation is pending (ie. SHFP=0) when
 610:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @note   Call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values 
 611:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *         in the higher-order calendar shadow registers.
 612:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @retval HAL status
 613:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   */
 614:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
 615:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** {
 803              		.loc 1 615 0
 804              		.cfi_startproc
 805              		@ args = 0, pretend = 0, frame = 24
 806              		@ frame_needed = 1, uses_anonymous_args = 0
 807 0000 80B5     		push	{r7, lr}
 808              	.LCFI27:
 809              		.cfi_def_cfa_offset 8
 810              		.cfi_offset 7, -8
 811              		.cfi_offset 14, -4
 812 0002 86B0     		sub	sp, sp, #24
 813              	.LCFI28:
 814              		.cfi_def_cfa_offset 32
ARM GAS  /tmp/ccgQTKgw.s 			page 26


 815 0004 00AF     		add	r7, sp, #0
 816              	.LCFI29:
 817              		.cfi_def_cfa_register 7
 818 0006 F860     		str	r0, [r7, #12]
 819 0008 B960     		str	r1, [r7, #8]
 820 000a 7A60     		str	r2, [r7, #4]
 616:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   uint32_t tmpreg = 0U;
 821              		.loc 1 616 0
 822 000c 0023     		movs	r3, #0
 823 000e 7B61     		str	r3, [r7, #20]
 617:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
 618:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Check the parameters */
 619:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 620:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
 621:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Get subseconds structure field from the corresponding register*/
 622:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 824              		.loc 1 622 0
 825 0010 FB68     		ldr	r3, [r7, #12]
 826 0012 1B68     		ldr	r3, [r3]
 827 0014 9A6A     		ldr	r2, [r3, #40]
 828 0016 BB68     		ldr	r3, [r7, #8]
 829 0018 5A60     		str	r2, [r3, #4]
 623:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
 624:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Get SecondFraction structure field from the corresponding register field*/
 625:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 830              		.loc 1 625 0
 831 001a FB68     		ldr	r3, [r7, #12]
 832 001c 1B68     		ldr	r3, [r3]
 833 001e 1B69     		ldr	r3, [r3, #16]
 834 0020 C3F30E02 		ubfx	r2, r3, #0, #15
 835 0024 BB68     		ldr	r3, [r7, #8]
 836 0026 9A60     		str	r2, [r3, #8]
 626:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
 627:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Get the TR register */
 628:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 837              		.loc 1 628 0
 838 0028 FB68     		ldr	r3, [r7, #12]
 839 002a 1B68     		ldr	r3, [r3]
 840 002c 1B68     		ldr	r3, [r3]
 841 002e 03F07F33 		and	r3, r3, #2139062143
 842 0032 23F0FE43 		bic	r3, r3, #2130706432
 843 0036 7B61     		str	r3, [r7, #20]
 629:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
 630:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Fill the structure fields with the read parameters */
 631:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 844              		.loc 1 631 0
 845 0038 7B69     		ldr	r3, [r7, #20]
 846 003a 03F47C13 		and	r3, r3, #4128768
 847 003e 1B0C     		lsrs	r3, r3, #16
 848 0040 DAB2     		uxtb	r2, r3
 849 0042 BB68     		ldr	r3, [r7, #8]
 850 0044 1A70     		strb	r2, [r3]
 632:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 851              		.loc 1 632 0
 852 0046 7B69     		ldr	r3, [r7, #20]
 853 0048 03F4FE43 		and	r3, r3, #32512
 854 004c 1B0A     		lsrs	r3, r3, #8
ARM GAS  /tmp/ccgQTKgw.s 			page 27


 855 004e DAB2     		uxtb	r2, r3
 856 0050 BB68     		ldr	r3, [r7, #8]
 857 0052 5A70     		strb	r2, [r3, #1]
 633:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 858              		.loc 1 633 0
 859 0054 7B69     		ldr	r3, [r7, #20]
 860 0056 DBB2     		uxtb	r3, r3
 861 0058 03F07F03 		and	r3, r3, #127
 862 005c DAB2     		uxtb	r2, r3
 863 005e BB68     		ldr	r3, [r7, #8]
 864 0060 9A70     		strb	r2, [r3, #2]
 634:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 865              		.loc 1 634 0
 866 0062 7B69     		ldr	r3, [r7, #20]
 867 0064 03F48003 		and	r3, r3, #4194304
 868 0068 1B0C     		lsrs	r3, r3, #16
 869 006a DAB2     		uxtb	r2, r3
 870 006c BB68     		ldr	r3, [r7, #8]
 871 006e DA70     		strb	r2, [r3, #3]
 635:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
 636:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Check the input parameters format */
 637:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 872              		.loc 1 637 0
 873 0070 7B68     		ldr	r3, [r7, #4]
 874 0072 002B     		cmp	r3, #0
 875 0074 1AD1     		bne	.L28
 638:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   {
 639:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Convert the time structure parameters to Binary format */
 640:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 876              		.loc 1 640 0
 877 0076 BB68     		ldr	r3, [r7, #8]
 878 0078 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 879 007a 1846     		mov	r0, r3
 880 007c FFF7FEFF 		bl	RTC_Bcd2ToByte
 881 0080 0346     		mov	r3, r0
 882 0082 1A46     		mov	r2, r3
 883 0084 BB68     		ldr	r3, [r7, #8]
 884 0086 1A70     		strb	r2, [r3]
 641:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 885              		.loc 1 641 0
 886 0088 BB68     		ldr	r3, [r7, #8]
 887 008a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 888 008c 1846     		mov	r0, r3
 889 008e FFF7FEFF 		bl	RTC_Bcd2ToByte
 890 0092 0346     		mov	r3, r0
 891 0094 1A46     		mov	r2, r3
 892 0096 BB68     		ldr	r3, [r7, #8]
 893 0098 5A70     		strb	r2, [r3, #1]
 642:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 894              		.loc 1 642 0
 895 009a BB68     		ldr	r3, [r7, #8]
 896 009c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 897 009e 1846     		mov	r0, r3
 898 00a0 FFF7FEFF 		bl	RTC_Bcd2ToByte
 899 00a4 0346     		mov	r3, r0
 900 00a6 1A46     		mov	r2, r3
 901 00a8 BB68     		ldr	r3, [r7, #8]
ARM GAS  /tmp/ccgQTKgw.s 			page 28


 902 00aa 9A70     		strb	r2, [r3, #2]
 903              	.L28:
 643:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   }
 644:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
 645:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   return HAL_OK;
 904              		.loc 1 645 0
 905 00ac 0023     		movs	r3, #0
 646:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** }
 906              		.loc 1 646 0
 907 00ae 1846     		mov	r0, r3
 908 00b0 1837     		adds	r7, r7, #24
 909              	.LCFI30:
 910              		.cfi_def_cfa_offset 8
 911 00b2 BD46     		mov	sp, r7
 912              	.LCFI31:
 913              		.cfi_def_cfa_register 13
 914              		@ sp needed
 915 00b4 80BD     		pop	{r7, pc}
 916              		.cfi_endproc
 917              	.LFE128:
 919 00b6 00BF     		.section	.text.HAL_RTC_SetDate,"ax",%progbits
 920              		.align	2
 921              		.global	HAL_RTC_SetDate
 922              		.thumb
 923              		.thumb_func
 925              	HAL_RTC_SetDate:
 926              	.LFB129:
 647:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
 648:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** /**
 649:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @brief  Set RTC current date.
 650:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @param  hrtc RTC handle
 651:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @param  sDate Pointer to date structure
 652:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @param  Format specifies the format of the entered parameters.
 653:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 654:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN: Binary data format 
 655:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD: BCD data format
 656:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @retval HAL status
 657:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   */
 658:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
 659:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** {
 927              		.loc 1 659 0
 928              		.cfi_startproc
 929              		@ args = 0, pretend = 0, frame = 24
 930              		@ frame_needed = 1, uses_anonymous_args = 0
 931 0000 90B5     		push	{r4, r7, lr}
 932              	.LCFI32:
 933              		.cfi_def_cfa_offset 12
 934              		.cfi_offset 4, -12
 935              		.cfi_offset 7, -8
 936              		.cfi_offset 14, -4
 937 0002 87B0     		sub	sp, sp, #28
 938              	.LCFI33:
 939              		.cfi_def_cfa_offset 40
 940 0004 00AF     		add	r7, sp, #0
 941              	.LCFI34:
 942              		.cfi_def_cfa_register 7
 943 0006 F860     		str	r0, [r7, #12]
ARM GAS  /tmp/ccgQTKgw.s 			page 29


 944 0008 B960     		str	r1, [r7, #8]
 945 000a 7A60     		str	r2, [r7, #4]
 660:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   uint32_t datetmpreg = 0U;
 946              		.loc 1 660 0
 947 000c 0023     		movs	r3, #0
 948 000e 7B61     		str	r3, [r7, #20]
 661:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
 662:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****  /* Check the parameters */
 663:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 664:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
 665:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****  /* Process Locked */ 
 666:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****  __HAL_LOCK(hrtc);
 949              		.loc 1 666 0
 950 0010 FB68     		ldr	r3, [r7, #12]
 951 0012 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 952 0014 012B     		cmp	r3, #1
 953 0016 01D1     		bne	.L31
 954              		.loc 1 666 0 is_stmt 0 discriminator 1
 955 0018 0223     		movs	r3, #2
 956 001a A2E0     		b	.L32
 957              	.L31:
 958              		.loc 1 666 0 discriminator 2
 959 001c FB68     		ldr	r3, [r7, #12]
 960 001e 0122     		movs	r2, #1
 961 0020 1A77     		strb	r2, [r3, #28]
 667:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
 668:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY; 
 962              		.loc 1 668 0 is_stmt 1 discriminator 2
 963 0022 FB68     		ldr	r3, [r7, #12]
 964 0024 0222     		movs	r2, #2
 965 0026 5A77     		strb	r2, [r3, #29]
 669:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
 670:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 966              		.loc 1 670 0 discriminator 2
 967 0028 7B68     		ldr	r3, [r7, #4]
 968 002a 002B     		cmp	r3, #0
 969 002c 0ED1     		bne	.L33
 970              		.loc 1 670 0 is_stmt 0 discriminator 1
 971 002e BB68     		ldr	r3, [r7, #8]
 972 0030 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 973 0032 03F01003 		and	r3, r3, #16
 974 0036 002B     		cmp	r3, #0
 975 0038 08D0     		beq	.L33
 671:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   {
 672:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 976              		.loc 1 672 0 is_stmt 1
 977 003a BB68     		ldr	r3, [r7, #8]
 978 003c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 979 003e 23F01003 		bic	r3, r3, #16
 980 0042 DBB2     		uxtb	r3, r3
 981 0044 0A33     		adds	r3, r3, #10
 982 0046 DAB2     		uxtb	r2, r3
 983 0048 BB68     		ldr	r3, [r7, #8]
 984 004a 5A70     		strb	r2, [r3, #1]
 985              	.L33:
 673:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   }
 674:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
ARM GAS  /tmp/ccgQTKgw.s 			page 30


 675:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 676:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
 677:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 986              		.loc 1 677 0
 987 004c 7B68     		ldr	r3, [r7, #4]
 988 004e 002B     		cmp	r3, #0
 989 0050 1CD1     		bne	.L34
 678:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   {   
 679:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     assert_param(IS_RTC_YEAR(sDate->Year));
 680:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     assert_param(IS_RTC_MONTH(sDate->Month));
 681:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     assert_param(IS_RTC_DATE(sDate->Date)); 
 682:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
 683:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 990              		.loc 1 683 0
 991 0052 BB68     		ldr	r3, [r7, #8]
 992 0054 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 993 0056 1846     		mov	r0, r3
 994 0058 FFF7FEFF 		bl	RTC_ByteToBcd2
 995 005c 0346     		mov	r3, r0
 996 005e 1C04     		lsls	r4, r3, #16
 684:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 997              		.loc 1 684 0
 998 0060 BB68     		ldr	r3, [r7, #8]
 999 0062 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1000 0064 1846     		mov	r0, r3
 1001 0066 FFF7FEFF 		bl	RTC_ByteToBcd2
 1002 006a 0346     		mov	r3, r0
 1003 006c 1B02     		lsls	r3, r3, #8
 683:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 1004              		.loc 1 683 0
 1005 006e 1C43     		orrs	r4, r4, r3
 685:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 1006              		.loc 1 685 0
 1007 0070 BB68     		ldr	r3, [r7, #8]
 1008 0072 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1009 0074 1846     		mov	r0, r3
 1010 0076 FFF7FEFF 		bl	RTC_ByteToBcd2
 1011 007a 0346     		mov	r3, r0
 684:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 1012              		.loc 1 684 0
 1013 007c 44EA0302 		orr	r2, r4, r3
 686:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****                  ((uint32_t)sDate->WeekDay << 13U));   
 1014              		.loc 1 686 0
 1015 0080 BB68     		ldr	r3, [r7, #8]
 1016 0082 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1017 0084 5B03     		lsls	r3, r3, #13
 683:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 1018              		.loc 1 683 0
 1019 0086 1343     		orrs	r3, r3, r2
 1020 0088 7B61     		str	r3, [r7, #20]
 1021 008a 1CE0     		b	.L35
 1022              	.L34:
 687:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   }
 688:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   else
 689:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   {   
 690:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 691:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     datetmpreg = RTC_Bcd2ToByte(sDate->Month);
ARM GAS  /tmp/ccgQTKgw.s 			page 31


 1023              		.loc 1 691 0
 1024 008c BB68     		ldr	r3, [r7, #8]
 1025 008e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1026 0090 1846     		mov	r0, r3
 1027 0092 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1028 0096 0346     		mov	r3, r0
 1029 0098 7B61     		str	r3, [r7, #20]
 692:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     assert_param(IS_RTC_MONTH(datetmpreg));
 693:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     datetmpreg = RTC_Bcd2ToByte(sDate->Date);
 1030              		.loc 1 693 0
 1031 009a BB68     		ldr	r3, [r7, #8]
 1032 009c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1033 009e 1846     		mov	r0, r3
 1034 00a0 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1035 00a4 0346     		mov	r3, r0
 1036 00a6 7B61     		str	r3, [r7, #20]
 694:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     assert_param(IS_RTC_DATE(datetmpreg));
 695:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
 696:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 1037              		.loc 1 696 0
 1038 00a8 BB68     		ldr	r3, [r7, #8]
 1039 00aa DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1040 00ac 1A04     		lsls	r2, r3, #16
 697:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****                   (((uint32_t)sDate->Month) << 8U) | \
 1041              		.loc 1 697 0
 1042 00ae BB68     		ldr	r3, [r7, #8]
 1043 00b0 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1044 00b2 1B02     		lsls	r3, r3, #8
 696:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****                   (((uint32_t)sDate->Month) << 8U) | \
 1045              		.loc 1 696 0
 1046 00b4 1343     		orrs	r3, r3, r2
 698:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****                   ((uint32_t)sDate->Date) | \
 1047              		.loc 1 698 0
 1048 00b6 BA68     		ldr	r2, [r7, #8]
 1049 00b8 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 697:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****                   (((uint32_t)sDate->Month) << 8U) | \
 1050              		.loc 1 697 0
 1051 00ba 1A43     		orrs	r2, r2, r3
 699:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****                   (((uint32_t)sDate->WeekDay) << 13U));  
 1052              		.loc 1 699 0
 1053 00bc BB68     		ldr	r3, [r7, #8]
 1054 00be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1055 00c0 5B03     		lsls	r3, r3, #13
 696:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****                   (((uint32_t)sDate->Month) << 8U) | \
 1056              		.loc 1 696 0
 1057 00c2 1343     		orrs	r3, r3, r2
 1058 00c4 7B61     		str	r3, [r7, #20]
 1059              	.L35:
 700:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   }
 701:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
 702:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
 703:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 1060              		.loc 1 703 0
 1061 00c6 FB68     		ldr	r3, [r7, #12]
 1062 00c8 1B68     		ldr	r3, [r3]
 1063 00ca CA22     		movs	r2, #202
 1064 00cc 5A62     		str	r2, [r3, #36]
ARM GAS  /tmp/ccgQTKgw.s 			page 32


 1065 00ce FB68     		ldr	r3, [r7, #12]
 1066 00d0 1B68     		ldr	r3, [r3]
 1067 00d2 5322     		movs	r2, #83
 1068 00d4 5A62     		str	r2, [r3, #36]
 704:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
 705:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Set Initialization mode */
 706:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   if(RTC_EnterInitMode(hrtc) != HAL_OK)
 1069              		.loc 1 706 0
 1070 00d6 F868     		ldr	r0, [r7, #12]
 1071 00d8 FFF7FEFF 		bl	RTC_EnterInitMode
 1072 00dc 0346     		mov	r3, r0
 1073 00de 002B     		cmp	r3, #0
 1074 00e0 0BD0     		beq	.L36
 707:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   {
 708:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 709:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 1075              		.loc 1 709 0
 1076 00e2 FB68     		ldr	r3, [r7, #12]
 1077 00e4 1B68     		ldr	r3, [r3]
 1078 00e6 FF22     		movs	r2, #255
 1079 00e8 5A62     		str	r2, [r3, #36]
 710:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
 711:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Set RTC state*/
 712:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_ERROR;
 1080              		.loc 1 712 0
 1081 00ea FB68     		ldr	r3, [r7, #12]
 1082 00ec 0422     		movs	r2, #4
 1083 00ee 5A77     		strb	r2, [r3, #29]
 713:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
 714:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Process Unlocked */ 
 715:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     __HAL_UNLOCK(hrtc);
 1084              		.loc 1 715 0
 1085 00f0 FB68     		ldr	r3, [r7, #12]
 1086 00f2 0022     		movs	r2, #0
 1087 00f4 1A77     		strb	r2, [r3, #28]
 716:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
 717:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     return HAL_ERROR;
 1088              		.loc 1 717 0
 1089 00f6 0123     		movs	r3, #1
 1090 00f8 33E0     		b	.L32
 1091              	.L36:
 718:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   } 
 719:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   else
 720:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   {
 721:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Set the RTC_DR register */
 722:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 1092              		.loc 1 722 0
 1093 00fa FB68     		ldr	r3, [r7, #12]
 1094 00fc 1A68     		ldr	r2, [r3]
 1095 00fe 7B69     		ldr	r3, [r7, #20]
 1096 0100 23F07F43 		bic	r3, r3, #-16777216
 1097 0104 23F0C003 		bic	r3, r3, #192
 1098 0108 5360     		str	r3, [r2, #4]
 723:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
 724:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Exit Initialization mode */
 725:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 1099              		.loc 1 725 0
ARM GAS  /tmp/ccgQTKgw.s 			page 33


 1100 010a FB68     		ldr	r3, [r7, #12]
 1101 010c 1B68     		ldr	r3, [r3]
 1102 010e FA68     		ldr	r2, [r7, #12]
 1103 0110 1268     		ldr	r2, [r2]
 1104 0112 D268     		ldr	r2, [r2, #12]
 1105 0114 22F08002 		bic	r2, r2, #128
 1106 0118 DA60     		str	r2, [r3, #12]
 726:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
 727:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
 728:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 1107              		.loc 1 728 0
 1108 011a FB68     		ldr	r3, [r7, #12]
 1109 011c 1B68     		ldr	r3, [r3]
 1110 011e 9B68     		ldr	r3, [r3, #8]
 1111 0120 03F02003 		and	r3, r3, #32
 1112 0124 002B     		cmp	r3, #0
 1113 0126 11D1     		bne	.L37
 729:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     {
 730:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 1114              		.loc 1 730 0
 1115 0128 F868     		ldr	r0, [r7, #12]
 1116 012a FFF7FEFF 		bl	HAL_RTC_WaitForSynchro
 1117 012e 0346     		mov	r3, r0
 1118 0130 002B     		cmp	r3, #0
 1119 0132 0BD0     		beq	.L37
 731:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       { 
 732:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
 733:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 1120              		.loc 1 733 0
 1121 0134 FB68     		ldr	r3, [r7, #12]
 1122 0136 1B68     		ldr	r3, [r3]
 1123 0138 FF22     		movs	r2, #255
 1124 013a 5A62     		str	r2, [r3, #36]
 734:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         
 735:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_ERROR;
 1125              		.loc 1 735 0
 1126 013c FB68     		ldr	r3, [r7, #12]
 1127 013e 0422     		movs	r2, #4
 1128 0140 5A77     		strb	r2, [r3, #29]
 736:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         
 737:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         /* Process Unlocked */ 
 738:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 1129              		.loc 1 738 0
 1130 0142 FB68     		ldr	r3, [r7, #12]
 1131 0144 0022     		movs	r2, #0
 1132 0146 1A77     		strb	r2, [r3, #28]
 739:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         
 740:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         return HAL_ERROR;
 1133              		.loc 1 740 0
 1134 0148 0123     		movs	r3, #1
 1135 014a 0AE0     		b	.L32
 1136              	.L37:
 741:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       }
 742:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     }
 743:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
 744:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 745:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
ARM GAS  /tmp/ccgQTKgw.s 			page 34


 1137              		.loc 1 745 0
 1138 014c FB68     		ldr	r3, [r7, #12]
 1139 014e 1B68     		ldr	r3, [r3]
 1140 0150 FF22     		movs	r2, #255
 1141 0152 5A62     		str	r2, [r3, #36]
 746:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
 747:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_READY ;
 1142              		.loc 1 747 0
 1143 0154 FB68     		ldr	r3, [r7, #12]
 1144 0156 0122     		movs	r2, #1
 1145 0158 5A77     		strb	r2, [r3, #29]
 748:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
 749:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Process Unlocked */ 
 750:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     __HAL_UNLOCK(hrtc);
 1146              		.loc 1 750 0
 1147 015a FB68     		ldr	r3, [r7, #12]
 1148 015c 0022     		movs	r2, #0
 1149 015e 1A77     		strb	r2, [r3, #28]
 751:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
 752:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     return HAL_OK;    
 1150              		.loc 1 752 0
 1151 0160 0023     		movs	r3, #0
 1152              	.L32:
 753:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   }
 754:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** }
 1153              		.loc 1 754 0
 1154 0162 1846     		mov	r0, r3
 1155 0164 1C37     		adds	r7, r7, #28
 1156              	.LCFI35:
 1157              		.cfi_def_cfa_offset 12
 1158 0166 BD46     		mov	sp, r7
 1159              	.LCFI36:
 1160              		.cfi_def_cfa_register 13
 1161              		@ sp needed
 1162 0168 90BD     		pop	{r4, r7, pc}
 1163              		.cfi_endproc
 1164              	.LFE129:
 1166 016a 00BF     		.section	.text.HAL_RTC_GetDate,"ax",%progbits
 1167              		.align	2
 1168              		.global	HAL_RTC_GetDate
 1169              		.thumb
 1170              		.thumb_func
 1172              	HAL_RTC_GetDate:
 1173              	.LFB130:
 755:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
 756:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** /**
 757:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @brief  Get RTC current date.
 758:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @param  hrtc RTC handle
 759:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @param  sDate Pointer to Date structure
 760:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
 761:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 762:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN :  Binary data format 
 763:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD :  BCD data format
 764:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @retval HAL status
 765:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   */
 766:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
 767:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** {
ARM GAS  /tmp/ccgQTKgw.s 			page 35


 1174              		.loc 1 767 0
 1175              		.cfi_startproc
 1176              		@ args = 0, pretend = 0, frame = 24
 1177              		@ frame_needed = 1, uses_anonymous_args = 0
 1178 0000 80B5     		push	{r7, lr}
 1179              	.LCFI37:
 1180              		.cfi_def_cfa_offset 8
 1181              		.cfi_offset 7, -8
 1182              		.cfi_offset 14, -4
 1183 0002 86B0     		sub	sp, sp, #24
 1184              	.LCFI38:
 1185              		.cfi_def_cfa_offset 32
 1186 0004 00AF     		add	r7, sp, #0
 1187              	.LCFI39:
 1188              		.cfi_def_cfa_register 7
 1189 0006 F860     		str	r0, [r7, #12]
 1190 0008 B960     		str	r1, [r7, #8]
 1191 000a 7A60     		str	r2, [r7, #4]
 768:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   uint32_t datetmpreg = 0U;
 1192              		.loc 1 768 0
 1193 000c 0023     		movs	r3, #0
 1194 000e 7B61     		str	r3, [r7, #20]
 769:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
 770:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Check the parameters */
 771:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 772:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****           
 773:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Get the DR register */
 774:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 1195              		.loc 1 774 0
 1196 0010 FB68     		ldr	r3, [r7, #12]
 1197 0012 1B68     		ldr	r3, [r3]
 1198 0014 5B68     		ldr	r3, [r3, #4]
 1199 0016 23F07F43 		bic	r3, r3, #-16777216
 1200 001a 23F0C003 		bic	r3, r3, #192
 1201 001e 7B61     		str	r3, [r7, #20]
 775:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
 776:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Fill the structure fields with the read parameters */
 777:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 1202              		.loc 1 777 0
 1203 0020 7B69     		ldr	r3, [r7, #20]
 1204 0022 03F47F03 		and	r3, r3, #16711680
 1205 0026 1B0C     		lsrs	r3, r3, #16
 1206 0028 DAB2     		uxtb	r2, r3
 1207 002a BB68     		ldr	r3, [r7, #8]
 1208 002c DA70     		strb	r2, [r3, #3]
 778:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 1209              		.loc 1 778 0
 1210 002e 7B69     		ldr	r3, [r7, #20]
 1211 0030 03F4F853 		and	r3, r3, #7936
 1212 0034 1B0A     		lsrs	r3, r3, #8
 1213 0036 DAB2     		uxtb	r2, r3
 1214 0038 BB68     		ldr	r3, [r7, #8]
 1215 003a 5A70     		strb	r2, [r3, #1]
 779:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 1216              		.loc 1 779 0
 1217 003c 7B69     		ldr	r3, [r7, #20]
 1218 003e DBB2     		uxtb	r3, r3
ARM GAS  /tmp/ccgQTKgw.s 			page 36


 1219 0040 03F03F03 		and	r3, r3, #63
 1220 0044 DAB2     		uxtb	r2, r3
 1221 0046 BB68     		ldr	r3, [r7, #8]
 1222 0048 9A70     		strb	r2, [r3, #2]
 780:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 1223              		.loc 1 780 0
 1224 004a 7B69     		ldr	r3, [r7, #20]
 1225 004c 03F46043 		and	r3, r3, #57344
 1226 0050 5B0B     		lsrs	r3, r3, #13
 1227 0052 DAB2     		uxtb	r2, r3
 1228 0054 BB68     		ldr	r3, [r7, #8]
 1229 0056 1A70     		strb	r2, [r3]
 781:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
 782:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Check the input parameters format */
 783:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 1230              		.loc 1 783 0
 1231 0058 7B68     		ldr	r3, [r7, #4]
 1232 005a 002B     		cmp	r3, #0
 1233 005c 1AD1     		bne	.L39
 784:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   {    
 785:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Convert the date structure parameters to Binary format */
 786:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 1234              		.loc 1 786 0
 1235 005e BB68     		ldr	r3, [r7, #8]
 1236 0060 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1237 0062 1846     		mov	r0, r3
 1238 0064 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1239 0068 0346     		mov	r3, r0
 1240 006a 1A46     		mov	r2, r3
 1241 006c BB68     		ldr	r3, [r7, #8]
 1242 006e DA70     		strb	r2, [r3, #3]
 787:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 1243              		.loc 1 787 0
 1244 0070 BB68     		ldr	r3, [r7, #8]
 1245 0072 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1246 0074 1846     		mov	r0, r3
 1247 0076 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1248 007a 0346     		mov	r3, r0
 1249 007c 1A46     		mov	r2, r3
 1250 007e BB68     		ldr	r3, [r7, #8]
 1251 0080 5A70     		strb	r2, [r3, #1]
 788:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 1252              		.loc 1 788 0
 1253 0082 BB68     		ldr	r3, [r7, #8]
 1254 0084 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1255 0086 1846     		mov	r0, r3
 1256 0088 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1257 008c 0346     		mov	r3, r0
 1258 008e 1A46     		mov	r2, r3
 1259 0090 BB68     		ldr	r3, [r7, #8]
 1260 0092 9A70     		strb	r2, [r3, #2]
 1261              	.L39:
 789:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   }
 790:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   return HAL_OK;
 1262              		.loc 1 790 0
 1263 0094 0023     		movs	r3, #0
 791:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** }
ARM GAS  /tmp/ccgQTKgw.s 			page 37


 1264              		.loc 1 791 0
 1265 0096 1846     		mov	r0, r3
 1266 0098 1837     		adds	r7, r7, #24
 1267              	.LCFI40:
 1268              		.cfi_def_cfa_offset 8
 1269 009a BD46     		mov	sp, r7
 1270              	.LCFI41:
 1271              		.cfi_def_cfa_register 13
 1272              		@ sp needed
 1273 009c 80BD     		pop	{r7, pc}
 1274              		.cfi_endproc
 1275              	.LFE130:
 1277 009e 00BF     		.section	.text.HAL_RTC_SetAlarm,"ax",%progbits
 1278              		.align	2
 1279              		.global	HAL_RTC_SetAlarm
 1280              		.thumb
 1281              		.thumb_func
 1283              	HAL_RTC_SetAlarm:
 1284              	.LFB131:
 792:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
 793:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** /**
 794:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @}
 795:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   */
 796:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
 797:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** /** @addtogroup RTC_Exported_Functions_Group3
 798:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****  *  @brief   RTC Alarm functions
 799:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****  *
 800:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** @verbatim   
 801:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****  ===============================================================================
 802:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****                  ##### RTC Alarm functions #####
 803:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****  ===============================================================================  
 804:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****  
 805:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****  [..] This section provides functions allowing to configure Alarm feature
 806:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
 807:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** @endverbatim
 808:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @{
 809:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   */
 810:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** /**
 811:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @brief  Set the specified RTC Alarm.
 812:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @param  hrtc RTC handle
 813:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @param  sAlarm Pointer to Alarm structure
 814:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
 815:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 816:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BIN: Binary data format 
 817:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BCD: BCD data format
 818:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @retval HAL status
 819:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   */
 820:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Form
 821:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** {
 1285              		.loc 1 821 0
 1286              		.cfi_startproc
 1287              		@ args = 0, pretend = 0, frame = 32
 1288              		@ frame_needed = 1, uses_anonymous_args = 0
 1289 0000 90B5     		push	{r4, r7, lr}
 1290              	.LCFI42:
 1291              		.cfi_def_cfa_offset 12
 1292              		.cfi_offset 4, -12
ARM GAS  /tmp/ccgQTKgw.s 			page 38


 1293              		.cfi_offset 7, -8
 1294              		.cfi_offset 14, -4
 1295 0002 89B0     		sub	sp, sp, #36
 1296              	.LCFI43:
 1297              		.cfi_def_cfa_offset 48
 1298 0004 00AF     		add	r7, sp, #0
 1299              	.LCFI44:
 1300              		.cfi_def_cfa_register 7
 1301 0006 F860     		str	r0, [r7, #12]
 1302 0008 B960     		str	r1, [r7, #8]
 1303 000a 7A60     		str	r2, [r7, #4]
 822:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   uint32_t tickstart = 0U;
 1304              		.loc 1 822 0
 1305 000c 0023     		movs	r3, #0
 1306 000e BB61     		str	r3, [r7, #24]
 823:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 1307              		.loc 1 823 0
 1308 0010 0023     		movs	r3, #0
 1309 0012 FB61     		str	r3, [r7, #28]
 1310 0014 0023     		movs	r3, #0
 1311 0016 7B61     		str	r3, [r7, #20]
 824:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
 825:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Check the parameters */
 826:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 827:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(sAlarm->Alarm));
 828:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
 829:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
 830:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
 831:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
 832:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
 833:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Process Locked */ 
 834:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 1312              		.loc 1 834 0
 1313 0018 FB68     		ldr	r3, [r7, #12]
 1314 001a 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 1315 001c 012B     		cmp	r3, #1
 1316 001e 01D1     		bne	.L42
 1317              		.loc 1 834 0 is_stmt 0 discriminator 1
 1318 0020 0223     		movs	r3, #2
 1319 0022 1EE1     		b	.L43
 1320              	.L42:
 1321              		.loc 1 834 0 discriminator 2
 1322 0024 FB68     		ldr	r3, [r7, #12]
 1323 0026 0122     		movs	r2, #1
 1324 0028 1A77     		strb	r2, [r3, #28]
 835:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
 836:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 1325              		.loc 1 836 0 is_stmt 1 discriminator 2
 1326 002a FB68     		ldr	r3, [r7, #12]
 1327 002c 0222     		movs	r2, #2
 1328 002e 5A77     		strb	r2, [r3, #29]
 837:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
 838:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 1329              		.loc 1 838 0 discriminator 2
 1330 0030 7B68     		ldr	r3, [r7, #4]
 1331 0032 002B     		cmp	r3, #0
 1332 0034 37D1     		bne	.L44
ARM GAS  /tmp/ccgQTKgw.s 			page 39


 839:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   {
 840:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1333              		.loc 1 840 0
 1334 0036 FB68     		ldr	r3, [r7, #12]
 1335 0038 1B68     		ldr	r3, [r3]
 1336 003a 9B68     		ldr	r3, [r3, #8]
 1337 003c 03F04003 		and	r3, r3, #64
 1338 0040 002B     		cmp	r3, #0
 1339 0042 02D1     		bne	.L45
 841:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     {
 842:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
 843:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 844:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     } 
 845:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     else
 846:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     {
 847:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00U;
 1340              		.loc 1 847 0
 1341 0044 BB68     		ldr	r3, [r7, #8]
 1342 0046 0022     		movs	r2, #0
 1343 0048 DA70     		strb	r2, [r3, #3]
 1344              	.L45:
 848:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 849:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     }
 850:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
 851:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
 852:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
 853:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 854:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     {
 855:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
 856:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     }
 857:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     else
 858:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     {
 859:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
 860:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     }
 861:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
 862:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 1345              		.loc 1 862 0
 1346 004a BB68     		ldr	r3, [r7, #8]
 1347 004c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1348 004e 1846     		mov	r0, r3
 1349 0050 FFF7FEFF 		bl	RTC_ByteToBcd2
 1350 0054 0346     		mov	r3, r0
 1351 0056 1C04     		lsls	r4, r3, #16
 863:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 1352              		.loc 1 863 0
 1353 0058 BB68     		ldr	r3, [r7, #8]
 1354 005a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1355 005c 1846     		mov	r0, r3
 1356 005e FFF7FEFF 		bl	RTC_ByteToBcd2
 1357 0062 0346     		mov	r3, r0
 1358 0064 1B02     		lsls	r3, r3, #8
 862:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 1359              		.loc 1 862 0
 1360 0066 1C43     		orrs	r4, r4, r3
 864:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 1361              		.loc 1 864 0
 1362 0068 BB68     		ldr	r3, [r7, #8]
ARM GAS  /tmp/ccgQTKgw.s 			page 40


 1363 006a 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1364 006c 1846     		mov	r0, r3
 1365 006e FFF7FEFF 		bl	RTC_ByteToBcd2
 1366 0072 0346     		mov	r3, r0
 863:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 1367              		.loc 1 863 0
 1368 0074 44EA0302 		orr	r2, r4, r3
 865:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 1369              		.loc 1 865 0
 1370 0078 BB68     		ldr	r3, [r7, #8]
 1371 007a DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1372 007c 1B04     		lsls	r3, r3, #16
 864:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 1373              		.loc 1 864 0
 1374 007e 42EA0304 		orr	r4, r2, r3
 866:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 1375              		.loc 1 866 0
 1376 0082 BB68     		ldr	r3, [r7, #8]
 1377 0084 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1378 0088 1846     		mov	r0, r3
 1379 008a FFF7FEFF 		bl	RTC_ByteToBcd2
 1380 008e 0346     		mov	r3, r0
 1381 0090 1B06     		lsls	r3, r3, #24
 865:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 1382              		.loc 1 865 0
 1383 0092 44EA0302 		orr	r2, r4, r3
 867:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1384              		.loc 1 867 0
 1385 0096 BB68     		ldr	r3, [r7, #8]
 1386 0098 DB69     		ldr	r3, [r3, #28]
 866:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 1387              		.loc 1 866 0
 1388 009a 1A43     		orrs	r2, r2, r3
 868:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask)); 
 1389              		.loc 1 868 0
 1390 009c BB68     		ldr	r3, [r7, #8]
 1391 009e 5B69     		ldr	r3, [r3, #20]
 862:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 1392              		.loc 1 862 0
 1393 00a0 1343     		orrs	r3, r3, r2
 1394 00a2 FB61     		str	r3, [r7, #28]
 1395 00a4 40E0     		b	.L46
 1396              	.L44:
 869:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   }
 870:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   else
 871:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   {
 872:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1397              		.loc 1 872 0
 1398 00a6 FB68     		ldr	r3, [r7, #12]
 1399 00a8 1B68     		ldr	r3, [r3]
 1400 00aa 9B68     		ldr	r3, [r3, #8]
 1401 00ac 03F04003 		and	r3, r3, #64
 1402 00b0 002B     		cmp	r3, #0
 1403 00b2 07D0     		beq	.L47
 873:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     {
 874:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 1404              		.loc 1 874 0
ARM GAS  /tmp/ccgQTKgw.s 			page 41


 1405 00b4 BB68     		ldr	r3, [r7, #8]
 1406 00b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1407 00b8 1846     		mov	r0, r3
 1408 00ba FFF7FEFF 		bl	RTC_Bcd2ToByte
 1409 00be 0346     		mov	r3, r0
 1410 00c0 FB61     		str	r3, [r7, #28]
 1411 00c2 02E0     		b	.L48
 1412              	.L47:
 875:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
 876:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 877:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     } 
 878:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     else
 879:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     {
 880:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00U;
 1413              		.loc 1 880 0
 1414 00c4 BB68     		ldr	r3, [r7, #8]
 1415 00c6 0022     		movs	r2, #0
 1416 00c8 DA70     		strb	r2, [r3, #3]
 1417              	.L48:
 881:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 882:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     }
 883:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
 884:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
 885:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 886:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
 887:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 1418              		.loc 1 887 0
 1419 00ca BB68     		ldr	r3, [r7, #8]
 1420 00cc DB69     		ldr	r3, [r3, #28]
 1421 00ce 002B     		cmp	r3, #0
 1422 00d0 08D1     		bne	.L49
 888:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     {
 889:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 1423              		.loc 1 889 0
 1424 00d2 BB68     		ldr	r3, [r7, #8]
 1425 00d4 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1426 00d8 1846     		mov	r0, r3
 1427 00da FFF7FEFF 		bl	RTC_Bcd2ToByte
 1428 00de 0346     		mov	r3, r0
 1429 00e0 FB61     		str	r3, [r7, #28]
 1430 00e2 07E0     		b	.L50
 1431              	.L49:
 890:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
 891:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     }
 892:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     else
 893:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     {
 894:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 1432              		.loc 1 894 0
 1433 00e4 BB68     		ldr	r3, [r7, #8]
 1434 00e6 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1435 00ea 1846     		mov	r0, r3
 1436 00ec FFF7FEFF 		bl	RTC_Bcd2ToByte
 1437 00f0 0346     		mov	r3, r0
 1438 00f2 FB61     		str	r3, [r7, #28]
 1439              	.L50:
 895:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
 896:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     }  
ARM GAS  /tmp/ccgQTKgw.s 			page 42


 897:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
 898:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 1440              		.loc 1 898 0
 1441 00f4 BB68     		ldr	r3, [r7, #8]
 1442 00f6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1443 00f8 1A04     		lsls	r2, r3, #16
 899:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 1444              		.loc 1 899 0
 1445 00fa BB68     		ldr	r3, [r7, #8]
 1446 00fc 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1447 00fe 1B02     		lsls	r3, r3, #8
 898:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 1448              		.loc 1 898 0
 1449 0100 1343     		orrs	r3, r3, r2
 900:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 1450              		.loc 1 900 0
 1451 0102 BA68     		ldr	r2, [r7, #8]
 1452 0104 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 899:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 1453              		.loc 1 899 0
 1454 0106 1A43     		orrs	r2, r2, r3
 901:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 1455              		.loc 1 901 0
 1456 0108 BB68     		ldr	r3, [r7, #8]
 1457 010a DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1458 010c 1B04     		lsls	r3, r3, #16
 900:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 1459              		.loc 1 900 0
 1460 010e 1A43     		orrs	r2, r2, r3
 902:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 1461              		.loc 1 902 0
 1462 0110 BB68     		ldr	r3, [r7, #8]
 1463 0112 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1464 0116 1B06     		lsls	r3, r3, #24
 901:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 1465              		.loc 1 901 0
 1466 0118 1A43     		orrs	r2, r2, r3
 903:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1467              		.loc 1 903 0
 1468 011a BB68     		ldr	r3, [r7, #8]
 1469 011c DB69     		ldr	r3, [r3, #28]
 902:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 1470              		.loc 1 902 0
 1471 011e 1A43     		orrs	r2, r2, r3
 904:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask));   
 1472              		.loc 1 904 0
 1473 0120 BB68     		ldr	r3, [r7, #8]
 1474 0122 5B69     		ldr	r3, [r3, #20]
 898:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 1475              		.loc 1 898 0
 1476 0124 1343     		orrs	r3, r3, r2
 1477 0126 FB61     		str	r3, [r7, #28]
 1478              	.L46:
 905:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   }
 906:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
 907:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Configure the Alarm A or Alarm B Sub Second registers */
 908:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmS
ARM GAS  /tmp/ccgQTKgw.s 			page 43


 1479              		.loc 1 908 0
 1480 0128 BB68     		ldr	r3, [r7, #8]
 1481 012a 5A68     		ldr	r2, [r3, #4]
 1482 012c BB68     		ldr	r3, [r7, #8]
 1483 012e 9B69     		ldr	r3, [r3, #24]
 1484 0130 1343     		orrs	r3, r3, r2
 1485 0132 7B61     		str	r3, [r7, #20]
 909:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
 910:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
 911:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 1486              		.loc 1 911 0
 1487 0134 FB68     		ldr	r3, [r7, #12]
 1488 0136 1B68     		ldr	r3, [r3]
 1489 0138 CA22     		movs	r2, #202
 1490 013a 5A62     		str	r2, [r3, #36]
 1491 013c FB68     		ldr	r3, [r7, #12]
 1492 013e 1B68     		ldr	r3, [r3]
 1493 0140 5322     		movs	r2, #83
 1494 0142 5A62     		str	r2, [r3, #36]
 912:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
 913:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Configure the Alarm register */
 914:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   if(sAlarm->Alarm == RTC_ALARM_A)
 1495              		.loc 1 914 0
 1496 0144 BB68     		ldr	r3, [r7, #8]
 1497 0146 5B6A     		ldr	r3, [r3, #36]
 1498 0148 B3F5807F 		cmp	r3, #256
 1499 014c 3FD1     		bne	.L51
 915:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   {
 916:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Disable the Alarm A interrupt */
 917:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     __HAL_RTC_ALARMA_DISABLE(hrtc);
 1500              		.loc 1 917 0
 1501 014e FB68     		ldr	r3, [r7, #12]
 1502 0150 1B68     		ldr	r3, [r3]
 1503 0152 FA68     		ldr	r2, [r7, #12]
 1504 0154 1268     		ldr	r2, [r2]
 1505 0156 9268     		ldr	r2, [r2, #8]
 1506 0158 22F48072 		bic	r2, r2, #256
 1507 015c 9A60     		str	r2, [r3, #8]
 918:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
 919:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */ 
 920:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 1508              		.loc 1 920 0
 1509 015e FB68     		ldr	r3, [r7, #12]
 1510 0160 1B68     		ldr	r3, [r3]
 1511 0162 FA68     		ldr	r2, [r7, #12]
 1512 0164 1268     		ldr	r2, [r2]
 1513 0166 9268     		ldr	r2, [r2, #8]
 1514 0168 22F48052 		bic	r2, r2, #4096
 1515 016c 9A60     		str	r2, [r3, #8]
 921:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****          
 922:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 1516              		.loc 1 922 0
 1517 016e FFF7FEFF 		bl	HAL_GetTick
 1518 0172 B861     		str	r0, [r7, #24]
 923:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
 924:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 1519              		.loc 1 924 0
ARM GAS  /tmp/ccgQTKgw.s 			page 44


 1520 0174 13E0     		b	.L52
 1521              	.L53:
 925:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     {
 926:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 1522              		.loc 1 926 0
 1523 0176 FFF7FEFF 		bl	HAL_GetTick
 1524 017a 0246     		mov	r2, r0
 1525 017c BB69     		ldr	r3, [r7, #24]
 1526 017e D31A     		subs	r3, r2, r3
 1527 0180 B3F57A7F 		cmp	r3, #1000
 1528 0184 0BD9     		bls	.L52
 927:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       {
 928:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
 929:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 1529              		.loc 1 929 0
 1530 0186 FB68     		ldr	r3, [r7, #12]
 1531 0188 1B68     		ldr	r3, [r3]
 1532 018a FF22     		movs	r2, #255
 1533 018c 5A62     		str	r2, [r3, #36]
 930:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         
 931:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 1534              		.loc 1 931 0
 1535 018e FB68     		ldr	r3, [r7, #12]
 1536 0190 0322     		movs	r2, #3
 1537 0192 5A77     		strb	r2, [r3, #29]
 932:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         
 933:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         /* Process Unlocked */ 
 934:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 1538              		.loc 1 934 0
 1539 0194 FB68     		ldr	r3, [r7, #12]
 1540 0196 0022     		movs	r2, #0
 1541 0198 1A77     		strb	r2, [r3, #28]
 935:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         
 936:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         return HAL_TIMEOUT;
 1542              		.loc 1 936 0
 1543 019a 0323     		movs	r3, #3
 1544 019c 61E0     		b	.L43
 1545              	.L52:
 924:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     {
 1546              		.loc 1 924 0
 1547 019e FB68     		ldr	r3, [r7, #12]
 1548 01a0 1B68     		ldr	r3, [r3]
 1549 01a2 DB68     		ldr	r3, [r3, #12]
 1550 01a4 03F00103 		and	r3, r3, #1
 1551 01a8 002B     		cmp	r3, #0
 1552 01aa E4D0     		beq	.L53
 937:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       }   
 938:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     }
 939:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
 940:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 1553              		.loc 1 940 0
 1554 01ac FB68     		ldr	r3, [r7, #12]
 1555 01ae 1B68     		ldr	r3, [r3]
 1556 01b0 FA69     		ldr	r2, [r7, #28]
 1557 01b2 DA61     		str	r2, [r3, #28]
 941:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Configure the Alarm A Sub Second register */
 942:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     hrtc->Instance->ALRMASSR = subsecondtmpreg;
ARM GAS  /tmp/ccgQTKgw.s 			page 45


 1558              		.loc 1 942 0
 1559 01b4 FB68     		ldr	r3, [r7, #12]
 1560 01b6 1B68     		ldr	r3, [r3]
 1561 01b8 7A69     		ldr	r2, [r7, #20]
 1562 01ba 5A64     		str	r2, [r3, #68]
 943:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
 944:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     __HAL_RTC_ALARMA_ENABLE(hrtc);
 1563              		.loc 1 944 0
 1564 01bc FB68     		ldr	r3, [r7, #12]
 1565 01be 1B68     		ldr	r3, [r3]
 1566 01c0 FA68     		ldr	r2, [r7, #12]
 1567 01c2 1268     		ldr	r2, [r2]
 1568 01c4 9268     		ldr	r2, [r2, #8]
 1569 01c6 42F48072 		orr	r2, r2, #256
 1570 01ca 9A60     		str	r2, [r3, #8]
 1571 01cc 3EE0     		b	.L54
 1572              	.L51:
 945:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   }
 946:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   else
 947:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   {
 948:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Disable the Alarm B interrupt */
 949:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     __HAL_RTC_ALARMB_DISABLE(hrtc);
 1573              		.loc 1 949 0
 1574 01ce FB68     		ldr	r3, [r7, #12]
 1575 01d0 1B68     		ldr	r3, [r3]
 1576 01d2 FA68     		ldr	r2, [r7, #12]
 1577 01d4 1268     		ldr	r2, [r2]
 1578 01d6 9268     		ldr	r2, [r2, #8]
 1579 01d8 22F40072 		bic	r2, r2, #512
 1580 01dc 9A60     		str	r2, [r3, #8]
 950:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
 951:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */ 
 952:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 1581              		.loc 1 952 0
 1582 01de FB68     		ldr	r3, [r7, #12]
 1583 01e0 1B68     		ldr	r3, [r3]
 1584 01e2 FA68     		ldr	r2, [r7, #12]
 1585 01e4 1268     		ldr	r2, [r2]
 1586 01e6 9268     		ldr	r2, [r2, #8]
 1587 01e8 22F40052 		bic	r2, r2, #8192
 1588 01ec 9A60     		str	r2, [r3, #8]
 953:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****        
 954:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 1589              		.loc 1 954 0
 1590 01ee FFF7FEFF 		bl	HAL_GetTick
 1591 01f2 B861     		str	r0, [r7, #24]
 955:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
 956:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 1592              		.loc 1 956 0
 1593 01f4 13E0     		b	.L55
 1594              	.L56:
 957:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     {
 958:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 1595              		.loc 1 958 0
 1596 01f6 FFF7FEFF 		bl	HAL_GetTick
 1597 01fa 0246     		mov	r2, r0
 1598 01fc BB69     		ldr	r3, [r7, #24]
ARM GAS  /tmp/ccgQTKgw.s 			page 46


 1599 01fe D31A     		subs	r3, r2, r3
 1600 0200 B3F57A7F 		cmp	r3, #1000
 1601 0204 0BD9     		bls	.L55
 959:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       {
 960:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
 961:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 1602              		.loc 1 961 0
 1603 0206 FB68     		ldr	r3, [r7, #12]
 1604 0208 1B68     		ldr	r3, [r3]
 1605 020a FF22     		movs	r2, #255
 1606 020c 5A62     		str	r2, [r3, #36]
 962:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         
 963:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 1607              		.loc 1 963 0
 1608 020e FB68     		ldr	r3, [r7, #12]
 1609 0210 0322     		movs	r2, #3
 1610 0212 5A77     		strb	r2, [r3, #29]
 964:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         
 965:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         /* Process Unlocked */ 
 966:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 1611              		.loc 1 966 0
 1612 0214 FB68     		ldr	r3, [r7, #12]
 1613 0216 0022     		movs	r2, #0
 1614 0218 1A77     		strb	r2, [r3, #28]
 967:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         
 968:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         return HAL_TIMEOUT;
 1615              		.loc 1 968 0
 1616 021a 0323     		movs	r3, #3
 1617 021c 21E0     		b	.L43
 1618              	.L55:
 956:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     {
 1619              		.loc 1 956 0
 1620 021e FB68     		ldr	r3, [r7, #12]
 1621 0220 1B68     		ldr	r3, [r3]
 1622 0222 DB68     		ldr	r3, [r3, #12]
 1623 0224 03F00203 		and	r3, r3, #2
 1624 0228 002B     		cmp	r3, #0
 1625 022a E4D0     		beq	.L56
 969:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       }  
 970:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     }    
 971:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
 972:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 1626              		.loc 1 972 0
 1627 022c FB68     		ldr	r3, [r7, #12]
 1628 022e 1B68     		ldr	r3, [r3]
 1629 0230 FA69     		ldr	r2, [r7, #28]
 1630 0232 1A62     		str	r2, [r3, #32]
 973:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Configure the Alarm B Sub Second register */
 974:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 1631              		.loc 1 974 0
 1632 0234 FB68     		ldr	r3, [r7, #12]
 1633 0236 1B68     		ldr	r3, [r3]
 1634 0238 7A69     		ldr	r2, [r7, #20]
 1635 023a 9A64     		str	r2, [r3, #72]
 975:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
 976:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     __HAL_RTC_ALARMB_ENABLE(hrtc); 
 1636              		.loc 1 976 0
ARM GAS  /tmp/ccgQTKgw.s 			page 47


 1637 023c FB68     		ldr	r3, [r7, #12]
 1638 023e 1B68     		ldr	r3, [r3]
 1639 0240 FA68     		ldr	r2, [r7, #12]
 1640 0242 1268     		ldr	r2, [r2]
 1641 0244 9268     		ldr	r2, [r2, #8]
 1642 0246 42F40072 		orr	r2, r2, #512
 1643 024a 9A60     		str	r2, [r3, #8]
 1644              	.L54:
 977:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   }
 978:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
 979:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
 980:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);   
 1645              		.loc 1 980 0
 1646 024c FB68     		ldr	r3, [r7, #12]
 1647 024e 1B68     		ldr	r3, [r3]
 1648 0250 FF22     		movs	r2, #255
 1649 0252 5A62     		str	r2, [r3, #36]
 981:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
 982:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Change RTC state */
 983:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY; 
 1650              		.loc 1 983 0
 1651 0254 FB68     		ldr	r3, [r7, #12]
 1652 0256 0122     		movs	r2, #1
 1653 0258 5A77     		strb	r2, [r3, #29]
 984:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
 985:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Process Unlocked */ 
 986:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 1654              		.loc 1 986 0
 1655 025a FB68     		ldr	r3, [r7, #12]
 1656 025c 0022     		movs	r2, #0
 1657 025e 1A77     		strb	r2, [r3, #28]
 987:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
 988:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   return HAL_OK;
 1658              		.loc 1 988 0
 1659 0260 0023     		movs	r3, #0
 1660              	.L43:
 989:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** }
 1661              		.loc 1 989 0
 1662 0262 1846     		mov	r0, r3
 1663 0264 2437     		adds	r7, r7, #36
 1664              	.LCFI45:
 1665              		.cfi_def_cfa_offset 12
 1666 0266 BD46     		mov	sp, r7
 1667              	.LCFI46:
 1668              		.cfi_def_cfa_register 13
 1669              		@ sp needed
 1670 0268 90BD     		pop	{r4, r7, pc}
 1671              		.cfi_endproc
 1672              	.LFE131:
 1674 026a 00BF     		.section	.text.HAL_RTC_SetAlarm_IT,"ax",%progbits
 1675              		.align	2
 1676              		.global	HAL_RTC_SetAlarm_IT
 1677              		.thumb
 1678              		.thumb_func
 1680              	HAL_RTC_SetAlarm_IT:
 1681              	.LFB132:
 990:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
ARM GAS  /tmp/ccgQTKgw.s 			page 48


 991:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** /**
 992:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @brief  Set the specified RTC Alarm with Interrupt.
 993:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @param  hrtc RTC handle
 994:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @param  sAlarm Pointer to Alarm structure
 995:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
 996:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 997:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BIN: Binary data format 
 998:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BCD: BCD data format
 999:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @note   The Alarm register can only be written when the corresponding Alarm
1000:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *         is disabled (Use the HAL_RTC_DeactivateAlarm()).   
1001:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.   
1002:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @retval HAL status
1003:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   */
1004:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t F
1005:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** {
 1682              		.loc 1 1005 0
 1683              		.cfi_startproc
 1684              		@ args = 0, pretend = 0, frame = 32
 1685              		@ frame_needed = 1, uses_anonymous_args = 0
 1686 0000 90B5     		push	{r4, r7, lr}
 1687              	.LCFI47:
 1688              		.cfi_def_cfa_offset 12
 1689              		.cfi_offset 4, -12
 1690              		.cfi_offset 7, -8
 1691              		.cfi_offset 14, -4
 1692 0002 89B0     		sub	sp, sp, #36
 1693              	.LCFI48:
 1694              		.cfi_def_cfa_offset 48
 1695 0004 00AF     		add	r7, sp, #0
 1696              	.LCFI49:
 1697              		.cfi_def_cfa_register 7
 1698 0006 F860     		str	r0, [r7, #12]
 1699 0008 B960     		str	r1, [r7, #8]
 1700 000a 7A60     		str	r2, [r7, #4]
1006:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   uint32_t tickstart = 0U;
 1701              		.loc 1 1006 0
 1702 000c 0023     		movs	r3, #0
 1703 000e BB61     		str	r3, [r7, #24]
1007:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 1704              		.loc 1 1007 0
 1705 0010 0023     		movs	r3, #0
 1706 0012 FB61     		str	r3, [r7, #28]
 1707 0014 0023     		movs	r3, #0
 1708 0016 7B61     		str	r3, [r7, #20]
1008:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
1009:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Check the parameters */
1010:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
1011:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(sAlarm->Alarm));
1012:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
1013:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
1014:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
1015:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
1016:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       
1017:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Process Locked */ 
1018:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 1709              		.loc 1 1018 0
 1710 0018 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccgQTKgw.s 			page 49


 1711 001a 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 1712 001c 012B     		cmp	r3, #1
 1713 001e 01D1     		bne	.L58
 1714              		.loc 1 1018 0 is_stmt 0 discriminator 1
 1715 0020 0223     		movs	r3, #2
 1716 0022 3CE1     		b	.L59
 1717              	.L58:
 1718              		.loc 1 1018 0 discriminator 2
 1719 0024 FB68     		ldr	r3, [r7, #12]
 1720 0026 0122     		movs	r2, #1
 1721 0028 1A77     		strb	r2, [r3, #28]
1019:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
1020:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 1722              		.loc 1 1020 0 is_stmt 1 discriminator 2
 1723 002a FB68     		ldr	r3, [r7, #12]
 1724 002c 0222     		movs	r2, #2
 1725 002e 5A77     		strb	r2, [r3, #29]
1021:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
1022:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 1726              		.loc 1 1022 0 discriminator 2
 1727 0030 7B68     		ldr	r3, [r7, #4]
 1728 0032 002B     		cmp	r3, #0
 1729 0034 37D1     		bne	.L60
1023:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   {
1024:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1730              		.loc 1 1024 0
 1731 0036 FB68     		ldr	r3, [r7, #12]
 1732 0038 1B68     		ldr	r3, [r3]
 1733 003a 9B68     		ldr	r3, [r3, #8]
 1734 003c 03F04003 		and	r3, r3, #64
 1735 0040 002B     		cmp	r3, #0
 1736 0042 02D1     		bne	.L61
1025:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     {
1026:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
1027:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
1028:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     } 
1029:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     else
1030:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     {
1031:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00U;
 1737              		.loc 1 1031 0
 1738 0044 BB68     		ldr	r3, [r7, #8]
 1739 0046 0022     		movs	r2, #0
 1740 0048 DA70     		strb	r2, [r3, #3]
 1741              	.L61:
1032:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
1033:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     }
1034:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
1035:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
1036:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
1037:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
1038:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     {
1039:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
1040:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     }
1041:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     else
1042:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     {
1043:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
1044:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     }
ARM GAS  /tmp/ccgQTKgw.s 			page 50


1045:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 1742              		.loc 1 1045 0
 1743 004a BB68     		ldr	r3, [r7, #8]
 1744 004c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1745 004e 1846     		mov	r0, r3
 1746 0050 FFF7FEFF 		bl	RTC_ByteToBcd2
 1747 0054 0346     		mov	r3, r0
 1748 0056 1C04     		lsls	r4, r3, #16
1046:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 1749              		.loc 1 1046 0
 1750 0058 BB68     		ldr	r3, [r7, #8]
 1751 005a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1752 005c 1846     		mov	r0, r3
 1753 005e FFF7FEFF 		bl	RTC_ByteToBcd2
 1754 0062 0346     		mov	r3, r0
 1755 0064 1B02     		lsls	r3, r3, #8
1045:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 1756              		.loc 1 1045 0
 1757 0066 1C43     		orrs	r4, r4, r3
1047:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 1758              		.loc 1 1047 0
 1759 0068 BB68     		ldr	r3, [r7, #8]
 1760 006a 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1761 006c 1846     		mov	r0, r3
 1762 006e FFF7FEFF 		bl	RTC_ByteToBcd2
 1763 0072 0346     		mov	r3, r0
1046:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 1764              		.loc 1 1046 0
 1765 0074 44EA0302 		orr	r2, r4, r3
1048:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 1766              		.loc 1 1048 0
 1767 0078 BB68     		ldr	r3, [r7, #8]
 1768 007a DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1769 007c 1B04     		lsls	r3, r3, #16
1047:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 1770              		.loc 1 1047 0
 1771 007e 42EA0304 		orr	r4, r2, r3
1049:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 1772              		.loc 1 1049 0
 1773 0082 BB68     		ldr	r3, [r7, #8]
 1774 0084 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1775 0088 1846     		mov	r0, r3
 1776 008a FFF7FEFF 		bl	RTC_ByteToBcd2
 1777 008e 0346     		mov	r3, r0
 1778 0090 1B06     		lsls	r3, r3, #24
1048:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 1779              		.loc 1 1048 0
 1780 0092 44EA0302 		orr	r2, r4, r3
1050:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1781              		.loc 1 1050 0
 1782 0096 BB68     		ldr	r3, [r7, #8]
 1783 0098 DB69     		ldr	r3, [r3, #28]
1049:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 1784              		.loc 1 1049 0
 1785 009a 1A43     		orrs	r2, r2, r3
1051:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask)); 
 1786              		.loc 1 1051 0
ARM GAS  /tmp/ccgQTKgw.s 			page 51


 1787 009c BB68     		ldr	r3, [r7, #8]
 1788 009e 5B69     		ldr	r3, [r3, #20]
1045:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 1789              		.loc 1 1045 0
 1790 00a0 1343     		orrs	r3, r3, r2
 1791 00a2 FB61     		str	r3, [r7, #28]
 1792 00a4 40E0     		b	.L62
 1793              	.L60:
1052:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   }
1053:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   else
1054:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   {
1055:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1794              		.loc 1 1055 0
 1795 00a6 FB68     		ldr	r3, [r7, #12]
 1796 00a8 1B68     		ldr	r3, [r3]
 1797 00aa 9B68     		ldr	r3, [r3, #8]
 1798 00ac 03F04003 		and	r3, r3, #64
 1799 00b0 002B     		cmp	r3, #0
 1800 00b2 07D0     		beq	.L63
1056:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     {
1057:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 1801              		.loc 1 1057 0
 1802 00b4 BB68     		ldr	r3, [r7, #8]
 1803 00b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1804 00b8 1846     		mov	r0, r3
 1805 00ba FFF7FEFF 		bl	RTC_Bcd2ToByte
 1806 00be 0346     		mov	r3, r0
 1807 00c0 FB61     		str	r3, [r7, #28]
 1808 00c2 02E0     		b	.L64
 1809              	.L63:
1058:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
1059:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
1060:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     } 
1061:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     else
1062:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     {
1063:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00U;
 1810              		.loc 1 1063 0
 1811 00c4 BB68     		ldr	r3, [r7, #8]
 1812 00c6 0022     		movs	r2, #0
 1813 00c8 DA70     		strb	r2, [r3, #3]
 1814              	.L64:
1064:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
1065:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     }
1066:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
1067:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
1068:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
1069:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
1070:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 1815              		.loc 1 1070 0
 1816 00ca BB68     		ldr	r3, [r7, #8]
 1817 00cc DB69     		ldr	r3, [r3, #28]
 1818 00ce 002B     		cmp	r3, #0
 1819 00d0 08D1     		bne	.L65
1071:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     {
1072:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 1820              		.loc 1 1072 0
 1821 00d2 BB68     		ldr	r3, [r7, #8]
ARM GAS  /tmp/ccgQTKgw.s 			page 52


 1822 00d4 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1823 00d8 1846     		mov	r0, r3
 1824 00da FFF7FEFF 		bl	RTC_Bcd2ToByte
 1825 00de 0346     		mov	r3, r0
 1826 00e0 FB61     		str	r3, [r7, #28]
 1827 00e2 07E0     		b	.L66
 1828              	.L65:
1073:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
1074:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     }
1075:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     else
1076:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     {
1077:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 1829              		.loc 1 1077 0
 1830 00e4 BB68     		ldr	r3, [r7, #8]
 1831 00e6 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1832 00ea 1846     		mov	r0, r3
 1833 00ec FFF7FEFF 		bl	RTC_Bcd2ToByte
 1834 00f0 0346     		mov	r3, r0
 1835 00f2 FB61     		str	r3, [r7, #28]
 1836              	.L66:
1078:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
1079:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     }
1080:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 1837              		.loc 1 1080 0
 1838 00f4 BB68     		ldr	r3, [r7, #8]
 1839 00f6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1840 00f8 1A04     		lsls	r2, r3, #16
1081:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 1841              		.loc 1 1081 0
 1842 00fa BB68     		ldr	r3, [r7, #8]
 1843 00fc 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1844 00fe 1B02     		lsls	r3, r3, #8
1080:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 1845              		.loc 1 1080 0
 1846 0100 1343     		orrs	r3, r3, r2
1082:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 1847              		.loc 1 1082 0
 1848 0102 BA68     		ldr	r2, [r7, #8]
 1849 0104 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
1081:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 1850              		.loc 1 1081 0
 1851 0106 1A43     		orrs	r2, r2, r3
1083:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 1852              		.loc 1 1083 0
 1853 0108 BB68     		ldr	r3, [r7, #8]
 1854 010a DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1855 010c 1B04     		lsls	r3, r3, #16
1082:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 1856              		.loc 1 1082 0
 1857 010e 1A43     		orrs	r2, r2, r3
1084:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 1858              		.loc 1 1084 0
 1859 0110 BB68     		ldr	r3, [r7, #8]
 1860 0112 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1861 0116 1B06     		lsls	r3, r3, #24
1083:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 1862              		.loc 1 1083 0
ARM GAS  /tmp/ccgQTKgw.s 			page 53


 1863 0118 1A43     		orrs	r2, r2, r3
1085:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1864              		.loc 1 1085 0
 1865 011a BB68     		ldr	r3, [r7, #8]
 1866 011c DB69     		ldr	r3, [r3, #28]
1084:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 1867              		.loc 1 1084 0
 1868 011e 1A43     		orrs	r2, r2, r3
1086:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask));     
 1869              		.loc 1 1086 0
 1870 0120 BB68     		ldr	r3, [r7, #8]
 1871 0122 5B69     		ldr	r3, [r3, #20]
1080:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 1872              		.loc 1 1080 0
 1873 0124 1343     		orrs	r3, r3, r2
 1874 0126 FB61     		str	r3, [r7, #28]
 1875              	.L62:
1087:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   }
1088:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Configure the Alarm A or Alarm B Sub Second registers */
1089:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmS
 1876              		.loc 1 1089 0
 1877 0128 BB68     		ldr	r3, [r7, #8]
 1878 012a 5A68     		ldr	r2, [r3, #4]
 1879 012c BB68     		ldr	r3, [r7, #8]
 1880 012e 9B69     		ldr	r3, [r3, #24]
 1881 0130 1343     		orrs	r3, r3, r2
 1882 0132 7B61     		str	r3, [r7, #20]
1090:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
1091:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
1092:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 1883              		.loc 1 1092 0
 1884 0134 FB68     		ldr	r3, [r7, #12]
 1885 0136 1B68     		ldr	r3, [r3]
 1886 0138 CA22     		movs	r2, #202
 1887 013a 5A62     		str	r2, [r3, #36]
 1888 013c FB68     		ldr	r3, [r7, #12]
 1889 013e 1B68     		ldr	r3, [r3]
 1890 0140 5322     		movs	r2, #83
 1891 0142 5A62     		str	r2, [r3, #36]
1093:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
1094:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Configure the Alarm register */
1095:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   if(sAlarm->Alarm == RTC_ALARM_A)
 1892              		.loc 1 1095 0
 1893 0144 BB68     		ldr	r3, [r7, #8]
 1894 0146 5B6A     		ldr	r3, [r3, #36]
 1895 0148 B3F5807F 		cmp	r3, #256
 1896 014c 48D1     		bne	.L67
1096:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   {
1097:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Disable the Alarm A interrupt */
1098:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     __HAL_RTC_ALARMA_DISABLE(hrtc);
 1897              		.loc 1 1098 0
 1898 014e FB68     		ldr	r3, [r7, #12]
 1899 0150 1B68     		ldr	r3, [r3]
 1900 0152 FA68     		ldr	r2, [r7, #12]
 1901 0154 1268     		ldr	r2, [r2]
 1902 0156 9268     		ldr	r2, [r2, #8]
 1903 0158 22F48072 		bic	r2, r2, #256
ARM GAS  /tmp/ccgQTKgw.s 			page 54


 1904 015c 9A60     		str	r2, [r3, #8]
1099:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
1100:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Clear flag alarm A */
1101:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 1905              		.loc 1 1101 0
 1906 015e FB68     		ldr	r3, [r7, #12]
 1907 0160 1B68     		ldr	r3, [r3]
 1908 0162 FA68     		ldr	r2, [r7, #12]
 1909 0164 1268     		ldr	r2, [r2]
 1910 0166 D268     		ldr	r2, [r2, #12]
 1911 0168 D2B2     		uxtb	r2, r2
 1912 016a 62F4C072 		orn	r2, r2, #384
 1913 016e DA60     		str	r2, [r3, #12]
1102:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
1103:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 1914              		.loc 1 1103 0
 1915 0170 FFF7FEFF 		bl	HAL_GetTick
 1916 0174 B861     		str	r0, [r7, #24]
1104:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
1105:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 1917              		.loc 1 1105 0
 1918 0176 13E0     		b	.L68
 1919              	.L69:
1106:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     {
1107:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 1920              		.loc 1 1107 0
 1921 0178 FFF7FEFF 		bl	HAL_GetTick
 1922 017c 0246     		mov	r2, r0
 1923 017e BB69     		ldr	r3, [r7, #24]
 1924 0180 D31A     		subs	r3, r2, r3
 1925 0182 B3F57A7F 		cmp	r3, #1000
 1926 0186 0BD9     		bls	.L68
1108:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       {
1109:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1110:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 1927              		.loc 1 1110 0
 1928 0188 FB68     		ldr	r3, [r7, #12]
 1929 018a 1B68     		ldr	r3, [r3]
 1930 018c FF22     		movs	r2, #255
 1931 018e 5A62     		str	r2, [r3, #36]
1111:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         
1112:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 1932              		.loc 1 1112 0
 1933 0190 FB68     		ldr	r3, [r7, #12]
 1934 0192 0322     		movs	r2, #3
 1935 0194 5A77     		strb	r2, [r3, #29]
1113:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         
1114:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         /* Process Unlocked */ 
1115:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 1936              		.loc 1 1115 0
 1937 0196 FB68     		ldr	r3, [r7, #12]
 1938 0198 0022     		movs	r2, #0
 1939 019a 1A77     		strb	r2, [r3, #28]
1116:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         
1117:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         return HAL_TIMEOUT;
 1940              		.loc 1 1117 0
 1941 019c 0323     		movs	r3, #3
ARM GAS  /tmp/ccgQTKgw.s 			page 55


 1942 019e 7EE0     		b	.L59
 1943              	.L68:
1105:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     {
 1944              		.loc 1 1105 0
 1945 01a0 FB68     		ldr	r3, [r7, #12]
 1946 01a2 1B68     		ldr	r3, [r3]
 1947 01a4 DB68     		ldr	r3, [r3, #12]
 1948 01a6 03F00103 		and	r3, r3, #1
 1949 01aa 002B     		cmp	r3, #0
 1950 01ac E4D0     		beq	.L69
1118:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       }  
1119:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     }
1120:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
1121:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 1951              		.loc 1 1121 0
 1952 01ae FB68     		ldr	r3, [r7, #12]
 1953 01b0 1B68     		ldr	r3, [r3]
 1954 01b2 FA69     		ldr	r2, [r7, #28]
 1955 01b4 DA61     		str	r2, [r3, #28]
1122:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Configure the Alarm A Sub Second register */
1123:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     hrtc->Instance->ALRMASSR = subsecondtmpreg;
 1956              		.loc 1 1123 0
 1957 01b6 FB68     		ldr	r3, [r7, #12]
 1958 01b8 1B68     		ldr	r3, [r3]
 1959 01ba 7A69     		ldr	r2, [r7, #20]
 1960 01bc 5A64     		str	r2, [r3, #68]
1124:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
1125:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     __HAL_RTC_ALARMA_ENABLE(hrtc);
 1961              		.loc 1 1125 0
 1962 01be FB68     		ldr	r3, [r7, #12]
 1963 01c0 1B68     		ldr	r3, [r3]
 1964 01c2 FA68     		ldr	r2, [r7, #12]
 1965 01c4 1268     		ldr	r2, [r2]
 1966 01c6 9268     		ldr	r2, [r2, #8]
 1967 01c8 42F48072 		orr	r2, r2, #256
 1968 01cc 9A60     		str	r2, [r3, #8]
1126:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Configure the Alarm interrupt */
1127:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 1969              		.loc 1 1127 0
 1970 01ce FB68     		ldr	r3, [r7, #12]
 1971 01d0 1B68     		ldr	r3, [r3]
 1972 01d2 FA68     		ldr	r2, [r7, #12]
 1973 01d4 1268     		ldr	r2, [r2]
 1974 01d6 9268     		ldr	r2, [r2, #8]
 1975 01d8 42F48052 		orr	r2, r2, #4096
 1976 01dc 9A60     		str	r2, [r3, #8]
 1977 01de 47E0     		b	.L70
 1978              	.L67:
1128:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   }
1129:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   else
1130:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   {
1131:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Disable the Alarm B interrupt */
1132:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     __HAL_RTC_ALARMB_DISABLE(hrtc);
 1979              		.loc 1 1132 0
 1980 01e0 FB68     		ldr	r3, [r7, #12]
 1981 01e2 1B68     		ldr	r3, [r3]
 1982 01e4 FA68     		ldr	r2, [r7, #12]
ARM GAS  /tmp/ccgQTKgw.s 			page 56


 1983 01e6 1268     		ldr	r2, [r2]
 1984 01e8 9268     		ldr	r2, [r2, #8]
 1985 01ea 22F40072 		bic	r2, r2, #512
 1986 01ee 9A60     		str	r2, [r3, #8]
1133:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
1134:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Clear flag alarm B */
1135:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 1987              		.loc 1 1135 0
 1988 01f0 FB68     		ldr	r3, [r7, #12]
 1989 01f2 1B68     		ldr	r3, [r3]
 1990 01f4 FA68     		ldr	r2, [r7, #12]
 1991 01f6 1268     		ldr	r2, [r2]
 1992 01f8 D268     		ldr	r2, [r2, #12]
 1993 01fa D2B2     		uxtb	r2, r2
 1994 01fc 62F42072 		orn	r2, r2, #640
 1995 0200 DA60     		str	r2, [r3, #12]
1136:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
1137:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 1996              		.loc 1 1137 0
 1997 0202 FFF7FEFF 		bl	HAL_GetTick
 1998 0206 B861     		str	r0, [r7, #24]
1138:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
1139:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 1999              		.loc 1 1139 0
 2000 0208 13E0     		b	.L71
 2001              	.L72:
1140:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     {
1141:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 2002              		.loc 1 1141 0
 2003 020a FFF7FEFF 		bl	HAL_GetTick
 2004 020e 0246     		mov	r2, r0
 2005 0210 BB69     		ldr	r3, [r7, #24]
 2006 0212 D31A     		subs	r3, r2, r3
 2007 0214 B3F57A7F 		cmp	r3, #1000
 2008 0218 0BD9     		bls	.L71
1142:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       {
1143:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1144:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2009              		.loc 1 1144 0
 2010 021a FB68     		ldr	r3, [r7, #12]
 2011 021c 1B68     		ldr	r3, [r3]
 2012 021e FF22     		movs	r2, #255
 2013 0220 5A62     		str	r2, [r3, #36]
1145:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         
1146:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 2014              		.loc 1 1146 0
 2015 0222 FB68     		ldr	r3, [r7, #12]
 2016 0224 0322     		movs	r2, #3
 2017 0226 5A77     		strb	r2, [r3, #29]
1147:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         
1148:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         /* Process Unlocked */ 
1149:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 2018              		.loc 1 1149 0
 2019 0228 FB68     		ldr	r3, [r7, #12]
 2020 022a 0022     		movs	r2, #0
 2021 022c 1A77     		strb	r2, [r3, #28]
1150:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         
ARM GAS  /tmp/ccgQTKgw.s 			page 57


1151:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         return HAL_TIMEOUT;
 2022              		.loc 1 1151 0
 2023 022e 0323     		movs	r3, #3
 2024 0230 35E0     		b	.L59
 2025              	.L71:
1139:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     {
 2026              		.loc 1 1139 0
 2027 0232 FB68     		ldr	r3, [r7, #12]
 2028 0234 1B68     		ldr	r3, [r3]
 2029 0236 DB68     		ldr	r3, [r3, #12]
 2030 0238 03F00203 		and	r3, r3, #2
 2031 023c 002B     		cmp	r3, #0
 2032 023e E4D0     		beq	.L72
1152:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       }  
1153:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     }
1154:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
1155:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 2033              		.loc 1 1155 0
 2034 0240 FB68     		ldr	r3, [r7, #12]
 2035 0242 1B68     		ldr	r3, [r3]
 2036 0244 FA69     		ldr	r2, [r7, #28]
 2037 0246 1A62     		str	r2, [r3, #32]
1156:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Configure the Alarm B Sub Second register */
1157:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 2038              		.loc 1 1157 0
 2039 0248 FB68     		ldr	r3, [r7, #12]
 2040 024a 1B68     		ldr	r3, [r3]
 2041 024c 7A69     		ldr	r2, [r7, #20]
 2042 024e 9A64     		str	r2, [r3, #72]
1158:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
1159:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     __HAL_RTC_ALARMB_ENABLE(hrtc);
 2043              		.loc 1 1159 0
 2044 0250 FB68     		ldr	r3, [r7, #12]
 2045 0252 1B68     		ldr	r3, [r3]
 2046 0254 FA68     		ldr	r2, [r7, #12]
 2047 0256 1268     		ldr	r2, [r2]
 2048 0258 9268     		ldr	r2, [r2, #8]
 2049 025a 42F40072 		orr	r2, r2, #512
 2050 025e 9A60     		str	r2, [r3, #8]
1160:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Configure the Alarm interrupt */
1161:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 2051              		.loc 1 1161 0
 2052 0260 FB68     		ldr	r3, [r7, #12]
 2053 0262 1B68     		ldr	r3, [r3]
 2054 0264 FA68     		ldr	r2, [r7, #12]
 2055 0266 1268     		ldr	r2, [r2]
 2056 0268 9268     		ldr	r2, [r2, #8]
 2057 026a 42F40052 		orr	r2, r2, #8192
 2058 026e 9A60     		str	r2, [r3, #8]
 2059              	.L70:
1162:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   }
1163:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
1164:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* RTC Alarm Interrupt Configuration: EXTI configuration */
1165:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 2060              		.loc 1 1165 0
 2061 0270 0D4A     		ldr	r2, .L73
 2062 0272 0D4B     		ldr	r3, .L73
ARM GAS  /tmp/ccgQTKgw.s 			page 58


 2063 0274 1B68     		ldr	r3, [r3]
 2064 0276 43F40033 		orr	r3, r3, #131072
 2065 027a 1360     		str	r3, [r2]
1166:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
1167:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 2066              		.loc 1 1167 0
 2067 027c 0A4A     		ldr	r2, .L73
 2068 027e 0A4B     		ldr	r3, .L73
 2069 0280 9B68     		ldr	r3, [r3, #8]
 2070 0282 43F40033 		orr	r3, r3, #131072
 2071 0286 9360     		str	r3, [r2, #8]
1168:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
1169:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
1170:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 2072              		.loc 1 1170 0
 2073 0288 FB68     		ldr	r3, [r7, #12]
 2074 028a 1B68     		ldr	r3, [r3]
 2075 028c FF22     		movs	r2, #255
 2076 028e 5A62     		str	r2, [r3, #36]
1171:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
1172:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY; 
 2077              		.loc 1 1172 0
 2078 0290 FB68     		ldr	r3, [r7, #12]
 2079 0292 0122     		movs	r2, #1
 2080 0294 5A77     		strb	r2, [r3, #29]
1173:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
1174:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Process Unlocked */ 
1175:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);  
 2081              		.loc 1 1175 0
 2082 0296 FB68     		ldr	r3, [r7, #12]
 2083 0298 0022     		movs	r2, #0
 2084 029a 1A77     		strb	r2, [r3, #28]
1176:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
1177:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   return HAL_OK;
 2085              		.loc 1 1177 0
 2086 029c 0023     		movs	r3, #0
 2087              	.L59:
1178:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** }
 2088              		.loc 1 1178 0
 2089 029e 1846     		mov	r0, r3
 2090 02a0 2437     		adds	r7, r7, #36
 2091              	.LCFI50:
 2092              		.cfi_def_cfa_offset 12
 2093 02a2 BD46     		mov	sp, r7
 2094              	.LCFI51:
 2095              		.cfi_def_cfa_register 13
 2096              		@ sp needed
 2097 02a4 90BD     		pop	{r4, r7, pc}
 2098              	.L74:
 2099 02a6 00BF     		.align	2
 2100              	.L73:
 2101 02a8 00040140 		.word	1073808384
 2102              		.cfi_endproc
 2103              	.LFE132:
 2105              		.section	.text.HAL_RTC_DeactivateAlarm,"ax",%progbits
 2106              		.align	2
 2107              		.global	HAL_RTC_DeactivateAlarm
ARM GAS  /tmp/ccgQTKgw.s 			page 59


 2108              		.thumb
 2109              		.thumb_func
 2111              	HAL_RTC_DeactivateAlarm:
 2112              	.LFB133:
1179:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
1180:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** /**
1181:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @brief  Deactivate the specified RTC Alarm.
1182:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @param  hrtc RTC handle
1183:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @param  Alarm Specifies the Alarm.
1184:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1185:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *            @arg RTC_ALARM_A :  AlarmA
1186:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *            @arg RTC_ALARM_B :  AlarmB
1187:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @retval HAL status
1188:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   */
1189:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
1190:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** {
 2113              		.loc 1 1190 0
 2114              		.cfi_startproc
 2115              		@ args = 0, pretend = 0, frame = 16
 2116              		@ frame_needed = 1, uses_anonymous_args = 0
 2117 0000 80B5     		push	{r7, lr}
 2118              	.LCFI52:
 2119              		.cfi_def_cfa_offset 8
 2120              		.cfi_offset 7, -8
 2121              		.cfi_offset 14, -4
 2122 0002 84B0     		sub	sp, sp, #16
 2123              	.LCFI53:
 2124              		.cfi_def_cfa_offset 24
 2125 0004 00AF     		add	r7, sp, #0
 2126              	.LCFI54:
 2127              		.cfi_def_cfa_register 7
 2128 0006 7860     		str	r0, [r7, #4]
 2129 0008 3960     		str	r1, [r7]
1191:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   uint32_t tickstart = 0U;
 2130              		.loc 1 1191 0
 2131 000a 0023     		movs	r3, #0
 2132 000c FB60     		str	r3, [r7, #12]
1192:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
1193:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Check the parameters */
1194:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(Alarm));
1195:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
1196:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Process Locked */ 
1197:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 2133              		.loc 1 1197 0
 2134 000e 7B68     		ldr	r3, [r7, #4]
 2135 0010 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 2136 0012 012B     		cmp	r3, #1
 2137 0014 01D1     		bne	.L76
 2138              		.loc 1 1197 0 is_stmt 0 discriminator 1
 2139 0016 0223     		movs	r3, #2
 2140 0018 7BE0     		b	.L77
 2141              	.L76:
 2142              		.loc 1 1197 0 discriminator 2
 2143 001a 7B68     		ldr	r3, [r7, #4]
 2144 001c 0122     		movs	r2, #1
 2145 001e 1A77     		strb	r2, [r3, #28]
1198:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
ARM GAS  /tmp/ccgQTKgw.s 			page 60


1199:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 2146              		.loc 1 1199 0 is_stmt 1 discriminator 2
 2147 0020 7B68     		ldr	r3, [r7, #4]
 2148 0022 0222     		movs	r2, #2
 2149 0024 5A77     		strb	r2, [r3, #29]
1200:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
1201:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
1202:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 2150              		.loc 1 1202 0 discriminator 2
 2151 0026 7B68     		ldr	r3, [r7, #4]
 2152 0028 1B68     		ldr	r3, [r3]
 2153 002a CA22     		movs	r2, #202
 2154 002c 5A62     		str	r2, [r3, #36]
 2155 002e 7B68     		ldr	r3, [r7, #4]
 2156 0030 1B68     		ldr	r3, [r3]
 2157 0032 5322     		movs	r2, #83
 2158 0034 5A62     		str	r2, [r3, #36]
1203:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
1204:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   if(Alarm == RTC_ALARM_A)
 2159              		.loc 1 1204 0 discriminator 2
 2160 0036 3B68     		ldr	r3, [r7]
 2161 0038 B3F5807F 		cmp	r3, #256
 2162 003c 2FD1     		bne	.L78
1205:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   {
1206:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* AlarmA */
1207:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     __HAL_RTC_ALARMA_DISABLE(hrtc);
 2163              		.loc 1 1207 0
 2164 003e 7B68     		ldr	r3, [r7, #4]
 2165 0040 1B68     		ldr	r3, [r3]
 2166 0042 7A68     		ldr	r2, [r7, #4]
 2167 0044 1268     		ldr	r2, [r2]
 2168 0046 9268     		ldr	r2, [r2, #8]
 2169 0048 22F48072 		bic	r2, r2, #256
 2170 004c 9A60     		str	r2, [r3, #8]
1208:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
1209:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */ 
1210:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 2171              		.loc 1 1210 0
 2172 004e 7B68     		ldr	r3, [r7, #4]
 2173 0050 1B68     		ldr	r3, [r3]
 2174 0052 7A68     		ldr	r2, [r7, #4]
 2175 0054 1268     		ldr	r2, [r2]
 2176 0056 9268     		ldr	r2, [r2, #8]
 2177 0058 22F48052 		bic	r2, r2, #4096
 2178 005c 9A60     		str	r2, [r3, #8]
1211:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
1212:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 2179              		.loc 1 1212 0
 2180 005e FFF7FEFF 		bl	HAL_GetTick
 2181 0062 F860     		str	r0, [r7, #12]
1213:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
1214:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1215:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 2182              		.loc 1 1215 0
 2183 0064 13E0     		b	.L79
 2184              	.L80:
1216:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     {
ARM GAS  /tmp/ccgQTKgw.s 			page 61


1217:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 2185              		.loc 1 1217 0
 2186 0066 FFF7FEFF 		bl	HAL_GetTick
 2187 006a 0246     		mov	r2, r0
 2188 006c FB68     		ldr	r3, [r7, #12]
 2189 006e D31A     		subs	r3, r2, r3
 2190 0070 B3F57A7F 		cmp	r3, #1000
 2191 0074 0BD9     		bls	.L79
1218:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       { 
1219:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1220:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2192              		.loc 1 1220 0
 2193 0076 7B68     		ldr	r3, [r7, #4]
 2194 0078 1B68     		ldr	r3, [r3]
 2195 007a FF22     		movs	r2, #255
 2196 007c 5A62     		str	r2, [r3, #36]
1221:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         
1222:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 2197              		.loc 1 1222 0
 2198 007e 7B68     		ldr	r3, [r7, #4]
 2199 0080 0322     		movs	r2, #3
 2200 0082 5A77     		strb	r2, [r3, #29]
1223:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         
1224:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         /* Process Unlocked */ 
1225:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 2201              		.loc 1 1225 0
 2202 0084 7B68     		ldr	r3, [r7, #4]
 2203 0086 0022     		movs	r2, #0
 2204 0088 1A77     		strb	r2, [r3, #28]
1226:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         
1227:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         return HAL_TIMEOUT;
 2205              		.loc 1 1227 0
 2206 008a 0323     		movs	r3, #3
 2207 008c 41E0     		b	.L77
 2208              	.L79:
1215:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     {
 2209              		.loc 1 1215 0
 2210 008e 7B68     		ldr	r3, [r7, #4]
 2211 0090 1B68     		ldr	r3, [r3]
 2212 0092 DB68     		ldr	r3, [r3, #12]
 2213 0094 03F00103 		and	r3, r3, #1
 2214 0098 002B     		cmp	r3, #0
 2215 009a E4D0     		beq	.L80
 2216 009c 2EE0     		b	.L81
 2217              	.L78:
1228:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       }      
1229:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     }
1230:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   }
1231:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   else
1232:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   {
1233:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* AlarmB */
1234:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     __HAL_RTC_ALARMB_DISABLE(hrtc);
 2218              		.loc 1 1234 0
 2219 009e 7B68     		ldr	r3, [r7, #4]
 2220 00a0 1B68     		ldr	r3, [r3]
 2221 00a2 7A68     		ldr	r2, [r7, #4]
 2222 00a4 1268     		ldr	r2, [r2]
ARM GAS  /tmp/ccgQTKgw.s 			page 62


 2223 00a6 9268     		ldr	r2, [r2, #8]
 2224 00a8 22F40072 		bic	r2, r2, #512
 2225 00ac 9A60     		str	r2, [r3, #8]
1235:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
1236:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */ 
1237:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc,RTC_IT_ALRB);
 2226              		.loc 1 1237 0
 2227 00ae 7B68     		ldr	r3, [r7, #4]
 2228 00b0 1B68     		ldr	r3, [r3]
 2229 00b2 7A68     		ldr	r2, [r7, #4]
 2230 00b4 1268     		ldr	r2, [r2]
 2231 00b6 9268     		ldr	r2, [r2, #8]
 2232 00b8 22F40052 		bic	r2, r2, #8192
 2233 00bc 9A60     		str	r2, [r3, #8]
1238:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
1239:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 2234              		.loc 1 1239 0
 2235 00be FFF7FEFF 		bl	HAL_GetTick
 2236 00c2 F860     		str	r0, [r7, #12]
1240:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
1241:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1242:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 2237              		.loc 1 1242 0
 2238 00c4 13E0     		b	.L82
 2239              	.L83:
1243:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     {
1244:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 2240              		.loc 1 1244 0
 2241 00c6 FFF7FEFF 		bl	HAL_GetTick
 2242 00ca 0246     		mov	r2, r0
 2243 00cc FB68     		ldr	r3, [r7, #12]
 2244 00ce D31A     		subs	r3, r2, r3
 2245 00d0 B3F57A7F 		cmp	r3, #1000
 2246 00d4 0BD9     		bls	.L82
1245:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       {
1246:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1247:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2247              		.loc 1 1247 0
 2248 00d6 7B68     		ldr	r3, [r7, #4]
 2249 00d8 1B68     		ldr	r3, [r3]
 2250 00da FF22     		movs	r2, #255
 2251 00dc 5A62     		str	r2, [r3, #36]
1248:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         
1249:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 2252              		.loc 1 1249 0
 2253 00de 7B68     		ldr	r3, [r7, #4]
 2254 00e0 0322     		movs	r2, #3
 2255 00e2 5A77     		strb	r2, [r3, #29]
1250:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         
1251:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         /* Process Unlocked */ 
1252:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 2256              		.loc 1 1252 0
 2257 00e4 7B68     		ldr	r3, [r7, #4]
 2258 00e6 0022     		movs	r2, #0
 2259 00e8 1A77     		strb	r2, [r3, #28]
1253:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         
1254:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         return HAL_TIMEOUT;
ARM GAS  /tmp/ccgQTKgw.s 			page 63


 2260              		.loc 1 1254 0
 2261 00ea 0323     		movs	r3, #3
 2262 00ec 11E0     		b	.L77
 2263              	.L82:
1242:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     {
 2264              		.loc 1 1242 0
 2265 00ee 7B68     		ldr	r3, [r7, #4]
 2266 00f0 1B68     		ldr	r3, [r3]
 2267 00f2 DB68     		ldr	r3, [r3, #12]
 2268 00f4 03F00203 		and	r3, r3, #2
 2269 00f8 002B     		cmp	r3, #0
 2270 00fa E4D0     		beq	.L83
 2271              	.L81:
1255:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       }    
1256:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     }
1257:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   }
1258:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
1259:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2272              		.loc 1 1259 0
 2273 00fc 7B68     		ldr	r3, [r7, #4]
 2274 00fe 1B68     		ldr	r3, [r3]
 2275 0100 FF22     		movs	r2, #255
 2276 0102 5A62     		str	r2, [r3, #36]
1260:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
1261:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY; 
 2277              		.loc 1 1261 0
 2278 0104 7B68     		ldr	r3, [r7, #4]
 2279 0106 0122     		movs	r2, #1
 2280 0108 5A77     		strb	r2, [r3, #29]
1262:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
1263:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Process Unlocked */ 
1264:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);  
 2281              		.loc 1 1264 0
 2282 010a 7B68     		ldr	r3, [r7, #4]
 2283 010c 0022     		movs	r2, #0
 2284 010e 1A77     		strb	r2, [r3, #28]
1265:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
1266:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   return HAL_OK; 
 2285              		.loc 1 1266 0
 2286 0110 0023     		movs	r3, #0
 2287              	.L77:
1267:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** }
 2288              		.loc 1 1267 0
 2289 0112 1846     		mov	r0, r3
 2290 0114 1037     		adds	r7, r7, #16
 2291              	.LCFI55:
 2292              		.cfi_def_cfa_offset 8
 2293 0116 BD46     		mov	sp, r7
 2294              	.LCFI56:
 2295              		.cfi_def_cfa_register 13
 2296              		@ sp needed
 2297 0118 80BD     		pop	{r7, pc}
 2298              		.cfi_endproc
 2299              	.LFE133:
 2301 011a 00BF     		.section	.text.HAL_RTC_GetAlarm,"ax",%progbits
 2302              		.align	2
 2303              		.global	HAL_RTC_GetAlarm
ARM GAS  /tmp/ccgQTKgw.s 			page 64


 2304              		.thumb
 2305              		.thumb_func
 2307              	HAL_RTC_GetAlarm:
 2308              	.LFB134:
1268:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****            
1269:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** /**
1270:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @brief  Get the RTC Alarm value and masks.
1271:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @param  hrtc RTC handle
1272:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @param  sAlarm Pointer to Date structure
1273:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @param  Alarm Specifies the Alarm.
1274:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1275:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *             @arg RTC_ALARM_A: AlarmA
1276:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *             @arg RTC_ALARM_B: AlarmB  
1277:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
1278:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1279:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BIN: Binary data format 
1280:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BCD: BCD data format
1281:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @retval HAL status
1282:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   */
1283:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alar
1284:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** {
 2309              		.loc 1 1284 0
 2310              		.cfi_startproc
 2311              		@ args = 0, pretend = 0, frame = 24
 2312              		@ frame_needed = 1, uses_anonymous_args = 0
 2313 0000 80B5     		push	{r7, lr}
 2314              	.LCFI57:
 2315              		.cfi_def_cfa_offset 8
 2316              		.cfi_offset 7, -8
 2317              		.cfi_offset 14, -4
 2318 0002 86B0     		sub	sp, sp, #24
 2319              	.LCFI58:
 2320              		.cfi_def_cfa_offset 32
 2321 0004 00AF     		add	r7, sp, #0
 2322              	.LCFI59:
 2323              		.cfi_def_cfa_register 7
 2324 0006 F860     		str	r0, [r7, #12]
 2325 0008 B960     		str	r1, [r7, #8]
 2326 000a 7A60     		str	r2, [r7, #4]
 2327 000c 3B60     		str	r3, [r7]
1285:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 2328              		.loc 1 1285 0
 2329 000e 0023     		movs	r3, #0
 2330 0010 7B61     		str	r3, [r7, #20]
 2331 0012 0023     		movs	r3, #0
 2332 0014 3B61     		str	r3, [r7, #16]
1286:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
1287:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Check the parameters */
1288:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
1289:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(Alarm));
1290:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
1291:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   if(Alarm == RTC_ALARM_A)
 2333              		.loc 1 1291 0
 2334 0016 7B68     		ldr	r3, [r7, #4]
 2335 0018 B3F5807F 		cmp	r3, #256
 2336 001c 0ED1     		bne	.L85
1292:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   {
ARM GAS  /tmp/ccgQTKgw.s 			page 65


1293:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* AlarmA */
1294:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     sAlarm->Alarm = RTC_ALARM_A;
 2337              		.loc 1 1294 0
 2338 001e BB68     		ldr	r3, [r7, #8]
 2339 0020 4FF48072 		mov	r2, #256
 2340 0024 5A62     		str	r2, [r3, #36]
1295:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
1296:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 2341              		.loc 1 1296 0
 2342 0026 FB68     		ldr	r3, [r7, #12]
 2343 0028 1B68     		ldr	r3, [r3]
 2344 002a DB69     		ldr	r3, [r3, #28]
 2345 002c 7B61     		str	r3, [r7, #20]
1297:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 2346              		.loc 1 1297 0
 2347 002e FB68     		ldr	r3, [r7, #12]
 2348 0030 1B68     		ldr	r3, [r3]
 2349 0032 5B6C     		ldr	r3, [r3, #68]
 2350 0034 C3F30E03 		ubfx	r3, r3, #0, #15
 2351 0038 3B61     		str	r3, [r7, #16]
 2352 003a 0DE0     		b	.L86
 2353              	.L85:
1298:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   }
1299:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   else
1300:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   {
1301:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     sAlarm->Alarm = RTC_ALARM_B;
 2354              		.loc 1 1301 0
 2355 003c BB68     		ldr	r3, [r7, #8]
 2356 003e 4FF40072 		mov	r2, #512
 2357 0042 5A62     		str	r2, [r3, #36]
1302:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
1303:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 2358              		.loc 1 1303 0
 2359 0044 FB68     		ldr	r3, [r7, #12]
 2360 0046 1B68     		ldr	r3, [r3]
 2361 0048 1B6A     		ldr	r3, [r3, #32]
 2362 004a 7B61     		str	r3, [r7, #20]
1304:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 2363              		.loc 1 1304 0
 2364 004c FB68     		ldr	r3, [r7, #12]
 2365 004e 1B68     		ldr	r3, [r3]
 2366 0050 9B6C     		ldr	r3, [r3, #72]
 2367 0052 C3F30E03 		ubfx	r3, r3, #0, #15
 2368 0056 3B61     		str	r3, [r7, #16]
 2369              	.L86:
1305:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   }
1306:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
1307:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Fill the structure with the read parameters */
1308:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   sAlarm->AlarmTime.Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> 16U);
 2370              		.loc 1 1308 0
 2371 0058 7B69     		ldr	r3, [r7, #20]
 2372 005a 03F47C13 		and	r3, r3, #4128768
 2373 005e 1B0C     		lsrs	r3, r3, #16
 2374 0060 DAB2     		uxtb	r2, r3
 2375 0062 BB68     		ldr	r3, [r7, #8]
 2376 0064 1A70     		strb	r2, [r3]
1309:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   sAlarm->AlarmTime.Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> 8U);
ARM GAS  /tmp/ccgQTKgw.s 			page 66


 2377              		.loc 1 1309 0
 2378 0066 7B69     		ldr	r3, [r7, #20]
 2379 0068 03F4FE43 		and	r3, r3, #32512
 2380 006c 1B0A     		lsrs	r3, r3, #8
 2381 006e DAB2     		uxtb	r2, r3
 2382 0070 BB68     		ldr	r3, [r7, #8]
 2383 0072 5A70     		strb	r2, [r3, #1]
1310:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   sAlarm->AlarmTime.Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU));
 2384              		.loc 1 1310 0
 2385 0074 7B69     		ldr	r3, [r7, #20]
 2386 0076 DBB2     		uxtb	r3, r3
 2387 0078 03F07F03 		and	r3, r3, #127
 2388 007c DAB2     		uxtb	r2, r3
 2389 007e BB68     		ldr	r3, [r7, #8]
 2390 0080 9A70     		strb	r2, [r3, #2]
1311:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   sAlarm->AlarmTime.TimeFormat = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16U);
 2391              		.loc 1 1311 0
 2392 0082 7B69     		ldr	r3, [r7, #20]
 2393 0084 03F48003 		and	r3, r3, #4194304
 2394 0088 1B0C     		lsrs	r3, r3, #16
 2395 008a DAB2     		uxtb	r2, r3
 2396 008c BB68     		ldr	r3, [r7, #8]
 2397 008e DA70     		strb	r2, [r3, #3]
1312:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 2398              		.loc 1 1312 0
 2399 0090 BB68     		ldr	r3, [r7, #8]
 2400 0092 3A69     		ldr	r2, [r7, #16]
 2401 0094 5A60     		str	r2, [r3, #4]
1313:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24U);
 2402              		.loc 1 1313 0
 2403 0096 7B69     		ldr	r3, [r7, #20]
 2404 0098 03F07C53 		and	r3, r3, #1056964608
 2405 009c 1B0E     		lsrs	r3, r3, #24
 2406 009e DAB2     		uxtb	r2, r3
 2407 00a0 BB68     		ldr	r3, [r7, #8]
 2408 00a2 83F82020 		strb	r2, [r3, #32]
1314:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 2409              		.loc 1 1314 0
 2410 00a6 7B69     		ldr	r3, [r7, #20]
 2411 00a8 03F08042 		and	r2, r3, #1073741824
 2412 00ac BB68     		ldr	r3, [r7, #8]
 2413 00ae DA61     		str	r2, [r3, #28]
1315:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 2414              		.loc 1 1315 0
 2415 00b0 7B69     		ldr	r3, [r7, #20]
 2416 00b2 03F08032 		and	r2, r3, #-2139062144
 2417 00b6 BB68     		ldr	r3, [r7, #8]
 2418 00b8 5A61     		str	r2, [r3, #20]
1316:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
1317:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 2419              		.loc 1 1317 0
 2420 00ba 3B68     		ldr	r3, [r7]
 2421 00bc 002B     		cmp	r3, #0
 2422 00be 25D1     		bne	.L87
1318:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   {
1319:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 2423              		.loc 1 1319 0
ARM GAS  /tmp/ccgQTKgw.s 			page 67


 2424 00c0 BB68     		ldr	r3, [r7, #8]
 2425 00c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2426 00c4 1846     		mov	r0, r3
 2427 00c6 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2428 00ca 0346     		mov	r3, r0
 2429 00cc 1A46     		mov	r2, r3
 2430 00ce BB68     		ldr	r3, [r7, #8]
 2431 00d0 1A70     		strb	r2, [r3]
1320:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 2432              		.loc 1 1320 0
 2433 00d2 BB68     		ldr	r3, [r7, #8]
 2434 00d4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2435 00d6 1846     		mov	r0, r3
 2436 00d8 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2437 00dc 0346     		mov	r3, r0
 2438 00de 1A46     		mov	r2, r3
 2439 00e0 BB68     		ldr	r3, [r7, #8]
 2440 00e2 5A70     		strb	r2, [r3, #1]
1321:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 2441              		.loc 1 1321 0
 2442 00e4 BB68     		ldr	r3, [r7, #8]
 2443 00e6 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 2444 00e8 1846     		mov	r0, r3
 2445 00ea FFF7FEFF 		bl	RTC_Bcd2ToByte
 2446 00ee 0346     		mov	r3, r0
 2447 00f0 1A46     		mov	r2, r3
 2448 00f2 BB68     		ldr	r3, [r7, #8]
 2449 00f4 9A70     		strb	r2, [r3, #2]
1322:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 2450              		.loc 1 1322 0
 2451 00f6 BB68     		ldr	r3, [r7, #8]
 2452 00f8 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2453 00fc 1846     		mov	r0, r3
 2454 00fe FFF7FEFF 		bl	RTC_Bcd2ToByte
 2455 0102 0346     		mov	r3, r0
 2456 0104 1A46     		mov	r2, r3
 2457 0106 BB68     		ldr	r3, [r7, #8]
 2458 0108 83F82020 		strb	r2, [r3, #32]
 2459              	.L87:
1323:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   }  
1324:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
1325:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   return HAL_OK;
 2460              		.loc 1 1325 0
 2461 010c 0023     		movs	r3, #0
1326:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** }
 2462              		.loc 1 1326 0
 2463 010e 1846     		mov	r0, r3
 2464 0110 1837     		adds	r7, r7, #24
 2465              	.LCFI60:
 2466              		.cfi_def_cfa_offset 8
 2467 0112 BD46     		mov	sp, r7
 2468              	.LCFI61:
 2469              		.cfi_def_cfa_register 13
 2470              		@ sp needed
 2471 0114 80BD     		pop	{r7, pc}
 2472              		.cfi_endproc
 2473              	.LFE134:
ARM GAS  /tmp/ccgQTKgw.s 			page 68


 2475 0116 00BF     		.section	.text.HAL_RTC_AlarmIRQHandler,"ax",%progbits
 2476              		.align	2
 2477              		.global	HAL_RTC_AlarmIRQHandler
 2478              		.thumb
 2479              		.thumb_func
 2481              	HAL_RTC_AlarmIRQHandler:
 2482              	.LFB135:
1327:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
1328:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** /**
1329:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @brief  Handle Alarm interrupt request.
1330:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @param  hrtc RTC handle
1331:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @retval None
1332:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   */
1333:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
1334:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** {  
 2483              		.loc 1 1334 0
 2484              		.cfi_startproc
 2485              		@ args = 0, pretend = 0, frame = 8
 2486              		@ frame_needed = 1, uses_anonymous_args = 0
 2487 0000 80B5     		push	{r7, lr}
 2488              	.LCFI62:
 2489              		.cfi_def_cfa_offset 8
 2490              		.cfi_offset 7, -8
 2491              		.cfi_offset 14, -4
 2492 0002 82B0     		sub	sp, sp, #8
 2493              	.LCFI63:
 2494              		.cfi_def_cfa_offset 16
 2495 0004 00AF     		add	r7, sp, #0
 2496              	.LCFI64:
 2497              		.cfi_def_cfa_register 7
 2498 0006 7860     		str	r0, [r7, #4]
1335:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Get the AlarmA interrupt source enable status */
1336:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 2499              		.loc 1 1336 0
 2500 0008 7B68     		ldr	r3, [r7, #4]
 2501 000a 1B68     		ldr	r3, [r3]
 2502 000c 9B68     		ldr	r3, [r3, #8]
 2503 000e 03F48053 		and	r3, r3, #4096
 2504 0012 002B     		cmp	r3, #0
 2505 0014 12D0     		beq	.L90
1337:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   {
1338:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Get the pending status of the AlarmA Interrupt */
1339:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 2506              		.loc 1 1339 0
 2507 0016 7B68     		ldr	r3, [r7, #4]
 2508 0018 1B68     		ldr	r3, [r3]
 2509 001a DB68     		ldr	r3, [r3, #12]
 2510 001c 03F48073 		and	r3, r3, #256
 2511 0020 002B     		cmp	r3, #0
 2512 0022 0BD0     		beq	.L90
1340:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     {
1341:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       /* AlarmA callback */ 
1342:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       HAL_RTC_AlarmAEventCallback(hrtc);
 2513              		.loc 1 1342 0
 2514 0024 7868     		ldr	r0, [r7, #4]
 2515 0026 FFF7FEFF 		bl	HAL_RTC_AlarmAEventCallback
1343:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       
ARM GAS  /tmp/ccgQTKgw.s 			page 69


1344:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       /* Clear the AlarmA interrupt pending bit */
1345:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 2516              		.loc 1 1345 0
 2517 002a 7B68     		ldr	r3, [r7, #4]
 2518 002c 1B68     		ldr	r3, [r3]
 2519 002e 7A68     		ldr	r2, [r7, #4]
 2520 0030 1268     		ldr	r2, [r2]
 2521 0032 D268     		ldr	r2, [r2, #12]
 2522 0034 D2B2     		uxtb	r2, r2
 2523 0036 62F4C072 		orn	r2, r2, #384
 2524 003a DA60     		str	r2, [r3, #12]
 2525              	.L90:
1346:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     }
1347:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   }
1348:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
1349:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Get the AlarmB interrupt source enable status */
1350:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != RESET)
 2526              		.loc 1 1350 0
 2527 003c 7B68     		ldr	r3, [r7, #4]
 2528 003e 1B68     		ldr	r3, [r3]
 2529 0040 9B68     		ldr	r3, [r3, #8]
 2530 0042 03F40053 		and	r3, r3, #8192
 2531 0046 002B     		cmp	r3, #0
 2532 0048 12D0     		beq	.L91
1351:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   {
1352:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Get the pending status of the AlarmB Interrupt */
1353:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != RESET)
 2533              		.loc 1 1353 0
 2534 004a 7B68     		ldr	r3, [r7, #4]
 2535 004c 1B68     		ldr	r3, [r3]
 2536 004e DB68     		ldr	r3, [r3, #12]
 2537 0050 03F40073 		and	r3, r3, #512
 2538 0054 002B     		cmp	r3, #0
 2539 0056 0BD0     		beq	.L91
1354:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     {
1355:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       /* AlarmB callback */ 
1356:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       HAL_RTCEx_AlarmBEventCallback(hrtc);
 2540              		.loc 1 1356 0
 2541 0058 7868     		ldr	r0, [r7, #4]
 2542 005a FFF7FEFF 		bl	HAL_RTCEx_AlarmBEventCallback
1357:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       
1358:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       /* Clear the AlarmB interrupt pending bit */
1359:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 2543              		.loc 1 1359 0
 2544 005e 7B68     		ldr	r3, [r7, #4]
 2545 0060 1B68     		ldr	r3, [r3]
 2546 0062 7A68     		ldr	r2, [r7, #4]
 2547 0064 1268     		ldr	r2, [r2]
 2548 0066 D268     		ldr	r2, [r2, #12]
 2549 0068 D2B2     		uxtb	r2, r2
 2550 006a 62F42072 		orn	r2, r2, #640
 2551 006e DA60     		str	r2, [r3, #12]
 2552              	.L91:
1360:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     }
1361:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   }
1362:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
1363:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Clear the EXTI's line Flag for RTC Alarm */
ARM GAS  /tmp/ccgQTKgw.s 			page 70


1364:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 2553              		.loc 1 1364 0
 2554 0070 044B     		ldr	r3, .L92
 2555 0072 4FF40032 		mov	r2, #131072
 2556 0076 5A61     		str	r2, [r3, #20]
1365:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
1366:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Change RTC state */
1367:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY; 
 2557              		.loc 1 1367 0
 2558 0078 7B68     		ldr	r3, [r7, #4]
 2559 007a 0122     		movs	r2, #1
 2560 007c 5A77     		strb	r2, [r3, #29]
1368:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** }
 2561              		.loc 1 1368 0
 2562 007e 0837     		adds	r7, r7, #8
 2563              	.LCFI65:
 2564              		.cfi_def_cfa_offset 8
 2565 0080 BD46     		mov	sp, r7
 2566              	.LCFI66:
 2567              		.cfi_def_cfa_register 13
 2568              		@ sp needed
 2569 0082 80BD     		pop	{r7, pc}
 2570              	.L93:
 2571              		.align	2
 2572              	.L92:
 2573 0084 00040140 		.word	1073808384
 2574              		.cfi_endproc
 2575              	.LFE135:
 2577              		.section	.text.HAL_RTC_AlarmAEventCallback,"ax",%progbits
 2578              		.align	2
 2579              		.weak	HAL_RTC_AlarmAEventCallback
 2580              		.thumb
 2581              		.thumb_func
 2583              	HAL_RTC_AlarmAEventCallback:
 2584              	.LFB136:
1369:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
1370:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** /**
1371:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @brief  Alarm A callback.
1372:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @param  hrtc RTC handle
1373:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @retval None
1374:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   */
1375:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** __weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
1376:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** {
 2585              		.loc 1 1376 0
 2586              		.cfi_startproc
 2587              		@ args = 0, pretend = 0, frame = 8
 2588              		@ frame_needed = 1, uses_anonymous_args = 0
 2589              		@ link register save eliminated.
 2590 0000 80B4     		push	{r7}
 2591              	.LCFI67:
 2592              		.cfi_def_cfa_offset 4
 2593              		.cfi_offset 7, -4
 2594 0002 83B0     		sub	sp, sp, #12
 2595              	.LCFI68:
 2596              		.cfi_def_cfa_offset 16
 2597 0004 00AF     		add	r7, sp, #0
 2598              	.LCFI69:
ARM GAS  /tmp/ccgQTKgw.s 			page 71


 2599              		.cfi_def_cfa_register 7
 2600 0006 7860     		str	r0, [r7, #4]
1377:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Prevent unused argument(s) compilation warning */
1378:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   UNUSED(hrtc);
1379:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
1380:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1381:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****             the HAL_RTC_AlarmAEventCallback could be implemented in the user file
1382:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****    */
1383:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** }
 2601              		.loc 1 1383 0
 2602 0008 0C37     		adds	r7, r7, #12
 2603              	.LCFI70:
 2604              		.cfi_def_cfa_offset 4
 2605 000a BD46     		mov	sp, r7
 2606              	.LCFI71:
 2607              		.cfi_def_cfa_register 13
 2608              		@ sp needed
 2609 000c 5DF8047B 		ldr	r7, [sp], #4
 2610              	.LCFI72:
 2611              		.cfi_restore 7
 2612              		.cfi_def_cfa_offset 0
 2613 0010 7047     		bx	lr
 2614              		.cfi_endproc
 2615              	.LFE136:
 2617 0012 00BF     		.section	.text.HAL_RTC_PollForAlarmAEvent,"ax",%progbits
 2618              		.align	2
 2619              		.global	HAL_RTC_PollForAlarmAEvent
 2620              		.thumb
 2621              		.thumb_func
 2623              	HAL_RTC_PollForAlarmAEvent:
 2624              	.LFB137:
1384:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
1385:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** /**
1386:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @brief  Handle AlarmA Polling request.
1387:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @param  hrtc RTC handle
1388:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @param  Timeout Timeout duration
1389:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @retval HAL status
1390:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   */
1391:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_PollForAlarmAEvent(RTC_HandleTypeDef *hrtc, uint32_t Timeout)
1392:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** {  
 2625              		.loc 1 1392 0
 2626              		.cfi_startproc
 2627              		@ args = 0, pretend = 0, frame = 16
 2628              		@ frame_needed = 1, uses_anonymous_args = 0
 2629 0000 80B5     		push	{r7, lr}
 2630              	.LCFI73:
 2631              		.cfi_def_cfa_offset 8
 2632              		.cfi_offset 7, -8
 2633              		.cfi_offset 14, -4
 2634 0002 84B0     		sub	sp, sp, #16
 2635              	.LCFI74:
 2636              		.cfi_def_cfa_offset 24
 2637 0004 00AF     		add	r7, sp, #0
 2638              	.LCFI75:
 2639              		.cfi_def_cfa_register 7
 2640 0006 7860     		str	r0, [r7, #4]
 2641 0008 3960     		str	r1, [r7]
ARM GAS  /tmp/ccgQTKgw.s 			page 72


1393:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
1394:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   uint32_t tickstart = HAL_GetTick();   
 2642              		.loc 1 1394 0
 2643 000a FFF7FEFF 		bl	HAL_GetTick
 2644 000e F860     		str	r0, [r7, #12]
1395:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
1396:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) == RESET)
 2645              		.loc 1 1396 0
 2646 0010 13E0     		b	.L96
 2647              	.L99:
1397:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   {
1398:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     if(Timeout != HAL_MAX_DELAY)
 2648              		.loc 1 1398 0
 2649 0012 3B68     		ldr	r3, [r7]
 2650 0014 B3F1FF3F 		cmp	r3, #-1
 2651 0018 0FD0     		beq	.L96
1399:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     {
1400:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 2652              		.loc 1 1400 0
 2653 001a 3B68     		ldr	r3, [r7]
 2654 001c 002B     		cmp	r3, #0
 2655 001e 07D0     		beq	.L97
 2656              		.loc 1 1400 0 is_stmt 0 discriminator 1
 2657 0020 FFF7FEFF 		bl	HAL_GetTick
 2658 0024 0246     		mov	r2, r0
 2659 0026 FB68     		ldr	r3, [r7, #12]
 2660 0028 D21A     		subs	r2, r2, r3
 2661 002a 3B68     		ldr	r3, [r7]
 2662 002c 9A42     		cmp	r2, r3
 2663 002e 04D9     		bls	.L96
 2664              	.L97:
1401:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       {
1402:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 2665              		.loc 1 1402 0 is_stmt 1
 2666 0030 7B68     		ldr	r3, [r7, #4]
 2667 0032 0322     		movs	r2, #3
 2668 0034 5A77     		strb	r2, [r3, #29]
1403:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         return HAL_TIMEOUT;
 2669              		.loc 1 1403 0
 2670 0036 0323     		movs	r3, #3
 2671 0038 13E0     		b	.L98
 2672              	.L96:
1396:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   {
 2673              		.loc 1 1396 0
 2674 003a 7B68     		ldr	r3, [r7, #4]
 2675 003c 1B68     		ldr	r3, [r3]
 2676 003e DB68     		ldr	r3, [r3, #12]
 2677 0040 03F48073 		and	r3, r3, #256
 2678 0044 002B     		cmp	r3, #0
 2679 0046 E4D0     		beq	.L99
1404:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       }
1405:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     }
1406:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   }
1407:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
1408:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Clear the Alarm interrupt pending bit */
1409:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 2680              		.loc 1 1409 0
ARM GAS  /tmp/ccgQTKgw.s 			page 73


 2681 0048 7B68     		ldr	r3, [r7, #4]
 2682 004a 1B68     		ldr	r3, [r3]
 2683 004c 7A68     		ldr	r2, [r7, #4]
 2684 004e 1268     		ldr	r2, [r2]
 2685 0050 D268     		ldr	r2, [r2, #12]
 2686 0052 D2B2     		uxtb	r2, r2
 2687 0054 62F4C072 		orn	r2, r2, #384
 2688 0058 DA60     		str	r2, [r3, #12]
1410:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
1411:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Change RTC state */
1412:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY; 
 2689              		.loc 1 1412 0
 2690 005a 7B68     		ldr	r3, [r7, #4]
 2691 005c 0122     		movs	r2, #1
 2692 005e 5A77     		strb	r2, [r3, #29]
1413:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
1414:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   return HAL_OK;  
 2693              		.loc 1 1414 0
 2694 0060 0023     		movs	r3, #0
 2695              	.L98:
1415:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** }
 2696              		.loc 1 1415 0
 2697 0062 1846     		mov	r0, r3
 2698 0064 1037     		adds	r7, r7, #16
 2699              	.LCFI76:
 2700              		.cfi_def_cfa_offset 8
 2701 0066 BD46     		mov	sp, r7
 2702              	.LCFI77:
 2703              		.cfi_def_cfa_register 13
 2704              		@ sp needed
 2705 0068 80BD     		pop	{r7, pc}
 2706              		.cfi_endproc
 2707              	.LFE137:
 2709              		.section	.text.HAL_RTC_WaitForSynchro,"ax",%progbits
 2710              		.align	2
 2711              		.global	HAL_RTC_WaitForSynchro
 2712              		.thumb
 2713              		.thumb_func
 2715              	HAL_RTC_WaitForSynchro:
 2716              	.LFB138:
1416:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
1417:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** /**
1418:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @}
1419:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   */
1420:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
1421:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** /** @@addtogroup RTC_Exported_Functions_Group4 Peripheral Control functions 
1422:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****  *  @brief   Peripheral Control functions 
1423:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****  *
1424:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** @verbatim   
1425:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****  ===============================================================================
1426:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****                      ##### Peripheral Control functions #####
1427:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****  ===============================================================================  
1428:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     [..]
1429:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     This subsection provides functions allowing to
1430:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       (+) Wait for RTC Time and Date Synchronization
1431:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
1432:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** @endverbatim
ARM GAS  /tmp/ccgQTKgw.s 			page 74


1433:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @{
1434:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   */
1435:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
1436:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** /**
1437:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @brief  Wait until the RTC Time and Date registers (RTC_TR and RTC_DR) are
1438:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *         synchronized with RTC APB clock.
1439:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @note   The RTC Resynchronization mode is write protected, use the 
1440:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function. 
1441:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @note   To read the calendar through the shadow registers after Calendar 
1442:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *         initialization, calendar update or after wakeup from low power modes 
1443:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *         the software must first clear the RSF flag. 
1444:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *         The software must then wait until it is set again before reading 
1445:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *         the calendar, which means that the calendar registers have been 
1446:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *         correctly copied into the RTC_TR and RTC_DR shadow registers.   
1447:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @param  hrtc RTC handle
1448:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @retval HAL status
1449:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   */
1450:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
1451:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** {
 2717              		.loc 1 1451 0
 2718              		.cfi_startproc
 2719              		@ args = 0, pretend = 0, frame = 16
 2720              		@ frame_needed = 1, uses_anonymous_args = 0
 2721 0000 80B5     		push	{r7, lr}
 2722              	.LCFI78:
 2723              		.cfi_def_cfa_offset 8
 2724              		.cfi_offset 7, -8
 2725              		.cfi_offset 14, -4
 2726 0002 84B0     		sub	sp, sp, #16
 2727              	.LCFI79:
 2728              		.cfi_def_cfa_offset 24
 2729 0004 00AF     		add	r7, sp, #0
 2730              	.LCFI80:
 2731              		.cfi_def_cfa_register 7
 2732 0006 7860     		str	r0, [r7, #4]
1452:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   uint32_t tickstart = 0U;
 2733              		.loc 1 1452 0
 2734 0008 0023     		movs	r3, #0
 2735 000a FB60     		str	r3, [r7, #12]
1453:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
1454:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Clear RSF flag */
1455:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 2736              		.loc 1 1455 0
 2737 000c 7B68     		ldr	r3, [r7, #4]
 2738 000e 1B68     		ldr	r3, [r3]
 2739 0010 7A68     		ldr	r2, [r7, #4]
 2740 0012 1268     		ldr	r2, [r2]
 2741 0014 D268     		ldr	r2, [r2, #12]
 2742 0016 22F0A002 		bic	r2, r2, #160
 2743 001a DA60     		str	r2, [r3, #12]
1456:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
1457:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   tickstart = HAL_GetTick();
 2744              		.loc 1 1457 0
 2745 001c FFF7FEFF 		bl	HAL_GetTick
 2746 0020 F860     		str	r0, [r7, #12]
1458:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
1459:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Wait the registers to be synchronised */
ARM GAS  /tmp/ccgQTKgw.s 			page 75


1460:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 2747              		.loc 1 1460 0
 2748 0022 09E0     		b	.L101
 2749              	.L103:
1461:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   {
1462:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 2750              		.loc 1 1462 0
 2751 0024 FFF7FEFF 		bl	HAL_GetTick
 2752 0028 0246     		mov	r2, r0
 2753 002a FB68     		ldr	r3, [r7, #12]
 2754 002c D31A     		subs	r3, r2, r3
 2755 002e B3F57A7F 		cmp	r3, #1000
 2756 0032 01D9     		bls	.L101
1463:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     {       
1464:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       return HAL_TIMEOUT;
 2757              		.loc 1 1464 0
 2758 0034 0323     		movs	r3, #3
 2759 0036 07E0     		b	.L102
 2760              	.L101:
1460:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   {
 2761              		.loc 1 1460 0
 2762 0038 7B68     		ldr	r3, [r7, #4]
 2763 003a 1B68     		ldr	r3, [r3]
 2764 003c DB68     		ldr	r3, [r3, #12]
 2765 003e 03F02003 		and	r3, r3, #32
 2766 0042 002B     		cmp	r3, #0
 2767 0044 EED0     		beq	.L103
1465:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     } 
1466:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   }
1467:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
1468:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   return HAL_OK;
 2768              		.loc 1 1468 0
 2769 0046 0023     		movs	r3, #0
 2770              	.L102:
1469:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** }
 2771              		.loc 1 1469 0
 2772 0048 1846     		mov	r0, r3
 2773 004a 1037     		adds	r7, r7, #16
 2774              	.LCFI81:
 2775              		.cfi_def_cfa_offset 8
 2776 004c BD46     		mov	sp, r7
 2777              	.LCFI82:
 2778              		.cfi_def_cfa_register 13
 2779              		@ sp needed
 2780 004e 80BD     		pop	{r7, pc}
 2781              		.cfi_endproc
 2782              	.LFE138:
 2784              		.section	.text.HAL_RTC_GetState,"ax",%progbits
 2785              		.align	2
 2786              		.global	HAL_RTC_GetState
 2787              		.thumb
 2788              		.thumb_func
 2790              	HAL_RTC_GetState:
 2791              	.LFB139:
1470:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
1471:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** /**
1472:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @}
ARM GAS  /tmp/ccgQTKgw.s 			page 76


1473:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   */
1474:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
1475:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** /** @@addtogroup RTC_Exported_Functions_Group5 Peripheral State functions
1476:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****  *  @brief   Peripheral State functions 
1477:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****  *
1478:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** @verbatim   
1479:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****  ===============================================================================
1480:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****                      ##### Peripheral State functions #####
1481:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****  ===============================================================================  
1482:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     [..]
1483:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     This subsection provides functions allowing to
1484:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       (+) Get RTC state
1485:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
1486:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** @endverbatim
1487:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @{
1488:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   */
1489:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** /**
1490:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @brief  Return the RTC handle state.
1491:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @param  hrtc RTC handle
1492:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @retval HAL state
1493:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   */
1494:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** HAL_RTCStateTypeDef HAL_RTC_GetState(RTC_HandleTypeDef* hrtc)
1495:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** {
 2792              		.loc 1 1495 0
 2793              		.cfi_startproc
 2794              		@ args = 0, pretend = 0, frame = 8
 2795              		@ frame_needed = 1, uses_anonymous_args = 0
 2796              		@ link register save eliminated.
 2797 0000 80B4     		push	{r7}
 2798              	.LCFI83:
 2799              		.cfi_def_cfa_offset 4
 2800              		.cfi_offset 7, -4
 2801 0002 83B0     		sub	sp, sp, #12
 2802              	.LCFI84:
 2803              		.cfi_def_cfa_offset 16
 2804 0004 00AF     		add	r7, sp, #0
 2805              	.LCFI85:
 2806              		.cfi_def_cfa_register 7
 2807 0006 7860     		str	r0, [r7, #4]
1496:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Return RTC handle state */
1497:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   return hrtc->State;
 2808              		.loc 1 1497 0
 2809 0008 7B68     		ldr	r3, [r7, #4]
 2810 000a 5B7F     		ldrb	r3, [r3, #29]
 2811 000c DBB2     		uxtb	r3, r3
1498:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** }
 2812              		.loc 1 1498 0
 2813 000e 1846     		mov	r0, r3
 2814 0010 0C37     		adds	r7, r7, #12
 2815              	.LCFI86:
 2816              		.cfi_def_cfa_offset 4
 2817 0012 BD46     		mov	sp, r7
 2818              	.LCFI87:
 2819              		.cfi_def_cfa_register 13
 2820              		@ sp needed
 2821 0014 5DF8047B 		ldr	r7, [sp], #4
 2822              	.LCFI88:
ARM GAS  /tmp/ccgQTKgw.s 			page 77


 2823              		.cfi_restore 7
 2824              		.cfi_def_cfa_offset 0
 2825 0018 7047     		bx	lr
 2826              		.cfi_endproc
 2827              	.LFE139:
 2829 001a 00BF     		.section	.text.RTC_EnterInitMode,"ax",%progbits
 2830              		.align	2
 2831              		.global	RTC_EnterInitMode
 2832              		.thumb
 2833              		.thumb_func
 2835              	RTC_EnterInitMode:
 2836              	.LFB140:
1499:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
1500:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** /**
1501:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @}
1502:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   */
1503:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
1504:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** /**
1505:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @}
1506:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   */
1507:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
1508:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** /** @@addtogroup RTC_Private_Functions RTC Private Functions
1509:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @{
1510:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   */
1511:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
1512:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** /**
1513:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @brief  Enter the RTC Initialization mode.
1514:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the
1515:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
1516:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @param  hrtc RTC handle
1517:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @retval An ErrorStatus enumeration value:
1518:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *          - HAL_OK : RTC is in Init mode
1519:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout 
1520:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   */
1521:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
1522:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** {
 2837              		.loc 1 1522 0
 2838              		.cfi_startproc
 2839              		@ args = 0, pretend = 0, frame = 16
 2840              		@ frame_needed = 1, uses_anonymous_args = 0
 2841 0000 80B5     		push	{r7, lr}
 2842              	.LCFI89:
 2843              		.cfi_def_cfa_offset 8
 2844              		.cfi_offset 7, -8
 2845              		.cfi_offset 14, -4
 2846 0002 84B0     		sub	sp, sp, #16
 2847              	.LCFI90:
 2848              		.cfi_def_cfa_offset 24
 2849 0004 00AF     		add	r7, sp, #0
 2850              	.LCFI91:
 2851              		.cfi_def_cfa_register 7
 2852 0006 7860     		str	r0, [r7, #4]
1523:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   uint32_t tickstart = 0U;
 2853              		.loc 1 1523 0
 2854 0008 0023     		movs	r3, #0
 2855 000a FB60     		str	r3, [r7, #12]
1524:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
ARM GAS  /tmp/ccgQTKgw.s 			page 78


1525:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   /* Check if the Initialization mode is set */
1526:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 2856              		.loc 1 1526 0
 2857 000c 7B68     		ldr	r3, [r7, #4]
 2858 000e 1B68     		ldr	r3, [r3]
 2859 0010 DB68     		ldr	r3, [r3, #12]
 2860 0012 03F04003 		and	r3, r3, #64
 2861 0016 002B     		cmp	r3, #0
 2862 0018 19D1     		bne	.L107
1527:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   {
1528:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Set the Initialization mode */
1529:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 2863              		.loc 1 1529 0
 2864 001a 7B68     		ldr	r3, [r7, #4]
 2865 001c 1B68     		ldr	r3, [r3]
 2866 001e 4FF0FF32 		mov	r2, #-1
 2867 0022 DA60     		str	r2, [r3, #12]
1530:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     
1531:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 2868              		.loc 1 1531 0
 2869 0024 FFF7FEFF 		bl	HAL_GetTick
 2870 0028 F860     		str	r0, [r7, #12]
1532:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     /* Wait till RTC is in INIT state and if Time out is reached exit */
1533:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 2871              		.loc 1 1533 0
 2872 002a 09E0     		b	.L108
 2873              	.L110:
1534:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     {
1535:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 2874              		.loc 1 1535 0
 2875 002c FFF7FEFF 		bl	HAL_GetTick
 2876 0030 0246     		mov	r2, r0
 2877 0032 FB68     		ldr	r3, [r7, #12]
 2878 0034 D31A     		subs	r3, r2, r3
 2879 0036 B3F57A7F 		cmp	r3, #1000
 2880 003a 01D9     		bls	.L108
1536:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       {       
1537:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****         return HAL_TIMEOUT;
 2881              		.loc 1 1537 0
 2882 003c 0323     		movs	r3, #3
 2883 003e 07E0     		b	.L109
 2884              	.L108:
1533:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     {
 2885              		.loc 1 1533 0
 2886 0040 7B68     		ldr	r3, [r7, #4]
 2887 0042 1B68     		ldr	r3, [r3]
 2888 0044 DB68     		ldr	r3, [r3, #12]
 2889 0046 03F04003 		and	r3, r3, #64
 2890 004a 002B     		cmp	r3, #0
 2891 004c EED0     		beq	.L110
 2892              	.L107:
1538:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****       } 
1539:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     }
1540:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   }
1541:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
1542:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   return HAL_OK;  
 2893              		.loc 1 1542 0
ARM GAS  /tmp/ccgQTKgw.s 			page 79


 2894 004e 0023     		movs	r3, #0
 2895              	.L109:
1543:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** }
 2896              		.loc 1 1543 0
 2897 0050 1846     		mov	r0, r3
 2898 0052 1037     		adds	r7, r7, #16
 2899              	.LCFI92:
 2900              		.cfi_def_cfa_offset 8
 2901 0054 BD46     		mov	sp, r7
 2902              	.LCFI93:
 2903              		.cfi_def_cfa_register 13
 2904              		@ sp needed
 2905 0056 80BD     		pop	{r7, pc}
 2906              		.cfi_endproc
 2907              	.LFE140:
 2909              		.section	.text.RTC_ByteToBcd2,"ax",%progbits
 2910              		.align	2
 2911              		.global	RTC_ByteToBcd2
 2912              		.thumb
 2913              		.thumb_func
 2915              	RTC_ByteToBcd2:
 2916              	.LFB141:
1544:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
1545:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
1546:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** /**
1547:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @brief  Convert a 2 digit decimal to BCD format.
1548:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @param  Value Byte to be converted
1549:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @retval Converted byte
1550:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   */
1551:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** uint8_t RTC_ByteToBcd2(uint8_t Value)
1552:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** {
 2917              		.loc 1 1552 0
 2918              		.cfi_startproc
 2919              		@ args = 0, pretend = 0, frame = 16
 2920              		@ frame_needed = 1, uses_anonymous_args = 0
 2921              		@ link register save eliminated.
 2922 0000 80B4     		push	{r7}
 2923              	.LCFI94:
 2924              		.cfi_def_cfa_offset 4
 2925              		.cfi_offset 7, -4
 2926 0002 85B0     		sub	sp, sp, #20
 2927              	.LCFI95:
 2928              		.cfi_def_cfa_offset 24
 2929 0004 00AF     		add	r7, sp, #0
 2930              	.LCFI96:
 2931              		.cfi_def_cfa_register 7
 2932 0006 0346     		mov	r3, r0
 2933 0008 FB71     		strb	r3, [r7, #7]
1553:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   uint32_t bcdhigh = 0U;
 2934              		.loc 1 1553 0
 2935 000a 0023     		movs	r3, #0
 2936 000c FB60     		str	r3, [r7, #12]
1554:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
1555:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   while(Value >= 10U)
 2937              		.loc 1 1555 0
 2938 000e 05E0     		b	.L112
 2939              	.L113:
ARM GAS  /tmp/ccgQTKgw.s 			page 80


1556:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   {
1557:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     bcdhigh++;
 2940              		.loc 1 1557 0
 2941 0010 FB68     		ldr	r3, [r7, #12]
 2942 0012 0133     		adds	r3, r3, #1
 2943 0014 FB60     		str	r3, [r7, #12]
1558:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****     Value -= 10U;
 2944              		.loc 1 1558 0
 2945 0016 FB79     		ldrb	r3, [r7, #7]
 2946 0018 0A3B     		subs	r3, r3, #10
 2947 001a FB71     		strb	r3, [r7, #7]
 2948              	.L112:
1555:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   {
 2949              		.loc 1 1555 0
 2950 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2951 001e 092B     		cmp	r3, #9
 2952 0020 F6D8     		bhi	.L113
1559:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   }
1560:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   
1561:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   return  ((uint8_t)(bcdhigh << 4U) | Value);
 2953              		.loc 1 1561 0
 2954 0022 FB68     		ldr	r3, [r7, #12]
 2955 0024 DBB2     		uxtb	r3, r3
 2956 0026 1B01     		lsls	r3, r3, #4
 2957 0028 DAB2     		uxtb	r2, r3
 2958 002a FB79     		ldrb	r3, [r7, #7]
 2959 002c 1343     		orrs	r3, r3, r2
 2960 002e DBB2     		uxtb	r3, r3
1562:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** }
 2961              		.loc 1 1562 0
 2962 0030 1846     		mov	r0, r3
 2963 0032 1437     		adds	r7, r7, #20
 2964              	.LCFI97:
 2965              		.cfi_def_cfa_offset 4
 2966 0034 BD46     		mov	sp, r7
 2967              	.LCFI98:
 2968              		.cfi_def_cfa_register 13
 2969              		@ sp needed
 2970 0036 5DF8047B 		ldr	r7, [sp], #4
 2971              	.LCFI99:
 2972              		.cfi_restore 7
 2973              		.cfi_def_cfa_offset 0
 2974 003a 7047     		bx	lr
 2975              		.cfi_endproc
 2976              	.LFE141:
 2978              		.section	.text.RTC_Bcd2ToByte,"ax",%progbits
 2979              		.align	2
 2980              		.global	RTC_Bcd2ToByte
 2981              		.thumb
 2982              		.thumb_func
 2984              	RTC_Bcd2ToByte:
 2985              	.LFB142:
1563:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** 
1564:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** /**
1565:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @brief  Convert from 2 digit BCD to Binary.
1566:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @param  Value BCD value to be converted
1567:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   * @retval Converted word
ARM GAS  /tmp/ccgQTKgw.s 			page 81


1568:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   */
1569:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** uint8_t RTC_Bcd2ToByte(uint8_t Value)
1570:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** {
 2986              		.loc 1 1570 0
 2987              		.cfi_startproc
 2988              		@ args = 0, pretend = 0, frame = 16
 2989              		@ frame_needed = 1, uses_anonymous_args = 0
 2990              		@ link register save eliminated.
 2991 0000 80B4     		push	{r7}
 2992              	.LCFI100:
 2993              		.cfi_def_cfa_offset 4
 2994              		.cfi_offset 7, -4
 2995 0002 85B0     		sub	sp, sp, #20
 2996              	.LCFI101:
 2997              		.cfi_def_cfa_offset 24
 2998 0004 00AF     		add	r7, sp, #0
 2999              	.LCFI102:
 3000              		.cfi_def_cfa_register 7
 3001 0006 0346     		mov	r3, r0
 3002 0008 FB71     		strb	r3, [r7, #7]
1571:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   uint32_t tmp = 0U;
 3003              		.loc 1 1571 0
 3004 000a 0023     		movs	r3, #0
 3005 000c FB60     		str	r3, [r7, #12]
1572:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 3006              		.loc 1 1572 0
 3007 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3008 0010 1B09     		lsrs	r3, r3, #4
 3009 0012 DBB2     		uxtb	r3, r3
 3010 0014 1A46     		mov	r2, r3
 3011 0016 1346     		mov	r3, r2
 3012 0018 9B00     		lsls	r3, r3, #2
 3013 001a 1344     		add	r3, r3, r2
 3014 001c 5B00     		lsls	r3, r3, #1
 3015 001e FB60     		str	r3, [r7, #12]
1573:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c ****   return (tmp + (Value & (uint8_t)0x0FU));
 3016              		.loc 1 1573 0
 3017 0020 FB79     		ldrb	r3, [r7, #7]
 3018 0022 03F00F03 		and	r3, r3, #15
 3019 0026 DAB2     		uxtb	r2, r3
 3020 0028 FB68     		ldr	r3, [r7, #12]
 3021 002a DBB2     		uxtb	r3, r3
 3022 002c 1344     		add	r3, r3, r2
 3023 002e DBB2     		uxtb	r3, r3
1574:../../Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rtc.c **** }
 3024              		.loc 1 1574 0
 3025 0030 1846     		mov	r0, r3
 3026 0032 1437     		adds	r7, r7, #20
 3027              	.LCFI103:
 3028              		.cfi_def_cfa_offset 4
 3029 0034 BD46     		mov	sp, r7
 3030              	.LCFI104:
 3031              		.cfi_def_cfa_register 13
 3032              		@ sp needed
 3033 0036 5DF8047B 		ldr	r7, [sp], #4
 3034              	.LCFI105:
 3035              		.cfi_restore 7
ARM GAS  /tmp/ccgQTKgw.s 			page 82


 3036              		.cfi_def_cfa_offset 0
 3037 003a 7047     		bx	lr
 3038              		.cfi_endproc
 3039              	.LFE142:
 3041              		.text
 3042              	.Letext0:
 3043              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 3044              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 3045              		.file 4 "../../Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f302x8.h"
 3046              		.file 5 "../../Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f3xx.h"
 3047              		.file 6 "../../Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
 3048              		.file 7 "../../Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rtc.h"
 3049              		.file 8 "../../Drivers/CMSIS/Include/core_cm4.h"
ARM GAS  /tmp/ccgQTKgw.s 			page 83


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f3xx_hal_rtc.c
     /tmp/ccgQTKgw.s:21     .text.HAL_RTC_Init:0000000000000000 $t
     /tmp/ccgQTKgw.s:26     .text.HAL_RTC_Init:0000000000000000 HAL_RTC_Init
     /tmp/ccgQTKgw.s:454    .text.HAL_RTC_MspInit:0000000000000000 HAL_RTC_MspInit
     /tmp/ccgQTKgw.s:2835   .text.RTC_EnterInitMode:0000000000000000 RTC_EnterInitMode
     /tmp/ccgQTKgw.s:2715   .text.HAL_RTC_WaitForSynchro:0000000000000000 HAL_RTC_WaitForSynchro
     /tmp/ccgQTKgw.s:219    .text.HAL_RTC_DeInit:0000000000000000 $t
     /tmp/ccgQTKgw.s:224    .text.HAL_RTC_DeInit:0000000000000000 HAL_RTC_DeInit
     /tmp/ccgQTKgw.s:494    .text.HAL_RTC_MspDeInit:0000000000000000 HAL_RTC_MspDeInit
     /tmp/ccgQTKgw.s:444    .text.HAL_RTC_DeInit:000000000000014c $d
     /tmp/ccgQTKgw.s:449    .text.HAL_RTC_MspInit:0000000000000000 $t
     /tmp/ccgQTKgw.s:489    .text.HAL_RTC_MspDeInit:0000000000000000 $t
     /tmp/ccgQTKgw.s:529    .text.HAL_RTC_SetTime:0000000000000000 $t
     /tmp/ccgQTKgw.s:534    .text.HAL_RTC_SetTime:0000000000000000 HAL_RTC_SetTime
     /tmp/ccgQTKgw.s:2915   .text.RTC_ByteToBcd2:0000000000000000 RTC_ByteToBcd2
     /tmp/ccgQTKgw.s:2984   .text.RTC_Bcd2ToByte:0000000000000000 RTC_Bcd2ToByte
     /tmp/ccgQTKgw.s:796    .text.HAL_RTC_GetTime:0000000000000000 $t
     /tmp/ccgQTKgw.s:801    .text.HAL_RTC_GetTime:0000000000000000 HAL_RTC_GetTime
     /tmp/ccgQTKgw.s:920    .text.HAL_RTC_SetDate:0000000000000000 $t
     /tmp/ccgQTKgw.s:925    .text.HAL_RTC_SetDate:0000000000000000 HAL_RTC_SetDate
     /tmp/ccgQTKgw.s:1167   .text.HAL_RTC_GetDate:0000000000000000 $t
     /tmp/ccgQTKgw.s:1172   .text.HAL_RTC_GetDate:0000000000000000 HAL_RTC_GetDate
     /tmp/ccgQTKgw.s:1278   .text.HAL_RTC_SetAlarm:0000000000000000 $t
     /tmp/ccgQTKgw.s:1283   .text.HAL_RTC_SetAlarm:0000000000000000 HAL_RTC_SetAlarm
     /tmp/ccgQTKgw.s:1675   .text.HAL_RTC_SetAlarm_IT:0000000000000000 $t
     /tmp/ccgQTKgw.s:1680   .text.HAL_RTC_SetAlarm_IT:0000000000000000 HAL_RTC_SetAlarm_IT
     /tmp/ccgQTKgw.s:2101   .text.HAL_RTC_SetAlarm_IT:00000000000002a8 $d
     /tmp/ccgQTKgw.s:2106   .text.HAL_RTC_DeactivateAlarm:0000000000000000 $t
     /tmp/ccgQTKgw.s:2111   .text.HAL_RTC_DeactivateAlarm:0000000000000000 HAL_RTC_DeactivateAlarm
     /tmp/ccgQTKgw.s:2302   .text.HAL_RTC_GetAlarm:0000000000000000 $t
     /tmp/ccgQTKgw.s:2307   .text.HAL_RTC_GetAlarm:0000000000000000 HAL_RTC_GetAlarm
     /tmp/ccgQTKgw.s:2476   .text.HAL_RTC_AlarmIRQHandler:0000000000000000 $t
     /tmp/ccgQTKgw.s:2481   .text.HAL_RTC_AlarmIRQHandler:0000000000000000 HAL_RTC_AlarmIRQHandler
     /tmp/ccgQTKgw.s:2583   .text.HAL_RTC_AlarmAEventCallback:0000000000000000 HAL_RTC_AlarmAEventCallback
     /tmp/ccgQTKgw.s:2573   .text.HAL_RTC_AlarmIRQHandler:0000000000000084 $d
     /tmp/ccgQTKgw.s:2578   .text.HAL_RTC_AlarmAEventCallback:0000000000000000 $t
     /tmp/ccgQTKgw.s:2618   .text.HAL_RTC_PollForAlarmAEvent:0000000000000000 $t
     /tmp/ccgQTKgw.s:2623   .text.HAL_RTC_PollForAlarmAEvent:0000000000000000 HAL_RTC_PollForAlarmAEvent
     /tmp/ccgQTKgw.s:2710   .text.HAL_RTC_WaitForSynchro:0000000000000000 $t
     /tmp/ccgQTKgw.s:2785   .text.HAL_RTC_GetState:0000000000000000 $t
     /tmp/ccgQTKgw.s:2790   .text.HAL_RTC_GetState:0000000000000000 HAL_RTC_GetState
     /tmp/ccgQTKgw.s:2830   .text.RTC_EnterInitMode:0000000000000000 $t
     /tmp/ccgQTKgw.s:2910   .text.RTC_ByteToBcd2:0000000000000000 $t
     /tmp/ccgQTKgw.s:2979   .text.RTC_Bcd2ToByte:0000000000000000 $t
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
HAL_RTCEx_AlarmBEventCallback
