
build/STM32F3.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000006c 	.word	0x2000006c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080055f4 	.word	0x080055f4

080001ac <frame_dummy>:
 80001ac:	4b08      	ldr	r3, [pc, #32]	; (80001d0 <frame_dummy+0x24>)
 80001ae:	b510      	push	{r4, lr}
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4808      	ldr	r0, [pc, #32]	; (80001d4 <frame_dummy+0x28>)
 80001b4:	4908      	ldr	r1, [pc, #32]	; (80001d8 <frame_dummy+0x2c>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	4808      	ldr	r0, [pc, #32]	; (80001dc <frame_dummy+0x30>)
 80001bc:	6803      	ldr	r3, [r0, #0]
 80001be:	b903      	cbnz	r3, 80001c2 <frame_dummy+0x16>
 80001c0:	bd10      	pop	{r4, pc}
 80001c2:	4b07      	ldr	r3, [pc, #28]	; (80001e0 <frame_dummy+0x34>)
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d0fb      	beq.n	80001c0 <frame_dummy+0x14>
 80001c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80001cc:	4718      	bx	r3
 80001ce:	bf00      	nop
 80001d0:	00000000 	.word	0x00000000
 80001d4:	080055f4 	.word	0x080055f4
 80001d8:	20000070 	.word	0x20000070
 80001dc:	2000006c 	.word	0x2000006c
 80001e0:	00000000 	.word	0x00000000

080001e4 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b082      	sub	sp, #8
 80001e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80001ea:	4a1e      	ldr	r2, [pc, #120]	; (8000264 <HAL_MspInit+0x80>)
 80001ec:	4b1d      	ldr	r3, [pc, #116]	; (8000264 <HAL_MspInit+0x80>)
 80001ee:	699b      	ldr	r3, [r3, #24]
 80001f0:	f043 0301 	orr.w	r3, r3, #1
 80001f4:	6193      	str	r3, [r2, #24]
 80001f6:	4b1b      	ldr	r3, [pc, #108]	; (8000264 <HAL_MspInit+0x80>)
 80001f8:	699b      	ldr	r3, [r3, #24]
 80001fa:	f003 0301 	and.w	r3, r3, #1
 80001fe:	607b      	str	r3, [r7, #4]
 8000200:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000202:	2003      	movs	r0, #3
 8000204:	f001 faa8 	bl	8001758 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000208:	f06f 000b 	mvn.w	r0, #11
 800020c:	2100      	movs	r1, #0
 800020e:	2200      	movs	r2, #0
 8000210:	f001 faac 	bl	800176c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000214:	f06f 000a 	mvn.w	r0, #10
 8000218:	2100      	movs	r1, #0
 800021a:	2200      	movs	r2, #0
 800021c:	f001 faa6 	bl	800176c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000220:	f06f 0009 	mvn.w	r0, #9
 8000224:	2100      	movs	r1, #0
 8000226:	2200      	movs	r2, #0
 8000228:	f001 faa0 	bl	800176c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800022c:	f06f 0004 	mvn.w	r0, #4
 8000230:	2100      	movs	r1, #0
 8000232:	2200      	movs	r2, #0
 8000234:	f001 fa9a 	bl	800176c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000238:	f06f 0003 	mvn.w	r0, #3
 800023c:	2100      	movs	r1, #0
 800023e:	2200      	movs	r2, #0
 8000240:	f001 fa94 	bl	800176c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000244:	f06f 0001 	mvn.w	r0, #1
 8000248:	210f      	movs	r1, #15
 800024a:	2200      	movs	r2, #0
 800024c:	f001 fa8e 	bl	800176c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8000250:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000254:	210f      	movs	r1, #15
 8000256:	2200      	movs	r2, #0
 8000258:	f001 fa88 	bl	800176c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800025c:	3708      	adds	r7, #8
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	40021000 	.word	0x40021000

08000268 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b08a      	sub	sp, #40	; 0x28
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a22      	ldr	r2, [pc, #136]	; (8000300 <HAL_UART_MspInit+0x98>)
 8000276:	4293      	cmp	r3, r2
 8000278:	d11c      	bne.n	80002b4 <HAL_UART_MspInit+0x4c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800027a:	4a22      	ldr	r2, [pc, #136]	; (8000304 <HAL_UART_MspInit+0x9c>)
 800027c:	4b21      	ldr	r3, [pc, #132]	; (8000304 <HAL_UART_MspInit+0x9c>)
 800027e:	699b      	ldr	r3, [r3, #24]
 8000280:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000284:	6193      	str	r3, [r2, #24]
 8000286:	4b1f      	ldr	r3, [pc, #124]	; (8000304 <HAL_UART_MspInit+0x9c>)
 8000288:	699b      	ldr	r3, [r3, #24]
 800028a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800028e:	613b      	str	r3, [r7, #16]
 8000290:	693b      	ldr	r3, [r7, #16]

    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000292:	2330      	movs	r3, #48	; 0x30
 8000294:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000296:	2302      	movs	r3, #2
 8000298:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800029a:	2301      	movs	r3, #1
 800029c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800029e:	2300      	movs	r3, #0
 80002a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80002a2:	2307      	movs	r3, #7
 80002a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002a6:	f107 0314 	add.w	r3, r7, #20
 80002aa:	4817      	ldr	r0, [pc, #92]	; (8000308 <HAL_UART_MspInit+0xa0>)
 80002ac:	4619      	mov	r1, r3
 80002ae:	f002 fe73 	bl	8002f98 <HAL_GPIO_Init>
 80002b2:	e021      	b.n	80002f8 <HAL_UART_MspInit+0x90>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a14      	ldr	r2, [pc, #80]	; (800030c <HAL_UART_MspInit+0xa4>)
 80002ba:	4293      	cmp	r3, r2
 80002bc:	d11c      	bne.n	80002f8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80002be:	4a11      	ldr	r2, [pc, #68]	; (8000304 <HAL_UART_MspInit+0x9c>)
 80002c0:	4b10      	ldr	r3, [pc, #64]	; (8000304 <HAL_UART_MspInit+0x9c>)
 80002c2:	69db      	ldr	r3, [r3, #28]
 80002c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002c8:	61d3      	str	r3, [r2, #28]
 80002ca:	4b0e      	ldr	r3, [pc, #56]	; (8000304 <HAL_UART_MspInit+0x9c>)
 80002cc:	69db      	ldr	r3, [r3, #28]
 80002ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002d2:	60fb      	str	r3, [r7, #12]
 80002d4:	68fb      	ldr	r3, [r7, #12]

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80002d6:	230c      	movs	r3, #12
 80002d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002da:	2302      	movs	r3, #2
 80002dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002de:	2300      	movs	r3, #0
 80002e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002e2:	2300      	movs	r3, #0
 80002e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80002e6:	2307      	movs	r3, #7
 80002e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002ea:	f107 0314 	add.w	r3, r7, #20
 80002ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002f2:	4619      	mov	r1, r3
 80002f4:	f002 fe50 	bl	8002f98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80002f8:	3728      	adds	r7, #40	; 0x28
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	40013800 	.word	0x40013800
 8000304:	40021000 	.word	0x40021000
 8000308:	48000800 	.word	0x48000800
 800030c:	40004400 	.word	0x40004400

08000310 <HAL_RTC_MspInit>:
  *        the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b09c      	sub	sp, #112	; 0x70
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
     - Enable write access using HAL_PWR_EnableBkUpAccess() function before to
       configure the RTC clock source (to be done once after reset).
     - Reset the Back up Domain using __HAL_RCC_BACKUPRESET_FORCE() and
       __HAL_RCC_BACKUPRESET_RELEASE().
     - Configure the needed RTc clock source */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000318:	4a20      	ldr	r2, [pc, #128]	; (800039c <HAL_RTC_MspInit+0x8c>)
 800031a:	4b20      	ldr	r3, [pc, #128]	; (800039c <HAL_RTC_MspInit+0x8c>)
 800031c:	69db      	ldr	r3, [r3, #28]
 800031e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000322:	61d3      	str	r3, [r2, #28]
 8000324:	4b1d      	ldr	r3, [pc, #116]	; (800039c <HAL_RTC_MspInit+0x8c>)
 8000326:	69db      	ldr	r3, [r3, #28]
 8000328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800032c:	60bb      	str	r3, [r7, #8]
 800032e:	68bb      	ldr	r3, [r7, #8]
  HAL_PWR_EnableBkUpAccess();
 8000330:	f002 ffba 	bl	80032a8 <HAL_PWR_EnableBkUpAccess>


  /*##-2- Configure LSE as RTC clock source ###################################*/
  RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSI;
 8000334:	2308      	movs	r3, #8
 8000336:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000338:	2300      	movs	r3, #0
 800033a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800033c:	2301      	movs	r3, #1
 800033e:	65bb      	str	r3, [r7, #88]	; 0x58
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000340:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000344:	4618      	mov	r0, r3
 8000346:	f001 fa6f 	bl	8001828 <HAL_RCC_OscConfig>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <HAL_RTC_MspInit+0x44>
  {
    Error_Handler();
 8000350:	f000 fb1c 	bl	800098c <Error_Handler>
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000354:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000358:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800035a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800035e:	613b      	str	r3, [r7, #16]
  if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000360:	f107 030c 	add.w	r3, r7, #12
 8000364:	4618      	mov	r0, r3
 8000366:	f003 fc9f 	bl	8003ca8 <HAL_RCCEx_PeriphCLKConfig>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <HAL_RTC_MspInit+0x64>
  {
    Error_Handler();
 8000370:	f000 fb0c 	bl	800098c <Error_Handler>
 8000374:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000378:	66fb      	str	r3, [r7, #108]	; 0x6c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800037a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800037c:	fa93 f3a3 	rbit	r3, r3
 8000380:	66bb      	str	r3, [r7, #104]	; 0x68
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000382:	6ebb      	ldr	r3, [r7, #104]	; 0x68
  }

  /*##-3- Enable RTC peripheral Clocks #######################################*/
  /* Enable RTC Clock */
  __HAL_RCC_RTC_ENABLE();
 8000384:	fab3 f383 	clz	r3, r3
 8000388:	461a      	mov	r2, r3
 800038a:	4b05      	ldr	r3, [pc, #20]	; (80003a0 <HAL_RTC_MspInit+0x90>)
 800038c:	4413      	add	r3, r2
 800038e:	009b      	lsls	r3, r3, #2
 8000390:	461a      	mov	r2, r3
 8000392:	2301      	movs	r3, #1
 8000394:	6013      	str	r3, [r2, #0]
}
 8000396:	3770      	adds	r7, #112	; 0x70
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	40021000 	.word	0x40021000
 80003a0:	10908100 	.word	0x10908100

080003a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b08c      	sub	sp, #48	; 0x30
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80003ac:	2300      	movs	r3, #0
 80003ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80003b0:	2300      	movs	r3, #0
 80003b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 80003b4:	2019      	movs	r0, #25
 80003b6:	6879      	ldr	r1, [r7, #4]
 80003b8:	2200      	movs	r2, #0
 80003ba:	f001 f9d7 	bl	800176c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 80003be:	2019      	movs	r0, #25
 80003c0:	f001 f9f0 	bl	80017a4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80003c4:	4a1e      	ldr	r2, [pc, #120]	; (8000440 <HAL_InitTick+0x9c>)
 80003c6:	4b1e      	ldr	r3, [pc, #120]	; (8000440 <HAL_InitTick+0x9c>)
 80003c8:	699b      	ldr	r3, [r3, #24]
 80003ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80003ce:	6193      	str	r3, [r2, #24]
 80003d0:	4b1b      	ldr	r3, [pc, #108]	; (8000440 <HAL_InitTick+0x9c>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80003d8:	60fb      	str	r3, [r7, #12]
 80003da:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80003dc:	f107 0214 	add.w	r2, r7, #20
 80003e0:	f107 0310 	add.w	r3, r7, #16
 80003e4:	4610      	mov	r0, r2
 80003e6:	4619      	mov	r1, r3
 80003e8:	f002 fda6 	bl	8002f38 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80003ec:	f002 fd82 	bl	8002ef4 <HAL_RCC_GetPCLK2Freq>
 80003f0:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80003f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003f4:	4a13      	ldr	r2, [pc, #76]	; (8000444 <HAL_InitTick+0xa0>)
 80003f6:	fba2 2303 	umull	r2, r3, r2, r3
 80003fa:	0c9b      	lsrs	r3, r3, #18
 80003fc:	3b01      	subs	r3, #1
 80003fe:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000400:	4b11      	ldr	r3, [pc, #68]	; (8000448 <HAL_InitTick+0xa4>)
 8000402:	4a12      	ldr	r2, [pc, #72]	; (800044c <HAL_InitTick+0xa8>)
 8000404:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000406:	4b10      	ldr	r3, [pc, #64]	; (8000448 <HAL_InitTick+0xa4>)
 8000408:	f240 32e7 	movw	r2, #999	; 0x3e7
 800040c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800040e:	4a0e      	ldr	r2, [pc, #56]	; (8000448 <HAL_InitTick+0xa4>)
 8000410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000412:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000414:	4b0c      	ldr	r3, [pc, #48]	; (8000448 <HAL_InitTick+0xa4>)
 8000416:	2200      	movs	r2, #0
 8000418:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800041a:	4b0b      	ldr	r3, [pc, #44]	; (8000448 <HAL_InitTick+0xa4>)
 800041c:	2200      	movs	r2, #0
 800041e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000420:	4809      	ldr	r0, [pc, #36]	; (8000448 <HAL_InitTick+0xa4>)
 8000422:	f003 fa3b 	bl	800389c <HAL_TIM_Base_Init>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d104      	bne.n	8000436 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800042c:	4806      	ldr	r0, [pc, #24]	; (8000448 <HAL_InitTick+0xa4>)
 800042e:	f003 fa6b 	bl	8003908 <HAL_TIM_Base_Start_IT>
 8000432:	4603      	mov	r3, r0
 8000434:	e000      	b.n	8000438 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000436:	2301      	movs	r3, #1
}
 8000438:	4618      	mov	r0, r3
 800043a:	3730      	adds	r7, #48	; 0x30
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	40021000 	.word	0x40021000
 8000444:	431bde83 	.word	0x431bde83
 8000448:	200000fc 	.word	0x200000fc
 800044c:	40012c00 	.word	0x40012c00

08000450 <main>:
static void RTC_CalendarConfig(void);
static void RTC_CalendarShow(uint8_t *showtime, uint8_t *showdate);
static void RTC_Init(void);

int main(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af02      	add	r7, sp, #8

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000456:	f001 f86b 	bl	8001530 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800045a:	f000 f97f 	bl	800075c <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800045e:	f000 f9f3 	bl	8000848 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000462:	f000 f9c3 	bl	80007ec <MX_USART1_UART_Init>
  LCD_SPI_Init();
 8000466:	f000 fa95 	bl	8000994 <LCD_SPI_Init>

  //SEGGER_SYSVIEW_Conf();
  //SEGGER_SYSVIEW_Start(); // start SystemView

  RTC_Init();
 800046a:	f000 f82b 	bl	80004c4 <RTC_Init>

  ILI9341_Init();//initial driver setup to drive ili9341
 800046e:	f000 fd43 	bl	8000ef8 <ILI9341_Init>

  ILI9341_Fill_Screen(WHITE);
 8000472:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000476:	f000 fee3 	bl	8001240 <ILI9341_Fill_Screen>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 800047a:	2003      	movs	r0, #3
 800047c:	f000 fce2 	bl	8000e44 <ILI9341_Set_Rotation>



  while (1)
  {
	    RTC_CalendarShow(aShowTime, aShowDate);
 8000480:	480d      	ldr	r0, [pc, #52]	; (80004b8 <main+0x68>)
 8000482:	490e      	ldr	r1, [pc, #56]	; (80004bc <main+0x6c>)
 8000484:	f000 f936 	bl	80006f4 <RTC_CalendarShow>
		ILI9341_Draw_Text("Clock", 10, 10, BLACK, 1, WHITE);
 8000488:	2301      	movs	r3, #1
 800048a:	9300      	str	r3, [sp, #0]
 800048c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000490:	9301      	str	r3, [sp, #4]
 8000492:	480b      	ldr	r0, [pc, #44]	; (80004c0 <main+0x70>)
 8000494:	210a      	movs	r1, #10
 8000496:	220a      	movs	r2, #10
 8000498:	2300      	movs	r3, #0
 800049a:	f000 fbdd 	bl	8000c58 <ILI9341_Draw_Text>
		//sprintf(counter_buff, "Timer counter value: %d", (int)Timer_Counter*2);
		ILI9341_Draw_Text(aShowTime, 10, 30, BLACK, 2, WHITE);
 800049e:	2302      	movs	r3, #2
 80004a0:	9300      	str	r3, [sp, #0]
 80004a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004a6:	9301      	str	r3, [sp, #4]
 80004a8:	4803      	ldr	r0, [pc, #12]	; (80004b8 <main+0x68>)
 80004aa:	210a      	movs	r1, #10
 80004ac:	221e      	movs	r2, #30
 80004ae:	2300      	movs	r3, #0
 80004b0:	f000 fbd2 	bl	8000c58 <ILI9341_Draw_Text>
		//HAL_Delay(500);




  }
 80004b4:	e7e4      	b.n	8000480 <main+0x30>
 80004b6:	bf00      	nop
 80004b8:	20000088 	.word	0x20000088
 80004bc:	200000bc 	.word	0x200000bc
 80004c0:	0800560c 	.word	0x0800560c

080004c4 <RTC_Init>:

}

static void RTC_Init(void){
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b092      	sub	sp, #72	; 0x48
 80004c8:	af00      	add	r7, sp, #0
	    - Asynch Prediv  = Value according to source clock
	    - Synch Prediv   = Value according to source clock
	    - OutPut         = Output Disable
	    - OutPutPolarity = High Polarity
	    - OutPutType     = Open Drain */
	RtcHandle.Instance = RTC;
 80004ca:	4b69      	ldr	r3, [pc, #420]	; (8000670 <RTC_Init+0x1ac>)
 80004cc:	4a69      	ldr	r2, [pc, #420]	; (8000674 <RTC_Init+0x1b0>)
 80004ce:	601a      	str	r2, [r3, #0]
	RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 80004d0:	4b67      	ldr	r3, [pc, #412]	; (8000670 <RTC_Init+0x1ac>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	605a      	str	r2, [r3, #4]
	RtcHandle.Init.AsynchPrediv = RTC_ASYNCH_PREDIV;
 80004d6:	4b66      	ldr	r3, [pc, #408]	; (8000670 <RTC_Init+0x1ac>)
 80004d8:	227f      	movs	r2, #127	; 0x7f
 80004da:	609a      	str	r2, [r3, #8]
	RtcHandle.Init.SynchPrediv = RTC_SYNCH_PREDIV;
 80004dc:	4b64      	ldr	r3, [pc, #400]	; (8000670 <RTC_Init+0x1ac>)
 80004de:	22ff      	movs	r2, #255	; 0xff
 80004e0:	60da      	str	r2, [r3, #12]
	RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 80004e2:	4b63      	ldr	r3, [pc, #396]	; (8000670 <RTC_Init+0x1ac>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	611a      	str	r2, [r3, #16]
	RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80004e8:	4b61      	ldr	r3, [pc, #388]	; (8000670 <RTC_Init+0x1ac>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	615a      	str	r2, [r3, #20]
	RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80004ee:	4b60      	ldr	r3, [pc, #384]	; (8000670 <RTC_Init+0x1ac>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	619a      	str	r2, [r3, #24]

	  if (HAL_RTC_Init(&RtcHandle) != HAL_OK)
 80004f4:	485e      	ldr	r0, [pc, #376]	; (8000670 <RTC_Init+0x1ac>)
 80004f6:	f004 f88d 	bl	8004614 <HAL_RTC_Init>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <RTC_Init+0x40>
	  {
	    /* Initialization Error */
	    Error_Handler();
 8000500:	f000 fa44 	bl	800098c <Error_Handler>
	  }

	  /*##-2- Check if Data stored in BackUp register1: No Need to reconfigure RTC#*/
	  /* Read the Back Up Register 1 Data */
	  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2)
 8000504:	485a      	ldr	r0, [pc, #360]	; (8000670 <RTC_Init+0x1ac>)
 8000506:	2101      	movs	r1, #1
 8000508:	f004 fbe8 	bl	8004cdc <HAL_RTCEx_BKUPRead>
 800050c:	4602      	mov	r2, r0
 800050e:	f243 23f2 	movw	r3, #13042	; 0x32f2
 8000512:	429a      	cmp	r2, r3
 8000514:	d002      	beq.n	800051c <RTC_Init+0x58>
	  {
	    /* Configure RTC Calendar */
	    RTC_CalendarConfig();
 8000516:	f000 f8b3 	bl	8000680 <RTC_CalendarConfig>
 800051a:	e0a6      	b.n	800066a <RTC_Init+0x1a6>
 800051c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000520:	647b      	str	r3, [r7, #68]	; 0x44
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000524:	fa93 f3a3 	rbit	r3, r3
 8000528:	643b      	str	r3, [r7, #64]	; 0x40
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800052a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
	  }
	  else
	  {
	    /* Check if the Power On Reset flag is set */
	    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 800052c:	fab3 f383 	clz	r3, r3
 8000530:	b2db      	uxtb	r3, r3
 8000532:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000536:	b2db      	uxtb	r3, r3
 8000538:	b2db      	uxtb	r3, r3
 800053a:	095b      	lsrs	r3, r3, #5
 800053c:	b2db      	uxtb	r3, r3
 800053e:	2b01      	cmp	r3, #1
 8000540:	d102      	bne.n	8000548 <RTC_Init+0x84>
 8000542:	4b4d      	ldr	r3, [pc, #308]	; (8000678 <RTC_Init+0x1b4>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	e02d      	b.n	80005a4 <RTC_Init+0xe0>
 8000548:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800054c:	63fb      	str	r3, [r7, #60]	; 0x3c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800054e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000550:	fa93 f3a3 	rbit	r3, r3
 8000554:	63bb      	str	r3, [r7, #56]	; 0x38
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000558:	fab3 f383 	clz	r3, r3
 800055c:	b2db      	uxtb	r3, r3
 800055e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000562:	b2db      	uxtb	r3, r3
 8000564:	b2db      	uxtb	r3, r3
 8000566:	095b      	lsrs	r3, r3, #5
 8000568:	b2db      	uxtb	r3, r3
 800056a:	2b02      	cmp	r3, #2
 800056c:	d102      	bne.n	8000574 <RTC_Init+0xb0>
 800056e:	4b42      	ldr	r3, [pc, #264]	; (8000678 <RTC_Init+0x1b4>)
 8000570:	6a1b      	ldr	r3, [r3, #32]
 8000572:	e017      	b.n	80005a4 <RTC_Init+0xe0>
 8000574:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000578:	637b      	str	r3, [r7, #52]	; 0x34
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800057a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800057c:	fa93 f3a3 	rbit	r3, r3
 8000580:	633b      	str	r3, [r7, #48]	; 0x30
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000584:	fab3 f383 	clz	r3, r3
 8000588:	b2db      	uxtb	r3, r3
 800058a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800058e:	b2db      	uxtb	r3, r3
 8000590:	b2db      	uxtb	r3, r3
 8000592:	095b      	lsrs	r3, r3, #5
 8000594:	b2db      	uxtb	r3, r3
 8000596:	2b04      	cmp	r3, #4
 8000598:	d102      	bne.n	80005a0 <RTC_Init+0xdc>
 800059a:	4b37      	ldr	r3, [pc, #220]	; (8000678 <RTC_Init+0x1b4>)
 800059c:	685b      	ldr	r3, [r3, #4]
 800059e:	e001      	b.n	80005a4 <RTC_Init+0xe0>
 80005a0:	4b35      	ldr	r3, [pc, #212]	; (8000678 <RTC_Init+0x1b4>)
 80005a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80005a8:	62fb      	str	r3, [r7, #44]	; 0x2c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005ac:	fa93 f3a3 	rbit	r3, r3
 80005b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80005b2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80005b6:	627b      	str	r3, [r7, #36]	; 0x24
 80005b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ba:	fa93 f3a3 	rbit	r3, r3
 80005be:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80005c0:	6a3b      	ldr	r3, [r7, #32]
	    {
	      /* Turn on LED4: Power on reset occurred */
	      //BSP_LED_On(LED4);
	    }
	    /* Check if Pin Reset flag is set */
	    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 80005c2:	fab3 f383 	clz	r3, r3
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	095b      	lsrs	r3, r3, #5
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d102      	bne.n	80005de <RTC_Init+0x11a>
 80005d8:	4b27      	ldr	r3, [pc, #156]	; (8000678 <RTC_Init+0x1b4>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	e02d      	b.n	800063a <RTC_Init+0x176>
 80005de:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80005e2:	61fb      	str	r3, [r7, #28]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005e4:	69fb      	ldr	r3, [r7, #28]
 80005e6:	fa93 f3a3 	rbit	r3, r3
 80005ea:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80005ec:	69bb      	ldr	r3, [r7, #24]
 80005ee:	fab3 f383 	clz	r3, r3
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	095b      	lsrs	r3, r3, #5
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	2b02      	cmp	r3, #2
 8000602:	d102      	bne.n	800060a <RTC_Init+0x146>
 8000604:	4b1c      	ldr	r3, [pc, #112]	; (8000678 <RTC_Init+0x1b4>)
 8000606:	6a1b      	ldr	r3, [r3, #32]
 8000608:	e017      	b.n	800063a <RTC_Init+0x176>
 800060a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800060e:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	fa93 f3a3 	rbit	r3, r3
 8000616:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000618:	693b      	ldr	r3, [r7, #16]
 800061a:	fab3 f383 	clz	r3, r3
 800061e:	b2db      	uxtb	r3, r3
 8000620:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000624:	b2db      	uxtb	r3, r3
 8000626:	b2db      	uxtb	r3, r3
 8000628:	095b      	lsrs	r3, r3, #5
 800062a:	b2db      	uxtb	r3, r3
 800062c:	2b04      	cmp	r3, #4
 800062e:	d102      	bne.n	8000636 <RTC_Init+0x172>
 8000630:	4b11      	ldr	r3, [pc, #68]	; (8000678 <RTC_Init+0x1b4>)
 8000632:	685b      	ldr	r3, [r3, #4]
 8000634:	e001      	b.n	800063a <RTC_Init+0x176>
 8000636:	4b10      	ldr	r3, [pc, #64]	; (8000678 <RTC_Init+0x1b4>)
 8000638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800063a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800063e:	60fb      	str	r3, [r7, #12]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	fa93 f3a3 	rbit	r3, r3
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	fa93 f3a3 	rbit	r3, r3
 8000654:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000656:	683b      	ldr	r3, [r7, #0]
	    {
	      /* Turn on LED5: External reset occurred */
	      //BSP_LED_On(LED5);
	    }
	    /* Clear source Reset Flag */
	    __HAL_RCC_CLEAR_RESET_FLAGS();
 8000658:	fab3 f383 	clz	r3, r3
 800065c:	461a      	mov	r2, r3
 800065e:	4b07      	ldr	r3, [pc, #28]	; (800067c <RTC_Init+0x1b8>)
 8000660:	4413      	add	r3, r2
 8000662:	009b      	lsls	r3, r3, #2
 8000664:	461a      	mov	r2, r3
 8000666:	2301      	movs	r3, #1
 8000668:	6013      	str	r3, [r2, #0]
	  }

}
 800066a:	3748      	adds	r7, #72	; 0x48
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	200001ac 	.word	0x200001ac
 8000674:	40002800 	.word	0x40002800
 8000678:	40021000 	.word	0x40021000
 800067c:	10908120 	.word	0x10908120

08000680 <RTC_CalendarConfig>:
  * @brief  Configure the current time and date.
  * @param  None
  * @retval None
  */
static void RTC_CalendarConfig(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;

  /*##-1- Configure the Date #################################################*/
  /* Set Date: Tuesday February 18th 2014 */
  sdatestructure.Year = 0x14;
 8000686:	2314      	movs	r3, #20
 8000688:	75fb      	strb	r3, [r7, #23]
  sdatestructure.Month = RTC_MONTH_FEBRUARY;
 800068a:	2302      	movs	r3, #2
 800068c:	757b      	strb	r3, [r7, #21]
  sdatestructure.Date = 0x18;
 800068e:	2318      	movs	r3, #24
 8000690:	75bb      	strb	r3, [r7, #22]
  sdatestructure.WeekDay = RTC_WEEKDAY_TUESDAY;
 8000692:	2302      	movs	r3, #2
 8000694:	753b      	strb	r3, [r7, #20]

  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BCD) != HAL_OK)
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	4815      	ldr	r0, [pc, #84]	; (80006f0 <RTC_CalendarConfig+0x70>)
 800069c:	4619      	mov	r1, r3
 800069e:	2201      	movs	r2, #1
 80006a0:	f004 f96c 	bl	800497c <HAL_RTC_SetDate>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <RTC_CalendarConfig+0x2e>
  {
    /* Initialization Error */
    Error_Handler();
 80006aa:	f000 f96f 	bl	800098c <Error_Handler>
  }

  /*##-2- Configure the Time #################################################*/
  /* Set Time: 02:00:00 */
  stimestructure.Hours = 0x02;
 80006ae:	2302      	movs	r3, #2
 80006b0:	703b      	strb	r3, [r7, #0]
  stimestructure.Minutes = 0x00;
 80006b2:	2300      	movs	r3, #0
 80006b4:	707b      	strb	r3, [r7, #1]
  stimestructure.Seconds = 0x00;
 80006b6:	2300      	movs	r3, #0
 80006b8:	70bb      	strb	r3, [r7, #2]
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 80006ba:	2300      	movs	r3, #0
 80006bc:	70fb      	strb	r3, [r7, #3]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 80006be:	2300      	movs	r3, #0
 80006c0:	60fb      	str	r3, [r7, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 80006c2:	2300      	movs	r3, #0
 80006c4:	613b      	str	r3, [r7, #16]

  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BCD) != HAL_OK)
 80006c6:	463b      	mov	r3, r7
 80006c8:	4809      	ldr	r0, [pc, #36]	; (80006f0 <RTC_CalendarConfig+0x70>)
 80006ca:	4619      	mov	r1, r3
 80006cc:	2201      	movs	r2, #1
 80006ce:	f004 f833 	bl	8004738 <HAL_RTC_SetTime>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <RTC_CalendarConfig+0x5c>
  {
    /* Initialization Error */
    Error_Handler();
 80006d8:	f000 f958 	bl	800098c <Error_Handler>
  }

  /*##-3- Writes a data in a RTC Backup data Register1 #######################*/
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 80006dc:	4804      	ldr	r0, [pc, #16]	; (80006f0 <RTC_CalendarConfig+0x70>)
 80006de:	2101      	movs	r1, #1
 80006e0:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80006e4:	f004 fae0 	bl	8004ca8 <HAL_RTCEx_BKUPWrite>
}
 80006e8:	3718      	adds	r7, #24
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	200001ac 	.word	0x200001ac

080006f4 <RTC_CalendarShow>:
  * @param  showtime : pointer to buffer
  * @param  showdate : pointer to buffer
  * @retval None
  */
static void RTC_CalendarShow(uint8_t *showtime, uint8_t *showdate)
{
 80006f4:	b590      	push	{r4, r7, lr}
 80006f6:	b08b      	sub	sp, #44	; 0x2c
 80006f8:	af02      	add	r7, sp, #8
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	6039      	str	r1, [r7, #0]
  RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;

  /* Get the RTC current Time */
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 80006fe:	f107 0308 	add.w	r3, r7, #8
 8000702:	4813      	ldr	r0, [pc, #76]	; (8000750 <RTC_CalendarShow+0x5c>)
 8000704:	4619      	mov	r1, r3
 8000706:	2200      	movs	r2, #0
 8000708:	f004 f8dc 	bl	80048c4 <HAL_RTC_GetTime>
  /* Get the RTC current Date */
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 800070c:	f107 031c 	add.w	r3, r7, #28
 8000710:	480f      	ldr	r0, [pc, #60]	; (8000750 <RTC_CalendarShow+0x5c>)
 8000712:	4619      	mov	r1, r3
 8000714:	2200      	movs	r2, #0
 8000716:	f004 f9e7 	bl	8004ae8 <HAL_RTC_GetDate>
  /* Display time Format : hh:mm:ss */
  sprintf((char *)showtime, "%2d:%2d:%2d", stimestructureget.Hours, stimestructureget.Minutes, stimestructureget.Seconds);
 800071a:	7a3b      	ldrb	r3, [r7, #8]
 800071c:	461a      	mov	r2, r3
 800071e:	7a7b      	ldrb	r3, [r7, #9]
 8000720:	461c      	mov	r4, r3
 8000722:	7abb      	ldrb	r3, [r7, #10]
 8000724:	9300      	str	r3, [sp, #0]
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	490a      	ldr	r1, [pc, #40]	; (8000754 <RTC_CalendarShow+0x60>)
 800072a:	4623      	mov	r3, r4
 800072c:	f004 fb4a 	bl	8004dc4 <siprintf>
  /* Display date Format : mm-dd-yy */
  sprintf((char *)showdate, "%2d-%2d-%2d", sdatestructureget.Month, sdatestructureget.Date, 2000 + sdatestructureget.Year);
 8000730:	7f7b      	ldrb	r3, [r7, #29]
 8000732:	461a      	mov	r2, r3
 8000734:	7fbb      	ldrb	r3, [r7, #30]
 8000736:	461c      	mov	r4, r3
 8000738:	7ffb      	ldrb	r3, [r7, #31]
 800073a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800073e:	9300      	str	r3, [sp, #0]
 8000740:	6838      	ldr	r0, [r7, #0]
 8000742:	4905      	ldr	r1, [pc, #20]	; (8000758 <RTC_CalendarShow+0x64>)
 8000744:	4623      	mov	r3, r4
 8000746:	f004 fb3d 	bl	8004dc4 <siprintf>
}
 800074a:	3724      	adds	r7, #36	; 0x24
 800074c:	46bd      	mov	sp, r7
 800074e:	bd90      	pop	{r4, r7, pc}
 8000750:	200001ac 	.word	0x200001ac
 8000754:	08005614 	.word	0x08005614
 8000758:	08005620 	.word	0x08005620

0800075c <SystemClock_Config>:


/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b090      	sub	sp, #64	; 0x40
 8000760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000762:	2302      	movs	r3, #2
 8000764:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000766:	2301      	movs	r3, #1
 8000768:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800076a:	2310      	movs	r3, #16
 800076c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076e:	2302      	movs	r3, #2
 8000770:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000772:	2300      	movs	r3, #0
 8000774:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000776:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800077a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077c:	f107 0318 	add.w	r3, r7, #24
 8000780:	4618      	mov	r0, r3
 8000782:	f001 f851 	bl	8001828 <HAL_RCC_OscConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800078c:	f000 f8fe 	bl	800098c <Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000790:	230f      	movs	r3, #15
 8000792:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000794:	2302      	movs	r3, #2
 8000796:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800079c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	4618      	mov	r0, r3
 80007aa:	2102      	movs	r1, #2
 80007ac:	f002 f908 	bl	80029c0 <HAL_RCC_ClockConfig>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80007b6:	f000 f8e9 	bl	800098c <Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80007ba:	f002 fb6d 	bl	8002e98 <HAL_RCC_GetHCLKFreq>
 80007be:	4602      	mov	r2, r0
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <SystemClock_Config+0x8c>)
 80007c2:	fba3 2302 	umull	r2, r3, r3, r2
 80007c6:	099b      	lsrs	r3, r3, #6
 80007c8:	4618      	mov	r0, r3
 80007ca:	f000 fff9 	bl	80017c0 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80007ce:	2004      	movs	r0, #4
 80007d0:	f001 f802 	bl	80017d8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80007d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007d8:	210f      	movs	r1, #15
 80007da:	2200      	movs	r2, #0
 80007dc:	f000 ffc6 	bl	800176c <HAL_NVIC_SetPriority>
}
 80007e0:	3740      	adds	r7, #64	; 0x40
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	10624dd3 	.word	0x10624dd3

080007ec <MX_USART1_UART_Init>:

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80007f0:	4b13      	ldr	r3, [pc, #76]	; (8000840 <MX_USART1_UART_Init+0x54>)
 80007f2:	4a14      	ldr	r2, [pc, #80]	; (8000844 <MX_USART1_UART_Init+0x58>)
 80007f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80007f6:	4b12      	ldr	r3, [pc, #72]	; (8000840 <MX_USART1_UART_Init+0x54>)
 80007f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007fe:	4b10      	ldr	r3, [pc, #64]	; (8000840 <MX_USART1_UART_Init+0x54>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000804:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <MX_USART1_UART_Init+0x54>)
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800080a:	4b0d      	ldr	r3, [pc, #52]	; (8000840 <MX_USART1_UART_Init+0x54>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000810:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <MX_USART1_UART_Init+0x54>)
 8000812:	220c      	movs	r2, #12
 8000814:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000816:	4b0a      	ldr	r3, [pc, #40]	; (8000840 <MX_USART1_UART_Init+0x54>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800081c:	4b08      	ldr	r3, [pc, #32]	; (8000840 <MX_USART1_UART_Init+0x54>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000822:	4b07      	ldr	r3, [pc, #28]	; (8000840 <MX_USART1_UART_Init+0x54>)
 8000824:	2200      	movs	r2, #0
 8000826:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000828:	4b05      	ldr	r3, [pc, #20]	; (8000840 <MX_USART1_UART_Init+0x54>)
 800082a:	2200      	movs	r2, #0
 800082c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800082e:	4804      	ldr	r0, [pc, #16]	; (8000840 <MX_USART1_UART_Init+0x54>)
 8000830:	f002 fd48 	bl	80032c4 <HAL_UART_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800083a:	f000 f8a7 	bl	800098c <Error_Handler>
  }

}
 800083e:	bd80      	pop	{r7, pc}
 8000840:	2000013c 	.word	0x2000013c
 8000844:	40013800 	.word	0x40013800

08000848 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	; 0x28
 800084c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084e:	4a45      	ldr	r2, [pc, #276]	; (8000964 <MX_GPIO_Init+0x11c>)
 8000850:	4b44      	ldr	r3, [pc, #272]	; (8000964 <MX_GPIO_Init+0x11c>)
 8000852:	695b      	ldr	r3, [r3, #20]
 8000854:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000858:	6153      	str	r3, [r2, #20]
 800085a:	4b42      	ldr	r3, [pc, #264]	; (8000964 <MX_GPIO_Init+0x11c>)
 800085c:	695b      	ldr	r3, [r3, #20]
 800085e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000862:	613b      	str	r3, [r7, #16]
 8000864:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000866:	4a3f      	ldr	r2, [pc, #252]	; (8000964 <MX_GPIO_Init+0x11c>)
 8000868:	4b3e      	ldr	r3, [pc, #248]	; (8000964 <MX_GPIO_Init+0x11c>)
 800086a:	695b      	ldr	r3, [r3, #20]
 800086c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000870:	6153      	str	r3, [r2, #20]
 8000872:	4b3c      	ldr	r3, [pc, #240]	; (8000964 <MX_GPIO_Init+0x11c>)
 8000874:	695b      	ldr	r3, [r3, #20]
 8000876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	4a39      	ldr	r2, [pc, #228]	; (8000964 <MX_GPIO_Init+0x11c>)
 8000880:	4b38      	ldr	r3, [pc, #224]	; (8000964 <MX_GPIO_Init+0x11c>)
 8000882:	695b      	ldr	r3, [r3, #20]
 8000884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000888:	6153      	str	r3, [r2, #20]
 800088a:	4b36      	ldr	r3, [pc, #216]	; (8000964 <MX_GPIO_Init+0x11c>)
 800088c:	695b      	ldr	r3, [r3, #20]
 800088e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000896:	4a33      	ldr	r2, [pc, #204]	; (8000964 <MX_GPIO_Init+0x11c>)
 8000898:	4b32      	ldr	r3, [pc, #200]	; (8000964 <MX_GPIO_Init+0x11c>)
 800089a:	695b      	ldr	r3, [r3, #20]
 800089c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008a0:	6153      	str	r3, [r2, #20]
 80008a2:	4b30      	ldr	r3, [pc, #192]	; (8000964 <MX_GPIO_Init+0x11c>)
 80008a4:	695b      	ldr	r3, [r3, #20]
 80008a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ae:	4a2d      	ldr	r2, [pc, #180]	; (8000964 <MX_GPIO_Init+0x11c>)
 80008b0:	4b2c      	ldr	r3, [pc, #176]	; (8000964 <MX_GPIO_Init+0x11c>)
 80008b2:	695b      	ldr	r3, [r3, #20]
 80008b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80008b8:	6153      	str	r3, [r2, #20]
 80008ba:	4b2a      	ldr	r3, [pc, #168]	; (8000964 <MX_GPIO_Init+0x11c>)
 80008bc:	695b      	ldr	r3, [r3, #20]
 80008be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008c6:	4828      	ldr	r0, [pc, #160]	; (8000968 <MX_GPIO_Init+0x120>)
 80008c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008cc:	2200      	movs	r2, #0
 80008ce:	f002 fcd3 	bl	8003278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80008d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008da:	2200      	movs	r2, #0
 80008dc:	f002 fccc 	bl	8003278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80008e0:	4822      	ldr	r0, [pc, #136]	; (800096c <MX_GPIO_Init+0x124>)
 80008e2:	2104      	movs	r1, #4
 80008e4:	2200      	movs	r2, #0
 80008e6:	f002 fcc7 	bl	8003278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008f0:	4b1f      	ldr	r3, [pc, #124]	; (8000970 <MX_GPIO_Init+0x128>)
 80008f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	481d      	ldr	r0, [pc, #116]	; (8000974 <MX_GPIO_Init+0x12c>)
 80008fe:	4619      	mov	r1, r3
 8000900:	f002 fb4a 	bl	8002f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000904:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000908:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090a:	2301      	movs	r3, #1
 800090c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000912:	2303      	movs	r3, #3
 8000914:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 0314 	add.w	r3, r7, #20
 800091a:	4813      	ldr	r0, [pc, #76]	; (8000968 <MX_GPIO_Init+0x120>)
 800091c:	4619      	mov	r1, r3
 800091e:	f002 fb3b 	bl	8002f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000926:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000928:	2301      	movs	r3, #1
 800092a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000930:	2303      	movs	r3, #3
 8000932:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800093c:	4619      	mov	r1, r3
 800093e:	f002 fb2b 	bl	8002f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000942:	2304      	movs	r3, #4
 8000944:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000946:	2301      	movs	r3, #1
 8000948:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800094e:	2303      	movs	r3, #3
 8000950:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	4805      	ldr	r0, [pc, #20]	; (800096c <MX_GPIO_Init+0x124>)
 8000958:	4619      	mov	r1, r3
 800095a:	f002 fb1d 	bl	8002f98 <HAL_GPIO_Init>

}
 800095e:	3728      	adds	r7, #40	; 0x28
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40021000 	.word	0x40021000
 8000968:	48000400 	.word	0x48000400
 800096c:	48000c00 	.word	0x48000c00
 8000970:	10210000 	.word	0x10210000
 8000974:	48000800 	.word	0x48000800

08000978 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
    //HAL_IncTick();
  }
/* USER CODE BEGIN Callback 1 */

/* USER CODE END Callback 1 */
}
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
  }
 8000990:	e7fe      	b.n	8000990 <Error_Handler+0x4>
 8000992:	bf00      	nop

08000994 <LCD_SPI_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void LCD_SPI_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8000998:	4b1a      	ldr	r3, [pc, #104]	; (8000a04 <LCD_SPI_Init+0x70>)
 800099a:	4a1b      	ldr	r2, [pc, #108]	; (8000a08 <LCD_SPI_Init+0x74>)
 800099c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800099e:	4b19      	ldr	r3, [pc, #100]	; (8000a04 <LCD_SPI_Init+0x70>)
 80009a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009a4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80009a6:	4b17      	ldr	r3, [pc, #92]	; (8000a04 <LCD_SPI_Init+0x70>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80009ac:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <LCD_SPI_Init+0x70>)
 80009ae:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80009b2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009b4:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <LCD_SPI_Init+0x70>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009ba:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <LCD_SPI_Init+0x70>)
 80009bc:	2200      	movs	r2, #0
 80009be:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80009c0:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <LCD_SPI_Init+0x70>)
 80009c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009c6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009c8:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <LCD_SPI_Init+0x70>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009ce:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <LCD_SPI_Init+0x70>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80009d4:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <LCD_SPI_Init+0x70>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009da:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <LCD_SPI_Init+0x70>)
 80009dc:	2200      	movs	r2, #0
 80009de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80009e0:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <LCD_SPI_Init+0x70>)
 80009e2:	2207      	movs	r2, #7
 80009e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009e6:	4b07      	ldr	r3, [pc, #28]	; (8000a04 <LCD_SPI_Init+0x70>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;   //MIGHT BE A PROBLEM
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <LCD_SPI_Init+0x70>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80009f2:	4804      	ldr	r0, [pc, #16]	; (8000a04 <LCD_SPI_Init+0x70>)
 80009f4:	f003 fb0a 	bl	800400c <HAL_SPI_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <LCD_SPI_Init+0x6e>
  {
    Error_Handler();
 80009fe:	f7ff ffc5 	bl	800098c <Error_Handler>
  }

}
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	200001cc 	.word	0x200001cc
 8000a08:	40003c00 	.word	0x40003c00

08000a0c <HAL_SPI_MspInit>:


void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b088      	sub	sp, #32
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI3)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a11      	ldr	r2, [pc, #68]	; (8000a60 <HAL_SPI_MspInit+0x54>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d11c      	bne.n	8000a58 <HAL_SPI_MspInit+0x4c>
  {
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a1e:	4a11      	ldr	r2, [pc, #68]	; (8000a64 <HAL_SPI_MspInit+0x58>)
 8000a20:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <HAL_SPI_MspInit+0x58>)
 8000a22:	69db      	ldr	r3, [r3, #28]
 8000a24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a28:	61d3      	str	r3, [r2, #28]
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <HAL_SPI_MspInit+0x58>)
 8000a2c:	69db      	ldr	r3, [r3, #28]
 8000a2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000a36:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a3a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a44:	2303      	movs	r3, #3
 8000a46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a48:	2306      	movs	r3, #6
 8000a4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a4c:	f107 030c 	add.w	r3, r7, #12
 8000a50:	4805      	ldr	r0, [pc, #20]	; (8000a68 <HAL_SPI_MspInit+0x5c>)
 8000a52:	4619      	mov	r1, r3
 8000a54:	f002 faa0 	bl	8002f98 <HAL_GPIO_Init>

  }

}
 8000a58:	3720      	adds	r7, #32
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40003c00 	.word	0x40003c00
 8000a64:	40021000 	.word	0x40021000
 8000a68:	48000800 	.word	0x48000800

08000a6c <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a70:	4a1f      	ldr	r2, [pc, #124]	; (8000af0 <SystemInit+0x84>)
 8000a72:	4b1f      	ldr	r3, [pc, #124]	; (8000af0 <SystemInit+0x84>)
 8000a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000a80:	4a1c      	ldr	r2, [pc, #112]	; (8000af4 <SystemInit+0x88>)
 8000a82:	4b1c      	ldr	r3, [pc, #112]	; (8000af4 <SystemInit+0x88>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f043 0301 	orr.w	r3, r3, #1
 8000a8a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8000a8c:	4919      	ldr	r1, [pc, #100]	; (8000af4 <SystemInit+0x88>)
 8000a8e:	4b19      	ldr	r3, [pc, #100]	; (8000af4 <SystemInit+0x88>)
 8000a90:	685a      	ldr	r2, [r3, #4]
 8000a92:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <SystemInit+0x8c>)
 8000a94:	4013      	ands	r3, r2
 8000a96:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000a98:	4a16      	ldr	r2, [pc, #88]	; (8000af4 <SystemInit+0x88>)
 8000a9a:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <SystemInit+0x88>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000aa6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000aa8:	4a12      	ldr	r2, [pc, #72]	; (8000af4 <SystemInit+0x88>)
 8000aaa:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <SystemInit+0x88>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ab2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000ab4:	4a0f      	ldr	r2, [pc, #60]	; (8000af4 <SystemInit+0x88>)
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <SystemInit+0x88>)
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000abe:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8000ac0:	4a0c      	ldr	r2, [pc, #48]	; (8000af4 <SystemInit+0x88>)
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <SystemInit+0x88>)
 8000ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ac6:	f023 030f 	bic.w	r3, r3, #15
 8000aca:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8000acc:	4909      	ldr	r1, [pc, #36]	; (8000af4 <SystemInit+0x88>)
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <SystemInit+0x88>)
 8000ad0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ad2:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <SystemInit+0x90>)
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <SystemInit+0x88>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ade:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <SystemInit+0x84>)
 8000ae0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ae4:	609a      	str	r2, [r3, #8]
#endif
}
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	e000ed00 	.word	0xe000ed00
 8000af4:	40021000 	.word	0x40021000
 8000af8:	f87fc00c 	.word	0xf87fc00c
 8000afc:	ff00fccc 	.word	0xff00fccc

08000b00 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b04:	f000 fd2a 	bl	800155c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8000b08:	f000 fe82 	bl	8001810 <HAL_SYSTICK_IRQHandler>
  //HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop

08000b10 <TIM1_UP_TIM16_IRQHandler>:

/**
* @brief This function handles TIM1 update and TIM16 interrupts.
*/
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b14:	4801      	ldr	r0, [pc, #4]	; (8000b1c <TIM1_UP_TIM16_IRQHandler+0xc>)
 8000b16:	f002 ff13 	bl	8003940 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	200000fc 	.word	0x200000fc

08000b20 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8000b20:	b590      	push	{r4, r7, lr}
 8000b22:	b089      	sub	sp, #36	; 0x24
 8000b24:	af02      	add	r7, sp, #8
 8000b26:	4604      	mov	r4, r0
 8000b28:	4608      	mov	r0, r1
 8000b2a:	4611      	mov	r1, r2
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	4623      	mov	r3, r4
 8000b30:	71fb      	strb	r3, [r7, #7]
 8000b32:	4603      	mov	r3, r0
 8000b34:	71bb      	strb	r3, [r7, #6]
 8000b36:	460b      	mov	r3, r1
 8000b38:	717b      	strb	r3, [r7, #5]
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8000b42:	7dfb      	ldrb	r3, [r7, #23]
 8000b44:	2b1f      	cmp	r3, #31
 8000b46:	d802      	bhi.n	8000b4e <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	71fb      	strb	r3, [r7, #7]
 8000b4c:	e002      	b.n	8000b54 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 8000b4e:	7dfb      	ldrb	r3, [r7, #23]
 8000b50:	3b20      	subs	r3, #32
 8000b52:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8000b54:	2300      	movs	r3, #0
 8000b56:	753b      	strb	r3, [r7, #20]
 8000b58:	e012      	b.n	8000b80 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 8000b5a:	7d39      	ldrb	r1, [r7, #20]
 8000b5c:	7dfa      	ldrb	r2, [r7, #23]
 8000b5e:	7d38      	ldrb	r0, [r7, #20]
 8000b60:	4c3c      	ldr	r4, [pc, #240]	; (8000c54 <ILI9341_Draw_Char+0x134>)
 8000b62:	4613      	mov	r3, r2
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	4413      	add	r3, r2
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	4403      	add	r3, r0
 8000b6c:	4423      	add	r3, r4
 8000b6e:	781a      	ldrb	r2, [r3, #0]
 8000b70:	f107 0318 	add.w	r3, r7, #24
 8000b74:	440b      	add	r3, r1
 8000b76:	f803 2c0c 	strb.w	r2, [r3, #-12]
    } else {
        function_char -= 32;
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8000b7a:	7d3b      	ldrb	r3, [r7, #20]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	753b      	strb	r3, [r7, #20]
 8000b80:	7d3b      	ldrb	r3, [r7, #20]
 8000b82:	2b05      	cmp	r3, #5
 8000b84:	d9e9      	bls.n	8000b5a <ILI9341_Draw_Char+0x3a>
		{
		temp[k] = font[function_char][k];
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8000b86:	79bb      	ldrb	r3, [r7, #6]
 8000b88:	b298      	uxth	r0, r3
 8000b8a:	797b      	ldrb	r3, [r7, #5]
 8000b8c:	b299      	uxth	r1, r3
 8000b8e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000b90:	461a      	mov	r2, r3
 8000b92:	0052      	lsls	r2, r2, #1
 8000b94:	4413      	add	r3, r2
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	b29a      	uxth	r2, r3
 8000b9a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000b9c:	00db      	lsls	r3, r3, #3
 8000b9e:	b29c      	uxth	r4, r3
 8000ba0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000ba2:	9300      	str	r3, [sp, #0]
 8000ba4:	4623      	mov	r3, r4
 8000ba6:	f000 fc47 	bl	8001438 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8000baa:	2300      	movs	r3, #0
 8000bac:	757b      	strb	r3, [r7, #21]
 8000bae:	e04a      	b.n	8000c46 <ILI9341_Draw_Char+0x126>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	75bb      	strb	r3, [r7, #22]
 8000bb4:	e041      	b.n	8000c3a <ILI9341_Draw_Char+0x11a>
            if (temp[j] & (1<<i)) {			
 8000bb6:	7d7b      	ldrb	r3, [r7, #21]
 8000bb8:	f107 0218 	add.w	r2, r7, #24
 8000bbc:	4413      	add	r3, r2
 8000bbe:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	7dbb      	ldrb	r3, [r7, #22]
 8000bc6:	fa42 f303 	asr.w	r3, r2, r3
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d030      	beq.n	8000c34 <ILI9341_Draw_Char+0x114>
							if(Size == 1)
 8000bd2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d112      	bne.n	8000bfe <ILI9341_Draw_Char+0xde>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8000bd8:	79bb      	ldrb	r3, [r7, #6]
 8000bda:	b29a      	uxth	r2, r3
 8000bdc:	7d7b      	ldrb	r3, [r7, #21]
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	4413      	add	r3, r2
 8000be2:	b299      	uxth	r1, r3
 8000be4:	797b      	ldrb	r3, [r7, #5]
 8000be6:	b29a      	uxth	r2, r3
 8000be8:	7dbb      	ldrb	r3, [r7, #22]
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	4413      	add	r3, r2
 8000bee:	b29a      	uxth	r2, r3
 8000bf0:	887b      	ldrh	r3, [r7, #2]
 8000bf2:	4608      	mov	r0, r1
 8000bf4:	4611      	mov	r1, r2
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	f000 fb48 	bl	800128c <ILI9341_Draw_Pixel>
 8000bfc:	e01a      	b.n	8000c34 <ILI9341_Draw_Char+0x114>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8000bfe:	79bb      	ldrb	r3, [r7, #6]
 8000c00:	b29a      	uxth	r2, r3
 8000c02:	7d7b      	ldrb	r3, [r7, #21]
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000c08:	fb11 f303 	smulbb	r3, r1, r3
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	4413      	add	r3, r2
 8000c10:	b298      	uxth	r0, r3
 8000c12:	797b      	ldrb	r3, [r7, #5]
 8000c14:	b29a      	uxth	r2, r3
 8000c16:	7dbb      	ldrb	r3, [r7, #22]
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000c1c:	fb11 f303 	smulbb	r3, r1, r3
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	4413      	add	r3, r2
 8000c24:	b299      	uxth	r1, r3
 8000c26:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000c28:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8000c2a:	887b      	ldrh	r3, [r7, #2]
 8000c2c:	9300      	str	r3, [sp, #0]
 8000c2e:	4623      	mov	r3, r4
 8000c30:	f000 fc02 	bl	8001438 <ILI9341_Draw_Rectangle>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
    for (j=0; j<CHAR_WIDTH; j++) {
        for (i=0; i<CHAR_HEIGHT; i++) {
 8000c34:	7dbb      	ldrb	r3, [r7, #22]
 8000c36:	3301      	adds	r3, #1
 8000c38:	75bb      	strb	r3, [r7, #22]
 8000c3a:	7dbb      	ldrb	r3, [r7, #22]
 8000c3c:	2b07      	cmp	r3, #7
 8000c3e:	d9ba      	bls.n	8000bb6 <ILI9341_Draw_Char+0x96>
		temp[k] = font[function_char][k];
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
    for (j=0; j<CHAR_WIDTH; j++) {
 8000c40:	7d7b      	ldrb	r3, [r7, #21]
 8000c42:	3301      	adds	r3, #1
 8000c44:	757b      	strb	r3, [r7, #21]
 8000c46:	7d7b      	ldrb	r3, [r7, #21]
 8000c48:	2b05      	cmp	r3, #5
 8000c4a:	d9b1      	bls.n	8000bb0 <ILI9341_Draw_Char+0x90>
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
							}
            }						
        }
    }
}
 8000c4c:	371c      	adds	r7, #28
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd90      	pop	{r4, r7, pc}
 8000c52:	bf00      	nop
 8000c54:	08005644 	.word	0x08005644

08000c58 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8000c58:	b590      	push	{r4, r7, lr}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af02      	add	r7, sp, #8
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	4608      	mov	r0, r1
 8000c62:	4611      	mov	r1, r2
 8000c64:	461a      	mov	r2, r3
 8000c66:	4603      	mov	r3, r0
 8000c68:	70fb      	strb	r3, [r7, #3]
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	70bb      	strb	r3, [r7, #2]
 8000c6e:	4613      	mov	r3, r2
 8000c70:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 8000c72:	e017      	b.n	8000ca4 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	1c5a      	adds	r2, r3, #1
 8000c78:	607a      	str	r2, [r7, #4]
 8000c7a:	7818      	ldrb	r0, [r3, #0]
 8000c7c:	78f9      	ldrb	r1, [r7, #3]
 8000c7e:	78ba      	ldrb	r2, [r7, #2]
 8000c80:	883c      	ldrh	r4, [r7, #0]
 8000c82:	8b3b      	ldrh	r3, [r7, #24]
 8000c84:	9300      	str	r3, [sp, #0]
 8000c86:	8bbb      	ldrh	r3, [r7, #28]
 8000c88:	9301      	str	r3, [sp, #4]
 8000c8a:	4623      	mov	r3, r4
 8000c8c:	f7ff ff48 	bl	8000b20 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8000c90:	8b3b      	ldrh	r3, [r7, #24]
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	461a      	mov	r2, r3
 8000c96:	0052      	lsls	r2, r2, #1
 8000c98:	4413      	add	r3, r2
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	78fb      	ldrb	r3, [r7, #3]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	70fb      	strb	r3, [r7, #3]

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
    while (*Text) {
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d1e3      	bne.n	8000c74 <ILI9341_Draw_Text+0x1c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
        X += CHAR_WIDTH*Size;
    }
}
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd90      	pop	{r4, r7, pc}
 8000cb2:	bf00      	nop

08000cb4 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
LCD_SPI_Init();																							//SPI INIT
 8000cb8:	f7ff fe6c 	bl	8000994 <LCD_SPI_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8000cbc:	4802      	ldr	r0, [pc, #8]	; (8000cc8 <ILI9341_SPI_Init+0x14>)
 8000cbe:	2104      	movs	r1, #4
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f002 fad9 	bl	8003278 <HAL_GPIO_WritePin>
}
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	48000c00 	.word	0x48000c00

08000ccc <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8000cd6:	1dfb      	adds	r3, r7, #7
 8000cd8:	4804      	ldr	r0, [pc, #16]	; (8000cec <ILI9341_SPI_Send+0x20>)
 8000cda:	4619      	mov	r1, r3
 8000cdc:	2201      	movs	r2, #1
 8000cde:	2301      	movs	r3, #1
 8000ce0:	f003 fa24 	bl	800412c <HAL_SPI_Transmit>
}
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	200001cc 	.word	0x200001cc

08000cf0 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000cfa:	480c      	ldr	r0, [pc, #48]	; (8000d2c <ILI9341_Write_Command+0x3c>)
 8000cfc:	2104      	movs	r1, #4
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f002 faba 	bl	8003278 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000d04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f002 fab3 	bl	8003278 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff ffd9 	bl	8000ccc <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8000d1a:	4804      	ldr	r0, [pc, #16]	; (8000d2c <ILI9341_Write_Command+0x3c>)
 8000d1c:	2104      	movs	r1, #4
 8000d1e:	2201      	movs	r2, #1
 8000d20:	f002 faaa 	bl	8003278 <HAL_GPIO_WritePin>
}
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	48000c00 	.word	0x48000c00

08000d30 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000d3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d42:	2201      	movs	r2, #1
 8000d44:	f002 fa98 	bl	8003278 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000d48:	4808      	ldr	r0, [pc, #32]	; (8000d6c <ILI9341_Write_Data+0x3c>)
 8000d4a:	2104      	movs	r1, #4
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f002 fa93 	bl	8003278 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff ffb9 	bl	8000ccc <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000d5a:	4804      	ldr	r0, [pc, #16]	; (8000d6c <ILI9341_Write_Data+0x3c>)
 8000d5c:	2104      	movs	r1, #4
 8000d5e:	2201      	movs	r2, #1
 8000d60:	f002 fa8a 	bl	8003278 <HAL_GPIO_WritePin>
}
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	48000c00 	.word	0x48000c00

08000d70 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8000d70:	b590      	push	{r4, r7, lr}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4604      	mov	r4, r0
 8000d78:	4608      	mov	r0, r1
 8000d7a:	4611      	mov	r1, r2
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4623      	mov	r3, r4
 8000d80:	80fb      	strh	r3, [r7, #6]
 8000d82:	4603      	mov	r3, r0
 8000d84:	80bb      	strh	r3, [r7, #4]
 8000d86:	460b      	mov	r3, r1
 8000d88:	807b      	strh	r3, [r7, #2]
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8000d8e:	202a      	movs	r0, #42	; 0x2a
 8000d90:	f7ff ffae 	bl	8000cf0 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8000d94:	88fb      	ldrh	r3, [r7, #6]
 8000d96:	0a1b      	lsrs	r3, r3, #8
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ffc7 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8000da2:	88fb      	ldrh	r3, [r7, #6]
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff ffc2 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8000dac:	887b      	ldrh	r3, [r7, #2]
 8000dae:	0a1b      	lsrs	r3, r3, #8
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ffbb 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8000dba:	887b      	ldrh	r3, [r7, #2]
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff ffb6 	bl	8000d30 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8000dc4:	202b      	movs	r0, #43	; 0x2b
 8000dc6:	f7ff ff93 	bl	8000cf0 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8000dca:	88bb      	ldrh	r3, [r7, #4]
 8000dcc:	0a1b      	lsrs	r3, r3, #8
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff ffac 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8000dd8:	88bb      	ldrh	r3, [r7, #4]
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff ffa7 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8000de2:	883b      	ldrh	r3, [r7, #0]
 8000de4:	0a1b      	lsrs	r3, r3, #8
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ffa0 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8000df0:	883b      	ldrh	r3, [r7, #0]
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff ff9b 	bl	8000d30 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8000dfa:	202c      	movs	r0, #44	; 0x2c
 8000dfc:	f7ff ff78 	bl	8000cf0 <ILI9341_Write_Command>
}
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd90      	pop	{r4, r7, pc}
 8000e06:	bf00      	nop

08000e08 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8000e0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e14:	2201      	movs	r2, #1
 8000e16:	f002 fa2f 	bl	8003278 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000e1a:	20c8      	movs	r0, #200	; 0xc8
 8000e1c:	f000 fbb8 	bl	8001590 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000e20:	4807      	ldr	r0, [pc, #28]	; (8000e40 <ILI9341_Reset+0x38>)
 8000e22:	2104      	movs	r1, #4
 8000e24:	2200      	movs	r2, #0
 8000e26:	f002 fa27 	bl	8003278 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000e2a:	20c8      	movs	r0, #200	; 0xc8
 8000e2c:	f000 fbb0 	bl	8001590 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8000e30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e38:	2201      	movs	r2, #1
 8000e3a:	f002 fa1d 	bl	8003278 <HAL_GPIO_WritePin>
}
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	48000c00 	.word	0x48000c00

08000e44 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8000e52:	2036      	movs	r0, #54	; 0x36
 8000e54:	f7ff ff4c 	bl	8000cf0 <ILI9341_Write_Command>
HAL_Delay(1);
 8000e58:	2001      	movs	r0, #1
 8000e5a:	f000 fb99 	bl	8001590 <HAL_Delay>
	
switch(screen_rotation) 
 8000e5e:	7bfb      	ldrb	r3, [r7, #15]
 8000e60:	2b03      	cmp	r3, #3
 8000e62:	d837      	bhi.n	8000ed4 <ILI9341_Set_Rotation+0x90>
 8000e64:	a201      	add	r2, pc, #4	; (adr r2, 8000e6c <ILI9341_Set_Rotation+0x28>)
 8000e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e6a:	bf00      	nop
 8000e6c:	08000e7d 	.word	0x08000e7d
 8000e70:	08000e93 	.word	0x08000e93
 8000e74:	08000ea9 	.word	0x08000ea9
 8000e78:	08000ebf 	.word	0x08000ebf
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8000e7c:	2048      	movs	r0, #72	; 0x48
 8000e7e:	f7ff ff57 	bl	8000d30 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8000e82:	4b16      	ldr	r3, [pc, #88]	; (8000edc <ILI9341_Set_Rotation+0x98>)
 8000e84:	22f0      	movs	r2, #240	; 0xf0
 8000e86:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000e88:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <ILI9341_Set_Rotation+0x9c>)
 8000e8a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000e8e:	801a      	strh	r2, [r3, #0]
			break;
 8000e90:	e021      	b.n	8000ed6 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8000e92:	2028      	movs	r0, #40	; 0x28
 8000e94:	f7ff ff4c 	bl	8000d30 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000e98:	4b10      	ldr	r3, [pc, #64]	; (8000edc <ILI9341_Set_Rotation+0x98>)
 8000e9a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000e9e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000ea0:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <ILI9341_Set_Rotation+0x9c>)
 8000ea2:	22f0      	movs	r2, #240	; 0xf0
 8000ea4:	801a      	strh	r2, [r3, #0]
			break;
 8000ea6:	e016      	b.n	8000ed6 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8000ea8:	2088      	movs	r0, #136	; 0x88
 8000eaa:	f7ff ff41 	bl	8000d30 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8000eae:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <ILI9341_Set_Rotation+0x98>)
 8000eb0:	22f0      	movs	r2, #240	; 0xf0
 8000eb2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000eb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <ILI9341_Set_Rotation+0x9c>)
 8000eb6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000eba:	801a      	strh	r2, [r3, #0]
			break;
 8000ebc:	e00b      	b.n	8000ed6 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8000ebe:	20e8      	movs	r0, #232	; 0xe8
 8000ec0:	f7ff ff36 	bl	8000d30 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000ec4:	4b05      	ldr	r3, [pc, #20]	; (8000edc <ILI9341_Set_Rotation+0x98>)
 8000ec6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000eca:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000ecc:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <ILI9341_Set_Rotation+0x9c>)
 8000ece:	22f0      	movs	r2, #240	; 0xf0
 8000ed0:	801a      	strh	r2, [r3, #0]
			break;
 8000ed2:	e000      	b.n	8000ed6 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8000ed4:	bf00      	nop
	}
}
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000006 	.word	0x20000006
 8000ee0:	20000004 	.word	0x20000004

08000ee4 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8000ee8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	f002 f9c1 	bl	8003278 <HAL_GPIO_WritePin>
}
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8000efc:	f7ff fff2 	bl	8000ee4 <ILI9341_Enable>
ILI9341_SPI_Init();
 8000f00:	f7ff fed8 	bl	8000cb4 <ILI9341_SPI_Init>
ILI9341_Reset();
 8000f04:	f7ff ff80 	bl	8000e08 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8000f08:	2001      	movs	r0, #1
 8000f0a:	f7ff fef1 	bl	8000cf0 <ILI9341_Write_Command>
HAL_Delay(1000);
 8000f0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f12:	f000 fb3d 	bl	8001590 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8000f16:	20cb      	movs	r0, #203	; 0xcb
 8000f18:	f7ff feea 	bl	8000cf0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8000f1c:	2039      	movs	r0, #57	; 0x39
 8000f1e:	f7ff ff07 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8000f22:	202c      	movs	r0, #44	; 0x2c
 8000f24:	f7ff ff04 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000f28:	2000      	movs	r0, #0
 8000f2a:	f7ff ff01 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8000f2e:	2034      	movs	r0, #52	; 0x34
 8000f30:	f7ff fefe 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8000f34:	2002      	movs	r0, #2
 8000f36:	f7ff fefb 	bl	8000d30 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8000f3a:	20cf      	movs	r0, #207	; 0xcf
 8000f3c:	f7ff fed8 	bl	8000cf0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000f40:	2000      	movs	r0, #0
 8000f42:	f7ff fef5 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8000f46:	20c1      	movs	r0, #193	; 0xc1
 8000f48:	f7ff fef2 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8000f4c:	2030      	movs	r0, #48	; 0x30
 8000f4e:	f7ff feef 	bl	8000d30 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8000f52:	20e8      	movs	r0, #232	; 0xe8
 8000f54:	f7ff fecc 	bl	8000cf0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8000f58:	2085      	movs	r0, #133	; 0x85
 8000f5a:	f7ff fee9 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000f5e:	2000      	movs	r0, #0
 8000f60:	f7ff fee6 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8000f64:	2078      	movs	r0, #120	; 0x78
 8000f66:	f7ff fee3 	bl	8000d30 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8000f6a:	20ea      	movs	r0, #234	; 0xea
 8000f6c:	f7ff fec0 	bl	8000cf0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000f70:	2000      	movs	r0, #0
 8000f72:	f7ff fedd 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000f76:	2000      	movs	r0, #0
 8000f78:	f7ff feda 	bl	8000d30 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8000f7c:	20ed      	movs	r0, #237	; 0xed
 8000f7e:	f7ff feb7 	bl	8000cf0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8000f82:	2064      	movs	r0, #100	; 0x64
 8000f84:	f7ff fed4 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000f88:	2003      	movs	r0, #3
 8000f8a:	f7ff fed1 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8000f8e:	2012      	movs	r0, #18
 8000f90:	f7ff fece 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8000f94:	2081      	movs	r0, #129	; 0x81
 8000f96:	f7ff fecb 	bl	8000d30 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8000f9a:	20f7      	movs	r0, #247	; 0xf7
 8000f9c:	f7ff fea8 	bl	8000cf0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8000fa0:	2020      	movs	r0, #32
 8000fa2:	f7ff fec5 	bl	8000d30 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8000fa6:	20c0      	movs	r0, #192	; 0xc0
 8000fa8:	f7ff fea2 	bl	8000cf0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8000fac:	2023      	movs	r0, #35	; 0x23
 8000fae:	f7ff febf 	bl	8000d30 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8000fb2:	20c1      	movs	r0, #193	; 0xc1
 8000fb4:	f7ff fe9c 	bl	8000cf0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8000fb8:	2010      	movs	r0, #16
 8000fba:	f7ff feb9 	bl	8000d30 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8000fbe:	20c5      	movs	r0, #197	; 0xc5
 8000fc0:	f7ff fe96 	bl	8000cf0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8000fc4:	203e      	movs	r0, #62	; 0x3e
 8000fc6:	f7ff feb3 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8000fca:	2028      	movs	r0, #40	; 0x28
 8000fcc:	f7ff feb0 	bl	8000d30 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8000fd0:	20c7      	movs	r0, #199	; 0xc7
 8000fd2:	f7ff fe8d 	bl	8000cf0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8000fd6:	2086      	movs	r0, #134	; 0x86
 8000fd8:	f7ff feaa 	bl	8000d30 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8000fdc:	2036      	movs	r0, #54	; 0x36
 8000fde:	f7ff fe87 	bl	8000cf0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8000fe2:	2048      	movs	r0, #72	; 0x48
 8000fe4:	f7ff fea4 	bl	8000d30 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8000fe8:	203a      	movs	r0, #58	; 0x3a
 8000fea:	f7ff fe81 	bl	8000cf0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8000fee:	2055      	movs	r0, #85	; 0x55
 8000ff0:	f7ff fe9e 	bl	8000d30 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8000ff4:	20b1      	movs	r0, #177	; 0xb1
 8000ff6:	f7ff fe7b 	bl	8000cf0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f7ff fe98 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8001000:	2018      	movs	r0, #24
 8001002:	f7ff fe95 	bl	8000d30 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8001006:	20b6      	movs	r0, #182	; 0xb6
 8001008:	f7ff fe72 	bl	8000cf0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 800100c:	2008      	movs	r0, #8
 800100e:	f7ff fe8f 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8001012:	2082      	movs	r0, #130	; 0x82
 8001014:	f7ff fe8c 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8001018:	2027      	movs	r0, #39	; 0x27
 800101a:	f7ff fe89 	bl	8000d30 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 800101e:	20f2      	movs	r0, #242	; 0xf2
 8001020:	f7ff fe66 	bl	8000cf0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001024:	2000      	movs	r0, #0
 8001026:	f7ff fe83 	bl	8000d30 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 800102a:	2026      	movs	r0, #38	; 0x26
 800102c:	f7ff fe60 	bl	8000cf0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8001030:	2001      	movs	r0, #1
 8001032:	f7ff fe7d 	bl	8000d30 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8001036:	20e0      	movs	r0, #224	; 0xe0
 8001038:	f7ff fe5a 	bl	8000cf0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 800103c:	200f      	movs	r0, #15
 800103e:	f7ff fe77 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001042:	2031      	movs	r0, #49	; 0x31
 8001044:	f7ff fe74 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8001048:	202b      	movs	r0, #43	; 0x2b
 800104a:	f7ff fe71 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 800104e:	200c      	movs	r0, #12
 8001050:	f7ff fe6e 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001054:	200e      	movs	r0, #14
 8001056:	f7ff fe6b 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 800105a:	2008      	movs	r0, #8
 800105c:	f7ff fe68 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8001060:	204e      	movs	r0, #78	; 0x4e
 8001062:	f7ff fe65 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8001066:	20f1      	movs	r0, #241	; 0xf1
 8001068:	f7ff fe62 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 800106c:	2037      	movs	r0, #55	; 0x37
 800106e:	f7ff fe5f 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8001072:	2007      	movs	r0, #7
 8001074:	f7ff fe5c 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8001078:	2010      	movs	r0, #16
 800107a:	f7ff fe59 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800107e:	2003      	movs	r0, #3
 8001080:	f7ff fe56 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001084:	200e      	movs	r0, #14
 8001086:	f7ff fe53 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 800108a:	2009      	movs	r0, #9
 800108c:	f7ff fe50 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001090:	2000      	movs	r0, #0
 8001092:	f7ff fe4d 	bl	8000d30 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8001096:	20e1      	movs	r0, #225	; 0xe1
 8001098:	f7ff fe2a 	bl	8000cf0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800109c:	2000      	movs	r0, #0
 800109e:	f7ff fe47 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80010a2:	200e      	movs	r0, #14
 80010a4:	f7ff fe44 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 80010a8:	2014      	movs	r0, #20
 80010aa:	f7ff fe41 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80010ae:	2003      	movs	r0, #3
 80010b0:	f7ff fe3e 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 80010b4:	2011      	movs	r0, #17
 80010b6:	f7ff fe3b 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80010ba:	2007      	movs	r0, #7
 80010bc:	f7ff fe38 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80010c0:	2031      	movs	r0, #49	; 0x31
 80010c2:	f7ff fe35 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80010c6:	20c1      	movs	r0, #193	; 0xc1
 80010c8:	f7ff fe32 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 80010cc:	2048      	movs	r0, #72	; 0x48
 80010ce:	f7ff fe2f 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80010d2:	2008      	movs	r0, #8
 80010d4:	f7ff fe2c 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80010d8:	200f      	movs	r0, #15
 80010da:	f7ff fe29 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80010de:	200c      	movs	r0, #12
 80010e0:	f7ff fe26 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80010e4:	2031      	movs	r0, #49	; 0x31
 80010e6:	f7ff fe23 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 80010ea:	2036      	movs	r0, #54	; 0x36
 80010ec:	f7ff fe20 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80010f0:	200f      	movs	r0, #15
 80010f2:	f7ff fe1d 	bl	8000d30 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 80010f6:	2011      	movs	r0, #17
 80010f8:	f7ff fdfa 	bl	8000cf0 <ILI9341_Write_Command>
HAL_Delay(120);
 80010fc:	2078      	movs	r0, #120	; 0x78
 80010fe:	f000 fa47 	bl	8001590 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8001102:	2029      	movs	r0, #41	; 0x29
 8001104:	f7ff fdf4 	bl	8000cf0 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8001108:	2000      	movs	r0, #0
 800110a:	f7ff fe9b 	bl	8000e44 <ILI9341_Set_Rotation>
}
 800110e:	bd80      	pop	{r7, pc}

08001110 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8001110:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001114:	b08d      	sub	sp, #52	; 0x34
 8001116:	af00      	add	r7, sp, #0
 8001118:	4603      	mov	r3, r0
 800111a:	6039      	str	r1, [r7, #0]
 800111c:	80fb      	strh	r3, [r7, #6]
 800111e:	466b      	mov	r3, sp
 8001120:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	62fb      	str	r3, [r7, #44]	; 0x2c
if((Size*2) < BURST_MAX_SIZE)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800112e:	d202      	bcs.n	8001136 <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001134:	e002      	b.n	800113c <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8001136:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800113a:	62fb      	str	r3, [r7, #44]	; 0x2c
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800113c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001140:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001144:	2201      	movs	r2, #1
 8001146:	f002 f897 	bl	8003278 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800114a:	483b      	ldr	r0, [pc, #236]	; (8001238 <ILI9341_Draw_Colour_Burst+0x128>)
 800114c:	2104      	movs	r1, #4
 800114e:	2200      	movs	r2, #0
 8001150:	f002 f892 	bl	8003278 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8001154:	88fb      	ldrh	r3, [r7, #6]
 8001156:	0a1b      	lsrs	r3, r3, #8
 8001158:	b29b      	uxth	r3, r3
 800115a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 800115e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001160:	460b      	mov	r3, r1
 8001162:	3b01      	subs	r3, #1
 8001164:	61fb      	str	r3, [r7, #28]
 8001166:	460a      	mov	r2, r1
 8001168:	f04f 0300 	mov.w	r3, #0
 800116c:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8001170:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8001174:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8001178:	460a      	mov	r2, r1
 800117a:	f04f 0300 	mov.w	r3, #0
 800117e:	00dd      	lsls	r5, r3, #3
 8001180:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001184:	00d4      	lsls	r4, r2, #3
 8001186:	1dcb      	adds	r3, r1, #7
 8001188:	08db      	lsrs	r3, r3, #3
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	ebad 0d03 	sub.w	sp, sp, r3
 8001190:	466b      	mov	r3, sp
 8001192:	3300      	adds	r3, #0
 8001194:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001196:	2300      	movs	r3, #0
 8001198:	62bb      	str	r3, [r7, #40]	; 0x28
 800119a:	e00e      	b.n	80011ba <ILI9341_Draw_Colour_Burst+0xaa>
	{
		burst_buffer[j] = 	chifted;
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011a0:	4413      	add	r3, r2
 80011a2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80011a6:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 80011a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011aa:	3301      	adds	r3, #1
 80011ac:	88fa      	ldrh	r2, [r7, #6]
 80011ae:	b2d1      	uxtb	r1, r2
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	54d1      	strb	r1, [r2, r3]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);

unsigned char chifted = 	Colour>>8;;
unsigned char burst_buffer[Buffer_Size];
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80011b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011b6:	3302      	adds	r3, #2
 80011b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80011ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011be:	429a      	cmp	r2, r3
 80011c0:	d3ec      	bcc.n	800119c <ILI9341_Draw_Colour_Burst+0x8c>
	{
		burst_buffer[j] = 	chifted;
		burst_buffer[j+1] = Colour;
	}

uint32_t Sending_Size = Size*2;
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 80011c8:	697a      	ldr	r2, [r7, #20]
 80011ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d0:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80011da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80011dc:	fb01 f202 	mul.w	r2, r1, r2
 80011e0:	1a9b      	subs	r3, r3, r2
 80011e2:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d012      	beq.n	8001210 <ILI9341_Draw_Colour_Burst+0x100>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80011ea:	2300      	movs	r3, #0
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
 80011ee:	e00b      	b.n	8001208 <ILI9341_Draw_Colour_Burst+0xf8>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	4811      	ldr	r0, [pc, #68]	; (800123c <ILI9341_Draw_Colour_Burst+0x12c>)
 80011f8:	4611      	mov	r1, r2
 80011fa:	461a      	mov	r2, r3
 80011fc:	230a      	movs	r3, #10
 80011fe:	f002 ff95 	bl	800412c <HAL_SPI_Transmit>
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;

if(Sending_in_Block != 0)
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8001202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001204:	3301      	adds	r3, #1
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
 8001208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	429a      	cmp	r2, r3
 800120e:	d3ef      	bcc.n	80011f0 <ILI9341_Draw_Colour_Burst+0xe0>
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	b29b      	uxth	r3, r3
 8001216:	4809      	ldr	r0, [pc, #36]	; (800123c <ILI9341_Draw_Colour_Burst+0x12c>)
 8001218:	4611      	mov	r1, r2
 800121a:	461a      	mov	r2, r3
 800121c:	230a      	movs	r3, #10
 800121e:	f002 ff85 	bl	800412c <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001222:	4805      	ldr	r0, [pc, #20]	; (8001238 <ILI9341_Draw_Colour_Burst+0x128>)
 8001224:	2104      	movs	r1, #4
 8001226:	2201      	movs	r2, #1
 8001228:	f002 f826 	bl	8003278 <HAL_GPIO_WritePin>
 800122c:	46b5      	mov	sp, r6
}
 800122e:	3734      	adds	r7, #52	; 0x34
 8001230:	46bd      	mov	sp, r7
 8001232:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001236:	bf00      	nop
 8001238:	48000c00 	.word	0x48000c00
 800123c:	200001cc 	.word	0x200001cc

08001240 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 800124a:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <ILI9341_Fill_Screen+0x44>)
 800124c:	881b      	ldrh	r3, [r3, #0]
 800124e:	b29a      	uxth	r2, r3
 8001250:	4b0d      	ldr	r3, [pc, #52]	; (8001288 <ILI9341_Fill_Screen+0x48>)
 8001252:	881b      	ldrh	r3, [r3, #0]
 8001254:	b29b      	uxth	r3, r3
 8001256:	2000      	movs	r0, #0
 8001258:	2100      	movs	r1, #0
 800125a:	f7ff fd89 	bl	8000d70 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 800125e:	4b09      	ldr	r3, [pc, #36]	; (8001284 <ILI9341_Fill_Screen+0x44>)
 8001260:	881b      	ldrh	r3, [r3, #0]
 8001262:	b29b      	uxth	r3, r3
 8001264:	461a      	mov	r2, r3
 8001266:	4b08      	ldr	r3, [pc, #32]	; (8001288 <ILI9341_Fill_Screen+0x48>)
 8001268:	881b      	ldrh	r3, [r3, #0]
 800126a:	b29b      	uxth	r3, r3
 800126c:	fb03 f302 	mul.w	r3, r3, r2
 8001270:	461a      	mov	r2, r3
 8001272:	88fb      	ldrh	r3, [r7, #6]
 8001274:	4618      	mov	r0, r3
 8001276:	4611      	mov	r1, r2
 8001278:	f7ff ff4a 	bl	8001110 <ILI9341_Draw_Colour_Burst>
}
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000006 	.word	0x20000006
 8001288:	20000004 	.word	0x20000004

0800128c <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	80fb      	strh	r3, [r7, #6]
 8001296:	460b      	mov	r3, r1
 8001298:	80bb      	strh	r3, [r7, #4]
 800129a:	4613      	mov	r3, r2
 800129c:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800129e:	4b62      	ldr	r3, [pc, #392]	; (8001428 <ILI9341_Draw_Pixel+0x19c>)
 80012a0:	881b      	ldrh	r3, [r3, #0]
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	88fa      	ldrh	r2, [r7, #6]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	f080 80ba 	bcs.w	8001420 <ILI9341_Draw_Pixel+0x194>
 80012ac:	4b5f      	ldr	r3, [pc, #380]	; (800142c <ILI9341_Draw_Pixel+0x1a0>)
 80012ae:	881b      	ldrh	r3, [r3, #0]
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	88ba      	ldrh	r2, [r7, #4]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	f080 80b3 	bcs.w	8001420 <ILI9341_Draw_Pixel+0x194>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80012ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012c2:	2200      	movs	r2, #0
 80012c4:	f001 ffd8 	bl	8003278 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80012c8:	4859      	ldr	r0, [pc, #356]	; (8001430 <ILI9341_Draw_Pixel+0x1a4>)
 80012ca:	2104      	movs	r1, #4
 80012cc:	2200      	movs	r2, #0
 80012ce:	f001 ffd3 	bl	8003278 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 80012d2:	202a      	movs	r0, #42	; 0x2a
 80012d4:	f7ff fcfa 	bl	8000ccc <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80012d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012e0:	2201      	movs	r2, #1
 80012e2:	f001 ffc9 	bl	8003278 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80012e6:	4852      	ldr	r0, [pc, #328]	; (8001430 <ILI9341_Draw_Pixel+0x1a4>)
 80012e8:	2104      	movs	r1, #4
 80012ea:	2201      	movs	r2, #1
 80012ec:	f001 ffc4 	bl	8003278 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80012f0:	484f      	ldr	r0, [pc, #316]	; (8001430 <ILI9341_Draw_Pixel+0x1a4>)
 80012f2:	2104      	movs	r1, #4
 80012f4:	2200      	movs	r2, #0
 80012f6:	f001 ffbf 	bl	8003278 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 80012fa:	88fb      	ldrh	r3, [r7, #6]
 80012fc:	0a1b      	lsrs	r3, r3, #8
 80012fe:	b29b      	uxth	r3, r3
 8001300:	b2db      	uxtb	r3, r3
 8001302:	753b      	strb	r3, [r7, #20]
 8001304:	88fb      	ldrh	r3, [r7, #6]
 8001306:	b2db      	uxtb	r3, r3
 8001308:	757b      	strb	r3, [r7, #21]
 800130a:	88fb      	ldrh	r3, [r7, #6]
 800130c:	3301      	adds	r3, #1
 800130e:	121b      	asrs	r3, r3, #8
 8001310:	b2db      	uxtb	r3, r3
 8001312:	75bb      	strb	r3, [r7, #22]
 8001314:	88fb      	ldrh	r3, [r7, #6]
 8001316:	b2db      	uxtb	r3, r3
 8001318:	3301      	adds	r3, #1
 800131a:	b2db      	uxtb	r3, r3
 800131c:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 800131e:	f107 0314 	add.w	r3, r7, #20
 8001322:	4844      	ldr	r0, [pc, #272]	; (8001434 <ILI9341_Draw_Pixel+0x1a8>)
 8001324:	4619      	mov	r1, r3
 8001326:	2204      	movs	r2, #4
 8001328:	2301      	movs	r3, #1
 800132a:	f002 feff 	bl	800412c <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800132e:	4840      	ldr	r0, [pc, #256]	; (8001430 <ILI9341_Draw_Pixel+0x1a4>)
 8001330:	2104      	movs	r1, #4
 8001332:	2201      	movs	r2, #1
 8001334:	f001 ffa0 	bl	8003278 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001338:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001340:	2200      	movs	r2, #0
 8001342:	f001 ff99 	bl	8003278 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001346:	483a      	ldr	r0, [pc, #232]	; (8001430 <ILI9341_Draw_Pixel+0x1a4>)
 8001348:	2104      	movs	r1, #4
 800134a:	2200      	movs	r2, #0
 800134c:	f001 ff94 	bl	8003278 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8001350:	202b      	movs	r0, #43	; 0x2b
 8001352:	f7ff fcbb 	bl	8000ccc <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8001356:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800135a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800135e:	2201      	movs	r2, #1
 8001360:	f001 ff8a 	bl	8003278 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8001364:	4832      	ldr	r0, [pc, #200]	; (8001430 <ILI9341_Draw_Pixel+0x1a4>)
 8001366:	2104      	movs	r1, #4
 8001368:	2201      	movs	r2, #1
 800136a:	f001 ff85 	bl	8003278 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800136e:	4830      	ldr	r0, [pc, #192]	; (8001430 <ILI9341_Draw_Pixel+0x1a4>)
 8001370:	2104      	movs	r1, #4
 8001372:	2200      	movs	r2, #0
 8001374:	f001 ff80 	bl	8003278 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8001378:	88bb      	ldrh	r3, [r7, #4]
 800137a:	0a1b      	lsrs	r3, r3, #8
 800137c:	b29b      	uxth	r3, r3
 800137e:	b2db      	uxtb	r3, r3
 8001380:	743b      	strb	r3, [r7, #16]
 8001382:	88bb      	ldrh	r3, [r7, #4]
 8001384:	b2db      	uxtb	r3, r3
 8001386:	747b      	strb	r3, [r7, #17]
 8001388:	88bb      	ldrh	r3, [r7, #4]
 800138a:	3301      	adds	r3, #1
 800138c:	121b      	asrs	r3, r3, #8
 800138e:	b2db      	uxtb	r3, r3
 8001390:	74bb      	strb	r3, [r7, #18]
 8001392:	88bb      	ldrh	r3, [r7, #4]
 8001394:	b2db      	uxtb	r3, r3
 8001396:	3301      	adds	r3, #1
 8001398:	b2db      	uxtb	r3, r3
 800139a:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 800139c:	f107 0310 	add.w	r3, r7, #16
 80013a0:	4824      	ldr	r0, [pc, #144]	; (8001434 <ILI9341_Draw_Pixel+0x1a8>)
 80013a2:	4619      	mov	r1, r3
 80013a4:	2204      	movs	r2, #4
 80013a6:	2301      	movs	r3, #1
 80013a8:	f002 fec0 	bl	800412c <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80013ac:	4820      	ldr	r0, [pc, #128]	; (8001430 <ILI9341_Draw_Pixel+0x1a4>)
 80013ae:	2104      	movs	r1, #4
 80013b0:	2201      	movs	r2, #1
 80013b2:	f001 ff61 	bl	8003278 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80013b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013be:	2200      	movs	r2, #0
 80013c0:	f001 ff5a 	bl	8003278 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80013c4:	481a      	ldr	r0, [pc, #104]	; (8001430 <ILI9341_Draw_Pixel+0x1a4>)
 80013c6:	2104      	movs	r1, #4
 80013c8:	2200      	movs	r2, #0
 80013ca:	f001 ff55 	bl	8003278 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 80013ce:	202c      	movs	r0, #44	; 0x2c
 80013d0:	f7ff fc7c 	bl	8000ccc <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80013d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013dc:	2201      	movs	r2, #1
 80013de:	f001 ff4b 	bl	8003278 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80013e2:	4813      	ldr	r0, [pc, #76]	; (8001430 <ILI9341_Draw_Pixel+0x1a4>)
 80013e4:	2104      	movs	r1, #4
 80013e6:	2201      	movs	r2, #1
 80013e8:	f001 ff46 	bl	8003278 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80013ec:	4810      	ldr	r0, [pc, #64]	; (8001430 <ILI9341_Draw_Pixel+0x1a4>)
 80013ee:	2104      	movs	r1, #4
 80013f0:	2200      	movs	r2, #0
 80013f2:	f001 ff41 	bl	8003278 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 80013f6:	887b      	ldrh	r3, [r7, #2]
 80013f8:	0a1b      	lsrs	r3, r3, #8
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	733b      	strb	r3, [r7, #12]
 8001400:	887b      	ldrh	r3, [r7, #2]
 8001402:	b2db      	uxtb	r3, r3
 8001404:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8001406:	f107 030c 	add.w	r3, r7, #12
 800140a:	480a      	ldr	r0, [pc, #40]	; (8001434 <ILI9341_Draw_Pixel+0x1a8>)
 800140c:	4619      	mov	r1, r3
 800140e:	2202      	movs	r2, #2
 8001410:	2301      	movs	r3, #1
 8001412:	f002 fe8b 	bl	800412c <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001416:	4806      	ldr	r0, [pc, #24]	; (8001430 <ILI9341_Draw_Pixel+0x1a4>)
 8001418:	2104      	movs	r1, #4
 800141a:	2201      	movs	r2, #1
 800141c:	f001 ff2c 	bl	8003278 <HAL_GPIO_WritePin>
	
}
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000006 	.word	0x20000006
 800142c:	20000004 	.word	0x20000004
 8001430:	48000c00 	.word	0x48000c00
 8001434:	200001cc 	.word	0x200001cc

08001438 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8001438:	b590      	push	{r4, r7, lr}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	4604      	mov	r4, r0
 8001440:	4608      	mov	r0, r1
 8001442:	4611      	mov	r1, r2
 8001444:	461a      	mov	r2, r3
 8001446:	4623      	mov	r3, r4
 8001448:	80fb      	strh	r3, [r7, #6]
 800144a:	4603      	mov	r3, r0
 800144c:	80bb      	strh	r3, [r7, #4]
 800144e:	460b      	mov	r3, r1
 8001450:	807b      	strh	r3, [r7, #2]
 8001452:	4613      	mov	r3, r2
 8001454:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001456:	4b25      	ldr	r3, [pc, #148]	; (80014ec <ILI9341_Draw_Rectangle+0xb4>)
 8001458:	881b      	ldrh	r3, [r3, #0]
 800145a:	b29b      	uxth	r3, r3
 800145c:	88fa      	ldrh	r2, [r7, #6]
 800145e:	429a      	cmp	r2, r3
 8001460:	d205      	bcs.n	800146e <ILI9341_Draw_Rectangle+0x36>
 8001462:	4b23      	ldr	r3, [pc, #140]	; (80014f0 <ILI9341_Draw_Rectangle+0xb8>)
 8001464:	881b      	ldrh	r3, [r3, #0]
 8001466:	b29b      	uxth	r3, r3
 8001468:	88ba      	ldrh	r2, [r7, #4]
 800146a:	429a      	cmp	r2, r3
 800146c:	d300      	bcc.n	8001470 <ILI9341_Draw_Rectangle+0x38>
 800146e:	e03a      	b.n	80014e6 <ILI9341_Draw_Rectangle+0xae>
if((X+Width-1)>=LCD_WIDTH)
 8001470:	88fa      	ldrh	r2, [r7, #6]
 8001472:	887b      	ldrh	r3, [r7, #2]
 8001474:	4413      	add	r3, r2
 8001476:	3b01      	subs	r3, #1
 8001478:	4a1c      	ldr	r2, [pc, #112]	; (80014ec <ILI9341_Draw_Rectangle+0xb4>)
 800147a:	8812      	ldrh	r2, [r2, #0]
 800147c:	b292      	uxth	r2, r2
 800147e:	4293      	cmp	r3, r2
 8001480:	db05      	blt.n	800148e <ILI9341_Draw_Rectangle+0x56>
	{
		Width=LCD_WIDTH-X;
 8001482:	4b1a      	ldr	r3, [pc, #104]	; (80014ec <ILI9341_Draw_Rectangle+0xb4>)
 8001484:	881b      	ldrh	r3, [r3, #0]
 8001486:	b29a      	uxth	r2, r3
 8001488:	88fb      	ldrh	r3, [r7, #6]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 800148e:	88ba      	ldrh	r2, [r7, #4]
 8001490:	883b      	ldrh	r3, [r7, #0]
 8001492:	4413      	add	r3, r2
 8001494:	3b01      	subs	r3, #1
 8001496:	4a16      	ldr	r2, [pc, #88]	; (80014f0 <ILI9341_Draw_Rectangle+0xb8>)
 8001498:	8812      	ldrh	r2, [r2, #0]
 800149a:	b292      	uxth	r2, r2
 800149c:	4293      	cmp	r3, r2
 800149e:	db05      	blt.n	80014ac <ILI9341_Draw_Rectangle+0x74>
	{
		Height=LCD_HEIGHT-Y;
 80014a0:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <ILI9341_Draw_Rectangle+0xb8>)
 80014a2:	881b      	ldrh	r3, [r3, #0]
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	88bb      	ldrh	r3, [r7, #4]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 80014ac:	88fa      	ldrh	r2, [r7, #6]
 80014ae:	887b      	ldrh	r3, [r7, #2]
 80014b0:	4413      	add	r3, r2
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	3b01      	subs	r3, #1
 80014b6:	b29c      	uxth	r4, r3
 80014b8:	88ba      	ldrh	r2, [r7, #4]
 80014ba:	883b      	ldrh	r3, [r7, #0]
 80014bc:	4413      	add	r3, r2
 80014be:	b29b      	uxth	r3, r3
 80014c0:	3b01      	subs	r3, #1
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	88f9      	ldrh	r1, [r7, #6]
 80014c6:	88ba      	ldrh	r2, [r7, #4]
 80014c8:	4608      	mov	r0, r1
 80014ca:	4611      	mov	r1, r2
 80014cc:	4622      	mov	r2, r4
 80014ce:	f7ff fc4f 	bl	8000d70 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 80014d2:	883b      	ldrh	r3, [r7, #0]
 80014d4:	887a      	ldrh	r2, [r7, #2]
 80014d6:	fb02 f303 	mul.w	r3, r2, r3
 80014da:	461a      	mov	r2, r3
 80014dc:	8b3b      	ldrh	r3, [r7, #24]
 80014de:	4618      	mov	r0, r3
 80014e0:	4611      	mov	r1, r2
 80014e2:	f7ff fe15 	bl	8001110 <ILI9341_Draw_Colour_Burst>
}
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd90      	pop	{r4, r7, pc}
 80014ec:	20000006 	.word	0x20000006
 80014f0:	20000004 	.word	0x20000004

080014f4 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop

08001508 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop

0800151c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop

08001530 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001534:	4a08      	ldr	r2, [pc, #32]	; (8001558 <HAL_Init+0x28>)
 8001536:	4b08      	ldr	r3, [pc, #32]	; (8001558 <HAL_Init+0x28>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f043 0310 	orr.w	r3, r3, #16
 800153e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001540:	2003      	movs	r0, #3
 8001542:	f000 f909 	bl	8001758 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001546:	2000      	movs	r0, #0
 8001548:	f7fe ff2c 	bl	80003a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800154c:	f7fe fe4a 	bl	80001e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40022000 	.word	0x40022000

0800155c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  uwTick++;
 8001560:	4b04      	ldr	r3, [pc, #16]	; (8001574 <HAL_IncTick+0x18>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	3301      	adds	r3, #1
 8001566:	4a03      	ldr	r2, [pc, #12]	; (8001574 <HAL_IncTick+0x18>)
 8001568:	6013      	str	r3, [r2, #0]
}
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	20000230 	.word	0x20000230

08001578 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  return uwTick;  
 800157c:	4b03      	ldr	r3, [pc, #12]	; (800158c <HAL_GetTick+0x14>)
 800157e:	681b      	ldr	r3, [r3, #0]
}
 8001580:	4618      	mov	r0, r3
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	20000230 	.word	0x20000230

08001590 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001598:	f7ff ffee 	bl	8001578 <HAL_GetTick>
 800159c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015a8:	d002      	beq.n	80015b0 <HAL_Delay+0x20>
  {
     wait++;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	3301      	adds	r3, #1
 80015ae:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80015b0:	bf00      	nop
 80015b2:	f7ff ffe1 	bl	8001578 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	1ad2      	subs	r2, r2, r3
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d3f7      	bcc.n	80015b2 <HAL_Delay+0x22>
  {
  }
}
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d8:	4b0c      	ldr	r3, [pc, #48]	; (800160c <NVIC_SetPriorityGrouping+0x44>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015de:	68ba      	ldr	r2, [r7, #8]
 80015e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015e4:	4013      	ands	r3, r2
 80015e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80015f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f8:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80015fa:	4a04      	ldr	r2, [pc, #16]	; (800160c <NVIC_SetPriorityGrouping+0x44>)
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	60d3      	str	r3, [r2, #12]
}
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001614:	4b04      	ldr	r3, [pc, #16]	; (8001628 <NVIC_GetPriorityGrouping+0x18>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800161c:	0a1b      	lsrs	r3, r3, #8
}
 800161e:	4618      	mov	r0, r3
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001636:	4908      	ldr	r1, [pc, #32]	; (8001658 <NVIC_EnableIRQ+0x2c>)
 8001638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163c:	095b      	lsrs	r3, r3, #5
 800163e:	79fa      	ldrb	r2, [r7, #7]
 8001640:	f002 021f 	and.w	r2, r2, #31
 8001644:	2001      	movs	r0, #1
 8001646:	fa00 f202 	lsl.w	r2, r0, r2
 800164a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	e000e100 	.word	0xe000e100

0800165c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	6039      	str	r1, [r7, #0]
 8001666:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166c:	2b00      	cmp	r3, #0
 800166e:	da0b      	bge.n	8001688 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001670:	490d      	ldr	r1, [pc, #52]	; (80016a8 <NVIC_SetPriority+0x4c>)
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	f003 030f 	and.w	r3, r3, #15
 8001678:	3b04      	subs	r3, #4
 800167a:	683a      	ldr	r2, [r7, #0]
 800167c:	b2d2      	uxtb	r2, r2
 800167e:	0112      	lsls	r2, r2, #4
 8001680:	b2d2      	uxtb	r2, r2
 8001682:	440b      	add	r3, r1
 8001684:	761a      	strb	r2, [r3, #24]
 8001686:	e009      	b.n	800169c <NVIC_SetPriority+0x40>
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001688:	4908      	ldr	r1, [pc, #32]	; (80016ac <NVIC_SetPriority+0x50>)
 800168a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	b2d2      	uxtb	r2, r2
 8001692:	0112      	lsls	r2, r2, #4
 8001694:	b2d2      	uxtb	r2, r2
 8001696:	440b      	add	r3, r1
 8001698:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	e000ed00 	.word	0xe000ed00
 80016ac:	e000e100 	.word	0xe000e100

080016b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b089      	sub	sp, #36	; 0x24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	f1c3 0307 	rsb	r3, r3, #7
 80016ca:	2b04      	cmp	r3, #4
 80016cc:	bf28      	it	cs
 80016ce:	2304      	movcs	r3, #4
 80016d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	3304      	adds	r3, #4
 80016d6:	2b06      	cmp	r3, #6
 80016d8:	d902      	bls.n	80016e0 <NVIC_EncodePriority+0x30>
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	3b03      	subs	r3, #3
 80016de:	e000      	b.n	80016e2 <NVIC_EncodePriority+0x32>
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	2201      	movs	r2, #1
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	1e5a      	subs	r2, r3, #1
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	401a      	ands	r2, r3
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	2101      	movs	r1, #1
 80016fa:	fa01 f303 	lsl.w	r3, r1, r3
 80016fe:	1e59      	subs	r1, r3, #1
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8001704:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8001706:	4618      	mov	r0, r3
 8001708:	3724      	adds	r7, #36	; 0x24
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop

08001714 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3b01      	subs	r3, #1
 8001720:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001724:	d301      	bcc.n	800172a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001726:	2301      	movs	r3, #1
 8001728:	e00f      	b.n	800174a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800172a:	4a0a      	ldr	r2, [pc, #40]	; (8001754 <SysTick_Config+0x40>)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3b01      	subs	r3, #1
 8001730:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001732:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001736:	210f      	movs	r1, #15
 8001738:	f7ff ff90 	bl	800165c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <SysTick_Config+0x40>)
 800173e:	2200      	movs	r2, #0
 8001740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001742:	4b04      	ldr	r3, [pc, #16]	; (8001754 <SysTick_Config+0x40>)
 8001744:	2207      	movs	r2, #7
 8001746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	e000e010 	.word	0xe000e010

08001758 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff ff31 	bl	80015c8 <NVIC_SetPriorityGrouping>
}
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
 8001778:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800177e:	f7ff ff47 	bl	8001610 <NVIC_GetPriorityGrouping>
 8001782:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001784:	6978      	ldr	r0, [r7, #20]
 8001786:	68b9      	ldr	r1, [r7, #8]
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	f7ff ff91 	bl	80016b0 <NVIC_EncodePriority>
 800178e:	4602      	mov	r2, r0
 8001790:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001794:	4618      	mov	r0, r3
 8001796:	4611      	mov	r1, r2
 8001798:	f7ff ff60 	bl	800165c <NVIC_SetPriority>
}
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop

080017a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff ff3a 	bl	800162c <NVIC_EnableIRQ>
}
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop

080017c0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7ff ffa3 	bl	8001714 <SysTick_Config>
 80017ce:	4603      	mov	r3, r0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2b04      	cmp	r3, #4
 80017e4:	d106      	bne.n	80017f4 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80017e6:	4a09      	ldr	r2, [pc, #36]	; (800180c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80017e8:	4b08      	ldr	r3, [pc, #32]	; (800180c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f043 0304 	orr.w	r3, r3, #4
 80017f0:	6013      	str	r3, [r2, #0]
 80017f2:	e005      	b.n	8001800 <HAL_SYSTICK_CLKSourceConfig+0x28>
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80017f4:	4a05      	ldr	r2, [pc, #20]	; (800180c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80017f6:	4b05      	ldr	r3, [pc, #20]	; (800180c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f023 0304 	bic.w	r3, r3, #4
 80017fe:	6013      	str	r3, [r2, #0]
  }
}
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	e000e010 	.word	0xe000e010

08001810 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001814:	f000 f802 	bl	800181c <HAL_SYSTICK_Callback>
}
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop

0800181c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800182e:	af00      	add	r7, sp, #0
 8001830:	1d3b      	adds	r3, r7, #4
 8001832:	6018      	str	r0, [r3, #0]
   uint32_t tickstart = 0U;
 8001834:	2300      	movs	r3, #0
 8001836:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800183a:	1d3b      	adds	r3, r7, #4
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	2b00      	cmp	r3, #0
 8001846:	f000 81cc 	beq.w	8001be2 <HAL_RCC_OscConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800184a:	4baf      	ldr	r3, [pc, #700]	; (8001b08 <HAL_RCC_OscConfig+0x2e0>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f003 030c 	and.w	r3, r3, #12
 8001852:	2b04      	cmp	r3, #4
 8001854:	d00b      	beq.n	800186e <HAL_RCC_OscConfig+0x46>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001856:	4bac      	ldr	r3, [pc, #688]	; (8001b08 <HAL_RCC_OscConfig+0x2e0>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f003 030c 	and.w	r3, r3, #12
 800185e:	2b08      	cmp	r3, #8
 8001860:	d179      	bne.n	8001956 <HAL_RCC_OscConfig+0x12e>
 8001862:	4ba9      	ldr	r3, [pc, #676]	; (8001b08 <HAL_RCC_OscConfig+0x2e0>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d073      	beq.n	8001956 <HAL_RCC_OscConfig+0x12e>
 800186e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001872:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001876:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800187a:	fa93 f3a3 	rbit	r3, r3
 800187e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001882:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001886:	fab3 f383 	clz	r3, r3
 800188a:	b2db      	uxtb	r3, r3
 800188c:	f043 0320 	orr.w	r3, r3, #32
 8001890:	b2db      	uxtb	r3, r3
 8001892:	b2db      	uxtb	r3, r3
 8001894:	095b      	lsrs	r3, r3, #5
 8001896:	b2db      	uxtb	r3, r3
 8001898:	2b01      	cmp	r3, #1
 800189a:	d102      	bne.n	80018a2 <HAL_RCC_OscConfig+0x7a>
 800189c:	4b9a      	ldr	r3, [pc, #616]	; (8001b08 <HAL_RCC_OscConfig+0x2e0>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	e035      	b.n	800190e <HAL_RCC_OscConfig+0xe6>
 80018a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018a6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018aa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80018ae:	fa93 f3a3 	rbit	r3, r3
 80018b2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80018b6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80018ba:	fab3 f383 	clz	r3, r3
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	f043 0320 	orr.w	r3, r3, #32
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	095b      	lsrs	r3, r3, #5
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d102      	bne.n	80018d6 <HAL_RCC_OscConfig+0xae>
 80018d0:	4b8d      	ldr	r3, [pc, #564]	; (8001b08 <HAL_RCC_OscConfig+0x2e0>)
 80018d2:	6a1b      	ldr	r3, [r3, #32]
 80018d4:	e01b      	b.n	800190e <HAL_RCC_OscConfig+0xe6>
 80018d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018da:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018de:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80018e2:	fa93 f3a3 	rbit	r3, r3
 80018e6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80018ea:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80018ee:	fab3 f383 	clz	r3, r3
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	f043 0320 	orr.w	r3, r3, #32
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	095b      	lsrs	r3, r3, #5
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b04      	cmp	r3, #4
 8001902:	d102      	bne.n	800190a <HAL_RCC_OscConfig+0xe2>
 8001904:	4b80      	ldr	r3, [pc, #512]	; (8001b08 <HAL_RCC_OscConfig+0x2e0>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	e001      	b.n	800190e <HAL_RCC_OscConfig+0xe6>
 800190a:	4b7f      	ldr	r3, [pc, #508]	; (8001b08 <HAL_RCC_OscConfig+0x2e0>)
 800190c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001912:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001916:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800191a:	fa92 f2a2 	rbit	r2, r2
 800191e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001922:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001926:	fab2 f282 	clz	r2, r2
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	f042 0220 	orr.w	r2, r2, #32
 8001930:	b2d2      	uxtb	r2, r2
 8001932:	b2d2      	uxtb	r2, r2
 8001934:	f002 021f 	and.w	r2, r2, #31
 8001938:	2101      	movs	r1, #1
 800193a:	fa01 f202 	lsl.w	r2, r1, r2
 800193e:	4013      	ands	r3, r2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d007      	beq.n	8001954 <HAL_RCC_OscConfig+0x12c>
 8001944:	1d3b      	adds	r3, r7, #4
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d102      	bne.n	8001954 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	f001 b831 	b.w	80029b6 <HAL_RCC_OscConfig+0x118e>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001954:	e145      	b.n	8001be2 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001956:	1d3b      	adds	r3, r7, #4
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001960:	d106      	bne.n	8001970 <HAL_RCC_OscConfig+0x148>
 8001962:	4a69      	ldr	r2, [pc, #420]	; (8001b08 <HAL_RCC_OscConfig+0x2e0>)
 8001964:	4b68      	ldr	r3, [pc, #416]	; (8001b08 <HAL_RCC_OscConfig+0x2e0>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800196c:	6013      	str	r3, [r2, #0]
 800196e:	e030      	b.n	80019d2 <HAL_RCC_OscConfig+0x1aa>
 8001970:	1d3b      	adds	r3, r7, #4
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d10c      	bne.n	8001994 <HAL_RCC_OscConfig+0x16c>
 800197a:	4a63      	ldr	r2, [pc, #396]	; (8001b08 <HAL_RCC_OscConfig+0x2e0>)
 800197c:	4b62      	ldr	r3, [pc, #392]	; (8001b08 <HAL_RCC_OscConfig+0x2e0>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001984:	6013      	str	r3, [r2, #0]
 8001986:	4a60      	ldr	r2, [pc, #384]	; (8001b08 <HAL_RCC_OscConfig+0x2e0>)
 8001988:	4b5f      	ldr	r3, [pc, #380]	; (8001b08 <HAL_RCC_OscConfig+0x2e0>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001990:	6013      	str	r3, [r2, #0]
 8001992:	e01e      	b.n	80019d2 <HAL_RCC_OscConfig+0x1aa>
 8001994:	1d3b      	adds	r3, r7, #4
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800199e:	d10c      	bne.n	80019ba <HAL_RCC_OscConfig+0x192>
 80019a0:	4a59      	ldr	r2, [pc, #356]	; (8001b08 <HAL_RCC_OscConfig+0x2e0>)
 80019a2:	4b59      	ldr	r3, [pc, #356]	; (8001b08 <HAL_RCC_OscConfig+0x2e0>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019aa:	6013      	str	r3, [r2, #0]
 80019ac:	4a56      	ldr	r2, [pc, #344]	; (8001b08 <HAL_RCC_OscConfig+0x2e0>)
 80019ae:	4b56      	ldr	r3, [pc, #344]	; (8001b08 <HAL_RCC_OscConfig+0x2e0>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019b6:	6013      	str	r3, [r2, #0]
 80019b8:	e00b      	b.n	80019d2 <HAL_RCC_OscConfig+0x1aa>
 80019ba:	4a53      	ldr	r2, [pc, #332]	; (8001b08 <HAL_RCC_OscConfig+0x2e0>)
 80019bc:	4b52      	ldr	r3, [pc, #328]	; (8001b08 <HAL_RCC_OscConfig+0x2e0>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019c4:	6013      	str	r3, [r2, #0]
 80019c6:	4a50      	ldr	r2, [pc, #320]	; (8001b08 <HAL_RCC_OscConfig+0x2e0>)
 80019c8:	4b4f      	ldr	r3, [pc, #316]	; (8001b08 <HAL_RCC_OscConfig+0x2e0>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019d0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019d2:	494d      	ldr	r1, [pc, #308]	; (8001b08 <HAL_RCC_OscConfig+0x2e0>)
 80019d4:	4b4c      	ldr	r3, [pc, #304]	; (8001b08 <HAL_RCC_OscConfig+0x2e0>)
 80019d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d8:	f023 020f 	bic.w	r2, r3, #15
 80019dc:	1d3b      	adds	r3, r7, #4
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019e6:	1d3b      	adds	r3, r7, #4
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d07b      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f0:	f7ff fdc2 	bl	8001578 <HAL_GetTick>
 80019f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019f8:	e00a      	b.n	8001a10 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019fa:	f7ff fdbd 	bl	8001578 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b64      	cmp	r3, #100	; 0x64
 8001a08:	d902      	bls.n	8001a10 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	f000 bfd3 	b.w	80029b6 <HAL_RCC_OscConfig+0x118e>
 8001a10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a14:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a18:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001a1c:	fa93 f3a3 	rbit	r3, r3
 8001a20:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001a24:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a28:	fab3 f383 	clz	r3, r3
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	f043 0320 	orr.w	r3, r3, #32
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	095b      	lsrs	r3, r3, #5
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d102      	bne.n	8001a44 <HAL_RCC_OscConfig+0x21c>
 8001a3e:	4b32      	ldr	r3, [pc, #200]	; (8001b08 <HAL_RCC_OscConfig+0x2e0>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	e035      	b.n	8001ab0 <HAL_RCC_OscConfig+0x288>
 8001a44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a48:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001a50:	fa93 f3a3 	rbit	r3, r3
 8001a54:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001a58:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001a5c:	fab3 f383 	clz	r3, r3
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	f043 0320 	orr.w	r3, r3, #32
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	095b      	lsrs	r3, r3, #5
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d102      	bne.n	8001a78 <HAL_RCC_OscConfig+0x250>
 8001a72:	4b25      	ldr	r3, [pc, #148]	; (8001b08 <HAL_RCC_OscConfig+0x2e0>)
 8001a74:	6a1b      	ldr	r3, [r3, #32]
 8001a76:	e01b      	b.n	8001ab0 <HAL_RCC_OscConfig+0x288>
 8001a78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a7c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a80:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001a84:	fa93 f3a3 	rbit	r3, r3
 8001a88:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001a8c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001a90:	fab3 f383 	clz	r3, r3
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	f043 0320 	orr.w	r3, r3, #32
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	095b      	lsrs	r3, r3, #5
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	d102      	bne.n	8001aac <HAL_RCC_OscConfig+0x284>
 8001aa6:	4b18      	ldr	r3, [pc, #96]	; (8001b08 <HAL_RCC_OscConfig+0x2e0>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	e001      	b.n	8001ab0 <HAL_RCC_OscConfig+0x288>
 8001aac:	4b16      	ldr	r3, [pc, #88]	; (8001b08 <HAL_RCC_OscConfig+0x2e0>)
 8001aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ab4:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab8:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001abc:	fa92 f2a2 	rbit	r2, r2
 8001ac0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001ac4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001ac8:	fab2 f282 	clz	r2, r2
 8001acc:	b2d2      	uxtb	r2, r2
 8001ace:	f042 0220 	orr.w	r2, r2, #32
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	b2d2      	uxtb	r2, r2
 8001ad6:	f002 021f 	and.w	r2, r2, #31
 8001ada:	2101      	movs	r1, #1
 8001adc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d089      	beq.n	80019fa <HAL_RCC_OscConfig+0x1d2>
 8001ae6:	e07c      	b.n	8001be2 <HAL_RCC_OscConfig+0x3ba>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae8:	f7ff fd46 	bl	8001578 <HAL_GetTick>
 8001aec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001af0:	e00c      	b.n	8001b0c <HAL_RCC_OscConfig+0x2e4>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001af2:	f7ff fd41 	bl	8001578 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b64      	cmp	r3, #100	; 0x64
 8001b00:	d904      	bls.n	8001b0c <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	f000 bf57 	b.w	80029b6 <HAL_RCC_OscConfig+0x118e>
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b10:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b14:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001b18:	fa93 f3a3 	rbit	r3, r3
 8001b1c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001b20:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b24:	fab3 f383 	clz	r3, r3
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	f043 0320 	orr.w	r3, r3, #32
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	095b      	lsrs	r3, r3, #5
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d102      	bne.n	8001b40 <HAL_RCC_OscConfig+0x318>
 8001b3a:	4bb7      	ldr	r3, [pc, #732]	; (8001e18 <HAL_RCC_OscConfig+0x5f0>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	e035      	b.n	8001bac <HAL_RCC_OscConfig+0x384>
 8001b40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b44:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b48:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001b4c:	fa93 f3a3 	rbit	r3, r3
 8001b50:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001b54:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001b58:	fab3 f383 	clz	r3, r3
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	f043 0320 	orr.w	r3, r3, #32
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	095b      	lsrs	r3, r3, #5
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d102      	bne.n	8001b74 <HAL_RCC_OscConfig+0x34c>
 8001b6e:	4baa      	ldr	r3, [pc, #680]	; (8001e18 <HAL_RCC_OscConfig+0x5f0>)
 8001b70:	6a1b      	ldr	r3, [r3, #32]
 8001b72:	e01b      	b.n	8001bac <HAL_RCC_OscConfig+0x384>
 8001b74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b78:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001b80:	fa93 f3a3 	rbit	r3, r3
 8001b84:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001b88:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001b8c:	fab3 f383 	clz	r3, r3
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	f043 0320 	orr.w	r3, r3, #32
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	095b      	lsrs	r3, r3, #5
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	d102      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x380>
 8001ba2:	4b9d      	ldr	r3, [pc, #628]	; (8001e18 <HAL_RCC_OscConfig+0x5f0>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	e001      	b.n	8001bac <HAL_RCC_OscConfig+0x384>
 8001ba8:	4b9b      	ldr	r3, [pc, #620]	; (8001e18 <HAL_RCC_OscConfig+0x5f0>)
 8001baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bb0:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb4:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001bb8:	fa92 f2a2 	rbit	r2, r2
 8001bbc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001bc0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001bc4:	fab2 f282 	clz	r2, r2
 8001bc8:	b2d2      	uxtb	r2, r2
 8001bca:	f042 0220 	orr.w	r2, r2, #32
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	b2d2      	uxtb	r2, r2
 8001bd2:	f002 021f 	and.w	r2, r2, #31
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bdc:	4013      	ands	r3, r2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d187      	bne.n	8001af2 <HAL_RCC_OscConfig+0x2ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001be2:	1d3b      	adds	r3, r7, #4
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f000 81d7 	beq.w	8001fa0 <HAL_RCC_OscConfig+0x778>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001bf2:	4b89      	ldr	r3, [pc, #548]	; (8001e18 <HAL_RCC_OscConfig+0x5f0>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f003 030c 	and.w	r3, r3, #12
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d00d      	beq.n	8001c1a <HAL_RCC_OscConfig+0x3f2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001bfe:	4b86      	ldr	r3, [pc, #536]	; (8001e18 <HAL_RCC_OscConfig+0x5f0>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f003 030c 	and.w	r3, r3, #12
 8001c06:	2b08      	cmp	r3, #8
 8001c08:	f040 8090 	bne.w	8001d2c <HAL_RCC_OscConfig+0x504>
 8001c0c:	4b82      	ldr	r3, [pc, #520]	; (8001e18 <HAL_RCC_OscConfig+0x5f0>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f040 8089 	bne.w	8001d2c <HAL_RCC_OscConfig+0x504>
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c20:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001c24:	fa93 f3a3 	rbit	r3, r3
 8001c28:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001c2c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c30:	fab3 f383 	clz	r3, r3
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	f043 0320 	orr.w	r3, r3, #32
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	095b      	lsrs	r3, r3, #5
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d102      	bne.n	8001c4c <HAL_RCC_OscConfig+0x424>
 8001c46:	4b74      	ldr	r3, [pc, #464]	; (8001e18 <HAL_RCC_OscConfig+0x5f0>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	e033      	b.n	8001cb4 <HAL_RCC_OscConfig+0x48c>
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c52:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001c56:	fa93 f3a3 	rbit	r3, r3
 8001c5a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001c5e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001c62:	fab3 f383 	clz	r3, r3
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	f043 0320 	orr.w	r3, r3, #32
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	095b      	lsrs	r3, r3, #5
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d102      	bne.n	8001c7e <HAL_RCC_OscConfig+0x456>
 8001c78:	4b67      	ldr	r3, [pc, #412]	; (8001e18 <HAL_RCC_OscConfig+0x5f0>)
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	e01a      	b.n	8001cb4 <HAL_RCC_OscConfig+0x48c>
 8001c7e:	2302      	movs	r3, #2
 8001c80:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c84:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001c88:	fa93 f3a3 	rbit	r3, r3
 8001c8c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001c90:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001c94:	fab3 f383 	clz	r3, r3
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	f043 0320 	orr.w	r3, r3, #32
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	095b      	lsrs	r3, r3, #5
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	d102      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x488>
 8001caa:	4b5b      	ldr	r3, [pc, #364]	; (8001e18 <HAL_RCC_OscConfig+0x5f0>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	e001      	b.n	8001cb4 <HAL_RCC_OscConfig+0x48c>
 8001cb0:	4b59      	ldr	r3, [pc, #356]	; (8001e18 <HAL_RCC_OscConfig+0x5f0>)
 8001cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb4:	2202      	movs	r2, #2
 8001cb6:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cba:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001cbe:	fa92 f2a2 	rbit	r2, r2
 8001cc2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001cc6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001cca:	fab2 f282 	clz	r2, r2
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	f042 0220 	orr.w	r2, r2, #32
 8001cd4:	b2d2      	uxtb	r2, r2
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	f002 021f 	and.w	r2, r2, #31
 8001cdc:	2101      	movs	r1, #1
 8001cde:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d007      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x4d0>
 8001ce8:	1d3b      	adds	r3, r7, #4
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d002      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	f000 be5f 	b.w	80029b6 <HAL_RCC_OscConfig+0x118e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf8:	4847      	ldr	r0, [pc, #284]	; (8001e18 <HAL_RCC_OscConfig+0x5f0>)
 8001cfa:	4b47      	ldr	r3, [pc, #284]	; (8001e18 <HAL_RCC_OscConfig+0x5f0>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d02:	1d3b      	adds	r3, r7, #4
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6959      	ldr	r1, [r3, #20]
 8001d08:	23f8      	movs	r3, #248	; 0xf8
 8001d0a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001d12:	fa93 f3a3 	rbit	r3, r3
 8001d16:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001d1a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001d1e:	fab3 f383 	clz	r3, r3
 8001d22:	fa01 f303 	lsl.w	r3, r1, r3
 8001d26:	4313      	orrs	r3, r2
 8001d28:	6003      	str	r3, [r0, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d2a:	e139      	b.n	8001fa0 <HAL_RCC_OscConfig+0x778>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d2c:	1d3b      	adds	r3, r7, #4
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f000 80a8 	beq.w	8001e88 <HAL_RCC_OscConfig+0x660>
 8001d38:	2301      	movs	r3, #1
 8001d3a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001d42:	fa93 f3a3 	rbit	r3, r3
 8001d46:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001d4a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d4e:	fab3 f383 	clz	r3, r3
 8001d52:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d56:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	2301      	movs	r3, #1
 8001d60:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d62:	f7ff fc09 	bl	8001578 <HAL_GetTick>
 8001d66:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d6a:	e00a      	b.n	8001d82 <HAL_RCC_OscConfig+0x55a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d6c:	f7ff fc04 	bl	8001578 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d902      	bls.n	8001d82 <HAL_RCC_OscConfig+0x55a>
          {
            return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	f000 be1a 	b.w	80029b6 <HAL_RCC_OscConfig+0x118e>
 8001d82:	2302      	movs	r3, #2
 8001d84:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d88:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001d8c:	fa93 f3a3 	rbit	r3, r3
 8001d90:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001d94:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d98:	fab3 f383 	clz	r3, r3
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	f043 0320 	orr.w	r3, r3, #32
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	095b      	lsrs	r3, r3, #5
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d102      	bne.n	8001db4 <HAL_RCC_OscConfig+0x58c>
 8001dae:	4b1a      	ldr	r3, [pc, #104]	; (8001e18 <HAL_RCC_OscConfig+0x5f0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	e035      	b.n	8001e20 <HAL_RCC_OscConfig+0x5f8>
 8001db4:	2302      	movs	r3, #2
 8001db6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dba:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001dbe:	fa93 f3a3 	rbit	r3, r3
 8001dc2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001dc6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001dca:	fab3 f383 	clz	r3, r3
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	f043 0320 	orr.w	r3, r3, #32
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	095b      	lsrs	r3, r3, #5
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d102      	bne.n	8001de6 <HAL_RCC_OscConfig+0x5be>
 8001de0:	4b0d      	ldr	r3, [pc, #52]	; (8001e18 <HAL_RCC_OscConfig+0x5f0>)
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	e01c      	b.n	8001e20 <HAL_RCC_OscConfig+0x5f8>
 8001de6:	2302      	movs	r3, #2
 8001de8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dec:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001df0:	fa93 f3a3 	rbit	r3, r3
 8001df4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001df8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001dfc:	fab3 f383 	clz	r3, r3
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	f043 0320 	orr.w	r3, r3, #32
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	095b      	lsrs	r3, r3, #5
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	d104      	bne.n	8001e1c <HAL_RCC_OscConfig+0x5f4>
 8001e12:	4b01      	ldr	r3, [pc, #4]	; (8001e18 <HAL_RCC_OscConfig+0x5f0>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	e003      	b.n	8001e20 <HAL_RCC_OscConfig+0x5f8>
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	4bc6      	ldr	r3, [pc, #792]	; (8002138 <HAL_RCC_OscConfig+0x910>)
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e20:	2202      	movs	r2, #2
 8001e22:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e26:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001e2a:	fa92 f2a2 	rbit	r2, r2
 8001e2e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001e32:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001e36:	fab2 f282 	clz	r2, r2
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	f042 0220 	orr.w	r2, r2, #32
 8001e40:	b2d2      	uxtb	r2, r2
 8001e42:	b2d2      	uxtb	r2, r2
 8001e44:	f002 021f 	and.w	r2, r2, #31
 8001e48:	2101      	movs	r1, #1
 8001e4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e4e:	4013      	ands	r3, r2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d08b      	beq.n	8001d6c <HAL_RCC_OscConfig+0x544>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e54:	48b8      	ldr	r0, [pc, #736]	; (8002138 <HAL_RCC_OscConfig+0x910>)
 8001e56:	4bb8      	ldr	r3, [pc, #736]	; (8002138 <HAL_RCC_OscConfig+0x910>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e5e:	1d3b      	adds	r3, r7, #4
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	6959      	ldr	r1, [r3, #20]
 8001e64:	23f8      	movs	r3, #248	; 0xf8
 8001e66:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001e6e:	fa93 f3a3 	rbit	r3, r3
 8001e72:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001e76:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001e7a:	fab3 f383 	clz	r3, r3
 8001e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e82:	4313      	orrs	r3, r2
 8001e84:	6003      	str	r3, [r0, #0]
 8001e86:	e08b      	b.n	8001fa0 <HAL_RCC_OscConfig+0x778>
 8001e88:	2301      	movs	r3, #1
 8001e8a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001e92:	fa93 f3a3 	rbit	r3, r3
 8001e96:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001e9a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e9e:	fab3 f383 	clz	r3, r3
 8001ea2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ea6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	461a      	mov	r2, r3
 8001eae:	2300      	movs	r3, #0
 8001eb0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb2:	f7ff fb61 	bl	8001578 <HAL_GetTick>
 8001eb6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eba:	e00a      	b.n	8001ed2 <HAL_RCC_OscConfig+0x6aa>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ebc:	f7ff fb5c 	bl	8001578 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d902      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	f000 bd72 	b.w	80029b6 <HAL_RCC_OscConfig+0x118e>
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001edc:	fa93 f3a3 	rbit	r3, r3
 8001ee0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001ee4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ee8:	fab3 f383 	clz	r3, r3
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	f043 0320 	orr.w	r3, r3, #32
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	095b      	lsrs	r3, r3, #5
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d102      	bne.n	8001f04 <HAL_RCC_OscConfig+0x6dc>
 8001efe:	4b8e      	ldr	r3, [pc, #568]	; (8002138 <HAL_RCC_OscConfig+0x910>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	e033      	b.n	8001f6c <HAL_RCC_OscConfig+0x744>
 8001f04:	2302      	movs	r3, #2
 8001f06:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001f0e:	fa93 f3a3 	rbit	r3, r3
 8001f12:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001f16:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001f1a:	fab3 f383 	clz	r3, r3
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	f043 0320 	orr.w	r3, r3, #32
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	095b      	lsrs	r3, r3, #5
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d102      	bne.n	8001f36 <HAL_RCC_OscConfig+0x70e>
 8001f30:	4b81      	ldr	r3, [pc, #516]	; (8002138 <HAL_RCC_OscConfig+0x910>)
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	e01a      	b.n	8001f6c <HAL_RCC_OscConfig+0x744>
 8001f36:	2302      	movs	r3, #2
 8001f38:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001f40:	fa93 f3a3 	rbit	r3, r3
 8001f44:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001f48:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001f4c:	fab3 f383 	clz	r3, r3
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	f043 0320 	orr.w	r3, r3, #32
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	095b      	lsrs	r3, r3, #5
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b04      	cmp	r3, #4
 8001f60:	d102      	bne.n	8001f68 <HAL_RCC_OscConfig+0x740>
 8001f62:	4b75      	ldr	r3, [pc, #468]	; (8002138 <HAL_RCC_OscConfig+0x910>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	e001      	b.n	8001f6c <HAL_RCC_OscConfig+0x744>
 8001f68:	4b73      	ldr	r3, [pc, #460]	; (8002138 <HAL_RCC_OscConfig+0x910>)
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f72:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001f76:	fa92 f2a2 	rbit	r2, r2
 8001f7a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001f7e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001f82:	fab2 f282 	clz	r2, r2
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	f042 0220 	orr.w	r2, r2, #32
 8001f8c:	b2d2      	uxtb	r2, r2
 8001f8e:	b2d2      	uxtb	r2, r2
 8001f90:	f002 021f 	and.w	r2, r2, #31
 8001f94:	2101      	movs	r1, #1
 8001f96:	fa01 f202 	lsl.w	r2, r1, r2
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d18d      	bne.n	8001ebc <HAL_RCC_OscConfig+0x694>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fa0:	1d3b      	adds	r3, r7, #4
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0308 	and.w	r3, r3, #8
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f000 8140 	beq.w	8002230 <HAL_RCC_OscConfig+0xa08>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fb0:	1d3b      	adds	r3, r7, #4
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f000 8096 	beq.w	80020e8 <HAL_RCC_OscConfig+0x8c0>
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001fc6:	fa93 f3a3 	rbit	r3, r3
 8001fca:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001fce:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fd2:	fab3 f383 	clz	r3, r3
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	4b58      	ldr	r3, [pc, #352]	; (800213c <HAL_RCC_OscConfig+0x914>)
 8001fda:	4413      	add	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	461a      	mov	r2, r3
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe4:	f7ff fac8 	bl	8001578 <HAL_GetTick>
 8001fe8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fec:	e00a      	b.n	8002004 <HAL_RCC_OscConfig+0x7dc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fee:	f7ff fac3 	bl	8001578 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d902      	bls.n	8002004 <HAL_RCC_OscConfig+0x7dc>
        {
          return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	f000 bcd9 	b.w	80029b6 <HAL_RCC_OscConfig+0x118e>
 8002004:	2302      	movs	r3, #2
 8002006:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800200e:	fa93 f3a3 	rbit	r3, r3
 8002012:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002016:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800201a:	fab3 f383 	clz	r3, r3
 800201e:	b2db      	uxtb	r3, r3
 8002020:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002024:	b2db      	uxtb	r3, r3
 8002026:	b2db      	uxtb	r3, r3
 8002028:	095b      	lsrs	r3, r3, #5
 800202a:	b2db      	uxtb	r3, r3
 800202c:	2b01      	cmp	r3, #1
 800202e:	d102      	bne.n	8002036 <HAL_RCC_OscConfig+0x80e>
 8002030:	4b41      	ldr	r3, [pc, #260]	; (8002138 <HAL_RCC_OscConfig+0x910>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	e039      	b.n	80020aa <HAL_RCC_OscConfig+0x882>
 8002036:	2302      	movs	r3, #2
 8002038:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002040:	fa93 f2a3 	rbit	r2, r3
 8002044:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002048:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800204a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	fab3 f383 	clz	r3, r3
 8002054:	b2db      	uxtb	r3, r3
 8002056:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800205a:	b2db      	uxtb	r3, r3
 800205c:	b2db      	uxtb	r3, r3
 800205e:	095b      	lsrs	r3, r3, #5
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d102      	bne.n	800206c <HAL_RCC_OscConfig+0x844>
 8002066:	4b34      	ldr	r3, [pc, #208]	; (8002138 <HAL_RCC_OscConfig+0x910>)
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	e01e      	b.n	80020aa <HAL_RCC_OscConfig+0x882>
 800206c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002070:	2202      	movs	r2, #2
 8002072:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002074:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	fa93 f2a3 	rbit	r2, r3
 800207e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002082:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002084:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	fab3 f383 	clz	r3, r3
 800208e:	b2db      	uxtb	r3, r3
 8002090:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002094:	b2db      	uxtb	r3, r3
 8002096:	b2db      	uxtb	r3, r3
 8002098:	095b      	lsrs	r3, r3, #5
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b04      	cmp	r3, #4
 800209e:	d102      	bne.n	80020a6 <HAL_RCC_OscConfig+0x87e>
 80020a0:	4b25      	ldr	r3, [pc, #148]	; (8002138 <HAL_RCC_OscConfig+0x910>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	e001      	b.n	80020aa <HAL_RCC_OscConfig+0x882>
 80020a6:	4b24      	ldr	r3, [pc, #144]	; (8002138 <HAL_RCC_OscConfig+0x910>)
 80020a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020aa:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 80020ae:	2102      	movs	r1, #2
 80020b0:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b2:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 80020b6:	6812      	ldr	r2, [r2, #0]
 80020b8:	fa92 f1a2 	rbit	r1, r2
 80020bc:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80020c0:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80020c2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80020c6:	6812      	ldr	r2, [r2, #0]
 80020c8:	fab2 f282 	clz	r2, r2
 80020cc:	b2d2      	uxtb	r2, r2
 80020ce:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80020d2:	b2d2      	uxtb	r2, r2
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	f002 021f 	and.w	r2, r2, #31
 80020da:	2101      	movs	r1, #1
 80020dc:	fa01 f202 	lsl.w	r2, r1, r2
 80020e0:	4013      	ands	r3, r2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d083      	beq.n	8001fee <HAL_RCC_OscConfig+0x7c6>
 80020e6:	e0a3      	b.n	8002230 <HAL_RCC_OscConfig+0xa08>
 80020e8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80020ec:	2201      	movs	r2, #1
 80020ee:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	fa93 f2a3 	rbit	r2, r3
 80020fa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80020fe:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002100:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002104:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002106:	fab3 f383 	clz	r3, r3
 800210a:	461a      	mov	r2, r3
 800210c:	4b0b      	ldr	r3, [pc, #44]	; (800213c <HAL_RCC_OscConfig+0x914>)
 800210e:	4413      	add	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	461a      	mov	r2, r3
 8002114:	2300      	movs	r3, #0
 8002116:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002118:	f7ff fa2e 	bl	8001578 <HAL_GetTick>
 800211c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002120:	e00e      	b.n	8002140 <HAL_RCC_OscConfig+0x918>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002122:	f7ff fa29 	bl	8001578 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d906      	bls.n	8002140 <HAL_RCC_OscConfig+0x918>
        {
          return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	f000 bc3f 	b.w	80029b6 <HAL_RCC_OscConfig+0x118e>
 8002138:	40021000 	.word	0x40021000
 800213c:	10908120 	.word	0x10908120
 8002140:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002144:	2202      	movs	r2, #2
 8002146:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002148:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	fa93 f2a3 	rbit	r2, r3
 8002152:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002156:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002158:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800215c:	681b      	ldr	r3, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800215e:	fab3 f383 	clz	r3, r3
 8002162:	b2db      	uxtb	r3, r3
 8002164:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002168:	b2db      	uxtb	r3, r3
 800216a:	b2db      	uxtb	r3, r3
 800216c:	095b      	lsrs	r3, r3, #5
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2b01      	cmp	r3, #1
 8002172:	d102      	bne.n	800217a <HAL_RCC_OscConfig+0x952>
 8002174:	4ba6      	ldr	r3, [pc, #664]	; (8002410 <HAL_RCC_OscConfig+0xbe8>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	e03b      	b.n	80021f2 <HAL_RCC_OscConfig+0x9ca>
 800217a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800217e:	2202      	movs	r2, #2
 8002180:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002182:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	fa93 f2a3 	rbit	r2, r3
 800218c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002190:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002192:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	fab3 f383 	clz	r3, r3
 800219c:	b2db      	uxtb	r3, r3
 800219e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	095b      	lsrs	r3, r3, #5
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d102      	bne.n	80021b4 <HAL_RCC_OscConfig+0x98c>
 80021ae:	4b98      	ldr	r3, [pc, #608]	; (8002410 <HAL_RCC_OscConfig+0xbe8>)
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	e01e      	b.n	80021f2 <HAL_RCC_OscConfig+0x9ca>
 80021b4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80021b8:	2202      	movs	r2, #2
 80021ba:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021bc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	fa93 f2a3 	rbit	r2, r3
 80021c6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80021ca:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80021cc:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	fab3 f383 	clz	r3, r3
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	095b      	lsrs	r3, r3, #5
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	2b04      	cmp	r3, #4
 80021e6:	d102      	bne.n	80021ee <HAL_RCC_OscConfig+0x9c6>
 80021e8:	4b89      	ldr	r3, [pc, #548]	; (8002410 <HAL_RCC_OscConfig+0xbe8>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	e001      	b.n	80021f2 <HAL_RCC_OscConfig+0x9ca>
 80021ee:	4b88      	ldr	r3, [pc, #544]	; (8002410 <HAL_RCC_OscConfig+0xbe8>)
 80021f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f2:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 80021f6:	2102      	movs	r1, #2
 80021f8:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fa:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 80021fe:	6812      	ldr	r2, [r2, #0]
 8002200:	fa92 f1a2 	rbit	r1, r2
 8002204:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8002208:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800220a:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800220e:	6812      	ldr	r2, [r2, #0]
 8002210:	fab2 f282 	clz	r2, r2
 8002214:	b2d2      	uxtb	r2, r2
 8002216:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800221a:	b2d2      	uxtb	r2, r2
 800221c:	b2d2      	uxtb	r2, r2
 800221e:	f002 021f 	and.w	r2, r2, #31
 8002222:	2101      	movs	r1, #1
 8002224:	fa01 f202 	lsl.w	r2, r1, r2
 8002228:	4013      	ands	r3, r2
 800222a:	2b00      	cmp	r3, #0
 800222c:	f47f af79 	bne.w	8002122 <HAL_RCC_OscConfig+0x8fa>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002230:	1d3b      	adds	r3, r7, #4
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0304 	and.w	r3, r3, #4
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 81a1 	beq.w	8002582 <HAL_RCC_OscConfig+0xd5a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002240:	2300      	movs	r3, #0
 8002242:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002246:	4b72      	ldr	r3, [pc, #456]	; (8002410 <HAL_RCC_OscConfig+0xbe8>)
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d112      	bne.n	8002278 <HAL_RCC_OscConfig+0xa50>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002252:	4a6f      	ldr	r2, [pc, #444]	; (8002410 <HAL_RCC_OscConfig+0xbe8>)
 8002254:	4b6e      	ldr	r3, [pc, #440]	; (8002410 <HAL_RCC_OscConfig+0xbe8>)
 8002256:	69db      	ldr	r3, [r3, #28]
 8002258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800225c:	61d3      	str	r3, [r2, #28]
 800225e:	4b6c      	ldr	r3, [pc, #432]	; (8002410 <HAL_RCC_OscConfig+0xbe8>)
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002266:	f107 030c 	add.w	r3, r7, #12
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	f107 030c 	add.w	r3, r7, #12
 8002270:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002272:	2301      	movs	r3, #1
 8002274:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002278:	4b66      	ldr	r3, [pc, #408]	; (8002414 <HAL_RCC_OscConfig+0xbec>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002280:	2b00      	cmp	r3, #0
 8002282:	d11a      	bne.n	80022ba <HAL_RCC_OscConfig+0xa92>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002284:	4a63      	ldr	r2, [pc, #396]	; (8002414 <HAL_RCC_OscConfig+0xbec>)
 8002286:	4b63      	ldr	r3, [pc, #396]	; (8002414 <HAL_RCC_OscConfig+0xbec>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800228e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002290:	f7ff f972 	bl	8001578 <HAL_GetTick>
 8002294:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002298:	e009      	b.n	80022ae <HAL_RCC_OscConfig+0xa86>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800229a:	f7ff f96d 	bl	8001578 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b64      	cmp	r3, #100	; 0x64
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0xa86>
        {
          return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e383      	b.n	80029b6 <HAL_RCC_OscConfig+0x118e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ae:	4b59      	ldr	r3, [pc, #356]	; (8002414 <HAL_RCC_OscConfig+0xbec>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0ef      	beq.n	800229a <HAL_RCC_OscConfig+0xa72>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ba:	1d3b      	adds	r3, r7, #4
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d106      	bne.n	80022d2 <HAL_RCC_OscConfig+0xaaa>
 80022c4:	4a52      	ldr	r2, [pc, #328]	; (8002410 <HAL_RCC_OscConfig+0xbe8>)
 80022c6:	4b52      	ldr	r3, [pc, #328]	; (8002410 <HAL_RCC_OscConfig+0xbe8>)
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	f043 0301 	orr.w	r3, r3, #1
 80022ce:	6213      	str	r3, [r2, #32]
 80022d0:	e02f      	b.n	8002332 <HAL_RCC_OscConfig+0xb0a>
 80022d2:	1d3b      	adds	r3, r7, #4
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d10c      	bne.n	80022f6 <HAL_RCC_OscConfig+0xace>
 80022dc:	4a4c      	ldr	r2, [pc, #304]	; (8002410 <HAL_RCC_OscConfig+0xbe8>)
 80022de:	4b4c      	ldr	r3, [pc, #304]	; (8002410 <HAL_RCC_OscConfig+0xbe8>)
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	f023 0301 	bic.w	r3, r3, #1
 80022e6:	6213      	str	r3, [r2, #32]
 80022e8:	4a49      	ldr	r2, [pc, #292]	; (8002410 <HAL_RCC_OscConfig+0xbe8>)
 80022ea:	4b49      	ldr	r3, [pc, #292]	; (8002410 <HAL_RCC_OscConfig+0xbe8>)
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	f023 0304 	bic.w	r3, r3, #4
 80022f2:	6213      	str	r3, [r2, #32]
 80022f4:	e01d      	b.n	8002332 <HAL_RCC_OscConfig+0xb0a>
 80022f6:	1d3b      	adds	r3, r7, #4
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	2b05      	cmp	r3, #5
 80022fe:	d10c      	bne.n	800231a <HAL_RCC_OscConfig+0xaf2>
 8002300:	4a43      	ldr	r2, [pc, #268]	; (8002410 <HAL_RCC_OscConfig+0xbe8>)
 8002302:	4b43      	ldr	r3, [pc, #268]	; (8002410 <HAL_RCC_OscConfig+0xbe8>)
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	f043 0304 	orr.w	r3, r3, #4
 800230a:	6213      	str	r3, [r2, #32]
 800230c:	4a40      	ldr	r2, [pc, #256]	; (8002410 <HAL_RCC_OscConfig+0xbe8>)
 800230e:	4b40      	ldr	r3, [pc, #256]	; (8002410 <HAL_RCC_OscConfig+0xbe8>)
 8002310:	6a1b      	ldr	r3, [r3, #32]
 8002312:	f043 0301 	orr.w	r3, r3, #1
 8002316:	6213      	str	r3, [r2, #32]
 8002318:	e00b      	b.n	8002332 <HAL_RCC_OscConfig+0xb0a>
 800231a:	4a3d      	ldr	r2, [pc, #244]	; (8002410 <HAL_RCC_OscConfig+0xbe8>)
 800231c:	4b3c      	ldr	r3, [pc, #240]	; (8002410 <HAL_RCC_OscConfig+0xbe8>)
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	f023 0301 	bic.w	r3, r3, #1
 8002324:	6213      	str	r3, [r2, #32]
 8002326:	4a3a      	ldr	r2, [pc, #232]	; (8002410 <HAL_RCC_OscConfig+0xbe8>)
 8002328:	4b39      	ldr	r3, [pc, #228]	; (8002410 <HAL_RCC_OscConfig+0xbe8>)
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	f023 0304 	bic.w	r3, r3, #4
 8002330:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002332:	1d3b      	adds	r3, r7, #4
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	2b00      	cmp	r3, #0
 800233a:	f000 808f 	beq.w	800245c <HAL_RCC_OscConfig+0xc34>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800233e:	f7ff f91b 	bl	8001578 <HAL_GetTick>
 8002342:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002346:	e00b      	b.n	8002360 <HAL_RCC_OscConfig+0xb38>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002348:	f7ff f916 	bl	8001578 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	f241 3288 	movw	r2, #5000	; 0x1388
 8002358:	4293      	cmp	r3, r2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0xb38>
        {
          return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e32a      	b.n	80029b6 <HAL_RCC_OscConfig+0x118e>
 8002360:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002364:	2202      	movs	r2, #2
 8002366:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002368:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	fa93 f2a3 	rbit	r2, r3
 8002372:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002376:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002378:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800237c:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800237e:	fab3 f383 	clz	r3, r3
 8002382:	b2db      	uxtb	r3, r3
 8002384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002388:	b2db      	uxtb	r3, r3
 800238a:	b2db      	uxtb	r3, r3
 800238c:	095b      	lsrs	r3, r3, #5
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b01      	cmp	r3, #1
 8002392:	d102      	bne.n	800239a <HAL_RCC_OscConfig+0xb72>
 8002394:	4b1e      	ldr	r3, [pc, #120]	; (8002410 <HAL_RCC_OscConfig+0xbe8>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	e040      	b.n	800241c <HAL_RCC_OscConfig+0xbf4>
 800239a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800239e:	2202      	movs	r2, #2
 80023a0:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	fa93 f2a3 	rbit	r2, r3
 80023ac:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80023b0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80023b2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	fab3 f383 	clz	r3, r3
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	095b      	lsrs	r3, r3, #5
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d102      	bne.n	80023d4 <HAL_RCC_OscConfig+0xbac>
 80023ce:	4b10      	ldr	r3, [pc, #64]	; (8002410 <HAL_RCC_OscConfig+0xbe8>)
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	e023      	b.n	800241c <HAL_RCC_OscConfig+0xbf4>
 80023d4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80023d8:	2202      	movs	r2, #2
 80023da:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023dc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	fa93 f2a3 	rbit	r2, r3
 80023e6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80023ea:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80023ec:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	fab3 f383 	clz	r3, r3
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	095b      	lsrs	r3, r3, #5
 8002402:	b2db      	uxtb	r3, r3
 8002404:	2b04      	cmp	r3, #4
 8002406:	d107      	bne.n	8002418 <HAL_RCC_OscConfig+0xbf0>
 8002408:	4b01      	ldr	r3, [pc, #4]	; (8002410 <HAL_RCC_OscConfig+0xbe8>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	e006      	b.n	800241c <HAL_RCC_OscConfig+0xbf4>
 800240e:	bf00      	nop
 8002410:	40021000 	.word	0x40021000
 8002414:	40007000 	.word	0x40007000
 8002418:	4ba5      	ldr	r3, [pc, #660]	; (80026b0 <HAL_RCC_OscConfig+0xe88>)
 800241a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002420:	2102      	movs	r1, #2
 8002422:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002424:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002428:	6812      	ldr	r2, [r2, #0]
 800242a:	fa92 f1a2 	rbit	r1, r2
 800242e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002432:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002434:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002438:	6812      	ldr	r2, [r2, #0]
 800243a:	fab2 f282 	clz	r2, r2
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	f002 021f 	and.w	r2, r2, #31
 800244c:	2101      	movs	r1, #1
 800244e:	fa01 f202 	lsl.w	r2, r1, r2
 8002452:	4013      	ands	r3, r2
 8002454:	2b00      	cmp	r3, #0
 8002456:	f43f af77 	beq.w	8002348 <HAL_RCC_OscConfig+0xb20>
 800245a:	e088      	b.n	800256e <HAL_RCC_OscConfig+0xd46>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800245c:	f7ff f88c 	bl	8001578 <HAL_GetTick>
 8002460:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002464:	e00b      	b.n	800247e <HAL_RCC_OscConfig+0xc56>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002466:	f7ff f887 	bl	8001578 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	f241 3288 	movw	r2, #5000	; 0x1388
 8002476:	4293      	cmp	r3, r2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0xc56>
        {
          return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e29b      	b.n	80029b6 <HAL_RCC_OscConfig+0x118e>
 800247e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002482:	2202      	movs	r2, #2
 8002484:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002486:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	fa93 f2a3 	rbit	r2, r3
 8002490:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002494:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002496:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800249a:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800249c:	fab3 f383 	clz	r3, r3
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	095b      	lsrs	r3, r3, #5
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d102      	bne.n	80024b8 <HAL_RCC_OscConfig+0xc90>
 80024b2:	4b7f      	ldr	r3, [pc, #508]	; (80026b0 <HAL_RCC_OscConfig+0xe88>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	e03b      	b.n	8002530 <HAL_RCC_OscConfig+0xd08>
 80024b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80024bc:	2202      	movs	r2, #2
 80024be:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	fa93 f2a3 	rbit	r2, r3
 80024ca:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80024ce:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80024d0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	fab3 f383 	clz	r3, r3
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	095b      	lsrs	r3, r3, #5
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d102      	bne.n	80024f2 <HAL_RCC_OscConfig+0xcca>
 80024ec:	4b70      	ldr	r3, [pc, #448]	; (80026b0 <HAL_RCC_OscConfig+0xe88>)
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	e01e      	b.n	8002530 <HAL_RCC_OscConfig+0xd08>
 80024f2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80024f6:	2202      	movs	r2, #2
 80024f8:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	fa93 f2a3 	rbit	r2, r3
 8002504:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002508:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800250a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	fab3 f383 	clz	r3, r3
 8002514:	b2db      	uxtb	r3, r3
 8002516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800251a:	b2db      	uxtb	r3, r3
 800251c:	b2db      	uxtb	r3, r3
 800251e:	095b      	lsrs	r3, r3, #5
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b04      	cmp	r3, #4
 8002524:	d102      	bne.n	800252c <HAL_RCC_OscConfig+0xd04>
 8002526:	4b62      	ldr	r3, [pc, #392]	; (80026b0 <HAL_RCC_OscConfig+0xe88>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	e001      	b.n	8002530 <HAL_RCC_OscConfig+0xd08>
 800252c:	4b60      	ldr	r3, [pc, #384]	; (80026b0 <HAL_RCC_OscConfig+0xe88>)
 800252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002530:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002534:	2102      	movs	r1, #2
 8002536:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002538:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800253c:	6812      	ldr	r2, [r2, #0]
 800253e:	fa92 f1a2 	rbit	r1, r2
 8002542:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002546:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002548:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800254c:	6812      	ldr	r2, [r2, #0]
 800254e:	fab2 f282 	clz	r2, r2
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002558:	b2d2      	uxtb	r2, r2
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	f002 021f 	and.w	r2, r2, #31
 8002560:	2101      	movs	r1, #1
 8002562:	fa01 f202 	lsl.w	r2, r1, r2
 8002566:	4013      	ands	r3, r2
 8002568:	2b00      	cmp	r3, #0
 800256a:	f47f af7c 	bne.w	8002466 <HAL_RCC_OscConfig+0xc3e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800256e:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002572:	2b01      	cmp	r3, #1
 8002574:	d105      	bne.n	8002582 <HAL_RCC_OscConfig+0xd5a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002576:	4a4e      	ldr	r2, [pc, #312]	; (80026b0 <HAL_RCC_OscConfig+0xe88>)
 8002578:	4b4d      	ldr	r3, [pc, #308]	; (80026b0 <HAL_RCC_OscConfig+0xe88>)
 800257a:	69db      	ldr	r3, [r3, #28]
 800257c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002580:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002582:	1d3b      	adds	r3, r7, #4
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	69db      	ldr	r3, [r3, #28]
 8002588:	2b00      	cmp	r3, #0
 800258a:	f000 8213 	beq.w	80029b4 <HAL_RCC_OscConfig+0x118c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800258e:	4b48      	ldr	r3, [pc, #288]	; (80026b0 <HAL_RCC_OscConfig+0xe88>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f003 030c 	and.w	r3, r3, #12
 8002596:	2b08      	cmp	r3, #8
 8002598:	f000 8208 	beq.w	80029ac <HAL_RCC_OscConfig+0x1184>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800259c:	1d3b      	adds	r3, r7, #4
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	f040 815c 	bne.w	8002860 <HAL_RCC_OscConfig+0x1038>
 80025a8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80025ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025b0:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	fa93 f2a3 	rbit	r2, r3
 80025bc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80025c0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80025c2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80025c6:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025c8:	fab3 f383 	clz	r3, r3
 80025cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	461a      	mov	r2, r3
 80025d8:	2300      	movs	r3, #0
 80025da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025dc:	f7fe ffcc 	bl	8001578 <HAL_GetTick>
 80025e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025e4:	e009      	b.n	80025fa <HAL_RCC_OscConfig+0xdd2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025e6:	f7fe ffc7 	bl	8001578 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0xdd2>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e1dd      	b.n	80029b6 <HAL_RCC_OscConfig+0x118e>
 80025fa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80025fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002602:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002604:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	fa93 f2a3 	rbit	r2, r3
 800260e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002612:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002614:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002618:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800261a:	fab3 f383 	clz	r3, r3
 800261e:	b2db      	uxtb	r3, r3
 8002620:	f043 0320 	orr.w	r3, r3, #32
 8002624:	b2db      	uxtb	r3, r3
 8002626:	b2db      	uxtb	r3, r3
 8002628:	095b      	lsrs	r3, r3, #5
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b01      	cmp	r3, #1
 800262e:	d102      	bne.n	8002636 <HAL_RCC_OscConfig+0xe0e>
 8002630:	4b1f      	ldr	r3, [pc, #124]	; (80026b0 <HAL_RCC_OscConfig+0xe88>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	e040      	b.n	80026b8 <HAL_RCC_OscConfig+0xe90>
 8002636:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800263a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800263e:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002640:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	fa93 f2a3 	rbit	r2, r3
 800264a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800264e:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002650:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	fab3 f383 	clz	r3, r3
 800265a:	b2db      	uxtb	r3, r3
 800265c:	f043 0320 	orr.w	r3, r3, #32
 8002660:	b2db      	uxtb	r3, r3
 8002662:	b2db      	uxtb	r3, r3
 8002664:	095b      	lsrs	r3, r3, #5
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d102      	bne.n	8002672 <HAL_RCC_OscConfig+0xe4a>
 800266c:	4b10      	ldr	r3, [pc, #64]	; (80026b0 <HAL_RCC_OscConfig+0xe88>)
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	e022      	b.n	80026b8 <HAL_RCC_OscConfig+0xe90>
 8002672:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002676:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800267a:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	fa93 f2a3 	rbit	r2, r3
 8002686:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800268a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800268c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	fab3 f383 	clz	r3, r3
 8002696:	b2db      	uxtb	r3, r3
 8002698:	f043 0320 	orr.w	r3, r3, #32
 800269c:	b2db      	uxtb	r3, r3
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	095b      	lsrs	r3, r3, #5
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b04      	cmp	r3, #4
 80026a6:	d105      	bne.n	80026b4 <HAL_RCC_OscConfig+0xe8c>
 80026a8:	4b01      	ldr	r3, [pc, #4]	; (80026b0 <HAL_RCC_OscConfig+0xe88>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	e004      	b.n	80026b8 <HAL_RCC_OscConfig+0xe90>
 80026ae:	bf00      	nop
 80026b0:	40021000 	.word	0x40021000
 80026b4:	4bbe      	ldr	r3, [pc, #760]	; (80029b0 <HAL_RCC_OscConfig+0x1188>)
 80026b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80026bc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80026c0:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80026c6:	6812      	ldr	r2, [r2, #0]
 80026c8:	fa92 f1a2 	rbit	r1, r2
 80026cc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80026d0:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80026d2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80026d6:	6812      	ldr	r2, [r2, #0]
 80026d8:	fab2 f282 	clz	r2, r2
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	f042 0220 	orr.w	r2, r2, #32
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	b2d2      	uxtb	r2, r2
 80026e6:	f002 021f 	and.w	r2, r2, #31
 80026ea:	2101      	movs	r1, #1
 80026ec:	fa01 f202 	lsl.w	r2, r1, r2
 80026f0:	4013      	ands	r3, r2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f47f af77 	bne.w	80025e6 <HAL_RCC_OscConfig+0xdbe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026f8:	48ad      	ldr	r0, [pc, #692]	; (80029b0 <HAL_RCC_OscConfig+0x1188>)
 80026fa:	4bad      	ldr	r3, [pc, #692]	; (80029b0 <HAL_RCC_OscConfig+0x1188>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002702:	1d3b      	adds	r3, r7, #4
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002708:	1d3b      	adds	r3, r7, #4
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	430b      	orrs	r3, r1
 8002710:	4313      	orrs	r3, r2
 8002712:	6043      	str	r3, [r0, #4]
 8002714:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002718:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800271c:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	fa93 f2a3 	rbit	r2, r3
 8002728:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800272c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800272e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002732:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002734:	fab3 f383 	clz	r3, r3
 8002738:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800273c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	461a      	mov	r2, r3
 8002744:	2301      	movs	r3, #1
 8002746:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002748:	f7fe ff16 	bl	8001578 <HAL_GetTick>
 800274c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002750:	e009      	b.n	8002766 <HAL_RCC_OscConfig+0xf3e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002752:	f7fe ff11 	bl	8001578 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0xf3e>
          {
            return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e127      	b.n	80029b6 <HAL_RCC_OscConfig+0x118e>
 8002766:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800276a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800276e:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002770:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	fa93 f2a3 	rbit	r2, r3
 800277a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800277e:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002780:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002784:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002786:	fab3 f383 	clz	r3, r3
 800278a:	b2db      	uxtb	r3, r3
 800278c:	f043 0320 	orr.w	r3, r3, #32
 8002790:	b2db      	uxtb	r3, r3
 8002792:	b2db      	uxtb	r3, r3
 8002794:	095b      	lsrs	r3, r3, #5
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b01      	cmp	r3, #1
 800279a:	d102      	bne.n	80027a2 <HAL_RCC_OscConfig+0xf7a>
 800279c:	4b84      	ldr	r3, [pc, #528]	; (80029b0 <HAL_RCC_OscConfig+0x1188>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	e03d      	b.n	800281e <HAL_RCC_OscConfig+0xff6>
 80027a2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80027a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027aa:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	fa93 f2a3 	rbit	r2, r3
 80027b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80027ba:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80027bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	fab3 f383 	clz	r3, r3
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	f043 0320 	orr.w	r3, r3, #32
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	095b      	lsrs	r3, r3, #5
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d102      	bne.n	80027de <HAL_RCC_OscConfig+0xfb6>
 80027d8:	4b75      	ldr	r3, [pc, #468]	; (80029b0 <HAL_RCC_OscConfig+0x1188>)
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	e01f      	b.n	800281e <HAL_RCC_OscConfig+0xff6>
 80027de:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80027e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027e6:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	fa93 f2a3 	rbit	r2, r3
 80027f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027f6:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80027f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	fab3 f383 	clz	r3, r3
 8002802:	b2db      	uxtb	r3, r3
 8002804:	f043 0320 	orr.w	r3, r3, #32
 8002808:	b2db      	uxtb	r3, r3
 800280a:	b2db      	uxtb	r3, r3
 800280c:	095b      	lsrs	r3, r3, #5
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2b04      	cmp	r3, #4
 8002812:	d102      	bne.n	800281a <HAL_RCC_OscConfig+0xff2>
 8002814:	4b66      	ldr	r3, [pc, #408]	; (80029b0 <HAL_RCC_OscConfig+0x1188>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	e001      	b.n	800281e <HAL_RCC_OscConfig+0xff6>
 800281a:	4b65      	ldr	r3, [pc, #404]	; (80029b0 <HAL_RCC_OscConfig+0x1188>)
 800281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002822:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002826:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002828:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800282c:	6812      	ldr	r2, [r2, #0]
 800282e:	fa92 f1a2 	rbit	r1, r2
 8002832:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002836:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002838:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800283c:	6812      	ldr	r2, [r2, #0]
 800283e:	fab2 f282 	clz	r2, r2
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	f042 0220 	orr.w	r2, r2, #32
 8002848:	b2d2      	uxtb	r2, r2
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	f002 021f 	and.w	r2, r2, #31
 8002850:	2101      	movs	r1, #1
 8002852:	fa01 f202 	lsl.w	r2, r1, r2
 8002856:	4013      	ands	r3, r2
 8002858:	2b00      	cmp	r3, #0
 800285a:	f43f af7a 	beq.w	8002752 <HAL_RCC_OscConfig+0xf2a>
 800285e:	e0a9      	b.n	80029b4 <HAL_RCC_OscConfig+0x118c>
 8002860:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002864:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002868:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	fa93 f2a3 	rbit	r2, r3
 8002874:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002878:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800287a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800287e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002880:	fab3 f383 	clz	r3, r3
 8002884:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002888:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	461a      	mov	r2, r3
 8002890:	2300      	movs	r3, #0
 8002892:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002894:	f7fe fe70 	bl	8001578 <HAL_GetTick>
 8002898:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800289c:	e009      	b.n	80028b2 <HAL_RCC_OscConfig+0x108a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800289e:	f7fe fe6b 	bl	8001578 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x108a>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e081      	b.n	80029b6 <HAL_RCC_OscConfig+0x118e>
 80028b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028ba:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	fa93 f2a3 	rbit	r2, r3
 80028c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028ca:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80028cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028d0:	681b      	ldr	r3, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028d2:	fab3 f383 	clz	r3, r3
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	f043 0320 	orr.w	r3, r3, #32
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	095b      	lsrs	r3, r3, #5
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d102      	bne.n	80028ee <HAL_RCC_OscConfig+0x10c6>
 80028e8:	4b31      	ldr	r3, [pc, #196]	; (80029b0 <HAL_RCC_OscConfig+0x1188>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	e03d      	b.n	800296a <HAL_RCC_OscConfig+0x1142>
 80028ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028f6:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	fa93 f2a3 	rbit	r2, r3
 8002902:	f107 0320 	add.w	r3, r7, #32
 8002906:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002908:	f107 0320 	add.w	r3, r7, #32
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	fab3 f383 	clz	r3, r3
 8002912:	b2db      	uxtb	r3, r3
 8002914:	f043 0320 	orr.w	r3, r3, #32
 8002918:	b2db      	uxtb	r3, r3
 800291a:	b2db      	uxtb	r3, r3
 800291c:	095b      	lsrs	r3, r3, #5
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d102      	bne.n	800292a <HAL_RCC_OscConfig+0x1102>
 8002924:	4b22      	ldr	r3, [pc, #136]	; (80029b0 <HAL_RCC_OscConfig+0x1188>)
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	e01f      	b.n	800296a <HAL_RCC_OscConfig+0x1142>
 800292a:	f107 031c 	add.w	r3, r7, #28
 800292e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002932:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002934:	f107 031c 	add.w	r3, r7, #28
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	fa93 f2a3 	rbit	r2, r3
 800293e:	f107 0318 	add.w	r3, r7, #24
 8002942:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002944:	f107 0318 	add.w	r3, r7, #24
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	fab3 f383 	clz	r3, r3
 800294e:	b2db      	uxtb	r3, r3
 8002950:	f043 0320 	orr.w	r3, r3, #32
 8002954:	b2db      	uxtb	r3, r3
 8002956:	b2db      	uxtb	r3, r3
 8002958:	095b      	lsrs	r3, r3, #5
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b04      	cmp	r3, #4
 800295e:	d102      	bne.n	8002966 <HAL_RCC_OscConfig+0x113e>
 8002960:	4b13      	ldr	r3, [pc, #76]	; (80029b0 <HAL_RCC_OscConfig+0x1188>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	e001      	b.n	800296a <HAL_RCC_OscConfig+0x1142>
 8002966:	4b12      	ldr	r3, [pc, #72]	; (80029b0 <HAL_RCC_OscConfig+0x1188>)
 8002968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296a:	f107 0214 	add.w	r2, r7, #20
 800296e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002972:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002974:	f107 0214 	add.w	r2, r7, #20
 8002978:	6812      	ldr	r2, [r2, #0]
 800297a:	fa92 f1a2 	rbit	r1, r2
 800297e:	f107 0210 	add.w	r2, r7, #16
 8002982:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002984:	f107 0210 	add.w	r2, r7, #16
 8002988:	6812      	ldr	r2, [r2, #0]
 800298a:	fab2 f282 	clz	r2, r2
 800298e:	b2d2      	uxtb	r2, r2
 8002990:	f042 0220 	orr.w	r2, r2, #32
 8002994:	b2d2      	uxtb	r2, r2
 8002996:	b2d2      	uxtb	r2, r2
 8002998:	f002 021f 	and.w	r2, r2, #31
 800299c:	2101      	movs	r1, #1
 800299e:	fa01 f202 	lsl.w	r2, r1, r2
 80029a2:	4013      	ands	r3, r2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f47f af7a 	bne.w	800289e <HAL_RCC_OscConfig+0x1076>
 80029aa:	e003      	b.n	80029b4 <HAL_RCC_OscConfig+0x118c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e002      	b.n	80029b6 <HAL_RCC_OscConfig+0x118e>
 80029b0:	40021000 	.word	0x40021000
    }
  }
  
  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b09e      	sub	sp, #120	; 0x78
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	677b      	str	r3, [r7, #116]	; 0x74
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80029ce:	4ba5      	ldr	r3, [pc, #660]	; (8002c64 <HAL_RCC_ClockConfig+0x2a4>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0207 	and.w	r2, r3, #7
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d210      	bcs.n	80029fe <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029dc:	49a1      	ldr	r1, [pc, #644]	; (8002c64 <HAL_RCC_ClockConfig+0x2a4>)
 80029de:	4ba1      	ldr	r3, [pc, #644]	; (8002c64 <HAL_RCC_ClockConfig+0x2a4>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f023 0207 	bic.w	r2, r3, #7
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80029ec:	4b9d      	ldr	r3, [pc, #628]	; (8002c64 <HAL_RCC_ClockConfig+0x2a4>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0207 	and.w	r2, r3, #7
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d001      	beq.n	80029fe <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e1d5      	b.n	8002daa <HAL_RCC_ClockConfig+0x3ea>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d008      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a0a:	4997      	ldr	r1, [pc, #604]	; (8002c68 <HAL_RCC_ClockConfig+0x2a8>)
 8002a0c:	4b96      	ldr	r3, [pc, #600]	; (8002c68 <HAL_RCC_ClockConfig+0x2a8>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f000 816d 	beq.w	8002d04 <HAL_RCC_ClockConfig+0x344>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d15d      	bne.n	8002aee <HAL_RCC_ClockConfig+0x12e>
 8002a32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a36:	673b      	str	r3, [r7, #112]	; 0x70
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a3a:	fa93 f3a3 	rbit	r3, r3
 8002a3e:	66fb      	str	r3, [r7, #108]	; 0x6c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002a40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a42:	fab3 f383 	clz	r3, r3
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	f043 0320 	orr.w	r3, r3, #32
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	095b      	lsrs	r3, r3, #5
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d102      	bne.n	8002a5e <HAL_RCC_ClockConfig+0x9e>
 8002a58:	4b83      	ldr	r3, [pc, #524]	; (8002c68 <HAL_RCC_ClockConfig+0x2a8>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	e02d      	b.n	8002aba <HAL_RCC_ClockConfig+0xfa>
 8002a5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a62:	66bb      	str	r3, [r7, #104]	; 0x68
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a66:	fa93 f3a3 	rbit	r3, r3
 8002a6a:	667b      	str	r3, [r7, #100]	; 0x64
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002a6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a6e:	fab3 f383 	clz	r3, r3
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	f043 0320 	orr.w	r3, r3, #32
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	095b      	lsrs	r3, r3, #5
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d102      	bne.n	8002a8a <HAL_RCC_ClockConfig+0xca>
 8002a84:	4b78      	ldr	r3, [pc, #480]	; (8002c68 <HAL_RCC_ClockConfig+0x2a8>)
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	e017      	b.n	8002aba <HAL_RCC_ClockConfig+0xfa>
 8002a8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a8e:	663b      	str	r3, [r7, #96]	; 0x60
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a92:	fa93 f3a3 	rbit	r3, r3
 8002a96:	65fb      	str	r3, [r7, #92]	; 0x5c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002a98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a9a:	fab3 f383 	clz	r3, r3
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	f043 0320 	orr.w	r3, r3, #32
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	095b      	lsrs	r3, r3, #5
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b04      	cmp	r3, #4
 8002aae:	d102      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0xf6>
 8002ab0:	4b6d      	ldr	r3, [pc, #436]	; (8002c68 <HAL_RCC_ClockConfig+0x2a8>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	e001      	b.n	8002aba <HAL_RCC_ClockConfig+0xfa>
 8002ab6:	4b6c      	ldr	r3, [pc, #432]	; (8002c68 <HAL_RCC_ClockConfig+0x2a8>)
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002abe:	65ba      	str	r2, [r7, #88]	; 0x58
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ac2:	fa92 f2a2 	rbit	r2, r2
 8002ac6:	657a      	str	r2, [r7, #84]	; 0x54
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002ac8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002aca:	fab2 f282 	clz	r2, r2
 8002ace:	b2d2      	uxtb	r2, r2
 8002ad0:	f042 0220 	orr.w	r2, r2, #32
 8002ad4:	b2d2      	uxtb	r2, r2
 8002ad6:	b2d2      	uxtb	r2, r2
 8002ad8:	f002 021f 	and.w	r2, r2, #31
 8002adc:	2101      	movs	r1, #1
 8002ade:	fa01 f202 	lsl.w	r2, r1, r2
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f040 80c1 	bne.w	8002c6c <HAL_RCC_ClockConfig+0x2ac>
      {
        return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e15d      	b.n	8002daa <HAL_RCC_ClockConfig+0x3ea>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d15c      	bne.n	8002bb0 <HAL_RCC_ClockConfig+0x1f0>
 8002af6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002afa:	653b      	str	r3, [r7, #80]	; 0x50
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002afe:	fa93 f3a3 	rbit	r3, r3
 8002b02:	64fb      	str	r3, [r7, #76]	; 0x4c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002b04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b06:	fab3 f383 	clz	r3, r3
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	f043 0320 	orr.w	r3, r3, #32
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	095b      	lsrs	r3, r3, #5
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d102      	bne.n	8002b22 <HAL_RCC_ClockConfig+0x162>
 8002b1c:	4b52      	ldr	r3, [pc, #328]	; (8002c68 <HAL_RCC_ClockConfig+0x2a8>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	e02d      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1be>
 8002b22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b26:	64bb      	str	r3, [r7, #72]	; 0x48
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b2a:	fa93 f3a3 	rbit	r3, r3
 8002b2e:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b32:	fab3 f383 	clz	r3, r3
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	f043 0320 	orr.w	r3, r3, #32
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	095b      	lsrs	r3, r3, #5
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d102      	bne.n	8002b4e <HAL_RCC_ClockConfig+0x18e>
 8002b48:	4b47      	ldr	r3, [pc, #284]	; (8002c68 <HAL_RCC_ClockConfig+0x2a8>)
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	e017      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1be>
 8002b4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b52:	643b      	str	r3, [r7, #64]	; 0x40
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b56:	fa93 f3a3 	rbit	r3, r3
 8002b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b5e:	fab3 f383 	clz	r3, r3
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	f043 0320 	orr.w	r3, r3, #32
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	095b      	lsrs	r3, r3, #5
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b04      	cmp	r3, #4
 8002b72:	d102      	bne.n	8002b7a <HAL_RCC_ClockConfig+0x1ba>
 8002b74:	4b3c      	ldr	r3, [pc, #240]	; (8002c68 <HAL_RCC_ClockConfig+0x2a8>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	e001      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1be>
 8002b7a:	4b3b      	ldr	r3, [pc, #236]	; (8002c68 <HAL_RCC_ClockConfig+0x2a8>)
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b82:	63ba      	str	r2, [r7, #56]	; 0x38
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b86:	fa92 f2a2 	rbit	r2, r2
 8002b8a:	637a      	str	r2, [r7, #52]	; 0x34
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002b8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b8e:	fab2 f282 	clz	r2, r2
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	f042 0220 	orr.w	r2, r2, #32
 8002b98:	b2d2      	uxtb	r2, r2
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	f002 021f 	and.w	r2, r2, #31
 8002ba0:	2101      	movs	r1, #1
 8002ba2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d15f      	bne.n	8002c6c <HAL_RCC_ClockConfig+0x2ac>
      {
        return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e0fc      	b.n	8002daa <HAL_RCC_ClockConfig+0x3ea>
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb6:	fa93 f3a3 	rbit	r3, r3
 8002bba:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bbe:	fab3 f383 	clz	r3, r3
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	f043 0320 	orr.w	r3, r3, #32
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	095b      	lsrs	r3, r3, #5
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d102      	bne.n	8002bda <HAL_RCC_ClockConfig+0x21a>
 8002bd4:	4b24      	ldr	r3, [pc, #144]	; (8002c68 <HAL_RCC_ClockConfig+0x2a8>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	e02b      	b.n	8002c32 <HAL_RCC_ClockConfig+0x272>
 8002bda:	2302      	movs	r3, #2
 8002bdc:	62bb      	str	r3, [r7, #40]	; 0x28
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be0:	fa93 f3a3 	rbit	r3, r3
 8002be4:	627b      	str	r3, [r7, #36]	; 0x24
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	fab3 f383 	clz	r3, r3
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	f043 0320 	orr.w	r3, r3, #32
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	095b      	lsrs	r3, r3, #5
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d102      	bne.n	8002c04 <HAL_RCC_ClockConfig+0x244>
 8002bfe:	4b1a      	ldr	r3, [pc, #104]	; (8002c68 <HAL_RCC_ClockConfig+0x2a8>)
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	e016      	b.n	8002c32 <HAL_RCC_ClockConfig+0x272>
 8002c04:	2302      	movs	r3, #2
 8002c06:	623b      	str	r3, [r7, #32]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c08:	6a3b      	ldr	r3, [r7, #32]
 8002c0a:	fa93 f3a3 	rbit	r3, r3
 8002c0e:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	fab3 f383 	clz	r3, r3
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	f043 0320 	orr.w	r3, r3, #32
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	095b      	lsrs	r3, r3, #5
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b04      	cmp	r3, #4
 8002c26:	d102      	bne.n	8002c2e <HAL_RCC_ClockConfig+0x26e>
 8002c28:	4b0f      	ldr	r3, [pc, #60]	; (8002c68 <HAL_RCC_ClockConfig+0x2a8>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	e001      	b.n	8002c32 <HAL_RCC_ClockConfig+0x272>
 8002c2e:	4b0e      	ldr	r3, [pc, #56]	; (8002c68 <HAL_RCC_ClockConfig+0x2a8>)
 8002c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c32:	2202      	movs	r2, #2
 8002c34:	61ba      	str	r2, [r7, #24]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	fa92 f2a2 	rbit	r2, r2
 8002c3c:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	fab2 f282 	clz	r2, r2
 8002c44:	b2d2      	uxtb	r2, r2
 8002c46:	f042 0220 	orr.w	r2, r2, #32
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	b2d2      	uxtb	r2, r2
 8002c4e:	f002 021f 	and.w	r2, r2, #31
 8002c52:	2101      	movs	r1, #1
 8002c54:	fa01 f202 	lsl.w	r2, r1, r2
 8002c58:	4013      	ands	r3, r2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d106      	bne.n	8002c6c <HAL_RCC_ClockConfig+0x2ac>
      {
        return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e0a3      	b.n	8002daa <HAL_RCC_ClockConfig+0x3ea>
 8002c62:	bf00      	nop
 8002c64:	40022000 	.word	0x40022000
 8002c68:	40021000 	.word	0x40021000
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c6c:	4951      	ldr	r1, [pc, #324]	; (8002db4 <HAL_RCC_ClockConfig+0x3f4>)
 8002c6e:	4b51      	ldr	r3, [pc, #324]	; (8002db4 <HAL_RCC_ClockConfig+0x3f4>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f023 0203 	bic.w	r2, r3, #3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c7e:	f7fe fc7b 	bl	8001578 <HAL_GetTick>
 8002c82:	6778      	str	r0, [r7, #116]	; 0x74
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d112      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0x2f2>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c8c:	e00a      	b.n	8002ca4 <HAL_RCC_ClockConfig+0x2e4>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c8e:	f7fe fc73 	bl	8001578 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_ClockConfig+0x2e4>
        {
          return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e082      	b.n	8002daa <HAL_RCC_ClockConfig+0x3ea>
    /* Get Start Tick */
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ca4:	4b43      	ldr	r3, [pc, #268]	; (8002db4 <HAL_RCC_ClockConfig+0x3f4>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f003 030c 	and.w	r3, r3, #12
 8002cac:	2b04      	cmp	r3, #4
 8002cae:	d1ee      	bne.n	8002c8e <HAL_RCC_ClockConfig+0x2ce>
 8002cb0:	e028      	b.n	8002d04 <HAL_RCC_ClockConfig+0x344>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d112      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0x320>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cba:	e00a      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x312>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cbc:	f7fe fc5c 	bl	8001578 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_ClockConfig+0x312>
        {
          return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e06b      	b.n	8002daa <HAL_RCC_ClockConfig+0x3ea>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cd2:	4b38      	ldr	r3, [pc, #224]	; (8002db4 <HAL_RCC_ClockConfig+0x3f4>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f003 030c 	and.w	r3, r3, #12
 8002cda:	2b08      	cmp	r3, #8
 8002cdc:	d1ee      	bne.n	8002cbc <HAL_RCC_ClockConfig+0x2fc>
 8002cde:	e011      	b.n	8002d04 <HAL_RCC_ClockConfig+0x344>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ce0:	e00a      	b.n	8002cf8 <HAL_RCC_ClockConfig+0x338>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ce2:	f7fe fc49 	bl	8001578 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_ClockConfig+0x338>
        {
          return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e058      	b.n	8002daa <HAL_RCC_ClockConfig+0x3ea>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cf8:	4b2e      	ldr	r3, [pc, #184]	; (8002db4 <HAL_RCC_ClockConfig+0x3f4>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f003 030c 	and.w	r3, r3, #12
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1ee      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0x322>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002d04:	4b2c      	ldr	r3, [pc, #176]	; (8002db8 <HAL_RCC_ClockConfig+0x3f8>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0207 	and.w	r2, r3, #7
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d910      	bls.n	8002d34 <HAL_RCC_ClockConfig+0x374>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d12:	4929      	ldr	r1, [pc, #164]	; (8002db8 <HAL_RCC_ClockConfig+0x3f8>)
 8002d14:	4b28      	ldr	r3, [pc, #160]	; (8002db8 <HAL_RCC_ClockConfig+0x3f8>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f023 0207 	bic.w	r2, r3, #7
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d22:	4b25      	ldr	r3, [pc, #148]	; (8002db8 <HAL_RCC_ClockConfig+0x3f8>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0207 	and.w	r2, r3, #7
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d001      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x374>
    {
      return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e03a      	b.n	8002daa <HAL_RCC_ClockConfig+0x3ea>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d008      	beq.n	8002d52 <HAL_RCC_ClockConfig+0x392>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d40:	491c      	ldr	r1, [pc, #112]	; (8002db4 <HAL_RCC_ClockConfig+0x3f4>)
 8002d42:	4b1c      	ldr	r3, [pc, #112]	; (8002db4 <HAL_RCC_ClockConfig+0x3f4>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0308 	and.w	r3, r3, #8
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d009      	beq.n	8002d72 <HAL_RCC_ClockConfig+0x3b2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d5e:	4915      	ldr	r1, [pc, #84]	; (8002db4 <HAL_RCC_ClockConfig+0x3f4>)
 8002d60:	4b14      	ldr	r3, [pc, #80]	; (8002db4 <HAL_RCC_ClockConfig+0x3f4>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d72:	f000 f827 	bl	8002dc4 <HAL_RCC_GetSysClockFreq>
 8002d76:	4601      	mov	r1, r0
 8002d78:	4b0e      	ldr	r3, [pc, #56]	; (8002db4 <HAL_RCC_ClockConfig+0x3f4>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d80:	23f0      	movs	r3, #240	; 0xf0
 8002d82:	613b      	str	r3, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	fa93 f3a3 	rbit	r3, r3
 8002d8a:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	fab3 f383 	clz	r3, r3
 8002d92:	fa22 f303 	lsr.w	r3, r2, r3
 8002d96:	4a09      	ldr	r2, [pc, #36]	; (8002dbc <HAL_RCC_ClockConfig+0x3fc>)
 8002d98:	5cd3      	ldrb	r3, [r2, r3]
 8002d9a:	fa21 f303 	lsr.w	r3, r1, r3
 8002d9e:	4a08      	ldr	r2, [pc, #32]	; (8002dc0 <HAL_RCC_ClockConfig+0x400>)
 8002da0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002da2:	2000      	movs	r0, #0
 8002da4:	f7fd fafe 	bl	80003a4 <HAL_InitTick>
  
  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3778      	adds	r7, #120	; 0x78
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	40021000 	.word	0x40021000
 8002db8:	40022000 	.word	0x40022000
 8002dbc:	0800562c 	.word	0x0800562c
 8002dc0:	20000000 	.word	0x20000000

08002dc4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b08b      	sub	sp, #44	; 0x2c
 8002dc8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	61fb      	str	r3, [r7, #28]
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61bb      	str	r3, [r7, #24]
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002dde:	4b29      	ldr	r3, [pc, #164]	; (8002e84 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	f003 030c 	and.w	r3, r3, #12
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d002      	beq.n	8002df4 <HAL_RCC_GetSysClockFreq+0x30>
 8002dee:	2b08      	cmp	r3, #8
 8002df0:	d003      	beq.n	8002dfa <HAL_RCC_GetSysClockFreq+0x36>
 8002df2:	e03c      	b.n	8002e6e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002df4:	4b24      	ldr	r3, [pc, #144]	; (8002e88 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002df6:	623b      	str	r3, [r7, #32]
      break;
 8002df8:	e03c      	b.n	8002e74 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e00:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8002e04:	613b      	str	r3, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	fa93 f3a3 	rbit	r3, r3
 8002e0c:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	fab3 f383 	clz	r3, r3
 8002e14:	fa22 f303 	lsr.w	r3, r2, r3
 8002e18:	4a1c      	ldr	r2, [pc, #112]	; (8002e8c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002e1a:	5cd3      	ldrb	r3, [r2, r3]
 8002e1c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002e1e:	4b19      	ldr	r3, [pc, #100]	; (8002e84 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e22:	f003 020f 	and.w	r2, r3, #15
 8002e26:	230f      	movs	r3, #15
 8002e28:	60bb      	str	r3, [r7, #8]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	fa93 f3a3 	rbit	r3, r3
 8002e30:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	fab3 f383 	clz	r3, r3
 8002e38:	fa22 f303 	lsr.w	r3, r2, r3
 8002e3c:	4a14      	ldr	r2, [pc, #80]	; (8002e90 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002e3e:	5cd3      	ldrb	r3, [r2, r3]
 8002e40:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d008      	beq.n	8002e5e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8002e4c:	4a0e      	ldr	r2, [pc, #56]	; (8002e88 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e54:	697a      	ldr	r2, [r7, #20]
 8002e56:	fb02 f303 	mul.w	r3, r2, r3
 8002e5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e5c:	e004      	b.n	8002e68 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	4a0c      	ldr	r2, [pc, #48]	; (8002e94 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002e62:	fb02 f303 	mul.w	r3, r2, r3
 8002e66:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6a:	623b      	str	r3, [r7, #32]
      break;
 8002e6c:	e002      	b.n	8002e74 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e6e:	4b06      	ldr	r3, [pc, #24]	; (8002e88 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e70:	623b      	str	r3, [r7, #32]
      break;
 8002e72:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e74:	6a3b      	ldr	r3, [r7, #32]
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	372c      	adds	r7, #44	; 0x2c
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	40021000 	.word	0x40021000
 8002e88:	007a1200 	.word	0x007a1200
 8002e8c:	08005884 	.word	0x08005884
 8002e90:	08005894 	.word	0x08005894
 8002e94:	003d0900 	.word	0x003d0900

08002e98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e9c:	4b03      	ldr	r3, [pc, #12]	; (8002eac <HAL_RCC_GetHCLKFreq+0x14>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	20000000 	.word	0x20000000

08002eb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002eb6:	f7ff ffef 	bl	8002e98 <HAL_RCC_GetHCLKFreq>
 8002eba:	4601      	mov	r1, r0
 8002ebc:	4b0b      	ldr	r3, [pc, #44]	; (8002eec <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002ec4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002ec8:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	fa93 f3a3 	rbit	r3, r3
 8002ed0:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	fab3 f383 	clz	r3, r3
 8002ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8002edc:	4a04      	ldr	r2, [pc, #16]	; (8002ef0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002ede:	5cd3      	ldrb	r3, [r2, r3]
 8002ee0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	0800563c 	.word	0x0800563c

08002ef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002efa:	f7ff ffcd 	bl	8002e98 <HAL_RCC_GetHCLKFreq>
 8002efe:	4601      	mov	r1, r0
 8002f00:	4b0b      	ldr	r3, [pc, #44]	; (8002f30 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8002f08:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002f0c:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	fa93 f3a3 	rbit	r3, r3
 8002f14:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	fab3 f383 	clz	r3, r3
 8002f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f20:	4a04      	ldr	r2, [pc, #16]	; (8002f34 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002f22:	5cd3      	ldrb	r3, [r2, r3]
 8002f24:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3708      	adds	r7, #8
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40021000 	.word	0x40021000
 8002f34:	0800563c 	.word	0x0800563c

08002f38 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	220f      	movs	r2, #15
 8002f46:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f48:	4b11      	ldr	r3, [pc, #68]	; (8002f90 <HAL_RCC_GetClockConfig+0x58>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f003 0203 	and.w	r2, r3, #3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002f54:	4b0e      	ldr	r3, [pc, #56]	; (8002f90 <HAL_RCC_GetClockConfig+0x58>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002f60:	4b0b      	ldr	r3, [pc, #44]	; (8002f90 <HAL_RCC_GetClockConfig+0x58>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002f6c:	4b08      	ldr	r3, [pc, #32]	; (8002f90 <HAL_RCC_GetClockConfig+0x58>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002f74:	08da      	lsrs	r2, r3, #3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002f7a:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <HAL_RCC_GetClockConfig+0x5c>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0207 	and.w	r2, r3, #7
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	601a      	str	r2, [r3, #0]
}
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr
 8002f90:	40021000 	.word	0x40021000
 8002f94:	40022000 	.word	0x40022000

08002f98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b087      	sub	sp, #28
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002faa:	2300      	movs	r3, #0
 8002fac:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8002fae:	e14a      	b.n	8003246 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f000 813c 	beq.w	8003240 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d003      	beq.n	8002fd8 <HAL_GPIO_Init+0x40>
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	2b12      	cmp	r3, #18
 8002fd6:	d122      	bne.n	800301e <HAL_GPIO_Init+0x86>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	08da      	lsrs	r2, r3, #3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	3208      	adds	r2, #8
 8002fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	461a      	mov	r2, r3
 8002ff0:	230f      	movs	r3, #15
 8002ff2:	4093      	lsls	r3, r2
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	f002 0207 	and.w	r2, r2, #7
 8003006:	0092      	lsls	r2, r2, #2
 8003008:	4093      	lsls	r3, r2
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	4313      	orrs	r3, r2
 800300e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	08da      	lsrs	r2, r3, #3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3208      	adds	r2, #8
 8003018:	6939      	ldr	r1, [r7, #16]
 800301a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	461a      	mov	r2, r3
 800302a:	2303      	movs	r3, #3
 800302c:	4093      	lsls	r3, r2
 800302e:	43db      	mvns	r3, r3
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	4013      	ands	r3, r2
 8003034:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f003 0303 	and.w	r3, r3, #3
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	0052      	lsls	r2, r2, #1
 8003042:	4093      	lsls	r3, r2
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	4313      	orrs	r3, r2
 8003048:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d00b      	beq.n	8003070 <HAL_GPIO_Init+0xd8>
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	2b02      	cmp	r3, #2
 800305e:	d007      	beq.n	8003070 <HAL_GPIO_Init+0xd8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003064:	2b11      	cmp	r3, #17
 8003066:	d003      	beq.n	8003070 <HAL_GPIO_Init+0xd8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	2b12      	cmp	r3, #18
 800306e:	d12f      	bne.n	80030d0 <HAL_GPIO_Init+0x138>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	461a      	mov	r2, r3
 800307c:	2303      	movs	r3, #3
 800307e:	4093      	lsls	r3, r2
 8003080:	43db      	mvns	r3, r3
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	4013      	ands	r3, r2
 8003086:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	0052      	lsls	r2, r2, #1
 8003090:	4093      	lsls	r3, r2
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	4313      	orrs	r3, r2
 8003096:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	2201      	movs	r2, #1
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	43db      	mvns	r3, r3
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	4013      	ands	r3, r2
 80030b2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f003 0310 	and.w	r3, r3, #16
 80030bc:	091a      	lsrs	r2, r3, #4
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	461a      	mov	r2, r3
 80030dc:	2303      	movs	r3, #3
 80030de:	4093      	lsls	r3, r2
 80030e0:	43db      	mvns	r3, r3
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	4013      	ands	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	0052      	lsls	r2, r2, #1
 80030f0:	4093      	lsls	r3, r2
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003106:	2b00      	cmp	r3, #0
 8003108:	f000 809a 	beq.w	8003240 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800310c:	4a54      	ldr	r2, [pc, #336]	; (8003260 <HAL_GPIO_Init+0x2c8>)
 800310e:	4b54      	ldr	r3, [pc, #336]	; (8003260 <HAL_GPIO_Init+0x2c8>)
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	f043 0301 	orr.w	r3, r3, #1
 8003116:	6193      	str	r3, [r2, #24]
 8003118:	4b51      	ldr	r3, [pc, #324]	; (8003260 <HAL_GPIO_Init+0x2c8>)
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	60bb      	str	r3, [r7, #8]
 8003122:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8003124:	4a4f      	ldr	r2, [pc, #316]	; (8003264 <HAL_GPIO_Init+0x2cc>)
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	089b      	lsrs	r3, r3, #2
 800312a:	3302      	adds	r3, #2
 800312c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003130:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	f003 0303 	and.w	r3, r3, #3
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	461a      	mov	r2, r3
 800313c:	230f      	movs	r3, #15
 800313e:	4093      	lsls	r3, r2
 8003140:	43db      	mvns	r3, r3
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	4013      	ands	r3, r2
 8003146:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800314e:	d013      	beq.n	8003178 <HAL_GPIO_Init+0x1e0>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a45      	ldr	r2, [pc, #276]	; (8003268 <HAL_GPIO_Init+0x2d0>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d00d      	beq.n	8003174 <HAL_GPIO_Init+0x1dc>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a44      	ldr	r2, [pc, #272]	; (800326c <HAL_GPIO_Init+0x2d4>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d007      	beq.n	8003170 <HAL_GPIO_Init+0x1d8>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a43      	ldr	r2, [pc, #268]	; (8003270 <HAL_GPIO_Init+0x2d8>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d101      	bne.n	800316c <HAL_GPIO_Init+0x1d4>
 8003168:	2303      	movs	r3, #3
 800316a:	e006      	b.n	800317a <HAL_GPIO_Init+0x1e2>
 800316c:	2305      	movs	r3, #5
 800316e:	e004      	b.n	800317a <HAL_GPIO_Init+0x1e2>
 8003170:	2302      	movs	r3, #2
 8003172:	e002      	b.n	800317a <HAL_GPIO_Init+0x1e2>
 8003174:	2301      	movs	r3, #1
 8003176:	e000      	b.n	800317a <HAL_GPIO_Init+0x1e2>
 8003178:	2300      	movs	r3, #0
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	f002 0203 	and.w	r2, r2, #3
 8003180:	0092      	lsls	r2, r2, #2
 8003182:	4093      	lsls	r3, r2
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	4313      	orrs	r3, r2
 8003188:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800318a:	4936      	ldr	r1, [pc, #216]	; (8003264 <HAL_GPIO_Init+0x2cc>)
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	089b      	lsrs	r3, r3, #2
 8003190:	3302      	adds	r3, #2
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003198:	4b36      	ldr	r3, [pc, #216]	; (8003274 <HAL_GPIO_Init+0x2dc>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	43db      	mvns	r3, r3
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	4013      	ands	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d003      	beq.n	80031bc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80031bc:	4a2d      	ldr	r2, [pc, #180]	; (8003274 <HAL_GPIO_Init+0x2dc>)
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80031c2:	4b2c      	ldr	r3, [pc, #176]	; (8003274 <HAL_GPIO_Init+0x2dc>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	43db      	mvns	r3, r3
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	4013      	ands	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80031e6:	4a23      	ldr	r2, [pc, #140]	; (8003274 <HAL_GPIO_Init+0x2dc>)
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031ec:	4b21      	ldr	r3, [pc, #132]	; (8003274 <HAL_GPIO_Init+0x2dc>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	43db      	mvns	r3, r3
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	4013      	ands	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d003      	beq.n	8003210 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	4313      	orrs	r3, r2
 800320e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003210:	4a18      	ldr	r2, [pc, #96]	; (8003274 <HAL_GPIO_Init+0x2dc>)
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003216:	4b17      	ldr	r3, [pc, #92]	; (8003274 <HAL_GPIO_Init+0x2dc>)
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	43db      	mvns	r3, r3
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	4013      	ands	r3, r2
 8003224:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d003      	beq.n	800323a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	4313      	orrs	r3, r2
 8003238:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800323a:	4a0e      	ldr	r2, [pc, #56]	; (8003274 <HAL_GPIO_Init+0x2dc>)
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	3301      	adds	r3, #1
 8003244:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	fa22 f303 	lsr.w	r3, r2, r3
 8003250:	2b00      	cmp	r3, #0
 8003252:	f47f aead 	bne.w	8002fb0 <HAL_GPIO_Init+0x18>
      }
    }
    
    position++;
  }
}
 8003256:	371c      	adds	r7, #28
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr
 8003260:	40021000 	.word	0x40021000
 8003264:	40010000 	.word	0x40010000
 8003268:	48000400 	.word	0x48000400
 800326c:	48000800 	.word	0x48000800
 8003270:	48000c00 	.word	0x48000c00
 8003274:	40010400 	.word	0x40010400

08003278 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	460b      	mov	r3, r1
 8003282:	807b      	strh	r3, [r7, #2]
 8003284:	4613      	mov	r3, r2
 8003286:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003288:	787b      	ldrb	r3, [r7, #1]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800328e:	887a      	ldrh	r2, [r7, #2]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	619a      	str	r2, [r3, #24]
 8003294:	e002      	b.n	800329c <HAL_GPIO_WritePin+0x24>
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003296:	887a      	ldrh	r2, [r7, #2]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop

080032a8 <HAL_PWR_EnableBkUpAccess>:
  * @note  If the HSE divided by 32 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 80032ac:	4a04      	ldr	r2, [pc, #16]	; (80032c0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80032ae:	4b04      	ldr	r3, [pc, #16]	; (80032c0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032b6:	6013      	str	r3, [r2, #0]
}
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr
 80032c0:	40007000 	.word	0x40007000

080032c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e043      	b.n	800335e <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d106      	bne.n	80032f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7fc ffbc 	bl	8000268 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2224      	movs	r2, #36	; 0x24
 80032f4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	6812      	ldr	r2, [r2, #0]
 8003300:	6812      	ldr	r2, [r2, #0]
 8003302:	f022 0201 	bic.w	r2, r2, #1
 8003306:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 f82d 	bl	8003368 <UART_SetConfig>
 800330e:	4603      	mov	r3, r0
 8003310:	2b01      	cmp	r3, #1
 8003312:	d101      	bne.n	8003318 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e022      	b.n	800335e <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331c:	2b00      	cmp	r3, #0
 800331e:	d002      	beq.n	8003326 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 f985 	bl	8003630 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6812      	ldr	r2, [r2, #0]
 800332e:	6852      	ldr	r2, [r2, #4]
 8003330:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003334:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	6812      	ldr	r2, [r2, #0]
 800333e:	6892      	ldr	r2, [r2, #8]
 8003340:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003344:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	6812      	ldr	r2, [r2, #0]
 800334e:	6812      	ldr	r2, [r2, #0]
 8003350:	f042 0201 	orr.w	r2, r2, #1
 8003354:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 fa0c 	bl	8003774 <UART_CheckIdleState>
 800335c:	4603      	mov	r3, r0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop

08003368 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003368:	b590      	push	{r4, r7, lr}
 800336a:	b087      	sub	sp, #28
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8003370:	2300      	movs	r3, #0
 8003372:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8003374:	2310      	movs	r3, #16
 8003376:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8003378:	2300      	movs	r3, #0
 800337a:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 800337c:	2300      	movs	r3, #0
 800337e:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003380:	2300      	movs	r3, #0
 8003382:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	431a      	orrs	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	431a      	orrs	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	69db      	ldr	r3, [r3, #28]
 8003398:	4313      	orrs	r3, r2
 800339a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6819      	ldr	r1, [r3, #0]
 80033a6:	4b9d      	ldr	r3, [pc, #628]	; (800361c <UART_SetConfig+0x2b4>)
 80033a8:	400b      	ands	r3, r1
 80033aa:	68f9      	ldr	r1, [r7, #12]
 80033ac:	430b      	orrs	r3, r1
 80033ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	6812      	ldr	r2, [r2, #0]
 80033b8:	6852      	ldr	r2, [r2, #4]
 80033ba:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	68d2      	ldr	r2, [r2, #12]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	699a      	ldr	r2, [r3, #24]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6812      	ldr	r2, [r2, #0]
 80033da:	6892      	ldr	r2, [r2, #8]
 80033dc:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	430a      	orrs	r2, r1
 80033e4:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a8d      	ldr	r2, [pc, #564]	; (8003620 <UART_SetConfig+0x2b8>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d121      	bne.n	8003434 <UART_SetConfig+0xcc>
 80033f0:	4b8c      	ldr	r3, [pc, #560]	; (8003624 <UART_SetConfig+0x2bc>)
 80033f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f4:	f003 0303 	and.w	r3, r3, #3
 80033f8:	2b03      	cmp	r3, #3
 80033fa:	d817      	bhi.n	800342c <UART_SetConfig+0xc4>
 80033fc:	a201      	add	r2, pc, #4	; (adr r2, 8003404 <UART_SetConfig+0x9c>)
 80033fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003402:	bf00      	nop
 8003404:	08003415 	.word	0x08003415
 8003408:	08003421 	.word	0x08003421
 800340c:	08003427 	.word	0x08003427
 8003410:	0800341b 	.word	0x0800341b
 8003414:	2300      	movs	r3, #0
 8003416:	75fb      	strb	r3, [r7, #23]
 8003418:	e00a      	b.n	8003430 <UART_SetConfig+0xc8>
 800341a:	2302      	movs	r3, #2
 800341c:	75fb      	strb	r3, [r7, #23]
 800341e:	e007      	b.n	8003430 <UART_SetConfig+0xc8>
 8003420:	2304      	movs	r3, #4
 8003422:	75fb      	strb	r3, [r7, #23]
 8003424:	e004      	b.n	8003430 <UART_SetConfig+0xc8>
 8003426:	2308      	movs	r3, #8
 8003428:	75fb      	strb	r3, [r7, #23]
 800342a:	e001      	b.n	8003430 <UART_SetConfig+0xc8>
 800342c:	2310      	movs	r3, #16
 800342e:	75fb      	strb	r3, [r7, #23]
 8003430:	bf00      	nop
 8003432:	e011      	b.n	8003458 <UART_SetConfig+0xf0>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a7b      	ldr	r2, [pc, #492]	; (8003628 <UART_SetConfig+0x2c0>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d102      	bne.n	8003444 <UART_SetConfig+0xdc>
 800343e:	2300      	movs	r3, #0
 8003440:	75fb      	strb	r3, [r7, #23]
 8003442:	e009      	b.n	8003458 <UART_SetConfig+0xf0>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a78      	ldr	r2, [pc, #480]	; (800362c <UART_SetConfig+0x2c4>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d102      	bne.n	8003454 <UART_SetConfig+0xec>
 800344e:	2300      	movs	r3, #0
 8003450:	75fb      	strb	r3, [r7, #23]
 8003452:	e001      	b.n	8003458 <UART_SetConfig+0xf0>
 8003454:	2310      	movs	r3, #16
 8003456:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	69db      	ldr	r3, [r3, #28]
 800345c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003460:	d16e      	bne.n	8003540 <UART_SetConfig+0x1d8>
  {
    switch (clocksource)
 8003462:	7dfb      	ldrb	r3, [r7, #23]
 8003464:	2b08      	cmp	r3, #8
 8003466:	d857      	bhi.n	8003518 <UART_SetConfig+0x1b0>
 8003468:	a201      	add	r2, pc, #4	; (adr r2, 8003470 <UART_SetConfig+0x108>)
 800346a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800346e:	bf00      	nop
 8003470:	08003495 	.word	0x08003495
 8003474:	080034b1 	.word	0x080034b1
 8003478:	080034cd 	.word	0x080034cd
 800347c:	08003519 	.word	0x08003519
 8003480:	080034e7 	.word	0x080034e7
 8003484:	08003519 	.word	0x08003519
 8003488:	08003519 	.word	0x08003519
 800348c:	08003519 	.word	0x08003519
 8003490:	08003503 	.word	0x08003503
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003494:	f7ff fd0c 	bl	8002eb0 <HAL_RCC_GetPCLK1Freq>
 8003498:	4603      	mov	r3, r0
 800349a:	005a      	lsls	r2, r3, #1
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	085b      	lsrs	r3, r3, #1
 80034a2:	441a      	add	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ac:	82bb      	strh	r3, [r7, #20]
        break;
 80034ae:	e036      	b.n	800351e <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80034b0:	f7ff fd20 	bl	8002ef4 <HAL_RCC_GetPCLK2Freq>
 80034b4:	4603      	mov	r3, r0
 80034b6:	005a      	lsls	r2, r3, #1
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	085b      	lsrs	r3, r3, #1
 80034be:	441a      	add	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c8:	82bb      	strh	r3, [r7, #20]
        break;
 80034ca:	e028      	b.n	800351e <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	085b      	lsrs	r3, r3, #1
 80034d2:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80034d6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	6852      	ldr	r2, [r2, #4]
 80034de:	fbb3 f3f2 	udiv	r3, r3, r2
 80034e2:	82bb      	strh	r3, [r7, #20]
        break;
 80034e4:	e01b      	b.n	800351e <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80034e6:	f7ff fc6d 	bl	8002dc4 <HAL_RCC_GetSysClockFreq>
 80034ea:	4603      	mov	r3, r0
 80034ec:	005a      	lsls	r2, r3, #1
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	085b      	lsrs	r3, r3, #1
 80034f4:	441a      	add	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80034fe:	82bb      	strh	r3, [r7, #20]
        break;
 8003500:	e00d      	b.n	800351e <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	085b      	lsrs	r3, r3, #1
 8003508:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	fbb2 f3f3 	udiv	r3, r2, r3
 8003514:	82bb      	strh	r3, [r7, #20]
        break;
 8003516:	e002      	b.n	800351e <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	74fb      	strb	r3, [r7, #19]
        break;
 800351c:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 800351e:	8abb      	ldrh	r3, [r7, #20]
 8003520:	f023 030f 	bic.w	r3, r3, #15
 8003524:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003526:	8abb      	ldrh	r3, [r7, #20]
 8003528:	f003 030f 	and.w	r3, r3, #15
 800352c:	105b      	asrs	r3, r3, #1
 800352e:	b29a      	uxth	r2, r3
 8003530:	897b      	ldrh	r3, [r7, #10]
 8003532:	4313      	orrs	r3, r2
 8003534:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	897a      	ldrh	r2, [r7, #10]
 800353c:	60da      	str	r2, [r3, #12]
 800353e:	e068      	b.n	8003612 <UART_SetConfig+0x2aa>
  }
  else
  {
    switch (clocksource)
 8003540:	7dfb      	ldrb	r3, [r7, #23]
 8003542:	2b08      	cmp	r3, #8
 8003544:	d862      	bhi.n	800360c <UART_SetConfig+0x2a4>
 8003546:	a201      	add	r2, pc, #4	; (adr r2, 800354c <UART_SetConfig+0x1e4>)
 8003548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800354c:	08003571 	.word	0x08003571
 8003550:	08003591 	.word	0x08003591
 8003554:	080035b1 	.word	0x080035b1
 8003558:	0800360d 	.word	0x0800360d
 800355c:	080035d1 	.word	0x080035d1
 8003560:	0800360d 	.word	0x0800360d
 8003564:	0800360d 	.word	0x0800360d
 8003568:	0800360d 	.word	0x0800360d
 800356c:	080035f1 	.word	0x080035f1
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681c      	ldr	r4, [r3, #0]
 8003574:	f7ff fc9c 	bl	8002eb0 <HAL_RCC_GetPCLK1Freq>
 8003578:	4602      	mov	r2, r0
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	085b      	lsrs	r3, r3, #1
 8003580:	441a      	add	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	fbb2 f3f3 	udiv	r3, r2, r3
 800358a:	b29b      	uxth	r3, r3
 800358c:	60e3      	str	r3, [r4, #12]
        break;
 800358e:	e040      	b.n	8003612 <UART_SetConfig+0x2aa>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681c      	ldr	r4, [r3, #0]
 8003594:	f7ff fcae 	bl	8002ef4 <HAL_RCC_GetPCLK2Freq>
 8003598:	4602      	mov	r2, r0
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	085b      	lsrs	r3, r3, #1
 80035a0:	441a      	add	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	60e3      	str	r3, [r4, #12]
        break;
 80035ae:	e030      	b.n	8003612 <UART_SetConfig+0x2aa>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	085b      	lsrs	r3, r3, #1
 80035ba:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80035be:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80035c2:	6879      	ldr	r1, [r7, #4]
 80035c4:	6849      	ldr	r1, [r1, #4]
 80035c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	60d3      	str	r3, [r2, #12]
        break;
 80035ce:	e020      	b.n	8003612 <UART_SetConfig+0x2aa>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681c      	ldr	r4, [r3, #0]
 80035d4:	f7ff fbf6 	bl	8002dc4 <HAL_RCC_GetSysClockFreq>
 80035d8:	4602      	mov	r2, r0
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	085b      	lsrs	r3, r3, #1
 80035e0:	441a      	add	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	60e3      	str	r3, [r4, #12]
        break;
 80035ee:	e010      	b.n	8003612 <UART_SetConfig+0x2aa>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6852      	ldr	r2, [r2, #4]
 80035f8:	0852      	lsrs	r2, r2, #1
 80035fa:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	6852      	ldr	r2, [r2, #4]
 8003602:	fbb1 f2f2 	udiv	r2, r1, r2
 8003606:	b292      	uxth	r2, r2
 8003608:	60da      	str	r2, [r3, #12]
        break;
 800360a:	e002      	b.n	8003612 <UART_SetConfig+0x2aa>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	74fb      	strb	r3, [r7, #19]
        break;
 8003610:	bf00      	nop
    }
  }

  return ret;
 8003612:	7cfb      	ldrb	r3, [r7, #19]

}
 8003614:	4618      	mov	r0, r3
 8003616:	371c      	adds	r7, #28
 8003618:	46bd      	mov	sp, r7
 800361a:	bd90      	pop	{r4, r7, pc}
 800361c:	efff69f3 	.word	0xefff69f3
 8003620:	40013800 	.word	0x40013800
 8003624:	40021000 	.word	0x40021000
 8003628:	40004400 	.word	0x40004400
 800362c:	40004800 	.word	0x40004800

08003630 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00a      	beq.n	800365a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	6812      	ldr	r2, [r2, #0]
 800364c:	6852      	ldr	r2, [r2, #4]
 800364e:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003656:	430a      	orrs	r2, r1
 8003658:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00a      	beq.n	800367c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6812      	ldr	r2, [r2, #0]
 800366e:	6852      	ldr	r2, [r2, #4]
 8003670:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003678:	430a      	orrs	r2, r1
 800367a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00a      	beq.n	800369e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	6812      	ldr	r2, [r2, #0]
 8003690:	6852      	ldr	r2, [r2, #4]
 8003692:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800369a:	430a      	orrs	r2, r1
 800369c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a2:	f003 0308 	and.w	r3, r3, #8
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00a      	beq.n	80036c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6812      	ldr	r2, [r2, #0]
 80036b2:	6852      	ldr	r2, [r2, #4]
 80036b4:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80036bc:	430a      	orrs	r2, r1
 80036be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	f003 0310 	and.w	r3, r3, #16
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00a      	beq.n	80036e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	6812      	ldr	r2, [r2, #0]
 80036d4:	6892      	ldr	r2, [r2, #8]
 80036d6:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036de:	430a      	orrs	r2, r1
 80036e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e6:	f003 0320 	and.w	r3, r3, #32
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00a      	beq.n	8003704 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	6812      	ldr	r2, [r2, #0]
 80036f6:	6892      	ldr	r2, [r2, #8]
 80036f8:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003700:	430a      	orrs	r2, r1
 8003702:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800370c:	2b00      	cmp	r3, #0
 800370e:	d01a      	beq.n	8003746 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	6812      	ldr	r2, [r2, #0]
 8003718:	6852      	ldr	r2, [r2, #4]
 800371a:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003722:	430a      	orrs	r2, r1
 8003724:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800372e:	d10a      	bne.n	8003746 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	6812      	ldr	r2, [r2, #0]
 8003738:	6852      	ldr	r2, [r2, #4]
 800373a:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003742:	430a      	orrs	r2, r1
 8003744:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00a      	beq.n	8003768 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	6812      	ldr	r2, [r2, #0]
 800375a:	6852      	ldr	r2, [r2, #4]
 800375c:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003764:	430a      	orrs	r2, r1
 8003766:	605a      	str	r2, [r3, #4]
  }
}
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop

08003774 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af02      	add	r7, sp, #8
 800377a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800377c:	2300      	movs	r3, #0
 800377e:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003786:	f7fd fef7 	bl	8001578 <HAL_GetTick>
 800378a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0308 	and.w	r3, r3, #8
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00e      	beq.n	80037b8 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800379a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80037a6:	2200      	movs	r2, #0
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f000 f82d 	bl	8003808 <UART_WaitOnFlagUntilTimeout>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e022      	b.n	80037fe <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0304 	and.w	r3, r3, #4
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00e      	beq.n	80037e4 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037ca:	9300      	str	r3, [sp, #0]
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80037d2:	2200      	movs	r2, #0
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f000 f817 	bl	8003808 <UART_WaitOnFlagUntilTimeout>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e00c      	b.n	80037fe <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2220      	movs	r2, #32
 80037e8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2220      	movs	r2, #32
 80037f0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop

08003808 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	603b      	str	r3, [r7, #0]
 8003814:	4613      	mov	r3, r2
 8003816:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003818:	e02c      	b.n	8003874 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003820:	d028      	beq.n	8003874 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d007      	beq.n	8003838 <UART_WaitOnFlagUntilTimeout+0x30>
 8003828:	f7fd fea6 	bl	8001578 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	1ad2      	subs	r2, r2, r3
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	429a      	cmp	r2, r3
 8003836:	d91d      	bls.n	8003874 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	6812      	ldr	r2, [r2, #0]
 8003840:	6812      	ldr	r2, [r2, #0]
 8003842:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003846:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	6812      	ldr	r2, [r2, #0]
 8003850:	6892      	ldr	r2, [r2, #8]
 8003852:	f022 0201 	bic.w	r2, r2, #1
 8003856:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2220      	movs	r2, #32
 800385c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2220      	movs	r2, #32
 8003864:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e00f      	b.n	8003894 <UART_WaitOnFlagUntilTimeout+0x8c>
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	69da      	ldr	r2, [r3, #28]
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	401a      	ands	r2, r3
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	429a      	cmp	r2, r3
 8003882:	bf0c      	ite	eq
 8003884:	2301      	moveq	r3, #1
 8003886:	2300      	movne	r3, #0
 8003888:	b2db      	uxtb	r3, r3
 800388a:	461a      	mov	r2, r3
 800388c:	79fb      	ldrb	r3, [r7, #7]
 800388e:	429a      	cmp	r2, r3
 8003890:	d0c3      	beq.n	800381a <UART_WaitOnFlagUntilTimeout+0x12>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e01d      	b.n	80038ea <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d106      	bne.n	80038c8 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f816 	bl	80038f4 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2202      	movs	r2, #2
 80038cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	3304      	adds	r3, #4
 80038d8:	4610      	mov	r0, r2
 80038da:	4619      	mov	r1, r3
 80038dc:	f000 f976 	bl	8003bcc <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop

080038f4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop

08003908 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6812      	ldr	r2, [r2, #0]
 8003918:	68d2      	ldr	r2, [r2, #12]
 800391a:	f042 0201 	orr.w	r2, r2, #1
 800391e:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6812      	ldr	r2, [r2, #0]
 8003928:	6812      	ldr	r2, [r2, #0]
 800392a:	f042 0201 	orr.w	r2, r2, #1
 800392e:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop

08003940 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d022      	beq.n	800399c <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d01b      	beq.n	800399c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f06f 0202 	mvn.w	r2, #2
 800396c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2201      	movs	r2, #1
 8003972:	771a      	strb	r2, [r3, #28]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	f003 0303 	and.w	r3, r3, #3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d003      	beq.n	800398a <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f904 	bl	8003b90 <HAL_TIM_IC_CaptureCallback>
 8003988:	e005      	b.n	8003996 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 f8f6 	bl	8003b7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 f907 	bl	8003ba4 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	f003 0304 	and.w	r3, r3, #4
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d022      	beq.n	80039f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	f003 0304 	and.w	r3, r3, #4
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d01b      	beq.n	80039f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f06f 0204 	mvn.w	r2, #4
 80039c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2202      	movs	r2, #2
 80039c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f8da 	bl	8003b90 <HAL_TIM_IC_CaptureCallback>
 80039dc:	e005      	b.n	80039ea <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 f8cc 	bl	8003b7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 f8dd 	bl	8003ba4 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	f003 0308 	and.w	r3, r3, #8
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d022      	beq.n	8003a44 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	f003 0308 	and.w	r3, r3, #8
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d01b      	beq.n	8003a44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f06f 0208 	mvn.w	r2, #8
 8003a14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2204      	movs	r2, #4
 8003a1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	69db      	ldr	r3, [r3, #28]
 8003a22:	f003 0303 	and.w	r3, r3, #3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f8b0 	bl	8003b90 <HAL_TIM_IC_CaptureCallback>
 8003a30:	e005      	b.n	8003a3e <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 f8a2 	bl	8003b7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f000 f8b3 	bl	8003ba4 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	f003 0310 	and.w	r3, r3, #16
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d022      	beq.n	8003a98 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	f003 0310 	and.w	r3, r3, #16
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d01b      	beq.n	8003a98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f06f 0210 	mvn.w	r2, #16
 8003a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2208      	movs	r2, #8
 8003a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f886 	bl	8003b90 <HAL_TIM_IC_CaptureCallback>
 8003a84:	e005      	b.n	8003a92 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f878 	bl	8003b7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 f889 	bl	8003ba4 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00e      	beq.n	8003ac4 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d007      	beq.n	8003ac4 <HAL_TIM_IRQHandler+0x184>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f06f 0201 	mvn.w	r2, #1
 8003abc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7fc ff5a 	bl	8000978 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00e      	beq.n	8003af0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d007      	beq.n	8003af0 <HAL_TIM_IRQHandler+0x1b0>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ae8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7fd fd0c 	bl	8001508 <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00e      	beq.n	8003b1c <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d007      	beq.n	8003b1c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003b14:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f7fd fd00 	bl	800151c <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00e      	beq.n	8003b48 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d007      	beq.n	8003b48 <HAL_TIM_IRQHandler+0x208>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b40:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f838 	bl	8003bb8 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	f003 0320 	and.w	r3, r3, #32
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00e      	beq.n	8003b74 <HAL_TIM_IRQHandler+0x234>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	f003 0320 	and.w	r3, r3, #32
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d007      	beq.n	8003b74 <HAL_TIM_IRQHandler+0x234>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f06f 0220 	mvn.w	r2, #32
 8003b6c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7fd fcc0 	bl	80014f4 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop

08003b7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop

08003b90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop

08003ba4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop

08003bb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop

08003bcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a2d      	ldr	r2, [pc, #180]	; (8003c98 <TIM_Base_SetConfig+0xcc>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d003      	beq.n	8003bf0 <TIM_Base_SetConfig+0x24>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bee:	d108      	bne.n	8003c02 <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a24      	ldr	r2, [pc, #144]	; (8003c98 <TIM_Base_SetConfig+0xcc>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d00f      	beq.n	8003c2a <TIM_Base_SetConfig+0x5e>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c10:	d00b      	beq.n	8003c2a <TIM_Base_SetConfig+0x5e>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a21      	ldr	r2, [pc, #132]	; (8003c9c <TIM_Base_SetConfig+0xd0>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d007      	beq.n	8003c2a <TIM_Base_SetConfig+0x5e>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a20      	ldr	r2, [pc, #128]	; (8003ca0 <TIM_Base_SetConfig+0xd4>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d003      	beq.n	8003c2a <TIM_Base_SetConfig+0x5e>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a1f      	ldr	r2, [pc, #124]	; (8003ca4 <TIM_Base_SetConfig+0xd8>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d108      	bne.n	8003c3c <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	689a      	ldr	r2, [r3, #8]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	629a      	str	r2, [r3, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a0d      	ldr	r2, [pc, #52]	; (8003c98 <TIM_Base_SetConfig+0xcc>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d00b      	beq.n	8003c80 <TIM_Base_SetConfig+0xb4>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a0c      	ldr	r2, [pc, #48]	; (8003c9c <TIM_Base_SetConfig+0xd0>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d007      	beq.n	8003c80 <TIM_Base_SetConfig+0xb4>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a0b      	ldr	r2, [pc, #44]	; (8003ca0 <TIM_Base_SetConfig+0xd4>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d003      	beq.n	8003c80 <TIM_Base_SetConfig+0xb4>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a0a      	ldr	r2, [pc, #40]	; (8003ca4 <TIM_Base_SetConfig+0xd8>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d103      	bne.n	8003c88 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	691a      	ldr	r2, [r3, #16]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	615a      	str	r2, [r3, #20]
}
 8003c8e:	3714      	adds	r7, #20
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr
 8003c98:	40012c00 	.word	0x40012c00
 8003c9c:	40014000 	.word	0x40014000
 8003ca0:	40014400 	.word	0x40014400
 8003ca4:	40014800 	.word	0x40014800

08003ca8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b092      	sub	sp, #72	; 0x48
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f000 80f6 	beq.w	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ccc:	4b60      	ldr	r3, [pc, #384]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003cce:	69db      	ldr	r3, [r3, #28]
 8003cd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d10e      	bne.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cd8:	4a5d      	ldr	r2, [pc, #372]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003cda:	4b5d      	ldr	r3, [pc, #372]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ce2:	61d3      	str	r3, [r2, #28]
 8003ce4:	4b5a      	ldr	r3, [pc, #360]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003ce6:	69db      	ldr	r3, [r3, #28]
 8003ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cec:	60bb      	str	r3, [r7, #8]
 8003cee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cf6:	4b57      	ldr	r3, [pc, #348]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d118      	bne.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d02:	4a54      	ldr	r2, [pc, #336]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d04:	4b53      	ldr	r3, [pc, #332]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d0c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d0e:	f7fd fc33 	bl	8001578 <HAL_GetTick>
 8003d12:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d14:	e008      	b.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d16:	f7fd fc2f 	bl	8001578 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b64      	cmp	r3, #100	; 0x64
 8003d22:	d901      	bls.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e16a      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x356>
      SET_BIT(PWR->CR, PWR_CR_DBP);
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d28:	4b4a      	ldr	r3, [pc, #296]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0f0      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d34:	4b46      	ldr	r3, [pc, #280]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003d36:	6a1b      	ldr	r3, [r3, #32]
 8003d38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 80a3 	beq.w	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d50:	429a      	cmp	r2, r3
 8003d52:	f000 809b 	beq.w	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d56:	4b3e      	ldr	r3, [pc, #248]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d64:	63bb      	str	r3, [r7, #56]	; 0x38
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d68:	fa93 f3a3 	rbit	r3, r3
 8003d6c:	637b      	str	r3, [r7, #52]	; 0x34
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d70:	fab3 f383 	clz	r3, r3
 8003d74:	461a      	mov	r2, r3
 8003d76:	4b38      	ldr	r3, [pc, #224]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003d78:	4413      	add	r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	2301      	movs	r3, #1
 8003d80:	6013      	str	r3, [r2, #0]
 8003d82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d86:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d8a:	fa93 f3a3 	rbit	r3, r3
 8003d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d92:	fab3 f383 	clz	r3, r3
 8003d96:	461a      	mov	r2, r3
 8003d98:	4b2f      	ldr	r3, [pc, #188]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003d9a:	4413      	add	r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	461a      	mov	r2, r3
 8003da0:	2300      	movs	r3, #0
 8003da2:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003da4:	4a2a      	ldr	r2, [pc, #168]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003da8:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d06b      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db4:	f7fd fbe0 	bl	8001578 <HAL_GetTick>
 8003db8:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dba:	e00a      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dbc:	f7fd fbdc 	bl	8001578 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e115      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x356>
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	62bb      	str	r3, [r7, #40]	; 0x28
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd8:	fa93 f3a3 	rbit	r3, r3
 8003ddc:	627b      	str	r3, [r7, #36]	; 0x24
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de0:	fab3 f383 	clz	r3, r3
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	095b      	lsrs	r3, r3, #5
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d102      	bne.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003df6:	4b16      	ldr	r3, [pc, #88]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	e031      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	623b      	str	r3, [r7, #32]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e00:	6a3b      	ldr	r3, [r7, #32]
 8003e02:	fa93 f3a3 	rbit	r3, r3
 8003e06:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	fab3 f383 	clz	r3, r3
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	095b      	lsrs	r3, r3, #5
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d102      	bne.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x17e>
 8003e20:	4b0b      	ldr	r3, [pc, #44]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	e01c      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003e26:	2302      	movs	r3, #2
 8003e28:	61bb      	str	r3, [r7, #24]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	fa93 f3a3 	rbit	r3, r3
 8003e30:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	fab3 f383 	clz	r3, r3
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	095b      	lsrs	r3, r3, #5
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b04      	cmp	r3, #4
 8003e48:	d108      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003e4a:	4b01      	ldr	r3, [pc, #4]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	e007      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003e50:	40021000 	.word	0x40021000
 8003e54:	40007000 	.word	0x40007000
 8003e58:	10908100 	.word	0x10908100
 8003e5c:	4b6a      	ldr	r3, [pc, #424]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e60:	2202      	movs	r2, #2
 8003e62:	613a      	str	r2, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	fa92 f2a2 	rbit	r2, r2
 8003e6a:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	fab2 f282 	clz	r2, r2
 8003e72:	b2d2      	uxtb	r2, r2
 8003e74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e78:	b2d2      	uxtb	r2, r2
 8003e7a:	b2d2      	uxtb	r2, r2
 8003e7c:	f002 021f 	and.w	r2, r2, #31
 8003e80:	2101      	movs	r1, #1
 8003e82:	fa01 f202 	lsl.w	r2, r1, r2
 8003e86:	4013      	ands	r3, r2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d097      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x114>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003e8c:	495e      	ldr	r1, [pc, #376]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003e8e:	4b5e      	ldr	r3, [pc, #376]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e9e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d105      	bne.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ea6:	4a58      	ldr	r2, [pc, #352]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003ea8:	4b57      	ldr	r3, [pc, #348]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003eaa:	69db      	ldr	r3, [r3, #28]
 8003eac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eb0:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d008      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ebe:	4952      	ldr	r1, [pc, #328]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003ec0:	4b51      	ldr	r3, [pc, #324]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec4:	f023 0203 	bic.w	r2, r3, #3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0320 	and.w	r3, r3, #32
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d008      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003edc:	494a      	ldr	r1, [pc, #296]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003ede:	4b4a      	ldr	r3, [pc, #296]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee2:	f023 0210 	bic.w	r2, r3, #16
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d008      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x264>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003efa:	4943      	ldr	r1, [pc, #268]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003efc:	4b42      	ldr	r3, [pc, #264]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d008      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x282>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f18:	493b      	ldr	r1, [pc, #236]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003f1a:	4b3b      	ldr	r3, [pc, #236]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1e:	f023 0220 	bic.w	r2, r3, #32
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d008      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f36:	4934      	ldr	r1, [pc, #208]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003f38:	4b33      	ldr	r3, [pc, #204]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d008      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f54:	492c      	ldr	r1, [pc, #176]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003f56:	4b2c      	ldr	r3, [pc, #176]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d008      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003f72:	4925      	ldr	r1, [pc, #148]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003f74:	4b24      	ldr	r3, [pc, #144]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f78:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d008      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003f90:	491d      	ldr	r1, [pc, #116]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003f92:	4b1d      	ldr	r3, [pc, #116]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d008      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x318>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003fae:	4916      	ldr	r1, [pc, #88]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003fb0:	4b15      	ldr	r3, [pc, #84]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d008      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003fcc:	490e      	ldr	r1, [pc, #56]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003fce:	4b0e      	ldr	r3, [pc, #56]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d008      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003fea:	4907      	ldr	r1, [pc, #28]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003fec:	4b06      	ldr	r3, [pc, #24]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3748      	adds	r7, #72	; 0x48
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	40021000 	.word	0x40021000

0800400c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e082      	b.n	8004124 <HAL_SPI_Init+0x118>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b00      	cmp	r3, #0
 800402e:	d106      	bne.n	800403e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f7fc fce7 	bl	8000a0c <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2202      	movs	r2, #2
 8004042:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	6812      	ldr	r2, [r2, #0]
 800404e:	6812      	ldr	r2, [r2, #0]
 8004050:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004054:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800405e:	d902      	bls.n	8004066 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004060:	2300      	movs	r3, #0
 8004062:	60fb      	str	r3, [r7, #12]
 8004064:	e002      	b.n	800406c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004066:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800406a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004074:	d007      	beq.n	8004086 <HAL_SPI_Init+0x7a>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800407e:	d002      	beq.n	8004086 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10b      	bne.n	80040a6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004096:	d903      	bls.n	80040a0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2202      	movs	r2, #2
 800409c:	631a      	str	r2, [r3, #48]	; 0x30
 800409e:	e002      	b.n	80040a6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	6851      	ldr	r1, [r2, #4]
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	6892      	ldr	r2, [r2, #8]
 80040b2:	4311      	orrs	r1, r2
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	6912      	ldr	r2, [r2, #16]
 80040b8:	4311      	orrs	r1, r2
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	6952      	ldr	r2, [r2, #20]
 80040be:	4311      	orrs	r1, r2
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	6992      	ldr	r2, [r2, #24]
 80040c4:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80040c8:	4311      	orrs	r1, r2
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	69d2      	ldr	r2, [r2, #28]
 80040ce:	4311      	orrs	r1, r2
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	6a12      	ldr	r2, [r2, #32]
 80040d4:	4311      	orrs	r1, r2
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80040da:	430a      	orrs	r2, r1
 80040dc:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	6992      	ldr	r2, [r2, #24]
 80040e6:	0c12      	lsrs	r2, r2, #16
 80040e8:	f002 0104 	and.w	r1, r2, #4
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040f0:	4311      	orrs	r1, r2
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80040f6:	4311      	orrs	r1, r2
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	68d2      	ldr	r2, [r2, #12]
 80040fc:	4311      	orrs	r1, r2
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	430a      	orrs	r2, r1
 8004102:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	6812      	ldr	r2, [r2, #0]
 800410c:	69d2      	ldr	r2, [r2, #28]
 800410e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004112:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3710      	adds	r7, #16
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b088      	sub	sp, #32
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	603b      	str	r3, [r7, #0]
 8004138:	4613      	mov	r3, r2
 800413a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 800413c:	2300      	movs	r3, #0
 800413e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004140:	2300      	movs	r3, #0
 8004142:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800414a:	2b01      	cmp	r3, #1
 800414c:	d101      	bne.n	8004152 <HAL_SPI_Transmit+0x26>
 800414e:	2302      	movs	r3, #2
 8004150:	e13e      	b.n	80043d0 <HAL_SPI_Transmit+0x2a4>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800415a:	f7fd fa0d 	bl	8001578 <HAL_GetTick>
 800415e:	61b8      	str	r0, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b01      	cmp	r3, #1
 800416a:	d002      	beq.n	8004172 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800416c:	2302      	movs	r3, #2
 800416e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004170:	e125      	b.n	80043be <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d002      	beq.n	800417e <HAL_SPI_Transmit+0x52>
 8004178:	88fb      	ldrh	r3, [r7, #6]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d102      	bne.n	8004184 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004182:	e11c      	b.n	80043be <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2203      	movs	r2, #3
 8004188:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	68ba      	ldr	r2, [r7, #8]
 8004196:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	88fa      	ldrh	r2, [r7, #6]
 800419c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	88fa      	ldrh	r2, [r7, #6]
 80041a2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041ce:	d107      	bne.n	80041e0 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	6812      	ldr	r2, [r2, #0]
 80041d8:	6812      	ldr	r2, [r2, #0]
 80041da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041de:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d107      	bne.n	80041fe <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	6812      	ldr	r2, [r2, #0]
 80041f6:	6812      	ldr	r2, [r2, #0]
 80041f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004206:	d947      	bls.n	8004298 <HAL_SPI_Transmit+0x16c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d004      	beq.n	800421a <HAL_SPI_Transmit+0xee>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004214:	b29b      	uxth	r3, r3
 8004216:	2b01      	cmp	r3, #1
 8004218:	d10e      	bne.n	8004238 <HAL_SPI_Transmit+0x10c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	8812      	ldrh	r2, [r2, #0]
 8004222:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	3302      	adds	r3, #2
 8004228:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800422e:	b29b      	uxth	r3, r3
 8004230:	3b01      	subs	r3, #1
 8004232:	b29a      	uxth	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004238:	e028      	b.n	800428c <HAL_SPI_Transmit+0x160>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00f      	beq.n	8004268 <HAL_SPI_Transmit+0x13c>
      {
        hspi->Instance->DR = *((uint16_t *)pData);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68ba      	ldr	r2, [r7, #8]
 800424e:	8812      	ldrh	r2, [r2, #0]
 8004250:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	3302      	adds	r3, #2
 8004256:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800425c:	b29b      	uxth	r3, r3
 800425e:	3b01      	subs	r3, #1
 8004260:	b29a      	uxth	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004266:	e011      	b.n	800428c <HAL_SPI_Transmit+0x160>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00b      	beq.n	8004286 <HAL_SPI_Transmit+0x15a>
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004274:	d00a      	beq.n	800428c <HAL_SPI_Transmit+0x160>
 8004276:	f7fd f97f 	bl	8001578 <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	1ad2      	subs	r2, r2, r3
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	429a      	cmp	r2, r3
 8004284:	d302      	bcc.n	800428c <HAL_SPI_Transmit+0x160>
        {
          errorcode = HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	77fb      	strb	r3, [r7, #31]
          goto error;
 800428a:	e098      	b.n	80043be <HAL_SPI_Transmit+0x292>
      hspi->Instance->DR = *((uint16_t *)pData);
      pData += sizeof(uint16_t);
      hspi->TxXferCount--;
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004290:	b29b      	uxth	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1d1      	bne.n	800423a <HAL_SPI_Transmit+0x10e>
 8004296:	e072      	b.n	800437e <HAL_SPI_Transmit+0x252>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d004      	beq.n	80042aa <HAL_SPI_Transmit+0x17e>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d124      	bne.n	80042f4 <HAL_SPI_Transmit+0x1c8>
    {
      if (hspi->TxXferCount > 1U)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d90f      	bls.n	80042d4 <HAL_SPI_Transmit+0x1a8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)pData);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68ba      	ldr	r2, [r7, #8]
 80042ba:	8812      	ldrh	r2, [r2, #0]
 80042bc:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	3302      	adds	r3, #2
 80042c2:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	3b02      	subs	r3, #2
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80042d2:	e00f      	b.n	80042f4 <HAL_SPI_Transmit+0x1c8>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f103 020c 	add.w	r2, r3, #12
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	1c59      	adds	r1, r3, #1
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	3b01      	subs	r3, #1
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80042f4:	e03e      	b.n	8004374 <HAL_SPI_Transmit+0x248>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b00      	cmp	r3, #0
 8004302:	d025      	beq.n	8004350 <HAL_SPI_Transmit+0x224>
      {
        if (hspi->TxXferCount > 1U)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004308:	b29b      	uxth	r3, r3
 800430a:	2b01      	cmp	r3, #1
 800430c:	d90f      	bls.n	800432e <HAL_SPI_Transmit+0x202>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)pData);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	8812      	ldrh	r2, [r2, #0]
 8004316:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	3302      	adds	r3, #2
 800431c:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004322:	b29b      	uxth	r3, r3
 8004324:	3b02      	subs	r3, #2
 8004326:	b29a      	uxth	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800432c:	e022      	b.n	8004374 <HAL_SPI_Transmit+0x248>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f103 020c 	add.w	r2, r3, #12
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	1c59      	adds	r1, r3, #1
 800433a:	60b9      	str	r1, [r7, #8]
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004344:	b29b      	uxth	r3, r3
 8004346:	3b01      	subs	r3, #1
 8004348:	b29a      	uxth	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800434e:	e011      	b.n	8004374 <HAL_SPI_Transmit+0x248>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00b      	beq.n	800436e <HAL_SPI_Transmit+0x242>
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800435c:	d00a      	beq.n	8004374 <HAL_SPI_Transmit+0x248>
 800435e:	f7fd f90b 	bl	8001578 <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	1ad2      	subs	r2, r2, r3
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	429a      	cmp	r2, r3
 800436c:	d302      	bcc.n	8004374 <HAL_SPI_Transmit+0x248>
        {
          errorcode = HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004372:	e024      	b.n	80043be <HAL_SPI_Transmit+0x292>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
        hspi->TxXferCount--;
      }
    }
    while (hspi->TxXferCount > 0U)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004378:	b29b      	uxth	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1bb      	bne.n	80042f6 <HAL_SPI_Transmit+0x1ca>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	6839      	ldr	r1, [r7, #0]
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	f000 f900 	bl	8004588 <SPI_EndRxTxTransaction>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d002      	beq.n	8004394 <HAL_SPI_Transmit+0x268>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2220      	movs	r2, #32
 8004392:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d10a      	bne.n	80043b2 <HAL_SPI_Transmit+0x286>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800439c:	2300      	movs	r3, #0
 800439e:	617b      	str	r3, [r7, #20]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	617b      	str	r3, [r7, #20]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	617b      	str	r3, [r7, #20]
 80043b0:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <HAL_SPI_Transmit+0x292>
  {
    errorcode = HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2201      	movs	r2, #1
 80043c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80043ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3720      	adds	r7, #32
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	607a      	str	r2, [r7, #4]
 80043e4:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043e6:	e04c      	b.n	8004482 <SPI_WaitFlagStateUntilTimeout+0xaa>
  {
    if (Timeout != HAL_MAX_DELAY)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043ee:	d048      	beq.n	8004482 <SPI_WaitFlagStateUntilTimeout+0xaa>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d007      	beq.n	8004406 <SPI_WaitFlagStateUntilTimeout+0x2e>
 80043f6:	f7fd f8bf 	bl	8001578 <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	1ad2      	subs	r2, r2, r3
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	429a      	cmp	r2, r3
 8004404:	d33d      	bcc.n	8004482 <SPI_WaitFlagStateUntilTimeout+0xaa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	6812      	ldr	r2, [r2, #0]
 800440e:	6852      	ldr	r2, [r2, #4]
 8004410:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004414:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800441e:	d111      	bne.n	8004444 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004428:	d004      	beq.n	8004434 <SPI_WaitFlagStateUntilTimeout+0x5c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004432:	d107      	bne.n	8004444 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	6812      	ldr	r2, [r2, #0]
 800443c:	6812      	ldr	r2, [r2, #0]
 800443e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004442:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004448:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800444c:	d10f      	bne.n	800446e <SPI_WaitFlagStateUntilTimeout+0x96>
        {
          SPI_RESET_CRC(hspi);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	6812      	ldr	r2, [r2, #0]
 8004456:	6812      	ldr	r2, [r2, #0]
 8004458:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800445c:	601a      	str	r2, [r3, #0]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	6812      	ldr	r2, [r2, #0]
 8004466:	6812      	ldr	r2, [r2, #0]
 8004468:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800446c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e00e      	b.n	80044a0 <SPI_WaitFlagStateUntilTimeout+0xc8>
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	401a      	ands	r2, r3
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	429a      	cmp	r2, r3
 8004490:	d101      	bne.n	8004496 <SPI_WaitFlagStateUntilTimeout+0xbe>
 8004492:	2201      	movs	r2, #1
 8004494:	e000      	b.n	8004498 <SPI_WaitFlagStateUntilTimeout+0xc0>
 8004496:	2200      	movs	r2, #0
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	429a      	cmp	r2, r3
 800449c:	d1a4      	bne.n	80043e8 <SPI_WaitFlagStateUntilTimeout+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
 80044b4:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 80044b6:	e05a      	b.n	800456e <SPI_WaitFifoStateUntilTimeout+0xc6>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80044be:	d109      	bne.n	80044d4 <SPI_WaitFifoStateUntilTimeout+0x2c>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d106      	bne.n	80044d4 <SPI_WaitFifoStateUntilTimeout+0x2c>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	330c      	adds	r3, #12
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80044d2:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044da:	d048      	beq.n	800456e <SPI_WaitFifoStateUntilTimeout+0xc6>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d007      	beq.n	80044f2 <SPI_WaitFifoStateUntilTimeout+0x4a>
 80044e2:	f7fd f849 	bl	8001578 <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	6a3b      	ldr	r3, [r7, #32]
 80044ea:	1ad2      	subs	r2, r2, r3
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d33d      	bcc.n	800456e <SPI_WaitFifoStateUntilTimeout+0xc6>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	6812      	ldr	r2, [r2, #0]
 80044fa:	6852      	ldr	r2, [r2, #4]
 80044fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004500:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800450a:	d111      	bne.n	8004530 <SPI_WaitFifoStateUntilTimeout+0x88>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004514:	d004      	beq.n	8004520 <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800451e:	d107      	bne.n	8004530 <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	6812      	ldr	r2, [r2, #0]
 8004528:	6812      	ldr	r2, [r2, #0]
 800452a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800452e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004534:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004538:	d10f      	bne.n	800455a <SPI_WaitFifoStateUntilTimeout+0xb2>
        {
          SPI_RESET_CRC(hspi);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	6812      	ldr	r2, [r2, #0]
 8004542:	6812      	ldr	r2, [r2, #0]
 8004544:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004548:	601a      	str	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	6812      	ldr	r2, [r2, #0]
 8004552:	6812      	ldr	r2, [r2, #0]
 8004554:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004558:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e008      	b.n	8004580 <SPI_WaitFifoStateUntilTimeout+0xd8>
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	401a      	ands	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	429a      	cmp	r2, r3
 800457c:	d19c      	bne.n	80044b8 <SPI_WaitFifoStateUntilTimeout+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	3718      	adds	r7, #24
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af02      	add	r7, sp, #8
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	9300      	str	r3, [sp, #0]
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800459e:	2200      	movs	r2, #0
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	f7ff ff81 	bl	80044a8 <SPI_WaitFifoStateUntilTimeout>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d007      	beq.n	80045bc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045b0:	f043 0220 	orr.w	r2, r3, #32
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e027      	b.n	800460c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	9300      	str	r3, [sp, #0]
 80045c0:	68f8      	ldr	r0, [r7, #12]
 80045c2:	2180      	movs	r1, #128	; 0x80
 80045c4:	2200      	movs	r2, #0
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	f7ff ff06 	bl	80043d8 <SPI_WaitFlagStateUntilTimeout>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d007      	beq.n	80045e2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045d6:	f043 0220 	orr.w	r2, r3, #32
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e014      	b.n	800460c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	9300      	str	r3, [sp, #0]
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80045ec:	2200      	movs	r2, #0
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	f7ff ff5a 	bl	80044a8 <SPI_WaitFifoStateUntilTimeout>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d007      	beq.n	800460a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045fe:	f043 0220 	orr.w	r2, r3, #32
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e000      	b.n	800460c <SPI_EndRxTxTransaction+0x84>
  }
  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e083      	b.n	800472e <HAL_RTC_Init+0x11a>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	7f5b      	ldrb	r3, [r3, #29]
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b00      	cmp	r3, #0
 800462e:	d105      	bne.n	800463c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7fb fe6a 	bl	8000310 <HAL_RTC_MspInit>
  }
  
  /* Set RTC state */  
  hrtc->State = HAL_RTC_STATE_BUSY;  
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2202      	movs	r2, #2
 8004640:	775a      	strb	r2, [r3, #29]
       
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	22ca      	movs	r2, #202	; 0xca
 8004648:	625a      	str	r2, [r3, #36]	; 0x24
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2253      	movs	r2, #83	; 0x53
 8004650:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 fac0 	bl	8004bd8 <RTC_EnterInitMode>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d008      	beq.n	8004670 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	22ff      	movs	r2, #255	; 0xff
 8004664:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2204      	movs	r2, #4
 800466a:	775a      	strb	r2, [r3, #29]
    
    return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e05e      	b.n	800472e <HAL_RTC_Init+0x11a>
  } 
  else
  { 
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800467e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004682:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	6812      	ldr	r2, [r2, #0]
 800468c:	6891      	ldr	r1, [r2, #8]
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	6850      	ldr	r0, [r2, #4]
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	6912      	ldr	r2, [r2, #16]
 8004696:	4310      	orrs	r0, r2
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	6952      	ldr	r2, [r2, #20]
 800469c:	4302      	orrs	r2, r0
 800469e:	430a      	orrs	r2, r1
 80046a0:	609a      	str	r2, [r3, #8]
    
    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	68d2      	ldr	r2, [r2, #12]
 80046aa:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	6812      	ldr	r2, [r2, #0]
 80046b4:	6911      	ldr	r1, [r2, #16]
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	6892      	ldr	r2, [r2, #8]
 80046ba:	0412      	lsls	r2, r2, #16
 80046bc:	430a      	orrs	r2, r1
 80046be:	611a      	str	r2, [r3, #16]
    
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	6812      	ldr	r2, [r2, #0]
 80046c8:	68d2      	ldr	r2, [r2, #12]
 80046ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046ce:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f003 0320 	and.w	r3, r3, #32
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d10e      	bne.n	80046fc <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 fa52 	bl	8004b88 <HAL_RTC_WaitForSynchro>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d008      	beq.n	80046fc <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	22ff      	movs	r2, #255	; 0xff
 80046f0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2204      	movs	r2, #4
 80046f6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e018      	b.n	800472e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	6812      	ldr	r2, [r2, #0]
 8004704:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004706:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800470a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	6812      	ldr	r2, [r2, #0]
 8004714:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	6992      	ldr	r2, [r2, #24]
 800471a:	430a      	orrs	r2, r1
 800471c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	22ff      	movs	r2, #255	; 0xff
 8004724:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	775a      	strb	r2, [r3, #29]
    
    return HAL_OK;
 800472c:	2300      	movs	r3, #0
  }
}
 800472e:	4618      	mov	r0, r3
 8004730:	3708      	adds	r7, #8
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop

08004738 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004738:	b590      	push	{r4, r7, lr}
 800473a:	b087      	sub	sp, #28
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004744:	2300      	movs	r3, #0
 8004746:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
  
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	7f1b      	ldrb	r3, [r3, #28]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d101      	bne.n	8004754 <HAL_RTC_SetTime+0x1c>
 8004750:	2302      	movs	r3, #2
 8004752:	e0b2      	b.n	80048ba <HAL_RTC_SetTime+0x182>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2201      	movs	r2, #1
 8004758:	771a      	strb	r2, [r3, #28]
  
  hrtc->State = HAL_RTC_STATE_BUSY;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2202      	movs	r2, #2
 800475e:	775a      	strb	r2, [r3, #29]
  
  if(Format == RTC_FORMAT_BIN)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d126      	bne.n	80047b4 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004770:	2b00      	cmp	r3, #0
 8004772:	d102      	bne.n	800477a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    } 
    else
    {
      sTime->TimeFormat = 0x00U;
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	2200      	movs	r2, #0
 8004778:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
    
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	4618      	mov	r0, r3
 8004780:	f000 fa56 	bl	8004c30 <RTC_ByteToBcd2>
 8004784:	4603      	mov	r3, r0
 8004786:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	785b      	ldrb	r3, [r3, #1]
 800478c:	4618      	mov	r0, r3
 800478e:	f000 fa4f 	bl	8004c30 <RTC_ByteToBcd2>
 8004792:	4603      	mov	r3, r0
 8004794:	021b      	lsls	r3, r3, #8
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
    
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004796:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	789b      	ldrb	r3, [r3, #2]
 800479c:	4618      	mov	r0, r3
 800479e:	f000 fa47 	bl	8004c30 <RTC_ByteToBcd2>
 80047a2:	4603      	mov	r3, r0
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
    
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80047a4:	ea44 0203 	orr.w	r2, r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
                        (((uint32_t)sTime->TimeFormat) << 16U));  
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	78db      	ldrb	r3, [r3, #3]
 80047ac:	041b      	lsls	r3, r3, #16
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
    
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80047ae:	4313      	orrs	r3, r2
 80047b0:	617b      	str	r3, [r7, #20]
 80047b2:	e020      	b.n	80047f6 <HAL_RTC_SetTime+0xbe>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
                        (((uint32_t)sTime->TimeFormat) << 16U));  
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d007      	beq.n	80047d2 <HAL_RTC_SetTime+0x9a>
    {
      tmpreg = RTC_Bcd2ToByte(sTime->Hours);
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	4618      	mov	r0, r3
 80047c8:	f000 fa50 	bl	8004c6c <RTC_Bcd2ToByte>
 80047cc:	4603      	mov	r3, r0
 80047ce:	617b      	str	r3, [r7, #20]
 80047d0:	e002      	b.n	80047d8 <HAL_RTC_SetTime+0xa0>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat)); 
    } 
    else
    {
      sTime->TimeFormat = 0x00U;
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	2200      	movs	r2, #0
 80047d6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	785b      	ldrb	r3, [r3, #1]
 80047e2:	021b      	lsls	r3, r3, #8
      sTime->TimeFormat = 0x00U;
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80047e4:	4313      	orrs	r3, r2
              ((uint32_t)(sTime->Minutes) << 8U) | \
              ((uint32_t)sTime->Seconds) | \
 80047e6:	68ba      	ldr	r2, [r7, #8]
 80047e8:	7892      	ldrb	r2, [r2, #2]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80047ea:	431a      	orrs	r2, r3
              ((uint32_t)sTime->Seconds) | \
              ((uint32_t)(sTime->TimeFormat) << 16U));   
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	78db      	ldrb	r3, [r3, #3]
 80047f0:	041b      	lsls	r3, r3, #16
      sTime->TimeFormat = 0x00U;
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80047f2:	4313      	orrs	r3, r2
 80047f4:	617b      	str	r3, [r7, #20]
              ((uint32_t)sTime->Seconds) | \
              ((uint32_t)(sTime->TimeFormat) << 16U));   
  }
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	22ca      	movs	r2, #202	; 0xca
 80047fc:	625a      	str	r2, [r3, #36]	; 0x24
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2253      	movs	r2, #83	; 0x53
 8004804:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	f000 f9e6 	bl	8004bd8 <RTC_EnterInitMode>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00b      	beq.n	800482a <HAL_RTC_SetTime+0xf2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	22ff      	movs	r2, #255	; 0xff
 8004818:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2204      	movs	r2, #4
 800481e:	775a      	strb	r2, [r3, #29]
    
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	771a      	strb	r2, [r3, #28]
    
    return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e047      	b.n	80048ba <HAL_RTC_SetTime+0x182>
  } 
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004834:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004838:	6013      	str	r3, [r2, #0]
     
    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	6812      	ldr	r2, [r2, #0]
 8004842:	6892      	ldr	r2, [r2, #8]
 8004844:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004848:	609a      	str	r2, [r3, #8]
    
    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	6812      	ldr	r2, [r2, #0]
 8004852:	6891      	ldr	r1, [r2, #8]
 8004854:	68ba      	ldr	r2, [r7, #8]
 8004856:	68d0      	ldr	r0, [r2, #12]
 8004858:	68ba      	ldr	r2, [r7, #8]
 800485a:	6912      	ldr	r2, [r2, #16]
 800485c:	4302      	orrs	r2, r0
 800485e:	430a      	orrs	r2, r1
 8004860:	609a      	str	r2, [r3, #8]
    
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	6812      	ldr	r2, [r2, #0]
 800486a:	68d2      	ldr	r2, [r2, #12]
 800486c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004870:	60da      	str	r2, [r3, #12]
    
    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f003 0320 	and.w	r3, r3, #32
 800487c:	2b00      	cmp	r3, #0
 800487e:	d111      	bne.n	80048a4 <HAL_RTC_SetTime+0x16c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	f000 f981 	bl	8004b88 <HAL_RTC_WaitForSynchro>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00b      	beq.n	80048a4 <HAL_RTC_SetTime+0x16c>
      {        
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	22ff      	movs	r2, #255	; 0xff
 8004892:	625a      	str	r2, [r3, #36]	; 0x24
        
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2204      	movs	r2, #4
 8004898:	775a      	strb	r2, [r3, #29]
        
        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	771a      	strb	r2, [r3, #28]
        
        return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e00a      	b.n	80048ba <HAL_RTC_SetTime+0x182>
      }
    }
    
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	22ff      	movs	r2, #255	; 0xff
 80048aa:	625a      	str	r2, [r3, #36]	; 0x24
    
   hrtc->State = HAL_RTC_STATE_READY;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2201      	movs	r2, #1
 80048b0:	775a      	strb	r2, [r3, #29]
  
   __HAL_UNLOCK(hrtc); 
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	771a      	strb	r2, [r3, #28]
     
   return HAL_OK;
 80048b8:	2300      	movs	r3, #0
  }
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	371c      	adds	r7, #28
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd90      	pop	{r4, r7, pc}
 80048c2:	bf00      	nop

080048c4 <HAL_RTC_GetTime>:
  * @note   Call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values 
  *         in the higher-order calendar shadow registers.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b086      	sub	sp, #24
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80048d0:	2300      	movs	r3, #0
 80048d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	609a      	str	r2, [r3, #8]
  
  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80048f6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80048fa:	617b      	str	r3, [r7, #20]
  
  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8004902:	0c1b      	lsrs	r3, r3, #16
 8004904:	b2da      	uxtb	r2, r3
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8004910:	0a1b      	lsrs	r3, r3, #8
 8004912:	b2da      	uxtb	r2, r3
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	b2db      	uxtb	r3, r3
 800491c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004920:	b2da      	uxtb	r2, r3
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800492c:	0c1b      	lsrs	r3, r3, #16
 800492e:	b2da      	uxtb	r2, r3
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	70da      	strb	r2, [r3, #3]
  
  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d11a      	bne.n	8004970 <HAL_RTC_GetTime+0xac>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	4618      	mov	r0, r3
 8004940:	f000 f994 	bl	8004c6c <RTC_Bcd2ToByte>
 8004944:	4603      	mov	r3, r0
 8004946:	461a      	mov	r2, r3
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	785b      	ldrb	r3, [r3, #1]
 8004950:	4618      	mov	r0, r3
 8004952:	f000 f98b 	bl	8004c6c <RTC_Bcd2ToByte>
 8004956:	4603      	mov	r3, r0
 8004958:	461a      	mov	r2, r3
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	789b      	ldrb	r3, [r3, #2]
 8004962:	4618      	mov	r0, r3
 8004964:	f000 f982 	bl	8004c6c <RTC_Bcd2ToByte>
 8004968:	4603      	mov	r3, r0
 800496a:	461a      	mov	r2, r3
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	709a      	strb	r2, [r3, #2]
  }
  
  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3718      	adds	r7, #24
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop

0800497c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800497c:	b590      	push	{r4, r7, lr}
 800497e:	b087      	sub	sp, #28
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004988:	2300      	movs	r3, #0
 800498a:	617b      	str	r3, [r7, #20]
  
 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
 /* Process Locked */ 
 __HAL_LOCK(hrtc);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	7f1b      	ldrb	r3, [r3, #28]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d101      	bne.n	8004998 <HAL_RTC_SetDate+0x1c>
 8004994:	2302      	movs	r3, #2
 8004996:	e0a2      	b.n	8004ade <HAL_RTC_SetDate+0x162>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2201      	movs	r2, #1
 800499c:	771a      	strb	r2, [r3, #28]
  
  hrtc->State = HAL_RTC_STATE_BUSY; 
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2202      	movs	r2, #2
 80049a2:	775a      	strb	r2, [r3, #29]
  
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10e      	bne.n	80049c8 <HAL_RTC_SetDate+0x4c>
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	785b      	ldrb	r3, [r3, #1]
 80049ae:	f003 0310 	and.w	r3, r3, #16
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d008      	beq.n	80049c8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	785b      	ldrb	r3, [r3, #1]
 80049ba:	f023 0310 	bic.w	r3, r3, #16
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	330a      	adds	r3, #10
 80049c2:	b2da      	uxtb	r2, r3
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	705a      	strb	r2, [r3, #1]
  }
  
  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
  
  if(Format == RTC_FORMAT_BIN)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d11c      	bne.n	8004a08 <HAL_RTC_SetDate+0x8c>
  {   
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date)); 
    
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	78db      	ldrb	r3, [r3, #3]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f000 f92c 	bl	8004c30 <RTC_ByteToBcd2>
 80049d8:	4603      	mov	r3, r0
 80049da:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	785b      	ldrb	r3, [r3, #1]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f000 f925 	bl	8004c30 <RTC_ByteToBcd2>
 80049e6:	4603      	mov	r3, r0
 80049e8:	021b      	lsls	r3, r3, #8
  {   
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date)); 
    
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80049ea:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	789b      	ldrb	r3, [r3, #2]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f000 f91d 	bl	8004c30 <RTC_ByteToBcd2>
 80049f6:	4603      	mov	r3, r0
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date)); 
    
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80049f8:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
                 ((uint32_t)sDate->WeekDay << 13U));   
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	035b      	lsls	r3, r3, #13
  {   
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date)); 
    
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004a02:	4313      	orrs	r3, r2
 8004a04:	617b      	str	r3, [r7, #20]
 8004a06:	e01c      	b.n	8004a42 <HAL_RTC_SetDate+0xc6>
                 ((uint32_t)sDate->WeekDay << 13U));   
  }
  else
  {   
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    datetmpreg = RTC_Bcd2ToByte(sDate->Month);
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	785b      	ldrb	r3, [r3, #1]
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f000 f92d 	bl	8004c6c <RTC_Bcd2ToByte>
 8004a12:	4603      	mov	r3, r0
 8004a14:	617b      	str	r3, [r7, #20]
    assert_param(IS_RTC_MONTH(datetmpreg));
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	789b      	ldrb	r3, [r3, #2]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f000 f926 	bl	8004c6c <RTC_Bcd2ToByte>
 8004a20:	4603      	mov	r3, r0
 8004a22:	617b      	str	r3, [r7, #20]
    assert_param(IS_RTC_DATE(datetmpreg));
    
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	78db      	ldrb	r3, [r3, #3]
 8004a28:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	785b      	ldrb	r3, [r3, #1]
 8004a2e:	021b      	lsls	r3, r3, #8
    datetmpreg = RTC_Bcd2ToByte(sDate->Month);
    assert_param(IS_RTC_MONTH(datetmpreg));
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
    assert_param(IS_RTC_DATE(datetmpreg));
    
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004a30:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Month) << 8U) | \
                  ((uint32_t)sDate->Date) | \
 8004a32:	68ba      	ldr	r2, [r7, #8]
 8004a34:	7892      	ldrb	r2, [r2, #2]
    assert_param(IS_RTC_MONTH(datetmpreg));
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
    assert_param(IS_RTC_DATE(datetmpreg));
    
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
                  (((uint32_t)sDate->Month) << 8U) | \
 8004a36:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->Date) | \
                  (((uint32_t)sDate->WeekDay) << 13U));  
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	035b      	lsls	r3, r3, #13
    datetmpreg = RTC_Bcd2ToByte(sDate->Month);
    assert_param(IS_RTC_MONTH(datetmpreg));
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
    assert_param(IS_RTC_DATE(datetmpreg));
    
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	617b      	str	r3, [r7, #20]
                  ((uint32_t)sDate->Date) | \
                  (((uint32_t)sDate->WeekDay) << 13U));  
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	22ca      	movs	r2, #202	; 0xca
 8004a48:	625a      	str	r2, [r3, #36]	; 0x24
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2253      	movs	r2, #83	; 0x53
 8004a50:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004a52:	68f8      	ldr	r0, [r7, #12]
 8004a54:	f000 f8c0 	bl	8004bd8 <RTC_EnterInitMode>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00b      	beq.n	8004a76 <HAL_RTC_SetDate+0xfa>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	22ff      	movs	r2, #255	; 0xff
 8004a64:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2204      	movs	r2, #4
 8004a6a:	775a      	strb	r2, [r3, #29]
    
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	771a      	strb	r2, [r3, #28]
    
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e033      	b.n	8004ade <HAL_RTC_SetDate+0x162>
  } 
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004a80:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004a84:	6053      	str	r3, [r2, #4]
    
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	6812      	ldr	r2, [r2, #0]
 8004a8e:	68d2      	ldr	r2, [r2, #12]
 8004a90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a94:	60da      	str	r2, [r3, #12]
    
    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f003 0320 	and.w	r3, r3, #32
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d111      	bne.n	8004ac8 <HAL_RTC_SetDate+0x14c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f000 f86f 	bl	8004b88 <HAL_RTC_WaitForSynchro>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00b      	beq.n	8004ac8 <HAL_RTC_SetDate+0x14c>
      { 
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	22ff      	movs	r2, #255	; 0xff
 8004ab6:	625a      	str	r2, [r3, #36]	; 0x24
        
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2204      	movs	r2, #4
 8004abc:	775a      	strb	r2, [r3, #29]
        
        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	771a      	strb	r2, [r3, #28]
        
        return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e00a      	b.n	8004ade <HAL_RTC_SetDate+0x162>
      }
    }
    
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	22ff      	movs	r2, #255	; 0xff
 8004ace:	625a      	str	r2, [r3, #36]	; 0x24
    
    hrtc->State = HAL_RTC_STATE_READY ;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	775a      	strb	r2, [r3, #29]
    
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	771a      	strb	r2, [r3, #28]
    
    return HAL_OK;    
 8004adc:	2300      	movs	r3, #0
  }
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	371c      	adds	r7, #28
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd90      	pop	{r4, r7, pc}
 8004ae6:	bf00      	nop

08004ae8 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN :  Binary data format 
  *            @arg RTC_FORMAT_BCD :  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004af4:	2300      	movs	r3, #0
 8004af6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
          
  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004b02:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004b06:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004b0e:	0c1b      	lsrs	r3, r3, #16
 8004b10:	b2da      	uxtb	r2, r3
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8004b1c:	0a1b      	lsrs	r3, r3, #8
 8004b1e:	b2da      	uxtb	r2, r3
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b2c:	b2da      	uxtb	r2, r3
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004b38:	0b5b      	lsrs	r3, r3, #13
 8004b3a:	b2da      	uxtb	r2, r3
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d11a      	bne.n	8004b7c <HAL_RTC_GetDate+0x94>
  {    
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	78db      	ldrb	r3, [r3, #3]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f000 f88e 	bl	8004c6c <RTC_Bcd2ToByte>
 8004b50:	4603      	mov	r3, r0
 8004b52:	461a      	mov	r2, r3
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	785b      	ldrb	r3, [r3, #1]
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f000 f885 	bl	8004c6c <RTC_Bcd2ToByte>
 8004b62:	4603      	mov	r3, r0
 8004b64:	461a      	mov	r2, r3
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	789b      	ldrb	r3, [r3, #2]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 f87c 	bl	8004c6c <RTC_Bcd2ToByte>
 8004b74:	4603      	mov	r3, r0
 8004b76:	461a      	mov	r2, r3
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3718      	adds	r7, #24
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop

08004b88 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.   
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b90:	2300      	movs	r3, #0
 8004b92:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	6812      	ldr	r2, [r2, #0]
 8004b9c:	68d2      	ldr	r2, [r2, #12]
 8004b9e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ba2:	60da      	str	r2, [r3, #12]
  
  tickstart = HAL_GetTick();
 8004ba4:	f7fc fce8 	bl	8001578 <HAL_GetTick>
 8004ba8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004baa:	e009      	b.n	8004bc0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8004bac:	f7fc fce4 	bl	8001578 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bba:	d901      	bls.n	8004bc0 <HAL_RTC_WaitForSynchro+0x38>
    {       
      return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e007      	b.n	8004bd0 <HAL_RTC_WaitForSynchro+0x48>
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
  
  tickstart = HAL_GetTick();

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	f003 0320 	and.w	r3, r3, #32
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d0ee      	beq.n	8004bac <HAL_RTC_WaitForSynchro+0x24>
    {       
      return HAL_TIMEOUT;
    } 
  }

  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3710      	adds	r7, #16
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout 
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004be0:	2300      	movs	r3, #0
 8004be2:	60fb      	str	r3, [r7, #12]
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d119      	bne.n	8004c26 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004bfa:	60da      	str	r2, [r3, #12]
    
    tickstart = HAL_GetTick();
 8004bfc:	f7fc fcbc 	bl	8001578 <HAL_GetTick>
 8004c00:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004c02:	e009      	b.n	8004c18 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8004c04:	f7fc fcb8 	bl	8001578 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c12:	d901      	bls.n	8004c18 <RTC_EnterInitMode+0x40>
      {       
        return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e007      	b.n	8004c28 <RTC_EnterInitMode+0x50>
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
    
    tickstart = HAL_GetTick();
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d0ee      	beq.n	8004c04 <RTC_EnterInitMode+0x2c>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3710      	adds	r7, #16
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	4603      	mov	r3, r0
 8004c38:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	60fb      	str	r3, [r7, #12]
  
  while(Value >= 10U)
 8004c3e:	e005      	b.n	8004c4c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	3301      	adds	r3, #1
 8004c44:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8004c46:	79fb      	ldrb	r3, [r7, #7]
 8004c48:	3b0a      	subs	r3, #10
 8004c4a:	71fb      	strb	r3, [r7, #7]
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
  
  while(Value >= 10U)
 8004c4c:	79fb      	ldrb	r3, [r7, #7]
 8004c4e:	2b09      	cmp	r3, #9
 8004c50:	d8f6      	bhi.n	8004c40 <RTC_ByteToBcd2+0x10>
  {
    bcdhigh++;
    Value -= 10U;
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	011b      	lsls	r3, r3, #4
 8004c58:	b2da      	uxtb	r2, r3
 8004c5a:	79fb      	ldrb	r3, [r7, #7]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	b2db      	uxtb	r3, r3
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3714      	adds	r7, #20
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	4603      	mov	r3, r0
 8004c74:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8004c76:	2300      	movs	r3, #0
 8004c78:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8004c7a:	79fb      	ldrb	r3, [r7, #7]
 8004c7c:	091b      	lsrs	r3, r3, #4
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	461a      	mov	r2, r3
 8004c82:	4613      	mov	r3, r2
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	4413      	add	r3, r2
 8004c88:	005b      	lsls	r3, r3, #1
 8004c8a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 8004c8c:	79fb      	ldrb	r3, [r7, #7]
 8004c8e:	f003 030f 	and.w	r3, r3, #15
 8004c92:	b2da      	uxtb	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	4413      	add	r3, r2
 8004c9a:	b2db      	uxtb	r3, r3
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3714      	adds	r7, #20
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.                     
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b087      	sub	sp, #28
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
  
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	3350      	adds	r3, #80	; 0x50
 8004cbe:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	697a      	ldr	r2, [r7, #20]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	601a      	str	r2, [r3, #0]
}
 8004cd0:	371c      	adds	r7, #28
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop

08004cdc <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
  *                                 specify the register.                   
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	3350      	adds	r3, #80	; 0x50
 8004cf0:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3714      	adds	r7, #20
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004d0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004d44 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004d10:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004d12:	e003      	b.n	8004d1c <LoopCopyDataInit>

08004d14 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004d14:	4b0c      	ldr	r3, [pc, #48]	; (8004d48 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004d16:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004d18:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004d1a:	3104      	adds	r1, #4

08004d1c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004d1c:	480b      	ldr	r0, [pc, #44]	; (8004d4c <LoopForever+0xa>)
	ldr	r3, =_edata
 8004d1e:	4b0c      	ldr	r3, [pc, #48]	; (8004d50 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004d20:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004d22:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004d24:	d3f6      	bcc.n	8004d14 <CopyDataInit>
	ldr	r2, =_sbss
 8004d26:	4a0b      	ldr	r2, [pc, #44]	; (8004d54 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004d28:	e002      	b.n	8004d30 <LoopFillZerobss>

08004d2a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004d2a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004d2c:	f842 3b04 	str.w	r3, [r2], #4

08004d30 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004d30:	4b09      	ldr	r3, [pc, #36]	; (8004d58 <LoopForever+0x16>)
	cmp	r2, r3
 8004d32:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004d34:	d3f9      	bcc.n	8004d2a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004d36:	f7fb fe99 	bl	8000a6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004d3a:	f000 f811 	bl	8004d60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004d3e:	f7fb fb87 	bl	8000450 <main>

08004d42 <LoopForever>:

LoopForever:
    b LoopForever
 8004d42:	e7fe      	b.n	8004d42 <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004d44:	20004000 	.word	0x20004000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8004d48:	080058e4 	.word	0x080058e4
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004d4c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004d50:	2000006c 	.word	0x2000006c
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8004d54:	2000006c 	.word	0x2000006c
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8004d58:	20000238 	.word	0x20000238

08004d5c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004d5c:	e7fe      	b.n	8004d5c <ADC1_IRQHandler>
	...

08004d60 <__libc_init_array>:
 8004d60:	b570      	push	{r4, r5, r6, lr}
 8004d62:	4b0e      	ldr	r3, [pc, #56]	; (8004d9c <__libc_init_array+0x3c>)
 8004d64:	4c0e      	ldr	r4, [pc, #56]	; (8004da0 <__libc_init_array+0x40>)
 8004d66:	1ae4      	subs	r4, r4, r3
 8004d68:	10a4      	asrs	r4, r4, #2
 8004d6a:	2500      	movs	r5, #0
 8004d6c:	461e      	mov	r6, r3
 8004d6e:	42a5      	cmp	r5, r4
 8004d70:	d004      	beq.n	8004d7c <__libc_init_array+0x1c>
 8004d72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d76:	4798      	blx	r3
 8004d78:	3501      	adds	r5, #1
 8004d7a:	e7f8      	b.n	8004d6e <__libc_init_array+0xe>
 8004d7c:	f000 fc3a 	bl	80055f4 <_init>
 8004d80:	4c08      	ldr	r4, [pc, #32]	; (8004da4 <__libc_init_array+0x44>)
 8004d82:	4b09      	ldr	r3, [pc, #36]	; (8004da8 <__libc_init_array+0x48>)
 8004d84:	1ae4      	subs	r4, r4, r3
 8004d86:	10a4      	asrs	r4, r4, #2
 8004d88:	2500      	movs	r5, #0
 8004d8a:	461e      	mov	r6, r3
 8004d8c:	42a5      	cmp	r5, r4
 8004d8e:	d004      	beq.n	8004d9a <__libc_init_array+0x3a>
 8004d90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d94:	4798      	blx	r3
 8004d96:	3501      	adds	r5, #1
 8004d98:	e7f8      	b.n	8004d8c <__libc_init_array+0x2c>
 8004d9a:	bd70      	pop	{r4, r5, r6, pc}
 8004d9c:	080058dc 	.word	0x080058dc
 8004da0:	080058dc 	.word	0x080058dc
 8004da4:	080058e0 	.word	0x080058e0
 8004da8:	080058dc 	.word	0x080058dc

08004dac <memcpy>:
 8004dac:	b510      	push	{r4, lr}
 8004dae:	1e43      	subs	r3, r0, #1
 8004db0:	440a      	add	r2, r1
 8004db2:	4291      	cmp	r1, r2
 8004db4:	d004      	beq.n	8004dc0 <memcpy+0x14>
 8004db6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004dba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004dbe:	e7f8      	b.n	8004db2 <memcpy+0x6>
 8004dc0:	bd10      	pop	{r4, pc}
	...

08004dc4 <siprintf>:
 8004dc4:	b40e      	push	{r1, r2, r3}
 8004dc6:	b500      	push	{lr}
 8004dc8:	b09c      	sub	sp, #112	; 0x70
 8004dca:	f44f 7102 	mov.w	r1, #520	; 0x208
 8004dce:	f8ad 1014 	strh.w	r1, [sp, #20]
 8004dd2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004dd6:	9104      	str	r1, [sp, #16]
 8004dd8:	9107      	str	r1, [sp, #28]
 8004dda:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004dde:	ab1d      	add	r3, sp, #116	; 0x74
 8004de0:	f8ad 1016 	strh.w	r1, [sp, #22]
 8004de4:	4908      	ldr	r1, [pc, #32]	; (8004e08 <siprintf+0x44>)
 8004de6:	f853 2b04 	ldr.w	r2, [r3], #4
 8004dea:	9002      	str	r0, [sp, #8]
 8004dec:	9006      	str	r0, [sp, #24]
 8004dee:	6808      	ldr	r0, [r1, #0]
 8004df0:	9301      	str	r3, [sp, #4]
 8004df2:	a902      	add	r1, sp, #8
 8004df4:	f000 f864 	bl	8004ec0 <_svfiprintf_r>
 8004df8:	9b02      	ldr	r3, [sp, #8]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	701a      	strb	r2, [r3, #0]
 8004dfe:	b01c      	add	sp, #112	; 0x70
 8004e00:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e04:	b003      	add	sp, #12
 8004e06:	4770      	bx	lr
 8004e08:	20000068 	.word	0x20000068

08004e0c <__ssputs_r>:
 8004e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e10:	688e      	ldr	r6, [r1, #8]
 8004e12:	42b3      	cmp	r3, r6
 8004e14:	4682      	mov	sl, r0
 8004e16:	460c      	mov	r4, r1
 8004e18:	4690      	mov	r8, r2
 8004e1a:	4699      	mov	r9, r3
 8004e1c:	d340      	bcc.n	8004ea0 <__ssputs_r+0x94>
 8004e1e:	898a      	ldrh	r2, [r1, #12]
 8004e20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004e24:	d03a      	beq.n	8004e9c <__ssputs_r+0x90>
 8004e26:	6825      	ldr	r5, [r4, #0]
 8004e28:	6909      	ldr	r1, [r1, #16]
 8004e2a:	1a6f      	subs	r7, r5, r1
 8004e2c:	6965      	ldr	r5, [r4, #20]
 8004e2e:	2302      	movs	r3, #2
 8004e30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e34:	fb95 f5f3 	sdiv	r5, r5, r3
 8004e38:	1c7b      	adds	r3, r7, #1
 8004e3a:	444b      	add	r3, r9
 8004e3c:	429d      	cmp	r5, r3
 8004e3e:	bf38      	it	cc
 8004e40:	461d      	movcc	r5, r3
 8004e42:	0553      	lsls	r3, r2, #21
 8004e44:	d50f      	bpl.n	8004e66 <__ssputs_r+0x5a>
 8004e46:	4629      	mov	r1, r5
 8004e48:	f000 fb30 	bl	80054ac <_malloc_r>
 8004e4c:	4606      	mov	r6, r0
 8004e4e:	b198      	cbz	r0, 8004e78 <__ssputs_r+0x6c>
 8004e50:	6921      	ldr	r1, [r4, #16]
 8004e52:	463a      	mov	r2, r7
 8004e54:	f7ff ffaa 	bl	8004dac <memcpy>
 8004e58:	89a3      	ldrh	r3, [r4, #12]
 8004e5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e62:	81a3      	strh	r3, [r4, #12]
 8004e64:	e013      	b.n	8004e8e <__ssputs_r+0x82>
 8004e66:	462a      	mov	r2, r5
 8004e68:	f000 fb76 	bl	8005558 <_realloc_r>
 8004e6c:	4606      	mov	r6, r0
 8004e6e:	b970      	cbnz	r0, 8004e8e <__ssputs_r+0x82>
 8004e70:	4650      	mov	r0, sl
 8004e72:	6921      	ldr	r1, [r4, #16]
 8004e74:	f000 fad6 	bl	8005424 <_free_r>
 8004e78:	230c      	movs	r3, #12
 8004e7a:	f8ca 3000 	str.w	r3, [sl]
 8004e7e:	89a3      	ldrh	r3, [r4, #12]
 8004e80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e84:	81a3      	strh	r3, [r4, #12]
 8004e86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e8e:	6126      	str	r6, [r4, #16]
 8004e90:	6165      	str	r5, [r4, #20]
 8004e92:	443e      	add	r6, r7
 8004e94:	1bed      	subs	r5, r5, r7
 8004e96:	6026      	str	r6, [r4, #0]
 8004e98:	60a5      	str	r5, [r4, #8]
 8004e9a:	464e      	mov	r6, r9
 8004e9c:	45b1      	cmp	r9, r6
 8004e9e:	d200      	bcs.n	8004ea2 <__ssputs_r+0x96>
 8004ea0:	464e      	mov	r6, r9
 8004ea2:	4632      	mov	r2, r6
 8004ea4:	6820      	ldr	r0, [r4, #0]
 8004ea6:	4641      	mov	r1, r8
 8004ea8:	f000 faa1 	bl	80053ee <memmove>
 8004eac:	68a3      	ldr	r3, [r4, #8]
 8004eae:	1b9b      	subs	r3, r3, r6
 8004eb0:	60a3      	str	r3, [r4, #8]
 8004eb2:	6823      	ldr	r3, [r4, #0]
 8004eb4:	441e      	add	r6, r3
 8004eb6:	6026      	str	r6, [r4, #0]
 8004eb8:	2000      	movs	r0, #0
 8004eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08004ec0 <_svfiprintf_r>:
 8004ec0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ec4:	b09d      	sub	sp, #116	; 0x74
 8004ec6:	4606      	mov	r6, r0
 8004ec8:	9303      	str	r3, [sp, #12]
 8004eca:	898b      	ldrh	r3, [r1, #12]
 8004ecc:	061c      	lsls	r4, r3, #24
 8004ece:	460d      	mov	r5, r1
 8004ed0:	4690      	mov	r8, r2
 8004ed2:	d50c      	bpl.n	8004eee <_svfiprintf_r+0x2e>
 8004ed4:	690b      	ldr	r3, [r1, #16]
 8004ed6:	b953      	cbnz	r3, 8004eee <_svfiprintf_r+0x2e>
 8004ed8:	2140      	movs	r1, #64	; 0x40
 8004eda:	f000 fae7 	bl	80054ac <_malloc_r>
 8004ede:	6028      	str	r0, [r5, #0]
 8004ee0:	6128      	str	r0, [r5, #16]
 8004ee2:	b910      	cbnz	r0, 8004eea <_svfiprintf_r+0x2a>
 8004ee4:	230c      	movs	r3, #12
 8004ee6:	6033      	str	r3, [r6, #0]
 8004ee8:	e0cc      	b.n	8005084 <_svfiprintf_r+0x1c4>
 8004eea:	2340      	movs	r3, #64	; 0x40
 8004eec:	616b      	str	r3, [r5, #20]
 8004eee:	2300      	movs	r3, #0
 8004ef0:	9309      	str	r3, [sp, #36]	; 0x24
 8004ef2:	2320      	movs	r3, #32
 8004ef4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ef8:	2330      	movs	r3, #48	; 0x30
 8004efa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004efe:	4643      	mov	r3, r8
 8004f00:	461c      	mov	r4, r3
 8004f02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f06:	b91a      	cbnz	r2, 8004f10 <_svfiprintf_r+0x50>
 8004f08:	ebb4 0908 	subs.w	r9, r4, r8
 8004f0c:	d00f      	beq.n	8004f2e <_svfiprintf_r+0x6e>
 8004f0e:	e002      	b.n	8004f16 <_svfiprintf_r+0x56>
 8004f10:	2a25      	cmp	r2, #37	; 0x25
 8004f12:	d1f5      	bne.n	8004f00 <_svfiprintf_r+0x40>
 8004f14:	e7f8      	b.n	8004f08 <_svfiprintf_r+0x48>
 8004f16:	4630      	mov	r0, r6
 8004f18:	4629      	mov	r1, r5
 8004f1a:	4642      	mov	r2, r8
 8004f1c:	464b      	mov	r3, r9
 8004f1e:	f7ff ff75 	bl	8004e0c <__ssputs_r>
 8004f22:	3001      	adds	r0, #1
 8004f24:	f000 80a9 	beq.w	800507a <_svfiprintf_r+0x1ba>
 8004f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f2a:	444b      	add	r3, r9
 8004f2c:	9309      	str	r3, [sp, #36]	; 0x24
 8004f2e:	7823      	ldrb	r3, [r4, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f000 80a2 	beq.w	800507a <_svfiprintf_r+0x1ba>
 8004f36:	2300      	movs	r3, #0
 8004f38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f3c:	9304      	str	r3, [sp, #16]
 8004f3e:	9307      	str	r3, [sp, #28]
 8004f40:	9205      	str	r2, [sp, #20]
 8004f42:	9306      	str	r3, [sp, #24]
 8004f44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f48:	931a      	str	r3, [sp, #104]	; 0x68
 8004f4a:	f104 0801 	add.w	r8, r4, #1
 8004f4e:	4644      	mov	r4, r8
 8004f50:	f8df 9148 	ldr.w	r9, [pc, #328]	; 800509c <_svfiprintf_r+0x1dc>
 8004f54:	7821      	ldrb	r1, [r4, #0]
 8004f56:	4648      	mov	r0, r9
 8004f58:	2205      	movs	r2, #5
 8004f5a:	f000 fa39 	bl	80053d0 <memchr>
 8004f5e:	f108 0801 	add.w	r8, r8, #1
 8004f62:	9b04      	ldr	r3, [sp, #16]
 8004f64:	b130      	cbz	r0, 8004f74 <_svfiprintf_r+0xb4>
 8004f66:	ebc9 0000 	rsb	r0, r9, r0
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	4082      	lsls	r2, r0
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	9304      	str	r3, [sp, #16]
 8004f72:	e7ec      	b.n	8004f4e <_svfiprintf_r+0x8e>
 8004f74:	06d8      	lsls	r0, r3, #27
 8004f76:	bf44      	itt	mi
 8004f78:	2220      	movmi	r2, #32
 8004f7a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004f7e:	0719      	lsls	r1, r3, #28
 8004f80:	bf44      	itt	mi
 8004f82:	222b      	movmi	r2, #43	; 0x2b
 8004f84:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004f88:	7822      	ldrb	r2, [r4, #0]
 8004f8a:	2a2a      	cmp	r2, #42	; 0x2a
 8004f8c:	d002      	beq.n	8004f94 <_svfiprintf_r+0xd4>
 8004f8e:	9907      	ldr	r1, [sp, #28]
 8004f90:	4623      	mov	r3, r4
 8004f92:	e00e      	b.n	8004fb2 <_svfiprintf_r+0xf2>
 8004f94:	9a03      	ldr	r2, [sp, #12]
 8004f96:	1d11      	adds	r1, r2, #4
 8004f98:	6812      	ldr	r2, [r2, #0]
 8004f9a:	9103      	str	r1, [sp, #12]
 8004f9c:	2a00      	cmp	r2, #0
 8004f9e:	bfbb      	ittet	lt
 8004fa0:	4252      	neglt	r2, r2
 8004fa2:	f043 0302 	orrlt.w	r3, r3, #2
 8004fa6:	9207      	strge	r2, [sp, #28]
 8004fa8:	9207      	strlt	r2, [sp, #28]
 8004faa:	bfb8      	it	lt
 8004fac:	9304      	strlt	r3, [sp, #16]
 8004fae:	3401      	adds	r4, #1
 8004fb0:	e00a      	b.n	8004fc8 <_svfiprintf_r+0x108>
 8004fb2:	461c      	mov	r4, r3
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	7822      	ldrb	r2, [r4, #0]
 8004fb8:	3a30      	subs	r2, #48	; 0x30
 8004fba:	2a09      	cmp	r2, #9
 8004fbc:	d803      	bhi.n	8004fc6 <_svfiprintf_r+0x106>
 8004fbe:	200a      	movs	r0, #10
 8004fc0:	fb00 2101 	mla	r1, r0, r1, r2
 8004fc4:	e7f5      	b.n	8004fb2 <_svfiprintf_r+0xf2>
 8004fc6:	9107      	str	r1, [sp, #28]
 8004fc8:	7823      	ldrb	r3, [r4, #0]
 8004fca:	2b2e      	cmp	r3, #46	; 0x2e
 8004fcc:	d11a      	bne.n	8005004 <_svfiprintf_r+0x144>
 8004fce:	7863      	ldrb	r3, [r4, #1]
 8004fd0:	2b2a      	cmp	r3, #42	; 0x2a
 8004fd2:	d10a      	bne.n	8004fea <_svfiprintf_r+0x12a>
 8004fd4:	9b03      	ldr	r3, [sp, #12]
 8004fd6:	1d1a      	adds	r2, r3, #4
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	9203      	str	r2, [sp, #12]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	bfb8      	it	lt
 8004fe0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004fe4:	3402      	adds	r4, #2
 8004fe6:	9305      	str	r3, [sp, #20]
 8004fe8:	e00c      	b.n	8005004 <_svfiprintf_r+0x144>
 8004fea:	1c61      	adds	r1, r4, #1
 8004fec:	2200      	movs	r2, #0
 8004fee:	460c      	mov	r4, r1
 8004ff0:	3101      	adds	r1, #1
 8004ff2:	7823      	ldrb	r3, [r4, #0]
 8004ff4:	3b30      	subs	r3, #48	; 0x30
 8004ff6:	2b09      	cmp	r3, #9
 8004ff8:	d803      	bhi.n	8005002 <_svfiprintf_r+0x142>
 8004ffa:	200a      	movs	r0, #10
 8004ffc:	fb00 3202 	mla	r2, r0, r2, r3
 8005000:	e7f5      	b.n	8004fee <_svfiprintf_r+0x12e>
 8005002:	9205      	str	r2, [sp, #20]
 8005004:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80050a0 <_svfiprintf_r+0x1e0>
 8005008:	7821      	ldrb	r1, [r4, #0]
 800500a:	4640      	mov	r0, r8
 800500c:	2203      	movs	r2, #3
 800500e:	f000 f9df 	bl	80053d0 <memchr>
 8005012:	b138      	cbz	r0, 8005024 <_svfiprintf_r+0x164>
 8005014:	9a04      	ldr	r2, [sp, #16]
 8005016:	ebc8 0000 	rsb	r0, r8, r0
 800501a:	2340      	movs	r3, #64	; 0x40
 800501c:	4083      	lsls	r3, r0
 800501e:	4313      	orrs	r3, r2
 8005020:	9304      	str	r3, [sp, #16]
 8005022:	3401      	adds	r4, #1
 8005024:	7821      	ldrb	r1, [r4, #0]
 8005026:	481a      	ldr	r0, [pc, #104]	; (8005090 <_svfiprintf_r+0x1d0>)
 8005028:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800502c:	2206      	movs	r2, #6
 800502e:	f104 0801 	add.w	r8, r4, #1
 8005032:	f000 f9cd 	bl	80053d0 <memchr>
 8005036:	b188      	cbz	r0, 800505c <_svfiprintf_r+0x19c>
 8005038:	4b16      	ldr	r3, [pc, #88]	; (8005094 <_svfiprintf_r+0x1d4>)
 800503a:	b933      	cbnz	r3, 800504a <_svfiprintf_r+0x18a>
 800503c:	9b03      	ldr	r3, [sp, #12]
 800503e:	3307      	adds	r3, #7
 8005040:	f023 0307 	bic.w	r3, r3, #7
 8005044:	3308      	adds	r3, #8
 8005046:	9303      	str	r3, [sp, #12]
 8005048:	e013      	b.n	8005072 <_svfiprintf_r+0x1b2>
 800504a:	ab03      	add	r3, sp, #12
 800504c:	9300      	str	r3, [sp, #0]
 800504e:	4630      	mov	r0, r6
 8005050:	a904      	add	r1, sp, #16
 8005052:	462a      	mov	r2, r5
 8005054:	4b10      	ldr	r3, [pc, #64]	; (8005098 <_svfiprintf_r+0x1d8>)
 8005056:	f3af 8000 	nop.w
 800505a:	e007      	b.n	800506c <_svfiprintf_r+0x1ac>
 800505c:	ab03      	add	r3, sp, #12
 800505e:	9300      	str	r3, [sp, #0]
 8005060:	4630      	mov	r0, r6
 8005062:	a904      	add	r1, sp, #16
 8005064:	462a      	mov	r2, r5
 8005066:	4b0c      	ldr	r3, [pc, #48]	; (8005098 <_svfiprintf_r+0x1d8>)
 8005068:	f000 f892 	bl	8005190 <_printf_i>
 800506c:	1c42      	adds	r2, r0, #1
 800506e:	4607      	mov	r7, r0
 8005070:	d003      	beq.n	800507a <_svfiprintf_r+0x1ba>
 8005072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005074:	443b      	add	r3, r7
 8005076:	9309      	str	r3, [sp, #36]	; 0x24
 8005078:	e741      	b.n	8004efe <_svfiprintf_r+0x3e>
 800507a:	89ab      	ldrh	r3, [r5, #12]
 800507c:	065b      	lsls	r3, r3, #25
 800507e:	d401      	bmi.n	8005084 <_svfiprintf_r+0x1c4>
 8005080:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005082:	e001      	b.n	8005088 <_svfiprintf_r+0x1c8>
 8005084:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005088:	b01d      	add	sp, #116	; 0x74
 800508a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800508e:	bf00      	nop
 8005090:	080058b0 	.word	0x080058b0
 8005094:	00000000 	.word	0x00000000
 8005098:	08004e0d 	.word	0x08004e0d
 800509c:	080058a6 	.word	0x080058a6
 80050a0:	080058ac 	.word	0x080058ac

080050a4 <_printf_common>:
 80050a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050a8:	4691      	mov	r9, r2
 80050aa:	461f      	mov	r7, r3
 80050ac:	688a      	ldr	r2, [r1, #8]
 80050ae:	690b      	ldr	r3, [r1, #16]
 80050b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050b4:	4293      	cmp	r3, r2
 80050b6:	bfb8      	it	lt
 80050b8:	4613      	movlt	r3, r2
 80050ba:	f8c9 3000 	str.w	r3, [r9]
 80050be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050c2:	4606      	mov	r6, r0
 80050c4:	460c      	mov	r4, r1
 80050c6:	b112      	cbz	r2, 80050ce <_printf_common+0x2a>
 80050c8:	3301      	adds	r3, #1
 80050ca:	f8c9 3000 	str.w	r3, [r9]
 80050ce:	6823      	ldr	r3, [r4, #0]
 80050d0:	0699      	lsls	r1, r3, #26
 80050d2:	bf42      	ittt	mi
 80050d4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80050d8:	3302      	addmi	r3, #2
 80050da:	f8c9 3000 	strmi.w	r3, [r9]
 80050de:	6825      	ldr	r5, [r4, #0]
 80050e0:	f015 0506 	ands.w	r5, r5, #6
 80050e4:	d01c      	beq.n	8005120 <_printf_common+0x7c>
 80050e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80050ea:	6822      	ldr	r2, [r4, #0]
 80050ec:	3300      	adds	r3, #0
 80050ee:	bf18      	it	ne
 80050f0:	2301      	movne	r3, #1
 80050f2:	0692      	lsls	r2, r2, #26
 80050f4:	d51f      	bpl.n	8005136 <_printf_common+0x92>
 80050f6:	18e1      	adds	r1, r4, r3
 80050f8:	1c5a      	adds	r2, r3, #1
 80050fa:	2030      	movs	r0, #48	; 0x30
 80050fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005100:	4422      	add	r2, r4
 8005102:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005106:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800510a:	3302      	adds	r3, #2
 800510c:	e013      	b.n	8005136 <_printf_common+0x92>
 800510e:	4630      	mov	r0, r6
 8005110:	4639      	mov	r1, r7
 8005112:	f104 0219 	add.w	r2, r4, #25
 8005116:	2301      	movs	r3, #1
 8005118:	47c0      	blx	r8
 800511a:	3001      	adds	r0, #1
 800511c:	d007      	beq.n	800512e <_printf_common+0x8a>
 800511e:	3501      	adds	r5, #1
 8005120:	68e3      	ldr	r3, [r4, #12]
 8005122:	f8d9 2000 	ldr.w	r2, [r9]
 8005126:	1a9b      	subs	r3, r3, r2
 8005128:	429d      	cmp	r5, r3
 800512a:	dbf0      	blt.n	800510e <_printf_common+0x6a>
 800512c:	e7db      	b.n	80050e6 <_printf_common+0x42>
 800512e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005136:	4630      	mov	r0, r6
 8005138:	4639      	mov	r1, r7
 800513a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800513e:	47c0      	blx	r8
 8005140:	3001      	adds	r0, #1
 8005142:	d0f4      	beq.n	800512e <_printf_common+0x8a>
 8005144:	6822      	ldr	r2, [r4, #0]
 8005146:	f8d9 5000 	ldr.w	r5, [r9]
 800514a:	68e3      	ldr	r3, [r4, #12]
 800514c:	f002 0206 	and.w	r2, r2, #6
 8005150:	2a04      	cmp	r2, #4
 8005152:	bf08      	it	eq
 8005154:	1b5d      	subeq	r5, r3, r5
 8005156:	6922      	ldr	r2, [r4, #16]
 8005158:	68a3      	ldr	r3, [r4, #8]
 800515a:	bf0c      	ite	eq
 800515c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005160:	2500      	movne	r5, #0
 8005162:	4293      	cmp	r3, r2
 8005164:	bfc4      	itt	gt
 8005166:	1a9b      	subgt	r3, r3, r2
 8005168:	18ed      	addgt	r5, r5, r3
 800516a:	f04f 0900 	mov.w	r9, #0
 800516e:	45a9      	cmp	r9, r5
 8005170:	da0a      	bge.n	8005188 <_printf_common+0xe4>
 8005172:	4630      	mov	r0, r6
 8005174:	4639      	mov	r1, r7
 8005176:	f104 021a 	add.w	r2, r4, #26
 800517a:	2301      	movs	r3, #1
 800517c:	47c0      	blx	r8
 800517e:	3001      	adds	r0, #1
 8005180:	d0d5      	beq.n	800512e <_printf_common+0x8a>
 8005182:	f109 0901 	add.w	r9, r9, #1
 8005186:	e7f2      	b.n	800516e <_printf_common+0xca>
 8005188:	2000      	movs	r0, #0
 800518a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08005190 <_printf_i>:
 8005190:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005194:	460c      	mov	r4, r1
 8005196:	4617      	mov	r7, r2
 8005198:	7e22      	ldrb	r2, [r4, #24]
 800519a:	2a6e      	cmp	r2, #110	; 0x6e
 800519c:	4698      	mov	r8, r3
 800519e:	4606      	mov	r6, r0
 80051a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051a2:	f101 0143 	add.w	r1, r1, #67	; 0x43
 80051a6:	f000 80af 	beq.w	8005308 <_printf_i+0x178>
 80051aa:	d812      	bhi.n	80051d2 <_printf_i+0x42>
 80051ac:	2a63      	cmp	r2, #99	; 0x63
 80051ae:	d023      	beq.n	80051f8 <_printf_i+0x68>
 80051b0:	d80a      	bhi.n	80051c8 <_printf_i+0x38>
 80051b2:	2a00      	cmp	r2, #0
 80051b4:	f000 80bc 	beq.w	8005330 <_printf_i+0x1a0>
 80051b8:	2a58      	cmp	r2, #88	; 0x58
 80051ba:	f040 80cb 	bne.w	8005354 <_printf_i+0x1c4>
 80051be:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80051c2:	f8df e204 	ldr.w	lr, [pc, #516]	; 80053c8 <_printf_i+0x238>
 80051c6:	e057      	b.n	8005278 <_printf_i+0xe8>
 80051c8:	2a64      	cmp	r2, #100	; 0x64
 80051ca:	d01e      	beq.n	800520a <_printf_i+0x7a>
 80051cc:	2a69      	cmp	r2, #105	; 0x69
 80051ce:	d01c      	beq.n	800520a <_printf_i+0x7a>
 80051d0:	e0c0      	b.n	8005354 <_printf_i+0x1c4>
 80051d2:	2a73      	cmp	r2, #115	; 0x73
 80051d4:	f000 80b0 	beq.w	8005338 <_printf_i+0x1a8>
 80051d8:	d809      	bhi.n	80051ee <_printf_i+0x5e>
 80051da:	2a6f      	cmp	r2, #111	; 0x6f
 80051dc:	d02e      	beq.n	800523c <_printf_i+0xac>
 80051de:	2a70      	cmp	r2, #112	; 0x70
 80051e0:	f040 80b8 	bne.w	8005354 <_printf_i+0x1c4>
 80051e4:	6822      	ldr	r2, [r4, #0]
 80051e6:	f042 0220 	orr.w	r2, r2, #32
 80051ea:	6022      	str	r2, [r4, #0]
 80051ec:	e03f      	b.n	800526e <_printf_i+0xde>
 80051ee:	2a75      	cmp	r2, #117	; 0x75
 80051f0:	d024      	beq.n	800523c <_printf_i+0xac>
 80051f2:	2a78      	cmp	r2, #120	; 0x78
 80051f4:	d03b      	beq.n	800526e <_printf_i+0xde>
 80051f6:	e0ad      	b.n	8005354 <_printf_i+0x1c4>
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	1d11      	adds	r1, r2, #4
 80051fc:	6019      	str	r1, [r3, #0]
 80051fe:	6813      	ldr	r3, [r2, #0]
 8005200:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005204:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005208:	e0a8      	b.n	800535c <_printf_i+0x1cc>
 800520a:	6820      	ldr	r0, [r4, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005212:	d002      	beq.n	800521a <_printf_i+0x8a>
 8005214:	1d10      	adds	r0, r2, #4
 8005216:	6018      	str	r0, [r3, #0]
 8005218:	e008      	b.n	800522c <_printf_i+0x9c>
 800521a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800521e:	f102 0004 	add.w	r0, r2, #4
 8005222:	6018      	str	r0, [r3, #0]
 8005224:	d002      	beq.n	800522c <_printf_i+0x9c>
 8005226:	f9b2 3000 	ldrsh.w	r3, [r2]
 800522a:	e000      	b.n	800522e <_printf_i+0x9e>
 800522c:	6813      	ldr	r3, [r2, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	da3e      	bge.n	80052b0 <_printf_i+0x120>
 8005232:	222d      	movs	r2, #45	; 0x2d
 8005234:	425b      	negs	r3, r3
 8005236:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800523a:	e039      	b.n	80052b0 <_printf_i+0x120>
 800523c:	6820      	ldr	r0, [r4, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005244:	d002      	beq.n	800524c <_printf_i+0xbc>
 8005246:	1d10      	adds	r0, r2, #4
 8005248:	6018      	str	r0, [r3, #0]
 800524a:	e007      	b.n	800525c <_printf_i+0xcc>
 800524c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005250:	f102 0004 	add.w	r0, r2, #4
 8005254:	6018      	str	r0, [r3, #0]
 8005256:	d001      	beq.n	800525c <_printf_i+0xcc>
 8005258:	8813      	ldrh	r3, [r2, #0]
 800525a:	e000      	b.n	800525e <_printf_i+0xce>
 800525c:	6813      	ldr	r3, [r2, #0]
 800525e:	7e22      	ldrb	r2, [r4, #24]
 8005260:	f8df e164 	ldr.w	lr, [pc, #356]	; 80053c8 <_printf_i+0x238>
 8005264:	2a6f      	cmp	r2, #111	; 0x6f
 8005266:	bf0c      	ite	eq
 8005268:	2208      	moveq	r2, #8
 800526a:	220a      	movne	r2, #10
 800526c:	e01c      	b.n	80052a8 <_printf_i+0x118>
 800526e:	2278      	movs	r2, #120	; 0x78
 8005270:	f8df e158 	ldr.w	lr, [pc, #344]	; 80053cc <_printf_i+0x23c>
 8005274:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8005278:	6822      	ldr	r2, [r4, #0]
 800527a:	6818      	ldr	r0, [r3, #0]
 800527c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005280:	f100 0504 	add.w	r5, r0, #4
 8005284:	601d      	str	r5, [r3, #0]
 8005286:	d103      	bne.n	8005290 <_printf_i+0x100>
 8005288:	0655      	lsls	r5, r2, #25
 800528a:	d501      	bpl.n	8005290 <_printf_i+0x100>
 800528c:	8803      	ldrh	r3, [r0, #0]
 800528e:	e000      	b.n	8005292 <_printf_i+0x102>
 8005290:	6803      	ldr	r3, [r0, #0]
 8005292:	07d0      	lsls	r0, r2, #31
 8005294:	bf44      	itt	mi
 8005296:	f042 0220 	orrmi.w	r2, r2, #32
 800529a:	6022      	strmi	r2, [r4, #0]
 800529c:	b91b      	cbnz	r3, 80052a6 <_printf_i+0x116>
 800529e:	6822      	ldr	r2, [r4, #0]
 80052a0:	f022 0220 	bic.w	r2, r2, #32
 80052a4:	6022      	str	r2, [r4, #0]
 80052a6:	2210      	movs	r2, #16
 80052a8:	2000      	movs	r0, #0
 80052aa:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80052ae:	e002      	b.n	80052b6 <_printf_i+0x126>
 80052b0:	f8df e114 	ldr.w	lr, [pc, #276]	; 80053c8 <_printf_i+0x238>
 80052b4:	220a      	movs	r2, #10
 80052b6:	6865      	ldr	r5, [r4, #4]
 80052b8:	60a5      	str	r5, [r4, #8]
 80052ba:	2d00      	cmp	r5, #0
 80052bc:	bfa2      	ittt	ge
 80052be:	6820      	ldrge	r0, [r4, #0]
 80052c0:	f020 0004 	bicge.w	r0, r0, #4
 80052c4:	6020      	strge	r0, [r4, #0]
 80052c6:	b903      	cbnz	r3, 80052ca <_printf_i+0x13a>
 80052c8:	b165      	cbz	r5, 80052e4 <_printf_i+0x154>
 80052ca:	460d      	mov	r5, r1
 80052cc:	fbb3 f0f2 	udiv	r0, r3, r2
 80052d0:	fb02 3310 	mls	r3, r2, r0, r3
 80052d4:	f81e 3003 	ldrb.w	r3, [lr, r3]
 80052d8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80052dc:	4603      	mov	r3, r0
 80052de:	2800      	cmp	r0, #0
 80052e0:	d1f4      	bne.n	80052cc <_printf_i+0x13c>
 80052e2:	e000      	b.n	80052e6 <_printf_i+0x156>
 80052e4:	460d      	mov	r5, r1
 80052e6:	2a08      	cmp	r2, #8
 80052e8:	d10b      	bne.n	8005302 <_printf_i+0x172>
 80052ea:	6823      	ldr	r3, [r4, #0]
 80052ec:	07da      	lsls	r2, r3, #31
 80052ee:	d508      	bpl.n	8005302 <_printf_i+0x172>
 80052f0:	6923      	ldr	r3, [r4, #16]
 80052f2:	6862      	ldr	r2, [r4, #4]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	bfde      	ittt	le
 80052f8:	2330      	movle	r3, #48	; 0x30
 80052fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80052fe:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005302:	1b49      	subs	r1, r1, r5
 8005304:	6121      	str	r1, [r4, #16]
 8005306:	e02e      	b.n	8005366 <_printf_i+0x1d6>
 8005308:	6825      	ldr	r5, [r4, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	6960      	ldr	r0, [r4, #20]
 800530e:	f015 0f80 	tst.w	r5, #128	; 0x80
 8005312:	d003      	beq.n	800531c <_printf_i+0x18c>
 8005314:	1d15      	adds	r5, r2, #4
 8005316:	601d      	str	r5, [r3, #0]
 8005318:	6813      	ldr	r3, [r2, #0]
 800531a:	e008      	b.n	800532e <_printf_i+0x19e>
 800531c:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005320:	f102 0504 	add.w	r5, r2, #4
 8005324:	601d      	str	r5, [r3, #0]
 8005326:	6813      	ldr	r3, [r2, #0]
 8005328:	d001      	beq.n	800532e <_printf_i+0x19e>
 800532a:	8018      	strh	r0, [r3, #0]
 800532c:	e000      	b.n	8005330 <_printf_i+0x1a0>
 800532e:	6018      	str	r0, [r3, #0]
 8005330:	2300      	movs	r3, #0
 8005332:	6123      	str	r3, [r4, #16]
 8005334:	460d      	mov	r5, r1
 8005336:	e016      	b.n	8005366 <_printf_i+0x1d6>
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	1d11      	adds	r1, r2, #4
 800533c:	6019      	str	r1, [r3, #0]
 800533e:	6815      	ldr	r5, [r2, #0]
 8005340:	6862      	ldr	r2, [r4, #4]
 8005342:	4628      	mov	r0, r5
 8005344:	2100      	movs	r1, #0
 8005346:	f000 f843 	bl	80053d0 <memchr>
 800534a:	b108      	cbz	r0, 8005350 <_printf_i+0x1c0>
 800534c:	1b40      	subs	r0, r0, r5
 800534e:	6060      	str	r0, [r4, #4]
 8005350:	6863      	ldr	r3, [r4, #4]
 8005352:	e004      	b.n	800535e <_printf_i+0x1ce>
 8005354:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005358:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800535c:	2301      	movs	r3, #1
 800535e:	6123      	str	r3, [r4, #16]
 8005360:	2300      	movs	r3, #0
 8005362:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005366:	f8cd 8000 	str.w	r8, [sp]
 800536a:	4630      	mov	r0, r6
 800536c:	4621      	mov	r1, r4
 800536e:	aa03      	add	r2, sp, #12
 8005370:	463b      	mov	r3, r7
 8005372:	f7ff fe97 	bl	80050a4 <_printf_common>
 8005376:	3001      	adds	r0, #1
 8005378:	d102      	bne.n	8005380 <_printf_i+0x1f0>
 800537a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800537e:	e01f      	b.n	80053c0 <_printf_i+0x230>
 8005380:	4630      	mov	r0, r6
 8005382:	4639      	mov	r1, r7
 8005384:	462a      	mov	r2, r5
 8005386:	6923      	ldr	r3, [r4, #16]
 8005388:	47c0      	blx	r8
 800538a:	3001      	adds	r0, #1
 800538c:	d0f5      	beq.n	800537a <_printf_i+0x1ea>
 800538e:	6823      	ldr	r3, [r4, #0]
 8005390:	079b      	lsls	r3, r3, #30
 8005392:	d405      	bmi.n	80053a0 <_printf_i+0x210>
 8005394:	68e0      	ldr	r0, [r4, #12]
 8005396:	9b03      	ldr	r3, [sp, #12]
 8005398:	4298      	cmp	r0, r3
 800539a:	bfb8      	it	lt
 800539c:	4618      	movlt	r0, r3
 800539e:	e00f      	b.n	80053c0 <_printf_i+0x230>
 80053a0:	2500      	movs	r5, #0
 80053a2:	68e3      	ldr	r3, [r4, #12]
 80053a4:	9a03      	ldr	r2, [sp, #12]
 80053a6:	1a9b      	subs	r3, r3, r2
 80053a8:	429d      	cmp	r5, r3
 80053aa:	daf3      	bge.n	8005394 <_printf_i+0x204>
 80053ac:	4630      	mov	r0, r6
 80053ae:	4639      	mov	r1, r7
 80053b0:	f104 0219 	add.w	r2, r4, #25
 80053b4:	2301      	movs	r3, #1
 80053b6:	47c0      	blx	r8
 80053b8:	3001      	adds	r0, #1
 80053ba:	d0de      	beq.n	800537a <_printf_i+0x1ea>
 80053bc:	3501      	adds	r5, #1
 80053be:	e7f0      	b.n	80053a2 <_printf_i+0x212>
 80053c0:	b004      	add	sp, #16
 80053c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053c6:	bf00      	nop
 80053c8:	080058b7 	.word	0x080058b7
 80053cc:	080058c8 	.word	0x080058c8

080053d0 <memchr>:
 80053d0:	b510      	push	{r4, lr}
 80053d2:	b2c9      	uxtb	r1, r1
 80053d4:	4402      	add	r2, r0
 80053d6:	4290      	cmp	r0, r2
 80053d8:	4603      	mov	r3, r0
 80053da:	d006      	beq.n	80053ea <memchr+0x1a>
 80053dc:	781c      	ldrb	r4, [r3, #0]
 80053de:	428c      	cmp	r4, r1
 80053e0:	f100 0001 	add.w	r0, r0, #1
 80053e4:	d1f7      	bne.n	80053d6 <memchr+0x6>
 80053e6:	4618      	mov	r0, r3
 80053e8:	bd10      	pop	{r4, pc}
 80053ea:	2000      	movs	r0, #0
 80053ec:	bd10      	pop	{r4, pc}

080053ee <memmove>:
 80053ee:	4281      	cmp	r1, r0
 80053f0:	b510      	push	{r4, lr}
 80053f2:	eb01 0302 	add.w	r3, r1, r2
 80053f6:	d301      	bcc.n	80053fc <memmove+0xe>
 80053f8:	1e42      	subs	r2, r0, #1
 80053fa:	e00b      	b.n	8005414 <memmove+0x26>
 80053fc:	4298      	cmp	r0, r3
 80053fe:	d2fb      	bcs.n	80053f8 <memmove+0xa>
 8005400:	1881      	adds	r1, r0, r2
 8005402:	1ad2      	subs	r2, r2, r3
 8005404:	42d3      	cmn	r3, r2
 8005406:	d004      	beq.n	8005412 <memmove+0x24>
 8005408:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800540c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005410:	e7f8      	b.n	8005404 <memmove+0x16>
 8005412:	bd10      	pop	{r4, pc}
 8005414:	4299      	cmp	r1, r3
 8005416:	d004      	beq.n	8005422 <memmove+0x34>
 8005418:	f811 4b01 	ldrb.w	r4, [r1], #1
 800541c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005420:	e7f8      	b.n	8005414 <memmove+0x26>
 8005422:	bd10      	pop	{r4, pc}

08005424 <_free_r>:
 8005424:	b530      	push	{r4, r5, lr}
 8005426:	2900      	cmp	r1, #0
 8005428:	d03d      	beq.n	80054a6 <_free_r+0x82>
 800542a:	f851 2c04 	ldr.w	r2, [r1, #-4]
 800542e:	1f0b      	subs	r3, r1, #4
 8005430:	491d      	ldr	r1, [pc, #116]	; (80054a8 <_free_r+0x84>)
 8005432:	2a00      	cmp	r2, #0
 8005434:	bfb8      	it	lt
 8005436:	189b      	addlt	r3, r3, r2
 8005438:	680a      	ldr	r2, [r1, #0]
 800543a:	460c      	mov	r4, r1
 800543c:	b912      	cbnz	r2, 8005444 <_free_r+0x20>
 800543e:	605a      	str	r2, [r3, #4]
 8005440:	600b      	str	r3, [r1, #0]
 8005442:	bd30      	pop	{r4, r5, pc}
 8005444:	4293      	cmp	r3, r2
 8005446:	d20d      	bcs.n	8005464 <_free_r+0x40>
 8005448:	6819      	ldr	r1, [r3, #0]
 800544a:	1858      	adds	r0, r3, r1
 800544c:	4290      	cmp	r0, r2
 800544e:	bf01      	itttt	eq
 8005450:	585a      	ldreq	r2, [r3, r1]
 8005452:	1852      	addeq	r2, r2, r1
 8005454:	601a      	streq	r2, [r3, #0]
 8005456:	6842      	ldreq	r2, [r0, #4]
 8005458:	605a      	str	r2, [r3, #4]
 800545a:	6023      	str	r3, [r4, #0]
 800545c:	bd30      	pop	{r4, r5, pc}
 800545e:	4299      	cmp	r1, r3
 8005460:	d803      	bhi.n	800546a <_free_r+0x46>
 8005462:	460a      	mov	r2, r1
 8005464:	6851      	ldr	r1, [r2, #4]
 8005466:	2900      	cmp	r1, #0
 8005468:	d1f9      	bne.n	800545e <_free_r+0x3a>
 800546a:	6814      	ldr	r4, [r2, #0]
 800546c:	1915      	adds	r5, r2, r4
 800546e:	429d      	cmp	r5, r3
 8005470:	d10a      	bne.n	8005488 <_free_r+0x64>
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4423      	add	r3, r4
 8005476:	18d0      	adds	r0, r2, r3
 8005478:	4288      	cmp	r0, r1
 800547a:	6013      	str	r3, [r2, #0]
 800547c:	d113      	bne.n	80054a6 <_free_r+0x82>
 800547e:	6808      	ldr	r0, [r1, #0]
 8005480:	4403      	add	r3, r0
 8005482:	6013      	str	r3, [r2, #0]
 8005484:	684b      	ldr	r3, [r1, #4]
 8005486:	e00d      	b.n	80054a4 <_free_r+0x80>
 8005488:	d902      	bls.n	8005490 <_free_r+0x6c>
 800548a:	230c      	movs	r3, #12
 800548c:	6003      	str	r3, [r0, #0]
 800548e:	bd30      	pop	{r4, r5, pc}
 8005490:	681c      	ldr	r4, [r3, #0]
 8005492:	1918      	adds	r0, r3, r4
 8005494:	4288      	cmp	r0, r1
 8005496:	bf04      	itt	eq
 8005498:	6808      	ldreq	r0, [r1, #0]
 800549a:	6849      	ldreq	r1, [r1, #4]
 800549c:	6059      	str	r1, [r3, #4]
 800549e:	bf04      	itt	eq
 80054a0:	1900      	addeq	r0, r0, r4
 80054a2:	6018      	streq	r0, [r3, #0]
 80054a4:	6053      	str	r3, [r2, #4]
 80054a6:	bd30      	pop	{r4, r5, pc}
 80054a8:	200000f4 	.word	0x200000f4

080054ac <_malloc_r>:
 80054ac:	b570      	push	{r4, r5, r6, lr}
 80054ae:	1ccc      	adds	r4, r1, #3
 80054b0:	f024 0403 	bic.w	r4, r4, #3
 80054b4:	3408      	adds	r4, #8
 80054b6:	2c0c      	cmp	r4, #12
 80054b8:	bf38      	it	cc
 80054ba:	240c      	movcc	r4, #12
 80054bc:	2c00      	cmp	r4, #0
 80054be:	4606      	mov	r6, r0
 80054c0:	da03      	bge.n	80054ca <_malloc_r+0x1e>
 80054c2:	230c      	movs	r3, #12
 80054c4:	6033      	str	r3, [r6, #0]
 80054c6:	2000      	movs	r0, #0
 80054c8:	bd70      	pop	{r4, r5, r6, pc}
 80054ca:	428c      	cmp	r4, r1
 80054cc:	d3f9      	bcc.n	80054c2 <_malloc_r+0x16>
 80054ce:	4a20      	ldr	r2, [pc, #128]	; (8005550 <_malloc_r+0xa4>)
 80054d0:	6813      	ldr	r3, [r2, #0]
 80054d2:	4610      	mov	r0, r2
 80054d4:	4619      	mov	r1, r3
 80054d6:	b1a1      	cbz	r1, 8005502 <_malloc_r+0x56>
 80054d8:	680a      	ldr	r2, [r1, #0]
 80054da:	1b12      	subs	r2, r2, r4
 80054dc:	d40e      	bmi.n	80054fc <_malloc_r+0x50>
 80054de:	2a0b      	cmp	r2, #11
 80054e0:	d903      	bls.n	80054ea <_malloc_r+0x3e>
 80054e2:	600a      	str	r2, [r1, #0]
 80054e4:	188b      	adds	r3, r1, r2
 80054e6:	508c      	str	r4, [r1, r2]
 80054e8:	e01f      	b.n	800552a <_malloc_r+0x7e>
 80054ea:	428b      	cmp	r3, r1
 80054ec:	bf0d      	iteet	eq
 80054ee:	685a      	ldreq	r2, [r3, #4]
 80054f0:	684a      	ldrne	r2, [r1, #4]
 80054f2:	605a      	strne	r2, [r3, #4]
 80054f4:	6002      	streq	r2, [r0, #0]
 80054f6:	bf18      	it	ne
 80054f8:	460b      	movne	r3, r1
 80054fa:	e016      	b.n	800552a <_malloc_r+0x7e>
 80054fc:	460b      	mov	r3, r1
 80054fe:	6849      	ldr	r1, [r1, #4]
 8005500:	e7e9      	b.n	80054d6 <_malloc_r+0x2a>
 8005502:	4d14      	ldr	r5, [pc, #80]	; (8005554 <_malloc_r+0xa8>)
 8005504:	682b      	ldr	r3, [r5, #0]
 8005506:	b91b      	cbnz	r3, 8005510 <_malloc_r+0x64>
 8005508:	4630      	mov	r0, r6
 800550a:	f000 f84b 	bl	80055a4 <_sbrk_r>
 800550e:	6028      	str	r0, [r5, #0]
 8005510:	4630      	mov	r0, r6
 8005512:	4621      	mov	r1, r4
 8005514:	f000 f846 	bl	80055a4 <_sbrk_r>
 8005518:	1c42      	adds	r2, r0, #1
 800551a:	4603      	mov	r3, r0
 800551c:	d0d1      	beq.n	80054c2 <_malloc_r+0x16>
 800551e:	1cc5      	adds	r5, r0, #3
 8005520:	f025 0503 	bic.w	r5, r5, #3
 8005524:	4285      	cmp	r5, r0
 8005526:	d10a      	bne.n	800553e <_malloc_r+0x92>
 8005528:	601c      	str	r4, [r3, #0]
 800552a:	f103 000b 	add.w	r0, r3, #11
 800552e:	1d1a      	adds	r2, r3, #4
 8005530:	f020 0007 	bic.w	r0, r0, #7
 8005534:	1a82      	subs	r2, r0, r2
 8005536:	d00a      	beq.n	800554e <_malloc_r+0xa2>
 8005538:	4251      	negs	r1, r2
 800553a:	5099      	str	r1, [r3, r2]
 800553c:	bd70      	pop	{r4, r5, r6, pc}
 800553e:	4630      	mov	r0, r6
 8005540:	1ae9      	subs	r1, r5, r3
 8005542:	f000 f82f 	bl	80055a4 <_sbrk_r>
 8005546:	3001      	adds	r0, #1
 8005548:	d0bb      	beq.n	80054c2 <_malloc_r+0x16>
 800554a:	462b      	mov	r3, r5
 800554c:	e7ec      	b.n	8005528 <_malloc_r+0x7c>
 800554e:	bd70      	pop	{r4, r5, r6, pc}
 8005550:	200000f4 	.word	0x200000f4
 8005554:	200000f0 	.word	0x200000f0

08005558 <_realloc_r>:
 8005558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800555a:	4607      	mov	r7, r0
 800555c:	4615      	mov	r5, r2
 800555e:	460e      	mov	r6, r1
 8005560:	b921      	cbnz	r1, 800556c <_realloc_r+0x14>
 8005562:	4611      	mov	r1, r2
 8005564:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005568:	f7ff bfa0 	b.w	80054ac <_malloc_r>
 800556c:	b91a      	cbnz	r2, 8005576 <_realloc_r+0x1e>
 800556e:	f7ff ff59 	bl	8005424 <_free_r>
 8005572:	4628      	mov	r0, r5
 8005574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005576:	f000 f825 	bl	80055c4 <_malloc_usable_size_r>
 800557a:	42a8      	cmp	r0, r5
 800557c:	d20e      	bcs.n	800559c <_realloc_r+0x44>
 800557e:	4638      	mov	r0, r7
 8005580:	4629      	mov	r1, r5
 8005582:	f7ff ff93 	bl	80054ac <_malloc_r>
 8005586:	4604      	mov	r4, r0
 8005588:	b150      	cbz	r0, 80055a0 <_realloc_r+0x48>
 800558a:	4631      	mov	r1, r6
 800558c:	462a      	mov	r2, r5
 800558e:	f7ff fc0d 	bl	8004dac <memcpy>
 8005592:	4638      	mov	r0, r7
 8005594:	4631      	mov	r1, r6
 8005596:	f7ff ff45 	bl	8005424 <_free_r>
 800559a:	e001      	b.n	80055a0 <_realloc_r+0x48>
 800559c:	4630      	mov	r0, r6
 800559e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055a0:	4620      	mov	r0, r4
 80055a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080055a4 <_sbrk_r>:
 80055a4:	b538      	push	{r3, r4, r5, lr}
 80055a6:	4c06      	ldr	r4, [pc, #24]	; (80055c0 <_sbrk_r+0x1c>)
 80055a8:	2300      	movs	r3, #0
 80055aa:	4605      	mov	r5, r0
 80055ac:	4608      	mov	r0, r1
 80055ae:	6023      	str	r3, [r4, #0]
 80055b0:	f000 f812 	bl	80055d8 <_sbrk>
 80055b4:	1c43      	adds	r3, r0, #1
 80055b6:	d102      	bne.n	80055be <_sbrk_r+0x1a>
 80055b8:	6823      	ldr	r3, [r4, #0]
 80055ba:	b103      	cbz	r3, 80055be <_sbrk_r+0x1a>
 80055bc:	602b      	str	r3, [r5, #0]
 80055be:	bd38      	pop	{r3, r4, r5, pc}
 80055c0:	20000234 	.word	0x20000234

080055c4 <_malloc_usable_size_r>:
 80055c4:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80055c8:	2800      	cmp	r0, #0
 80055ca:	bfbe      	ittt	lt
 80055cc:	1809      	addlt	r1, r1, r0
 80055ce:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 80055d2:	18c0      	addlt	r0, r0, r3
 80055d4:	3804      	subs	r0, #4
 80055d6:	4770      	bx	lr

080055d8 <_sbrk>:
 80055d8:	4a04      	ldr	r2, [pc, #16]	; (80055ec <_sbrk+0x14>)
 80055da:	4905      	ldr	r1, [pc, #20]	; (80055f0 <_sbrk+0x18>)
 80055dc:	6813      	ldr	r3, [r2, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	bf08      	it	eq
 80055e2:	460b      	moveq	r3, r1
 80055e4:	4418      	add	r0, r3
 80055e6:	6010      	str	r0, [r2, #0]
 80055e8:	4618      	mov	r0, r3
 80055ea:	4770      	bx	lr
 80055ec:	200000f8 	.word	0x200000f8
 80055f0:	20000238 	.word	0x20000238

080055f4 <_init>:
 80055f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055f6:	bf00      	nop
 80055f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055fa:	bc08      	pop	{r3}
 80055fc:	469e      	mov	lr, r3
 80055fe:	4770      	bx	lr

08005600 <_fini>:
 8005600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005602:	bf00      	nop
 8005604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005606:	bc08      	pop	{r3}
 8005608:	469e      	mov	lr, r3
 800560a:	4770      	bx	lr
