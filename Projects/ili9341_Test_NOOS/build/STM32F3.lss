
build/STM32F3.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000006c 	.word	0x2000006c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005a60 	.word	0x08005a60

080001ac <frame_dummy>:
 80001ac:	4b08      	ldr	r3, [pc, #32]	; (80001d0 <frame_dummy+0x24>)
 80001ae:	b510      	push	{r4, lr}
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4808      	ldr	r0, [pc, #32]	; (80001d4 <frame_dummy+0x28>)
 80001b4:	4908      	ldr	r1, [pc, #32]	; (80001d8 <frame_dummy+0x2c>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	4808      	ldr	r0, [pc, #32]	; (80001dc <frame_dummy+0x30>)
 80001bc:	6803      	ldr	r3, [r0, #0]
 80001be:	b903      	cbnz	r3, 80001c2 <frame_dummy+0x16>
 80001c0:	bd10      	pop	{r4, pc}
 80001c2:	4b07      	ldr	r3, [pc, #28]	; (80001e0 <frame_dummy+0x34>)
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d0fb      	beq.n	80001c0 <frame_dummy+0x14>
 80001c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80001cc:	4718      	bx	r3
 80001ce:	bf00      	nop
 80001d0:	00000000 	.word	0x00000000
 80001d4:	08005a60 	.word	0x08005a60
 80001d8:	20000070 	.word	0x20000070
 80001dc:	2000006c 	.word	0x2000006c
 80001e0:	00000000 	.word	0x00000000

080001e4 <__aeabi_drsub>:
 80001e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e8:	e002      	b.n	80001f0 <__adddf3>
 80001ea:	bf00      	nop

080001ec <__aeabi_dsub>:
 80001ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f0 <__adddf3>:
 80001f0:	b530      	push	{r4, r5, lr}
 80001f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fa:	ea94 0f05 	teq	r4, r5
 80001fe:	bf08      	it	eq
 8000200:	ea90 0f02 	teqeq	r0, r2
 8000204:	bf1f      	itttt	ne
 8000206:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000212:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000216:	f000 80e2 	beq.w	80003de <__adddf3+0x1ee>
 800021a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000222:	bfb8      	it	lt
 8000224:	426d      	neglt	r5, r5
 8000226:	dd0c      	ble.n	8000242 <__adddf3+0x52>
 8000228:	442c      	add	r4, r5
 800022a:	ea80 0202 	eor.w	r2, r0, r2
 800022e:	ea81 0303 	eor.w	r3, r1, r3
 8000232:	ea82 0000 	eor.w	r0, r2, r0
 8000236:	ea83 0101 	eor.w	r1, r3, r1
 800023a:	ea80 0202 	eor.w	r2, r0, r2
 800023e:	ea81 0303 	eor.w	r3, r1, r3
 8000242:	2d36      	cmp	r5, #54	; 0x36
 8000244:	bf88      	it	hi
 8000246:	bd30      	pophi	{r4, r5, pc}
 8000248:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800024c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000250:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000254:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x70>
 800025a:	4240      	negs	r0, r0
 800025c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000260:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000264:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000268:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800026c:	d002      	beq.n	8000274 <__adddf3+0x84>
 800026e:	4252      	negs	r2, r2
 8000270:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000274:	ea94 0f05 	teq	r4, r5
 8000278:	f000 80a7 	beq.w	80003ca <__adddf3+0x1da>
 800027c:	f1a4 0401 	sub.w	r4, r4, #1
 8000280:	f1d5 0e20 	rsbs	lr, r5, #32
 8000284:	db0d      	blt.n	80002a2 <__adddf3+0xb2>
 8000286:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028a:	fa22 f205 	lsr.w	r2, r2, r5
 800028e:	1880      	adds	r0, r0, r2
 8000290:	f141 0100 	adc.w	r1, r1, #0
 8000294:	fa03 f20e 	lsl.w	r2, r3, lr
 8000298:	1880      	adds	r0, r0, r2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	4159      	adcs	r1, r3
 80002a0:	e00e      	b.n	80002c0 <__adddf3+0xd0>
 80002a2:	f1a5 0520 	sub.w	r5, r5, #32
 80002a6:	f10e 0e20 	add.w	lr, lr, #32
 80002aa:	2a01      	cmp	r2, #1
 80002ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b0:	bf28      	it	cs
 80002b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	18c0      	adds	r0, r0, r3
 80002bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c4:	d507      	bpl.n	80002d6 <__adddf3+0xe6>
 80002c6:	f04f 0e00 	mov.w	lr, #0
 80002ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002da:	d31b      	bcc.n	8000314 <__adddf3+0x124>
 80002dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e0:	d30c      	bcc.n	80002fc <__adddf3+0x10c>
 80002e2:	0849      	lsrs	r1, r1, #1
 80002e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002ec:	f104 0401 	add.w	r4, r4, #1
 80002f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f8:	f080 809a 	bcs.w	8000430 <__adddf3+0x240>
 80002fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000300:	bf08      	it	eq
 8000302:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000306:	f150 0000 	adcs.w	r0, r0, #0
 800030a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030e:	ea41 0105 	orr.w	r1, r1, r5
 8000312:	bd30      	pop	{r4, r5, pc}
 8000314:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000318:	4140      	adcs	r0, r0
 800031a:	eb41 0101 	adc.w	r1, r1, r1
 800031e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000322:	f1a4 0401 	sub.w	r4, r4, #1
 8000326:	d1e9      	bne.n	80002fc <__adddf3+0x10c>
 8000328:	f091 0f00 	teq	r1, #0
 800032c:	bf04      	itt	eq
 800032e:	4601      	moveq	r1, r0
 8000330:	2000      	moveq	r0, #0
 8000332:	fab1 f381 	clz	r3, r1
 8000336:	bf08      	it	eq
 8000338:	3320      	addeq	r3, #32
 800033a:	f1a3 030b 	sub.w	r3, r3, #11
 800033e:	f1b3 0220 	subs.w	r2, r3, #32
 8000342:	da0c      	bge.n	800035e <__adddf3+0x16e>
 8000344:	320c      	adds	r2, #12
 8000346:	dd08      	ble.n	800035a <__adddf3+0x16a>
 8000348:	f102 0c14 	add.w	ip, r2, #20
 800034c:	f1c2 020c 	rsb	r2, r2, #12
 8000350:	fa01 f00c 	lsl.w	r0, r1, ip
 8000354:	fa21 f102 	lsr.w	r1, r1, r2
 8000358:	e00c      	b.n	8000374 <__adddf3+0x184>
 800035a:	f102 0214 	add.w	r2, r2, #20
 800035e:	bfd8      	it	le
 8000360:	f1c2 0c20 	rsble	ip, r2, #32
 8000364:	fa01 f102 	lsl.w	r1, r1, r2
 8000368:	fa20 fc0c 	lsr.w	ip, r0, ip
 800036c:	bfdc      	itt	le
 800036e:	ea41 010c 	orrle.w	r1, r1, ip
 8000372:	4090      	lslle	r0, r2
 8000374:	1ae4      	subs	r4, r4, r3
 8000376:	bfa2      	ittt	ge
 8000378:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800037c:	4329      	orrge	r1, r5
 800037e:	bd30      	popge	{r4, r5, pc}
 8000380:	ea6f 0404 	mvn.w	r4, r4
 8000384:	3c1f      	subs	r4, #31
 8000386:	da1c      	bge.n	80003c2 <__adddf3+0x1d2>
 8000388:	340c      	adds	r4, #12
 800038a:	dc0e      	bgt.n	80003aa <__adddf3+0x1ba>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0220 	rsb	r2, r4, #32
 8000394:	fa20 f004 	lsr.w	r0, r0, r4
 8000398:	fa01 f302 	lsl.w	r3, r1, r2
 800039c:	ea40 0003 	orr.w	r0, r0, r3
 80003a0:	fa21 f304 	lsr.w	r3, r1, r4
 80003a4:	ea45 0103 	orr.w	r1, r5, r3
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	f1c4 040c 	rsb	r4, r4, #12
 80003ae:	f1c4 0220 	rsb	r2, r4, #32
 80003b2:	fa20 f002 	lsr.w	r0, r0, r2
 80003b6:	fa01 f304 	lsl.w	r3, r1, r4
 80003ba:	ea40 0003 	orr.w	r0, r0, r3
 80003be:	4629      	mov	r1, r5
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	fa21 f004 	lsr.w	r0, r1, r4
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f094 0f00 	teq	r4, #0
 80003ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d2:	bf06      	itte	eq
 80003d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d8:	3401      	addeq	r4, #1
 80003da:	3d01      	subne	r5, #1
 80003dc:	e74e      	b.n	800027c <__adddf3+0x8c>
 80003de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e2:	bf18      	it	ne
 80003e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e8:	d029      	beq.n	800043e <__adddf3+0x24e>
 80003ea:	ea94 0f05 	teq	r4, r5
 80003ee:	bf08      	it	eq
 80003f0:	ea90 0f02 	teqeq	r0, r2
 80003f4:	d005      	beq.n	8000402 <__adddf3+0x212>
 80003f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fa:	bf04      	itt	eq
 80003fc:	4619      	moveq	r1, r3
 80003fe:	4610      	moveq	r0, r2
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	ea91 0f03 	teq	r1, r3
 8000406:	bf1e      	ittt	ne
 8000408:	2100      	movne	r1, #0
 800040a:	2000      	movne	r0, #0
 800040c:	bd30      	popne	{r4, r5, pc}
 800040e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000412:	d105      	bne.n	8000420 <__adddf3+0x230>
 8000414:	0040      	lsls	r0, r0, #1
 8000416:	4149      	adcs	r1, r1
 8000418:	bf28      	it	cs
 800041a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000424:	bf3c      	itt	cc
 8000426:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042a:	bd30      	popcc	{r4, r5, pc}
 800042c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000430:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000434:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000438:	f04f 0000 	mov.w	r0, #0
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000442:	bf1a      	itte	ne
 8000444:	4619      	movne	r1, r3
 8000446:	4610      	movne	r0, r2
 8000448:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800044c:	bf1c      	itt	ne
 800044e:	460b      	movne	r3, r1
 8000450:	4602      	movne	r2, r0
 8000452:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000456:	bf06      	itte	eq
 8000458:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800045c:	ea91 0f03 	teqeq	r1, r3
 8000460:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	bf00      	nop

08000468 <__aeabi_ui2d>:
 8000468:	f090 0f00 	teq	r0, #0
 800046c:	bf04      	itt	eq
 800046e:	2100      	moveq	r1, #0
 8000470:	4770      	bxeq	lr
 8000472:	b530      	push	{r4, r5, lr}
 8000474:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000478:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800047c:	f04f 0500 	mov.w	r5, #0
 8000480:	f04f 0100 	mov.w	r1, #0
 8000484:	e750      	b.n	8000328 <__adddf3+0x138>
 8000486:	bf00      	nop

08000488 <__aeabi_i2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a0:	bf48      	it	mi
 80004a2:	4240      	negmi	r0, r0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e73e      	b.n	8000328 <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_f2d>:
 80004ac:	0042      	lsls	r2, r0, #1
 80004ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ba:	bf1f      	itttt	ne
 80004bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c8:	4770      	bxne	lr
 80004ca:	f092 0f00 	teq	r2, #0
 80004ce:	bf14      	ite	ne
 80004d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e4:	e720      	b.n	8000328 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_ul2d>:
 80004e8:	ea50 0201 	orrs.w	r2, r0, r1
 80004ec:	bf08      	it	eq
 80004ee:	4770      	bxeq	lr
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	f04f 0500 	mov.w	r5, #0
 80004f6:	e00a      	b.n	800050e <__aeabi_l2d+0x16>

080004f8 <__aeabi_l2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000506:	d502      	bpl.n	800050e <__aeabi_l2d+0x16>
 8000508:	4240      	negs	r0, r0
 800050a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000512:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000516:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051a:	f43f aedc 	beq.w	80002d6 <__adddf3+0xe6>
 800051e:	f04f 0203 	mov.w	r2, #3
 8000522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000526:	bf18      	it	ne
 8000528:	3203      	addne	r2, #3
 800052a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052e:	bf18      	it	ne
 8000530:	3203      	addne	r2, #3
 8000532:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	fa00 fc03 	lsl.w	ip, r0, r3
 800053e:	fa20 f002 	lsr.w	r0, r0, r2
 8000542:	fa01 fe03 	lsl.w	lr, r1, r3
 8000546:	ea40 000e 	orr.w	r0, r0, lr
 800054a:	fa21 f102 	lsr.w	r1, r1, r2
 800054e:	4414      	add	r4, r2
 8000550:	e6c1      	b.n	80002d6 <__adddf3+0xe6>
 8000552:	bf00      	nop

08000554 <__aeabi_dmul>:
 8000554:	b570      	push	{r4, r5, r6, lr}
 8000556:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000562:	bf1d      	ittte	ne
 8000564:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000568:	ea94 0f0c 	teqne	r4, ip
 800056c:	ea95 0f0c 	teqne	r5, ip
 8000570:	f000 f8de 	bleq	8000730 <__aeabi_dmul+0x1dc>
 8000574:	442c      	add	r4, r5
 8000576:	ea81 0603 	eor.w	r6, r1, r3
 800057a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000582:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000586:	bf18      	it	ne
 8000588:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800058c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000590:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000594:	d038      	beq.n	8000608 <__aeabi_dmul+0xb4>
 8000596:	fba0 ce02 	umull	ip, lr, r0, r2
 800059a:	f04f 0500 	mov.w	r5, #0
 800059e:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005aa:	f04f 0600 	mov.w	r6, #0
 80005ae:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b2:	f09c 0f00 	teq	ip, #0
 80005b6:	bf18      	it	ne
 80005b8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005bc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c8:	d204      	bcs.n	80005d4 <__aeabi_dmul+0x80>
 80005ca:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ce:	416d      	adcs	r5, r5
 80005d0:	eb46 0606 	adc.w	r6, r6, r6
 80005d4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005dc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005ec:	bf88      	it	hi
 80005ee:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f2:	d81e      	bhi.n	8000632 <__aeabi_dmul+0xde>
 80005f4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f8:	bf08      	it	eq
 80005fa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fe:	f150 0000 	adcs.w	r0, r0, #0
 8000602:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800060c:	ea46 0101 	orr.w	r1, r6, r1
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	ea81 0103 	eor.w	r1, r1, r3
 8000618:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800061c:	bfc2      	ittt	gt
 800061e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000622:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000626:	bd70      	popgt	{r4, r5, r6, pc}
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f04f 0e00 	mov.w	lr, #0
 8000630:	3c01      	subs	r4, #1
 8000632:	f300 80ab 	bgt.w	800078c <__aeabi_dmul+0x238>
 8000636:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063a:	bfde      	ittt	le
 800063c:	2000      	movle	r0, #0
 800063e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000642:	bd70      	pople	{r4, r5, r6, pc}
 8000644:	f1c4 0400 	rsb	r4, r4, #0
 8000648:	3c20      	subs	r4, #32
 800064a:	da35      	bge.n	80006b8 <__aeabi_dmul+0x164>
 800064c:	340c      	adds	r4, #12
 800064e:	dc1b      	bgt.n	8000688 <__aeabi_dmul+0x134>
 8000650:	f104 0414 	add.w	r4, r4, #20
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f305 	lsl.w	r3, r0, r5
 800065c:	fa20 f004 	lsr.w	r0, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800066c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000670:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000674:	fa21 f604 	lsr.w	r6, r1, r4
 8000678:	eb42 0106 	adc.w	r1, r2, r6
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f1c4 040c 	rsb	r4, r4, #12
 800068c:	f1c4 0520 	rsb	r5, r4, #32
 8000690:	fa00 f304 	lsl.w	r3, r0, r4
 8000694:	fa20 f005 	lsr.w	r0, r0, r5
 8000698:	fa01 f204 	lsl.w	r2, r1, r4
 800069c:	ea40 0002 	orr.w	r0, r0, r2
 80006a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	f141 0100 	adc.w	r1, r1, #0
 80006ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b0:	bf08      	it	eq
 80006b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b6:	bd70      	pop	{r4, r5, r6, pc}
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f205 	lsl.w	r2, r0, r5
 80006c0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c4:	fa20 f304 	lsr.w	r3, r0, r4
 80006c8:	fa01 f205 	lsl.w	r2, r1, r5
 80006cc:	ea43 0302 	orr.w	r3, r3, r2
 80006d0:	fa21 f004 	lsr.w	r0, r1, r4
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	fa21 f204 	lsr.w	r2, r1, r4
 80006dc:	ea20 0002 	bic.w	r0, r0, r2
 80006e0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e8:	bf08      	it	eq
 80006ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ee:	bd70      	pop	{r4, r5, r6, pc}
 80006f0:	f094 0f00 	teq	r4, #0
 80006f4:	d10f      	bne.n	8000716 <__aeabi_dmul+0x1c2>
 80006f6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fa:	0040      	lsls	r0, r0, #1
 80006fc:	eb41 0101 	adc.w	r1, r1, r1
 8000700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000704:	bf08      	it	eq
 8000706:	3c01      	subeq	r4, #1
 8000708:	d0f7      	beq.n	80006fa <__aeabi_dmul+0x1a6>
 800070a:	ea41 0106 	orr.w	r1, r1, r6
 800070e:	f095 0f00 	teq	r5, #0
 8000712:	bf18      	it	ne
 8000714:	4770      	bxne	lr
 8000716:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071a:	0052      	lsls	r2, r2, #1
 800071c:	eb43 0303 	adc.w	r3, r3, r3
 8000720:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000724:	bf08      	it	eq
 8000726:	3d01      	subeq	r5, #1
 8000728:	d0f7      	beq.n	800071a <__aeabi_dmul+0x1c6>
 800072a:	ea43 0306 	orr.w	r3, r3, r6
 800072e:	4770      	bx	lr
 8000730:	ea94 0f0c 	teq	r4, ip
 8000734:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000738:	bf18      	it	ne
 800073a:	ea95 0f0c 	teqne	r5, ip
 800073e:	d00c      	beq.n	800075a <__aeabi_dmul+0x206>
 8000740:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000744:	bf18      	it	ne
 8000746:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074a:	d1d1      	bne.n	80006f0 <__aeabi_dmul+0x19c>
 800074c:	ea81 0103 	eor.w	r1, r1, r3
 8000750:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000754:	f04f 0000 	mov.w	r0, #0
 8000758:	bd70      	pop	{r4, r5, r6, pc}
 800075a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075e:	bf06      	itte	eq
 8000760:	4610      	moveq	r0, r2
 8000762:	4619      	moveq	r1, r3
 8000764:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000768:	d019      	beq.n	800079e <__aeabi_dmul+0x24a>
 800076a:	ea94 0f0c 	teq	r4, ip
 800076e:	d102      	bne.n	8000776 <__aeabi_dmul+0x222>
 8000770:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000774:	d113      	bne.n	800079e <__aeabi_dmul+0x24a>
 8000776:	ea95 0f0c 	teq	r5, ip
 800077a:	d105      	bne.n	8000788 <__aeabi_dmul+0x234>
 800077c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000780:	bf1c      	itt	ne
 8000782:	4610      	movne	r0, r2
 8000784:	4619      	movne	r1, r3
 8000786:	d10a      	bne.n	800079e <__aeabi_dmul+0x24a>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000794:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a6:	bd70      	pop	{r4, r5, r6, pc}

080007a8 <__aeabi_ddiv>:
 80007a8:	b570      	push	{r4, r5, r6, lr}
 80007aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b6:	bf1d      	ittte	ne
 80007b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007bc:	ea94 0f0c 	teqne	r4, ip
 80007c0:	ea95 0f0c 	teqne	r5, ip
 80007c4:	f000 f8a7 	bleq	8000916 <__aeabi_ddiv+0x16e>
 80007c8:	eba4 0405 	sub.w	r4, r4, r5
 80007cc:	ea81 0e03 	eor.w	lr, r1, r3
 80007d0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d8:	f000 8088 	beq.w	80008ec <__aeabi_ddiv+0x144>
 80007dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007ec:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007fc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000800:	429d      	cmp	r5, r3
 8000802:	bf08      	it	eq
 8000804:	4296      	cmpeq	r6, r2
 8000806:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080e:	d202      	bcs.n	8000816 <__aeabi_ddiv+0x6e>
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	1ab6      	subs	r6, r6, r2
 8000818:	eb65 0503 	sbc.w	r5, r5, r3
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000826:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082a:	ebb6 0e02 	subs.w	lr, r6, r2
 800082e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000832:	bf22      	ittt	cs
 8000834:	1ab6      	subcs	r6, r6, r2
 8000836:	4675      	movcs	r5, lr
 8000838:	ea40 000c 	orrcs.w	r0, r0, ip
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	ebb6 0e02 	subs.w	lr, r6, r2
 8000846:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084a:	bf22      	ittt	cs
 800084c:	1ab6      	subcs	r6, r6, r2
 800084e:	4675      	movcs	r5, lr
 8000850:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	ebb6 0e02 	subs.w	lr, r6, r2
 800085e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000862:	bf22      	ittt	cs
 8000864:	1ab6      	subcs	r6, r6, r2
 8000866:	4675      	movcs	r5, lr
 8000868:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	ebb6 0e02 	subs.w	lr, r6, r2
 8000876:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087a:	bf22      	ittt	cs
 800087c:	1ab6      	subcs	r6, r6, r2
 800087e:	4675      	movcs	r5, lr
 8000880:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000884:	ea55 0e06 	orrs.w	lr, r5, r6
 8000888:	d018      	beq.n	80008bc <__aeabi_ddiv+0x114>
 800088a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000892:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000896:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a6:	d1c0      	bne.n	800082a <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	d10b      	bne.n	80008c6 <__aeabi_ddiv+0x11e>
 80008ae:	ea41 0100 	orr.w	r1, r1, r0
 80008b2:	f04f 0000 	mov.w	r0, #0
 80008b6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ba:	e7b6      	b.n	800082a <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	bf04      	itt	eq
 80008c2:	4301      	orreq	r1, r0
 80008c4:	2000      	moveq	r0, #0
 80008c6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ca:	bf88      	it	hi
 80008cc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d0:	f63f aeaf 	bhi.w	8000632 <__aeabi_dmul+0xde>
 80008d4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d8:	bf04      	itt	eq
 80008da:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e2:	f150 0000 	adcs.w	r0, r0, #0
 80008e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ea:	bd70      	pop	{r4, r5, r6, pc}
 80008ec:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f8:	bfc2      	ittt	gt
 80008fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000902:	bd70      	popgt	{r4, r5, r6, pc}
 8000904:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000908:	f04f 0e00 	mov.w	lr, #0
 800090c:	3c01      	subs	r4, #1
 800090e:	e690      	b.n	8000632 <__aeabi_dmul+0xde>
 8000910:	ea45 0e06 	orr.w	lr, r5, r6
 8000914:	e68d      	b.n	8000632 <__aeabi_dmul+0xde>
 8000916:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091a:	ea94 0f0c 	teq	r4, ip
 800091e:	bf08      	it	eq
 8000920:	ea95 0f0c 	teqeq	r5, ip
 8000924:	f43f af3b 	beq.w	800079e <__aeabi_dmul+0x24a>
 8000928:	ea94 0f0c 	teq	r4, ip
 800092c:	d10a      	bne.n	8000944 <__aeabi_ddiv+0x19c>
 800092e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000932:	f47f af34 	bne.w	800079e <__aeabi_dmul+0x24a>
 8000936:	ea95 0f0c 	teq	r5, ip
 800093a:	f47f af25 	bne.w	8000788 <__aeabi_dmul+0x234>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e72c      	b.n	800079e <__aeabi_dmul+0x24a>
 8000944:	ea95 0f0c 	teq	r5, ip
 8000948:	d106      	bne.n	8000958 <__aeabi_ddiv+0x1b0>
 800094a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094e:	f43f aefd 	beq.w	800074c <__aeabi_dmul+0x1f8>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e722      	b.n	800079e <__aeabi_dmul+0x24a>
 8000958:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800095c:	bf18      	it	ne
 800095e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000962:	f47f aec5 	bne.w	80006f0 <__aeabi_dmul+0x19c>
 8000966:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096a:	f47f af0d 	bne.w	8000788 <__aeabi_dmul+0x234>
 800096e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000972:	f47f aeeb 	bne.w	800074c <__aeabi_dmul+0x1f8>
 8000976:	e712      	b.n	800079e <__aeabi_dmul+0x24a>

08000978 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097e:	4a1e      	ldr	r2, [pc, #120]	; (80009f8 <HAL_MspInit+0x80>)
 8000980:	4b1d      	ldr	r3, [pc, #116]	; (80009f8 <HAL_MspInit+0x80>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	6193      	str	r3, [r2, #24]
 800098a:	4b1b      	ldr	r3, [pc, #108]	; (80009f8 <HAL_MspInit+0x80>)
 800098c:	699b      	ldr	r3, [r3, #24]
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000996:	2003      	movs	r0, #3
 8000998:	f001 fe50 	bl	800263c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800099c:	f06f 000b 	mvn.w	r0, #11
 80009a0:	2100      	movs	r1, #0
 80009a2:	2200      	movs	r2, #0
 80009a4:	f001 fe54 	bl	8002650 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80009a8:	f06f 000a 	mvn.w	r0, #10
 80009ac:	2100      	movs	r1, #0
 80009ae:	2200      	movs	r2, #0
 80009b0:	f001 fe4e 	bl	8002650 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80009b4:	f06f 0009 	mvn.w	r0, #9
 80009b8:	2100      	movs	r1, #0
 80009ba:	2200      	movs	r2, #0
 80009bc:	f001 fe48 	bl	8002650 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80009c0:	f06f 0004 	mvn.w	r0, #4
 80009c4:	2100      	movs	r1, #0
 80009c6:	2200      	movs	r2, #0
 80009c8:	f001 fe42 	bl	8002650 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80009cc:	f06f 0003 	mvn.w	r0, #3
 80009d0:	2100      	movs	r1, #0
 80009d2:	2200      	movs	r2, #0
 80009d4:	f001 fe3c 	bl	8002650 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009d8:	f06f 0001 	mvn.w	r0, #1
 80009dc:	210f      	movs	r1, #15
 80009de:	2200      	movs	r2, #0
 80009e0:	f001 fe36 	bl	8002650 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80009e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009e8:	210f      	movs	r1, #15
 80009ea:	2200      	movs	r2, #0
 80009ec:	f001 fe30 	bl	8002650 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40021000 	.word	0x40021000

080009fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08a      	sub	sp, #40	; 0x28
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a22      	ldr	r2, [pc, #136]	; (8000a94 <HAL_UART_MspInit+0x98>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d11c      	bne.n	8000a48 <HAL_UART_MspInit+0x4c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a0e:	4a22      	ldr	r2, [pc, #136]	; (8000a98 <HAL_UART_MspInit+0x9c>)
 8000a10:	4b21      	ldr	r3, [pc, #132]	; (8000a98 <HAL_UART_MspInit+0x9c>)
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a18:	6193      	str	r3, [r2, #24]
 8000a1a:	4b1f      	ldr	r3, [pc, #124]	; (8000a98 <HAL_UART_MspInit+0x9c>)
 8000a1c:	699b      	ldr	r3, [r3, #24]
 8000a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]

    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000a26:	2330      	movs	r3, #48	; 0x30
 8000a28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2300      	movs	r3, #0
 8000a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a36:	2307      	movs	r3, #7
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a3a:	f107 0314 	add.w	r3, r7, #20
 8000a3e:	4817      	ldr	r0, [pc, #92]	; (8000a9c <HAL_UART_MspInit+0xa0>)
 8000a40:	4619      	mov	r1, r3
 8000a42:	f003 fa1b 	bl	8003e7c <HAL_GPIO_Init>
 8000a46:	e021      	b.n	8000a8c <HAL_UART_MspInit+0x90>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a14      	ldr	r2, [pc, #80]	; (8000aa0 <HAL_UART_MspInit+0xa4>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d11c      	bne.n	8000a8c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a52:	4a11      	ldr	r2, [pc, #68]	; (8000a98 <HAL_UART_MspInit+0x9c>)
 8000a54:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <HAL_UART_MspInit+0x9c>)
 8000a56:	69db      	ldr	r3, [r3, #28]
 8000a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a5c:	61d3      	str	r3, [r2, #28]
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <HAL_UART_MspInit+0x9c>)
 8000a60:	69db      	ldr	r3, [r3, #28]
 8000a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a6a:	230c      	movs	r3, #12
 8000a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a76:	2300      	movs	r3, #0
 8000a78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a7a:	2307      	movs	r3, #7
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a86:	4619      	mov	r1, r3
 8000a88:	f003 f9f8 	bl	8003e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a8c:	3728      	adds	r7, #40	; 0x28
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40013800 	.word	0x40013800
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	48000800 	.word	0x48000800
 8000aa0:	40004400 	.word	0x40004400

08000aa4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08c      	sub	sp, #48	; 0x30
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8000ab4:	2019      	movs	r0, #25
 8000ab6:	6879      	ldr	r1, [r7, #4]
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f001 fdc9 	bl	8002650 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8000abe:	2019      	movs	r0, #25
 8000ac0:	f001 fde2 	bl	8002688 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ac4:	4a1e      	ldr	r2, [pc, #120]	; (8000b40 <HAL_InitTick+0x9c>)
 8000ac6:	4b1e      	ldr	r3, [pc, #120]	; (8000b40 <HAL_InitTick+0x9c>)
 8000ac8:	699b      	ldr	r3, [r3, #24]
 8000aca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ace:	6193      	str	r3, [r2, #24]
 8000ad0:	4b1b      	ldr	r3, [pc, #108]	; (8000b40 <HAL_InitTick+0x9c>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000adc:	f107 0214 	add.w	r2, r7, #20
 8000ae0:	f107 0310 	add.w	r3, r7, #16
 8000ae4:	4610      	mov	r0, r2
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	f003 f998 	bl	8003e1c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000aec:	f003 f974 	bl	8003dd8 <HAL_RCC_GetPCLK2Freq>
 8000af0:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000af4:	4a13      	ldr	r2, [pc, #76]	; (8000b44 <HAL_InitTick+0xa0>)
 8000af6:	fba2 2303 	umull	r2, r3, r2, r3
 8000afa:	0c9b      	lsrs	r3, r3, #18
 8000afc:	3b01      	subs	r3, #1
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b00:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <HAL_InitTick+0xa4>)
 8000b02:	4a12      	ldr	r2, [pc, #72]	; (8000b4c <HAL_InitTick+0xa8>)
 8000b04:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000b06:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <HAL_InitTick+0xa4>)
 8000b08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b0c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b0e:	4a0e      	ldr	r2, [pc, #56]	; (8000b48 <HAL_InitTick+0xa4>)
 8000b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b12:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <HAL_InitTick+0xa4>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <HAL_InitTick+0xa4>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000b20:	4809      	ldr	r0, [pc, #36]	; (8000b48 <HAL_InitTick+0xa4>)
 8000b22:	f003 fe1f 	bl	8004764 <HAL_TIM_Base_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d104      	bne.n	8000b36 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000b2c:	4806      	ldr	r0, [pc, #24]	; (8000b48 <HAL_InitTick+0xa4>)
 8000b2e:	f003 fe4f 	bl	80047d0 <HAL_TIM_Base_Start_IT>
 8000b32:	4603      	mov	r3, r0
 8000b34:	e000      	b.n	8000b38 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3730      	adds	r7, #48	; 0x30
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40021000 	.word	0x40021000
 8000b44:	431bde83 	.word	0x431bde83
 8000b48:	20000098 	.word	0x20000098
 8000b4c:	40012c00 	.word	0x40012c00

08000b50 <main>:
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);


int main(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b0a2      	sub	sp, #136	; 0x88
 8000b54:	af02      	add	r7, sp, #8

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b56:	f001 fc5d 	bl	8002414 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000b5a:	f000 fc09 	bl	8001370 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b5e:	f000 fc7d 	bl	800145c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000b62:	f000 fc4d 	bl	8001400 <MX_USART1_UART_Init>
  LCD_SPI_Init();
 8000b66:	f000 fd1f 	bl	80015a8 <LCD_SPI_Init>

  //SEGGER_SYSVIEW_Conf();
  //SEGGER_SYSVIEW_Start(); // start SystemView

  ILI9341_Init();//initial driver setup to drive ili9341
 8000b6a:	f001 f8af 	bl	8001ccc <ILI9341_Init>
  /* Infinite loop */

  while (1)
  {
//----------------------------------------------------------PERFORMANCE TEST
		ILI9341_Fill_Screen(WHITE);
 8000b6e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000b72:	f001 fa4f 	bl	8002014 <ILI9341_Fill_Screen>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000b76:	2003      	movs	r0, #3
 8000b78:	f001 f84e 	bl	8001c18 <ILI9341_Set_Rotation>
		ILI9341_Draw_Text("FPS TEST, 40 loop 2 screens", 10, 10, BLACK, 1, WHITE);
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	9300      	str	r3, [sp, #0]
 8000b80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b84:	9301      	str	r3, [sp, #4]
 8000b86:	4896      	ldr	r0, [pc, #600]	; (8000de0 <main+0x290>)
 8000b88:	210a      	movs	r1, #10
 8000b8a:	220a      	movs	r2, #10
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	f000 ff4d 	bl	8001a2c <ILI9341_Draw_Text>
		HAL_Delay(2000);
 8000b92:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b96:	f001 fc6d 	bl	8002474 <HAL_Delay>
		ILI9341_Fill_Screen(WHITE);
 8000b9a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000b9e:	f001 fa39 	bl	8002014 <ILI9341_Fill_Screen>

		uint32_t Timer_Counter = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	677b      	str	r3, [r7, #116]	; 0x74
		uint32_t j = 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	67fb      	str	r3, [r7, #124]	; 0x7c
		uint16_t i = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

		for(j = 0; j < 2; j++)
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000bb4:	e017      	b.n	8000be6 <main+0x96>
		{
			//HAL_TIM_Base_Start(&htim1);
			for(i = 0; i < 10; i++)
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8000bbc:	e00c      	b.n	8000bd8 <main+0x88>
			{
				ILI9341_Fill_Screen(RED);
 8000bbe:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000bc2:	f001 fa27 	bl	8002014 <ILI9341_Fill_Screen>
				ILI9341_Fill_Screen(DARKGREEN);
 8000bc6:	f44f 7078 	mov.w	r0, #992	; 0x3e0
 8000bca:	f001 fa23 	bl	8002014 <ILI9341_Fill_Screen>
		uint16_t i = 0;

		for(j = 0; j < 2; j++)
		{
			//HAL_TIM_Base_Start(&htim1);
			for(i = 0; i < 10; i++)
 8000bce:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8000bd8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8000bdc:	2b09      	cmp	r3, #9
 8000bde:	d9ee      	bls.n	8000bbe <main+0x6e>

		uint32_t Timer_Counter = 0;
		uint32_t j = 0;
		uint16_t i = 0;

		for(j = 0; j < 2; j++)
 8000be0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000be2:	3301      	adds	r3, #1
 8000be4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000be6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d9e4      	bls.n	8000bb6 <main+0x66>
			//20.000 per second!
			//HAL_TIM_Base_Stop(&htim1);
			//Timer_Counter += __HAL_TIM_GET_COUNTER(&htim1);
			//__HAL_TIM_SET_COUNTER(&htim1, 0);
		}
		Timer_Counter = 444;
 8000bec:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 8000bf0:	677b      	str	r3, [r7, #116]	; 0x74

		char counter_buff[30];
		ILI9341_Fill_Screen(WHITE);
 8000bf2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000bf6:	f001 fa0d 	bl	8002014 <ILI9341_Fill_Screen>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000bfa:	2003      	movs	r0, #3
 8000bfc:	f001 f80c 	bl	8001c18 <ILI9341_Set_Rotation>
		sprintf(counter_buff, "Timer counter value: %d", (int)Timer_Counter*2);
 8000c00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000c08:	4610      	mov	r0, r2
 8000c0a:	4976      	ldr	r1, [pc, #472]	; (8000de4 <main+0x294>)
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	f004 fb0f 	bl	8005230 <siprintf>
		ILI9341_Draw_Text(counter_buff, 10, 10, BLACK, 1, WHITE);
 8000c12:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000c16:	2301      	movs	r3, #1
 8000c18:	9300      	str	r3, [sp, #0]
 8000c1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c1e:	9301      	str	r3, [sp, #4]
 8000c20:	4610      	mov	r0, r2
 8000c22:	210a      	movs	r1, #10
 8000c24:	220a      	movs	r2, #10
 8000c26:	2300      	movs	r3, #0
 8000c28:	f000 ff00 	bl	8001a2c <ILI9341_Draw_Text>

		double seconds_passed = 2*((float)Timer_Counter / 20000);
 8000c2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000c2e:	ee07 3a90 	vmov	s15, r3
 8000c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c36:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8000de8 <main+0x298>
 8000c3a:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8000c3e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000c42:	ee17 0a90 	vmov	r0, s15
 8000c46:	f7ff fc31 	bl	80004ac <__aeabi_f2d>
 8000c4a:	4602      	mov	r2, r0
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
		sprintf(counter_buff, "Time: %.3f Sec", seconds_passed);
 8000c52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c56:	4618      	mov	r0, r3
 8000c58:	4964      	ldr	r1, [pc, #400]	; (8000dec <main+0x29c>)
 8000c5a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8000c5e:	f004 fae7 	bl	8005230 <siprintf>
		ILI9341_Draw_Text(counter_buff, 10, 30, BLACK, 2, WHITE);
 8000c62:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000c66:	2302      	movs	r3, #2
 8000c68:	9300      	str	r3, [sp, #0]
 8000c6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c6e:	9301      	str	r3, [sp, #4]
 8000c70:	4610      	mov	r0, r2
 8000c72:	210a      	movs	r1, #10
 8000c74:	221e      	movs	r2, #30
 8000c76:	2300      	movs	r3, #0
 8000c78:	f000 fed8 	bl	8001a2c <ILI9341_Draw_Text>

		double timer_float = 20/(((float)Timer_Counter)/20000);	//Frames per sec
 8000c7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000c7e:	ee07 3a90 	vmov	s15, r3
 8000c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c86:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8000de8 <main+0x298>
 8000c8a:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8000c8e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x34
 8000c92:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8000c96:	ee17 0a90 	vmov	r0, s15
 8000c9a:	f7ff fc07 	bl	80004ac <__aeabi_f2d>
 8000c9e:	4602      	mov	r2, r0
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

		sprintf(counter_buff, "FPS:  %.2f", timer_float);
 8000ca6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000caa:	4618      	mov	r0, r3
 8000cac:	4950      	ldr	r1, [pc, #320]	; (8000df0 <main+0x2a0>)
 8000cae:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8000cb2:	f004 fabd 	bl	8005230 <siprintf>
		ILI9341_Draw_Text(counter_buff, 10, 50, BLACK, 2, WHITE);
 8000cb6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000cba:	2302      	movs	r3, #2
 8000cbc:	9300      	str	r3, [sp, #0]
 8000cbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cc2:	9301      	str	r3, [sp, #4]
 8000cc4:	4610      	mov	r0, r2
 8000cc6:	210a      	movs	r1, #10
 8000cc8:	2232      	movs	r2, #50	; 0x32
 8000cca:	2300      	movs	r3, #0
 8000ccc:	f000 feae 	bl	8001a2c <ILI9341_Draw_Text>
		double MB_PS = timer_float*240*320*2/1000000;
 8000cd0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8000cd4:	f04f 0200 	mov.w	r2, #0
 8000cd8:	4b46      	ldr	r3, [pc, #280]	; (8000df4 <main+0x2a4>)
 8000cda:	f7ff fc3b 	bl	8000554 <__aeabi_dmul>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	4610      	mov	r0, r2
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	f04f 0200 	mov.w	r2, #0
 8000cea:	4b43      	ldr	r3, [pc, #268]	; (8000df8 <main+0x2a8>)
 8000cec:	f7ff fc32 	bl	8000554 <__aeabi_dmul>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	4610      	mov	r0, r2
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	f7ff fa7a 	bl	80001f0 <__adddf3>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	460b      	mov	r3, r1
 8000d00:	4610      	mov	r0, r2
 8000d02:	4619      	mov	r1, r3
 8000d04:	a334      	add	r3, pc, #208	; (adr r3, 8000dd8 <main+0x288>)
 8000d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d0a:	f7ff fd4d 	bl	80007a8 <__aeabi_ddiv>
 8000d0e:	4602      	mov	r2, r0
 8000d10:	460b      	mov	r3, r1
 8000d12:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
		sprintf(counter_buff, "MB/S: %.2f", MB_PS);
 8000d16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	4937      	ldr	r1, [pc, #220]	; (8000dfc <main+0x2ac>)
 8000d1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8000d22:	f004 fa85 	bl	8005230 <siprintf>
		ILI9341_Draw_Text(counter_buff, 10, 70, BLACK, 2, WHITE);
 8000d26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	9300      	str	r3, [sp, #0]
 8000d2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d32:	9301      	str	r3, [sp, #4]
 8000d34:	4610      	mov	r0, r2
 8000d36:	210a      	movs	r1, #10
 8000d38:	2246      	movs	r2, #70	; 0x46
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	f000 fe76 	bl	8001a2c <ILI9341_Draw_Text>
		double SPI_utilized_percentage = (MB_PS/(6.25 ))*100;		//50mbits / 8 bits
 8000d40:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8000d44:	f04f 0200 	mov.w	r2, #0
 8000d48:	4b2d      	ldr	r3, [pc, #180]	; (8000e00 <main+0x2b0>)
 8000d4a:	f7ff fd2d 	bl	80007a8 <__aeabi_ddiv>
 8000d4e:	4602      	mov	r2, r0
 8000d50:	460b      	mov	r3, r1
 8000d52:	4610      	mov	r0, r2
 8000d54:	4619      	mov	r1, r3
 8000d56:	f04f 0200 	mov.w	r2, #0
 8000d5a:	4b2a      	ldr	r3, [pc, #168]	; (8000e04 <main+0x2b4>)
 8000d5c:	f7ff fbfa 	bl	8000554 <__aeabi_dmul>
 8000d60:	4602      	mov	r2, r0
 8000d62:	460b      	mov	r3, r1
 8000d64:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		sprintf(counter_buff, "SPI Utilized: %.2f", SPI_utilized_percentage);
 8000d68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	4926      	ldr	r1, [pc, #152]	; (8000e08 <main+0x2b8>)
 8000d70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8000d74:	f004 fa5c 	bl	8005230 <siprintf>
		ILI9341_Draw_Text(counter_buff, 10, 90, BLACK, 2, WHITE);
 8000d78:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	9300      	str	r3, [sp, #0]
 8000d80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d84:	9301      	str	r3, [sp, #4]
 8000d86:	4610      	mov	r0, r2
 8000d88:	210a      	movs	r1, #10
 8000d8a:	225a      	movs	r2, #90	; 0x5a
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	f000 fe4d 	bl	8001a2c <ILI9341_Draw_Text>
		HAL_Delay(10000);
 8000d92:	f242 7010 	movw	r0, #10000	; 0x2710
 8000d96:	f001 fb6d 	bl	8002474 <HAL_Delay>
		static uint16_t y = 0;

		char Temp_Buffer_text[40];

//----------------------------------------------------------COUNTING MULTIPLE SEGMENTS
		ILI9341_Fill_Screen(WHITE);
 8000d9a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000d9e:	f001 f939 	bl	8002014 <ILI9341_Fill_Screen>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000da2:	2003      	movs	r0, #3
 8000da4:	f000 ff38 	bl	8001c18 <ILI9341_Set_Rotation>
		ILI9341_Draw_Text("Counting multiple segments at once", 10, 10, BLACK, 1, WHITE);
 8000da8:	2301      	movs	r3, #1
 8000daa:	9300      	str	r3, [sp, #0]
 8000dac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000db0:	9301      	str	r3, [sp, #4]
 8000db2:	4816      	ldr	r0, [pc, #88]	; (8000e0c <main+0x2bc>)
 8000db4:	210a      	movs	r1, #10
 8000db6:	220a      	movs	r2, #10
 8000db8:	2300      	movs	r3, #0
 8000dba:	f000 fe37 	bl	8001a2c <ILI9341_Draw_Text>
		HAL_Delay(2000);
 8000dbe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000dc2:	f001 fb57 	bl	8002474 <HAL_Delay>
		ILI9341_Fill_Screen(WHITE);
 8000dc6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000dca:	f001 f923 	bl	8002014 <ILI9341_Fill_Screen>


		for(i = 0; i <= 10; i++)
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8000dd4:	e0b0      	b.n	8000f38 <main+0x3e8>
 8000dd6:	bf00      	nop
 8000dd8:	00000000 	.word	0x00000000
 8000ddc:	412e8480 	.word	0x412e8480
 8000de0:	08005a78 	.word	0x08005a78
 8000de4:	08005a94 	.word	0x08005a94
 8000de8:	469c4000 	.word	0x469c4000
 8000dec:	08005aac 	.word	0x08005aac
 8000df0:	08005abc 	.word	0x08005abc
 8000df4:	406e0000 	.word	0x406e0000
 8000df8:	40740000 	.word	0x40740000
 8000dfc:	08005ac8 	.word	0x08005ac8
 8000e00:	40190000 	.word	0x40190000
 8000e04:	40590000 	.word	0x40590000
 8000e08:	08005ad4 	.word	0x08005ad4
 8000e0c:	08005ae8 	.word	0x08005ae8
		{
		sprintf(Temp_Buffer_text, "Counting: %d", i);
 8000e10:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8000e14:	463a      	mov	r2, r7
 8000e16:	4610      	mov	r0, r2
 8000e18:	49cb      	ldr	r1, [pc, #812]	; (8001148 <main+0x5f8>)
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	f004 fa08 	bl	8005230 <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, 10, 10, BLACK, 2, WHITE);
 8000e20:	463a      	mov	r2, r7
 8000e22:	2302      	movs	r3, #2
 8000e24:	9300      	str	r3, [sp, #0]
 8000e26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e2a:	9301      	str	r3, [sp, #4]
 8000e2c:	4610      	mov	r0, r2
 8000e2e:	210a      	movs	r1, #10
 8000e30:	220a      	movs	r2, #10
 8000e32:	2300      	movs	r3, #0
 8000e34:	f000 fdfa 	bl	8001a2c <ILI9341_Draw_Text>
		ILI9341_Draw_Text(Temp_Buffer_text, 10, 30, BLUE, 2, WHITE);
 8000e38:	463a      	mov	r2, r7
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	9300      	str	r3, [sp, #0]
 8000e3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e42:	9301      	str	r3, [sp, #4]
 8000e44:	4610      	mov	r0, r2
 8000e46:	210a      	movs	r1, #10
 8000e48:	221e      	movs	r2, #30
 8000e4a:	231f      	movs	r3, #31
 8000e4c:	f000 fdee 	bl	8001a2c <ILI9341_Draw_Text>
		ILI9341_Draw_Text(Temp_Buffer_text, 10, 50, RED, 2, WHITE);
 8000e50:	463a      	mov	r2, r7
 8000e52:	2302      	movs	r3, #2
 8000e54:	9300      	str	r3, [sp, #0]
 8000e56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e5a:	9301      	str	r3, [sp, #4]
 8000e5c:	4610      	mov	r0, r2
 8000e5e:	210a      	movs	r1, #10
 8000e60:	2232      	movs	r2, #50	; 0x32
 8000e62:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000e66:	f000 fde1 	bl	8001a2c <ILI9341_Draw_Text>
		ILI9341_Draw_Text(Temp_Buffer_text, 10, 70, GREEN, 2, WHITE);
 8000e6a:	463a      	mov	r2, r7
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e74:	9301      	str	r3, [sp, #4]
 8000e76:	4610      	mov	r0, r2
 8000e78:	210a      	movs	r1, #10
 8000e7a:	2246      	movs	r2, #70	; 0x46
 8000e7c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000e80:	f000 fdd4 	bl	8001a2c <ILI9341_Draw_Text>
		ILI9341_Draw_Text(Temp_Buffer_text, 10, 90, BLACK, 2, WHITE);
 8000e84:	463a      	mov	r2, r7
 8000e86:	2302      	movs	r3, #2
 8000e88:	9300      	str	r3, [sp, #0]
 8000e8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e8e:	9301      	str	r3, [sp, #4]
 8000e90:	4610      	mov	r0, r2
 8000e92:	210a      	movs	r1, #10
 8000e94:	225a      	movs	r2, #90	; 0x5a
 8000e96:	2300      	movs	r3, #0
 8000e98:	f000 fdc8 	bl	8001a2c <ILI9341_Draw_Text>
		ILI9341_Draw_Text(Temp_Buffer_text, 10, 110, BLUE, 2, WHITE);
 8000e9c:	463a      	mov	r2, r7
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	9300      	str	r3, [sp, #0]
 8000ea2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ea6:	9301      	str	r3, [sp, #4]
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	210a      	movs	r1, #10
 8000eac:	226e      	movs	r2, #110	; 0x6e
 8000eae:	231f      	movs	r3, #31
 8000eb0:	f000 fdbc 	bl	8001a2c <ILI9341_Draw_Text>
		ILI9341_Draw_Text(Temp_Buffer_text, 10, 130, RED, 2, WHITE);
 8000eb4:	463a      	mov	r2, r7
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	9300      	str	r3, [sp, #0]
 8000eba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ebe:	9301      	str	r3, [sp, #4]
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	210a      	movs	r1, #10
 8000ec4:	2282      	movs	r2, #130	; 0x82
 8000ec6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000eca:	f000 fdaf 	bl	8001a2c <ILI9341_Draw_Text>
		ILI9341_Draw_Text(Temp_Buffer_text, 10, 150, GREEN, 2, WHITE);
 8000ece:	463a      	mov	r2, r7
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ed8:	9301      	str	r3, [sp, #4]
 8000eda:	4610      	mov	r0, r2
 8000edc:	210a      	movs	r1, #10
 8000ede:	2296      	movs	r2, #150	; 0x96
 8000ee0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000ee4:	f000 fda2 	bl	8001a2c <ILI9341_Draw_Text>
		ILI9341_Draw_Text(Temp_Buffer_text, 10, 170, WHITE, 2, BLACK);
 8000ee8:	463a      	mov	r2, r7
 8000eea:	2302      	movs	r3, #2
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	2300      	movs	r3, #0
 8000ef0:	9301      	str	r3, [sp, #4]
 8000ef2:	4610      	mov	r0, r2
 8000ef4:	210a      	movs	r1, #10
 8000ef6:	22aa      	movs	r2, #170	; 0xaa
 8000ef8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000efc:	f000 fd96 	bl	8001a2c <ILI9341_Draw_Text>
		ILI9341_Draw_Text(Temp_Buffer_text, 10, 190, BLUE, 2, BLACK);
 8000f00:	463a      	mov	r2, r7
 8000f02:	2302      	movs	r3, #2
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	2300      	movs	r3, #0
 8000f08:	9301      	str	r3, [sp, #4]
 8000f0a:	4610      	mov	r0, r2
 8000f0c:	210a      	movs	r1, #10
 8000f0e:	22be      	movs	r2, #190	; 0xbe
 8000f10:	231f      	movs	r3, #31
 8000f12:	f000 fd8b 	bl	8001a2c <ILI9341_Draw_Text>
		ILI9341_Draw_Text(Temp_Buffer_text, 10, 210, RED, 2, BLACK);
 8000f16:	463a      	mov	r2, r7
 8000f18:	2302      	movs	r3, #2
 8000f1a:	9300      	str	r3, [sp, #0]
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	9301      	str	r3, [sp, #4]
 8000f20:	4610      	mov	r0, r2
 8000f22:	210a      	movs	r1, #10
 8000f24:	22d2      	movs	r2, #210	; 0xd2
 8000f26:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000f2a:	f000 fd7f 	bl	8001a2c <ILI9341_Draw_Text>
		ILI9341_Draw_Text("Counting multiple segments at once", 10, 10, BLACK, 1, WHITE);
		HAL_Delay(2000);
		ILI9341_Fill_Screen(WHITE);


		for(i = 0; i <= 10; i++)
 8000f2e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8000f32:	3301      	adds	r3, #1
 8000f34:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8000f38:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8000f3c:	2b0a      	cmp	r3, #10
 8000f3e:	f67f af67 	bls.w	8000e10 <main+0x2c0>
		ILI9341_Draw_Text(Temp_Buffer_text, 10, 170, WHITE, 2, BLACK);
		ILI9341_Draw_Text(Temp_Buffer_text, 10, 190, BLUE, 2, BLACK);
		ILI9341_Draw_Text(Temp_Buffer_text, 10, 210, RED, 2, BLACK);
		}

		HAL_Delay(1000);
 8000f42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f46:	f001 fa95 	bl	8002474 <HAL_Delay>

//----------------------------------------------------------COUNTING SINGLE SEGMENT
		ILI9341_Fill_Screen(WHITE);
 8000f4a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000f4e:	f001 f861 	bl	8002014 <ILI9341_Fill_Screen>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000f52:	2003      	movs	r0, #3
 8000f54:	f000 fe60 	bl	8001c18 <ILI9341_Set_Rotation>
		ILI9341_Draw_Text("Counting single segment", 10, 10, BLACK, 1, WHITE);
 8000f58:	2301      	movs	r3, #1
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f60:	9301      	str	r3, [sp, #4]
 8000f62:	487a      	ldr	r0, [pc, #488]	; (800114c <main+0x5fc>)
 8000f64:	210a      	movs	r1, #10
 8000f66:	220a      	movs	r2, #10
 8000f68:	2300      	movs	r3, #0
 8000f6a:	f000 fd5f 	bl	8001a2c <ILI9341_Draw_Text>
		HAL_Delay(2000);
 8000f6e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f72:	f001 fa7f 	bl	8002474 <HAL_Delay>
		ILI9341_Fill_Screen(WHITE);
 8000f76:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000f7a:	f001 f84b 	bl	8002014 <ILI9341_Fill_Screen>

		for(i = 0; i <= 100; i++)
 8000f7e:	2300      	movs	r3, #0
 8000f80:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8000f84:	e018      	b.n	8000fb8 <main+0x468>
		{
		sprintf(Temp_Buffer_text, "Counting: %d", i);
 8000f86:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8000f8a:	463a      	mov	r2, r7
 8000f8c:	4610      	mov	r0, r2
 8000f8e:	496e      	ldr	r1, [pc, #440]	; (8001148 <main+0x5f8>)
 8000f90:	461a      	mov	r2, r3
 8000f92:	f004 f94d 	bl	8005230 <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, 10, 10, BLACK, 3, WHITE);
 8000f96:	463a      	mov	r2, r7
 8000f98:	2303      	movs	r3, #3
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fa0:	9301      	str	r3, [sp, #4]
 8000fa2:	4610      	mov	r0, r2
 8000fa4:	210a      	movs	r1, #10
 8000fa6:	220a      	movs	r2, #10
 8000fa8:	2300      	movs	r3, #0
 8000faa:	f000 fd3f 	bl	8001a2c <ILI9341_Draw_Text>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
		ILI9341_Draw_Text("Counting single segment", 10, 10, BLACK, 1, WHITE);
		HAL_Delay(2000);
		ILI9341_Fill_Screen(WHITE);

		for(i = 0; i <= 100; i++)
 8000fae:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8000fb8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8000fbc:	2b64      	cmp	r3, #100	; 0x64
 8000fbe:	d9e2      	bls.n	8000f86 <main+0x436>
		{
		sprintf(Temp_Buffer_text, "Counting: %d", i);
		ILI9341_Draw_Text(Temp_Buffer_text, 10, 10, BLACK, 3, WHITE);
		}

		HAL_Delay(1000);
 8000fc0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fc4:	f001 fa56 	bl	8002474 <HAL_Delay>

//----------------------------------------------------------ALIGNMENT TEST
		ILI9341_Fill_Screen(WHITE);
 8000fc8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000fcc:	f001 f822 	bl	8002014 <ILI9341_Fill_Screen>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000fd0:	2003      	movs	r0, #3
 8000fd2:	f000 fe21 	bl	8001c18 <ILI9341_Set_Rotation>
		ILI9341_Draw_Text("Rectangle alignment check", 10, 10, BLACK, 1, WHITE);
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fde:	9301      	str	r3, [sp, #4]
 8000fe0:	485b      	ldr	r0, [pc, #364]	; (8001150 <main+0x600>)
 8000fe2:	210a      	movs	r1, #10
 8000fe4:	220a      	movs	r2, #10
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	f000 fd20 	bl	8001a2c <ILI9341_Draw_Text>
		HAL_Delay(2000);
 8000fec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ff0:	f001 fa40 	bl	8002474 <HAL_Delay>
		ILI9341_Fill_Screen(WHITE);
 8000ff4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000ff8:	f001 f80c 	bl	8002014 <ILI9341_Fill_Screen>

		ILI9341_Draw_Hollow_Rectangle_Coord(50, 50, 100, 100, BLACK);
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2032      	movs	r0, #50	; 0x32
 8001002:	2132      	movs	r1, #50	; 0x32
 8001004:	2264      	movs	r2, #100	; 0x64
 8001006:	2364      	movs	r3, #100	; 0x64
 8001008:	f000 fb94 	bl	8001734 <ILI9341_Draw_Hollow_Rectangle_Coord>
		ILI9341_Draw_Filled_Rectangle_Coord(20, 20, 50, 50, BLACK);
 800100c:	2300      	movs	r3, #0
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	2014      	movs	r0, #20
 8001012:	2114      	movs	r1, #20
 8001014:	2232      	movs	r2, #50	; 0x32
 8001016:	2332      	movs	r3, #50	; 0x32
 8001018:	f000 fc0e 	bl	8001838 <ILI9341_Draw_Filled_Rectangle_Coord>
		ILI9341_Draw_Hollow_Rectangle_Coord(10, 10, 19, 19, BLACK);
 800101c:	2300      	movs	r3, #0
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	200a      	movs	r0, #10
 8001022:	210a      	movs	r1, #10
 8001024:	2213      	movs	r2, #19
 8001026:	2313      	movs	r3, #19
 8001028:	f000 fb84 	bl	8001734 <ILI9341_Draw_Hollow_Rectangle_Coord>
		HAL_Delay(1000);
 800102c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001030:	f001 fa20 	bl	8002474 <HAL_Delay>

//----------------------------------------------------------LINES EXAMPLE
		ILI9341_Fill_Screen(WHITE);
 8001034:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001038:	f000 ffec 	bl	8002014 <ILI9341_Fill_Screen>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 800103c:	2003      	movs	r0, #3
 800103e:	f000 fdeb 	bl	8001c18 <ILI9341_Set_Rotation>
		ILI9341_Draw_Text("Randomly placed and sized", 10, 10, BLACK, 1, WHITE);
 8001042:	2301      	movs	r3, #1
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800104a:	9301      	str	r3, [sp, #4]
 800104c:	4841      	ldr	r0, [pc, #260]	; (8001154 <main+0x604>)
 800104e:	210a      	movs	r1, #10
 8001050:	220a      	movs	r2, #10
 8001052:	2300      	movs	r3, #0
 8001054:	f000 fcea 	bl	8001a2c <ILI9341_Draw_Text>
		ILI9341_Draw_Text("Horizontal and Vertical lines", 10, 20, BLACK, 1, WHITE);
 8001058:	2301      	movs	r3, #1
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001060:	9301      	str	r3, [sp, #4]
 8001062:	483d      	ldr	r0, [pc, #244]	; (8001158 <main+0x608>)
 8001064:	210a      	movs	r1, #10
 8001066:	2214      	movs	r2, #20
 8001068:	2300      	movs	r3, #0
 800106a:	f000 fcdf 	bl	8001a2c <ILI9341_Draw_Text>
		HAL_Delay(2000);
 800106e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001072:	f001 f9ff 	bl	8002474 <HAL_Delay>
		ILI9341_Fill_Screen(WHITE);
 8001076:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800107a:	f000 ffcb 	bl	8002014 <ILI9341_Fill_Screen>


		HAL_Delay(1000);
 800107e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001082:	f001 f9f7 	bl	8002474 <HAL_Delay>

//----------------------------------------------------------INDIVIDUAL PIXEL EXAMPLE

		ILI9341_Fill_Screen(WHITE);
 8001086:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800108a:	f000 ffc3 	bl	8002014 <ILI9341_Fill_Screen>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 800108e:	2003      	movs	r0, #3
 8001090:	f000 fdc2 	bl	8001c18 <ILI9341_Set_Rotation>
		ILI9341_Draw_Text("Slow draw by selecting", 10, 10, BLACK, 1, WHITE);
 8001094:	2301      	movs	r3, #1
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800109c:	9301      	str	r3, [sp, #4]
 800109e:	482f      	ldr	r0, [pc, #188]	; (800115c <main+0x60c>)
 80010a0:	210a      	movs	r1, #10
 80010a2:	220a      	movs	r2, #10
 80010a4:	2300      	movs	r3, #0
 80010a6:	f000 fcc1 	bl	8001a2c <ILI9341_Draw_Text>
		ILI9341_Draw_Text("and adressing pixels", 10, 20, BLACK, 1, WHITE);
 80010aa:	2301      	movs	r3, #1
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010b2:	9301      	str	r3, [sp, #4]
 80010b4:	482a      	ldr	r0, [pc, #168]	; (8001160 <main+0x610>)
 80010b6:	210a      	movs	r1, #10
 80010b8:	2214      	movs	r2, #20
 80010ba:	2300      	movs	r3, #0
 80010bc:	f000 fcb6 	bl	8001a2c <ILI9341_Draw_Text>
		HAL_Delay(2000);
 80010c0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010c4:	f001 f9d6 	bl	8002474 <HAL_Delay>
		ILI9341_Fill_Screen(WHITE);
 80010c8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80010cc:	f000 ffa2 	bl	8002014 <ILI9341_Fill_Screen>


		x = 0;
 80010d0:	4b24      	ldr	r3, [pc, #144]	; (8001164 <main+0x614>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	801a      	strh	r2, [r3, #0]
		y = 0;
 80010d6:	4b24      	ldr	r3, [pc, #144]	; (8001168 <main+0x618>)
 80010d8:	2200      	movs	r2, #0
 80010da:	801a      	strh	r2, [r3, #0]
		while (y < 240)
 80010dc:	e028      	b.n	8001130 <main+0x5e0>
		{
		while ((x < 320) && (y < 240))
 80010de:	e015      	b.n	800110c <main+0x5bc>
		{

			if(x % 2)
 80010e0:	4b20      	ldr	r3, [pc, #128]	; (8001164 <main+0x614>)
 80010e2:	881b      	ldrh	r3, [r3, #0]
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d008      	beq.n	8001100 <main+0x5b0>
			{
				ILI9341_Draw_Pixel(x, y, BLACK);
 80010ee:	4b1d      	ldr	r3, [pc, #116]	; (8001164 <main+0x614>)
 80010f0:	881a      	ldrh	r2, [r3, #0]
 80010f2:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <main+0x618>)
 80010f4:	881b      	ldrh	r3, [r3, #0]
 80010f6:	4610      	mov	r0, r2
 80010f8:	4619      	mov	r1, r3
 80010fa:	2200      	movs	r2, #0
 80010fc:	f000 ffb0 	bl	8002060 <ILI9341_Draw_Pixel>
			}

			x++;
 8001100:	4b18      	ldr	r3, [pc, #96]	; (8001164 <main+0x614>)
 8001102:	881b      	ldrh	r3, [r3, #0]
 8001104:	3301      	adds	r3, #1
 8001106:	b29a      	uxth	r2, r3
 8001108:	4b16      	ldr	r3, [pc, #88]	; (8001164 <main+0x614>)
 800110a:	801a      	strh	r2, [r3, #0]

		x = 0;
		y = 0;
		while (y < 240)
		{
		while ((x < 320) && (y < 240))
 800110c:	4b15      	ldr	r3, [pc, #84]	; (8001164 <main+0x614>)
 800110e:	881b      	ldrh	r3, [r3, #0]
 8001110:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001114:	d203      	bcs.n	800111e <main+0x5ce>
 8001116:	4b14      	ldr	r3, [pc, #80]	; (8001168 <main+0x618>)
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	2bef      	cmp	r3, #239	; 0xef
 800111c:	d9e0      	bls.n	80010e0 <main+0x590>
			}

			x++;
		}

			y++;
 800111e:	4b12      	ldr	r3, [pc, #72]	; (8001168 <main+0x618>)
 8001120:	881b      	ldrh	r3, [r3, #0]
 8001122:	3301      	adds	r3, #1
 8001124:	b29a      	uxth	r2, r3
 8001126:	4b10      	ldr	r3, [pc, #64]	; (8001168 <main+0x618>)
 8001128:	801a      	strh	r2, [r3, #0]
			x = 0;
 800112a:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <main+0x614>)
 800112c:	2200      	movs	r2, #0
 800112e:	801a      	strh	r2, [r3, #0]
		ILI9341_Fill_Screen(WHITE);


		x = 0;
		y = 0;
		while (y < 240)
 8001130:	4b0d      	ldr	r3, [pc, #52]	; (8001168 <main+0x618>)
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	2bef      	cmp	r3, #239	; 0xef
 8001136:	d9d2      	bls.n	80010de <main+0x58e>

			y++;
			x = 0;
		}

		x = 0;
 8001138:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <main+0x614>)
 800113a:	2200      	movs	r2, #0
 800113c:	801a      	strh	r2, [r3, #0]
		y = 0;
 800113e:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <main+0x618>)
 8001140:	2200      	movs	r2, #0
 8001142:	801a      	strh	r2, [r3, #0]


		while (y < 240)
 8001144:	e03a      	b.n	80011bc <main+0x66c>
		{
		while ((x < 320) && (y < 240))
 8001146:	e027      	b.n	8001198 <main+0x648>
 8001148:	08005b0c 	.word	0x08005b0c
 800114c:	08005b1c 	.word	0x08005b1c
 8001150:	08005b34 	.word	0x08005b34
 8001154:	08005b50 	.word	0x08005b50
 8001158:	08005b6c 	.word	0x08005b6c
 800115c:	08005b8c 	.word	0x08005b8c
 8001160:	08005ba4 	.word	0x08005ba4
 8001164:	20000088 	.word	0x20000088
 8001168:	2000008a 	.word	0x2000008a
		{

			if(y % 2)
 800116c:	4b77      	ldr	r3, [pc, #476]	; (800134c <main+0x7fc>)
 800116e:	881b      	ldrh	r3, [r3, #0]
 8001170:	f003 0301 	and.w	r3, r3, #1
 8001174:	b29b      	uxth	r3, r3
 8001176:	2b00      	cmp	r3, #0
 8001178:	d008      	beq.n	800118c <main+0x63c>
			{
				ILI9341_Draw_Pixel(x, y, BLACK);
 800117a:	4b75      	ldr	r3, [pc, #468]	; (8001350 <main+0x800>)
 800117c:	881a      	ldrh	r2, [r3, #0]
 800117e:	4b73      	ldr	r3, [pc, #460]	; (800134c <main+0x7fc>)
 8001180:	881b      	ldrh	r3, [r3, #0]
 8001182:	4610      	mov	r0, r2
 8001184:	4619      	mov	r1, r3
 8001186:	2200      	movs	r2, #0
 8001188:	f000 ff6a 	bl	8002060 <ILI9341_Draw_Pixel>
			}

			x++;
 800118c:	4b70      	ldr	r3, [pc, #448]	; (8001350 <main+0x800>)
 800118e:	881b      	ldrh	r3, [r3, #0]
 8001190:	3301      	adds	r3, #1
 8001192:	b29a      	uxth	r2, r3
 8001194:	4b6e      	ldr	r3, [pc, #440]	; (8001350 <main+0x800>)
 8001196:	801a      	strh	r2, [r3, #0]
		y = 0;


		while (y < 240)
		{
		while ((x < 320) && (y < 240))
 8001198:	4b6d      	ldr	r3, [pc, #436]	; (8001350 <main+0x800>)
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80011a0:	d203      	bcs.n	80011aa <main+0x65a>
 80011a2:	4b6a      	ldr	r3, [pc, #424]	; (800134c <main+0x7fc>)
 80011a4:	881b      	ldrh	r3, [r3, #0]
 80011a6:	2bef      	cmp	r3, #239	; 0xef
 80011a8:	d9e0      	bls.n	800116c <main+0x61c>
			}

			x++;
		}

			y++;
 80011aa:	4b68      	ldr	r3, [pc, #416]	; (800134c <main+0x7fc>)
 80011ac:	881b      	ldrh	r3, [r3, #0]
 80011ae:	3301      	adds	r3, #1
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	4b66      	ldr	r3, [pc, #408]	; (800134c <main+0x7fc>)
 80011b4:	801a      	strh	r2, [r3, #0]
			x = 0;
 80011b6:	4b66      	ldr	r3, [pc, #408]	; (8001350 <main+0x800>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	801a      	strh	r2, [r3, #0]

		x = 0;
		y = 0;


		while (y < 240)
 80011bc:	4b63      	ldr	r3, [pc, #396]	; (800134c <main+0x7fc>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	2bef      	cmp	r3, #239	; 0xef
 80011c2:	d9c0      	bls.n	8001146 <main+0x5f6>
		}

			y++;
			x = 0;
		}
		HAL_Delay(2000);
 80011c4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80011c8:	f001 f954 	bl	8002474 <HAL_Delay>


//----------------------------------------------------------565 COLOUR EXAMPLE, Grayscale
		ILI9341_Fill_Screen(WHITE);
 80011cc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80011d0:	f000 ff20 	bl	8002014 <ILI9341_Fill_Screen>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 80011d4:	2003      	movs	r0, #3
 80011d6:	f000 fd1f 	bl	8001c18 <ILI9341_Set_Rotation>
		ILI9341_Draw_Text("Colour gradient", 10, 10, BLACK, 1, WHITE);
 80011da:	2301      	movs	r3, #1
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011e2:	9301      	str	r3, [sp, #4]
 80011e4:	485b      	ldr	r0, [pc, #364]	; (8001354 <main+0x804>)
 80011e6:	210a      	movs	r1, #10
 80011e8:	220a      	movs	r2, #10
 80011ea:	2300      	movs	r3, #0
 80011ec:	f000 fc1e 	bl	8001a2c <ILI9341_Draw_Text>
		ILI9341_Draw_Text("Grayscale", 10, 20, BLACK, 1, WHITE);
 80011f0:	2301      	movs	r3, #1
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011f8:	9301      	str	r3, [sp, #4]
 80011fa:	4857      	ldr	r0, [pc, #348]	; (8001358 <main+0x808>)
 80011fc:	210a      	movs	r1, #10
 80011fe:	2214      	movs	r2, #20
 8001200:	2300      	movs	r3, #0
 8001202:	f000 fc13 	bl	8001a2c <ILI9341_Draw_Text>
		HAL_Delay(2000);
 8001206:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800120a:	f001 f933 	bl	8002474 <HAL_Delay>


		for(i = 0; i <= (320); i++)
 800120e:	2300      	movs	r3, #0
 8001210:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8001214:	e047      	b.n	80012a6 <main+0x756>
		{
			uint16_t Red = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			uint16_t Green = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			uint16_t Blue = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

			Red = i/(10);
 8001228:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800122c:	4a4b      	ldr	r2, [pc, #300]	; (800135c <main+0x80c>)
 800122e:	fba2 2303 	umull	r2, r3, r2, r3
 8001232:	08db      	lsrs	r3, r3, #3
 8001234:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			Red <<= 11;
 8001238:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800123c:	02db      	lsls	r3, r3, #11
 800123e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			Green = i/(5);
 8001242:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8001246:	4a45      	ldr	r2, [pc, #276]	; (800135c <main+0x80c>)
 8001248:	fba2 2303 	umull	r2, r3, r2, r3
 800124c:	089b      	lsrs	r3, r3, #2
 800124e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			Green <<= 5;
 8001252:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001256:	015b      	lsls	r3, r3, #5
 8001258:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			Blue = i/(10);
 800125c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8001260:	4a3e      	ldr	r2, [pc, #248]	; (800135c <main+0x80c>)
 8001262:	fba2 2303 	umull	r2, r3, r2, r3
 8001266:	08db      	lsrs	r3, r3, #3
 8001268:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a



			uint16_t RGB_color = Red + Green + Blue;
 800126c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8001270:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001274:	4413      	add	r3, r2
 8001276:	b29a      	uxth	r2, r3
 8001278:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800127c:	4413      	add	r3, r2
 800127e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
			ILI9341_Draw_Rectangle(i, x, 1, 240, RGB_color);
 8001282:	4b33      	ldr	r3, [pc, #204]	; (8001350 <main+0x800>)
 8001284:	881a      	ldrh	r2, [r3, #0]
 8001286:	f8b7 107a 	ldrh.w	r1, [r7, #122]	; 0x7a
 800128a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	4608      	mov	r0, r1
 8001292:	4611      	mov	r1, r2
 8001294:	2201      	movs	r2, #1
 8001296:	23f0      	movs	r3, #240	; 0xf0
 8001298:	f000 ffb8 	bl	800220c <ILI9341_Draw_Rectangle>
		ILI9341_Draw_Text("Colour gradient", 10, 10, BLACK, 1, WHITE);
		ILI9341_Draw_Text("Grayscale", 10, 20, BLACK, 1, WHITE);
		HAL_Delay(2000);


		for(i = 0; i <= (320); i++)
 800129c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80012a0:	3301      	adds	r3, #1
 80012a2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80012a6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80012aa:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80012ae:	d9b2      	bls.n	8001216 <main+0x6c6>

			uint16_t RGB_color = Red + Green + Blue;
			ILI9341_Draw_Rectangle(i, x, 1, 240, RGB_color);

		}
		HAL_Delay(2000);
 80012b0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80012b4:	f001 f8de 	bl	8002474 <HAL_Delay>

//----------------------------------------------------------IMAGE EXAMPLE, Snow Tiger
		ILI9341_Fill_Screen(WHITE);
 80012b8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80012bc:	f000 feaa 	bl	8002014 <ILI9341_Fill_Screen>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 80012c0:	2003      	movs	r0, #3
 80012c2:	f000 fca9 	bl	8001c18 <ILI9341_Set_Rotation>
		ILI9341_Draw_Text("RGB Picture", 10, 10, BLACK, 1, WHITE);
 80012c6:	2301      	movs	r3, #1
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012ce:	9301      	str	r3, [sp, #4]
 80012d0:	4823      	ldr	r0, [pc, #140]	; (8001360 <main+0x810>)
 80012d2:	210a      	movs	r1, #10
 80012d4:	220a      	movs	r2, #10
 80012d6:	2300      	movs	r3, #0
 80012d8:	f000 fba8 	bl	8001a2c <ILI9341_Draw_Text>
		ILI9341_Draw_Text("TIGER", 10, 20, BLACK, 1, WHITE);
 80012dc:	2301      	movs	r3, #1
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012e4:	9301      	str	r3, [sp, #4]
 80012e6:	481f      	ldr	r0, [pc, #124]	; (8001364 <main+0x814>)
 80012e8:	210a      	movs	r1, #10
 80012ea:	2214      	movs	r2, #20
 80012ec:	2300      	movs	r3, #0
 80012ee:	f000 fb9d 	bl	8001a2c <ILI9341_Draw_Text>
		HAL_Delay(2000);
 80012f2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80012f6:	f001 f8bd 	bl	8002474 <HAL_Delay>
		//ILI9341_Draw_Image((const char*)snow_tiger, SCREEN_VERTICAL_2);
		ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 80012fa:	2000      	movs	r0, #0
 80012fc:	f000 fc8c 	bl	8001c18 <ILI9341_Set_Rotation>
		HAL_Delay(10000);
 8001300:	f242 7010 	movw	r0, #10000	; 0x2710
 8001304:	f001 f8b6 	bl	8002474 <HAL_Delay>


//----------------------------------------------------------TOUCHSCREEN EXAMPLE
		ILI9341_Fill_Screen(WHITE);
 8001308:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800130c:	f000 fe82 	bl	8002014 <ILI9341_Fill_Screen>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8001310:	2003      	movs	r0, #3
 8001312:	f000 fc81 	bl	8001c18 <ILI9341_Set_Rotation>
		ILI9341_Draw_Text("Touchscreen", 10, 10, BLACK, 2, WHITE);
 8001316:	2302      	movs	r3, #2
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800131e:	9301      	str	r3, [sp, #4]
 8001320:	4811      	ldr	r0, [pc, #68]	; (8001368 <main+0x818>)
 8001322:	210a      	movs	r1, #10
 8001324:	220a      	movs	r2, #10
 8001326:	2300      	movs	r3, #0
 8001328:	f000 fb80 	bl	8001a2c <ILI9341_Draw_Text>
		ILI9341_Draw_Text("Touch to draw", 10, 30, BLACK, 2, WHITE);
 800132c:	2302      	movs	r3, #2
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001334:	9301      	str	r3, [sp, #4]
 8001336:	480d      	ldr	r0, [pc, #52]	; (800136c <main+0x81c>)
 8001338:	210a      	movs	r1, #10
 800133a:	221e      	movs	r2, #30
 800133c:	2300      	movs	r3, #0
 800133e:	f000 fb75 	bl	8001a2c <ILI9341_Draw_Text>
		ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8001342:	2000      	movs	r0, #0
 8001344:	f000 fc68 	bl	8001c18 <ILI9341_Set_Rotation>



  }
 8001348:	e411      	b.n	8000b6e <main+0x1e>
 800134a:	bf00      	nop
 800134c:	2000008a 	.word	0x2000008a
 8001350:	20000088 	.word	0x20000088
 8001354:	08005bbc 	.word	0x08005bbc
 8001358:	08005bcc 	.word	0x08005bcc
 800135c:	cccccccd 	.word	0xcccccccd
 8001360:	08005bd8 	.word	0x08005bd8
 8001364:	08005be4 	.word	0x08005be4
 8001368:	08005bec 	.word	0x08005bec
 800136c:	08005bf8 	.word	0x08005bf8

08001370 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b090      	sub	sp, #64	; 0x40
 8001374:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001376:	2302      	movs	r3, #2
 8001378:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800137a:	2301      	movs	r3, #1
 800137c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800137e:	2310      	movs	r3, #16
 8001380:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001382:	2302      	movs	r3, #2
 8001384:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001386:	2300      	movs	r3, #0
 8001388:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800138a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800138e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001390:	f107 0318 	add.w	r3, r7, #24
 8001394:	4618      	mov	r0, r3
 8001396:	f001 f9b9 	bl	800270c <HAL_RCC_OscConfig>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80013a0:	f000 f8fe 	bl	80015a0 <Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a4:	230f      	movs	r3, #15
 80013a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013a8:	2302      	movs	r3, #2
 80013aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	4618      	mov	r0, r3
 80013be:	2102      	movs	r1, #2
 80013c0:	f002 fa70 	bl	80038a4 <HAL_RCC_ClockConfig>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80013ca:	f000 f8e9 	bl	80015a0 <Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80013ce:	f002 fcd5 	bl	8003d7c <HAL_RCC_GetHCLKFreq>
 80013d2:	4602      	mov	r2, r0
 80013d4:	4b09      	ldr	r3, [pc, #36]	; (80013fc <SystemClock_Config+0x8c>)
 80013d6:	fba3 2302 	umull	r2, r3, r3, r2
 80013da:	099b      	lsrs	r3, r3, #6
 80013dc:	4618      	mov	r0, r3
 80013de:	f001 f961 	bl	80026a4 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80013e2:	2004      	movs	r0, #4
 80013e4:	f001 f96a 	bl	80026bc <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80013e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013ec:	210f      	movs	r1, #15
 80013ee:	2200      	movs	r2, #0
 80013f0:	f001 f92e 	bl	8002650 <HAL_NVIC_SetPriority>
}
 80013f4:	3740      	adds	r7, #64	; 0x40
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	10624dd3 	.word	0x10624dd3

08001400 <MX_USART1_UART_Init>:

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001404:	4b13      	ldr	r3, [pc, #76]	; (8001454 <MX_USART1_UART_Init+0x54>)
 8001406:	4a14      	ldr	r2, [pc, #80]	; (8001458 <MX_USART1_UART_Init+0x58>)
 8001408:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800140a:	4b12      	ldr	r3, [pc, #72]	; (8001454 <MX_USART1_UART_Init+0x54>)
 800140c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001410:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001412:	4b10      	ldr	r3, [pc, #64]	; (8001454 <MX_USART1_UART_Init+0x54>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001418:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <MX_USART1_UART_Init+0x54>)
 800141a:	2200      	movs	r2, #0
 800141c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800141e:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <MX_USART1_UART_Init+0x54>)
 8001420:	2200      	movs	r2, #0
 8001422:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001424:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <MX_USART1_UART_Init+0x54>)
 8001426:	220c      	movs	r2, #12
 8001428:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800142a:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <MX_USART1_UART_Init+0x54>)
 800142c:	2200      	movs	r2, #0
 800142e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001430:	4b08      	ldr	r3, [pc, #32]	; (8001454 <MX_USART1_UART_Init+0x54>)
 8001432:	2200      	movs	r2, #0
 8001434:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001436:	4b07      	ldr	r3, [pc, #28]	; (8001454 <MX_USART1_UART_Init+0x54>)
 8001438:	2200      	movs	r2, #0
 800143a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800143c:	4b05      	ldr	r3, [pc, #20]	; (8001454 <MX_USART1_UART_Init+0x54>)
 800143e:	2200      	movs	r2, #0
 8001440:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001442:	4804      	ldr	r0, [pc, #16]	; (8001454 <MX_USART1_UART_Init+0x54>)
 8001444:	f002 fea2 	bl	800418c <HAL_UART_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800144e:	f000 f8a7 	bl	80015a0 <Error_Handler>
  }

}
 8001452:	bd80      	pop	{r7, pc}
 8001454:	200000d8 	.word	0x200000d8
 8001458:	40013800 	.word	0x40013800

0800145c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08a      	sub	sp, #40	; 0x28
 8001460:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001462:	4a45      	ldr	r2, [pc, #276]	; (8001578 <MX_GPIO_Init+0x11c>)
 8001464:	4b44      	ldr	r3, [pc, #272]	; (8001578 <MX_GPIO_Init+0x11c>)
 8001466:	695b      	ldr	r3, [r3, #20]
 8001468:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800146c:	6153      	str	r3, [r2, #20]
 800146e:	4b42      	ldr	r3, [pc, #264]	; (8001578 <MX_GPIO_Init+0x11c>)
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001476:	613b      	str	r3, [r7, #16]
 8001478:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800147a:	4a3f      	ldr	r2, [pc, #252]	; (8001578 <MX_GPIO_Init+0x11c>)
 800147c:	4b3e      	ldr	r3, [pc, #248]	; (8001578 <MX_GPIO_Init+0x11c>)
 800147e:	695b      	ldr	r3, [r3, #20]
 8001480:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001484:	6153      	str	r3, [r2, #20]
 8001486:	4b3c      	ldr	r3, [pc, #240]	; (8001578 <MX_GPIO_Init+0x11c>)
 8001488:	695b      	ldr	r3, [r3, #20]
 800148a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001492:	4a39      	ldr	r2, [pc, #228]	; (8001578 <MX_GPIO_Init+0x11c>)
 8001494:	4b38      	ldr	r3, [pc, #224]	; (8001578 <MX_GPIO_Init+0x11c>)
 8001496:	695b      	ldr	r3, [r3, #20]
 8001498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800149c:	6153      	str	r3, [r2, #20]
 800149e:	4b36      	ldr	r3, [pc, #216]	; (8001578 <MX_GPIO_Init+0x11c>)
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a6:	60bb      	str	r3, [r7, #8]
 80014a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014aa:	4a33      	ldr	r2, [pc, #204]	; (8001578 <MX_GPIO_Init+0x11c>)
 80014ac:	4b32      	ldr	r3, [pc, #200]	; (8001578 <MX_GPIO_Init+0x11c>)
 80014ae:	695b      	ldr	r3, [r3, #20]
 80014b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014b4:	6153      	str	r3, [r2, #20]
 80014b6:	4b30      	ldr	r3, [pc, #192]	; (8001578 <MX_GPIO_Init+0x11c>)
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014c2:	4a2d      	ldr	r2, [pc, #180]	; (8001578 <MX_GPIO_Init+0x11c>)
 80014c4:	4b2c      	ldr	r3, [pc, #176]	; (8001578 <MX_GPIO_Init+0x11c>)
 80014c6:	695b      	ldr	r3, [r3, #20]
 80014c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80014cc:	6153      	str	r3, [r2, #20]
 80014ce:	4b2a      	ldr	r3, [pc, #168]	; (8001578 <MX_GPIO_Init+0x11c>)
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014d6:	603b      	str	r3, [r7, #0]
 80014d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014da:	4828      	ldr	r0, [pc, #160]	; (800157c <MX_GPIO_Init+0x120>)
 80014dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014e0:	2200      	movs	r2, #0
 80014e2:	f002 fe3b 	bl	800415c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80014e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014ee:	2200      	movs	r2, #0
 80014f0:	f002 fe34 	bl	800415c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80014f4:	4822      	ldr	r0, [pc, #136]	; (8001580 <MX_GPIO_Init+0x124>)
 80014f6:	2104      	movs	r1, #4
 80014f8:	2200      	movs	r2, #0
 80014fa:	f002 fe2f 	bl	800415c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001502:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001504:	4b1f      	ldr	r3, [pc, #124]	; (8001584 <MX_GPIO_Init+0x128>)
 8001506:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	481d      	ldr	r0, [pc, #116]	; (8001588 <MX_GPIO_Init+0x12c>)
 8001512:	4619      	mov	r1, r3
 8001514:	f002 fcb2 	bl	8003e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001518:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800151c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151e:	2301      	movs	r3, #1
 8001520:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001526:	2303      	movs	r3, #3
 8001528:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800152a:	f107 0314 	add.w	r3, r7, #20
 800152e:	4813      	ldr	r0, [pc, #76]	; (800157c <MX_GPIO_Init+0x120>)
 8001530:	4619      	mov	r1, r3
 8001532:	f002 fca3 	bl	8003e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001536:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800153a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153c:	2301      	movs	r3, #1
 800153e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001544:	2303      	movs	r3, #3
 8001546:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001550:	4619      	mov	r1, r3
 8001552:	f002 fc93 	bl	8003e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001556:	2304      	movs	r3, #4
 8001558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155a:	2301      	movs	r3, #1
 800155c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001562:	2303      	movs	r3, #3
 8001564:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001566:	f107 0314 	add.w	r3, r7, #20
 800156a:	4805      	ldr	r0, [pc, #20]	; (8001580 <MX_GPIO_Init+0x124>)
 800156c:	4619      	mov	r1, r3
 800156e:	f002 fc85 	bl	8003e7c <HAL_GPIO_Init>

}
 8001572:	3728      	adds	r7, #40	; 0x28
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40021000 	.word	0x40021000
 800157c:	48000400 	.word	0x48000400
 8001580:	48000c00 	.word	0x48000c00
 8001584:	10210000 	.word	0x10210000
 8001588:	48000800 	.word	0x48000800

0800158c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
    //HAL_IncTick();
  }
/* USER CODE BEGIN Callback 1 */

/* USER CODE END Callback 1 */
}
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop

080015a0 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
  }
 80015a4:	e7fe      	b.n	80015a4 <Error_Handler+0x4>
 80015a6:	bf00      	nop

080015a8 <LCD_SPI_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void LCD_SPI_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 80015ac:	4b1a      	ldr	r3, [pc, #104]	; (8001618 <LCD_SPI_Init+0x70>)
 80015ae:	4a1b      	ldr	r2, [pc, #108]	; (800161c <LCD_SPI_Init+0x74>)
 80015b0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80015b2:	4b19      	ldr	r3, [pc, #100]	; (8001618 <LCD_SPI_Init+0x70>)
 80015b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015b8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80015ba:	4b17      	ldr	r3, [pc, #92]	; (8001618 <LCD_SPI_Init+0x70>)
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80015c0:	4b15      	ldr	r3, [pc, #84]	; (8001618 <LCD_SPI_Init+0x70>)
 80015c2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80015c6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015c8:	4b13      	ldr	r3, [pc, #76]	; (8001618 <LCD_SPI_Init+0x70>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015ce:	4b12      	ldr	r3, [pc, #72]	; (8001618 <LCD_SPI_Init+0x70>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80015d4:	4b10      	ldr	r3, [pc, #64]	; (8001618 <LCD_SPI_Init+0x70>)
 80015d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015da:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015dc:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <LCD_SPI_Init+0x70>)
 80015de:	2200      	movs	r2, #0
 80015e0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015e2:	4b0d      	ldr	r3, [pc, #52]	; (8001618 <LCD_SPI_Init+0x70>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80015e8:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <LCD_SPI_Init+0x70>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015ee:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <LCD_SPI_Init+0x70>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80015f4:	4b08      	ldr	r3, [pc, #32]	; (8001618 <LCD_SPI_Init+0x70>)
 80015f6:	2207      	movs	r2, #7
 80015f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015fa:	4b07      	ldr	r3, [pc, #28]	; (8001618 <LCD_SPI_Init+0x70>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;   //MIGHT BE A PROBLEM
 8001600:	4b05      	ldr	r3, [pc, #20]	; (8001618 <LCD_SPI_Init+0x70>)
 8001602:	2200      	movs	r2, #0
 8001604:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001606:	4804      	ldr	r0, [pc, #16]	; (8001618 <LCD_SPI_Init+0x70>)
 8001608:	f003 fab2 	bl	8004b70 <HAL_SPI_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <LCD_SPI_Init+0x6e>
  {
    Error_Handler();
 8001612:	f7ff ffc5 	bl	80015a0 <Error_Handler>
  }

}
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20000148 	.word	0x20000148
 800161c:	40003c00 	.word	0x40003c00

08001620 <HAL_SPI_MspInit>:


void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b088      	sub	sp, #32
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI3)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a11      	ldr	r2, [pc, #68]	; (8001674 <HAL_SPI_MspInit+0x54>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d11c      	bne.n	800166c <HAL_SPI_MspInit+0x4c>
  {
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001632:	4a11      	ldr	r2, [pc, #68]	; (8001678 <HAL_SPI_MspInit+0x58>)
 8001634:	4b10      	ldr	r3, [pc, #64]	; (8001678 <HAL_SPI_MspInit+0x58>)
 8001636:	69db      	ldr	r3, [r3, #28]
 8001638:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800163c:	61d3      	str	r3, [r2, #28]
 800163e:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <HAL_SPI_MspInit+0x58>)
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001646:	60bb      	str	r3, [r7, #8]
 8001648:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800164a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800164e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001650:	2302      	movs	r3, #2
 8001652:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001658:	2303      	movs	r3, #3
 800165a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800165c:	2306      	movs	r3, #6
 800165e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001660:	f107 030c 	add.w	r3, r7, #12
 8001664:	4805      	ldr	r0, [pc, #20]	; (800167c <HAL_SPI_MspInit+0x5c>)
 8001666:	4619      	mov	r1, r3
 8001668:	f002 fc08 	bl	8003e7c <HAL_GPIO_Init>

  }

}
 800166c:	3720      	adds	r7, #32
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40003c00 	.word	0x40003c00
 8001678:	40021000 	.word	0x40021000
 800167c:	48000800 	.word	0x48000800

08001680 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001684:	4a1f      	ldr	r2, [pc, #124]	; (8001704 <SystemInit+0x84>)
 8001686:	4b1f      	ldr	r3, [pc, #124]	; (8001704 <SystemInit+0x84>)
 8001688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800168c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001690:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001694:	4a1c      	ldr	r2, [pc, #112]	; (8001708 <SystemInit+0x88>)
 8001696:	4b1c      	ldr	r3, [pc, #112]	; (8001708 <SystemInit+0x88>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80016a0:	4919      	ldr	r1, [pc, #100]	; (8001708 <SystemInit+0x88>)
 80016a2:	4b19      	ldr	r3, [pc, #100]	; (8001708 <SystemInit+0x88>)
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	4b19      	ldr	r3, [pc, #100]	; (800170c <SystemInit+0x8c>)
 80016a8:	4013      	ands	r3, r2
 80016aa:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80016ac:	4a16      	ldr	r2, [pc, #88]	; (8001708 <SystemInit+0x88>)
 80016ae:	4b16      	ldr	r3, [pc, #88]	; (8001708 <SystemInit+0x88>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80016b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ba:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016bc:	4a12      	ldr	r2, [pc, #72]	; (8001708 <SystemInit+0x88>)
 80016be:	4b12      	ldr	r3, [pc, #72]	; (8001708 <SystemInit+0x88>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016c6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80016c8:	4a0f      	ldr	r2, [pc, #60]	; (8001708 <SystemInit+0x88>)
 80016ca:	4b0f      	ldr	r3, [pc, #60]	; (8001708 <SystemInit+0x88>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80016d2:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80016d4:	4a0c      	ldr	r2, [pc, #48]	; (8001708 <SystemInit+0x88>)
 80016d6:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <SystemInit+0x88>)
 80016d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016da:	f023 030f 	bic.w	r3, r3, #15
 80016de:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80016e0:	4909      	ldr	r1, [pc, #36]	; (8001708 <SystemInit+0x88>)
 80016e2:	4b09      	ldr	r3, [pc, #36]	; (8001708 <SystemInit+0x88>)
 80016e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016e6:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <SystemInit+0x90>)
 80016e8:	4013      	ands	r3, r2
 80016ea:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80016ec:	4b06      	ldr	r3, [pc, #24]	; (8001708 <SystemInit+0x88>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016f2:	4b04      	ldr	r3, [pc, #16]	; (8001704 <SystemInit+0x84>)
 80016f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016f8:	609a      	str	r2, [r3, #8]
#endif
}
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	e000ed00 	.word	0xe000ed00
 8001708:	40021000 	.word	0x40021000
 800170c:	f87fc00c 	.word	0xf87fc00c
 8001710:	ff00fccc 	.word	0xff00fccc

08001714 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001718:	f000 fe92 	bl	8002440 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800171c:	f000 ffea 	bl	80026f4 <HAL_SYSTICK_IRQHandler>
  //HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop

08001724 <TIM1_UP_TIM16_IRQHandler>:

/**
* @brief This function handles TIM1 update and TIM16 interrupts.
*/
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001728:	4801      	ldr	r0, [pc, #4]	; (8001730 <TIM1_UP_TIM16_IRQHandler+0xc>)
 800172a:	f003 f86d 	bl	8004808 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20000098 	.word	0x20000098

08001734 <ILI9341_Draw_Hollow_Rectangle_Coord>:
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}

/*Draw a hollow rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Hollow_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 8001734:	b590      	push	{r4, r7, lr}
 8001736:	b087      	sub	sp, #28
 8001738:	af00      	add	r7, sp, #0
 800173a:	4604      	mov	r4, r0
 800173c:	4608      	mov	r0, r1
 800173e:	4611      	mov	r1, r2
 8001740:	461a      	mov	r2, r3
 8001742:	4623      	mov	r3, r4
 8001744:	80fb      	strh	r3, [r7, #6]
 8001746:	4603      	mov	r3, r0
 8001748:	80bb      	strh	r3, [r7, #4]
 800174a:	460b      	mov	r3, r1
 800174c:	807b      	strh	r3, [r7, #2]
 800174e:	4613      	mov	r3, r2
 8001750:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 8001756:	2300      	movs	r3, #0
 8001758:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 800175a:	2300      	movs	r3, #0
 800175c:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 800175e:	2300      	movs	r3, #0
 8001760:	74bb      	strb	r3, [r7, #18]
	float 		Calc_Negative = 0;
 8001762:	f04f 0300 	mov.w	r3, #0
 8001766:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = X1 - X0;
 8001768:	887a      	ldrh	r2, [r7, #2]
 800176a:	88fb      	ldrh	r3, [r7, #6]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	ee07 3a90 	vmov	s15, r3
 8001772:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001776:	edc7 7a03 	vstr	s15, [r7, #12]
	if(Calc_Negative < 0) Negative_X = 1;
 800177a:	edd7 7a03 	vldr	s15, [r7, #12]
 800177e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001786:	d501      	bpl.n	800178c <ILI9341_Draw_Hollow_Rectangle_Coord+0x58>
 8001788:	2301      	movs	r3, #1
 800178a:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 800178c:	f04f 0300 	mov.w	r3, #0
 8001790:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = Y1 - Y0;
 8001792:	883a      	ldrh	r2, [r7, #0]
 8001794:	88bb      	ldrh	r3, [r7, #4]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	ee07 3a90 	vmov	s15, r3
 800179c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017a0:	edc7 7a03 	vstr	s15, [r7, #12]
	if(Calc_Negative < 0) Negative_Y = 1;
 80017a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80017a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b0:	d501      	bpl.n	80017b6 <ILI9341_Draw_Hollow_Rectangle_Coord+0x82>
 80017b2:	2301      	movs	r3, #1
 80017b4:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 80017b6:	7cfb      	ldrb	r3, [r7, #19]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d104      	bne.n	80017c6 <ILI9341_Draw_Hollow_Rectangle_Coord+0x92>
	{
		X_length = X1 - X0;		
 80017bc:	887a      	ldrh	r2, [r7, #2]
 80017be:	88fb      	ldrh	r3, [r7, #6]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	82fb      	strh	r3, [r7, #22]
 80017c4:	e003      	b.n	80017ce <ILI9341_Draw_Hollow_Rectangle_Coord+0x9a>
	}
	else
	{
		X_length = X0 - X1;		
 80017c6:	88fa      	ldrh	r2, [r7, #6]
 80017c8:	887b      	ldrh	r3, [r7, #2]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_Draw_Horizontal_Line(X0, Y0, X_length, Colour);
 80017ce:	88f8      	ldrh	r0, [r7, #6]
 80017d0:	88b9      	ldrh	r1, [r7, #4]
 80017d2:	8afa      	ldrh	r2, [r7, #22]
 80017d4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80017d6:	f000 fd77 	bl	80022c8 <ILI9341_Draw_Horizontal_Line>
	ILI9341_Draw_Horizontal_Line(X0, Y1, X_length, Colour);
 80017da:	88f8      	ldrh	r0, [r7, #6]
 80017dc:	8839      	ldrh	r1, [r7, #0]
 80017de:	8afa      	ldrh	r2, [r7, #22]
 80017e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80017e2:	f000 fd71 	bl	80022c8 <ILI9341_Draw_Horizontal_Line>
	
	
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 80017e6:	7cbb      	ldrb	r3, [r7, #18]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d104      	bne.n	80017f6 <ILI9341_Draw_Hollow_Rectangle_Coord+0xc2>
	{
		Y_length = Y1 - Y0;		
 80017ec:	883a      	ldrh	r2, [r7, #0]
 80017ee:	88bb      	ldrh	r3, [r7, #4]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	82bb      	strh	r3, [r7, #20]
 80017f4:	e003      	b.n	80017fe <ILI9341_Draw_Hollow_Rectangle_Coord+0xca>
	}
	else
	{
		Y_length = Y0 - Y1;		
 80017f6:	88ba      	ldrh	r2, [r7, #4]
 80017f8:	883b      	ldrh	r3, [r7, #0]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	82bb      	strh	r3, [r7, #20]
	}
	ILI9341_Draw_Vertical_Line(X0, Y0, Y_length, Colour);
 80017fe:	88f8      	ldrh	r0, [r7, #6]
 8001800:	88b9      	ldrh	r1, [r7, #4]
 8001802:	8aba      	ldrh	r2, [r7, #20]
 8001804:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001806:	f000 fda3 	bl	8002350 <ILI9341_Draw_Vertical_Line>
	ILI9341_Draw_Vertical_Line(X1, Y0, Y_length, Colour);
 800180a:	8878      	ldrh	r0, [r7, #2]
 800180c:	88b9      	ldrh	r1, [r7, #4]
 800180e:	8aba      	ldrh	r2, [r7, #20]
 8001810:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001812:	f000 fd9d 	bl	8002350 <ILI9341_Draw_Vertical_Line>
	
	if((X_length > 0)||(Y_length > 0)) 
 8001816:	8afb      	ldrh	r3, [r7, #22]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d102      	bne.n	8001822 <ILI9341_Draw_Hollow_Rectangle_Coord+0xee>
 800181c:	8abb      	ldrh	r3, [r7, #20]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d007      	beq.n	8001832 <ILI9341_Draw_Hollow_Rectangle_Coord+0xfe>
	{
		ILI9341_Draw_Pixel(X1, Y1, Colour);
 8001822:	8879      	ldrh	r1, [r7, #2]
 8001824:	883a      	ldrh	r2, [r7, #0]
 8001826:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001828:	4608      	mov	r0, r1
 800182a:	4611      	mov	r1, r2
 800182c:	461a      	mov	r2, r3
 800182e:	f000 fc17 	bl	8002060 <ILI9341_Draw_Pixel>
	}
	
}
 8001832:	371c      	adds	r7, #28
 8001834:	46bd      	mov	sp, r7
 8001836:	bd90      	pop	{r4, r7, pc}

08001838 <ILI9341_Draw_Filled_Rectangle_Coord>:

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 8001838:	b590      	push	{r4, r7, lr}
 800183a:	b089      	sub	sp, #36	; 0x24
 800183c:	af02      	add	r7, sp, #8
 800183e:	4604      	mov	r4, r0
 8001840:	4608      	mov	r0, r1
 8001842:	4611      	mov	r1, r2
 8001844:	461a      	mov	r2, r3
 8001846:	4623      	mov	r3, r4
 8001848:	80fb      	strh	r3, [r7, #6]
 800184a:	4603      	mov	r3, r0
 800184c:	80bb      	strh	r3, [r7, #4]
 800184e:	460b      	mov	r3, r1
 8001850:	807b      	strh	r3, [r7, #2]
 8001852:	4613      	mov	r3, r2
 8001854:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 8001856:	2300      	movs	r3, #0
 8001858:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 800185e:	2300      	movs	r3, #0
 8001860:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	74bb      	strb	r3, [r7, #18]
	int32_t 	Calc_Negative = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	60bb      	str	r3, [r7, #8]
	
	uint16_t X0_true = 0;
 800186a:	2300      	movs	r3, #0
 800186c:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 800186e:	2300      	movs	r3, #0
 8001870:	81fb      	strh	r3, [r7, #14]
	
	Calc_Negative = X1 - X0;
 8001872:	887a      	ldrh	r2, [r7, #2]
 8001874:	88fb      	ldrh	r3, [r7, #6]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_X = 1;
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	2b00      	cmp	r3, #0
 800187e:	da01      	bge.n	8001884 <ILI9341_Draw_Filled_Rectangle_Coord+0x4c>
 8001880:	2301      	movs	r3, #1
 8001882:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	60bb      	str	r3, [r7, #8]
	
	Calc_Negative = Y1 - Y0;
 8001888:	883a      	ldrh	r2, [r7, #0]
 800188a:	88bb      	ldrh	r3, [r7, #4]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_Y = 1;
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	2b00      	cmp	r3, #0
 8001894:	da01      	bge.n	800189a <ILI9341_Draw_Filled_Rectangle_Coord+0x62>
 8001896:	2301      	movs	r3, #1
 8001898:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 800189a:	7cfb      	ldrb	r3, [r7, #19]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d106      	bne.n	80018ae <ILI9341_Draw_Filled_Rectangle_Coord+0x76>
	{
		X_length = X1 - X0;
 80018a0:	887a      	ldrh	r2, [r7, #2]
 80018a2:	88fb      	ldrh	r3, [r7, #6]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 80018a8:	88fb      	ldrh	r3, [r7, #6]
 80018aa:	823b      	strh	r3, [r7, #16]
 80018ac:	e005      	b.n	80018ba <ILI9341_Draw_Filled_Rectangle_Coord+0x82>
	}
	else
	{
		X_length = X0 - X1;
 80018ae:	88fa      	ldrh	r2, [r7, #6]
 80018b0:	887b      	ldrh	r3, [r7, #2]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 80018b6:	887b      	ldrh	r3, [r7, #2]
 80018b8:	823b      	strh	r3, [r7, #16]
	}
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 80018ba:	7cbb      	ldrb	r3, [r7, #18]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d106      	bne.n	80018ce <ILI9341_Draw_Filled_Rectangle_Coord+0x96>
	{
		Y_length = Y1 - Y0;
 80018c0:	883a      	ldrh	r2, [r7, #0]
 80018c2:	88bb      	ldrh	r3, [r7, #4]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;		
 80018c8:	88bb      	ldrh	r3, [r7, #4]
 80018ca:	81fb      	strh	r3, [r7, #14]
 80018cc:	e005      	b.n	80018da <ILI9341_Draw_Filled_Rectangle_Coord+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 80018ce:	88ba      	ldrh	r2, [r7, #4]
 80018d0:	883b      	ldrh	r3, [r7, #0]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;	
 80018d6:	883b      	ldrh	r3, [r7, #0]
 80018d8:	81fb      	strh	r3, [r7, #14]
	}
	
	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);	
 80018da:	8a38      	ldrh	r0, [r7, #16]
 80018dc:	89f9      	ldrh	r1, [r7, #14]
 80018de:	8afa      	ldrh	r2, [r7, #22]
 80018e0:	8abc      	ldrh	r4, [r7, #20]
 80018e2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80018e4:	9300      	str	r3, [sp, #0]
 80018e6:	4623      	mov	r3, r4
 80018e8:	f000 fc90 	bl	800220c <ILI9341_Draw_Rectangle>
}
 80018ec:	371c      	adds	r7, #28
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd90      	pop	{r4, r7, pc}
 80018f2:	bf00      	nop

080018f4 <ILI9341_Draw_Char>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 80018f4:	b590      	push	{r4, r7, lr}
 80018f6:	b089      	sub	sp, #36	; 0x24
 80018f8:	af02      	add	r7, sp, #8
 80018fa:	4604      	mov	r4, r0
 80018fc:	4608      	mov	r0, r1
 80018fe:	4611      	mov	r1, r2
 8001900:	461a      	mov	r2, r3
 8001902:	4623      	mov	r3, r4
 8001904:	71fb      	strb	r3, [r7, #7]
 8001906:	4603      	mov	r3, r0
 8001908:	71bb      	strb	r3, [r7, #6]
 800190a:	460b      	mov	r3, r1
 800190c:	717b      	strb	r3, [r7, #5]
 800190e:	4613      	mov	r3, r2
 8001910:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8001916:	7dfb      	ldrb	r3, [r7, #23]
 8001918:	2b1f      	cmp	r3, #31
 800191a:	d802      	bhi.n	8001922 <ILI9341_Draw_Char+0x2e>
        Character = 0;
 800191c:	2300      	movs	r3, #0
 800191e:	71fb      	strb	r3, [r7, #7]
 8001920:	e002      	b.n	8001928 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 8001922:	7dfb      	ldrb	r3, [r7, #23]
 8001924:	3b20      	subs	r3, #32
 8001926:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8001928:	2300      	movs	r3, #0
 800192a:	753b      	strb	r3, [r7, #20]
 800192c:	e012      	b.n	8001954 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 800192e:	7d39      	ldrb	r1, [r7, #20]
 8001930:	7dfa      	ldrb	r2, [r7, #23]
 8001932:	7d38      	ldrb	r0, [r7, #20]
 8001934:	4c3c      	ldr	r4, [pc, #240]	; (8001a28 <ILI9341_Draw_Char+0x134>)
 8001936:	4613      	mov	r3, r2
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	4413      	add	r3, r2
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	4403      	add	r3, r0
 8001940:	4423      	add	r3, r4
 8001942:	781a      	ldrb	r2, [r3, #0]
 8001944:	f107 0318 	add.w	r3, r7, #24
 8001948:	440b      	add	r3, r1
 800194a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    } else {
        function_char -= 32;
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800194e:	7d3b      	ldrb	r3, [r7, #20]
 8001950:	3301      	adds	r3, #1
 8001952:	753b      	strb	r3, [r7, #20]
 8001954:	7d3b      	ldrb	r3, [r7, #20]
 8001956:	2b05      	cmp	r3, #5
 8001958:	d9e9      	bls.n	800192e <ILI9341_Draw_Char+0x3a>
		{
		temp[k] = font[function_char][k];
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 800195a:	79bb      	ldrb	r3, [r7, #6]
 800195c:	b298      	uxth	r0, r3
 800195e:	797b      	ldrb	r3, [r7, #5]
 8001960:	b299      	uxth	r1, r3
 8001962:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001964:	461a      	mov	r2, r3
 8001966:	0052      	lsls	r2, r2, #1
 8001968:	4413      	add	r3, r2
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	b29a      	uxth	r2, r3
 800196e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	b29c      	uxth	r4, r3
 8001974:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	4623      	mov	r3, r4
 800197a:	f000 fc47 	bl	800220c <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 800197e:	2300      	movs	r3, #0
 8001980:	757b      	strb	r3, [r7, #21]
 8001982:	e04a      	b.n	8001a1a <ILI9341_Draw_Char+0x126>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8001984:	2300      	movs	r3, #0
 8001986:	75bb      	strb	r3, [r7, #22]
 8001988:	e041      	b.n	8001a0e <ILI9341_Draw_Char+0x11a>
            if (temp[j] & (1<<i)) {			
 800198a:	7d7b      	ldrb	r3, [r7, #21]
 800198c:	f107 0218 	add.w	r2, r7, #24
 8001990:	4413      	add	r3, r2
 8001992:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001996:	461a      	mov	r2, r3
 8001998:	7dbb      	ldrb	r3, [r7, #22]
 800199a:	fa42 f303 	asr.w	r3, r2, r3
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d030      	beq.n	8001a08 <ILI9341_Draw_Char+0x114>
							if(Size == 1)
 80019a6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d112      	bne.n	80019d2 <ILI9341_Draw_Char+0xde>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 80019ac:	79bb      	ldrb	r3, [r7, #6]
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	7d7b      	ldrb	r3, [r7, #21]
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	4413      	add	r3, r2
 80019b6:	b299      	uxth	r1, r3
 80019b8:	797b      	ldrb	r3, [r7, #5]
 80019ba:	b29a      	uxth	r2, r3
 80019bc:	7dbb      	ldrb	r3, [r7, #22]
 80019be:	b29b      	uxth	r3, r3
 80019c0:	4413      	add	r3, r2
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	887b      	ldrh	r3, [r7, #2]
 80019c6:	4608      	mov	r0, r1
 80019c8:	4611      	mov	r1, r2
 80019ca:	461a      	mov	r2, r3
 80019cc:	f000 fb48 	bl	8002060 <ILI9341_Draw_Pixel>
 80019d0:	e01a      	b.n	8001a08 <ILI9341_Draw_Char+0x114>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 80019d2:	79bb      	ldrb	r3, [r7, #6]
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	7d7b      	ldrb	r3, [r7, #21]
 80019d8:	b29b      	uxth	r3, r3
 80019da:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80019dc:	fb11 f303 	smulbb	r3, r1, r3
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	4413      	add	r3, r2
 80019e4:	b298      	uxth	r0, r3
 80019e6:	797b      	ldrb	r3, [r7, #5]
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	7dbb      	ldrb	r3, [r7, #22]
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80019f0:	fb11 f303 	smulbb	r3, r1, r3
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	4413      	add	r3, r2
 80019f8:	b299      	uxth	r1, r3
 80019fa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80019fc:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 80019fe:	887b      	ldrh	r3, [r7, #2]
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	4623      	mov	r3, r4
 8001a04:	f000 fc02 	bl	800220c <ILI9341_Draw_Rectangle>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
    for (j=0; j<CHAR_WIDTH; j++) {
        for (i=0; i<CHAR_HEIGHT; i++) {
 8001a08:	7dbb      	ldrb	r3, [r7, #22]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	75bb      	strb	r3, [r7, #22]
 8001a0e:	7dbb      	ldrb	r3, [r7, #22]
 8001a10:	2b07      	cmp	r3, #7
 8001a12:	d9ba      	bls.n	800198a <ILI9341_Draw_Char+0x96>
		temp[k] = font[function_char][k];
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
    for (j=0; j<CHAR_WIDTH; j++) {
 8001a14:	7d7b      	ldrb	r3, [r7, #21]
 8001a16:	3301      	adds	r3, #1
 8001a18:	757b      	strb	r3, [r7, #21]
 8001a1a:	7d7b      	ldrb	r3, [r7, #21]
 8001a1c:	2b05      	cmp	r3, #5
 8001a1e:	d9b1      	bls.n	8001984 <ILI9341_Draw_Char+0x90>
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
							}
            }						
        }
    }
}
 8001a20:	371c      	adds	r7, #28
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd90      	pop	{r4, r7, pc}
 8001a26:	bf00      	nop
 8001a28:	08005c20 	.word	0x08005c20

08001a2c <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8001a2c:	b590      	push	{r4, r7, lr}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af02      	add	r7, sp, #8
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	4608      	mov	r0, r1
 8001a36:	4611      	mov	r1, r2
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	70fb      	strb	r3, [r7, #3]
 8001a3e:	460b      	mov	r3, r1
 8001a40:	70bb      	strb	r3, [r7, #2]
 8001a42:	4613      	mov	r3, r2
 8001a44:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 8001a46:	e017      	b.n	8001a78 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	1c5a      	adds	r2, r3, #1
 8001a4c:	607a      	str	r2, [r7, #4]
 8001a4e:	7818      	ldrb	r0, [r3, #0]
 8001a50:	78f9      	ldrb	r1, [r7, #3]
 8001a52:	78ba      	ldrb	r2, [r7, #2]
 8001a54:	883c      	ldrh	r4, [r7, #0]
 8001a56:	8b3b      	ldrh	r3, [r7, #24]
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	8bbb      	ldrh	r3, [r7, #28]
 8001a5c:	9301      	str	r3, [sp, #4]
 8001a5e:	4623      	mov	r3, r4
 8001a60:	f7ff ff48 	bl	80018f4 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8001a64:	8b3b      	ldrh	r3, [r7, #24]
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	461a      	mov	r2, r3
 8001a6a:	0052      	lsls	r2, r2, #1
 8001a6c:	4413      	add	r3, r2
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	78fb      	ldrb	r3, [r7, #3]
 8001a74:	4413      	add	r3, r2
 8001a76:	70fb      	strb	r3, [r7, #3]

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
    while (*Text) {
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1e3      	bne.n	8001a48 <ILI9341_Draw_Text+0x1c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
        X += CHAR_WIDTH*Size;
    }
}
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd90      	pop	{r4, r7, pc}
 8001a86:	bf00      	nop

08001a88 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
LCD_SPI_Init();																							//SPI INIT
 8001a8c:	f7ff fd8c 	bl	80015a8 <LCD_SPI_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8001a90:	4802      	ldr	r0, [pc, #8]	; (8001a9c <ILI9341_SPI_Init+0x14>)
 8001a92:	2104      	movs	r1, #4
 8001a94:	2200      	movs	r2, #0
 8001a96:	f002 fb61 	bl	800415c <HAL_GPIO_WritePin>
}
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	48000c00 	.word	0x48000c00

08001aa0 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8001aaa:	1dfb      	adds	r3, r7, #7
 8001aac:	4804      	ldr	r0, [pc, #16]	; (8001ac0 <ILI9341_SPI_Send+0x20>)
 8001aae:	4619      	mov	r1, r3
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	f003 f8ec 	bl	8004c90 <HAL_SPI_Transmit>
}
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000148 	.word	0x20000148

08001ac4 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001ace:	480c      	ldr	r0, [pc, #48]	; (8001b00 <ILI9341_Write_Command+0x3c>)
 8001ad0:	2104      	movs	r1, #4
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f002 fb42 	bl	800415c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001ad8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001adc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f002 fb3b 	bl	800415c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff ffd9 	bl	8001aa0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8001aee:	4804      	ldr	r0, [pc, #16]	; (8001b00 <ILI9341_Write_Command+0x3c>)
 8001af0:	2104      	movs	r1, #4
 8001af2:	2201      	movs	r2, #1
 8001af4:	f002 fb32 	bl	800415c <HAL_GPIO_WritePin>
}
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	48000c00 	.word	0x48000c00

08001b04 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001b0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b16:	2201      	movs	r2, #1
 8001b18:	f002 fb20 	bl	800415c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001b1c:	4808      	ldr	r0, [pc, #32]	; (8001b40 <ILI9341_Write_Data+0x3c>)
 8001b1e:	2104      	movs	r1, #4
 8001b20:	2200      	movs	r2, #0
 8001b22:	f002 fb1b 	bl	800415c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff ffb9 	bl	8001aa0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001b2e:	4804      	ldr	r0, [pc, #16]	; (8001b40 <ILI9341_Write_Data+0x3c>)
 8001b30:	2104      	movs	r1, #4
 8001b32:	2201      	movs	r2, #1
 8001b34:	f002 fb12 	bl	800415c <HAL_GPIO_WritePin>
}
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	48000c00 	.word	0x48000c00

08001b44 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8001b44:	b590      	push	{r4, r7, lr}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4604      	mov	r4, r0
 8001b4c:	4608      	mov	r0, r1
 8001b4e:	4611      	mov	r1, r2
 8001b50:	461a      	mov	r2, r3
 8001b52:	4623      	mov	r3, r4
 8001b54:	80fb      	strh	r3, [r7, #6]
 8001b56:	4603      	mov	r3, r0
 8001b58:	80bb      	strh	r3, [r7, #4]
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	807b      	strh	r3, [r7, #2]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8001b62:	202a      	movs	r0, #42	; 0x2a
 8001b64:	f7ff ffae 	bl	8001ac4 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8001b68:	88fb      	ldrh	r3, [r7, #6]
 8001b6a:	0a1b      	lsrs	r3, r3, #8
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff ffc7 	bl	8001b04 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8001b76:	88fb      	ldrh	r3, [r7, #6]
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff ffc2 	bl	8001b04 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8001b80:	887b      	ldrh	r3, [r7, #2]
 8001b82:	0a1b      	lsrs	r3, r3, #8
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff ffbb 	bl	8001b04 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8001b8e:	887b      	ldrh	r3, [r7, #2]
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff ffb6 	bl	8001b04 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8001b98:	202b      	movs	r0, #43	; 0x2b
 8001b9a:	f7ff ff93 	bl	8001ac4 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8001b9e:	88bb      	ldrh	r3, [r7, #4]
 8001ba0:	0a1b      	lsrs	r3, r3, #8
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff ffac 	bl	8001b04 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8001bac:	88bb      	ldrh	r3, [r7, #4]
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff ffa7 	bl	8001b04 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8001bb6:	883b      	ldrh	r3, [r7, #0]
 8001bb8:	0a1b      	lsrs	r3, r3, #8
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff ffa0 	bl	8001b04 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8001bc4:	883b      	ldrh	r3, [r7, #0]
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff ff9b 	bl	8001b04 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8001bce:	202c      	movs	r0, #44	; 0x2c
 8001bd0:	f7ff ff78 	bl	8001ac4 <ILI9341_Write_Command>
}
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd90      	pop	{r4, r7, pc}
 8001bda:	bf00      	nop

08001bdc <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8001be0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001be4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001be8:	2201      	movs	r2, #1
 8001bea:	f002 fab7 	bl	800415c <HAL_GPIO_WritePin>
HAL_Delay(200);
 8001bee:	20c8      	movs	r0, #200	; 0xc8
 8001bf0:	f000 fc40 	bl	8002474 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001bf4:	4807      	ldr	r0, [pc, #28]	; (8001c14 <ILI9341_Reset+0x38>)
 8001bf6:	2104      	movs	r1, #4
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f002 faaf 	bl	800415c <HAL_GPIO_WritePin>
HAL_Delay(200);
 8001bfe:	20c8      	movs	r0, #200	; 0xc8
 8001c00:	f000 fc38 	bl	8002474 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8001c04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f002 faa5 	bl	800415c <HAL_GPIO_WritePin>
}
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	48000c00 	.word	0x48000c00

08001c18 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8001c22:	79fb      	ldrb	r3, [r7, #7]
 8001c24:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8001c26:	2036      	movs	r0, #54	; 0x36
 8001c28:	f7ff ff4c 	bl	8001ac4 <ILI9341_Write_Command>
HAL_Delay(1);
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	f000 fc21 	bl	8002474 <HAL_Delay>
	
switch(screen_rotation) 
 8001c32:	7bfb      	ldrb	r3, [r7, #15]
 8001c34:	2b03      	cmp	r3, #3
 8001c36:	d837      	bhi.n	8001ca8 <ILI9341_Set_Rotation+0x90>
 8001c38:	a201      	add	r2, pc, #4	; (adr r2, 8001c40 <ILI9341_Set_Rotation+0x28>)
 8001c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c3e:	bf00      	nop
 8001c40:	08001c51 	.word	0x08001c51
 8001c44:	08001c67 	.word	0x08001c67
 8001c48:	08001c7d 	.word	0x08001c7d
 8001c4c:	08001c93 	.word	0x08001c93
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8001c50:	2048      	movs	r0, #72	; 0x48
 8001c52:	f7ff ff57 	bl	8001b04 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8001c56:	4b16      	ldr	r3, [pc, #88]	; (8001cb0 <ILI9341_Set_Rotation+0x98>)
 8001c58:	22f0      	movs	r2, #240	; 0xf0
 8001c5a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8001c5c:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <ILI9341_Set_Rotation+0x9c>)
 8001c5e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c62:	801a      	strh	r2, [r3, #0]
			break;
 8001c64:	e021      	b.n	8001caa <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8001c66:	2028      	movs	r0, #40	; 0x28
 8001c68:	f7ff ff4c 	bl	8001b04 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8001c6c:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <ILI9341_Set_Rotation+0x98>)
 8001c6e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c72:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8001c74:	4b0f      	ldr	r3, [pc, #60]	; (8001cb4 <ILI9341_Set_Rotation+0x9c>)
 8001c76:	22f0      	movs	r2, #240	; 0xf0
 8001c78:	801a      	strh	r2, [r3, #0]
			break;
 8001c7a:	e016      	b.n	8001caa <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8001c7c:	2088      	movs	r0, #136	; 0x88
 8001c7e:	f7ff ff41 	bl	8001b04 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8001c82:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <ILI9341_Set_Rotation+0x98>)
 8001c84:	22f0      	movs	r2, #240	; 0xf0
 8001c86:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8001c88:	4b0a      	ldr	r3, [pc, #40]	; (8001cb4 <ILI9341_Set_Rotation+0x9c>)
 8001c8a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c8e:	801a      	strh	r2, [r3, #0]
			break;
 8001c90:	e00b      	b.n	8001caa <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8001c92:	20e8      	movs	r0, #232	; 0xe8
 8001c94:	f7ff ff36 	bl	8001b04 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8001c98:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <ILI9341_Set_Rotation+0x98>)
 8001c9a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c9e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8001ca0:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <ILI9341_Set_Rotation+0x9c>)
 8001ca2:	22f0      	movs	r2, #240	; 0xf0
 8001ca4:	801a      	strh	r2, [r3, #0]
			break;
 8001ca6:	e000      	b.n	8001caa <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8001ca8:	bf00      	nop
	}
}
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20000006 	.word	0x20000006
 8001cb4:	20000004 	.word	0x20000004

08001cb8 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8001cbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cc0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f002 fa49 	bl	800415c <HAL_GPIO_WritePin>
}
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8001cd0:	f7ff fff2 	bl	8001cb8 <ILI9341_Enable>
ILI9341_SPI_Init();
 8001cd4:	f7ff fed8 	bl	8001a88 <ILI9341_SPI_Init>
ILI9341_Reset();
 8001cd8:	f7ff ff80 	bl	8001bdc <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8001cdc:	2001      	movs	r0, #1
 8001cde:	f7ff fef1 	bl	8001ac4 <ILI9341_Write_Command>
HAL_Delay(1000);
 8001ce2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ce6:	f000 fbc5 	bl	8002474 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8001cea:	20cb      	movs	r0, #203	; 0xcb
 8001cec:	f7ff feea 	bl	8001ac4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8001cf0:	2039      	movs	r0, #57	; 0x39
 8001cf2:	f7ff ff07 	bl	8001b04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8001cf6:	202c      	movs	r0, #44	; 0x2c
 8001cf8:	f7ff ff04 	bl	8001b04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001cfc:	2000      	movs	r0, #0
 8001cfe:	f7ff ff01 	bl	8001b04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8001d02:	2034      	movs	r0, #52	; 0x34
 8001d04:	f7ff fefe 	bl	8001b04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8001d08:	2002      	movs	r0, #2
 8001d0a:	f7ff fefb 	bl	8001b04 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8001d0e:	20cf      	movs	r0, #207	; 0xcf
 8001d10:	f7ff fed8 	bl	8001ac4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001d14:	2000      	movs	r0, #0
 8001d16:	f7ff fef5 	bl	8001b04 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8001d1a:	20c1      	movs	r0, #193	; 0xc1
 8001d1c:	f7ff fef2 	bl	8001b04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8001d20:	2030      	movs	r0, #48	; 0x30
 8001d22:	f7ff feef 	bl	8001b04 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8001d26:	20e8      	movs	r0, #232	; 0xe8
 8001d28:	f7ff fecc 	bl	8001ac4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8001d2c:	2085      	movs	r0, #133	; 0x85
 8001d2e:	f7ff fee9 	bl	8001b04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001d32:	2000      	movs	r0, #0
 8001d34:	f7ff fee6 	bl	8001b04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8001d38:	2078      	movs	r0, #120	; 0x78
 8001d3a:	f7ff fee3 	bl	8001b04 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8001d3e:	20ea      	movs	r0, #234	; 0xea
 8001d40:	f7ff fec0 	bl	8001ac4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001d44:	2000      	movs	r0, #0
 8001d46:	f7ff fedd 	bl	8001b04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001d4a:	2000      	movs	r0, #0
 8001d4c:	f7ff feda 	bl	8001b04 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8001d50:	20ed      	movs	r0, #237	; 0xed
 8001d52:	f7ff feb7 	bl	8001ac4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8001d56:	2064      	movs	r0, #100	; 0x64
 8001d58:	f7ff fed4 	bl	8001b04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001d5c:	2003      	movs	r0, #3
 8001d5e:	f7ff fed1 	bl	8001b04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8001d62:	2012      	movs	r0, #18
 8001d64:	f7ff fece 	bl	8001b04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8001d68:	2081      	movs	r0, #129	; 0x81
 8001d6a:	f7ff fecb 	bl	8001b04 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8001d6e:	20f7      	movs	r0, #247	; 0xf7
 8001d70:	f7ff fea8 	bl	8001ac4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8001d74:	2020      	movs	r0, #32
 8001d76:	f7ff fec5 	bl	8001b04 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8001d7a:	20c0      	movs	r0, #192	; 0xc0
 8001d7c:	f7ff fea2 	bl	8001ac4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8001d80:	2023      	movs	r0, #35	; 0x23
 8001d82:	f7ff febf 	bl	8001b04 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8001d86:	20c1      	movs	r0, #193	; 0xc1
 8001d88:	f7ff fe9c 	bl	8001ac4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8001d8c:	2010      	movs	r0, #16
 8001d8e:	f7ff feb9 	bl	8001b04 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8001d92:	20c5      	movs	r0, #197	; 0xc5
 8001d94:	f7ff fe96 	bl	8001ac4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8001d98:	203e      	movs	r0, #62	; 0x3e
 8001d9a:	f7ff feb3 	bl	8001b04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8001d9e:	2028      	movs	r0, #40	; 0x28
 8001da0:	f7ff feb0 	bl	8001b04 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8001da4:	20c7      	movs	r0, #199	; 0xc7
 8001da6:	f7ff fe8d 	bl	8001ac4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8001daa:	2086      	movs	r0, #134	; 0x86
 8001dac:	f7ff feaa 	bl	8001b04 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8001db0:	2036      	movs	r0, #54	; 0x36
 8001db2:	f7ff fe87 	bl	8001ac4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8001db6:	2048      	movs	r0, #72	; 0x48
 8001db8:	f7ff fea4 	bl	8001b04 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8001dbc:	203a      	movs	r0, #58	; 0x3a
 8001dbe:	f7ff fe81 	bl	8001ac4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8001dc2:	2055      	movs	r0, #85	; 0x55
 8001dc4:	f7ff fe9e 	bl	8001b04 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8001dc8:	20b1      	movs	r0, #177	; 0xb1
 8001dca:	f7ff fe7b 	bl	8001ac4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001dce:	2000      	movs	r0, #0
 8001dd0:	f7ff fe98 	bl	8001b04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8001dd4:	2018      	movs	r0, #24
 8001dd6:	f7ff fe95 	bl	8001b04 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8001dda:	20b6      	movs	r0, #182	; 0xb6
 8001ddc:	f7ff fe72 	bl	8001ac4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8001de0:	2008      	movs	r0, #8
 8001de2:	f7ff fe8f 	bl	8001b04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8001de6:	2082      	movs	r0, #130	; 0x82
 8001de8:	f7ff fe8c 	bl	8001b04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8001dec:	2027      	movs	r0, #39	; 0x27
 8001dee:	f7ff fe89 	bl	8001b04 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8001df2:	20f2      	movs	r0, #242	; 0xf2
 8001df4:	f7ff fe66 	bl	8001ac4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001df8:	2000      	movs	r0, #0
 8001dfa:	f7ff fe83 	bl	8001b04 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8001dfe:	2026      	movs	r0, #38	; 0x26
 8001e00:	f7ff fe60 	bl	8001ac4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8001e04:	2001      	movs	r0, #1
 8001e06:	f7ff fe7d 	bl	8001b04 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8001e0a:	20e0      	movs	r0, #224	; 0xe0
 8001e0c:	f7ff fe5a 	bl	8001ac4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8001e10:	200f      	movs	r0, #15
 8001e12:	f7ff fe77 	bl	8001b04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001e16:	2031      	movs	r0, #49	; 0x31
 8001e18:	f7ff fe74 	bl	8001b04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8001e1c:	202b      	movs	r0, #43	; 0x2b
 8001e1e:	f7ff fe71 	bl	8001b04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8001e22:	200c      	movs	r0, #12
 8001e24:	f7ff fe6e 	bl	8001b04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001e28:	200e      	movs	r0, #14
 8001e2a:	f7ff fe6b 	bl	8001b04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8001e2e:	2008      	movs	r0, #8
 8001e30:	f7ff fe68 	bl	8001b04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8001e34:	204e      	movs	r0, #78	; 0x4e
 8001e36:	f7ff fe65 	bl	8001b04 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8001e3a:	20f1      	movs	r0, #241	; 0xf1
 8001e3c:	f7ff fe62 	bl	8001b04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8001e40:	2037      	movs	r0, #55	; 0x37
 8001e42:	f7ff fe5f 	bl	8001b04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8001e46:	2007      	movs	r0, #7
 8001e48:	f7ff fe5c 	bl	8001b04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8001e4c:	2010      	movs	r0, #16
 8001e4e:	f7ff fe59 	bl	8001b04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001e52:	2003      	movs	r0, #3
 8001e54:	f7ff fe56 	bl	8001b04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001e58:	200e      	movs	r0, #14
 8001e5a:	f7ff fe53 	bl	8001b04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8001e5e:	2009      	movs	r0, #9
 8001e60:	f7ff fe50 	bl	8001b04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001e64:	2000      	movs	r0, #0
 8001e66:	f7ff fe4d 	bl	8001b04 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8001e6a:	20e1      	movs	r0, #225	; 0xe1
 8001e6c:	f7ff fe2a 	bl	8001ac4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001e70:	2000      	movs	r0, #0
 8001e72:	f7ff fe47 	bl	8001b04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001e76:	200e      	movs	r0, #14
 8001e78:	f7ff fe44 	bl	8001b04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8001e7c:	2014      	movs	r0, #20
 8001e7e:	f7ff fe41 	bl	8001b04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001e82:	2003      	movs	r0, #3
 8001e84:	f7ff fe3e 	bl	8001b04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8001e88:	2011      	movs	r0, #17
 8001e8a:	f7ff fe3b 	bl	8001b04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8001e8e:	2007      	movs	r0, #7
 8001e90:	f7ff fe38 	bl	8001b04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001e94:	2031      	movs	r0, #49	; 0x31
 8001e96:	f7ff fe35 	bl	8001b04 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8001e9a:	20c1      	movs	r0, #193	; 0xc1
 8001e9c:	f7ff fe32 	bl	8001b04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8001ea0:	2048      	movs	r0, #72	; 0x48
 8001ea2:	f7ff fe2f 	bl	8001b04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8001ea6:	2008      	movs	r0, #8
 8001ea8:	f7ff fe2c 	bl	8001b04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8001eac:	200f      	movs	r0, #15
 8001eae:	f7ff fe29 	bl	8001b04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8001eb2:	200c      	movs	r0, #12
 8001eb4:	f7ff fe26 	bl	8001b04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001eb8:	2031      	movs	r0, #49	; 0x31
 8001eba:	f7ff fe23 	bl	8001b04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8001ebe:	2036      	movs	r0, #54	; 0x36
 8001ec0:	f7ff fe20 	bl	8001b04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8001ec4:	200f      	movs	r0, #15
 8001ec6:	f7ff fe1d 	bl	8001b04 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8001eca:	2011      	movs	r0, #17
 8001ecc:	f7ff fdfa 	bl	8001ac4 <ILI9341_Write_Command>
HAL_Delay(120);
 8001ed0:	2078      	movs	r0, #120	; 0x78
 8001ed2:	f000 facf 	bl	8002474 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8001ed6:	2029      	movs	r0, #41	; 0x29
 8001ed8:	f7ff fdf4 	bl	8001ac4 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8001edc:	2000      	movs	r0, #0
 8001ede:	f7ff fe9b 	bl	8001c18 <ILI9341_Set_Rotation>
}
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8001ee4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ee8:	b08d      	sub	sp, #52	; 0x34
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	4603      	mov	r3, r0
 8001eee:	6039      	str	r1, [r7, #0]
 8001ef0:	80fb      	strh	r3, [r7, #6]
 8001ef2:	466b      	mov	r3, sp
 8001ef4:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
if((Size*2) < BURST_MAX_SIZE)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f02:	d202      	bcs.n	8001f0a <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f08:	e002      	b.n	8001f10 <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8001f0a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001f10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f002 f91f 	bl	800415c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001f1e:	483b      	ldr	r0, [pc, #236]	; (800200c <ILI9341_Draw_Colour_Burst+0x128>)
 8001f20:	2104      	movs	r1, #4
 8001f22:	2200      	movs	r2, #0
 8001f24:	f002 f91a 	bl	800415c <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8001f28:	88fb      	ldrh	r3, [r7, #6]
 8001f2a:	0a1b      	lsrs	r3, r3, #8
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8001f32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001f34:	460b      	mov	r3, r1
 8001f36:	3b01      	subs	r3, #1
 8001f38:	61fb      	str	r3, [r7, #28]
 8001f3a:	460a      	mov	r2, r1
 8001f3c:	f04f 0300 	mov.w	r3, #0
 8001f40:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8001f44:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8001f48:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8001f4c:	460a      	mov	r2, r1
 8001f4e:	f04f 0300 	mov.w	r3, #0
 8001f52:	00dd      	lsls	r5, r3, #3
 8001f54:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001f58:	00d4      	lsls	r4, r2, #3
 8001f5a:	1dcb      	adds	r3, r1, #7
 8001f5c:	08db      	lsrs	r3, r3, #3
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	ebad 0d03 	sub.w	sp, sp, r3
 8001f64:	466b      	mov	r3, sp
 8001f66:	3300      	adds	r3, #0
 8001f68:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f6e:	e00e      	b.n	8001f8e <ILI9341_Draw_Colour_Burst+0xaa>
	{
		burst_buffer[j] = 	chifted;
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f74:	4413      	add	r3, r2
 8001f76:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001f7a:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8001f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f7e:	3301      	adds	r3, #1
 8001f80:	88fa      	ldrh	r2, [r7, #6]
 8001f82:	b2d1      	uxtb	r1, r2
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	54d1      	strb	r1, [r2, r3]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);

unsigned char chifted = 	Colour>>8;;
unsigned char burst_buffer[Buffer_Size];
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f8a:	3302      	adds	r3, #2
 8001f8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d3ec      	bcc.n	8001f70 <ILI9341_Draw_Colour_Burst+0x8c>
	{
		burst_buffer[j] = 	chifted;
		burst_buffer[j+1] = Colour;
	}

uint32_t Sending_Size = Size*2;
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa4:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001faa:	fbb3 f2f2 	udiv	r2, r3, r2
 8001fae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001fb0:	fb01 f202 	mul.w	r2, r1, r2
 8001fb4:	1a9b      	subs	r3, r3, r2
 8001fb6:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d012      	beq.n	8001fe4 <ILI9341_Draw_Colour_Burst+0x100>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fc2:	e00b      	b.n	8001fdc <ILI9341_Draw_Colour_Burst+0xf8>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	4811      	ldr	r0, [pc, #68]	; (8002010 <ILI9341_Draw_Colour_Burst+0x12c>)
 8001fcc:	4611      	mov	r1, r2
 8001fce:	461a      	mov	r2, r3
 8001fd0:	230a      	movs	r3, #10
 8001fd2:	f002 fe5d 	bl	8004c90 <HAL_SPI_Transmit>
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;

if(Sending_in_Block != 0)
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd8:	3301      	adds	r3, #1
 8001fda:	627b      	str	r3, [r7, #36]	; 0x24
 8001fdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d3ef      	bcc.n	8001fc4 <ILI9341_Draw_Colour_Burst+0xe0>
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	4809      	ldr	r0, [pc, #36]	; (8002010 <ILI9341_Draw_Colour_Burst+0x12c>)
 8001fec:	4611      	mov	r1, r2
 8001fee:	461a      	mov	r2, r3
 8001ff0:	230a      	movs	r3, #10
 8001ff2:	f002 fe4d 	bl	8004c90 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001ff6:	4805      	ldr	r0, [pc, #20]	; (800200c <ILI9341_Draw_Colour_Burst+0x128>)
 8001ff8:	2104      	movs	r1, #4
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f002 f8ae 	bl	800415c <HAL_GPIO_WritePin>
 8002000:	46b5      	mov	sp, r6
}
 8002002:	3734      	adds	r7, #52	; 0x34
 8002004:	46bd      	mov	sp, r7
 8002006:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800200a:	bf00      	nop
 800200c:	48000c00 	.word	0x48000c00
 8002010:	20000148 	.word	0x20000148

08002014 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 800201e:	4b0e      	ldr	r3, [pc, #56]	; (8002058 <ILI9341_Fill_Screen+0x44>)
 8002020:	881b      	ldrh	r3, [r3, #0]
 8002022:	b29a      	uxth	r2, r3
 8002024:	4b0d      	ldr	r3, [pc, #52]	; (800205c <ILI9341_Fill_Screen+0x48>)
 8002026:	881b      	ldrh	r3, [r3, #0]
 8002028:	b29b      	uxth	r3, r3
 800202a:	2000      	movs	r0, #0
 800202c:	2100      	movs	r1, #0
 800202e:	f7ff fd89 	bl	8001b44 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8002032:	4b09      	ldr	r3, [pc, #36]	; (8002058 <ILI9341_Fill_Screen+0x44>)
 8002034:	881b      	ldrh	r3, [r3, #0]
 8002036:	b29b      	uxth	r3, r3
 8002038:	461a      	mov	r2, r3
 800203a:	4b08      	ldr	r3, [pc, #32]	; (800205c <ILI9341_Fill_Screen+0x48>)
 800203c:	881b      	ldrh	r3, [r3, #0]
 800203e:	b29b      	uxth	r3, r3
 8002040:	fb03 f302 	mul.w	r3, r3, r2
 8002044:	461a      	mov	r2, r3
 8002046:	88fb      	ldrh	r3, [r7, #6]
 8002048:	4618      	mov	r0, r3
 800204a:	4611      	mov	r1, r2
 800204c:	f7ff ff4a 	bl	8001ee4 <ILI9341_Draw_Colour_Burst>
}
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	20000006 	.word	0x20000006
 800205c:	20000004 	.word	0x20000004

08002060 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	80fb      	strh	r3, [r7, #6]
 800206a:	460b      	mov	r3, r1
 800206c:	80bb      	strh	r3, [r7, #4]
 800206e:	4613      	mov	r3, r2
 8002070:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002072:	4b62      	ldr	r3, [pc, #392]	; (80021fc <ILI9341_Draw_Pixel+0x19c>)
 8002074:	881b      	ldrh	r3, [r3, #0]
 8002076:	b29b      	uxth	r3, r3
 8002078:	88fa      	ldrh	r2, [r7, #6]
 800207a:	429a      	cmp	r2, r3
 800207c:	f080 80ba 	bcs.w	80021f4 <ILI9341_Draw_Pixel+0x194>
 8002080:	4b5f      	ldr	r3, [pc, #380]	; (8002200 <ILI9341_Draw_Pixel+0x1a0>)
 8002082:	881b      	ldrh	r3, [r3, #0]
 8002084:	b29b      	uxth	r3, r3
 8002086:	88ba      	ldrh	r2, [r7, #4]
 8002088:	429a      	cmp	r2, r3
 800208a:	f080 80b3 	bcs.w	80021f4 <ILI9341_Draw_Pixel+0x194>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800208e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002092:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002096:	2200      	movs	r2, #0
 8002098:	f002 f860 	bl	800415c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800209c:	4859      	ldr	r0, [pc, #356]	; (8002204 <ILI9341_Draw_Pixel+0x1a4>)
 800209e:	2104      	movs	r1, #4
 80020a0:	2200      	movs	r2, #0
 80020a2:	f002 f85b 	bl	800415c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 80020a6:	202a      	movs	r0, #42	; 0x2a
 80020a8:	f7ff fcfa 	bl	8001aa0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80020ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020b4:	2201      	movs	r2, #1
 80020b6:	f002 f851 	bl	800415c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80020ba:	4852      	ldr	r0, [pc, #328]	; (8002204 <ILI9341_Draw_Pixel+0x1a4>)
 80020bc:	2104      	movs	r1, #4
 80020be:	2201      	movs	r2, #1
 80020c0:	f002 f84c 	bl	800415c <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80020c4:	484f      	ldr	r0, [pc, #316]	; (8002204 <ILI9341_Draw_Pixel+0x1a4>)
 80020c6:	2104      	movs	r1, #4
 80020c8:	2200      	movs	r2, #0
 80020ca:	f002 f847 	bl	800415c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 80020ce:	88fb      	ldrh	r3, [r7, #6]
 80020d0:	0a1b      	lsrs	r3, r3, #8
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	753b      	strb	r3, [r7, #20]
 80020d8:	88fb      	ldrh	r3, [r7, #6]
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	757b      	strb	r3, [r7, #21]
 80020de:	88fb      	ldrh	r3, [r7, #6]
 80020e0:	3301      	adds	r3, #1
 80020e2:	121b      	asrs	r3, r3, #8
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	75bb      	strb	r3, [r7, #22]
 80020e8:	88fb      	ldrh	r3, [r7, #6]
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	3301      	adds	r3, #1
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 80020f2:	f107 0314 	add.w	r3, r7, #20
 80020f6:	4844      	ldr	r0, [pc, #272]	; (8002208 <ILI9341_Draw_Pixel+0x1a8>)
 80020f8:	4619      	mov	r1, r3
 80020fa:	2204      	movs	r2, #4
 80020fc:	2301      	movs	r3, #1
 80020fe:	f002 fdc7 	bl	8004c90 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002102:	4840      	ldr	r0, [pc, #256]	; (8002204 <ILI9341_Draw_Pixel+0x1a4>)
 8002104:	2104      	movs	r1, #4
 8002106:	2201      	movs	r2, #1
 8002108:	f002 f828 	bl	800415c <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800210c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002110:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002114:	2200      	movs	r2, #0
 8002116:	f002 f821 	bl	800415c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 800211a:	483a      	ldr	r0, [pc, #232]	; (8002204 <ILI9341_Draw_Pixel+0x1a4>)
 800211c:	2104      	movs	r1, #4
 800211e:	2200      	movs	r2, #0
 8002120:	f002 f81c 	bl	800415c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8002124:	202b      	movs	r0, #43	; 0x2b
 8002126:	f7ff fcbb 	bl	8001aa0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 800212a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800212e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002132:	2201      	movs	r2, #1
 8002134:	f002 f812 	bl	800415c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002138:	4832      	ldr	r0, [pc, #200]	; (8002204 <ILI9341_Draw_Pixel+0x1a4>)
 800213a:	2104      	movs	r1, #4
 800213c:	2201      	movs	r2, #1
 800213e:	f002 f80d 	bl	800415c <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002142:	4830      	ldr	r0, [pc, #192]	; (8002204 <ILI9341_Draw_Pixel+0x1a4>)
 8002144:	2104      	movs	r1, #4
 8002146:	2200      	movs	r2, #0
 8002148:	f002 f808 	bl	800415c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 800214c:	88bb      	ldrh	r3, [r7, #4]
 800214e:	0a1b      	lsrs	r3, r3, #8
 8002150:	b29b      	uxth	r3, r3
 8002152:	b2db      	uxtb	r3, r3
 8002154:	743b      	strb	r3, [r7, #16]
 8002156:	88bb      	ldrh	r3, [r7, #4]
 8002158:	b2db      	uxtb	r3, r3
 800215a:	747b      	strb	r3, [r7, #17]
 800215c:	88bb      	ldrh	r3, [r7, #4]
 800215e:	3301      	adds	r3, #1
 8002160:	121b      	asrs	r3, r3, #8
 8002162:	b2db      	uxtb	r3, r3
 8002164:	74bb      	strb	r3, [r7, #18]
 8002166:	88bb      	ldrh	r3, [r7, #4]
 8002168:	b2db      	uxtb	r3, r3
 800216a:	3301      	adds	r3, #1
 800216c:	b2db      	uxtb	r3, r3
 800216e:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8002170:	f107 0310 	add.w	r3, r7, #16
 8002174:	4824      	ldr	r0, [pc, #144]	; (8002208 <ILI9341_Draw_Pixel+0x1a8>)
 8002176:	4619      	mov	r1, r3
 8002178:	2204      	movs	r2, #4
 800217a:	2301      	movs	r3, #1
 800217c:	f002 fd88 	bl	8004c90 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002180:	4820      	ldr	r0, [pc, #128]	; (8002204 <ILI9341_Draw_Pixel+0x1a4>)
 8002182:	2104      	movs	r1, #4
 8002184:	2201      	movs	r2, #1
 8002186:	f001 ffe9 	bl	800415c <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800218a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800218e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002192:	2200      	movs	r2, #0
 8002194:	f001 ffe2 	bl	800415c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002198:	481a      	ldr	r0, [pc, #104]	; (8002204 <ILI9341_Draw_Pixel+0x1a4>)
 800219a:	2104      	movs	r1, #4
 800219c:	2200      	movs	r2, #0
 800219e:	f001 ffdd 	bl	800415c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 80021a2:	202c      	movs	r0, #44	; 0x2c
 80021a4:	f7ff fc7c 	bl	8001aa0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80021a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021b0:	2201      	movs	r2, #1
 80021b2:	f001 ffd3 	bl	800415c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80021b6:	4813      	ldr	r0, [pc, #76]	; (8002204 <ILI9341_Draw_Pixel+0x1a4>)
 80021b8:	2104      	movs	r1, #4
 80021ba:	2201      	movs	r2, #1
 80021bc:	f001 ffce 	bl	800415c <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80021c0:	4810      	ldr	r0, [pc, #64]	; (8002204 <ILI9341_Draw_Pixel+0x1a4>)
 80021c2:	2104      	movs	r1, #4
 80021c4:	2200      	movs	r2, #0
 80021c6:	f001 ffc9 	bl	800415c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 80021ca:	887b      	ldrh	r3, [r7, #2]
 80021cc:	0a1b      	lsrs	r3, r3, #8
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	733b      	strb	r3, [r7, #12]
 80021d4:	887b      	ldrh	r3, [r7, #2]
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 80021da:	f107 030c 	add.w	r3, r7, #12
 80021de:	480a      	ldr	r0, [pc, #40]	; (8002208 <ILI9341_Draw_Pixel+0x1a8>)
 80021e0:	4619      	mov	r1, r3
 80021e2:	2202      	movs	r2, #2
 80021e4:	2301      	movs	r3, #1
 80021e6:	f002 fd53 	bl	8004c90 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80021ea:	4806      	ldr	r0, [pc, #24]	; (8002204 <ILI9341_Draw_Pixel+0x1a4>)
 80021ec:	2104      	movs	r1, #4
 80021ee:	2201      	movs	r2, #1
 80021f0:	f001 ffb4 	bl	800415c <HAL_GPIO_WritePin>
	
}
 80021f4:	3718      	adds	r7, #24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20000006 	.word	0x20000006
 8002200:	20000004 	.word	0x20000004
 8002204:	48000c00 	.word	0x48000c00
 8002208:	20000148 	.word	0x20000148

0800220c <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 800220c:	b590      	push	{r4, r7, lr}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	4604      	mov	r4, r0
 8002214:	4608      	mov	r0, r1
 8002216:	4611      	mov	r1, r2
 8002218:	461a      	mov	r2, r3
 800221a:	4623      	mov	r3, r4
 800221c:	80fb      	strh	r3, [r7, #6]
 800221e:	4603      	mov	r3, r0
 8002220:	80bb      	strh	r3, [r7, #4]
 8002222:	460b      	mov	r3, r1
 8002224:	807b      	strh	r3, [r7, #2]
 8002226:	4613      	mov	r3, r2
 8002228:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800222a:	4b25      	ldr	r3, [pc, #148]	; (80022c0 <ILI9341_Draw_Rectangle+0xb4>)
 800222c:	881b      	ldrh	r3, [r3, #0]
 800222e:	b29b      	uxth	r3, r3
 8002230:	88fa      	ldrh	r2, [r7, #6]
 8002232:	429a      	cmp	r2, r3
 8002234:	d205      	bcs.n	8002242 <ILI9341_Draw_Rectangle+0x36>
 8002236:	4b23      	ldr	r3, [pc, #140]	; (80022c4 <ILI9341_Draw_Rectangle+0xb8>)
 8002238:	881b      	ldrh	r3, [r3, #0]
 800223a:	b29b      	uxth	r3, r3
 800223c:	88ba      	ldrh	r2, [r7, #4]
 800223e:	429a      	cmp	r2, r3
 8002240:	d300      	bcc.n	8002244 <ILI9341_Draw_Rectangle+0x38>
 8002242:	e03a      	b.n	80022ba <ILI9341_Draw_Rectangle+0xae>
if((X+Width-1)>=LCD_WIDTH)
 8002244:	88fa      	ldrh	r2, [r7, #6]
 8002246:	887b      	ldrh	r3, [r7, #2]
 8002248:	4413      	add	r3, r2
 800224a:	3b01      	subs	r3, #1
 800224c:	4a1c      	ldr	r2, [pc, #112]	; (80022c0 <ILI9341_Draw_Rectangle+0xb4>)
 800224e:	8812      	ldrh	r2, [r2, #0]
 8002250:	b292      	uxth	r2, r2
 8002252:	4293      	cmp	r3, r2
 8002254:	db05      	blt.n	8002262 <ILI9341_Draw_Rectangle+0x56>
	{
		Width=LCD_WIDTH-X;
 8002256:	4b1a      	ldr	r3, [pc, #104]	; (80022c0 <ILI9341_Draw_Rectangle+0xb4>)
 8002258:	881b      	ldrh	r3, [r3, #0]
 800225a:	b29a      	uxth	r2, r3
 800225c:	88fb      	ldrh	r3, [r7, #6]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8002262:	88ba      	ldrh	r2, [r7, #4]
 8002264:	883b      	ldrh	r3, [r7, #0]
 8002266:	4413      	add	r3, r2
 8002268:	3b01      	subs	r3, #1
 800226a:	4a16      	ldr	r2, [pc, #88]	; (80022c4 <ILI9341_Draw_Rectangle+0xb8>)
 800226c:	8812      	ldrh	r2, [r2, #0]
 800226e:	b292      	uxth	r2, r2
 8002270:	4293      	cmp	r3, r2
 8002272:	db05      	blt.n	8002280 <ILI9341_Draw_Rectangle+0x74>
	{
		Height=LCD_HEIGHT-Y;
 8002274:	4b13      	ldr	r3, [pc, #76]	; (80022c4 <ILI9341_Draw_Rectangle+0xb8>)
 8002276:	881b      	ldrh	r3, [r3, #0]
 8002278:	b29a      	uxth	r2, r3
 800227a:	88bb      	ldrh	r3, [r7, #4]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8002280:	88fa      	ldrh	r2, [r7, #6]
 8002282:	887b      	ldrh	r3, [r7, #2]
 8002284:	4413      	add	r3, r2
 8002286:	b29b      	uxth	r3, r3
 8002288:	3b01      	subs	r3, #1
 800228a:	b29c      	uxth	r4, r3
 800228c:	88ba      	ldrh	r2, [r7, #4]
 800228e:	883b      	ldrh	r3, [r7, #0]
 8002290:	4413      	add	r3, r2
 8002292:	b29b      	uxth	r3, r3
 8002294:	3b01      	subs	r3, #1
 8002296:	b29b      	uxth	r3, r3
 8002298:	88f9      	ldrh	r1, [r7, #6]
 800229a:	88ba      	ldrh	r2, [r7, #4]
 800229c:	4608      	mov	r0, r1
 800229e:	4611      	mov	r1, r2
 80022a0:	4622      	mov	r2, r4
 80022a2:	f7ff fc4f 	bl	8001b44 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 80022a6:	883b      	ldrh	r3, [r7, #0]
 80022a8:	887a      	ldrh	r2, [r7, #2]
 80022aa:	fb02 f303 	mul.w	r3, r2, r3
 80022ae:	461a      	mov	r2, r3
 80022b0:	8b3b      	ldrh	r3, [r7, #24]
 80022b2:	4618      	mov	r0, r3
 80022b4:	4611      	mov	r1, r2
 80022b6:	f7ff fe15 	bl	8001ee4 <ILI9341_Draw_Colour_Burst>
}
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd90      	pop	{r4, r7, pc}
 80022c0:	20000006 	.word	0x20000006
 80022c4:	20000004 	.word	0x20000004

080022c8 <ILI9341_Draw_Horizontal_Line>:

//DRAW LINE FROM X,Y LOCATION to X+Width,Y LOCATION
void ILI9341_Draw_Horizontal_Line(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Colour)
{
 80022c8:	b590      	push	{r4, r7, lr}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4604      	mov	r4, r0
 80022d0:	4608      	mov	r0, r1
 80022d2:	4611      	mov	r1, r2
 80022d4:	461a      	mov	r2, r3
 80022d6:	4623      	mov	r3, r4
 80022d8:	80fb      	strh	r3, [r7, #6]
 80022da:	4603      	mov	r3, r0
 80022dc:	80bb      	strh	r3, [r7, #4]
 80022de:	460b      	mov	r3, r1
 80022e0:	807b      	strh	r3, [r7, #2]
 80022e2:	4613      	mov	r3, r2
 80022e4:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80022e6:	4b18      	ldr	r3, [pc, #96]	; (8002348 <ILI9341_Draw_Horizontal_Line+0x80>)
 80022e8:	881b      	ldrh	r3, [r3, #0]
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	88fa      	ldrh	r2, [r7, #6]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d205      	bcs.n	80022fe <ILI9341_Draw_Horizontal_Line+0x36>
 80022f2:	4b16      	ldr	r3, [pc, #88]	; (800234c <ILI9341_Draw_Horizontal_Line+0x84>)
 80022f4:	881b      	ldrh	r3, [r3, #0]
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	88ba      	ldrh	r2, [r7, #4]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d300      	bcc.n	8002300 <ILI9341_Draw_Horizontal_Line+0x38>
 80022fe:	e01f      	b.n	8002340 <ILI9341_Draw_Horizontal_Line+0x78>
if((X+Width-1)>=LCD_WIDTH)
 8002300:	88fa      	ldrh	r2, [r7, #6]
 8002302:	887b      	ldrh	r3, [r7, #2]
 8002304:	4413      	add	r3, r2
 8002306:	3b01      	subs	r3, #1
 8002308:	4a0f      	ldr	r2, [pc, #60]	; (8002348 <ILI9341_Draw_Horizontal_Line+0x80>)
 800230a:	8812      	ldrh	r2, [r2, #0]
 800230c:	b292      	uxth	r2, r2
 800230e:	4293      	cmp	r3, r2
 8002310:	db05      	blt.n	800231e <ILI9341_Draw_Horizontal_Line+0x56>
	{
		Width=LCD_WIDTH-X;
 8002312:	4b0d      	ldr	r3, [pc, #52]	; (8002348 <ILI9341_Draw_Horizontal_Line+0x80>)
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	b29a      	uxth	r2, r3
 8002318:	88fb      	ldrh	r3, [r7, #6]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y);
 800231e:	88fa      	ldrh	r2, [r7, #6]
 8002320:	887b      	ldrh	r3, [r7, #2]
 8002322:	4413      	add	r3, r2
 8002324:	b29b      	uxth	r3, r3
 8002326:	3b01      	subs	r3, #1
 8002328:	b29a      	uxth	r2, r3
 800232a:	88f8      	ldrh	r0, [r7, #6]
 800232c:	88b9      	ldrh	r1, [r7, #4]
 800232e:	88bb      	ldrh	r3, [r7, #4]
 8002330:	f7ff fc08 	bl	8001b44 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Width);
 8002334:	887b      	ldrh	r3, [r7, #2]
 8002336:	883a      	ldrh	r2, [r7, #0]
 8002338:	4610      	mov	r0, r2
 800233a:	4619      	mov	r1, r3
 800233c:	f7ff fdd2 	bl	8001ee4 <ILI9341_Draw_Colour_Burst>
}
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	bd90      	pop	{r4, r7, pc}
 8002346:	bf00      	nop
 8002348:	20000006 	.word	0x20000006
 800234c:	20000004 	.word	0x20000004

08002350 <ILI9341_Draw_Vertical_Line>:

//DRAW LINE FROM X,Y LOCATION to X,Y+Height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t X, uint16_t Y, uint16_t Height, uint16_t Colour)
{
 8002350:	b590      	push	{r4, r7, lr}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	4604      	mov	r4, r0
 8002358:	4608      	mov	r0, r1
 800235a:	4611      	mov	r1, r2
 800235c:	461a      	mov	r2, r3
 800235e:	4623      	mov	r3, r4
 8002360:	80fb      	strh	r3, [r7, #6]
 8002362:	4603      	mov	r3, r0
 8002364:	80bb      	strh	r3, [r7, #4]
 8002366:	460b      	mov	r3, r1
 8002368:	807b      	strh	r3, [r7, #2]
 800236a:	4613      	mov	r3, r2
 800236c:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800236e:	4b18      	ldr	r3, [pc, #96]	; (80023d0 <ILI9341_Draw_Vertical_Line+0x80>)
 8002370:	881b      	ldrh	r3, [r3, #0]
 8002372:	b29b      	uxth	r3, r3
 8002374:	88fa      	ldrh	r2, [r7, #6]
 8002376:	429a      	cmp	r2, r3
 8002378:	d205      	bcs.n	8002386 <ILI9341_Draw_Vertical_Line+0x36>
 800237a:	4b16      	ldr	r3, [pc, #88]	; (80023d4 <ILI9341_Draw_Vertical_Line+0x84>)
 800237c:	881b      	ldrh	r3, [r3, #0]
 800237e:	b29b      	uxth	r3, r3
 8002380:	88ba      	ldrh	r2, [r7, #4]
 8002382:	429a      	cmp	r2, r3
 8002384:	d300      	bcc.n	8002388 <ILI9341_Draw_Vertical_Line+0x38>
 8002386:	e01f      	b.n	80023c8 <ILI9341_Draw_Vertical_Line+0x78>
if((Y+Height-1)>=LCD_HEIGHT)
 8002388:	88ba      	ldrh	r2, [r7, #4]
 800238a:	887b      	ldrh	r3, [r7, #2]
 800238c:	4413      	add	r3, r2
 800238e:	3b01      	subs	r3, #1
 8002390:	4a10      	ldr	r2, [pc, #64]	; (80023d4 <ILI9341_Draw_Vertical_Line+0x84>)
 8002392:	8812      	ldrh	r2, [r2, #0]
 8002394:	b292      	uxth	r2, r2
 8002396:	4293      	cmp	r3, r2
 8002398:	db05      	blt.n	80023a6 <ILI9341_Draw_Vertical_Line+0x56>
	{
		Height=LCD_HEIGHT-Y;
 800239a:	4b0e      	ldr	r3, [pc, #56]	; (80023d4 <ILI9341_Draw_Vertical_Line+0x84>)
 800239c:	881b      	ldrh	r3, [r3, #0]
 800239e:	b29a      	uxth	r2, r3
 80023a0:	88bb      	ldrh	r3, [r7, #4]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X, Y+Height-1);
 80023a6:	88ba      	ldrh	r2, [r7, #4]
 80023a8:	887b      	ldrh	r3, [r7, #2]
 80023aa:	4413      	add	r3, r2
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	3b01      	subs	r3, #1
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	88f8      	ldrh	r0, [r7, #6]
 80023b4:	88b9      	ldrh	r1, [r7, #4]
 80023b6:	88fa      	ldrh	r2, [r7, #6]
 80023b8:	f7ff fbc4 	bl	8001b44 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height);
 80023bc:	887b      	ldrh	r3, [r7, #2]
 80023be:	883a      	ldrh	r2, [r7, #0]
 80023c0:	4610      	mov	r0, r2
 80023c2:	4619      	mov	r1, r3
 80023c4:	f7ff fd8e 	bl	8001ee4 <ILI9341_Draw_Colour_Burst>
}
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd90      	pop	{r4, r7, pc}
 80023ce:	bf00      	nop
 80023d0:	20000006 	.word	0x20000006
 80023d4:	20000004 	.word	0x20000004

080023d8 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop

080023ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop

08002400 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop

08002414 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002418:	4a08      	ldr	r2, [pc, #32]	; (800243c <HAL_Init+0x28>)
 800241a:	4b08      	ldr	r3, [pc, #32]	; (800243c <HAL_Init+0x28>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f043 0310 	orr.w	r3, r3, #16
 8002422:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002424:	2003      	movs	r0, #3
 8002426:	f000 f909 	bl	800263c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800242a:	2000      	movs	r0, #0
 800242c:	f7fe fb3a 	bl	8000aa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002430:	f7fe faa2 	bl	8000978 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40022000 	.word	0x40022000

08002440 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  uwTick++;
 8002444:	4b04      	ldr	r3, [pc, #16]	; (8002458 <HAL_IncTick+0x18>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	3301      	adds	r3, #1
 800244a:	4a03      	ldr	r2, [pc, #12]	; (8002458 <HAL_IncTick+0x18>)
 800244c:	6013      	str	r3, [r2, #0]
}
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	200001ac 	.word	0x200001ac

0800245c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  return uwTick;  
 8002460:	4b03      	ldr	r3, [pc, #12]	; (8002470 <HAL_GetTick+0x14>)
 8002462:	681b      	ldr	r3, [r3, #0]
}
 8002464:	4618      	mov	r0, r3
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	200001ac 	.word	0x200001ac

08002474 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800247c:	f7ff ffee 	bl	800245c <HAL_GetTick>
 8002480:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800248c:	d002      	beq.n	8002494 <HAL_Delay+0x20>
  {
     wait++;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	3301      	adds	r3, #1
 8002492:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002494:	bf00      	nop
 8002496:	f7ff ffe1 	bl	800245c <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	1ad2      	subs	r2, r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d3f7      	bcc.n	8002496 <HAL_Delay+0x22>
  {
  }
}
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024bc:	4b0c      	ldr	r3, [pc, #48]	; (80024f0 <NVIC_SetPriorityGrouping+0x44>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024c8:	4013      	ands	r3, r2
 80024ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80024d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024dc:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80024de:	4a04      	ldr	r2, [pc, #16]	; (80024f0 <NVIC_SetPriorityGrouping+0x44>)
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	60d3      	str	r3, [r2, #12]
}
 80024e4:	3714      	adds	r7, #20
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	e000ed00 	.word	0xe000ed00

080024f4 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024f8:	4b04      	ldr	r3, [pc, #16]	; (800250c <NVIC_GetPriorityGrouping+0x18>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002500:	0a1b      	lsrs	r3, r3, #8
}
 8002502:	4618      	mov	r0, r3
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	e000ed00 	.word	0xe000ed00

08002510 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	4603      	mov	r3, r0
 8002518:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800251a:	4908      	ldr	r1, [pc, #32]	; (800253c <NVIC_EnableIRQ+0x2c>)
 800251c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002520:	095b      	lsrs	r3, r3, #5
 8002522:	79fa      	ldrb	r2, [r7, #7]
 8002524:	f002 021f 	and.w	r2, r2, #31
 8002528:	2001      	movs	r0, #1
 800252a:	fa00 f202 	lsl.w	r2, r0, r2
 800252e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	e000e100 	.word	0xe000e100

08002540 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	4603      	mov	r3, r0
 8002548:	6039      	str	r1, [r7, #0]
 800254a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800254c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002550:	2b00      	cmp	r3, #0
 8002552:	da0b      	bge.n	800256c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002554:	490d      	ldr	r1, [pc, #52]	; (800258c <NVIC_SetPriority+0x4c>)
 8002556:	79fb      	ldrb	r3, [r7, #7]
 8002558:	f003 030f 	and.w	r3, r3, #15
 800255c:	3b04      	subs	r3, #4
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	b2d2      	uxtb	r2, r2
 8002562:	0112      	lsls	r2, r2, #4
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	440b      	add	r3, r1
 8002568:	761a      	strb	r2, [r3, #24]
 800256a:	e009      	b.n	8002580 <NVIC_SetPriority+0x40>
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800256c:	4908      	ldr	r1, [pc, #32]	; (8002590 <NVIC_SetPriority+0x50>)
 800256e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	0112      	lsls	r2, r2, #4
 8002578:	b2d2      	uxtb	r2, r2
 800257a:	440b      	add	r3, r1
 800257c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	e000ed00 	.word	0xe000ed00
 8002590:	e000e100 	.word	0xe000e100

08002594 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002594:	b480      	push	{r7}
 8002596:	b089      	sub	sp, #36	; 0x24
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f003 0307 	and.w	r3, r3, #7
 80025a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	f1c3 0307 	rsb	r3, r3, #7
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	bf28      	it	cs
 80025b2:	2304      	movcs	r3, #4
 80025b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	3304      	adds	r3, #4
 80025ba:	2b06      	cmp	r3, #6
 80025bc:	d902      	bls.n	80025c4 <NVIC_EncodePriority+0x30>
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	3b03      	subs	r3, #3
 80025c2:	e000      	b.n	80025c6 <NVIC_EncodePriority+0x32>
 80025c4:	2300      	movs	r3, #0
 80025c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	2201      	movs	r2, #1
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	1e5a      	subs	r2, r3, #1
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	401a      	ands	r2, r3
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	2101      	movs	r1, #1
 80025de:	fa01 f303 	lsl.w	r3, r1, r3
 80025e2:	1e59      	subs	r1, r3, #1
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80025e8:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3724      	adds	r7, #36	; 0x24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop

080025f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3b01      	subs	r3, #1
 8002604:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002608:	d301      	bcc.n	800260e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800260a:	2301      	movs	r3, #1
 800260c:	e00f      	b.n	800262e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800260e:	4a0a      	ldr	r2, [pc, #40]	; (8002638 <SysTick_Config+0x40>)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3b01      	subs	r3, #1
 8002614:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002616:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800261a:	210f      	movs	r1, #15
 800261c:	f7ff ff90 	bl	8002540 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002620:	4b05      	ldr	r3, [pc, #20]	; (8002638 <SysTick_Config+0x40>)
 8002622:	2200      	movs	r2, #0
 8002624:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002626:	4b04      	ldr	r3, [pc, #16]	; (8002638 <SysTick_Config+0x40>)
 8002628:	2207      	movs	r2, #7
 800262a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	e000e010 	.word	0xe000e010

0800263c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f7ff ff31 	bl	80024ac <NVIC_SetPriorityGrouping>
}
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	4603      	mov	r3, r0
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
 800265c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800265e:	2300      	movs	r3, #0
 8002660:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002662:	f7ff ff47 	bl	80024f4 <NVIC_GetPriorityGrouping>
 8002666:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002668:	6978      	ldr	r0, [r7, #20]
 800266a:	68b9      	ldr	r1, [r7, #8]
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	f7ff ff91 	bl	8002594 <NVIC_EncodePriority>
 8002672:	4602      	mov	r2, r0
 8002674:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002678:	4618      	mov	r0, r3
 800267a:	4611      	mov	r1, r2
 800267c:	f7ff ff60 	bl	8002540 <NVIC_SetPriority>
}
 8002680:	3718      	adds	r7, #24
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop

08002688 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	4603      	mov	r3, r0
 8002690:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff ff3a 	bl	8002510 <NVIC_EnableIRQ>
}
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop

080026a4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f7ff ffa3 	bl	80025f8 <SysTick_Config>
 80026b2:	4603      	mov	r3, r0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	d106      	bne.n	80026d8 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80026ca:	4a09      	ldr	r2, [pc, #36]	; (80026f0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80026cc:	4b08      	ldr	r3, [pc, #32]	; (80026f0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f043 0304 	orr.w	r3, r3, #4
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	e005      	b.n	80026e4 <HAL_SYSTICK_CLKSourceConfig+0x28>
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80026d8:	4a05      	ldr	r2, [pc, #20]	; (80026f0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80026da:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f023 0304 	bic.w	r3, r3, #4
 80026e2:	6013      	str	r3, [r2, #0]
  }
}
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	e000e010 	.word	0xe000e010

080026f4 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80026f8:	f000 f802 	bl	8002700 <HAL_SYSTICK_Callback>
}
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop

08002700 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002712:	af00      	add	r7, sp, #0
 8002714:	1d3b      	adds	r3, r7, #4
 8002716:	6018      	str	r0, [r3, #0]
   uint32_t tickstart = 0U;
 8002718:	2300      	movs	r3, #0
 800271a:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800271e:	1d3b      	adds	r3, r7, #4
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 81cc 	beq.w	8002ac6 <HAL_RCC_OscConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800272e:	4baf      	ldr	r3, [pc, #700]	; (80029ec <HAL_RCC_OscConfig+0x2e0>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f003 030c 	and.w	r3, r3, #12
 8002736:	2b04      	cmp	r3, #4
 8002738:	d00b      	beq.n	8002752 <HAL_RCC_OscConfig+0x46>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800273a:	4bac      	ldr	r3, [pc, #688]	; (80029ec <HAL_RCC_OscConfig+0x2e0>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f003 030c 	and.w	r3, r3, #12
 8002742:	2b08      	cmp	r3, #8
 8002744:	d179      	bne.n	800283a <HAL_RCC_OscConfig+0x12e>
 8002746:	4ba9      	ldr	r3, [pc, #676]	; (80029ec <HAL_RCC_OscConfig+0x2e0>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d073      	beq.n	800283a <HAL_RCC_OscConfig+0x12e>
 8002752:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002756:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800275e:	fa93 f3a3 	rbit	r3, r3
 8002762:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002766:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800276a:	fab3 f383 	clz	r3, r3
 800276e:	b2db      	uxtb	r3, r3
 8002770:	f043 0320 	orr.w	r3, r3, #32
 8002774:	b2db      	uxtb	r3, r3
 8002776:	b2db      	uxtb	r3, r3
 8002778:	095b      	lsrs	r3, r3, #5
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b01      	cmp	r3, #1
 800277e:	d102      	bne.n	8002786 <HAL_RCC_OscConfig+0x7a>
 8002780:	4b9a      	ldr	r3, [pc, #616]	; (80029ec <HAL_RCC_OscConfig+0x2e0>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	e035      	b.n	80027f2 <HAL_RCC_OscConfig+0xe6>
 8002786:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800278a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002792:	fa93 f3a3 	rbit	r3, r3
 8002796:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800279a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800279e:	fab3 f383 	clz	r3, r3
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	f043 0320 	orr.w	r3, r3, #32
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	095b      	lsrs	r3, r3, #5
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d102      	bne.n	80027ba <HAL_RCC_OscConfig+0xae>
 80027b4:	4b8d      	ldr	r3, [pc, #564]	; (80029ec <HAL_RCC_OscConfig+0x2e0>)
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	e01b      	b.n	80027f2 <HAL_RCC_OscConfig+0xe6>
 80027ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027be:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80027c6:	fa93 f3a3 	rbit	r3, r3
 80027ca:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80027ce:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80027d2:	fab3 f383 	clz	r3, r3
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	f043 0320 	orr.w	r3, r3, #32
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	095b      	lsrs	r3, r3, #5
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2b04      	cmp	r3, #4
 80027e6:	d102      	bne.n	80027ee <HAL_RCC_OscConfig+0xe2>
 80027e8:	4b80      	ldr	r3, [pc, #512]	; (80029ec <HAL_RCC_OscConfig+0x2e0>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	e001      	b.n	80027f2 <HAL_RCC_OscConfig+0xe6>
 80027ee:	4b7f      	ldr	r3, [pc, #508]	; (80029ec <HAL_RCC_OscConfig+0x2e0>)
 80027f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027f6:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fa:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80027fe:	fa92 f2a2 	rbit	r2, r2
 8002802:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002806:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800280a:	fab2 f282 	clz	r2, r2
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	f042 0220 	orr.w	r2, r2, #32
 8002814:	b2d2      	uxtb	r2, r2
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	f002 021f 	and.w	r2, r2, #31
 800281c:	2101      	movs	r1, #1
 800281e:	fa01 f202 	lsl.w	r2, r1, r2
 8002822:	4013      	ands	r3, r2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d007      	beq.n	8002838 <HAL_RCC_OscConfig+0x12c>
 8002828:	1d3b      	adds	r3, r7, #4
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d102      	bne.n	8002838 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	f001 b831 	b.w	800389a <HAL_RCC_OscConfig+0x118e>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002838:	e145      	b.n	8002ac6 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800283a:	1d3b      	adds	r3, r7, #4
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002844:	d106      	bne.n	8002854 <HAL_RCC_OscConfig+0x148>
 8002846:	4a69      	ldr	r2, [pc, #420]	; (80029ec <HAL_RCC_OscConfig+0x2e0>)
 8002848:	4b68      	ldr	r3, [pc, #416]	; (80029ec <HAL_RCC_OscConfig+0x2e0>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002850:	6013      	str	r3, [r2, #0]
 8002852:	e030      	b.n	80028b6 <HAL_RCC_OscConfig+0x1aa>
 8002854:	1d3b      	adds	r3, r7, #4
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10c      	bne.n	8002878 <HAL_RCC_OscConfig+0x16c>
 800285e:	4a63      	ldr	r2, [pc, #396]	; (80029ec <HAL_RCC_OscConfig+0x2e0>)
 8002860:	4b62      	ldr	r3, [pc, #392]	; (80029ec <HAL_RCC_OscConfig+0x2e0>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002868:	6013      	str	r3, [r2, #0]
 800286a:	4a60      	ldr	r2, [pc, #384]	; (80029ec <HAL_RCC_OscConfig+0x2e0>)
 800286c:	4b5f      	ldr	r3, [pc, #380]	; (80029ec <HAL_RCC_OscConfig+0x2e0>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	e01e      	b.n	80028b6 <HAL_RCC_OscConfig+0x1aa>
 8002878:	1d3b      	adds	r3, r7, #4
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002882:	d10c      	bne.n	800289e <HAL_RCC_OscConfig+0x192>
 8002884:	4a59      	ldr	r2, [pc, #356]	; (80029ec <HAL_RCC_OscConfig+0x2e0>)
 8002886:	4b59      	ldr	r3, [pc, #356]	; (80029ec <HAL_RCC_OscConfig+0x2e0>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800288e:	6013      	str	r3, [r2, #0]
 8002890:	4a56      	ldr	r2, [pc, #344]	; (80029ec <HAL_RCC_OscConfig+0x2e0>)
 8002892:	4b56      	ldr	r3, [pc, #344]	; (80029ec <HAL_RCC_OscConfig+0x2e0>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800289a:	6013      	str	r3, [r2, #0]
 800289c:	e00b      	b.n	80028b6 <HAL_RCC_OscConfig+0x1aa>
 800289e:	4a53      	ldr	r2, [pc, #332]	; (80029ec <HAL_RCC_OscConfig+0x2e0>)
 80028a0:	4b52      	ldr	r3, [pc, #328]	; (80029ec <HAL_RCC_OscConfig+0x2e0>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028a8:	6013      	str	r3, [r2, #0]
 80028aa:	4a50      	ldr	r2, [pc, #320]	; (80029ec <HAL_RCC_OscConfig+0x2e0>)
 80028ac:	4b4f      	ldr	r3, [pc, #316]	; (80029ec <HAL_RCC_OscConfig+0x2e0>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028b4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028b6:	494d      	ldr	r1, [pc, #308]	; (80029ec <HAL_RCC_OscConfig+0x2e0>)
 80028b8:	4b4c      	ldr	r3, [pc, #304]	; (80029ec <HAL_RCC_OscConfig+0x2e0>)
 80028ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028bc:	f023 020f 	bic.w	r2, r3, #15
 80028c0:	1d3b      	adds	r3, r7, #4
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028ca:	1d3b      	adds	r3, r7, #4
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d07b      	beq.n	80029cc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d4:	f7ff fdc2 	bl	800245c <HAL_GetTick>
 80028d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028dc:	e00a      	b.n	80028f4 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028de:	f7ff fdbd 	bl	800245c <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b64      	cmp	r3, #100	; 0x64
 80028ec:	d902      	bls.n	80028f4 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	f000 bfd3 	b.w	800389a <HAL_RCC_OscConfig+0x118e>
 80028f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028f8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002900:	fa93 f3a3 	rbit	r3, r3
 8002904:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002908:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800290c:	fab3 f383 	clz	r3, r3
 8002910:	b2db      	uxtb	r3, r3
 8002912:	f043 0320 	orr.w	r3, r3, #32
 8002916:	b2db      	uxtb	r3, r3
 8002918:	b2db      	uxtb	r3, r3
 800291a:	095b      	lsrs	r3, r3, #5
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b01      	cmp	r3, #1
 8002920:	d102      	bne.n	8002928 <HAL_RCC_OscConfig+0x21c>
 8002922:	4b32      	ldr	r3, [pc, #200]	; (80029ec <HAL_RCC_OscConfig+0x2e0>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	e035      	b.n	8002994 <HAL_RCC_OscConfig+0x288>
 8002928:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800292c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002930:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002934:	fa93 f3a3 	rbit	r3, r3
 8002938:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800293c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002940:	fab3 f383 	clz	r3, r3
 8002944:	b2db      	uxtb	r3, r3
 8002946:	f043 0320 	orr.w	r3, r3, #32
 800294a:	b2db      	uxtb	r3, r3
 800294c:	b2db      	uxtb	r3, r3
 800294e:	095b      	lsrs	r3, r3, #5
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d102      	bne.n	800295c <HAL_RCC_OscConfig+0x250>
 8002956:	4b25      	ldr	r3, [pc, #148]	; (80029ec <HAL_RCC_OscConfig+0x2e0>)
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	e01b      	b.n	8002994 <HAL_RCC_OscConfig+0x288>
 800295c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002960:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002964:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002968:	fa93 f3a3 	rbit	r3, r3
 800296c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002970:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002974:	fab3 f383 	clz	r3, r3
 8002978:	b2db      	uxtb	r3, r3
 800297a:	f043 0320 	orr.w	r3, r3, #32
 800297e:	b2db      	uxtb	r3, r3
 8002980:	b2db      	uxtb	r3, r3
 8002982:	095b      	lsrs	r3, r3, #5
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b04      	cmp	r3, #4
 8002988:	d102      	bne.n	8002990 <HAL_RCC_OscConfig+0x284>
 800298a:	4b18      	ldr	r3, [pc, #96]	; (80029ec <HAL_RCC_OscConfig+0x2e0>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	e001      	b.n	8002994 <HAL_RCC_OscConfig+0x288>
 8002990:	4b16      	ldr	r3, [pc, #88]	; (80029ec <HAL_RCC_OscConfig+0x2e0>)
 8002992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002994:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002998:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299c:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80029a0:	fa92 f2a2 	rbit	r2, r2
 80029a4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80029a8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80029ac:	fab2 f282 	clz	r2, r2
 80029b0:	b2d2      	uxtb	r2, r2
 80029b2:	f042 0220 	orr.w	r2, r2, #32
 80029b6:	b2d2      	uxtb	r2, r2
 80029b8:	b2d2      	uxtb	r2, r2
 80029ba:	f002 021f 	and.w	r2, r2, #31
 80029be:	2101      	movs	r1, #1
 80029c0:	fa01 f202 	lsl.w	r2, r1, r2
 80029c4:	4013      	ands	r3, r2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d089      	beq.n	80028de <HAL_RCC_OscConfig+0x1d2>
 80029ca:	e07c      	b.n	8002ac6 <HAL_RCC_OscConfig+0x3ba>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029cc:	f7ff fd46 	bl	800245c <HAL_GetTick>
 80029d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029d4:	e00c      	b.n	80029f0 <HAL_RCC_OscConfig+0x2e4>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029d6:	f7ff fd41 	bl	800245c <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b64      	cmp	r3, #100	; 0x64
 80029e4:	d904      	bls.n	80029f0 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	f000 bf57 	b.w	800389a <HAL_RCC_OscConfig+0x118e>
 80029ec:	40021000 	.word	0x40021000
 80029f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029f4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80029fc:	fa93 f3a3 	rbit	r3, r3
 8002a00:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002a04:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a08:	fab3 f383 	clz	r3, r3
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	f043 0320 	orr.w	r3, r3, #32
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	095b      	lsrs	r3, r3, #5
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d102      	bne.n	8002a24 <HAL_RCC_OscConfig+0x318>
 8002a1e:	4bb7      	ldr	r3, [pc, #732]	; (8002cfc <HAL_RCC_OscConfig+0x5f0>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	e035      	b.n	8002a90 <HAL_RCC_OscConfig+0x384>
 8002a24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a28:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002a30:	fa93 f3a3 	rbit	r3, r3
 8002a34:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002a38:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002a3c:	fab3 f383 	clz	r3, r3
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	f043 0320 	orr.w	r3, r3, #32
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	095b      	lsrs	r3, r3, #5
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d102      	bne.n	8002a58 <HAL_RCC_OscConfig+0x34c>
 8002a52:	4baa      	ldr	r3, [pc, #680]	; (8002cfc <HAL_RCC_OscConfig+0x5f0>)
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	e01b      	b.n	8002a90 <HAL_RCC_OscConfig+0x384>
 8002a58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a5c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a60:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a64:	fa93 f3a3 	rbit	r3, r3
 8002a68:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002a6c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002a70:	fab3 f383 	clz	r3, r3
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	f043 0320 	orr.w	r3, r3, #32
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	095b      	lsrs	r3, r3, #5
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b04      	cmp	r3, #4
 8002a84:	d102      	bne.n	8002a8c <HAL_RCC_OscConfig+0x380>
 8002a86:	4b9d      	ldr	r3, [pc, #628]	; (8002cfc <HAL_RCC_OscConfig+0x5f0>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	e001      	b.n	8002a90 <HAL_RCC_OscConfig+0x384>
 8002a8c:	4b9b      	ldr	r3, [pc, #620]	; (8002cfc <HAL_RCC_OscConfig+0x5f0>)
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a90:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a94:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a98:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002a9c:	fa92 f2a2 	rbit	r2, r2
 8002aa0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002aa4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002aa8:	fab2 f282 	clz	r2, r2
 8002aac:	b2d2      	uxtb	r2, r2
 8002aae:	f042 0220 	orr.w	r2, r2, #32
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	b2d2      	uxtb	r2, r2
 8002ab6:	f002 021f 	and.w	r2, r2, #31
 8002aba:	2101      	movs	r1, #1
 8002abc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d187      	bne.n	80029d6 <HAL_RCC_OscConfig+0x2ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ac6:	1d3b      	adds	r3, r7, #4
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f000 81d7 	beq.w	8002e84 <HAL_RCC_OscConfig+0x778>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002ad6:	4b89      	ldr	r3, [pc, #548]	; (8002cfc <HAL_RCC_OscConfig+0x5f0>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f003 030c 	and.w	r3, r3, #12
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00d      	beq.n	8002afe <HAL_RCC_OscConfig+0x3f2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002ae2:	4b86      	ldr	r3, [pc, #536]	; (8002cfc <HAL_RCC_OscConfig+0x5f0>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f003 030c 	and.w	r3, r3, #12
 8002aea:	2b08      	cmp	r3, #8
 8002aec:	f040 8090 	bne.w	8002c10 <HAL_RCC_OscConfig+0x504>
 8002af0:	4b82      	ldr	r3, [pc, #520]	; (8002cfc <HAL_RCC_OscConfig+0x5f0>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f040 8089 	bne.w	8002c10 <HAL_RCC_OscConfig+0x504>
 8002afe:	2302      	movs	r3, #2
 8002b00:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b04:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002b08:	fa93 f3a3 	rbit	r3, r3
 8002b0c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002b10:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b14:	fab3 f383 	clz	r3, r3
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	f043 0320 	orr.w	r3, r3, #32
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	095b      	lsrs	r3, r3, #5
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d102      	bne.n	8002b30 <HAL_RCC_OscConfig+0x424>
 8002b2a:	4b74      	ldr	r3, [pc, #464]	; (8002cfc <HAL_RCC_OscConfig+0x5f0>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	e033      	b.n	8002b98 <HAL_RCC_OscConfig+0x48c>
 8002b30:	2302      	movs	r3, #2
 8002b32:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b36:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002b3a:	fa93 f3a3 	rbit	r3, r3
 8002b3e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002b42:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002b46:	fab3 f383 	clz	r3, r3
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	f043 0320 	orr.w	r3, r3, #32
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	095b      	lsrs	r3, r3, #5
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d102      	bne.n	8002b62 <HAL_RCC_OscConfig+0x456>
 8002b5c:	4b67      	ldr	r3, [pc, #412]	; (8002cfc <HAL_RCC_OscConfig+0x5f0>)
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	e01a      	b.n	8002b98 <HAL_RCC_OscConfig+0x48c>
 8002b62:	2302      	movs	r3, #2
 8002b64:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b68:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002b6c:	fa93 f3a3 	rbit	r3, r3
 8002b70:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002b74:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b78:	fab3 f383 	clz	r3, r3
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	f043 0320 	orr.w	r3, r3, #32
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	095b      	lsrs	r3, r3, #5
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	d102      	bne.n	8002b94 <HAL_RCC_OscConfig+0x488>
 8002b8e:	4b5b      	ldr	r3, [pc, #364]	; (8002cfc <HAL_RCC_OscConfig+0x5f0>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	e001      	b.n	8002b98 <HAL_RCC_OscConfig+0x48c>
 8002b94:	4b59      	ldr	r3, [pc, #356]	; (8002cfc <HAL_RCC_OscConfig+0x5f0>)
 8002b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b98:	2202      	movs	r2, #2
 8002b9a:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9e:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002ba2:	fa92 f2a2 	rbit	r2, r2
 8002ba6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002baa:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002bae:	fab2 f282 	clz	r2, r2
 8002bb2:	b2d2      	uxtb	r2, r2
 8002bb4:	f042 0220 	orr.w	r2, r2, #32
 8002bb8:	b2d2      	uxtb	r2, r2
 8002bba:	b2d2      	uxtb	r2, r2
 8002bbc:	f002 021f 	and.w	r2, r2, #31
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	fa01 f202 	lsl.w	r2, r1, r2
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d007      	beq.n	8002bdc <HAL_RCC_OscConfig+0x4d0>
 8002bcc:	1d3b      	adds	r3, r7, #4
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d002      	beq.n	8002bdc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	f000 be5f 	b.w	800389a <HAL_RCC_OscConfig+0x118e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bdc:	4847      	ldr	r0, [pc, #284]	; (8002cfc <HAL_RCC_OscConfig+0x5f0>)
 8002bde:	4b47      	ldr	r3, [pc, #284]	; (8002cfc <HAL_RCC_OscConfig+0x5f0>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002be6:	1d3b      	adds	r3, r7, #4
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6959      	ldr	r1, [r3, #20]
 8002bec:	23f8      	movs	r3, #248	; 0xf8
 8002bee:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf2:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8002bf6:	fa93 f3a3 	rbit	r3, r3
 8002bfa:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002bfe:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8002c02:	fab3 f383 	clz	r3, r3
 8002c06:	fa01 f303 	lsl.w	r3, r1, r3
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	6003      	str	r3, [r0, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c0e:	e139      	b.n	8002e84 <HAL_RCC_OscConfig+0x778>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c10:	1d3b      	adds	r3, r7, #4
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f000 80a8 	beq.w	8002d6c <HAL_RCC_OscConfig+0x660>
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c22:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002c26:	fa93 f3a3 	rbit	r3, r3
 8002c2a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002c2e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c32:	fab3 f383 	clz	r3, r3
 8002c36:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c3a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	461a      	mov	r2, r3
 8002c42:	2301      	movs	r3, #1
 8002c44:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c46:	f7ff fc09 	bl	800245c <HAL_GetTick>
 8002c4a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c4e:	e00a      	b.n	8002c66 <HAL_RCC_OscConfig+0x55a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c50:	f7ff fc04 	bl	800245c <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d902      	bls.n	8002c66 <HAL_RCC_OscConfig+0x55a>
          {
            return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	f000 be1a 	b.w	800389a <HAL_RCC_OscConfig+0x118e>
 8002c66:	2302      	movs	r3, #2
 8002c68:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002c70:	fa93 f3a3 	rbit	r3, r3
 8002c74:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002c78:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c7c:	fab3 f383 	clz	r3, r3
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	f043 0320 	orr.w	r3, r3, #32
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	095b      	lsrs	r3, r3, #5
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d102      	bne.n	8002c98 <HAL_RCC_OscConfig+0x58c>
 8002c92:	4b1a      	ldr	r3, [pc, #104]	; (8002cfc <HAL_RCC_OscConfig+0x5f0>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	e035      	b.n	8002d04 <HAL_RCC_OscConfig+0x5f8>
 8002c98:	2302      	movs	r3, #2
 8002c9a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002ca2:	fa93 f3a3 	rbit	r3, r3
 8002ca6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002caa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002cae:	fab3 f383 	clz	r3, r3
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	f043 0320 	orr.w	r3, r3, #32
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	095b      	lsrs	r3, r3, #5
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d102      	bne.n	8002cca <HAL_RCC_OscConfig+0x5be>
 8002cc4:	4b0d      	ldr	r3, [pc, #52]	; (8002cfc <HAL_RCC_OscConfig+0x5f0>)
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	e01c      	b.n	8002d04 <HAL_RCC_OscConfig+0x5f8>
 8002cca:	2302      	movs	r3, #2
 8002ccc:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002cd4:	fa93 f3a3 	rbit	r3, r3
 8002cd8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002cdc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002ce0:	fab3 f383 	clz	r3, r3
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	f043 0320 	orr.w	r3, r3, #32
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	095b      	lsrs	r3, r3, #5
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d104      	bne.n	8002d00 <HAL_RCC_OscConfig+0x5f4>
 8002cf6:	4b01      	ldr	r3, [pc, #4]	; (8002cfc <HAL_RCC_OscConfig+0x5f0>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	e003      	b.n	8002d04 <HAL_RCC_OscConfig+0x5f8>
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	4bc6      	ldr	r3, [pc, #792]	; (800301c <HAL_RCC_OscConfig+0x910>)
 8002d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d04:	2202      	movs	r2, #2
 8002d06:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0a:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002d0e:	fa92 f2a2 	rbit	r2, r2
 8002d12:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002d16:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002d1a:	fab2 f282 	clz	r2, r2
 8002d1e:	b2d2      	uxtb	r2, r2
 8002d20:	f042 0220 	orr.w	r2, r2, #32
 8002d24:	b2d2      	uxtb	r2, r2
 8002d26:	b2d2      	uxtb	r2, r2
 8002d28:	f002 021f 	and.w	r2, r2, #31
 8002d2c:	2101      	movs	r1, #1
 8002d2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d32:	4013      	ands	r3, r2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d08b      	beq.n	8002c50 <HAL_RCC_OscConfig+0x544>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d38:	48b8      	ldr	r0, [pc, #736]	; (800301c <HAL_RCC_OscConfig+0x910>)
 8002d3a:	4bb8      	ldr	r3, [pc, #736]	; (800301c <HAL_RCC_OscConfig+0x910>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d42:	1d3b      	adds	r3, r7, #4
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6959      	ldr	r1, [r3, #20]
 8002d48:	23f8      	movs	r3, #248	; 0xf8
 8002d4a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002d52:	fa93 f3a3 	rbit	r3, r3
 8002d56:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002d5a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002d5e:	fab3 f383 	clz	r3, r3
 8002d62:	fa01 f303 	lsl.w	r3, r1, r3
 8002d66:	4313      	orrs	r3, r2
 8002d68:	6003      	str	r3, [r0, #0]
 8002d6a:	e08b      	b.n	8002e84 <HAL_RCC_OscConfig+0x778>
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d72:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002d76:	fa93 f3a3 	rbit	r3, r3
 8002d7a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002d7e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d82:	fab3 f383 	clz	r3, r3
 8002d86:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d8a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	461a      	mov	r2, r3
 8002d92:	2300      	movs	r3, #0
 8002d94:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d96:	f7ff fb61 	bl	800245c <HAL_GetTick>
 8002d9a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d9e:	e00a      	b.n	8002db6 <HAL_RCC_OscConfig+0x6aa>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002da0:	f7ff fb5c 	bl	800245c <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d902      	bls.n	8002db6 <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	f000 bd72 	b.w	800389a <HAL_RCC_OscConfig+0x118e>
 8002db6:	2302      	movs	r3, #2
 8002db8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dbc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002dc0:	fa93 f3a3 	rbit	r3, r3
 8002dc4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002dc8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dcc:	fab3 f383 	clz	r3, r3
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	f043 0320 	orr.w	r3, r3, #32
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	095b      	lsrs	r3, r3, #5
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d102      	bne.n	8002de8 <HAL_RCC_OscConfig+0x6dc>
 8002de2:	4b8e      	ldr	r3, [pc, #568]	; (800301c <HAL_RCC_OscConfig+0x910>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	e033      	b.n	8002e50 <HAL_RCC_OscConfig+0x744>
 8002de8:	2302      	movs	r3, #2
 8002dea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002df2:	fa93 f3a3 	rbit	r3, r3
 8002df6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002dfa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002dfe:	fab3 f383 	clz	r3, r3
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	f043 0320 	orr.w	r3, r3, #32
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	095b      	lsrs	r3, r3, #5
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d102      	bne.n	8002e1a <HAL_RCC_OscConfig+0x70e>
 8002e14:	4b81      	ldr	r3, [pc, #516]	; (800301c <HAL_RCC_OscConfig+0x910>)
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	e01a      	b.n	8002e50 <HAL_RCC_OscConfig+0x744>
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e20:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002e24:	fa93 f3a3 	rbit	r3, r3
 8002e28:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002e2c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002e30:	fab3 f383 	clz	r3, r3
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	f043 0320 	orr.w	r3, r3, #32
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	095b      	lsrs	r3, r3, #5
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b04      	cmp	r3, #4
 8002e44:	d102      	bne.n	8002e4c <HAL_RCC_OscConfig+0x740>
 8002e46:	4b75      	ldr	r3, [pc, #468]	; (800301c <HAL_RCC_OscConfig+0x910>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	e001      	b.n	8002e50 <HAL_RCC_OscConfig+0x744>
 8002e4c:	4b73      	ldr	r3, [pc, #460]	; (800301c <HAL_RCC_OscConfig+0x910>)
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e50:	2202      	movs	r2, #2
 8002e52:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e56:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002e5a:	fa92 f2a2 	rbit	r2, r2
 8002e5e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002e62:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002e66:	fab2 f282 	clz	r2, r2
 8002e6a:	b2d2      	uxtb	r2, r2
 8002e6c:	f042 0220 	orr.w	r2, r2, #32
 8002e70:	b2d2      	uxtb	r2, r2
 8002e72:	b2d2      	uxtb	r2, r2
 8002e74:	f002 021f 	and.w	r2, r2, #31
 8002e78:	2101      	movs	r1, #1
 8002e7a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e7e:	4013      	ands	r3, r2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d18d      	bne.n	8002da0 <HAL_RCC_OscConfig+0x694>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e84:	1d3b      	adds	r3, r7, #4
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0308 	and.w	r3, r3, #8
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f000 8140 	beq.w	8003114 <HAL_RCC_OscConfig+0xa08>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e94:	1d3b      	adds	r3, r7, #4
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f000 8096 	beq.w	8002fcc <HAL_RCC_OscConfig+0x8c0>
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002eaa:	fa93 f3a3 	rbit	r3, r3
 8002eae:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002eb2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eb6:	fab3 f383 	clz	r3, r3
 8002eba:	461a      	mov	r2, r3
 8002ebc:	4b58      	ldr	r3, [pc, #352]	; (8003020 <HAL_RCC_OscConfig+0x914>)
 8002ebe:	4413      	add	r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ec8:	f7ff fac8 	bl	800245c <HAL_GetTick>
 8002ecc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ed0:	e00a      	b.n	8002ee8 <HAL_RCC_OscConfig+0x7dc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ed2:	f7ff fac3 	bl	800245c <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d902      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x7dc>
        {
          return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	f000 bcd9 	b.w	800389a <HAL_RCC_OscConfig+0x118e>
 8002ee8:	2302      	movs	r3, #2
 8002eea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ef2:	fa93 f3a3 	rbit	r3, r3
 8002ef6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002efa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002efe:	fab3 f383 	clz	r3, r3
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	095b      	lsrs	r3, r3, #5
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d102      	bne.n	8002f1a <HAL_RCC_OscConfig+0x80e>
 8002f14:	4b41      	ldr	r3, [pc, #260]	; (800301c <HAL_RCC_OscConfig+0x910>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	e039      	b.n	8002f8e <HAL_RCC_OscConfig+0x882>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002f24:	fa93 f2a3 	rbit	r2, r3
 8002f28:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002f2c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002f2e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	fab3 f383 	clz	r3, r3
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	095b      	lsrs	r3, r3, #5
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d102      	bne.n	8002f50 <HAL_RCC_OscConfig+0x844>
 8002f4a:	4b34      	ldr	r3, [pc, #208]	; (800301c <HAL_RCC_OscConfig+0x910>)
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	e01e      	b.n	8002f8e <HAL_RCC_OscConfig+0x882>
 8002f50:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002f54:	2202      	movs	r2, #2
 8002f56:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f58:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	fa93 f2a3 	rbit	r2, r3
 8002f62:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002f66:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002f68:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	fab3 f383 	clz	r3, r3
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	095b      	lsrs	r3, r3, #5
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b04      	cmp	r3, #4
 8002f82:	d102      	bne.n	8002f8a <HAL_RCC_OscConfig+0x87e>
 8002f84:	4b25      	ldr	r3, [pc, #148]	; (800301c <HAL_RCC_OscConfig+0x910>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	e001      	b.n	8002f8e <HAL_RCC_OscConfig+0x882>
 8002f8a:	4b24      	ldr	r3, [pc, #144]	; (800301c <HAL_RCC_OscConfig+0x910>)
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8e:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8002f92:	2102      	movs	r1, #2
 8002f94:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f96:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8002f9a:	6812      	ldr	r2, [r2, #0]
 8002f9c:	fa92 f1a2 	rbit	r1, r2
 8002fa0:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002fa4:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002fa6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002faa:	6812      	ldr	r2, [r2, #0]
 8002fac:	fab2 f282 	clz	r2, r2
 8002fb0:	b2d2      	uxtb	r2, r2
 8002fb2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8002fb6:	b2d2      	uxtb	r2, r2
 8002fb8:	b2d2      	uxtb	r2, r2
 8002fba:	f002 021f 	and.w	r2, r2, #31
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	fa01 f202 	lsl.w	r2, r1, r2
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d083      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x7c6>
 8002fca:	e0a3      	b.n	8003114 <HAL_RCC_OscConfig+0xa08>
 8002fcc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	fa93 f2a3 	rbit	r2, r3
 8002fde:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002fe2:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002fe4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002fe8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fea:	fab3 f383 	clz	r3, r3
 8002fee:	461a      	mov	r2, r3
 8002ff0:	4b0b      	ldr	r3, [pc, #44]	; (8003020 <HAL_RCC_OscConfig+0x914>)
 8002ff2:	4413      	add	r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ffc:	f7ff fa2e 	bl	800245c <HAL_GetTick>
 8003000:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003004:	e00e      	b.n	8003024 <HAL_RCC_OscConfig+0x918>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003006:	f7ff fa29 	bl	800245c <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d906      	bls.n	8003024 <HAL_RCC_OscConfig+0x918>
        {
          return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	f000 bc3f 	b.w	800389a <HAL_RCC_OscConfig+0x118e>
 800301c:	40021000 	.word	0x40021000
 8003020:	10908120 	.word	0x10908120
 8003024:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003028:	2202      	movs	r2, #2
 800302a:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	fa93 f2a3 	rbit	r2, r3
 8003036:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800303a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800303c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003040:	681b      	ldr	r3, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003042:	fab3 f383 	clz	r3, r3
 8003046:	b2db      	uxtb	r3, r3
 8003048:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800304c:	b2db      	uxtb	r3, r3
 800304e:	b2db      	uxtb	r3, r3
 8003050:	095b      	lsrs	r3, r3, #5
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2b01      	cmp	r3, #1
 8003056:	d102      	bne.n	800305e <HAL_RCC_OscConfig+0x952>
 8003058:	4ba6      	ldr	r3, [pc, #664]	; (80032f4 <HAL_RCC_OscConfig+0xbe8>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	e03b      	b.n	80030d6 <HAL_RCC_OscConfig+0x9ca>
 800305e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003062:	2202      	movs	r2, #2
 8003064:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003066:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	fa93 f2a3 	rbit	r2, r3
 8003070:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003074:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003076:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	fab3 f383 	clz	r3, r3
 8003080:	b2db      	uxtb	r3, r3
 8003082:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003086:	b2db      	uxtb	r3, r3
 8003088:	b2db      	uxtb	r3, r3
 800308a:	095b      	lsrs	r3, r3, #5
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d102      	bne.n	8003098 <HAL_RCC_OscConfig+0x98c>
 8003092:	4b98      	ldr	r3, [pc, #608]	; (80032f4 <HAL_RCC_OscConfig+0xbe8>)
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	e01e      	b.n	80030d6 <HAL_RCC_OscConfig+0x9ca>
 8003098:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800309c:	2202      	movs	r2, #2
 800309e:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	fa93 f2a3 	rbit	r2, r3
 80030aa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80030ae:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80030b0:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	fab3 f383 	clz	r3, r3
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	095b      	lsrs	r3, r3, #5
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b04      	cmp	r3, #4
 80030ca:	d102      	bne.n	80030d2 <HAL_RCC_OscConfig+0x9c6>
 80030cc:	4b89      	ldr	r3, [pc, #548]	; (80032f4 <HAL_RCC_OscConfig+0xbe8>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	e001      	b.n	80030d6 <HAL_RCC_OscConfig+0x9ca>
 80030d2:	4b88      	ldr	r3, [pc, #544]	; (80032f4 <HAL_RCC_OscConfig+0xbe8>)
 80030d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d6:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 80030da:	2102      	movs	r1, #2
 80030dc:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030de:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 80030e2:	6812      	ldr	r2, [r2, #0]
 80030e4:	fa92 f1a2 	rbit	r1, r2
 80030e8:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 80030ec:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80030ee:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 80030f2:	6812      	ldr	r2, [r2, #0]
 80030f4:	fab2 f282 	clz	r2, r2
 80030f8:	b2d2      	uxtb	r2, r2
 80030fa:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	b2d2      	uxtb	r2, r2
 8003102:	f002 021f 	and.w	r2, r2, #31
 8003106:	2101      	movs	r1, #1
 8003108:	fa01 f202 	lsl.w	r2, r1, r2
 800310c:	4013      	ands	r3, r2
 800310e:	2b00      	cmp	r3, #0
 8003110:	f47f af79 	bne.w	8003006 <HAL_RCC_OscConfig+0x8fa>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003114:	1d3b      	adds	r3, r7, #4
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0304 	and.w	r3, r3, #4
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 81a1 	beq.w	8003466 <HAL_RCC_OscConfig+0xd5a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003124:	2300      	movs	r3, #0
 8003126:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800312a:	4b72      	ldr	r3, [pc, #456]	; (80032f4 <HAL_RCC_OscConfig+0xbe8>)
 800312c:	69db      	ldr	r3, [r3, #28]
 800312e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d112      	bne.n	800315c <HAL_RCC_OscConfig+0xa50>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003136:	4a6f      	ldr	r2, [pc, #444]	; (80032f4 <HAL_RCC_OscConfig+0xbe8>)
 8003138:	4b6e      	ldr	r3, [pc, #440]	; (80032f4 <HAL_RCC_OscConfig+0xbe8>)
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003140:	61d3      	str	r3, [r2, #28]
 8003142:	4b6c      	ldr	r3, [pc, #432]	; (80032f4 <HAL_RCC_OscConfig+0xbe8>)
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800314a:	f107 030c 	add.w	r3, r7, #12
 800314e:	601a      	str	r2, [r3, #0]
 8003150:	f107 030c 	add.w	r3, r7, #12
 8003154:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003156:	2301      	movs	r3, #1
 8003158:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800315c:	4b66      	ldr	r3, [pc, #408]	; (80032f8 <HAL_RCC_OscConfig+0xbec>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003164:	2b00      	cmp	r3, #0
 8003166:	d11a      	bne.n	800319e <HAL_RCC_OscConfig+0xa92>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003168:	4a63      	ldr	r2, [pc, #396]	; (80032f8 <HAL_RCC_OscConfig+0xbec>)
 800316a:	4b63      	ldr	r3, [pc, #396]	; (80032f8 <HAL_RCC_OscConfig+0xbec>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003172:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003174:	f7ff f972 	bl	800245c <HAL_GetTick>
 8003178:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800317c:	e009      	b.n	8003192 <HAL_RCC_OscConfig+0xa86>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800317e:	f7ff f96d 	bl	800245c <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b64      	cmp	r3, #100	; 0x64
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0xa86>
        {
          return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e383      	b.n	800389a <HAL_RCC_OscConfig+0x118e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003192:	4b59      	ldr	r3, [pc, #356]	; (80032f8 <HAL_RCC_OscConfig+0xbec>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319a:	2b00      	cmp	r3, #0
 800319c:	d0ef      	beq.n	800317e <HAL_RCC_OscConfig+0xa72>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800319e:	1d3b      	adds	r3, r7, #4
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d106      	bne.n	80031b6 <HAL_RCC_OscConfig+0xaaa>
 80031a8:	4a52      	ldr	r2, [pc, #328]	; (80032f4 <HAL_RCC_OscConfig+0xbe8>)
 80031aa:	4b52      	ldr	r3, [pc, #328]	; (80032f4 <HAL_RCC_OscConfig+0xbe8>)
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	f043 0301 	orr.w	r3, r3, #1
 80031b2:	6213      	str	r3, [r2, #32]
 80031b4:	e02f      	b.n	8003216 <HAL_RCC_OscConfig+0xb0a>
 80031b6:	1d3b      	adds	r3, r7, #4
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d10c      	bne.n	80031da <HAL_RCC_OscConfig+0xace>
 80031c0:	4a4c      	ldr	r2, [pc, #304]	; (80032f4 <HAL_RCC_OscConfig+0xbe8>)
 80031c2:	4b4c      	ldr	r3, [pc, #304]	; (80032f4 <HAL_RCC_OscConfig+0xbe8>)
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	f023 0301 	bic.w	r3, r3, #1
 80031ca:	6213      	str	r3, [r2, #32]
 80031cc:	4a49      	ldr	r2, [pc, #292]	; (80032f4 <HAL_RCC_OscConfig+0xbe8>)
 80031ce:	4b49      	ldr	r3, [pc, #292]	; (80032f4 <HAL_RCC_OscConfig+0xbe8>)
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	f023 0304 	bic.w	r3, r3, #4
 80031d6:	6213      	str	r3, [r2, #32]
 80031d8:	e01d      	b.n	8003216 <HAL_RCC_OscConfig+0xb0a>
 80031da:	1d3b      	adds	r3, r7, #4
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	2b05      	cmp	r3, #5
 80031e2:	d10c      	bne.n	80031fe <HAL_RCC_OscConfig+0xaf2>
 80031e4:	4a43      	ldr	r2, [pc, #268]	; (80032f4 <HAL_RCC_OscConfig+0xbe8>)
 80031e6:	4b43      	ldr	r3, [pc, #268]	; (80032f4 <HAL_RCC_OscConfig+0xbe8>)
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	f043 0304 	orr.w	r3, r3, #4
 80031ee:	6213      	str	r3, [r2, #32]
 80031f0:	4a40      	ldr	r2, [pc, #256]	; (80032f4 <HAL_RCC_OscConfig+0xbe8>)
 80031f2:	4b40      	ldr	r3, [pc, #256]	; (80032f4 <HAL_RCC_OscConfig+0xbe8>)
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	f043 0301 	orr.w	r3, r3, #1
 80031fa:	6213      	str	r3, [r2, #32]
 80031fc:	e00b      	b.n	8003216 <HAL_RCC_OscConfig+0xb0a>
 80031fe:	4a3d      	ldr	r2, [pc, #244]	; (80032f4 <HAL_RCC_OscConfig+0xbe8>)
 8003200:	4b3c      	ldr	r3, [pc, #240]	; (80032f4 <HAL_RCC_OscConfig+0xbe8>)
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	f023 0301 	bic.w	r3, r3, #1
 8003208:	6213      	str	r3, [r2, #32]
 800320a:	4a3a      	ldr	r2, [pc, #232]	; (80032f4 <HAL_RCC_OscConfig+0xbe8>)
 800320c:	4b39      	ldr	r3, [pc, #228]	; (80032f4 <HAL_RCC_OscConfig+0xbe8>)
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	f023 0304 	bic.w	r3, r3, #4
 8003214:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003216:	1d3b      	adds	r3, r7, #4
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 808f 	beq.w	8003340 <HAL_RCC_OscConfig+0xc34>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003222:	f7ff f91b 	bl	800245c <HAL_GetTick>
 8003226:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800322a:	e00b      	b.n	8003244 <HAL_RCC_OscConfig+0xb38>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800322c:	f7ff f916 	bl	800245c <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	f241 3288 	movw	r2, #5000	; 0x1388
 800323c:	4293      	cmp	r3, r2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0xb38>
        {
          return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e32a      	b.n	800389a <HAL_RCC_OscConfig+0x118e>
 8003244:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003248:	2202      	movs	r2, #2
 800324a:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	fa93 f2a3 	rbit	r2, r3
 8003256:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800325a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800325c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003260:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003262:	fab3 f383 	clz	r3, r3
 8003266:	b2db      	uxtb	r3, r3
 8003268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800326c:	b2db      	uxtb	r3, r3
 800326e:	b2db      	uxtb	r3, r3
 8003270:	095b      	lsrs	r3, r3, #5
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b01      	cmp	r3, #1
 8003276:	d102      	bne.n	800327e <HAL_RCC_OscConfig+0xb72>
 8003278:	4b1e      	ldr	r3, [pc, #120]	; (80032f4 <HAL_RCC_OscConfig+0xbe8>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	e040      	b.n	8003300 <HAL_RCC_OscConfig+0xbf4>
 800327e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003282:	2202      	movs	r2, #2
 8003284:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003286:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	fa93 f2a3 	rbit	r2, r3
 8003290:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003294:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003296:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	fab3 f383 	clz	r3, r3
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	095b      	lsrs	r3, r3, #5
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d102      	bne.n	80032b8 <HAL_RCC_OscConfig+0xbac>
 80032b2:	4b10      	ldr	r3, [pc, #64]	; (80032f4 <HAL_RCC_OscConfig+0xbe8>)
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	e023      	b.n	8003300 <HAL_RCC_OscConfig+0xbf4>
 80032b8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80032bc:	2202      	movs	r2, #2
 80032be:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	fa93 f2a3 	rbit	r2, r3
 80032ca:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80032ce:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80032d0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	fab3 f383 	clz	r3, r3
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	095b      	lsrs	r3, r3, #5
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2b04      	cmp	r3, #4
 80032ea:	d107      	bne.n	80032fc <HAL_RCC_OscConfig+0xbf0>
 80032ec:	4b01      	ldr	r3, [pc, #4]	; (80032f4 <HAL_RCC_OscConfig+0xbe8>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	e006      	b.n	8003300 <HAL_RCC_OscConfig+0xbf4>
 80032f2:	bf00      	nop
 80032f4:	40021000 	.word	0x40021000
 80032f8:	40007000 	.word	0x40007000
 80032fc:	4ba5      	ldr	r3, [pc, #660]	; (8003594 <HAL_RCC_OscConfig+0xe88>)
 80032fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003300:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003304:	2102      	movs	r1, #2
 8003306:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003308:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800330c:	6812      	ldr	r2, [r2, #0]
 800330e:	fa92 f1a2 	rbit	r1, r2
 8003312:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003316:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003318:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800331c:	6812      	ldr	r2, [r2, #0]
 800331e:	fab2 f282 	clz	r2, r2
 8003322:	b2d2      	uxtb	r2, r2
 8003324:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003328:	b2d2      	uxtb	r2, r2
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	f002 021f 	and.w	r2, r2, #31
 8003330:	2101      	movs	r1, #1
 8003332:	fa01 f202 	lsl.w	r2, r1, r2
 8003336:	4013      	ands	r3, r2
 8003338:	2b00      	cmp	r3, #0
 800333a:	f43f af77 	beq.w	800322c <HAL_RCC_OscConfig+0xb20>
 800333e:	e088      	b.n	8003452 <HAL_RCC_OscConfig+0xd46>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003340:	f7ff f88c 	bl	800245c <HAL_GetTick>
 8003344:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003348:	e00b      	b.n	8003362 <HAL_RCC_OscConfig+0xc56>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800334a:	f7ff f887 	bl	800245c <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	f241 3288 	movw	r2, #5000	; 0x1388
 800335a:	4293      	cmp	r3, r2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0xc56>
        {
          return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e29b      	b.n	800389a <HAL_RCC_OscConfig+0x118e>
 8003362:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003366:	2202      	movs	r2, #2
 8003368:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	fa93 f2a3 	rbit	r2, r3
 8003374:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003378:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800337a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800337e:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003380:	fab3 f383 	clz	r3, r3
 8003384:	b2db      	uxtb	r3, r3
 8003386:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800338a:	b2db      	uxtb	r3, r3
 800338c:	b2db      	uxtb	r3, r3
 800338e:	095b      	lsrs	r3, r3, #5
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b01      	cmp	r3, #1
 8003394:	d102      	bne.n	800339c <HAL_RCC_OscConfig+0xc90>
 8003396:	4b7f      	ldr	r3, [pc, #508]	; (8003594 <HAL_RCC_OscConfig+0xe88>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	e03b      	b.n	8003414 <HAL_RCC_OscConfig+0xd08>
 800339c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80033a0:	2202      	movs	r2, #2
 80033a2:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	fa93 f2a3 	rbit	r2, r3
 80033ae:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80033b2:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80033b4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	fab3 f383 	clz	r3, r3
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	095b      	lsrs	r3, r3, #5
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d102      	bne.n	80033d6 <HAL_RCC_OscConfig+0xcca>
 80033d0:	4b70      	ldr	r3, [pc, #448]	; (8003594 <HAL_RCC_OscConfig+0xe88>)
 80033d2:	6a1b      	ldr	r3, [r3, #32]
 80033d4:	e01e      	b.n	8003414 <HAL_RCC_OscConfig+0xd08>
 80033d6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80033da:	2202      	movs	r2, #2
 80033dc:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033de:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	fa93 f2a3 	rbit	r2, r3
 80033e8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80033ec:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80033ee:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	fab3 f383 	clz	r3, r3
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	b2db      	uxtb	r3, r3
 8003402:	095b      	lsrs	r3, r3, #5
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b04      	cmp	r3, #4
 8003408:	d102      	bne.n	8003410 <HAL_RCC_OscConfig+0xd04>
 800340a:	4b62      	ldr	r3, [pc, #392]	; (8003594 <HAL_RCC_OscConfig+0xe88>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	e001      	b.n	8003414 <HAL_RCC_OscConfig+0xd08>
 8003410:	4b60      	ldr	r3, [pc, #384]	; (8003594 <HAL_RCC_OscConfig+0xe88>)
 8003412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003414:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8003418:	2102      	movs	r1, #2
 800341a:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341c:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8003420:	6812      	ldr	r2, [r2, #0]
 8003422:	fa92 f1a2 	rbit	r1, r2
 8003426:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800342a:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800342c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003430:	6812      	ldr	r2, [r2, #0]
 8003432:	fab2 f282 	clz	r2, r2
 8003436:	b2d2      	uxtb	r2, r2
 8003438:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800343c:	b2d2      	uxtb	r2, r2
 800343e:	b2d2      	uxtb	r2, r2
 8003440:	f002 021f 	and.w	r2, r2, #31
 8003444:	2101      	movs	r1, #1
 8003446:	fa01 f202 	lsl.w	r2, r1, r2
 800344a:	4013      	ands	r3, r2
 800344c:	2b00      	cmp	r3, #0
 800344e:	f47f af7c 	bne.w	800334a <HAL_RCC_OscConfig+0xc3e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003452:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003456:	2b01      	cmp	r3, #1
 8003458:	d105      	bne.n	8003466 <HAL_RCC_OscConfig+0xd5a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800345a:	4a4e      	ldr	r2, [pc, #312]	; (8003594 <HAL_RCC_OscConfig+0xe88>)
 800345c:	4b4d      	ldr	r3, [pc, #308]	; (8003594 <HAL_RCC_OscConfig+0xe88>)
 800345e:	69db      	ldr	r3, [r3, #28]
 8003460:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003464:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003466:	1d3b      	adds	r3, r7, #4
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	69db      	ldr	r3, [r3, #28]
 800346c:	2b00      	cmp	r3, #0
 800346e:	f000 8213 	beq.w	8003898 <HAL_RCC_OscConfig+0x118c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003472:	4b48      	ldr	r3, [pc, #288]	; (8003594 <HAL_RCC_OscConfig+0xe88>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f003 030c 	and.w	r3, r3, #12
 800347a:	2b08      	cmp	r3, #8
 800347c:	f000 8208 	beq.w	8003890 <HAL_RCC_OscConfig+0x1184>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003480:	1d3b      	adds	r3, r7, #4
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	2b02      	cmp	r3, #2
 8003488:	f040 815c 	bne.w	8003744 <HAL_RCC_OscConfig+0x1038>
 800348c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003490:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003494:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003496:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	fa93 f2a3 	rbit	r2, r3
 80034a0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80034a4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80034a6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80034aa:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ac:	fab3 f383 	clz	r3, r3
 80034b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	461a      	mov	r2, r3
 80034bc:	2300      	movs	r3, #0
 80034be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c0:	f7fe ffcc 	bl	800245c <HAL_GetTick>
 80034c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034c8:	e009      	b.n	80034de <HAL_RCC_OscConfig+0xdd2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ca:	f7fe ffc7 	bl	800245c <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0xdd2>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e1dd      	b.n	800389a <HAL_RCC_OscConfig+0x118e>
 80034de:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80034e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034e6:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	fa93 f2a3 	rbit	r2, r3
 80034f2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80034f6:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80034f8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80034fc:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034fe:	fab3 f383 	clz	r3, r3
 8003502:	b2db      	uxtb	r3, r3
 8003504:	f043 0320 	orr.w	r3, r3, #32
 8003508:	b2db      	uxtb	r3, r3
 800350a:	b2db      	uxtb	r3, r3
 800350c:	095b      	lsrs	r3, r3, #5
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b01      	cmp	r3, #1
 8003512:	d102      	bne.n	800351a <HAL_RCC_OscConfig+0xe0e>
 8003514:	4b1f      	ldr	r3, [pc, #124]	; (8003594 <HAL_RCC_OscConfig+0xe88>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	e040      	b.n	800359c <HAL_RCC_OscConfig+0xe90>
 800351a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800351e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003522:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003524:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	fa93 f2a3 	rbit	r2, r3
 800352e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003532:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003534:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	fab3 f383 	clz	r3, r3
 800353e:	b2db      	uxtb	r3, r3
 8003540:	f043 0320 	orr.w	r3, r3, #32
 8003544:	b2db      	uxtb	r3, r3
 8003546:	b2db      	uxtb	r3, r3
 8003548:	095b      	lsrs	r3, r3, #5
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d102      	bne.n	8003556 <HAL_RCC_OscConfig+0xe4a>
 8003550:	4b10      	ldr	r3, [pc, #64]	; (8003594 <HAL_RCC_OscConfig+0xe88>)
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	e022      	b.n	800359c <HAL_RCC_OscConfig+0xe90>
 8003556:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800355a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800355e:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003560:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	fa93 f2a3 	rbit	r2, r3
 800356a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800356e:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003570:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	fab3 f383 	clz	r3, r3
 800357a:	b2db      	uxtb	r3, r3
 800357c:	f043 0320 	orr.w	r3, r3, #32
 8003580:	b2db      	uxtb	r3, r3
 8003582:	b2db      	uxtb	r3, r3
 8003584:	095b      	lsrs	r3, r3, #5
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b04      	cmp	r3, #4
 800358a:	d105      	bne.n	8003598 <HAL_RCC_OscConfig+0xe8c>
 800358c:	4b01      	ldr	r3, [pc, #4]	; (8003594 <HAL_RCC_OscConfig+0xe88>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	e004      	b.n	800359c <HAL_RCC_OscConfig+0xe90>
 8003592:	bf00      	nop
 8003594:	40021000 	.word	0x40021000
 8003598:	4bbe      	ldr	r3, [pc, #760]	; (8003894 <HAL_RCC_OscConfig+0x1188>)
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80035a0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80035a4:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80035aa:	6812      	ldr	r2, [r2, #0]
 80035ac:	fa92 f1a2 	rbit	r1, r2
 80035b0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80035b4:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80035b6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80035ba:	6812      	ldr	r2, [r2, #0]
 80035bc:	fab2 f282 	clz	r2, r2
 80035c0:	b2d2      	uxtb	r2, r2
 80035c2:	f042 0220 	orr.w	r2, r2, #32
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	b2d2      	uxtb	r2, r2
 80035ca:	f002 021f 	and.w	r2, r2, #31
 80035ce:	2101      	movs	r1, #1
 80035d0:	fa01 f202 	lsl.w	r2, r1, r2
 80035d4:	4013      	ands	r3, r2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f47f af77 	bne.w	80034ca <HAL_RCC_OscConfig+0xdbe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035dc:	48ad      	ldr	r0, [pc, #692]	; (8003894 <HAL_RCC_OscConfig+0x1188>)
 80035de:	4bad      	ldr	r3, [pc, #692]	; (8003894 <HAL_RCC_OscConfig+0x1188>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80035e6:	1d3b      	adds	r3, r7, #4
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80035ec:	1d3b      	adds	r3, r7, #4
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	430b      	orrs	r3, r1
 80035f4:	4313      	orrs	r3, r2
 80035f6:	6043      	str	r3, [r0, #4]
 80035f8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80035fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003600:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003602:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	fa93 f2a3 	rbit	r2, r3
 800360c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003610:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003612:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003616:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003618:	fab3 f383 	clz	r3, r3
 800361c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003620:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	461a      	mov	r2, r3
 8003628:	2301      	movs	r3, #1
 800362a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800362c:	f7fe ff16 	bl	800245c <HAL_GetTick>
 8003630:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003634:	e009      	b.n	800364a <HAL_RCC_OscConfig+0xf3e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003636:	f7fe ff11 	bl	800245c <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b02      	cmp	r3, #2
 8003644:	d901      	bls.n	800364a <HAL_RCC_OscConfig+0xf3e>
          {
            return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e127      	b.n	800389a <HAL_RCC_OscConfig+0x118e>
 800364a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800364e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003652:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003654:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	fa93 f2a3 	rbit	r2, r3
 800365e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003662:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003664:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003668:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800366a:	fab3 f383 	clz	r3, r3
 800366e:	b2db      	uxtb	r3, r3
 8003670:	f043 0320 	orr.w	r3, r3, #32
 8003674:	b2db      	uxtb	r3, r3
 8003676:	b2db      	uxtb	r3, r3
 8003678:	095b      	lsrs	r3, r3, #5
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b01      	cmp	r3, #1
 800367e:	d102      	bne.n	8003686 <HAL_RCC_OscConfig+0xf7a>
 8003680:	4b84      	ldr	r3, [pc, #528]	; (8003894 <HAL_RCC_OscConfig+0x1188>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	e03d      	b.n	8003702 <HAL_RCC_OscConfig+0xff6>
 8003686:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800368a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800368e:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003690:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	fa93 f2a3 	rbit	r2, r3
 800369a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800369e:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80036a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	fab3 f383 	clz	r3, r3
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	f043 0320 	orr.w	r3, r3, #32
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	095b      	lsrs	r3, r3, #5
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d102      	bne.n	80036c2 <HAL_RCC_OscConfig+0xfb6>
 80036bc:	4b75      	ldr	r3, [pc, #468]	; (8003894 <HAL_RCC_OscConfig+0x1188>)
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	e01f      	b.n	8003702 <HAL_RCC_OscConfig+0xff6>
 80036c2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80036c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036ca:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	fa93 f2a3 	rbit	r2, r3
 80036d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80036da:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80036dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	fab3 f383 	clz	r3, r3
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	f043 0320 	orr.w	r3, r3, #32
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	095b      	lsrs	r3, r3, #5
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	2b04      	cmp	r3, #4
 80036f6:	d102      	bne.n	80036fe <HAL_RCC_OscConfig+0xff2>
 80036f8:	4b66      	ldr	r3, [pc, #408]	; (8003894 <HAL_RCC_OscConfig+0x1188>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	e001      	b.n	8003702 <HAL_RCC_OscConfig+0xff6>
 80036fe:	4b65      	ldr	r3, [pc, #404]	; (8003894 <HAL_RCC_OscConfig+0x1188>)
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003702:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003706:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800370a:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003710:	6812      	ldr	r2, [r2, #0]
 8003712:	fa92 f1a2 	rbit	r1, r2
 8003716:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800371a:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800371c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003720:	6812      	ldr	r2, [r2, #0]
 8003722:	fab2 f282 	clz	r2, r2
 8003726:	b2d2      	uxtb	r2, r2
 8003728:	f042 0220 	orr.w	r2, r2, #32
 800372c:	b2d2      	uxtb	r2, r2
 800372e:	b2d2      	uxtb	r2, r2
 8003730:	f002 021f 	and.w	r2, r2, #31
 8003734:	2101      	movs	r1, #1
 8003736:	fa01 f202 	lsl.w	r2, r1, r2
 800373a:	4013      	ands	r3, r2
 800373c:	2b00      	cmp	r3, #0
 800373e:	f43f af7a 	beq.w	8003636 <HAL_RCC_OscConfig+0xf2a>
 8003742:	e0a9      	b.n	8003898 <HAL_RCC_OscConfig+0x118c>
 8003744:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003748:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800374c:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	fa93 f2a3 	rbit	r2, r3
 8003758:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800375c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800375e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003762:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003764:	fab3 f383 	clz	r3, r3
 8003768:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800376c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	461a      	mov	r2, r3
 8003774:	2300      	movs	r3, #0
 8003776:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003778:	f7fe fe70 	bl	800245c <HAL_GetTick>
 800377c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003780:	e009      	b.n	8003796 <HAL_RCC_OscConfig+0x108a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003782:	f7fe fe6b 	bl	800245c <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0x108a>
          {
            return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e081      	b.n	800389a <HAL_RCC_OscConfig+0x118e>
 8003796:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800379a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800379e:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	fa93 f2a3 	rbit	r2, r3
 80037aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037ae:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80037b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037b4:	681b      	ldr	r3, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037b6:	fab3 f383 	clz	r3, r3
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	f043 0320 	orr.w	r3, r3, #32
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	095b      	lsrs	r3, r3, #5
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d102      	bne.n	80037d2 <HAL_RCC_OscConfig+0x10c6>
 80037cc:	4b31      	ldr	r3, [pc, #196]	; (8003894 <HAL_RCC_OscConfig+0x1188>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	e03d      	b.n	800384e <HAL_RCC_OscConfig+0x1142>
 80037d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037da:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	fa93 f2a3 	rbit	r2, r3
 80037e6:	f107 0320 	add.w	r3, r7, #32
 80037ea:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80037ec:	f107 0320 	add.w	r3, r7, #32
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	fab3 f383 	clz	r3, r3
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	f043 0320 	orr.w	r3, r3, #32
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	095b      	lsrs	r3, r3, #5
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d102      	bne.n	800380e <HAL_RCC_OscConfig+0x1102>
 8003808:	4b22      	ldr	r3, [pc, #136]	; (8003894 <HAL_RCC_OscConfig+0x1188>)
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	e01f      	b.n	800384e <HAL_RCC_OscConfig+0x1142>
 800380e:	f107 031c 	add.w	r3, r7, #28
 8003812:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003816:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003818:	f107 031c 	add.w	r3, r7, #28
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	fa93 f2a3 	rbit	r2, r3
 8003822:	f107 0318 	add.w	r3, r7, #24
 8003826:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003828:	f107 0318 	add.w	r3, r7, #24
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	fab3 f383 	clz	r3, r3
 8003832:	b2db      	uxtb	r3, r3
 8003834:	f043 0320 	orr.w	r3, r3, #32
 8003838:	b2db      	uxtb	r3, r3
 800383a:	b2db      	uxtb	r3, r3
 800383c:	095b      	lsrs	r3, r3, #5
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2b04      	cmp	r3, #4
 8003842:	d102      	bne.n	800384a <HAL_RCC_OscConfig+0x113e>
 8003844:	4b13      	ldr	r3, [pc, #76]	; (8003894 <HAL_RCC_OscConfig+0x1188>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	e001      	b.n	800384e <HAL_RCC_OscConfig+0x1142>
 800384a:	4b12      	ldr	r3, [pc, #72]	; (8003894 <HAL_RCC_OscConfig+0x1188>)
 800384c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384e:	f107 0214 	add.w	r2, r7, #20
 8003852:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003856:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003858:	f107 0214 	add.w	r2, r7, #20
 800385c:	6812      	ldr	r2, [r2, #0]
 800385e:	fa92 f1a2 	rbit	r1, r2
 8003862:	f107 0210 	add.w	r2, r7, #16
 8003866:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003868:	f107 0210 	add.w	r2, r7, #16
 800386c:	6812      	ldr	r2, [r2, #0]
 800386e:	fab2 f282 	clz	r2, r2
 8003872:	b2d2      	uxtb	r2, r2
 8003874:	f042 0220 	orr.w	r2, r2, #32
 8003878:	b2d2      	uxtb	r2, r2
 800387a:	b2d2      	uxtb	r2, r2
 800387c:	f002 021f 	and.w	r2, r2, #31
 8003880:	2101      	movs	r1, #1
 8003882:	fa01 f202 	lsl.w	r2, r1, r2
 8003886:	4013      	ands	r3, r2
 8003888:	2b00      	cmp	r3, #0
 800388a:	f47f af7a 	bne.w	8003782 <HAL_RCC_OscConfig+0x1076>
 800388e:	e003      	b.n	8003898 <HAL_RCC_OscConfig+0x118c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e002      	b.n	800389a <HAL_RCC_OscConfig+0x118e>
 8003894:	40021000 	.word	0x40021000
    }
  }
  
  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b09e      	sub	sp, #120	; 0x78
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80038ae:	2300      	movs	r3, #0
 80038b0:	677b      	str	r3, [r7, #116]	; 0x74
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80038b2:	4ba5      	ldr	r3, [pc, #660]	; (8003b48 <HAL_RCC_ClockConfig+0x2a4>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0207 	and.w	r2, r3, #7
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d210      	bcs.n	80038e2 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038c0:	49a1      	ldr	r1, [pc, #644]	; (8003b48 <HAL_RCC_ClockConfig+0x2a4>)
 80038c2:	4ba1      	ldr	r3, [pc, #644]	; (8003b48 <HAL_RCC_ClockConfig+0x2a4>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f023 0207 	bic.w	r2, r3, #7
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80038d0:	4b9d      	ldr	r3, [pc, #628]	; (8003b48 <HAL_RCC_ClockConfig+0x2a4>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0207 	and.w	r2, r3, #7
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d001      	beq.n	80038e2 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e1d5      	b.n	8003c8e <HAL_RCC_ClockConfig+0x3ea>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d008      	beq.n	8003900 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038ee:	4997      	ldr	r1, [pc, #604]	; (8003b4c <HAL_RCC_ClockConfig+0x2a8>)
 80038f0:	4b96      	ldr	r3, [pc, #600]	; (8003b4c <HAL_RCC_ClockConfig+0x2a8>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	2b00      	cmp	r3, #0
 800390a:	f000 816d 	beq.w	8003be8 <HAL_RCC_ClockConfig+0x344>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d15d      	bne.n	80039d2 <HAL_RCC_ClockConfig+0x12e>
 8003916:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800391a:	673b      	str	r3, [r7, #112]	; 0x70
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800391e:	fa93 f3a3 	rbit	r3, r3
 8003922:	66fb      	str	r3, [r7, #108]	; 0x6c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003924:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003926:	fab3 f383 	clz	r3, r3
 800392a:	b2db      	uxtb	r3, r3
 800392c:	f043 0320 	orr.w	r3, r3, #32
 8003930:	b2db      	uxtb	r3, r3
 8003932:	b2db      	uxtb	r3, r3
 8003934:	095b      	lsrs	r3, r3, #5
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2b01      	cmp	r3, #1
 800393a:	d102      	bne.n	8003942 <HAL_RCC_ClockConfig+0x9e>
 800393c:	4b83      	ldr	r3, [pc, #524]	; (8003b4c <HAL_RCC_ClockConfig+0x2a8>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	e02d      	b.n	800399e <HAL_RCC_ClockConfig+0xfa>
 8003942:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003946:	66bb      	str	r3, [r7, #104]	; 0x68
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003948:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800394a:	fa93 f3a3 	rbit	r3, r3
 800394e:	667b      	str	r3, [r7, #100]	; 0x64
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003950:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003952:	fab3 f383 	clz	r3, r3
 8003956:	b2db      	uxtb	r3, r3
 8003958:	f043 0320 	orr.w	r3, r3, #32
 800395c:	b2db      	uxtb	r3, r3
 800395e:	b2db      	uxtb	r3, r3
 8003960:	095b      	lsrs	r3, r3, #5
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d102      	bne.n	800396e <HAL_RCC_ClockConfig+0xca>
 8003968:	4b78      	ldr	r3, [pc, #480]	; (8003b4c <HAL_RCC_ClockConfig+0x2a8>)
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	e017      	b.n	800399e <HAL_RCC_ClockConfig+0xfa>
 800396e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003972:	663b      	str	r3, [r7, #96]	; 0x60
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003974:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003976:	fa93 f3a3 	rbit	r3, r3
 800397a:	65fb      	str	r3, [r7, #92]	; 0x5c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800397c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800397e:	fab3 f383 	clz	r3, r3
 8003982:	b2db      	uxtb	r3, r3
 8003984:	f043 0320 	orr.w	r3, r3, #32
 8003988:	b2db      	uxtb	r3, r3
 800398a:	b2db      	uxtb	r3, r3
 800398c:	095b      	lsrs	r3, r3, #5
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b04      	cmp	r3, #4
 8003992:	d102      	bne.n	800399a <HAL_RCC_ClockConfig+0xf6>
 8003994:	4b6d      	ldr	r3, [pc, #436]	; (8003b4c <HAL_RCC_ClockConfig+0x2a8>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	e001      	b.n	800399e <HAL_RCC_ClockConfig+0xfa>
 800399a:	4b6c      	ldr	r3, [pc, #432]	; (8003b4c <HAL_RCC_ClockConfig+0x2a8>)
 800399c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80039a2:	65ba      	str	r2, [r7, #88]	; 0x58
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039a6:	fa92 f2a2 	rbit	r2, r2
 80039aa:	657a      	str	r2, [r7, #84]	; 0x54
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80039ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80039ae:	fab2 f282 	clz	r2, r2
 80039b2:	b2d2      	uxtb	r2, r2
 80039b4:	f042 0220 	orr.w	r2, r2, #32
 80039b8:	b2d2      	uxtb	r2, r2
 80039ba:	b2d2      	uxtb	r2, r2
 80039bc:	f002 021f 	and.w	r2, r2, #31
 80039c0:	2101      	movs	r1, #1
 80039c2:	fa01 f202 	lsl.w	r2, r1, r2
 80039c6:	4013      	ands	r3, r2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f040 80c1 	bne.w	8003b50 <HAL_RCC_ClockConfig+0x2ac>
      {
        return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e15d      	b.n	8003c8e <HAL_RCC_ClockConfig+0x3ea>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d15c      	bne.n	8003a94 <HAL_RCC_ClockConfig+0x1f0>
 80039da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039de:	653b      	str	r3, [r7, #80]	; 0x50
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039e2:	fa93 f3a3 	rbit	r3, r3
 80039e6:	64fb      	str	r3, [r7, #76]	; 0x4c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80039e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ea:	fab3 f383 	clz	r3, r3
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	f043 0320 	orr.w	r3, r3, #32
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	095b      	lsrs	r3, r3, #5
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d102      	bne.n	8003a06 <HAL_RCC_ClockConfig+0x162>
 8003a00:	4b52      	ldr	r3, [pc, #328]	; (8003b4c <HAL_RCC_ClockConfig+0x2a8>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	e02d      	b.n	8003a62 <HAL_RCC_ClockConfig+0x1be>
 8003a06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a0a:	64bb      	str	r3, [r7, #72]	; 0x48
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a0e:	fa93 f3a3 	rbit	r3, r3
 8003a12:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003a14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a16:	fab3 f383 	clz	r3, r3
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	f043 0320 	orr.w	r3, r3, #32
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	095b      	lsrs	r3, r3, #5
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d102      	bne.n	8003a32 <HAL_RCC_ClockConfig+0x18e>
 8003a2c:	4b47      	ldr	r3, [pc, #284]	; (8003b4c <HAL_RCC_ClockConfig+0x2a8>)
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
 8003a30:	e017      	b.n	8003a62 <HAL_RCC_ClockConfig+0x1be>
 8003a32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a36:	643b      	str	r3, [r7, #64]	; 0x40
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a3a:	fa93 f3a3 	rbit	r3, r3
 8003a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a42:	fab3 f383 	clz	r3, r3
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	f043 0320 	orr.w	r3, r3, #32
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	095b      	lsrs	r3, r3, #5
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b04      	cmp	r3, #4
 8003a56:	d102      	bne.n	8003a5e <HAL_RCC_ClockConfig+0x1ba>
 8003a58:	4b3c      	ldr	r3, [pc, #240]	; (8003b4c <HAL_RCC_ClockConfig+0x2a8>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	e001      	b.n	8003a62 <HAL_RCC_ClockConfig+0x1be>
 8003a5e:	4b3b      	ldr	r3, [pc, #236]	; (8003b4c <HAL_RCC_ClockConfig+0x2a8>)
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a66:	63ba      	str	r2, [r7, #56]	; 0x38
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a6a:	fa92 f2a2 	rbit	r2, r2
 8003a6e:	637a      	str	r2, [r7, #52]	; 0x34
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003a70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a72:	fab2 f282 	clz	r2, r2
 8003a76:	b2d2      	uxtb	r2, r2
 8003a78:	f042 0220 	orr.w	r2, r2, #32
 8003a7c:	b2d2      	uxtb	r2, r2
 8003a7e:	b2d2      	uxtb	r2, r2
 8003a80:	f002 021f 	and.w	r2, r2, #31
 8003a84:	2101      	movs	r1, #1
 8003a86:	fa01 f202 	lsl.w	r2, r1, r2
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d15f      	bne.n	8003b50 <HAL_RCC_ClockConfig+0x2ac>
      {
        return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e0fc      	b.n	8003c8e <HAL_RCC_ClockConfig+0x3ea>
 8003a94:	2302      	movs	r3, #2
 8003a96:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9a:	fa93 f3a3 	rbit	r3, r3
 8003a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa2:	fab3 f383 	clz	r3, r3
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	f043 0320 	orr.w	r3, r3, #32
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	095b      	lsrs	r3, r3, #5
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d102      	bne.n	8003abe <HAL_RCC_ClockConfig+0x21a>
 8003ab8:	4b24      	ldr	r3, [pc, #144]	; (8003b4c <HAL_RCC_ClockConfig+0x2a8>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	e02b      	b.n	8003b16 <HAL_RCC_ClockConfig+0x272>
 8003abe:	2302      	movs	r3, #2
 8003ac0:	62bb      	str	r3, [r7, #40]	; 0x28
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac4:	fa93 f3a3 	rbit	r3, r3
 8003ac8:	627b      	str	r3, [r7, #36]	; 0x24
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	fab3 f383 	clz	r3, r3
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	f043 0320 	orr.w	r3, r3, #32
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	095b      	lsrs	r3, r3, #5
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d102      	bne.n	8003ae8 <HAL_RCC_ClockConfig+0x244>
 8003ae2:	4b1a      	ldr	r3, [pc, #104]	; (8003b4c <HAL_RCC_ClockConfig+0x2a8>)
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	e016      	b.n	8003b16 <HAL_RCC_ClockConfig+0x272>
 8003ae8:	2302      	movs	r3, #2
 8003aea:	623b      	str	r3, [r7, #32]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aec:	6a3b      	ldr	r3, [r7, #32]
 8003aee:	fa93 f3a3 	rbit	r3, r3
 8003af2:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	fab3 f383 	clz	r3, r3
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	f043 0320 	orr.w	r3, r3, #32
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	095b      	lsrs	r3, r3, #5
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	2b04      	cmp	r3, #4
 8003b0a:	d102      	bne.n	8003b12 <HAL_RCC_ClockConfig+0x26e>
 8003b0c:	4b0f      	ldr	r3, [pc, #60]	; (8003b4c <HAL_RCC_ClockConfig+0x2a8>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	e001      	b.n	8003b16 <HAL_RCC_ClockConfig+0x272>
 8003b12:	4b0e      	ldr	r3, [pc, #56]	; (8003b4c <HAL_RCC_ClockConfig+0x2a8>)
 8003b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b16:	2202      	movs	r2, #2
 8003b18:	61ba      	str	r2, [r7, #24]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	fa92 f2a2 	rbit	r2, r2
 8003b20:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	fab2 f282 	clz	r2, r2
 8003b28:	b2d2      	uxtb	r2, r2
 8003b2a:	f042 0220 	orr.w	r2, r2, #32
 8003b2e:	b2d2      	uxtb	r2, r2
 8003b30:	b2d2      	uxtb	r2, r2
 8003b32:	f002 021f 	and.w	r2, r2, #31
 8003b36:	2101      	movs	r1, #1
 8003b38:	fa01 f202 	lsl.w	r2, r1, r2
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d106      	bne.n	8003b50 <HAL_RCC_ClockConfig+0x2ac>
      {
        return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e0a3      	b.n	8003c8e <HAL_RCC_ClockConfig+0x3ea>
 8003b46:	bf00      	nop
 8003b48:	40022000 	.word	0x40022000
 8003b4c:	40021000 	.word	0x40021000
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b50:	4951      	ldr	r1, [pc, #324]	; (8003c98 <HAL_RCC_ClockConfig+0x3f4>)
 8003b52:	4b51      	ldr	r3, [pc, #324]	; (8003c98 <HAL_RCC_ClockConfig+0x3f4>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f023 0203 	bic.w	r2, r3, #3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b62:	f7fe fc7b 	bl	800245c <HAL_GetTick>
 8003b66:	6778      	str	r0, [r7, #116]	; 0x74
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d112      	bne.n	8003b96 <HAL_RCC_ClockConfig+0x2f2>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b70:	e00a      	b.n	8003b88 <HAL_RCC_ClockConfig+0x2e4>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b72:	f7fe fc73 	bl	800245c <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d901      	bls.n	8003b88 <HAL_RCC_ClockConfig+0x2e4>
        {
          return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e082      	b.n	8003c8e <HAL_RCC_ClockConfig+0x3ea>
    /* Get Start Tick */
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b88:	4b43      	ldr	r3, [pc, #268]	; (8003c98 <HAL_RCC_ClockConfig+0x3f4>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f003 030c 	and.w	r3, r3, #12
 8003b90:	2b04      	cmp	r3, #4
 8003b92:	d1ee      	bne.n	8003b72 <HAL_RCC_ClockConfig+0x2ce>
 8003b94:	e028      	b.n	8003be8 <HAL_RCC_ClockConfig+0x344>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d112      	bne.n	8003bc4 <HAL_RCC_ClockConfig+0x320>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b9e:	e00a      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x312>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ba0:	f7fe fc5c 	bl	800245c <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_ClockConfig+0x312>
        {
          return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e06b      	b.n	8003c8e <HAL_RCC_ClockConfig+0x3ea>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bb6:	4b38      	ldr	r3, [pc, #224]	; (8003c98 <HAL_RCC_ClockConfig+0x3f4>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f003 030c 	and.w	r3, r3, #12
 8003bbe:	2b08      	cmp	r3, #8
 8003bc0:	d1ee      	bne.n	8003ba0 <HAL_RCC_ClockConfig+0x2fc>
 8003bc2:	e011      	b.n	8003be8 <HAL_RCC_ClockConfig+0x344>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bc4:	e00a      	b.n	8003bdc <HAL_RCC_ClockConfig+0x338>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bc6:	f7fe fc49 	bl	800245c <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d901      	bls.n	8003bdc <HAL_RCC_ClockConfig+0x338>
        {
          return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e058      	b.n	8003c8e <HAL_RCC_ClockConfig+0x3ea>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bdc:	4b2e      	ldr	r3, [pc, #184]	; (8003c98 <HAL_RCC_ClockConfig+0x3f4>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f003 030c 	and.w	r3, r3, #12
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1ee      	bne.n	8003bc6 <HAL_RCC_ClockConfig+0x322>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8003be8:	4b2c      	ldr	r3, [pc, #176]	; (8003c9c <HAL_RCC_ClockConfig+0x3f8>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0207 	and.w	r2, r3, #7
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d910      	bls.n	8003c18 <HAL_RCC_ClockConfig+0x374>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bf6:	4929      	ldr	r1, [pc, #164]	; (8003c9c <HAL_RCC_ClockConfig+0x3f8>)
 8003bf8:	4b28      	ldr	r3, [pc, #160]	; (8003c9c <HAL_RCC_ClockConfig+0x3f8>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f023 0207 	bic.w	r2, r3, #7
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003c06:	4b25      	ldr	r3, [pc, #148]	; (8003c9c <HAL_RCC_ClockConfig+0x3f8>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0207 	and.w	r2, r3, #7
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d001      	beq.n	8003c18 <HAL_RCC_ClockConfig+0x374>
    {
      return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e03a      	b.n	8003c8e <HAL_RCC_ClockConfig+0x3ea>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0304 	and.w	r3, r3, #4
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d008      	beq.n	8003c36 <HAL_RCC_ClockConfig+0x392>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c24:	491c      	ldr	r1, [pc, #112]	; (8003c98 <HAL_RCC_ClockConfig+0x3f4>)
 8003c26:	4b1c      	ldr	r3, [pc, #112]	; (8003c98 <HAL_RCC_ClockConfig+0x3f4>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0308 	and.w	r3, r3, #8
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d009      	beq.n	8003c56 <HAL_RCC_ClockConfig+0x3b2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c42:	4915      	ldr	r1, [pc, #84]	; (8003c98 <HAL_RCC_ClockConfig+0x3f4>)
 8003c44:	4b14      	ldr	r3, [pc, #80]	; (8003c98 <HAL_RCC_ClockConfig+0x3f4>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	00db      	lsls	r3, r3, #3
 8003c52:	4313      	orrs	r3, r2
 8003c54:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003c56:	f000 f827 	bl	8003ca8 <HAL_RCC_GetSysClockFreq>
 8003c5a:	4601      	mov	r1, r0
 8003c5c:	4b0e      	ldr	r3, [pc, #56]	; (8003c98 <HAL_RCC_ClockConfig+0x3f4>)
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c64:	23f0      	movs	r3, #240	; 0xf0
 8003c66:	613b      	str	r3, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	fa93 f3a3 	rbit	r3, r3
 8003c6e:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	fab3 f383 	clz	r3, r3
 8003c76:	fa22 f303 	lsr.w	r3, r2, r3
 8003c7a:	4a09      	ldr	r2, [pc, #36]	; (8003ca0 <HAL_RCC_ClockConfig+0x3fc>)
 8003c7c:	5cd3      	ldrb	r3, [r2, r3]
 8003c7e:	fa21 f303 	lsr.w	r3, r1, r3
 8003c82:	4a08      	ldr	r2, [pc, #32]	; (8003ca4 <HAL_RCC_ClockConfig+0x400>)
 8003c84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003c86:	2000      	movs	r0, #0
 8003c88:	f7fc ff0c 	bl	8000aa4 <HAL_InitTick>
  
  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3778      	adds	r7, #120	; 0x78
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	40022000 	.word	0x40022000
 8003ca0:	08005c08 	.word	0x08005c08
 8003ca4:	20000000 	.word	0x20000000

08003ca8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b08b      	sub	sp, #44	; 0x2c
 8003cac:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	61fb      	str	r3, [r7, #28]
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	61bb      	str	r3, [r7, #24]
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8003cba:	2300      	movs	r3, #0
 8003cbc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003cc2:	4b29      	ldr	r3, [pc, #164]	; (8003d68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	f003 030c 	and.w	r3, r3, #12
 8003cce:	2b04      	cmp	r3, #4
 8003cd0:	d002      	beq.n	8003cd8 <HAL_RCC_GetSysClockFreq+0x30>
 8003cd2:	2b08      	cmp	r3, #8
 8003cd4:	d003      	beq.n	8003cde <HAL_RCC_GetSysClockFreq+0x36>
 8003cd6:	e03c      	b.n	8003d52 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003cd8:	4b24      	ldr	r3, [pc, #144]	; (8003d6c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003cda:	623b      	str	r3, [r7, #32]
      break;
 8003cdc:	e03c      	b.n	8003d58 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003ce4:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8003ce8:	613b      	str	r3, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	fa93 f3a3 	rbit	r3, r3
 8003cf0:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	fab3 f383 	clz	r3, r3
 8003cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8003cfc:	4a1c      	ldr	r2, [pc, #112]	; (8003d70 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003cfe:	5cd3      	ldrb	r3, [r2, r3]
 8003d00:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003d02:	4b19      	ldr	r3, [pc, #100]	; (8003d68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d06:	f003 020f 	and.w	r2, r3, #15
 8003d0a:	230f      	movs	r3, #15
 8003d0c:	60bb      	str	r3, [r7, #8]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	fa93 f3a3 	rbit	r3, r3
 8003d14:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	fab3 f383 	clz	r3, r3
 8003d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d20:	4a14      	ldr	r2, [pc, #80]	; (8003d74 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003d22:	5cd3      	ldrb	r3, [r2, r3]
 8003d24:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d008      	beq.n	8003d42 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8003d30:	4a0e      	ldr	r2, [pc, #56]	; (8003d6c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	fb02 f303 	mul.w	r3, r2, r3
 8003d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d40:	e004      	b.n	8003d4c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	4a0c      	ldr	r2, [pc, #48]	; (8003d78 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003d46:	fb02 f303 	mul.w	r3, r2, r3
 8003d4a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4e:	623b      	str	r3, [r7, #32]
      break;
 8003d50:	e002      	b.n	8003d58 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d52:	4b06      	ldr	r3, [pc, #24]	; (8003d6c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d54:	623b      	str	r3, [r7, #32]
      break;
 8003d56:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d58:	6a3b      	ldr	r3, [r7, #32]
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	372c      	adds	r7, #44	; 0x2c
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	007a1200 	.word	0x007a1200
 8003d70:	08005e60 	.word	0x08005e60
 8003d74:	08005e70 	.word	0x08005e70
 8003d78:	003d0900 	.word	0x003d0900

08003d7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d80:	4b03      	ldr	r3, [pc, #12]	; (8003d90 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d82:	681b      	ldr	r3, [r3, #0]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	20000000 	.word	0x20000000

08003d94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003d9a:	f7ff ffef 	bl	8003d7c <HAL_RCC_GetHCLKFreq>
 8003d9e:	4601      	mov	r1, r0
 8003da0:	4b0b      	ldr	r3, [pc, #44]	; (8003dd0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003da8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003dac:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	fa93 f3a3 	rbit	r3, r3
 8003db4:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	fab3 f383 	clz	r3, r3
 8003dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8003dc0:	4a04      	ldr	r2, [pc, #16]	; (8003dd4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003dc2:	5cd3      	ldrb	r3, [r2, r3]
 8003dc4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3708      	adds	r7, #8
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	08005c18 	.word	0x08005c18

08003dd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003dde:	f7ff ffcd 	bl	8003d7c <HAL_RCC_GetHCLKFreq>
 8003de2:	4601      	mov	r1, r0
 8003de4:	4b0b      	ldr	r3, [pc, #44]	; (8003e14 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8003dec:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003df0:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	fa93 f3a3 	rbit	r3, r3
 8003df8:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	fab3 f383 	clz	r3, r3
 8003e00:	fa22 f303 	lsr.w	r3, r2, r3
 8003e04:	4a04      	ldr	r2, [pc, #16]	; (8003e18 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003e06:	5cd3      	ldrb	r3, [r2, r3]
 8003e08:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3708      	adds	r7, #8
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40021000 	.word	0x40021000
 8003e18:	08005c18 	.word	0x08005c18

08003e1c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	220f      	movs	r2, #15
 8003e2a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e2c:	4b11      	ldr	r3, [pc, #68]	; (8003e74 <HAL_RCC_GetClockConfig+0x58>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f003 0203 	and.w	r2, r3, #3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003e38:	4b0e      	ldr	r3, [pc, #56]	; (8003e74 <HAL_RCC_GetClockConfig+0x58>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003e44:	4b0b      	ldr	r3, [pc, #44]	; (8003e74 <HAL_RCC_GetClockConfig+0x58>)
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003e50:	4b08      	ldr	r3, [pc, #32]	; (8003e74 <HAL_RCC_GetClockConfig+0x58>)
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003e58:	08da      	lsrs	r2, r3, #3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003e5e:	4b06      	ldr	r3, [pc, #24]	; (8003e78 <HAL_RCC_GetClockConfig+0x5c>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0207 	and.w	r2, r3, #7
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	601a      	str	r2, [r3, #0]
}
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr
 8003e74:	40021000 	.word	0x40021000
 8003e78:	40022000 	.word	0x40022000

08003e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b087      	sub	sp, #28
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003e86:	2300      	movs	r3, #0
 8003e88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8003e92:	e14a      	b.n	800412a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	2101      	movs	r1, #1
 8003e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f000 813c 	beq.w	8004124 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d003      	beq.n	8003ebc <HAL_GPIO_Init+0x40>
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	2b12      	cmp	r3, #18
 8003eba:	d122      	bne.n	8003f02 <HAL_GPIO_Init+0x86>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	08da      	lsrs	r2, r3, #3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	3208      	adds	r2, #8
 8003ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f003 0307 	and.w	r3, r3, #7
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	230f      	movs	r3, #15
 8003ed6:	4093      	lsls	r3, r2
 8003ed8:	43db      	mvns	r3, r3
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	4013      	ands	r3, r2
 8003ede:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	f002 0207 	and.w	r2, r2, #7
 8003eea:	0092      	lsls	r2, r2, #2
 8003eec:	4093      	lsls	r3, r2
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	08da      	lsrs	r2, r3, #3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	3208      	adds	r2, #8
 8003efc:	6939      	ldr	r1, [r7, #16]
 8003efe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	005b      	lsls	r3, r3, #1
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	2303      	movs	r3, #3
 8003f10:	4093      	lsls	r3, r2
 8003f12:	43db      	mvns	r3, r3
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	4013      	ands	r3, r2
 8003f18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f003 0303 	and.w	r3, r3, #3
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	0052      	lsls	r2, r2, #1
 8003f26:	4093      	lsls	r3, r2
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d00b      	beq.n	8003f54 <HAL_GPIO_Init+0xd8>
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d007      	beq.n	8003f54 <HAL_GPIO_Init+0xd8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f48:	2b11      	cmp	r3, #17
 8003f4a:	d003      	beq.n	8003f54 <HAL_GPIO_Init+0xd8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	2b12      	cmp	r3, #18
 8003f52:	d12f      	bne.n	8003fb4 <HAL_GPIO_Init+0x138>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	005b      	lsls	r3, r3, #1
 8003f5e:	461a      	mov	r2, r3
 8003f60:	2303      	movs	r3, #3
 8003f62:	4093      	lsls	r3, r2
 8003f64:	43db      	mvns	r3, r3
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	697a      	ldr	r2, [r7, #20]
 8003f72:	0052      	lsls	r2, r2, #1
 8003f74:	4093      	lsls	r3, r2
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f90:	43db      	mvns	r3, r3
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	4013      	ands	r3, r2
 8003f96:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f003 0310 	and.w	r3, r3, #16
 8003fa0:	091a      	lsrs	r2, r3, #4
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	005b      	lsls	r3, r3, #1
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	4093      	lsls	r3, r2
 8003fc4:	43db      	mvns	r3, r3
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	0052      	lsls	r2, r2, #1
 8003fd4:	4093      	lsls	r3, r2
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f000 809a 	beq.w	8004124 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ff0:	4a54      	ldr	r2, [pc, #336]	; (8004144 <HAL_GPIO_Init+0x2c8>)
 8003ff2:	4b54      	ldr	r3, [pc, #336]	; (8004144 <HAL_GPIO_Init+0x2c8>)
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	f043 0301 	orr.w	r3, r3, #1
 8003ffa:	6193      	str	r3, [r2, #24]
 8003ffc:	4b51      	ldr	r3, [pc, #324]	; (8004144 <HAL_GPIO_Init+0x2c8>)
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	60bb      	str	r3, [r7, #8]
 8004006:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8004008:	4a4f      	ldr	r2, [pc, #316]	; (8004148 <HAL_GPIO_Init+0x2cc>)
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	089b      	lsrs	r3, r3, #2
 800400e:	3302      	adds	r3, #2
 8004010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004014:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f003 0303 	and.w	r3, r3, #3
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	461a      	mov	r2, r3
 8004020:	230f      	movs	r3, #15
 8004022:	4093      	lsls	r3, r2
 8004024:	43db      	mvns	r3, r3
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	4013      	ands	r3, r2
 800402a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004032:	d013      	beq.n	800405c <HAL_GPIO_Init+0x1e0>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a45      	ldr	r2, [pc, #276]	; (800414c <HAL_GPIO_Init+0x2d0>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d00d      	beq.n	8004058 <HAL_GPIO_Init+0x1dc>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a44      	ldr	r2, [pc, #272]	; (8004150 <HAL_GPIO_Init+0x2d4>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d007      	beq.n	8004054 <HAL_GPIO_Init+0x1d8>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a43      	ldr	r2, [pc, #268]	; (8004154 <HAL_GPIO_Init+0x2d8>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d101      	bne.n	8004050 <HAL_GPIO_Init+0x1d4>
 800404c:	2303      	movs	r3, #3
 800404e:	e006      	b.n	800405e <HAL_GPIO_Init+0x1e2>
 8004050:	2305      	movs	r3, #5
 8004052:	e004      	b.n	800405e <HAL_GPIO_Init+0x1e2>
 8004054:	2302      	movs	r3, #2
 8004056:	e002      	b.n	800405e <HAL_GPIO_Init+0x1e2>
 8004058:	2301      	movs	r3, #1
 800405a:	e000      	b.n	800405e <HAL_GPIO_Init+0x1e2>
 800405c:	2300      	movs	r3, #0
 800405e:	697a      	ldr	r2, [r7, #20]
 8004060:	f002 0203 	and.w	r2, r2, #3
 8004064:	0092      	lsls	r2, r2, #2
 8004066:	4093      	lsls	r3, r2
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	4313      	orrs	r3, r2
 800406c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800406e:	4936      	ldr	r1, [pc, #216]	; (8004148 <HAL_GPIO_Init+0x2cc>)
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	089b      	lsrs	r3, r3, #2
 8004074:	3302      	adds	r3, #2
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800407c:	4b36      	ldr	r3, [pc, #216]	; (8004158 <HAL_GPIO_Init+0x2dc>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	43db      	mvns	r3, r3
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	4013      	ands	r3, r2
 800408a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d003      	beq.n	80040a0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	4313      	orrs	r3, r2
 800409e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80040a0:	4a2d      	ldr	r2, [pc, #180]	; (8004158 <HAL_GPIO_Init+0x2dc>)
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80040a6:	4b2c      	ldr	r3, [pc, #176]	; (8004158 <HAL_GPIO_Init+0x2dc>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	43db      	mvns	r3, r3
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	4013      	ands	r3, r2
 80040b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80040ca:	4a23      	ldr	r2, [pc, #140]	; (8004158 <HAL_GPIO_Init+0x2dc>)
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040d0:	4b21      	ldr	r3, [pc, #132]	; (8004158 <HAL_GPIO_Init+0x2dc>)
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	43db      	mvns	r3, r3
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	4013      	ands	r3, r2
 80040de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d003      	beq.n	80040f4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80040f4:	4a18      	ldr	r2, [pc, #96]	; (8004158 <HAL_GPIO_Init+0x2dc>)
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040fa:	4b17      	ldr	r3, [pc, #92]	; (8004158 <HAL_GPIO_Init+0x2dc>)
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	43db      	mvns	r3, r3
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	4013      	ands	r3, r2
 8004108:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	4313      	orrs	r3, r2
 800411c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800411e:	4a0e      	ldr	r2, [pc, #56]	; (8004158 <HAL_GPIO_Init+0x2dc>)
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	3301      	adds	r3, #1
 8004128:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	fa22 f303 	lsr.w	r3, r2, r3
 8004134:	2b00      	cmp	r3, #0
 8004136:	f47f aead 	bne.w	8003e94 <HAL_GPIO_Init+0x18>
      }
    }
    
    position++;
  }
}
 800413a:	371c      	adds	r7, #28
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr
 8004144:	40021000 	.word	0x40021000
 8004148:	40010000 	.word	0x40010000
 800414c:	48000400 	.word	0x48000400
 8004150:	48000800 	.word	0x48000800
 8004154:	48000c00 	.word	0x48000c00
 8004158:	40010400 	.word	0x40010400

0800415c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	460b      	mov	r3, r1
 8004166:	807b      	strh	r3, [r7, #2]
 8004168:	4613      	mov	r3, r2
 800416a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800416c:	787b      	ldrb	r3, [r7, #1]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004172:	887a      	ldrh	r2, [r7, #2]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	619a      	str	r2, [r3, #24]
 8004178:	e002      	b.n	8004180 <HAL_GPIO_WritePin+0x24>
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800417a:	887a      	ldrh	r2, [r7, #2]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop

0800418c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e043      	b.n	8004226 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d106      	bne.n	80041b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f7fc fc22 	bl	80009fc <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2224      	movs	r2, #36	; 0x24
 80041bc:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	6812      	ldr	r2, [r2, #0]
 80041c8:	6812      	ldr	r2, [r2, #0]
 80041ca:	f022 0201 	bic.w	r2, r2, #1
 80041ce:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 f82d 	bl	8004230 <UART_SetConfig>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d101      	bne.n	80041e0 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e022      	b.n	8004226 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d002      	beq.n	80041ee <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 f985 	bl	80044f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	6812      	ldr	r2, [r2, #0]
 80041f6:	6852      	ldr	r2, [r2, #4]
 80041f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041fc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	6812      	ldr	r2, [r2, #0]
 8004206:	6892      	ldr	r2, [r2, #8]
 8004208:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800420c:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	6812      	ldr	r2, [r2, #0]
 8004216:	6812      	ldr	r2, [r2, #0]
 8004218:	f042 0201 	orr.w	r2, r2, #1
 800421c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 fa0c 	bl	800463c <UART_CheckIdleState>
 8004224:	4603      	mov	r3, r0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop

08004230 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004230:	b590      	push	{r4, r7, lr}
 8004232:	b087      	sub	sp, #28
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8004238:	2300      	movs	r3, #0
 800423a:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800423c:	2310      	movs	r3, #16
 800423e:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8004240:	2300      	movs	r3, #0
 8004242:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8004244:	2300      	movs	r3, #0
 8004246:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004248:	2300      	movs	r3, #0
 800424a:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689a      	ldr	r2, [r3, #8]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	431a      	orrs	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	431a      	orrs	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	69db      	ldr	r3, [r3, #28]
 8004260:	4313      	orrs	r3, r2
 8004262:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6819      	ldr	r1, [r3, #0]
 800426e:	4b9d      	ldr	r3, [pc, #628]	; (80044e4 <UART_SetConfig+0x2b4>)
 8004270:	400b      	ands	r3, r1
 8004272:	68f9      	ldr	r1, [r7, #12]
 8004274:	430b      	orrs	r3, r1
 8004276:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	6812      	ldr	r2, [r2, #0]
 8004280:	6852      	ldr	r2, [r2, #4]
 8004282:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	68d2      	ldr	r2, [r2, #12]
 800428a:	430a      	orrs	r2, r1
 800428c:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	699a      	ldr	r2, [r3, #24]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	4313      	orrs	r3, r2
 8004298:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	6812      	ldr	r2, [r2, #0]
 80042a2:	6892      	ldr	r2, [r2, #8]
 80042a4:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	430a      	orrs	r2, r1
 80042ac:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a8d      	ldr	r2, [pc, #564]	; (80044e8 <UART_SetConfig+0x2b8>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d121      	bne.n	80042fc <UART_SetConfig+0xcc>
 80042b8:	4b8c      	ldr	r3, [pc, #560]	; (80044ec <UART_SetConfig+0x2bc>)
 80042ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042bc:	f003 0303 	and.w	r3, r3, #3
 80042c0:	2b03      	cmp	r3, #3
 80042c2:	d817      	bhi.n	80042f4 <UART_SetConfig+0xc4>
 80042c4:	a201      	add	r2, pc, #4	; (adr r2, 80042cc <UART_SetConfig+0x9c>)
 80042c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ca:	bf00      	nop
 80042cc:	080042dd 	.word	0x080042dd
 80042d0:	080042e9 	.word	0x080042e9
 80042d4:	080042ef 	.word	0x080042ef
 80042d8:	080042e3 	.word	0x080042e3
 80042dc:	2300      	movs	r3, #0
 80042de:	75fb      	strb	r3, [r7, #23]
 80042e0:	e00a      	b.n	80042f8 <UART_SetConfig+0xc8>
 80042e2:	2302      	movs	r3, #2
 80042e4:	75fb      	strb	r3, [r7, #23]
 80042e6:	e007      	b.n	80042f8 <UART_SetConfig+0xc8>
 80042e8:	2304      	movs	r3, #4
 80042ea:	75fb      	strb	r3, [r7, #23]
 80042ec:	e004      	b.n	80042f8 <UART_SetConfig+0xc8>
 80042ee:	2308      	movs	r3, #8
 80042f0:	75fb      	strb	r3, [r7, #23]
 80042f2:	e001      	b.n	80042f8 <UART_SetConfig+0xc8>
 80042f4:	2310      	movs	r3, #16
 80042f6:	75fb      	strb	r3, [r7, #23]
 80042f8:	bf00      	nop
 80042fa:	e011      	b.n	8004320 <UART_SetConfig+0xf0>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a7b      	ldr	r2, [pc, #492]	; (80044f0 <UART_SetConfig+0x2c0>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d102      	bne.n	800430c <UART_SetConfig+0xdc>
 8004306:	2300      	movs	r3, #0
 8004308:	75fb      	strb	r3, [r7, #23]
 800430a:	e009      	b.n	8004320 <UART_SetConfig+0xf0>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a78      	ldr	r2, [pc, #480]	; (80044f4 <UART_SetConfig+0x2c4>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d102      	bne.n	800431c <UART_SetConfig+0xec>
 8004316:	2300      	movs	r3, #0
 8004318:	75fb      	strb	r3, [r7, #23]
 800431a:	e001      	b.n	8004320 <UART_SetConfig+0xf0>
 800431c:	2310      	movs	r3, #16
 800431e:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	69db      	ldr	r3, [r3, #28]
 8004324:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004328:	d16e      	bne.n	8004408 <UART_SetConfig+0x1d8>
  {
    switch (clocksource)
 800432a:	7dfb      	ldrb	r3, [r7, #23]
 800432c:	2b08      	cmp	r3, #8
 800432e:	d857      	bhi.n	80043e0 <UART_SetConfig+0x1b0>
 8004330:	a201      	add	r2, pc, #4	; (adr r2, 8004338 <UART_SetConfig+0x108>)
 8004332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004336:	bf00      	nop
 8004338:	0800435d 	.word	0x0800435d
 800433c:	08004379 	.word	0x08004379
 8004340:	08004395 	.word	0x08004395
 8004344:	080043e1 	.word	0x080043e1
 8004348:	080043af 	.word	0x080043af
 800434c:	080043e1 	.word	0x080043e1
 8004350:	080043e1 	.word	0x080043e1
 8004354:	080043e1 	.word	0x080043e1
 8004358:	080043cb 	.word	0x080043cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800435c:	f7ff fd1a 	bl	8003d94 <HAL_RCC_GetPCLK1Freq>
 8004360:	4603      	mov	r3, r0
 8004362:	005a      	lsls	r2, r3, #1
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	085b      	lsrs	r3, r3, #1
 800436a:	441a      	add	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	fbb2 f3f3 	udiv	r3, r2, r3
 8004374:	82bb      	strh	r3, [r7, #20]
        break;
 8004376:	e036      	b.n	80043e6 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004378:	f7ff fd2e 	bl	8003dd8 <HAL_RCC_GetPCLK2Freq>
 800437c:	4603      	mov	r3, r0
 800437e:	005a      	lsls	r2, r3, #1
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	085b      	lsrs	r3, r3, #1
 8004386:	441a      	add	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004390:	82bb      	strh	r3, [r7, #20]
        break;
 8004392:	e028      	b.n	80043e6 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	085b      	lsrs	r3, r3, #1
 800439a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800439e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	6852      	ldr	r2, [r2, #4]
 80043a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80043aa:	82bb      	strh	r3, [r7, #20]
        break;
 80043ac:	e01b      	b.n	80043e6 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80043ae:	f7ff fc7b 	bl	8003ca8 <HAL_RCC_GetSysClockFreq>
 80043b2:	4603      	mov	r3, r0
 80043b4:	005a      	lsls	r2, r3, #1
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	085b      	lsrs	r3, r3, #1
 80043bc:	441a      	add	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c6:	82bb      	strh	r3, [r7, #20]
        break;
 80043c8:	e00d      	b.n	80043e6 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	085b      	lsrs	r3, r3, #1
 80043d0:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043dc:	82bb      	strh	r3, [r7, #20]
        break;
 80043de:	e002      	b.n	80043e6 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	74fb      	strb	r3, [r7, #19]
        break;
 80043e4:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 80043e6:	8abb      	ldrh	r3, [r7, #20]
 80043e8:	f023 030f 	bic.w	r3, r3, #15
 80043ec:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043ee:	8abb      	ldrh	r3, [r7, #20]
 80043f0:	f003 030f 	and.w	r3, r3, #15
 80043f4:	105b      	asrs	r3, r3, #1
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	897b      	ldrh	r3, [r7, #10]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	897a      	ldrh	r2, [r7, #10]
 8004404:	60da      	str	r2, [r3, #12]
 8004406:	e068      	b.n	80044da <UART_SetConfig+0x2aa>
  }
  else
  {
    switch (clocksource)
 8004408:	7dfb      	ldrb	r3, [r7, #23]
 800440a:	2b08      	cmp	r3, #8
 800440c:	d862      	bhi.n	80044d4 <UART_SetConfig+0x2a4>
 800440e:	a201      	add	r2, pc, #4	; (adr r2, 8004414 <UART_SetConfig+0x1e4>)
 8004410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004414:	08004439 	.word	0x08004439
 8004418:	08004459 	.word	0x08004459
 800441c:	08004479 	.word	0x08004479
 8004420:	080044d5 	.word	0x080044d5
 8004424:	08004499 	.word	0x08004499
 8004428:	080044d5 	.word	0x080044d5
 800442c:	080044d5 	.word	0x080044d5
 8004430:	080044d5 	.word	0x080044d5
 8004434:	080044b9 	.word	0x080044b9
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681c      	ldr	r4, [r3, #0]
 800443c:	f7ff fcaa 	bl	8003d94 <HAL_RCC_GetPCLK1Freq>
 8004440:	4602      	mov	r2, r0
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	085b      	lsrs	r3, r3, #1
 8004448:	441a      	add	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004452:	b29b      	uxth	r3, r3
 8004454:	60e3      	str	r3, [r4, #12]
        break;
 8004456:	e040      	b.n	80044da <UART_SetConfig+0x2aa>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681c      	ldr	r4, [r3, #0]
 800445c:	f7ff fcbc 	bl	8003dd8 <HAL_RCC_GetPCLK2Freq>
 8004460:	4602      	mov	r2, r0
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	085b      	lsrs	r3, r3, #1
 8004468:	441a      	add	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004472:	b29b      	uxth	r3, r3
 8004474:	60e3      	str	r3, [r4, #12]
        break;
 8004476:	e030      	b.n	80044da <UART_SetConfig+0x2aa>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	085b      	lsrs	r3, r3, #1
 8004482:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8004486:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800448a:	6879      	ldr	r1, [r7, #4]
 800448c:	6849      	ldr	r1, [r1, #4]
 800448e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004492:	b29b      	uxth	r3, r3
 8004494:	60d3      	str	r3, [r2, #12]
        break;
 8004496:	e020      	b.n	80044da <UART_SetConfig+0x2aa>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681c      	ldr	r4, [r3, #0]
 800449c:	f7ff fc04 	bl	8003ca8 <HAL_RCC_GetSysClockFreq>
 80044a0:	4602      	mov	r2, r0
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	085b      	lsrs	r3, r3, #1
 80044a8:	441a      	add	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	60e3      	str	r3, [r4, #12]
        break;
 80044b6:	e010      	b.n	80044da <UART_SetConfig+0x2aa>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	6852      	ldr	r2, [r2, #4]
 80044c0:	0852      	lsrs	r2, r2, #1
 80044c2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	6852      	ldr	r2, [r2, #4]
 80044ca:	fbb1 f2f2 	udiv	r2, r1, r2
 80044ce:	b292      	uxth	r2, r2
 80044d0:	60da      	str	r2, [r3, #12]
        break;
 80044d2:	e002      	b.n	80044da <UART_SetConfig+0x2aa>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	74fb      	strb	r3, [r7, #19]
        break;
 80044d8:	bf00      	nop
    }
  }

  return ret;
 80044da:	7cfb      	ldrb	r3, [r7, #19]

}
 80044dc:	4618      	mov	r0, r3
 80044de:	371c      	adds	r7, #28
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd90      	pop	{r4, r7, pc}
 80044e4:	efff69f3 	.word	0xefff69f3
 80044e8:	40013800 	.word	0x40013800
 80044ec:	40021000 	.word	0x40021000
 80044f0:	40004400 	.word	0x40004400
 80044f4:	40004800 	.word	0x40004800

080044f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00a      	beq.n	8004522 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	6812      	ldr	r2, [r2, #0]
 8004514:	6852      	ldr	r2, [r2, #4]
 8004516:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800451e:	430a      	orrs	r2, r1
 8004520:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00a      	beq.n	8004544 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	6812      	ldr	r2, [r2, #0]
 8004536:	6852      	ldr	r2, [r2, #4]
 8004538:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004540:	430a      	orrs	r2, r1
 8004542:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004548:	f003 0304 	and.w	r3, r3, #4
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00a      	beq.n	8004566 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	6812      	ldr	r2, [r2, #0]
 8004558:	6852      	ldr	r2, [r2, #4]
 800455a:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004562:	430a      	orrs	r2, r1
 8004564:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456a:	f003 0308 	and.w	r3, r3, #8
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00a      	beq.n	8004588 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	6812      	ldr	r2, [r2, #0]
 800457a:	6852      	ldr	r2, [r2, #4]
 800457c:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004584:	430a      	orrs	r2, r1
 8004586:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458c:	f003 0310 	and.w	r3, r3, #16
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00a      	beq.n	80045aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	6812      	ldr	r2, [r2, #0]
 800459c:	6892      	ldr	r2, [r2, #8]
 800459e:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045a6:	430a      	orrs	r2, r1
 80045a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ae:	f003 0320 	and.w	r3, r3, #32
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00a      	beq.n	80045cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	6812      	ldr	r2, [r2, #0]
 80045be:	6892      	ldr	r2, [r2, #8]
 80045c0:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80045c8:	430a      	orrs	r2, r1
 80045ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d01a      	beq.n	800460e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	6812      	ldr	r2, [r2, #0]
 80045e0:	6852      	ldr	r2, [r2, #4]
 80045e2:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80045ea:	430a      	orrs	r2, r1
 80045ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045f6:	d10a      	bne.n	800460e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	6812      	ldr	r2, [r2, #0]
 8004600:	6852      	ldr	r2, [r2, #4]
 8004602:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800460a:	430a      	orrs	r2, r1
 800460c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00a      	beq.n	8004630 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	6812      	ldr	r2, [r2, #0]
 8004622:	6852      	ldr	r2, [r2, #4]
 8004624:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800462c:	430a      	orrs	r2, r1
 800462e:	605a      	str	r2, [r3, #4]
  }
}
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop

0800463c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af02      	add	r7, sp, #8
 8004642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004644:	2300      	movs	r3, #0
 8004646:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800464e:	f7fd ff05 	bl	800245c <HAL_GetTick>
 8004652:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0308 	and.w	r3, r3, #8
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00e      	beq.n	8004680 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004662:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004666:	9300      	str	r3, [sp, #0]
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800466e:	2200      	movs	r2, #0
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f000 f82d 	bl	80046d0 <UART_WaitOnFlagUntilTimeout>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d001      	beq.n	8004680 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e022      	b.n	80046c6 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0304 	and.w	r3, r3, #4
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00e      	beq.n	80046ac <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800468e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004692:	9300      	str	r3, [sp, #0]
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800469a:	2200      	movs	r2, #0
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f000 f817 	bl	80046d0 <UART_WaitOnFlagUntilTimeout>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d001      	beq.n	80046ac <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e00c      	b.n	80046c6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2220      	movs	r2, #32
 80046b0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2220      	movs	r2, #32
 80046b8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop

080046d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	603b      	str	r3, [r7, #0]
 80046dc:	4613      	mov	r3, r2
 80046de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046e0:	e02c      	b.n	800473c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046e8:	d028      	beq.n	800473c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d007      	beq.n	8004700 <UART_WaitOnFlagUntilTimeout+0x30>
 80046f0:	f7fd feb4 	bl	800245c <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	1ad2      	subs	r2, r2, r3
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d91d      	bls.n	800473c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	6812      	ldr	r2, [r2, #0]
 8004708:	6812      	ldr	r2, [r2, #0]
 800470a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800470e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	6812      	ldr	r2, [r2, #0]
 8004718:	6892      	ldr	r2, [r2, #8]
 800471a:	f022 0201 	bic.w	r2, r2, #1
 800471e:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2220      	movs	r2, #32
 8004724:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2220      	movs	r2, #32
 800472c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e00f      	b.n	800475c <UART_WaitOnFlagUntilTimeout+0x8c>
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	69da      	ldr	r2, [r3, #28]
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	401a      	ands	r2, r3
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	429a      	cmp	r2, r3
 800474a:	bf0c      	ite	eq
 800474c:	2301      	moveq	r3, #1
 800474e:	2300      	movne	r3, #0
 8004750:	b2db      	uxtb	r3, r3
 8004752:	461a      	mov	r2, r3
 8004754:	79fb      	ldrb	r3, [r7, #7]
 8004756:	429a      	cmp	r2, r3
 8004758:	d0c3      	beq.n	80046e2 <UART_WaitOnFlagUntilTimeout+0x12>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	3710      	adds	r7, #16
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e01d      	b.n	80047b2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d106      	bne.n	8004790 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 f816 	bl	80047bc <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2202      	movs	r2, #2
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	3304      	adds	r3, #4
 80047a0:	4610      	mov	r0, r2
 80047a2:	4619      	mov	r1, r3
 80047a4:	f000 f976 	bl	8004a94 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3708      	adds	r7, #8
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop

080047bc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80047c4:	370c      	adds	r7, #12
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop

080047d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	6812      	ldr	r2, [r2, #0]
 80047e0:	68d2      	ldr	r2, [r2, #12]
 80047e2:	f042 0201 	orr.w	r2, r2, #1
 80047e6:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	6812      	ldr	r2, [r2, #0]
 80047f0:	6812      	ldr	r2, [r2, #0]
 80047f2:	f042 0201 	orr.w	r2, r2, #1
 80047f6:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	370c      	adds	r7, #12
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop

08004808 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d022      	beq.n	8004864 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	f003 0302 	and.w	r3, r3, #2
 8004828:	2b00      	cmp	r3, #0
 800482a:	d01b      	beq.n	8004864 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f06f 0202 	mvn.w	r2, #2
 8004834:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	771a      	strb	r2, [r3, #28]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	f003 0303 	and.w	r3, r3, #3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d003      	beq.n	8004852 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 f904 	bl	8004a58 <HAL_TIM_IC_CaptureCallback>
 8004850:	e005      	b.n	800485e <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 f8f6 	bl	8004a44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 f907 	bl	8004a6c <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	f003 0304 	and.w	r3, r3, #4
 800486e:	2b00      	cmp	r3, #0
 8004870:	d022      	beq.n	80048b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	f003 0304 	and.w	r3, r3, #4
 800487c:	2b00      	cmp	r3, #0
 800487e:	d01b      	beq.n	80048b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f06f 0204 	mvn.w	r2, #4
 8004888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2202      	movs	r2, #2
 800488e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800489a:	2b00      	cmp	r3, #0
 800489c:	d003      	beq.n	80048a6 <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f8da 	bl	8004a58 <HAL_TIM_IC_CaptureCallback>
 80048a4:	e005      	b.n	80048b2 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 f8cc 	bl	8004a44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 f8dd 	bl	8004a6c <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	f003 0308 	and.w	r3, r3, #8
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d022      	beq.n	800490c <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	f003 0308 	and.w	r3, r3, #8
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d01b      	beq.n	800490c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f06f 0208 	mvn.w	r2, #8
 80048dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2204      	movs	r2, #4
 80048e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	69db      	ldr	r3, [r3, #28]
 80048ea:	f003 0303 	and.w	r3, r3, #3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d003      	beq.n	80048fa <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 f8b0 	bl	8004a58 <HAL_TIM_IC_CaptureCallback>
 80048f8:	e005      	b.n	8004906 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 f8a2 	bl	8004a44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 f8b3 	bl	8004a6c <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	f003 0310 	and.w	r3, r3, #16
 8004916:	2b00      	cmp	r3, #0
 8004918:	d022      	beq.n	8004960 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	f003 0310 	and.w	r3, r3, #16
 8004924:	2b00      	cmp	r3, #0
 8004926:	d01b      	beq.n	8004960 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f06f 0210 	mvn.w	r2, #16
 8004930:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2208      	movs	r2, #8
 8004936:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	69db      	ldr	r3, [r3, #28]
 800493e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004942:	2b00      	cmp	r3, #0
 8004944:	d003      	beq.n	800494e <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f886 	bl	8004a58 <HAL_TIM_IC_CaptureCallback>
 800494c:	e005      	b.n	800495a <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f878 	bl	8004a44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 f889 	bl	8004a6c <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00e      	beq.n	800498c <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	2b00      	cmp	r3, #0
 800497a:	d007      	beq.n	800498c <HAL_TIM_IRQHandler+0x184>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f06f 0201 	mvn.w	r2, #1
 8004984:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f7fc fe00 	bl	800158c <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00e      	beq.n	80049b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d007      	beq.n	80049b8 <HAL_TIM_IRQHandler+0x1b0>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049b0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f7fd fd1a 	bl	80023ec <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00e      	beq.n	80049e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d007      	beq.n	80049e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80049dc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7fd fd0e 	bl	8002400 <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00e      	beq.n	8004a10 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d007      	beq.n	8004a10 <HAL_TIM_IRQHandler+0x208>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a08:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f838 	bl	8004a80 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	f003 0320 	and.w	r3, r3, #32
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00e      	beq.n	8004a3c <HAL_TIM_IRQHandler+0x234>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	f003 0320 	and.w	r3, r3, #32
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d007      	beq.n	8004a3c <HAL_TIM_IRQHandler+0x234>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f06f 0220 	mvn.w	r2, #32
 8004a34:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f7fd fcce 	bl	80023d8 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8004a3c:	3708      	adds	r7, #8
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop

08004a44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop

08004a58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a60:	370c      	adds	r7, #12
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop

08004a6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a74:	370c      	adds	r7, #12
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop

08004a80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop

08004a94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a2d      	ldr	r2, [pc, #180]	; (8004b60 <TIM_Base_SetConfig+0xcc>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d003      	beq.n	8004ab8 <TIM_Base_SetConfig+0x24>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ab6:	d108      	bne.n	8004aca <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004abe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a24      	ldr	r2, [pc, #144]	; (8004b60 <TIM_Base_SetConfig+0xcc>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d00f      	beq.n	8004af2 <TIM_Base_SetConfig+0x5e>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ad8:	d00b      	beq.n	8004af2 <TIM_Base_SetConfig+0x5e>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a21      	ldr	r2, [pc, #132]	; (8004b64 <TIM_Base_SetConfig+0xd0>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d007      	beq.n	8004af2 <TIM_Base_SetConfig+0x5e>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a20      	ldr	r2, [pc, #128]	; (8004b68 <TIM_Base_SetConfig+0xd4>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d003      	beq.n	8004af2 <TIM_Base_SetConfig+0x5e>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a1f      	ldr	r2, [pc, #124]	; (8004b6c <TIM_Base_SetConfig+0xd8>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d108      	bne.n	8004b04 <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004af8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	689a      	ldr	r2, [r3, #8]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	629a      	str	r2, [r3, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a0d      	ldr	r2, [pc, #52]	; (8004b60 <TIM_Base_SetConfig+0xcc>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d00b      	beq.n	8004b48 <TIM_Base_SetConfig+0xb4>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a0c      	ldr	r2, [pc, #48]	; (8004b64 <TIM_Base_SetConfig+0xd0>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d007      	beq.n	8004b48 <TIM_Base_SetConfig+0xb4>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a0b      	ldr	r2, [pc, #44]	; (8004b68 <TIM_Base_SetConfig+0xd4>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d003      	beq.n	8004b48 <TIM_Base_SetConfig+0xb4>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a0a      	ldr	r2, [pc, #40]	; (8004b6c <TIM_Base_SetConfig+0xd8>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d103      	bne.n	8004b50 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	691a      	ldr	r2, [r3, #16]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	615a      	str	r2, [r3, #20]
}
 8004b56:	3714      	adds	r7, #20
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr
 8004b60:	40012c00 	.word	0x40012c00
 8004b64:	40014000 	.word	0x40014000
 8004b68:	40014400 	.word	0x40014400
 8004b6c:	40014800 	.word	0x40014800

08004b70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e082      	b.n	8004c88 <HAL_SPI_Init+0x118>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d106      	bne.n	8004ba2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f7fc fd3f 	bl	8001620 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2202      	movs	r2, #2
 8004ba6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	6812      	ldr	r2, [r2, #0]
 8004bb2:	6812      	ldr	r2, [r2, #0]
 8004bb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bb8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004bc2:	d902      	bls.n	8004bca <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	60fb      	str	r3, [r7, #12]
 8004bc8:	e002      	b.n	8004bd0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004bca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004bce:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004bd8:	d007      	beq.n	8004bea <HAL_SPI_Init+0x7a>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004be2:	d002      	beq.n	8004bea <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10b      	bne.n	8004c0a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004bfa:	d903      	bls.n	8004c04 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2202      	movs	r2, #2
 8004c00:	631a      	str	r2, [r3, #48]	; 0x30
 8004c02:	e002      	b.n	8004c0a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	6851      	ldr	r1, [r2, #4]
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	6892      	ldr	r2, [r2, #8]
 8004c16:	4311      	orrs	r1, r2
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	6912      	ldr	r2, [r2, #16]
 8004c1c:	4311      	orrs	r1, r2
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	6952      	ldr	r2, [r2, #20]
 8004c22:	4311      	orrs	r1, r2
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	6992      	ldr	r2, [r2, #24]
 8004c28:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8004c2c:	4311      	orrs	r1, r2
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	69d2      	ldr	r2, [r2, #28]
 8004c32:	4311      	orrs	r1, r2
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	6a12      	ldr	r2, [r2, #32]
 8004c38:	4311      	orrs	r1, r2
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	6992      	ldr	r2, [r2, #24]
 8004c4a:	0c12      	lsrs	r2, r2, #16
 8004c4c:	f002 0104 	and.w	r1, r2, #4
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c54:	4311      	orrs	r1, r2
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c5a:	4311      	orrs	r1, r2
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	68d2      	ldr	r2, [r2, #12]
 8004c60:	4311      	orrs	r1, r2
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	430a      	orrs	r2, r1
 8004c66:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	6812      	ldr	r2, [r2, #0]
 8004c70:	69d2      	ldr	r2, [r2, #28]
 8004c72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c76:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b088      	sub	sp, #32
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	603b      	str	r3, [r7, #0]
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d101      	bne.n	8004cb6 <HAL_SPI_Transmit+0x26>
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	e13e      	b.n	8004f34 <HAL_SPI_Transmit+0x2a4>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cbe:	f7fd fbcd 	bl	800245c <HAL_GetTick>
 8004cc2:	61b8      	str	r0, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d002      	beq.n	8004cd6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004cd4:	e125      	b.n	8004f22 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d002      	beq.n	8004ce2 <HAL_SPI_Transmit+0x52>
 8004cdc:	88fb      	ldrh	r3, [r7, #6]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d102      	bne.n	8004ce8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ce6:	e11c      	b.n	8004f22 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2203      	movs	r2, #3
 8004cec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	88fa      	ldrh	r2, [r7, #6]
 8004d00:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	88fa      	ldrh	r2, [r7, #6]
 8004d06:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d32:	d107      	bne.n	8004d44 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	6812      	ldr	r2, [r2, #0]
 8004d3c:	6812      	ldr	r2, [r2, #0]
 8004d3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d42:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d107      	bne.n	8004d62 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	6812      	ldr	r2, [r2, #0]
 8004d5a:	6812      	ldr	r2, [r2, #0]
 8004d5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d60:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d6a:	d947      	bls.n	8004dfc <HAL_SPI_Transmit+0x16c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d004      	beq.n	8004d7e <HAL_SPI_Transmit+0xee>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d10e      	bne.n	8004d9c <HAL_SPI_Transmit+0x10c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68ba      	ldr	r2, [r7, #8]
 8004d84:	8812      	ldrh	r2, [r2, #0]
 8004d86:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	3302      	adds	r3, #2
 8004d8c:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	3b01      	subs	r3, #1
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d9c:	e028      	b.n	8004df0 <HAL_SPI_Transmit+0x160>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f003 0302 	and.w	r3, r3, #2
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00f      	beq.n	8004dcc <HAL_SPI_Transmit+0x13c>
      {
        hspi->Instance->DR = *((uint16_t *)pData);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68ba      	ldr	r2, [r7, #8]
 8004db2:	8812      	ldrh	r2, [r2, #0]
 8004db4:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	3302      	adds	r3, #2
 8004dba:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004dca:	e011      	b.n	8004df0 <HAL_SPI_Transmit+0x160>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00b      	beq.n	8004dea <HAL_SPI_Transmit+0x15a>
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004dd8:	d00a      	beq.n	8004df0 <HAL_SPI_Transmit+0x160>
 8004dda:	f7fd fb3f 	bl	800245c <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	1ad2      	subs	r2, r2, r3
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d302      	bcc.n	8004df0 <HAL_SPI_Transmit+0x160>
        {
          errorcode = HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004dee:	e098      	b.n	8004f22 <HAL_SPI_Transmit+0x292>
      hspi->Instance->DR = *((uint16_t *)pData);
      pData += sizeof(uint16_t);
      hspi->TxXferCount--;
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1d1      	bne.n	8004d9e <HAL_SPI_Transmit+0x10e>
 8004dfa:	e072      	b.n	8004ee2 <HAL_SPI_Transmit+0x252>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d004      	beq.n	8004e0e <HAL_SPI_Transmit+0x17e>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d124      	bne.n	8004e58 <HAL_SPI_Transmit+0x1c8>
    {
      if (hspi->TxXferCount > 1U)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d90f      	bls.n	8004e38 <HAL_SPI_Transmit+0x1a8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)pData);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68ba      	ldr	r2, [r7, #8]
 8004e1e:	8812      	ldrh	r2, [r2, #0]
 8004e20:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	3302      	adds	r3, #2
 8004e26:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	3b02      	subs	r3, #2
 8004e30:	b29a      	uxth	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e36:	e00f      	b.n	8004e58 <HAL_SPI_Transmit+0x1c8>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f103 020c 	add.w	r2, r3, #12
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	1c59      	adds	r1, r3, #1
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	3b01      	subs	r3, #1
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004e58:	e03e      	b.n	8004ed8 <HAL_SPI_Transmit+0x248>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f003 0302 	and.w	r3, r3, #2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d025      	beq.n	8004eb4 <HAL_SPI_Transmit+0x224>
      {
        if (hspi->TxXferCount > 1U)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d90f      	bls.n	8004e92 <HAL_SPI_Transmit+0x202>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)pData);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68ba      	ldr	r2, [r7, #8]
 8004e78:	8812      	ldrh	r2, [r2, #0]
 8004e7a:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	3302      	adds	r3, #2
 8004e80:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	3b02      	subs	r3, #2
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e90:	e022      	b.n	8004ed8 <HAL_SPI_Transmit+0x248>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f103 020c 	add.w	r2, r3, #12
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	1c59      	adds	r1, r3, #1
 8004e9e:	60b9      	str	r1, [r7, #8]
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	b29a      	uxth	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004eb2:	e011      	b.n	8004ed8 <HAL_SPI_Transmit+0x248>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00b      	beq.n	8004ed2 <HAL_SPI_Transmit+0x242>
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ec0:	d00a      	beq.n	8004ed8 <HAL_SPI_Transmit+0x248>
 8004ec2:	f7fd facb 	bl	800245c <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	1ad2      	subs	r2, r2, r3
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d302      	bcc.n	8004ed8 <HAL_SPI_Transmit+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ed6:	e024      	b.n	8004f22 <HAL_SPI_Transmit+0x292>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
        hspi->TxXferCount--;
      }
    }
    while (hspi->TxXferCount > 0U)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1bb      	bne.n	8004e5a <HAL_SPI_Transmit+0x1ca>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	6839      	ldr	r1, [r7, #0]
 8004ee6:	69ba      	ldr	r2, [r7, #24]
 8004ee8:	f000 f900 	bl	80050ec <SPI_EndRxTxTransaction>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d002      	beq.n	8004ef8 <HAL_SPI_Transmit+0x268>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2220      	movs	r2, #32
 8004ef6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d10a      	bne.n	8004f16 <HAL_SPI_Transmit+0x286>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f00:	2300      	movs	r3, #0
 8004f02:	617b      	str	r3, [r7, #20]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	617b      	str	r3, [r7, #20]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	617b      	str	r3, [r7, #20]
 8004f14:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d001      	beq.n	8004f22 <HAL_SPI_Transmit+0x292>
  {
    errorcode = HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004f32:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3720      	adds	r7, #32
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
 8004f48:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f4a:	e04c      	b.n	8004fe6 <SPI_WaitFlagStateUntilTimeout+0xaa>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f52:	d048      	beq.n	8004fe6 <SPI_WaitFlagStateUntilTimeout+0xaa>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d007      	beq.n	8004f6a <SPI_WaitFlagStateUntilTimeout+0x2e>
 8004f5a:	f7fd fa7f 	bl	800245c <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	1ad2      	subs	r2, r2, r3
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d33d      	bcc.n	8004fe6 <SPI_WaitFlagStateUntilTimeout+0xaa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	6812      	ldr	r2, [r2, #0]
 8004f72:	6852      	ldr	r2, [r2, #4]
 8004f74:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f82:	d111      	bne.n	8004fa8 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f8c:	d004      	beq.n	8004f98 <SPI_WaitFlagStateUntilTimeout+0x5c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f96:	d107      	bne.n	8004fa8 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	6812      	ldr	r2, [r2, #0]
 8004fa0:	6812      	ldr	r2, [r2, #0]
 8004fa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fa6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fb0:	d10f      	bne.n	8004fd2 <SPI_WaitFlagStateUntilTimeout+0x96>
        {
          SPI_RESET_CRC(hspi);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	6812      	ldr	r2, [r2, #0]
 8004fba:	6812      	ldr	r2, [r2, #0]
 8004fbc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fc0:	601a      	str	r2, [r3, #0]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	6812      	ldr	r2, [r2, #0]
 8004fca:	6812      	ldr	r2, [r2, #0]
 8004fcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fd0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e00e      	b.n	8005004 <SPI_WaitFlagStateUntilTimeout+0xc8>
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	689a      	ldr	r2, [r3, #8]
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	401a      	ands	r2, r3
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d101      	bne.n	8004ffa <SPI_WaitFlagStateUntilTimeout+0xbe>
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	e000      	b.n	8004ffc <SPI_WaitFlagStateUntilTimeout+0xc0>
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d1a4      	bne.n	8004f4c <SPI_WaitFlagStateUntilTimeout+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3710      	adds	r7, #16
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b086      	sub	sp, #24
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
 8005018:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 800501a:	e05a      	b.n	80050d2 <SPI_WaitFifoStateUntilTimeout+0xc6>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005022:	d109      	bne.n	8005038 <SPI_WaitFifoStateUntilTimeout+0x2c>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d106      	bne.n	8005038 <SPI_WaitFifoStateUntilTimeout+0x2c>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	330c      	adds	r3, #12
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	b2db      	uxtb	r3, r3
 8005034:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8005036:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800503e:	d048      	beq.n	80050d2 <SPI_WaitFifoStateUntilTimeout+0xc6>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d007      	beq.n	8005056 <SPI_WaitFifoStateUntilTimeout+0x4a>
 8005046:	f7fd fa09 	bl	800245c <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	6a3b      	ldr	r3, [r7, #32]
 800504e:	1ad2      	subs	r2, r2, r3
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	429a      	cmp	r2, r3
 8005054:	d33d      	bcc.n	80050d2 <SPI_WaitFifoStateUntilTimeout+0xc6>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	6812      	ldr	r2, [r2, #0]
 800505e:	6852      	ldr	r2, [r2, #4]
 8005060:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005064:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800506e:	d111      	bne.n	8005094 <SPI_WaitFifoStateUntilTimeout+0x88>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005078:	d004      	beq.n	8005084 <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005082:	d107      	bne.n	8005094 <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	6812      	ldr	r2, [r2, #0]
 800508c:	6812      	ldr	r2, [r2, #0]
 800508e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005092:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005098:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800509c:	d10f      	bne.n	80050be <SPI_WaitFifoStateUntilTimeout+0xb2>
        {
          SPI_RESET_CRC(hspi);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	6812      	ldr	r2, [r2, #0]
 80050a6:	6812      	ldr	r2, [r2, #0]
 80050a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050ac:	601a      	str	r2, [r3, #0]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	6812      	ldr	r2, [r2, #0]
 80050b6:	6812      	ldr	r2, [r2, #0]
 80050b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e008      	b.n	80050e4 <SPI_WaitFifoStateUntilTimeout+0xd8>
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	689a      	ldr	r2, [r3, #8]
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	401a      	ands	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	429a      	cmp	r2, r3
 80050e0:	d19c      	bne.n	800501c <SPI_WaitFifoStateUntilTimeout+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3718      	adds	r7, #24
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b086      	sub	sp, #24
 80050f0:	af02      	add	r7, sp, #8
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	68f8      	ldr	r0, [r7, #12]
 80050fe:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005102:	2200      	movs	r2, #0
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	f7ff ff81 	bl	800500c <SPI_WaitFifoStateUntilTimeout>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d007      	beq.n	8005120 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005114:	f043 0220 	orr.w	r2, r3, #32
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e027      	b.n	8005170 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	9300      	str	r3, [sp, #0]
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	2180      	movs	r1, #128	; 0x80
 8005128:	2200      	movs	r2, #0
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	f7ff ff06 	bl	8004f3c <SPI_WaitFlagStateUntilTimeout>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d007      	beq.n	8005146 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800513a:	f043 0220 	orr.w	r2, r3, #32
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e014      	b.n	8005170 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	9300      	str	r3, [sp, #0]
 800514a:	68f8      	ldr	r0, [r7, #12]
 800514c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005150:	2200      	movs	r2, #0
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	f7ff ff5a 	bl	800500c <SPI_WaitFifoStateUntilTimeout>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d007      	beq.n	800516e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005162:	f043 0220 	orr.w	r2, r3, #32
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e000      	b.n	8005170 <SPI_EndRxTxTransaction+0x84>
  }
  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3710      	adds	r7, #16
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005178:	f8df d034 	ldr.w	sp, [pc, #52]	; 80051b0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800517c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800517e:	e003      	b.n	8005188 <LoopCopyDataInit>

08005180 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005180:	4b0c      	ldr	r3, [pc, #48]	; (80051b4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8005182:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005184:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005186:	3104      	adds	r1, #4

08005188 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005188:	480b      	ldr	r0, [pc, #44]	; (80051b8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800518a:	4b0c      	ldr	r3, [pc, #48]	; (80051bc <LoopForever+0xe>)
	adds	r2, r0, r1
 800518c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800518e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005190:	d3f6      	bcc.n	8005180 <CopyDataInit>
	ldr	r2, =_sbss
 8005192:	4a0b      	ldr	r2, [pc, #44]	; (80051c0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8005194:	e002      	b.n	800519c <LoopFillZerobss>

08005196 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005196:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005198:	f842 3b04 	str.w	r3, [r2], #4

0800519c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800519c:	4b09      	ldr	r3, [pc, #36]	; (80051c4 <LoopForever+0x16>)
	cmp	r2, r3
 800519e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80051a0:	d3f9      	bcc.n	8005196 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80051a2:	f7fc fa6d 	bl	8001680 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80051a6:	f000 f811 	bl	80051cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80051aa:	f7fb fcd1 	bl	8000b50 <main>

080051ae <LoopForever>:

LoopForever:
    b LoopForever
 80051ae:	e7fe      	b.n	80051ae <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80051b0:	20004000 	.word	0x20004000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 80051b4:	08005ec0 	.word	0x08005ec0
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 80051b8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80051bc:	2000006c 	.word	0x2000006c
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 80051c0:	2000006c 	.word	0x2000006c
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 80051c4:	200001b4 	.word	0x200001b4

080051c8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80051c8:	e7fe      	b.n	80051c8 <ADC1_IRQHandler>
	...

080051cc <__libc_init_array>:
 80051cc:	b570      	push	{r4, r5, r6, lr}
 80051ce:	4b0e      	ldr	r3, [pc, #56]	; (8005208 <__libc_init_array+0x3c>)
 80051d0:	4c0e      	ldr	r4, [pc, #56]	; (800520c <__libc_init_array+0x40>)
 80051d2:	1ae4      	subs	r4, r4, r3
 80051d4:	10a4      	asrs	r4, r4, #2
 80051d6:	2500      	movs	r5, #0
 80051d8:	461e      	mov	r6, r3
 80051da:	42a5      	cmp	r5, r4
 80051dc:	d004      	beq.n	80051e8 <__libc_init_array+0x1c>
 80051de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80051e2:	4798      	blx	r3
 80051e4:	3501      	adds	r5, #1
 80051e6:	e7f8      	b.n	80051da <__libc_init_array+0xe>
 80051e8:	f000 fc3a 	bl	8005a60 <_init>
 80051ec:	4c08      	ldr	r4, [pc, #32]	; (8005210 <__libc_init_array+0x44>)
 80051ee:	4b09      	ldr	r3, [pc, #36]	; (8005214 <__libc_init_array+0x48>)
 80051f0:	1ae4      	subs	r4, r4, r3
 80051f2:	10a4      	asrs	r4, r4, #2
 80051f4:	2500      	movs	r5, #0
 80051f6:	461e      	mov	r6, r3
 80051f8:	42a5      	cmp	r5, r4
 80051fa:	d004      	beq.n	8005206 <__libc_init_array+0x3a>
 80051fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005200:	4798      	blx	r3
 8005202:	3501      	adds	r5, #1
 8005204:	e7f8      	b.n	80051f8 <__libc_init_array+0x2c>
 8005206:	bd70      	pop	{r4, r5, r6, pc}
 8005208:	08005eb8 	.word	0x08005eb8
 800520c:	08005eb8 	.word	0x08005eb8
 8005210:	08005ebc 	.word	0x08005ebc
 8005214:	08005eb8 	.word	0x08005eb8

08005218 <memcpy>:
 8005218:	b510      	push	{r4, lr}
 800521a:	1e43      	subs	r3, r0, #1
 800521c:	440a      	add	r2, r1
 800521e:	4291      	cmp	r1, r2
 8005220:	d004      	beq.n	800522c <memcpy+0x14>
 8005222:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005226:	f803 4f01 	strb.w	r4, [r3, #1]!
 800522a:	e7f8      	b.n	800521e <memcpy+0x6>
 800522c:	bd10      	pop	{r4, pc}
	...

08005230 <siprintf>:
 8005230:	b40e      	push	{r1, r2, r3}
 8005232:	b500      	push	{lr}
 8005234:	b09c      	sub	sp, #112	; 0x70
 8005236:	f44f 7102 	mov.w	r1, #520	; 0x208
 800523a:	f8ad 1014 	strh.w	r1, [sp, #20]
 800523e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005242:	9104      	str	r1, [sp, #16]
 8005244:	9107      	str	r1, [sp, #28]
 8005246:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800524a:	ab1d      	add	r3, sp, #116	; 0x74
 800524c:	f8ad 1016 	strh.w	r1, [sp, #22]
 8005250:	4908      	ldr	r1, [pc, #32]	; (8005274 <siprintf+0x44>)
 8005252:	f853 2b04 	ldr.w	r2, [r3], #4
 8005256:	9002      	str	r0, [sp, #8]
 8005258:	9006      	str	r0, [sp, #24]
 800525a:	6808      	ldr	r0, [r1, #0]
 800525c:	9301      	str	r3, [sp, #4]
 800525e:	a902      	add	r1, sp, #8
 8005260:	f000 f864 	bl	800532c <_svfiprintf_r>
 8005264:	9b02      	ldr	r3, [sp, #8]
 8005266:	2200      	movs	r2, #0
 8005268:	701a      	strb	r2, [r3, #0]
 800526a:	b01c      	add	sp, #112	; 0x70
 800526c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005270:	b003      	add	sp, #12
 8005272:	4770      	bx	lr
 8005274:	20000068 	.word	0x20000068

08005278 <__ssputs_r>:
 8005278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800527c:	688e      	ldr	r6, [r1, #8]
 800527e:	42b3      	cmp	r3, r6
 8005280:	4682      	mov	sl, r0
 8005282:	460c      	mov	r4, r1
 8005284:	4690      	mov	r8, r2
 8005286:	4699      	mov	r9, r3
 8005288:	d340      	bcc.n	800530c <__ssputs_r+0x94>
 800528a:	898a      	ldrh	r2, [r1, #12]
 800528c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005290:	d03a      	beq.n	8005308 <__ssputs_r+0x90>
 8005292:	6825      	ldr	r5, [r4, #0]
 8005294:	6909      	ldr	r1, [r1, #16]
 8005296:	1a6f      	subs	r7, r5, r1
 8005298:	6965      	ldr	r5, [r4, #20]
 800529a:	2302      	movs	r3, #2
 800529c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80052a0:	fb95 f5f3 	sdiv	r5, r5, r3
 80052a4:	1c7b      	adds	r3, r7, #1
 80052a6:	444b      	add	r3, r9
 80052a8:	429d      	cmp	r5, r3
 80052aa:	bf38      	it	cc
 80052ac:	461d      	movcc	r5, r3
 80052ae:	0553      	lsls	r3, r2, #21
 80052b0:	d50f      	bpl.n	80052d2 <__ssputs_r+0x5a>
 80052b2:	4629      	mov	r1, r5
 80052b4:	f000 fb30 	bl	8005918 <_malloc_r>
 80052b8:	4606      	mov	r6, r0
 80052ba:	b198      	cbz	r0, 80052e4 <__ssputs_r+0x6c>
 80052bc:	6921      	ldr	r1, [r4, #16]
 80052be:	463a      	mov	r2, r7
 80052c0:	f7ff ffaa 	bl	8005218 <memcpy>
 80052c4:	89a3      	ldrh	r3, [r4, #12]
 80052c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80052ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052ce:	81a3      	strh	r3, [r4, #12]
 80052d0:	e013      	b.n	80052fa <__ssputs_r+0x82>
 80052d2:	462a      	mov	r2, r5
 80052d4:	f000 fb76 	bl	80059c4 <_realloc_r>
 80052d8:	4606      	mov	r6, r0
 80052da:	b970      	cbnz	r0, 80052fa <__ssputs_r+0x82>
 80052dc:	4650      	mov	r0, sl
 80052de:	6921      	ldr	r1, [r4, #16]
 80052e0:	f000 fad6 	bl	8005890 <_free_r>
 80052e4:	230c      	movs	r3, #12
 80052e6:	f8ca 3000 	str.w	r3, [sl]
 80052ea:	89a3      	ldrh	r3, [r4, #12]
 80052ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052f0:	81a3      	strh	r3, [r4, #12]
 80052f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052fa:	6126      	str	r6, [r4, #16]
 80052fc:	6165      	str	r5, [r4, #20]
 80052fe:	443e      	add	r6, r7
 8005300:	1bed      	subs	r5, r5, r7
 8005302:	6026      	str	r6, [r4, #0]
 8005304:	60a5      	str	r5, [r4, #8]
 8005306:	464e      	mov	r6, r9
 8005308:	45b1      	cmp	r9, r6
 800530a:	d200      	bcs.n	800530e <__ssputs_r+0x96>
 800530c:	464e      	mov	r6, r9
 800530e:	4632      	mov	r2, r6
 8005310:	6820      	ldr	r0, [r4, #0]
 8005312:	4641      	mov	r1, r8
 8005314:	f000 faa1 	bl	800585a <memmove>
 8005318:	68a3      	ldr	r3, [r4, #8]
 800531a:	1b9b      	subs	r3, r3, r6
 800531c:	60a3      	str	r3, [r4, #8]
 800531e:	6823      	ldr	r3, [r4, #0]
 8005320:	441e      	add	r6, r3
 8005322:	6026      	str	r6, [r4, #0]
 8005324:	2000      	movs	r0, #0
 8005326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800532c <_svfiprintf_r>:
 800532c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005330:	b09d      	sub	sp, #116	; 0x74
 8005332:	4606      	mov	r6, r0
 8005334:	9303      	str	r3, [sp, #12]
 8005336:	898b      	ldrh	r3, [r1, #12]
 8005338:	061c      	lsls	r4, r3, #24
 800533a:	460d      	mov	r5, r1
 800533c:	4690      	mov	r8, r2
 800533e:	d50c      	bpl.n	800535a <_svfiprintf_r+0x2e>
 8005340:	690b      	ldr	r3, [r1, #16]
 8005342:	b953      	cbnz	r3, 800535a <_svfiprintf_r+0x2e>
 8005344:	2140      	movs	r1, #64	; 0x40
 8005346:	f000 fae7 	bl	8005918 <_malloc_r>
 800534a:	6028      	str	r0, [r5, #0]
 800534c:	6128      	str	r0, [r5, #16]
 800534e:	b910      	cbnz	r0, 8005356 <_svfiprintf_r+0x2a>
 8005350:	230c      	movs	r3, #12
 8005352:	6033      	str	r3, [r6, #0]
 8005354:	e0cc      	b.n	80054f0 <_svfiprintf_r+0x1c4>
 8005356:	2340      	movs	r3, #64	; 0x40
 8005358:	616b      	str	r3, [r5, #20]
 800535a:	2300      	movs	r3, #0
 800535c:	9309      	str	r3, [sp, #36]	; 0x24
 800535e:	2320      	movs	r3, #32
 8005360:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005364:	2330      	movs	r3, #48	; 0x30
 8005366:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800536a:	4643      	mov	r3, r8
 800536c:	461c      	mov	r4, r3
 800536e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005372:	b91a      	cbnz	r2, 800537c <_svfiprintf_r+0x50>
 8005374:	ebb4 0908 	subs.w	r9, r4, r8
 8005378:	d00f      	beq.n	800539a <_svfiprintf_r+0x6e>
 800537a:	e002      	b.n	8005382 <_svfiprintf_r+0x56>
 800537c:	2a25      	cmp	r2, #37	; 0x25
 800537e:	d1f5      	bne.n	800536c <_svfiprintf_r+0x40>
 8005380:	e7f8      	b.n	8005374 <_svfiprintf_r+0x48>
 8005382:	4630      	mov	r0, r6
 8005384:	4629      	mov	r1, r5
 8005386:	4642      	mov	r2, r8
 8005388:	464b      	mov	r3, r9
 800538a:	f7ff ff75 	bl	8005278 <__ssputs_r>
 800538e:	3001      	adds	r0, #1
 8005390:	f000 80a9 	beq.w	80054e6 <_svfiprintf_r+0x1ba>
 8005394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005396:	444b      	add	r3, r9
 8005398:	9309      	str	r3, [sp, #36]	; 0x24
 800539a:	7823      	ldrb	r3, [r4, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	f000 80a2 	beq.w	80054e6 <_svfiprintf_r+0x1ba>
 80053a2:	2300      	movs	r3, #0
 80053a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053a8:	9304      	str	r3, [sp, #16]
 80053aa:	9307      	str	r3, [sp, #28]
 80053ac:	9205      	str	r2, [sp, #20]
 80053ae:	9306      	str	r3, [sp, #24]
 80053b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80053b4:	931a      	str	r3, [sp, #104]	; 0x68
 80053b6:	f104 0801 	add.w	r8, r4, #1
 80053ba:	4644      	mov	r4, r8
 80053bc:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8005508 <_svfiprintf_r+0x1dc>
 80053c0:	7821      	ldrb	r1, [r4, #0]
 80053c2:	4648      	mov	r0, r9
 80053c4:	2205      	movs	r2, #5
 80053c6:	f000 fa39 	bl	800583c <memchr>
 80053ca:	f108 0801 	add.w	r8, r8, #1
 80053ce:	9b04      	ldr	r3, [sp, #16]
 80053d0:	b130      	cbz	r0, 80053e0 <_svfiprintf_r+0xb4>
 80053d2:	ebc9 0000 	rsb	r0, r9, r0
 80053d6:	2201      	movs	r2, #1
 80053d8:	4082      	lsls	r2, r0
 80053da:	4313      	orrs	r3, r2
 80053dc:	9304      	str	r3, [sp, #16]
 80053de:	e7ec      	b.n	80053ba <_svfiprintf_r+0x8e>
 80053e0:	06d8      	lsls	r0, r3, #27
 80053e2:	bf44      	itt	mi
 80053e4:	2220      	movmi	r2, #32
 80053e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80053ea:	0719      	lsls	r1, r3, #28
 80053ec:	bf44      	itt	mi
 80053ee:	222b      	movmi	r2, #43	; 0x2b
 80053f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80053f4:	7822      	ldrb	r2, [r4, #0]
 80053f6:	2a2a      	cmp	r2, #42	; 0x2a
 80053f8:	d002      	beq.n	8005400 <_svfiprintf_r+0xd4>
 80053fa:	9907      	ldr	r1, [sp, #28]
 80053fc:	4623      	mov	r3, r4
 80053fe:	e00e      	b.n	800541e <_svfiprintf_r+0xf2>
 8005400:	9a03      	ldr	r2, [sp, #12]
 8005402:	1d11      	adds	r1, r2, #4
 8005404:	6812      	ldr	r2, [r2, #0]
 8005406:	9103      	str	r1, [sp, #12]
 8005408:	2a00      	cmp	r2, #0
 800540a:	bfbb      	ittet	lt
 800540c:	4252      	neglt	r2, r2
 800540e:	f043 0302 	orrlt.w	r3, r3, #2
 8005412:	9207      	strge	r2, [sp, #28]
 8005414:	9207      	strlt	r2, [sp, #28]
 8005416:	bfb8      	it	lt
 8005418:	9304      	strlt	r3, [sp, #16]
 800541a:	3401      	adds	r4, #1
 800541c:	e00a      	b.n	8005434 <_svfiprintf_r+0x108>
 800541e:	461c      	mov	r4, r3
 8005420:	3301      	adds	r3, #1
 8005422:	7822      	ldrb	r2, [r4, #0]
 8005424:	3a30      	subs	r2, #48	; 0x30
 8005426:	2a09      	cmp	r2, #9
 8005428:	d803      	bhi.n	8005432 <_svfiprintf_r+0x106>
 800542a:	200a      	movs	r0, #10
 800542c:	fb00 2101 	mla	r1, r0, r1, r2
 8005430:	e7f5      	b.n	800541e <_svfiprintf_r+0xf2>
 8005432:	9107      	str	r1, [sp, #28]
 8005434:	7823      	ldrb	r3, [r4, #0]
 8005436:	2b2e      	cmp	r3, #46	; 0x2e
 8005438:	d11a      	bne.n	8005470 <_svfiprintf_r+0x144>
 800543a:	7863      	ldrb	r3, [r4, #1]
 800543c:	2b2a      	cmp	r3, #42	; 0x2a
 800543e:	d10a      	bne.n	8005456 <_svfiprintf_r+0x12a>
 8005440:	9b03      	ldr	r3, [sp, #12]
 8005442:	1d1a      	adds	r2, r3, #4
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	9203      	str	r2, [sp, #12]
 8005448:	2b00      	cmp	r3, #0
 800544a:	bfb8      	it	lt
 800544c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005450:	3402      	adds	r4, #2
 8005452:	9305      	str	r3, [sp, #20]
 8005454:	e00c      	b.n	8005470 <_svfiprintf_r+0x144>
 8005456:	1c61      	adds	r1, r4, #1
 8005458:	2200      	movs	r2, #0
 800545a:	460c      	mov	r4, r1
 800545c:	3101      	adds	r1, #1
 800545e:	7823      	ldrb	r3, [r4, #0]
 8005460:	3b30      	subs	r3, #48	; 0x30
 8005462:	2b09      	cmp	r3, #9
 8005464:	d803      	bhi.n	800546e <_svfiprintf_r+0x142>
 8005466:	200a      	movs	r0, #10
 8005468:	fb00 3202 	mla	r2, r0, r2, r3
 800546c:	e7f5      	b.n	800545a <_svfiprintf_r+0x12e>
 800546e:	9205      	str	r2, [sp, #20]
 8005470:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800550c <_svfiprintf_r+0x1e0>
 8005474:	7821      	ldrb	r1, [r4, #0]
 8005476:	4640      	mov	r0, r8
 8005478:	2203      	movs	r2, #3
 800547a:	f000 f9df 	bl	800583c <memchr>
 800547e:	b138      	cbz	r0, 8005490 <_svfiprintf_r+0x164>
 8005480:	9a04      	ldr	r2, [sp, #16]
 8005482:	ebc8 0000 	rsb	r0, r8, r0
 8005486:	2340      	movs	r3, #64	; 0x40
 8005488:	4083      	lsls	r3, r0
 800548a:	4313      	orrs	r3, r2
 800548c:	9304      	str	r3, [sp, #16]
 800548e:	3401      	adds	r4, #1
 8005490:	7821      	ldrb	r1, [r4, #0]
 8005492:	481a      	ldr	r0, [pc, #104]	; (80054fc <_svfiprintf_r+0x1d0>)
 8005494:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005498:	2206      	movs	r2, #6
 800549a:	f104 0801 	add.w	r8, r4, #1
 800549e:	f000 f9cd 	bl	800583c <memchr>
 80054a2:	b188      	cbz	r0, 80054c8 <_svfiprintf_r+0x19c>
 80054a4:	4b16      	ldr	r3, [pc, #88]	; (8005500 <_svfiprintf_r+0x1d4>)
 80054a6:	b933      	cbnz	r3, 80054b6 <_svfiprintf_r+0x18a>
 80054a8:	9b03      	ldr	r3, [sp, #12]
 80054aa:	3307      	adds	r3, #7
 80054ac:	f023 0307 	bic.w	r3, r3, #7
 80054b0:	3308      	adds	r3, #8
 80054b2:	9303      	str	r3, [sp, #12]
 80054b4:	e013      	b.n	80054de <_svfiprintf_r+0x1b2>
 80054b6:	ab03      	add	r3, sp, #12
 80054b8:	9300      	str	r3, [sp, #0]
 80054ba:	4630      	mov	r0, r6
 80054bc:	a904      	add	r1, sp, #16
 80054be:	462a      	mov	r2, r5
 80054c0:	4b10      	ldr	r3, [pc, #64]	; (8005504 <_svfiprintf_r+0x1d8>)
 80054c2:	f3af 8000 	nop.w
 80054c6:	e007      	b.n	80054d8 <_svfiprintf_r+0x1ac>
 80054c8:	ab03      	add	r3, sp, #12
 80054ca:	9300      	str	r3, [sp, #0]
 80054cc:	4630      	mov	r0, r6
 80054ce:	a904      	add	r1, sp, #16
 80054d0:	462a      	mov	r2, r5
 80054d2:	4b0c      	ldr	r3, [pc, #48]	; (8005504 <_svfiprintf_r+0x1d8>)
 80054d4:	f000 f892 	bl	80055fc <_printf_i>
 80054d8:	1c42      	adds	r2, r0, #1
 80054da:	4607      	mov	r7, r0
 80054dc:	d003      	beq.n	80054e6 <_svfiprintf_r+0x1ba>
 80054de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054e0:	443b      	add	r3, r7
 80054e2:	9309      	str	r3, [sp, #36]	; 0x24
 80054e4:	e741      	b.n	800536a <_svfiprintf_r+0x3e>
 80054e6:	89ab      	ldrh	r3, [r5, #12]
 80054e8:	065b      	lsls	r3, r3, #25
 80054ea:	d401      	bmi.n	80054f0 <_svfiprintf_r+0x1c4>
 80054ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054ee:	e001      	b.n	80054f4 <_svfiprintf_r+0x1c8>
 80054f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054f4:	b01d      	add	sp, #116	; 0x74
 80054f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80054fa:	bf00      	nop
 80054fc:	08005e8c 	.word	0x08005e8c
 8005500:	00000000 	.word	0x00000000
 8005504:	08005279 	.word	0x08005279
 8005508:	08005e82 	.word	0x08005e82
 800550c:	08005e88 	.word	0x08005e88

08005510 <_printf_common>:
 8005510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005514:	4691      	mov	r9, r2
 8005516:	461f      	mov	r7, r3
 8005518:	688a      	ldr	r2, [r1, #8]
 800551a:	690b      	ldr	r3, [r1, #16]
 800551c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005520:	4293      	cmp	r3, r2
 8005522:	bfb8      	it	lt
 8005524:	4613      	movlt	r3, r2
 8005526:	f8c9 3000 	str.w	r3, [r9]
 800552a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800552e:	4606      	mov	r6, r0
 8005530:	460c      	mov	r4, r1
 8005532:	b112      	cbz	r2, 800553a <_printf_common+0x2a>
 8005534:	3301      	adds	r3, #1
 8005536:	f8c9 3000 	str.w	r3, [r9]
 800553a:	6823      	ldr	r3, [r4, #0]
 800553c:	0699      	lsls	r1, r3, #26
 800553e:	bf42      	ittt	mi
 8005540:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005544:	3302      	addmi	r3, #2
 8005546:	f8c9 3000 	strmi.w	r3, [r9]
 800554a:	6825      	ldr	r5, [r4, #0]
 800554c:	f015 0506 	ands.w	r5, r5, #6
 8005550:	d01c      	beq.n	800558c <_printf_common+0x7c>
 8005552:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005556:	6822      	ldr	r2, [r4, #0]
 8005558:	3300      	adds	r3, #0
 800555a:	bf18      	it	ne
 800555c:	2301      	movne	r3, #1
 800555e:	0692      	lsls	r2, r2, #26
 8005560:	d51f      	bpl.n	80055a2 <_printf_common+0x92>
 8005562:	18e1      	adds	r1, r4, r3
 8005564:	1c5a      	adds	r2, r3, #1
 8005566:	2030      	movs	r0, #48	; 0x30
 8005568:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800556c:	4422      	add	r2, r4
 800556e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005572:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005576:	3302      	adds	r3, #2
 8005578:	e013      	b.n	80055a2 <_printf_common+0x92>
 800557a:	4630      	mov	r0, r6
 800557c:	4639      	mov	r1, r7
 800557e:	f104 0219 	add.w	r2, r4, #25
 8005582:	2301      	movs	r3, #1
 8005584:	47c0      	blx	r8
 8005586:	3001      	adds	r0, #1
 8005588:	d007      	beq.n	800559a <_printf_common+0x8a>
 800558a:	3501      	adds	r5, #1
 800558c:	68e3      	ldr	r3, [r4, #12]
 800558e:	f8d9 2000 	ldr.w	r2, [r9]
 8005592:	1a9b      	subs	r3, r3, r2
 8005594:	429d      	cmp	r5, r3
 8005596:	dbf0      	blt.n	800557a <_printf_common+0x6a>
 8005598:	e7db      	b.n	8005552 <_printf_common+0x42>
 800559a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800559e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055a2:	4630      	mov	r0, r6
 80055a4:	4639      	mov	r1, r7
 80055a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055aa:	47c0      	blx	r8
 80055ac:	3001      	adds	r0, #1
 80055ae:	d0f4      	beq.n	800559a <_printf_common+0x8a>
 80055b0:	6822      	ldr	r2, [r4, #0]
 80055b2:	f8d9 5000 	ldr.w	r5, [r9]
 80055b6:	68e3      	ldr	r3, [r4, #12]
 80055b8:	f002 0206 	and.w	r2, r2, #6
 80055bc:	2a04      	cmp	r2, #4
 80055be:	bf08      	it	eq
 80055c0:	1b5d      	subeq	r5, r3, r5
 80055c2:	6922      	ldr	r2, [r4, #16]
 80055c4:	68a3      	ldr	r3, [r4, #8]
 80055c6:	bf0c      	ite	eq
 80055c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055cc:	2500      	movne	r5, #0
 80055ce:	4293      	cmp	r3, r2
 80055d0:	bfc4      	itt	gt
 80055d2:	1a9b      	subgt	r3, r3, r2
 80055d4:	18ed      	addgt	r5, r5, r3
 80055d6:	f04f 0900 	mov.w	r9, #0
 80055da:	45a9      	cmp	r9, r5
 80055dc:	da0a      	bge.n	80055f4 <_printf_common+0xe4>
 80055de:	4630      	mov	r0, r6
 80055e0:	4639      	mov	r1, r7
 80055e2:	f104 021a 	add.w	r2, r4, #26
 80055e6:	2301      	movs	r3, #1
 80055e8:	47c0      	blx	r8
 80055ea:	3001      	adds	r0, #1
 80055ec:	d0d5      	beq.n	800559a <_printf_common+0x8a>
 80055ee:	f109 0901 	add.w	r9, r9, #1
 80055f2:	e7f2      	b.n	80055da <_printf_common+0xca>
 80055f4:	2000      	movs	r0, #0
 80055f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

080055fc <_printf_i>:
 80055fc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005600:	460c      	mov	r4, r1
 8005602:	4617      	mov	r7, r2
 8005604:	7e22      	ldrb	r2, [r4, #24]
 8005606:	2a6e      	cmp	r2, #110	; 0x6e
 8005608:	4698      	mov	r8, r3
 800560a:	4606      	mov	r6, r0
 800560c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800560e:	f101 0143 	add.w	r1, r1, #67	; 0x43
 8005612:	f000 80af 	beq.w	8005774 <_printf_i+0x178>
 8005616:	d812      	bhi.n	800563e <_printf_i+0x42>
 8005618:	2a63      	cmp	r2, #99	; 0x63
 800561a:	d023      	beq.n	8005664 <_printf_i+0x68>
 800561c:	d80a      	bhi.n	8005634 <_printf_i+0x38>
 800561e:	2a00      	cmp	r2, #0
 8005620:	f000 80bc 	beq.w	800579c <_printf_i+0x1a0>
 8005624:	2a58      	cmp	r2, #88	; 0x58
 8005626:	f040 80cb 	bne.w	80057c0 <_printf_i+0x1c4>
 800562a:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800562e:	f8df e204 	ldr.w	lr, [pc, #516]	; 8005834 <_printf_i+0x238>
 8005632:	e057      	b.n	80056e4 <_printf_i+0xe8>
 8005634:	2a64      	cmp	r2, #100	; 0x64
 8005636:	d01e      	beq.n	8005676 <_printf_i+0x7a>
 8005638:	2a69      	cmp	r2, #105	; 0x69
 800563a:	d01c      	beq.n	8005676 <_printf_i+0x7a>
 800563c:	e0c0      	b.n	80057c0 <_printf_i+0x1c4>
 800563e:	2a73      	cmp	r2, #115	; 0x73
 8005640:	f000 80b0 	beq.w	80057a4 <_printf_i+0x1a8>
 8005644:	d809      	bhi.n	800565a <_printf_i+0x5e>
 8005646:	2a6f      	cmp	r2, #111	; 0x6f
 8005648:	d02e      	beq.n	80056a8 <_printf_i+0xac>
 800564a:	2a70      	cmp	r2, #112	; 0x70
 800564c:	f040 80b8 	bne.w	80057c0 <_printf_i+0x1c4>
 8005650:	6822      	ldr	r2, [r4, #0]
 8005652:	f042 0220 	orr.w	r2, r2, #32
 8005656:	6022      	str	r2, [r4, #0]
 8005658:	e03f      	b.n	80056da <_printf_i+0xde>
 800565a:	2a75      	cmp	r2, #117	; 0x75
 800565c:	d024      	beq.n	80056a8 <_printf_i+0xac>
 800565e:	2a78      	cmp	r2, #120	; 0x78
 8005660:	d03b      	beq.n	80056da <_printf_i+0xde>
 8005662:	e0ad      	b.n	80057c0 <_printf_i+0x1c4>
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	1d11      	adds	r1, r2, #4
 8005668:	6019      	str	r1, [r3, #0]
 800566a:	6813      	ldr	r3, [r2, #0]
 800566c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005670:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005674:	e0a8      	b.n	80057c8 <_printf_i+0x1cc>
 8005676:	6820      	ldr	r0, [r4, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800567e:	d002      	beq.n	8005686 <_printf_i+0x8a>
 8005680:	1d10      	adds	r0, r2, #4
 8005682:	6018      	str	r0, [r3, #0]
 8005684:	e008      	b.n	8005698 <_printf_i+0x9c>
 8005686:	f010 0f40 	tst.w	r0, #64	; 0x40
 800568a:	f102 0004 	add.w	r0, r2, #4
 800568e:	6018      	str	r0, [r3, #0]
 8005690:	d002      	beq.n	8005698 <_printf_i+0x9c>
 8005692:	f9b2 3000 	ldrsh.w	r3, [r2]
 8005696:	e000      	b.n	800569a <_printf_i+0x9e>
 8005698:	6813      	ldr	r3, [r2, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	da3e      	bge.n	800571c <_printf_i+0x120>
 800569e:	222d      	movs	r2, #45	; 0x2d
 80056a0:	425b      	negs	r3, r3
 80056a2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80056a6:	e039      	b.n	800571c <_printf_i+0x120>
 80056a8:	6820      	ldr	r0, [r4, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	f010 0f80 	tst.w	r0, #128	; 0x80
 80056b0:	d002      	beq.n	80056b8 <_printf_i+0xbc>
 80056b2:	1d10      	adds	r0, r2, #4
 80056b4:	6018      	str	r0, [r3, #0]
 80056b6:	e007      	b.n	80056c8 <_printf_i+0xcc>
 80056b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80056bc:	f102 0004 	add.w	r0, r2, #4
 80056c0:	6018      	str	r0, [r3, #0]
 80056c2:	d001      	beq.n	80056c8 <_printf_i+0xcc>
 80056c4:	8813      	ldrh	r3, [r2, #0]
 80056c6:	e000      	b.n	80056ca <_printf_i+0xce>
 80056c8:	6813      	ldr	r3, [r2, #0]
 80056ca:	7e22      	ldrb	r2, [r4, #24]
 80056cc:	f8df e164 	ldr.w	lr, [pc, #356]	; 8005834 <_printf_i+0x238>
 80056d0:	2a6f      	cmp	r2, #111	; 0x6f
 80056d2:	bf0c      	ite	eq
 80056d4:	2208      	moveq	r2, #8
 80056d6:	220a      	movne	r2, #10
 80056d8:	e01c      	b.n	8005714 <_printf_i+0x118>
 80056da:	2278      	movs	r2, #120	; 0x78
 80056dc:	f8df e158 	ldr.w	lr, [pc, #344]	; 8005838 <_printf_i+0x23c>
 80056e0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80056e4:	6822      	ldr	r2, [r4, #0]
 80056e6:	6818      	ldr	r0, [r3, #0]
 80056e8:	f012 0f80 	tst.w	r2, #128	; 0x80
 80056ec:	f100 0504 	add.w	r5, r0, #4
 80056f0:	601d      	str	r5, [r3, #0]
 80056f2:	d103      	bne.n	80056fc <_printf_i+0x100>
 80056f4:	0655      	lsls	r5, r2, #25
 80056f6:	d501      	bpl.n	80056fc <_printf_i+0x100>
 80056f8:	8803      	ldrh	r3, [r0, #0]
 80056fa:	e000      	b.n	80056fe <_printf_i+0x102>
 80056fc:	6803      	ldr	r3, [r0, #0]
 80056fe:	07d0      	lsls	r0, r2, #31
 8005700:	bf44      	itt	mi
 8005702:	f042 0220 	orrmi.w	r2, r2, #32
 8005706:	6022      	strmi	r2, [r4, #0]
 8005708:	b91b      	cbnz	r3, 8005712 <_printf_i+0x116>
 800570a:	6822      	ldr	r2, [r4, #0]
 800570c:	f022 0220 	bic.w	r2, r2, #32
 8005710:	6022      	str	r2, [r4, #0]
 8005712:	2210      	movs	r2, #16
 8005714:	2000      	movs	r0, #0
 8005716:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800571a:	e002      	b.n	8005722 <_printf_i+0x126>
 800571c:	f8df e114 	ldr.w	lr, [pc, #276]	; 8005834 <_printf_i+0x238>
 8005720:	220a      	movs	r2, #10
 8005722:	6865      	ldr	r5, [r4, #4]
 8005724:	60a5      	str	r5, [r4, #8]
 8005726:	2d00      	cmp	r5, #0
 8005728:	bfa2      	ittt	ge
 800572a:	6820      	ldrge	r0, [r4, #0]
 800572c:	f020 0004 	bicge.w	r0, r0, #4
 8005730:	6020      	strge	r0, [r4, #0]
 8005732:	b903      	cbnz	r3, 8005736 <_printf_i+0x13a>
 8005734:	b165      	cbz	r5, 8005750 <_printf_i+0x154>
 8005736:	460d      	mov	r5, r1
 8005738:	fbb3 f0f2 	udiv	r0, r3, r2
 800573c:	fb02 3310 	mls	r3, r2, r0, r3
 8005740:	f81e 3003 	ldrb.w	r3, [lr, r3]
 8005744:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005748:	4603      	mov	r3, r0
 800574a:	2800      	cmp	r0, #0
 800574c:	d1f4      	bne.n	8005738 <_printf_i+0x13c>
 800574e:	e000      	b.n	8005752 <_printf_i+0x156>
 8005750:	460d      	mov	r5, r1
 8005752:	2a08      	cmp	r2, #8
 8005754:	d10b      	bne.n	800576e <_printf_i+0x172>
 8005756:	6823      	ldr	r3, [r4, #0]
 8005758:	07da      	lsls	r2, r3, #31
 800575a:	d508      	bpl.n	800576e <_printf_i+0x172>
 800575c:	6923      	ldr	r3, [r4, #16]
 800575e:	6862      	ldr	r2, [r4, #4]
 8005760:	429a      	cmp	r2, r3
 8005762:	bfde      	ittt	le
 8005764:	2330      	movle	r3, #48	; 0x30
 8005766:	f805 3c01 	strble.w	r3, [r5, #-1]
 800576a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800576e:	1b49      	subs	r1, r1, r5
 8005770:	6121      	str	r1, [r4, #16]
 8005772:	e02e      	b.n	80057d2 <_printf_i+0x1d6>
 8005774:	6825      	ldr	r5, [r4, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	6960      	ldr	r0, [r4, #20]
 800577a:	f015 0f80 	tst.w	r5, #128	; 0x80
 800577e:	d003      	beq.n	8005788 <_printf_i+0x18c>
 8005780:	1d15      	adds	r5, r2, #4
 8005782:	601d      	str	r5, [r3, #0]
 8005784:	6813      	ldr	r3, [r2, #0]
 8005786:	e008      	b.n	800579a <_printf_i+0x19e>
 8005788:	f015 0f40 	tst.w	r5, #64	; 0x40
 800578c:	f102 0504 	add.w	r5, r2, #4
 8005790:	601d      	str	r5, [r3, #0]
 8005792:	6813      	ldr	r3, [r2, #0]
 8005794:	d001      	beq.n	800579a <_printf_i+0x19e>
 8005796:	8018      	strh	r0, [r3, #0]
 8005798:	e000      	b.n	800579c <_printf_i+0x1a0>
 800579a:	6018      	str	r0, [r3, #0]
 800579c:	2300      	movs	r3, #0
 800579e:	6123      	str	r3, [r4, #16]
 80057a0:	460d      	mov	r5, r1
 80057a2:	e016      	b.n	80057d2 <_printf_i+0x1d6>
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	1d11      	adds	r1, r2, #4
 80057a8:	6019      	str	r1, [r3, #0]
 80057aa:	6815      	ldr	r5, [r2, #0]
 80057ac:	6862      	ldr	r2, [r4, #4]
 80057ae:	4628      	mov	r0, r5
 80057b0:	2100      	movs	r1, #0
 80057b2:	f000 f843 	bl	800583c <memchr>
 80057b6:	b108      	cbz	r0, 80057bc <_printf_i+0x1c0>
 80057b8:	1b40      	subs	r0, r0, r5
 80057ba:	6060      	str	r0, [r4, #4]
 80057bc:	6863      	ldr	r3, [r4, #4]
 80057be:	e004      	b.n	80057ca <_printf_i+0x1ce>
 80057c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057c4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80057c8:	2301      	movs	r3, #1
 80057ca:	6123      	str	r3, [r4, #16]
 80057cc:	2300      	movs	r3, #0
 80057ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057d2:	f8cd 8000 	str.w	r8, [sp]
 80057d6:	4630      	mov	r0, r6
 80057d8:	4621      	mov	r1, r4
 80057da:	aa03      	add	r2, sp, #12
 80057dc:	463b      	mov	r3, r7
 80057de:	f7ff fe97 	bl	8005510 <_printf_common>
 80057e2:	3001      	adds	r0, #1
 80057e4:	d102      	bne.n	80057ec <_printf_i+0x1f0>
 80057e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057ea:	e01f      	b.n	800582c <_printf_i+0x230>
 80057ec:	4630      	mov	r0, r6
 80057ee:	4639      	mov	r1, r7
 80057f0:	462a      	mov	r2, r5
 80057f2:	6923      	ldr	r3, [r4, #16]
 80057f4:	47c0      	blx	r8
 80057f6:	3001      	adds	r0, #1
 80057f8:	d0f5      	beq.n	80057e6 <_printf_i+0x1ea>
 80057fa:	6823      	ldr	r3, [r4, #0]
 80057fc:	079b      	lsls	r3, r3, #30
 80057fe:	d405      	bmi.n	800580c <_printf_i+0x210>
 8005800:	68e0      	ldr	r0, [r4, #12]
 8005802:	9b03      	ldr	r3, [sp, #12]
 8005804:	4298      	cmp	r0, r3
 8005806:	bfb8      	it	lt
 8005808:	4618      	movlt	r0, r3
 800580a:	e00f      	b.n	800582c <_printf_i+0x230>
 800580c:	2500      	movs	r5, #0
 800580e:	68e3      	ldr	r3, [r4, #12]
 8005810:	9a03      	ldr	r2, [sp, #12]
 8005812:	1a9b      	subs	r3, r3, r2
 8005814:	429d      	cmp	r5, r3
 8005816:	daf3      	bge.n	8005800 <_printf_i+0x204>
 8005818:	4630      	mov	r0, r6
 800581a:	4639      	mov	r1, r7
 800581c:	f104 0219 	add.w	r2, r4, #25
 8005820:	2301      	movs	r3, #1
 8005822:	47c0      	blx	r8
 8005824:	3001      	adds	r0, #1
 8005826:	d0de      	beq.n	80057e6 <_printf_i+0x1ea>
 8005828:	3501      	adds	r5, #1
 800582a:	e7f0      	b.n	800580e <_printf_i+0x212>
 800582c:	b004      	add	sp, #16
 800582e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005832:	bf00      	nop
 8005834:	08005e93 	.word	0x08005e93
 8005838:	08005ea4 	.word	0x08005ea4

0800583c <memchr>:
 800583c:	b510      	push	{r4, lr}
 800583e:	b2c9      	uxtb	r1, r1
 8005840:	4402      	add	r2, r0
 8005842:	4290      	cmp	r0, r2
 8005844:	4603      	mov	r3, r0
 8005846:	d006      	beq.n	8005856 <memchr+0x1a>
 8005848:	781c      	ldrb	r4, [r3, #0]
 800584a:	428c      	cmp	r4, r1
 800584c:	f100 0001 	add.w	r0, r0, #1
 8005850:	d1f7      	bne.n	8005842 <memchr+0x6>
 8005852:	4618      	mov	r0, r3
 8005854:	bd10      	pop	{r4, pc}
 8005856:	2000      	movs	r0, #0
 8005858:	bd10      	pop	{r4, pc}

0800585a <memmove>:
 800585a:	4281      	cmp	r1, r0
 800585c:	b510      	push	{r4, lr}
 800585e:	eb01 0302 	add.w	r3, r1, r2
 8005862:	d301      	bcc.n	8005868 <memmove+0xe>
 8005864:	1e42      	subs	r2, r0, #1
 8005866:	e00b      	b.n	8005880 <memmove+0x26>
 8005868:	4298      	cmp	r0, r3
 800586a:	d2fb      	bcs.n	8005864 <memmove+0xa>
 800586c:	1881      	adds	r1, r0, r2
 800586e:	1ad2      	subs	r2, r2, r3
 8005870:	42d3      	cmn	r3, r2
 8005872:	d004      	beq.n	800587e <memmove+0x24>
 8005874:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005878:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800587c:	e7f8      	b.n	8005870 <memmove+0x16>
 800587e:	bd10      	pop	{r4, pc}
 8005880:	4299      	cmp	r1, r3
 8005882:	d004      	beq.n	800588e <memmove+0x34>
 8005884:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005888:	f802 4f01 	strb.w	r4, [r2, #1]!
 800588c:	e7f8      	b.n	8005880 <memmove+0x26>
 800588e:	bd10      	pop	{r4, pc}

08005890 <_free_r>:
 8005890:	b530      	push	{r4, r5, lr}
 8005892:	2900      	cmp	r1, #0
 8005894:	d03d      	beq.n	8005912 <_free_r+0x82>
 8005896:	f851 2c04 	ldr.w	r2, [r1, #-4]
 800589a:	1f0b      	subs	r3, r1, #4
 800589c:	491d      	ldr	r1, [pc, #116]	; (8005914 <_free_r+0x84>)
 800589e:	2a00      	cmp	r2, #0
 80058a0:	bfb8      	it	lt
 80058a2:	189b      	addlt	r3, r3, r2
 80058a4:	680a      	ldr	r2, [r1, #0]
 80058a6:	460c      	mov	r4, r1
 80058a8:	b912      	cbnz	r2, 80058b0 <_free_r+0x20>
 80058aa:	605a      	str	r2, [r3, #4]
 80058ac:	600b      	str	r3, [r1, #0]
 80058ae:	bd30      	pop	{r4, r5, pc}
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d20d      	bcs.n	80058d0 <_free_r+0x40>
 80058b4:	6819      	ldr	r1, [r3, #0]
 80058b6:	1858      	adds	r0, r3, r1
 80058b8:	4290      	cmp	r0, r2
 80058ba:	bf01      	itttt	eq
 80058bc:	585a      	ldreq	r2, [r3, r1]
 80058be:	1852      	addeq	r2, r2, r1
 80058c0:	601a      	streq	r2, [r3, #0]
 80058c2:	6842      	ldreq	r2, [r0, #4]
 80058c4:	605a      	str	r2, [r3, #4]
 80058c6:	6023      	str	r3, [r4, #0]
 80058c8:	bd30      	pop	{r4, r5, pc}
 80058ca:	4299      	cmp	r1, r3
 80058cc:	d803      	bhi.n	80058d6 <_free_r+0x46>
 80058ce:	460a      	mov	r2, r1
 80058d0:	6851      	ldr	r1, [r2, #4]
 80058d2:	2900      	cmp	r1, #0
 80058d4:	d1f9      	bne.n	80058ca <_free_r+0x3a>
 80058d6:	6814      	ldr	r4, [r2, #0]
 80058d8:	1915      	adds	r5, r2, r4
 80058da:	429d      	cmp	r5, r3
 80058dc:	d10a      	bne.n	80058f4 <_free_r+0x64>
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4423      	add	r3, r4
 80058e2:	18d0      	adds	r0, r2, r3
 80058e4:	4288      	cmp	r0, r1
 80058e6:	6013      	str	r3, [r2, #0]
 80058e8:	d113      	bne.n	8005912 <_free_r+0x82>
 80058ea:	6808      	ldr	r0, [r1, #0]
 80058ec:	4403      	add	r3, r0
 80058ee:	6013      	str	r3, [r2, #0]
 80058f0:	684b      	ldr	r3, [r1, #4]
 80058f2:	e00d      	b.n	8005910 <_free_r+0x80>
 80058f4:	d902      	bls.n	80058fc <_free_r+0x6c>
 80058f6:	230c      	movs	r3, #12
 80058f8:	6003      	str	r3, [r0, #0]
 80058fa:	bd30      	pop	{r4, r5, pc}
 80058fc:	681c      	ldr	r4, [r3, #0]
 80058fe:	1918      	adds	r0, r3, r4
 8005900:	4288      	cmp	r0, r1
 8005902:	bf04      	itt	eq
 8005904:	6808      	ldreq	r0, [r1, #0]
 8005906:	6849      	ldreq	r1, [r1, #4]
 8005908:	6059      	str	r1, [r3, #4]
 800590a:	bf04      	itt	eq
 800590c:	1900      	addeq	r0, r0, r4
 800590e:	6018      	streq	r0, [r3, #0]
 8005910:	6053      	str	r3, [r2, #4]
 8005912:	bd30      	pop	{r4, r5, pc}
 8005914:	20000090 	.word	0x20000090

08005918 <_malloc_r>:
 8005918:	b570      	push	{r4, r5, r6, lr}
 800591a:	1ccc      	adds	r4, r1, #3
 800591c:	f024 0403 	bic.w	r4, r4, #3
 8005920:	3408      	adds	r4, #8
 8005922:	2c0c      	cmp	r4, #12
 8005924:	bf38      	it	cc
 8005926:	240c      	movcc	r4, #12
 8005928:	2c00      	cmp	r4, #0
 800592a:	4606      	mov	r6, r0
 800592c:	da03      	bge.n	8005936 <_malloc_r+0x1e>
 800592e:	230c      	movs	r3, #12
 8005930:	6033      	str	r3, [r6, #0]
 8005932:	2000      	movs	r0, #0
 8005934:	bd70      	pop	{r4, r5, r6, pc}
 8005936:	428c      	cmp	r4, r1
 8005938:	d3f9      	bcc.n	800592e <_malloc_r+0x16>
 800593a:	4a20      	ldr	r2, [pc, #128]	; (80059bc <_malloc_r+0xa4>)
 800593c:	6813      	ldr	r3, [r2, #0]
 800593e:	4610      	mov	r0, r2
 8005940:	4619      	mov	r1, r3
 8005942:	b1a1      	cbz	r1, 800596e <_malloc_r+0x56>
 8005944:	680a      	ldr	r2, [r1, #0]
 8005946:	1b12      	subs	r2, r2, r4
 8005948:	d40e      	bmi.n	8005968 <_malloc_r+0x50>
 800594a:	2a0b      	cmp	r2, #11
 800594c:	d903      	bls.n	8005956 <_malloc_r+0x3e>
 800594e:	600a      	str	r2, [r1, #0]
 8005950:	188b      	adds	r3, r1, r2
 8005952:	508c      	str	r4, [r1, r2]
 8005954:	e01f      	b.n	8005996 <_malloc_r+0x7e>
 8005956:	428b      	cmp	r3, r1
 8005958:	bf0d      	iteet	eq
 800595a:	685a      	ldreq	r2, [r3, #4]
 800595c:	684a      	ldrne	r2, [r1, #4]
 800595e:	605a      	strne	r2, [r3, #4]
 8005960:	6002      	streq	r2, [r0, #0]
 8005962:	bf18      	it	ne
 8005964:	460b      	movne	r3, r1
 8005966:	e016      	b.n	8005996 <_malloc_r+0x7e>
 8005968:	460b      	mov	r3, r1
 800596a:	6849      	ldr	r1, [r1, #4]
 800596c:	e7e9      	b.n	8005942 <_malloc_r+0x2a>
 800596e:	4d14      	ldr	r5, [pc, #80]	; (80059c0 <_malloc_r+0xa8>)
 8005970:	682b      	ldr	r3, [r5, #0]
 8005972:	b91b      	cbnz	r3, 800597c <_malloc_r+0x64>
 8005974:	4630      	mov	r0, r6
 8005976:	f000 f84b 	bl	8005a10 <_sbrk_r>
 800597a:	6028      	str	r0, [r5, #0]
 800597c:	4630      	mov	r0, r6
 800597e:	4621      	mov	r1, r4
 8005980:	f000 f846 	bl	8005a10 <_sbrk_r>
 8005984:	1c42      	adds	r2, r0, #1
 8005986:	4603      	mov	r3, r0
 8005988:	d0d1      	beq.n	800592e <_malloc_r+0x16>
 800598a:	1cc5      	adds	r5, r0, #3
 800598c:	f025 0503 	bic.w	r5, r5, #3
 8005990:	4285      	cmp	r5, r0
 8005992:	d10a      	bne.n	80059aa <_malloc_r+0x92>
 8005994:	601c      	str	r4, [r3, #0]
 8005996:	f103 000b 	add.w	r0, r3, #11
 800599a:	1d1a      	adds	r2, r3, #4
 800599c:	f020 0007 	bic.w	r0, r0, #7
 80059a0:	1a82      	subs	r2, r0, r2
 80059a2:	d00a      	beq.n	80059ba <_malloc_r+0xa2>
 80059a4:	4251      	negs	r1, r2
 80059a6:	5099      	str	r1, [r3, r2]
 80059a8:	bd70      	pop	{r4, r5, r6, pc}
 80059aa:	4630      	mov	r0, r6
 80059ac:	1ae9      	subs	r1, r5, r3
 80059ae:	f000 f82f 	bl	8005a10 <_sbrk_r>
 80059b2:	3001      	adds	r0, #1
 80059b4:	d0bb      	beq.n	800592e <_malloc_r+0x16>
 80059b6:	462b      	mov	r3, r5
 80059b8:	e7ec      	b.n	8005994 <_malloc_r+0x7c>
 80059ba:	bd70      	pop	{r4, r5, r6, pc}
 80059bc:	20000090 	.word	0x20000090
 80059c0:	2000008c 	.word	0x2000008c

080059c4 <_realloc_r>:
 80059c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059c6:	4607      	mov	r7, r0
 80059c8:	4615      	mov	r5, r2
 80059ca:	460e      	mov	r6, r1
 80059cc:	b921      	cbnz	r1, 80059d8 <_realloc_r+0x14>
 80059ce:	4611      	mov	r1, r2
 80059d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80059d4:	f7ff bfa0 	b.w	8005918 <_malloc_r>
 80059d8:	b91a      	cbnz	r2, 80059e2 <_realloc_r+0x1e>
 80059da:	f7ff ff59 	bl	8005890 <_free_r>
 80059de:	4628      	mov	r0, r5
 80059e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059e2:	f000 f825 	bl	8005a30 <_malloc_usable_size_r>
 80059e6:	42a8      	cmp	r0, r5
 80059e8:	d20e      	bcs.n	8005a08 <_realloc_r+0x44>
 80059ea:	4638      	mov	r0, r7
 80059ec:	4629      	mov	r1, r5
 80059ee:	f7ff ff93 	bl	8005918 <_malloc_r>
 80059f2:	4604      	mov	r4, r0
 80059f4:	b150      	cbz	r0, 8005a0c <_realloc_r+0x48>
 80059f6:	4631      	mov	r1, r6
 80059f8:	462a      	mov	r2, r5
 80059fa:	f7ff fc0d 	bl	8005218 <memcpy>
 80059fe:	4638      	mov	r0, r7
 8005a00:	4631      	mov	r1, r6
 8005a02:	f7ff ff45 	bl	8005890 <_free_r>
 8005a06:	e001      	b.n	8005a0c <_realloc_r+0x48>
 8005a08:	4630      	mov	r0, r6
 8005a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a0c:	4620      	mov	r0, r4
 8005a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005a10 <_sbrk_r>:
 8005a10:	b538      	push	{r3, r4, r5, lr}
 8005a12:	4c06      	ldr	r4, [pc, #24]	; (8005a2c <_sbrk_r+0x1c>)
 8005a14:	2300      	movs	r3, #0
 8005a16:	4605      	mov	r5, r0
 8005a18:	4608      	mov	r0, r1
 8005a1a:	6023      	str	r3, [r4, #0]
 8005a1c:	f000 f812 	bl	8005a44 <_sbrk>
 8005a20:	1c43      	adds	r3, r0, #1
 8005a22:	d102      	bne.n	8005a2a <_sbrk_r+0x1a>
 8005a24:	6823      	ldr	r3, [r4, #0]
 8005a26:	b103      	cbz	r3, 8005a2a <_sbrk_r+0x1a>
 8005a28:	602b      	str	r3, [r5, #0]
 8005a2a:	bd38      	pop	{r3, r4, r5, pc}
 8005a2c:	200001b0 	.word	0x200001b0

08005a30 <_malloc_usable_size_r>:
 8005a30:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8005a34:	2800      	cmp	r0, #0
 8005a36:	bfbe      	ittt	lt
 8005a38:	1809      	addlt	r1, r1, r0
 8005a3a:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 8005a3e:	18c0      	addlt	r0, r0, r3
 8005a40:	3804      	subs	r0, #4
 8005a42:	4770      	bx	lr

08005a44 <_sbrk>:
 8005a44:	4a04      	ldr	r2, [pc, #16]	; (8005a58 <_sbrk+0x14>)
 8005a46:	4905      	ldr	r1, [pc, #20]	; (8005a5c <_sbrk+0x18>)
 8005a48:	6813      	ldr	r3, [r2, #0]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	bf08      	it	eq
 8005a4e:	460b      	moveq	r3, r1
 8005a50:	4418      	add	r0, r3
 8005a52:	6010      	str	r0, [r2, #0]
 8005a54:	4618      	mov	r0, r3
 8005a56:	4770      	bx	lr
 8005a58:	20000094 	.word	0x20000094
 8005a5c:	200001b8 	.word	0x200001b8

08005a60 <_init>:
 8005a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a62:	bf00      	nop
 8005a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a66:	bc08      	pop	{r3}
 8005a68:	469e      	mov	lr, r3
 8005a6a:	4770      	bx	lr

08005a6c <_fini>:
 8005a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a6e:	bf00      	nop
 8005a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a72:	bc08      	pop	{r3}
 8005a74:	469e      	mov	lr, r3
 8005a76:	4770      	bx	lr
