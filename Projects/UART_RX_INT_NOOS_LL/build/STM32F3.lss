
build/STM32F3.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001fd0 	.word	0x08001fd0

080001ac <frame_dummy>:
 80001ac:	4b08      	ldr	r3, [pc, #32]	; (80001d0 <frame_dummy+0x24>)
 80001ae:	b510      	push	{r4, lr}
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4808      	ldr	r0, [pc, #32]	; (80001d4 <frame_dummy+0x28>)
 80001b4:	4908      	ldr	r1, [pc, #32]	; (80001d8 <frame_dummy+0x2c>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	4808      	ldr	r0, [pc, #32]	; (80001dc <frame_dummy+0x30>)
 80001bc:	6803      	ldr	r3, [r0, #0]
 80001be:	b903      	cbnz	r3, 80001c2 <frame_dummy+0x16>
 80001c0:	bd10      	pop	{r4, pc}
 80001c2:	4b07      	ldr	r3, [pc, #28]	; (80001e0 <frame_dummy+0x34>)
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d0fb      	beq.n	80001c0 <frame_dummy+0x14>
 80001c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80001cc:	4718      	bx	r3
 80001ce:	bf00      	nop
 80001d0:	00000000 	.word	0x00000000
 80001d4:	08001fd0 	.word	0x08001fd0
 80001d8:	20000008 	.word	0x20000008
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000

080001e4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	4603      	mov	r3, r0
 80001ec:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80001ee:	4908      	ldr	r1, [pc, #32]	; (8000210 <NVIC_EnableIRQ+0x2c>)
 80001f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f4:	095b      	lsrs	r3, r3, #5
 80001f6:	79fa      	ldrb	r2, [r7, #7]
 80001f8:	f002 021f 	and.w	r2, r2, #31
 80001fc:	2001      	movs	r0, #1
 80001fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr
 8000210:	e000e100 	.word	0xe000e100

08000214 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
 800021a:	4603      	mov	r3, r0
 800021c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800021e:	4909      	ldr	r1, [pc, #36]	; (8000244 <NVIC_DisableIRQ+0x30>)
 8000220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000224:	095b      	lsrs	r3, r3, #5
 8000226:	79fa      	ldrb	r2, [r7, #7]
 8000228:	f002 021f 	and.w	r2, r2, #31
 800022c:	2001      	movs	r0, #1
 800022e:	fa00 f202 	lsl.w	r2, r0, r2
 8000232:	3320      	adds	r3, #32
 8000234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000238:	370c      	adds	r7, #12
 800023a:	46bd      	mov	sp, r7
 800023c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	e000e100 	.word	0xe000e100

08000248 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000248:	b480      	push	{r7}
 800024a:	b083      	sub	sp, #12
 800024c:	af00      	add	r7, sp, #0
 800024e:	4603      	mov	r3, r0
 8000250:	6039      	str	r1, [r7, #0]
 8000252:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000258:	2b00      	cmp	r3, #0
 800025a:	da0b      	bge.n	8000274 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800025c:	490d      	ldr	r1, [pc, #52]	; (8000294 <NVIC_SetPriority+0x4c>)
 800025e:	79fb      	ldrb	r3, [r7, #7]
 8000260:	f003 030f 	and.w	r3, r3, #15
 8000264:	3b04      	subs	r3, #4
 8000266:	683a      	ldr	r2, [r7, #0]
 8000268:	b2d2      	uxtb	r2, r2
 800026a:	0112      	lsls	r2, r2, #4
 800026c:	b2d2      	uxtb	r2, r2
 800026e:	440b      	add	r3, r1
 8000270:	761a      	strb	r2, [r3, #24]
 8000272:	e009      	b.n	8000288 <NVIC_SetPriority+0x40>
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000274:	4908      	ldr	r1, [pc, #32]	; (8000298 <NVIC_SetPriority+0x50>)
 8000276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800027a:	683a      	ldr	r2, [r7, #0]
 800027c:	b2d2      	uxtb	r2, r2
 800027e:	0112      	lsls	r2, r2, #4
 8000280:	b2d2      	uxtb	r2, r2
 8000282:	440b      	add	r3, r1
 8000284:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 8000288:	370c      	adds	r7, #12
 800028a:	46bd      	mov	sp, r7
 800028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop
 8000294:	e000ed00 	.word	0xe000ed00
 8000298:	e000e100 	.word	0xe000e100

0800029c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800029c:	b480      	push	{r7}
 800029e:	b085      	sub	sp, #20
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80002a4:	4908      	ldr	r1, [pc, #32]	; (80002c8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002a6:	4b08      	ldr	r3, [pc, #32]	; (80002c8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002a8:	695a      	ldr	r2, [r3, #20]
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4313      	orrs	r3, r2
 80002ae:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80002b0:	4b05      	ldr	r3, [pc, #20]	; (80002c8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002b2:	695a      	ldr	r2, [r3, #20]
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	4013      	ands	r3, r2
 80002b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80002ba:	68fb      	ldr	r3, [r7, #12]
}
 80002bc:	3714      	adds	r7, #20
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	40021000 	.word	0x40021000

080002cc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b085      	sub	sp, #20
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80002d4:	4908      	ldr	r1, [pc, #32]	; (80002f8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80002d6:	4b08      	ldr	r3, [pc, #32]	; (80002f8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80002d8:	699a      	ldr	r2, [r3, #24]
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	4313      	orrs	r3, r2
 80002de:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80002e0:	4b05      	ldr	r3, [pc, #20]	; (80002f8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80002e2:	699a      	ldr	r2, [r3, #24]
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	4013      	ands	r3, r2
 80002e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80002ea:	68fb      	ldr	r3, [r7, #12]
}
 80002ec:	3714      	adds	r7, #20
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	40021000 	.word	0x40021000

080002fc <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000300:	4a04      	ldr	r2, [pc, #16]	; (8000314 <LL_RCC_HSI_Enable+0x18>)
 8000302:	4b04      	ldr	r3, [pc, #16]	; (8000314 <LL_RCC_HSI_Enable+0x18>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	f043 0301 	orr.w	r3, r3, #1
 800030a:	6013      	str	r3, [r2, #0]
}
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr
 8000314:	40021000 	.word	0x40021000

08000318 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800031c:	4b06      	ldr	r3, [pc, #24]	; (8000338 <LL_RCC_HSI_IsReady+0x20>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	f003 0302 	and.w	r3, r3, #2
 8000324:	2b00      	cmp	r3, #0
 8000326:	bf14      	ite	ne
 8000328:	2301      	movne	r3, #1
 800032a:	2300      	moveq	r3, #0
 800032c:	b2db      	uxtb	r3, r3
}
 800032e:	4618      	mov	r0, r3
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr
 8000338:	40021000 	.word	0x40021000

0800033c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000344:	4906      	ldr	r1, [pc, #24]	; (8000360 <LL_RCC_SetSysClkSource+0x24>)
 8000346:	4b06      	ldr	r3, [pc, #24]	; (8000360 <LL_RCC_SetSysClkSource+0x24>)
 8000348:	685b      	ldr	r3, [r3, #4]
 800034a:	f023 0203 	bic.w	r2, r3, #3
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	4313      	orrs	r3, r2
 8000352:	604b      	str	r3, [r1, #4]
}
 8000354:	370c      	adds	r7, #12
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	40021000 	.word	0x40021000

08000364 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000368:	4b04      	ldr	r3, [pc, #16]	; (800037c <LL_RCC_GetSysClkSource+0x18>)
 800036a:	685b      	ldr	r3, [r3, #4]
 800036c:	f003 030c 	and.w	r3, r3, #12
}
 8000370:	4618      	mov	r0, r3
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr
 800037a:	bf00      	nop
 800037c:	40021000 	.word	0x40021000

08000380 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000388:	4906      	ldr	r1, [pc, #24]	; (80003a4 <LL_RCC_SetAHBPrescaler+0x24>)
 800038a:	4b06      	ldr	r3, [pc, #24]	; (80003a4 <LL_RCC_SetAHBPrescaler+0x24>)
 800038c:	685b      	ldr	r3, [r3, #4]
 800038e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4313      	orrs	r3, r2
 8000396:	604b      	str	r3, [r1, #4]
}
 8000398:	370c      	adds	r7, #12
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	40021000 	.word	0x40021000

080003a8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80003b0:	4906      	ldr	r1, [pc, #24]	; (80003cc <LL_RCC_SetAPB1Prescaler+0x24>)
 80003b2:	4b06      	ldr	r3, [pc, #24]	; (80003cc <LL_RCC_SetAPB1Prescaler+0x24>)
 80003b4:	685b      	ldr	r3, [r3, #4]
 80003b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	4313      	orrs	r3, r2
 80003be:	604b      	str	r3, [r1, #4]
}
 80003c0:	370c      	adds	r7, #12
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	40021000 	.word	0x40021000

080003d0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80003d8:	4906      	ldr	r1, [pc, #24]	; (80003f4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80003da:	4b06      	ldr	r3, [pc, #24]	; (80003f4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80003dc:	685b      	ldr	r3, [r3, #4]
 80003de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	4313      	orrs	r3, r2
 80003e6:	604b      	str	r3, [r1, #4]
}
 80003e8:	370c      	adds	r7, #12
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	40021000 	.word	0x40021000

080003f8 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, (RCC_CFGR3_USART1SW << ((USARTxSource  & 0xFF000000U) >> 24U)), (USARTxSource & 0x00FFFFFFU));
 8000400:	4909      	ldr	r1, [pc, #36]	; (8000428 <LL_RCC_SetUSARTClockSource+0x30>)
 8000402:	4b09      	ldr	r3, [pc, #36]	; (8000428 <LL_RCC_SetUSARTClockSource+0x30>)
 8000404:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	0e1b      	lsrs	r3, r3, #24
 800040a:	4618      	mov	r0, r3
 800040c:	2303      	movs	r3, #3
 800040e:	4083      	lsls	r3, r0
 8000410:	43db      	mvns	r3, r3
 8000412:	401a      	ands	r2, r3
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800041a:	4313      	orrs	r3, r2
 800041c:	630b      	str	r3, [r1, #48]	; 0x30
}
 800041e:	370c      	adds	r7, #12
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr
 8000428:	40021000 	.word	0x40021000

0800042c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000430:	4a04      	ldr	r2, [pc, #16]	; (8000444 <LL_RCC_PLL_Enable+0x18>)
 8000432:	4b04      	ldr	r3, [pc, #16]	; (8000444 <LL_RCC_PLL_Enable+0x18>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800043a:	6013      	str	r3, [r2, #0]
}
 800043c:	46bd      	mov	sp, r7
 800043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000442:	4770      	bx	lr
 8000444:	40021000 	.word	0x40021000

08000448 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800044c:	4b06      	ldr	r3, [pc, #24]	; (8000468 <LL_RCC_PLL_IsReady+0x20>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000454:	2b00      	cmp	r3, #0
 8000456:	bf14      	ite	ne
 8000458:	2301      	movne	r3, #1
 800045a:	2300      	moveq	r3, #0
 800045c:	b2db      	uxtb	r3, r3
}
 800045e:	4618      	mov	r0, r3
 8000460:	46bd      	mov	sp, r7
 8000462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000466:	4770      	bx	lr
 8000468:	40021000 	.word	0x40021000

0800046c <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 800046c:	b480      	push	{r7}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
 8000474:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, (Source & RCC_CFGR_PLLSRC) | PLLMul);
 8000476:	480d      	ldr	r0, [pc, #52]	; (80004ac <LL_RCC_PLL_ConfigDomain_SYS+0x40>)
 8000478:	4b0c      	ldr	r3, [pc, #48]	; (80004ac <LL_RCC_PLL_ConfigDomain_SYS+0x40>)
 800047a:	685b      	ldr	r3, [r3, #4]
 800047c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8000486:	683b      	ldr	r3, [r7, #0]
 8000488:	430b      	orrs	r3, r1
 800048a:	4313      	orrs	r3, r2
 800048c:	6043      	str	r3, [r0, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (Source & RCC_CFGR2_PREDIV));
 800048e:	4907      	ldr	r1, [pc, #28]	; (80004ac <LL_RCC_PLL_ConfigDomain_SYS+0x40>)
 8000490:	4b06      	ldr	r3, [pc, #24]	; (80004ac <LL_RCC_PLL_ConfigDomain_SYS+0x40>)
 8000492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000494:	f023 020f 	bic.w	r2, r3, #15
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	f003 030f 	and.w	r3, r3, #15
 800049e:	4313      	orrs	r3, r2
 80004a0:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80004a2:	370c      	adds	r7, #12
 80004a4:	46bd      	mov	sp, r7
 80004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004aa:	4770      	bx	lr
 80004ac:	40021000 	.word	0x40021000

080004b0 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80004b0:	b490      	push	{r4, r7}
 80004b2:	b084      	sub	sp, #16
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 80004ba:	4c11      	ldr	r4, [pc, #68]	; (8000500 <LL_SYSCFG_SetEXTISource+0x50>)
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	490f      	ldr	r1, [pc, #60]	; (8000500 <LL_SYSCFG_SetEXTISource+0x50>)
 80004c2:	683a      	ldr	r2, [r7, #0]
 80004c4:	b2d2      	uxtb	r2, r2
 80004c6:	3202      	adds	r2, #2
 80004c8:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80004cc:	683a      	ldr	r2, [r7, #0]
 80004ce:	0c12      	lsrs	r2, r2, #16
 80004d0:	43d2      	mvns	r2, r2
 80004d2:	4011      	ands	r1, r2
 80004d4:	683a      	ldr	r2, [r7, #0]
 80004d6:	0c12      	lsrs	r2, r2, #16
 80004d8:	60fa      	str	r2, [r7, #12]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004da:	68fa      	ldr	r2, [r7, #12]
 80004dc:	fa92 f2a2 	rbit	r2, r2
 80004e0:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80004e2:	68ba      	ldr	r2, [r7, #8]
 80004e4:	fab2 f282 	clz	r2, r2
 80004e8:	6878      	ldr	r0, [r7, #4]
 80004ea:	fa00 f202 	lsl.w	r2, r0, r2
 80004ee:	430a      	orrs	r2, r1
 80004f0:	3302      	adds	r3, #2
 80004f2:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
}
 80004f6:	3710      	adds	r7, #16
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bc90      	pop	{r4, r7}
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	40010000 	.word	0x40010000

08000504 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800050c:	4906      	ldr	r1, [pc, #24]	; (8000528 <LL_FLASH_SetLatency+0x24>)
 800050e:	4b06      	ldr	r3, [pc, #24]	; (8000528 <LL_FLASH_SetLatency+0x24>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	f023 0207 	bic.w	r2, r3, #7
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	4313      	orrs	r3, r2
 800051a:	600b      	str	r3, [r1, #0]
}
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	40022000 	.word	0x40022000

0800052c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800052c:	b480      	push	{r7}
 800052e:	b089      	sub	sp, #36	; 0x24
 8000530:	af00      	add	r7, sp, #0
 8000532:	60f8      	str	r0, [r7, #12]
 8000534:	60b9      	str	r1, [r7, #8]
 8000536:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	68bb      	ldr	r3, [r7, #8]
 800053e:	61fb      	str	r3, [r7, #28]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000540:	69fb      	ldr	r3, [r7, #28]
 8000542:	fa93 f3a3 	rbit	r3, r3
 8000546:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000548:	69bb      	ldr	r3, [r7, #24]
 800054a:	fab3 f383 	clz	r3, r3
 800054e:	005b      	lsls	r3, r3, #1
 8000550:	4619      	mov	r1, r3
 8000552:	2303      	movs	r3, #3
 8000554:	408b      	lsls	r3, r1
 8000556:	43db      	mvns	r3, r3
 8000558:	401a      	ands	r2, r3
 800055a:	68bb      	ldr	r3, [r7, #8]
 800055c:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800055e:	697b      	ldr	r3, [r7, #20]
 8000560:	fa93 f3a3 	rbit	r3, r3
 8000564:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000566:	693b      	ldr	r3, [r7, #16]
 8000568:	fab3 f383 	clz	r3, r3
 800056c:	005b      	lsls	r3, r3, #1
 800056e:	4619      	mov	r1, r3
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	408b      	lsls	r3, r1
 8000574:	431a      	orrs	r2, r3
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	601a      	str	r2, [r3, #0]
}
 800057a:	3724      	adds	r7, #36	; 0x24
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr

08000584 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	685a      	ldr	r2, [r3, #4]
 8000594:	68bb      	ldr	r3, [r7, #8]
 8000596:	43db      	mvns	r3, r3
 8000598:	401a      	ands	r2, r3
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	6879      	ldr	r1, [r7, #4]
 800059e:	fb01 f303 	mul.w	r3, r1, r3
 80005a2:	431a      	orrs	r2, r3
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	605a      	str	r2, [r3, #4]
}
 80005a8:	3714      	adds	r7, #20
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b089      	sub	sp, #36	; 0x24
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	689a      	ldr	r2, [r3, #8]
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	61fb      	str	r3, [r7, #28]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005c8:	69fb      	ldr	r3, [r7, #28]
 80005ca:	fa93 f3a3 	rbit	r3, r3
 80005ce:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80005d0:	69bb      	ldr	r3, [r7, #24]
 80005d2:	fab3 f383 	clz	r3, r3
 80005d6:	005b      	lsls	r3, r3, #1
 80005d8:	4619      	mov	r1, r3
 80005da:	2303      	movs	r3, #3
 80005dc:	408b      	lsls	r3, r1
 80005de:	43db      	mvns	r3, r3
 80005e0:	401a      	ands	r2, r3
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	fa93 f3a3 	rbit	r3, r3
 80005ec:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80005ee:	693b      	ldr	r3, [r7, #16]
 80005f0:	fab3 f383 	clz	r3, r3
 80005f4:	005b      	lsls	r3, r3, #1
 80005f6:	4619      	mov	r1, r3
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	408b      	lsls	r3, r1
 80005fc:	431a      	orrs	r2, r3
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8000602:	3724      	adds	r7, #36	; 0x24
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr

0800060c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800060c:	b480      	push	{r7}
 800060e:	b089      	sub	sp, #36	; 0x24
 8000610:	af00      	add	r7, sp, #0
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	68da      	ldr	r2, [r3, #12]
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	61fb      	str	r3, [r7, #28]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000620:	69fb      	ldr	r3, [r7, #28]
 8000622:	fa93 f3a3 	rbit	r3, r3
 8000626:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000628:	69bb      	ldr	r3, [r7, #24]
 800062a:	fab3 f383 	clz	r3, r3
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	4619      	mov	r1, r3
 8000632:	2303      	movs	r3, #3
 8000634:	408b      	lsls	r3, r1
 8000636:	43db      	mvns	r3, r3
 8000638:	401a      	ands	r2, r3
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	fa93 f3a3 	rbit	r3, r3
 8000644:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000646:	693b      	ldr	r3, [r7, #16]
 8000648:	fab3 f383 	clz	r3, r3
 800064c:	005b      	lsls	r3, r3, #1
 800064e:	4619      	mov	r1, r3
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	408b      	lsls	r3, r1
 8000654:	431a      	orrs	r2, r3
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	60da      	str	r2, [r3, #12]
}
 800065a:	3724      	adds	r7, #36	; 0x24
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr

08000664 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000664:	b480      	push	{r7}
 8000666:	b089      	sub	sp, #36	; 0x24
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	6a1a      	ldr	r2, [r3, #32]
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	61fb      	str	r3, [r7, #28]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000678:	69fb      	ldr	r3, [r7, #28]
 800067a:	fa93 f3a3 	rbit	r3, r3
 800067e:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000680:	69bb      	ldr	r3, [r7, #24]
 8000682:	fab3 f383 	clz	r3, r3
 8000686:	009b      	lsls	r3, r3, #2
 8000688:	4619      	mov	r1, r3
 800068a:	230f      	movs	r3, #15
 800068c:	408b      	lsls	r3, r1
 800068e:	43db      	mvns	r3, r3
 8000690:	401a      	ands	r2, r3
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	fa93 f3a3 	rbit	r3, r3
 800069c:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800069e:	693b      	ldr	r3, [r7, #16]
 80006a0:	fab3 f383 	clz	r3, r3
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	4619      	mov	r1, r3
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	408b      	lsls	r3, r1
 80006ac:	431a      	orrs	r2, r3
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80006b2:	3724      	adds	r7, #36	; 0x24
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	683a      	ldr	r2, [r7, #0]
 80006ca:	619a      	str	r2, [r3, #24]
}
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop

080006d8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	683a      	ldr	r2, [r7, #0]
 80006e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop

080006f4 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->ODR, READ_REG(GPIOx->ODR) ^ PinMask);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	695a      	ldr	r2, [r3, #20]
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	405a      	eors	r2, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	615a      	str	r2, [r3, #20]
}
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr

08000714 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 800071c:	4905      	ldr	r1, [pc, #20]	; (8000734 <LL_EXTI_EnableIT_0_31+0x20>)
 800071e:	4b05      	ldr	r3, [pc, #20]	; (8000734 <LL_EXTI_EnableIT_0_31+0x20>)
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4313      	orrs	r3, r2
 8000726:	600b      	str	r3, [r1, #0]
}
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	40010400 	.word	0x40010400

08000738 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8000740:	4905      	ldr	r1, [pc, #20]	; (8000758 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000742:	4b05      	ldr	r3, [pc, #20]	; (8000758 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000744:	68da      	ldr	r2, [r3, #12]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4313      	orrs	r3, r2
 800074a:	60cb      	str	r3, [r1, #12]
}
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	40010400 	.word	0x40010400

0800075c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f043 0201 	orr.w	r2, r3, #1
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	601a      	str	r2, [r3, #0]
}
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop

0800077c <LL_USART_SetTransferDirection>:
  *         @arg @ref LL_USART_DIRECTION_TX
  *         @arg @ref LL_USART_DIRECTION_TX_RX
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTransferDirection(USART_TypeDef *USARTx, uint32_t TransferDirection)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f023 020c 	bic.w	r2, r3, #12
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	431a      	orrs	r2, r3
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	601a      	str	r2, [r3, #0]
}
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr

080007a0 <LL_USART_ConfigCharacter>:
  *         (*) Values not available on all devices
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigCharacter(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t Parity,
                                              uint32_t StopBits)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	607a      	str	r2, [r7, #4]
 80007ac:	603b      	str	r3, [r7, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80007b6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80007ba:	6879      	ldr	r1, [r7, #4]
 80007bc:	68ba      	ldr	r2, [r7, #8]
 80007be:	430a      	orrs	r2, r1
 80007c0:	431a      	orrs	r2, r3
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	685b      	ldr	r3, [r3, #4]
 80007ca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	431a      	orrs	r2, r3
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	605a      	str	r2, [r3, #4]
}
 80007d6:	3714      	adds	r7, #20
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 80007e0:	b4b0      	push	{r4, r5, r7}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	60f8      	str	r0, [r7, #12]
 80007e8:	60b9      	str	r1, [r7, #8]
 80007ea:	607a      	str	r2, [r7, #4]
 80007ec:	603b      	str	r3, [r7, #0]
  register uint32_t usartdiv = 0x0U;
 80007ee:	2500      	movs	r5, #0
  register uint32_t brrtemp = 0x0U;
 80007f0:	2400      	movs	r4, #0

  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80007f8:	d114      	bne.n	8000824 <LL_USART_SetBaudRate+0x44>
  {
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	005a      	lsls	r2, r3, #1
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	441a      	add	r2, r3
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	fbb2 f3f3 	udiv	r3, r2, r3
 800080a:	b29b      	uxth	r3, r3
 800080c:	461d      	mov	r5, r3
    brrtemp = usartdiv & 0xFFF0U;
 800080e:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8000812:	402c      	ands	r4, r5
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000814:	f005 030f 	and.w	r3, r5, #15
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	b29b      	uxth	r3, r3
 800081c:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	60dc      	str	r4, [r3, #12]
 8000822:	e00a      	b.n	800083a <LL_USART_SetBaudRate+0x5a>
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	085a      	lsrs	r2, r3, #1
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	441a      	add	r2, r3
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000832:	b29b      	uxth	r3, r3
 8000834:	461a      	mov	r2, r3
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	60da      	str	r2, [r3, #12]
  }
}
 800083a:	3714      	adds	r7, #20
 800083c:	46bd      	mov	sp, r7
 800083e:	bcb0      	pop	{r4, r5, r7}
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop

08000844 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK));
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	69db      	ldr	r3, [r3, #28]
 8000850:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000854:	2b00      	cmp	r3, #0
 8000856:	bf14      	ite	ne
 8000858:	2301      	movne	r3, #1
 800085a:	2300      	moveq	r3, #0
 800085c:	b2db      	uxtb	r3, r3
}
 800085e:	4618      	mov	r0, r3
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop

0800086c <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK));
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	69db      	ldr	r3, [r3, #28]
 8000878:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800087c:	2b00      	cmp	r3, #0
 800087e:	bf14      	ite	ne
 8000880:	2301      	movne	r3, #1
 8000882:	2300      	moveq	r3, #0
 8000884:	b2db      	uxtb	r3, r3
}
 8000886:	4618      	mov	r0, r3
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop

08000894 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f043 0220 	orr.w	r2, r3, #32
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	601a      	str	r2, [r3, #0]
}
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop

080008b4 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	689b      	ldr	r3, [r3, #8]
 80008c0:	f043 0201 	orr.w	r2, r3, #1
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	609a      	str	r2, [r3, #8]
}
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop

080008d4 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80008e0:	b29b      	uxth	r3, r3
 80008e2:	b2db      	uxtb	r3, r3
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	370c      	adds	r7, #12
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	460b      	mov	r3, r1
 80008fa:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 80008fc:	78fb      	ldrb	r3, [r7, #3]
 80008fe:	b29a      	uxth	r2, r3
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop

08000910 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* Configure the system clock to 64 MHz */
  SystemClock_Config();
 8000914:	f000 f8e8 	bl	8000ae8 <SystemClock_Config>

  /* Initialize LED2 */
  LED_Init();
 8000918:	f000 f884 	bl	8000a24 <LED_Init>

  /* Set LED2 Off */
  LED_Off();
 800091c:	f000 f89c 	bl	8000a58 <LED_Off>

  /* Initialize button in EXTI mode */
  UserButton_Init();
 8000920:	f000 f8b4 	bl	8000a8c <UserButton_Init>

  /* Configure USARTx (USART IP configuration and related GPIO initialization) */
  Configure_USART();
 8000924:	f000 f806 	bl	8000934 <Configure_USART>

  SEGGER_SYSVIEW_Conf();
 8000928:	f001 fae0 	bl	8001eec <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start(); // start SystemView
 800092c:	f000 ffc8 	bl	80018c0 <SEGGER_SYSVIEW_Start>


  /* Infinite loop */
  while (1)
  {
  }
 8000930:	e7fe      	b.n	8000930 <main+0x20>
 8000932:	bf00      	nop

08000934 <Configure_USART>:
  *         commented examples - setting is default configuration from reset.
  * @param  None
  * @retval None
  */
void Configure_USART(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0

  /* (1) Enable GPIO clock and configures the USART pins *********************/

  /* Enable the peripheral clock of GPIO Port */
  USARTx_GPIO_CLK_ENABLE();
 8000938:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800093c:	f7ff fcae 	bl	800029c <LL_AHB1_GRP1_EnableClock>

  /* Configure Tx Pin as : Alternate function, High Speed, Push pull, Pull up */
  LL_GPIO_SetPinMode(USARTx_TX_GPIO_PORT, USARTx_TX_PIN, LL_GPIO_MODE_ALTERNATE);
 8000940:	4835      	ldr	r0, [pc, #212]	; (8000a18 <Configure_USART+0xe4>)
 8000942:	2110      	movs	r1, #16
 8000944:	2202      	movs	r2, #2
 8000946:	f7ff fdf1 	bl	800052c <LL_GPIO_SetPinMode>
  USARTx_SET_TX_GPIO_AF();
 800094a:	4833      	ldr	r0, [pc, #204]	; (8000a18 <Configure_USART+0xe4>)
 800094c:	2110      	movs	r1, #16
 800094e:	2207      	movs	r2, #7
 8000950:	f7ff fe88 	bl	8000664 <LL_GPIO_SetAFPin_0_7>
  LL_GPIO_SetPinSpeed(USARTx_TX_GPIO_PORT, USARTx_TX_PIN, LL_GPIO_SPEED_FREQ_HIGH);
 8000954:	4830      	ldr	r0, [pc, #192]	; (8000a18 <Configure_USART+0xe4>)
 8000956:	2110      	movs	r1, #16
 8000958:	2203      	movs	r2, #3
 800095a:	f7ff fe2b 	bl	80005b4 <LL_GPIO_SetPinSpeed>
  LL_GPIO_SetPinOutputType(USARTx_TX_GPIO_PORT, USARTx_TX_PIN, LL_GPIO_OUTPUT_PUSHPULL);
 800095e:	482e      	ldr	r0, [pc, #184]	; (8000a18 <Configure_USART+0xe4>)
 8000960:	2110      	movs	r1, #16
 8000962:	2200      	movs	r2, #0
 8000964:	f7ff fe0e 	bl	8000584 <LL_GPIO_SetPinOutputType>
  LL_GPIO_SetPinPull(USARTx_TX_GPIO_PORT, USARTx_TX_PIN, LL_GPIO_PULL_UP);
 8000968:	482b      	ldr	r0, [pc, #172]	; (8000a18 <Configure_USART+0xe4>)
 800096a:	2110      	movs	r1, #16
 800096c:	2201      	movs	r2, #1
 800096e:	f7ff fe4d 	bl	800060c <LL_GPIO_SetPinPull>

  /* Configure Rx Pin as : Alternate function, High Speed, Push pull, Pull up */
  LL_GPIO_SetPinMode(USARTx_RX_GPIO_PORT, USARTx_RX_PIN, LL_GPIO_MODE_ALTERNATE);
 8000972:	4829      	ldr	r0, [pc, #164]	; (8000a18 <Configure_USART+0xe4>)
 8000974:	2120      	movs	r1, #32
 8000976:	2202      	movs	r2, #2
 8000978:	f7ff fdd8 	bl	800052c <LL_GPIO_SetPinMode>
  USARTx_SET_RX_GPIO_AF();
 800097c:	4826      	ldr	r0, [pc, #152]	; (8000a18 <Configure_USART+0xe4>)
 800097e:	2120      	movs	r1, #32
 8000980:	2207      	movs	r2, #7
 8000982:	f7ff fe6f 	bl	8000664 <LL_GPIO_SetAFPin_0_7>
  LL_GPIO_SetPinSpeed(USARTx_RX_GPIO_PORT, USARTx_RX_PIN, LL_GPIO_SPEED_FREQ_HIGH);
 8000986:	4824      	ldr	r0, [pc, #144]	; (8000a18 <Configure_USART+0xe4>)
 8000988:	2120      	movs	r1, #32
 800098a:	2203      	movs	r2, #3
 800098c:	f7ff fe12 	bl	80005b4 <LL_GPIO_SetPinSpeed>
  LL_GPIO_SetPinOutputType(USARTx_RX_GPIO_PORT, USARTx_RX_PIN, LL_GPIO_OUTPUT_PUSHPULL);
 8000990:	4821      	ldr	r0, [pc, #132]	; (8000a18 <Configure_USART+0xe4>)
 8000992:	2120      	movs	r1, #32
 8000994:	2200      	movs	r2, #0
 8000996:	f7ff fdf5 	bl	8000584 <LL_GPIO_SetPinOutputType>
  LL_GPIO_SetPinPull(USARTx_RX_GPIO_PORT, USARTx_RX_PIN, LL_GPIO_PULL_UP);
 800099a:	481f      	ldr	r0, [pc, #124]	; (8000a18 <Configure_USART+0xe4>)
 800099c:	2120      	movs	r1, #32
 800099e:	2201      	movs	r2, #1
 80009a0:	f7ff fe34 	bl	800060c <LL_GPIO_SetPinPull>

  /* (2) NVIC Configuration for USART interrupts */
  /*  - Set priority for USARTx_IRQn */
  /*  - Enable USARTx_IRQn */
  NVIC_SetPriority(USARTx_IRQn, 0);
 80009a4:	2025      	movs	r0, #37	; 0x25
 80009a6:	2100      	movs	r1, #0
 80009a8:	f7ff fc4e 	bl	8000248 <NVIC_SetPriority>
  NVIC_EnableIRQ(USARTx_IRQn);
 80009ac:	2025      	movs	r0, #37	; 0x25
 80009ae:	f7ff fc19 	bl	80001e4 <NVIC_EnableIRQ>

  /* (3) Enable USART peripheral clock and clock source ***********************/
  USARTx_CLK_ENABLE();
 80009b2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80009b6:	f7ff fc89 	bl	80002cc <LL_APB2_GRP1_EnableClock>

#if (USE_VCP_CONNECTION == 0)
  /* Set clock source */
  USARTx_CLK_SOURCE();
 80009ba:	2000      	movs	r0, #0
 80009bc:	f7ff fd1c 	bl	80003f8 <LL_RCC_SetUSARTClockSource>
  /* Disable USART prior modifying configuration registers */
  /* Note: Commented as corresponding to Reset value */
  // LL_USART_Disable(USARTx_INSTANCE);

  /* TX/RX direction */
  LL_USART_SetTransferDirection(USARTx_INSTANCE, LL_USART_DIRECTION_TX_RX);
 80009c0:	4816      	ldr	r0, [pc, #88]	; (8000a1c <Configure_USART+0xe8>)
 80009c2:	210c      	movs	r1, #12
 80009c4:	f7ff feda 	bl	800077c <LL_USART_SetTransferDirection>

  /* 8 data bit, 1 start bit, 1 stop bit, no parity */
  LL_USART_ConfigCharacter(USARTx_INSTANCE, LL_USART_DATAWIDTH_8B, LL_USART_PARITY_NONE, LL_USART_STOPBITS_1);
 80009c8:	4814      	ldr	r0, [pc, #80]	; (8000a1c <Configure_USART+0xe8>)
 80009ca:	2100      	movs	r1, #0
 80009cc:	2200      	movs	r2, #0
 80009ce:	2300      	movs	r3, #0
 80009d0:	f7ff fee6 	bl	80007a0 <LL_USART_ConfigCharacter>
  /* Ex :
      Periphclk = LL_RCC_GetUSARTClockFreq(Instance); or LL_RCC_GetUARTClockFreq(Instance); depending on USART/UART instance

      In this example, Peripheral Clock is expected to be equal to 32000000 Hz => equal to SystemCoreClock/2
  */
  LL_USART_SetBaudRate(USARTx_INSTANCE, SystemCoreClock/2, LL_USART_OVERSAMPLING_16, 9600);
 80009d4:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <Configure_USART+0xec>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	085b      	lsrs	r3, r3, #1
 80009da:	4810      	ldr	r0, [pc, #64]	; (8000a1c <Configure_USART+0xe8>)
 80009dc:	4619      	mov	r1, r3
 80009de:	2200      	movs	r2, #0
 80009e0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80009e4:	f7ff fefc 	bl	80007e0 <LL_USART_SetBaudRate>

  /* (5) Enable USART *********************************************************/
  LL_USART_Enable(USARTx_INSTANCE);
 80009e8:	480c      	ldr	r0, [pc, #48]	; (8000a1c <Configure_USART+0xe8>)
 80009ea:	f7ff feb7 	bl	800075c <LL_USART_Enable>

  /* Polling USART initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USARTx_INSTANCE))) || (!(LL_USART_IsActiveFlag_REACK(USARTx_INSTANCE))))
 80009ee:	bf00      	nop
 80009f0:	480a      	ldr	r0, [pc, #40]	; (8000a1c <Configure_USART+0xe8>)
 80009f2:	f7ff ff27 	bl	8000844 <LL_USART_IsActiveFlag_TEACK>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d0f9      	beq.n	80009f0 <Configure_USART+0xbc>
 80009fc:	4807      	ldr	r0, [pc, #28]	; (8000a1c <Configure_USART+0xe8>)
 80009fe:	f7ff ff35 	bl	800086c <LL_USART_IsActiveFlag_REACK>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d0f3      	beq.n	80009f0 <Configure_USART+0xbc>
  {
  }

  /* Enable RXNE and Error interrupts */
  LL_USART_EnableIT_RXNE(USARTx_INSTANCE);
 8000a08:	4804      	ldr	r0, [pc, #16]	; (8000a1c <Configure_USART+0xe8>)
 8000a0a:	f7ff ff43 	bl	8000894 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_ERROR(USARTx_INSTANCE);
 8000a0e:	4803      	ldr	r0, [pc, #12]	; (8000a1c <Configure_USART+0xe8>)
 8000a10:	f7ff ff50 	bl	80008b4 <LL_USART_EnableIT_ERROR>
}
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	48000800 	.word	0x48000800
 8000a1c:	40013800 	.word	0x40013800
 8000a20:	20000000 	.word	0x20000000

08000a24 <LED_Init>:
  * @brief  Initialize LED2.
  * @param  None
  * @retval None
  */
void LED_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* Enable the LED2 Clock */
  LED2_GPIO_CLK_ENABLE();
 8000a28:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000a2c:	f7ff fc36 	bl	800029c <LL_AHB1_GRP1_EnableClock>

  /* Configure IO in output push-pull mode to drive external LED2 */
  LL_GPIO_SetPinMode(LED2_GPIO_PORT, LED2_PIN, LL_GPIO_MODE_OUTPUT);
 8000a30:	4803      	ldr	r0, [pc, #12]	; (8000a40 <LED_Init+0x1c>)
 8000a32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a36:	2201      	movs	r2, #1
 8000a38:	f7ff fd78 	bl	800052c <LL_GPIO_SetPinMode>
  //LL_GPIO_SetPinOutputType(LED2_GPIO_PORT, LED2_PIN, LL_GPIO_OUTPUT_PUSHPULL);
  /* Reset value is LL_GPIO_SPEED_FREQ_LOW */
  //LL_GPIO_SetPinSpeed(LED2_GPIO_PORT, LED2_PIN, LL_GPIO_SPEED_FREQ_LOW);
  /* Reset value is LL_GPIO_PULL_NO */
  //LL_GPIO_SetPinPull(LED2_GPIO_PORT, LED2_PIN, LL_GPIO_PULL_NO);
}
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	48000400 	.word	0x48000400

08000a44 <LED_On>:
  * @brief  Turn-on LED2.
  * @param  None
  * @retval None
  */
void LED_On(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* Turn LED2 on */
  LL_GPIO_SetOutputPin(LED2_GPIO_PORT, LED2_PIN);
 8000a48:	4802      	ldr	r0, [pc, #8]	; (8000a54 <LED_On+0x10>)
 8000a4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a4e:	f7ff fe35 	bl	80006bc <LL_GPIO_SetOutputPin>
}
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	48000400 	.word	0x48000400

08000a58 <LED_Off>:
  * @brief  Turn-off LED2.
  * @param  None
  * @retval None
  */
void LED_Off(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* Turn LED2 off */
  LL_GPIO_ResetOutputPin(LED2_GPIO_PORT, LED2_PIN);
 8000a5c:	4802      	ldr	r0, [pc, #8]	; (8000a68 <LED_Off+0x10>)
 8000a5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a62:	f7ff fe39 	bl	80006d8 <LL_GPIO_ResetOutputPin>
}
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	48000400 	.word	0x48000400

08000a6c <LED_Blinking>:
  *     @arg LED_BLINK_SLOW : Slow Blinking
  *     @arg LED_BLINK_ERROR : Error specific Blinking
  * @retval None
  */
void LED_Blinking(uint32_t Period)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  /* Toggle LED2 in an infinite loop */
  while (1)
  {
    LL_GPIO_TogglePin(LED2_GPIO_PORT, LED2_PIN);
 8000a74:	4804      	ldr	r0, [pc, #16]	; (8000a88 <LED_Blinking+0x1c>)
 8000a76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a7a:	f7ff fe3b 	bl	80006f4 <LL_GPIO_TogglePin>
    LL_mDelay(Period);
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f000 f9c0 	bl	8000e04 <LL_mDelay>
  }
 8000a84:	e7f6      	b.n	8000a74 <LED_Blinking+0x8>
 8000a86:	bf00      	nop
 8000a88:	48000400 	.word	0x48000400

08000a8c <UserButton_Init>:
  * @brief  Configures User push-button in GPIO or EXTI Line Mode.
  * @param  None
  * @retval None
  */
void UserButton_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8000a90:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000a94:	f7ff fc02 	bl	800029c <LL_AHB1_GRP1_EnableClock>

  /* Configure GPIO for BUTTON */
  LL_GPIO_SetPinMode(USER_BUTTON_GPIO_PORT, USER_BUTTON_PIN, LL_GPIO_MODE_INPUT);
 8000a98:	4811      	ldr	r0, [pc, #68]	; (8000ae0 <UserButton_Init+0x54>)
 8000a9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f7ff fd44 	bl	800052c <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinPull(USER_BUTTON_GPIO_PORT, USER_BUTTON_PIN, LL_GPIO_PULL_NO);
 8000aa4:	480e      	ldr	r0, [pc, #56]	; (8000ae0 <UserButton_Init+0x54>)
 8000aa6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f7ff fdae 	bl	800060c <LL_GPIO_SetPinPull>

  /* Connect External Line to the GPIO*/
  USER_BUTTON_SYSCFG_SET_EXTI();
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	f7ff fc0b 	bl	80002cc <LL_APB2_GRP1_EnableClock>
 8000ab6:	2002      	movs	r0, #2
 8000ab8:	490a      	ldr	r1, [pc, #40]	; (8000ae4 <UserButton_Init+0x58>)
 8000aba:	f7ff fcf9 	bl	80004b0 <LL_SYSCFG_SetEXTISource>

  /* Enable a rising trigger EXTI_Line15_10 Interrupt */
  USER_BUTTON_EXTI_LINE_ENABLE();
 8000abe:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ac2:	f7ff fe27 	bl	8000714 <LL_EXTI_EnableIT_0_31>
  USER_BUTTON_EXTI_FALLING_TRIG_ENABLE();
 8000ac6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000aca:	f7ff fe35 	bl	8000738 <LL_EXTI_EnableFallingTrig_0_31>

  /* Configure NVIC for USER_BUTTON_EXTI_IRQn */
  NVIC_SetPriority(USER_BUTTON_EXTI_IRQn, 3);
 8000ace:	2028      	movs	r0, #40	; 0x28
 8000ad0:	2103      	movs	r1, #3
 8000ad2:	f7ff fbb9 	bl	8000248 <NVIC_SetPriority>
  NVIC_EnableIRQ(USER_BUTTON_EXTI_IRQn);
 8000ad6:	2028      	movs	r0, #40	; 0x28
 8000ad8:	f7ff fb84 	bl	80001e4 <NVIC_EnableIRQ>
}
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	48000800 	.word	0x48000800
 8000ae4:	00f00003 	.word	0x00f00003

08000ae8 <SystemClock_Config>:
  *            Flash Latency(WS)              = 2
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* Set FLASH latency */
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000aec:	2002      	movs	r0, #2
 8000aee:	f7ff fd09 	bl	8000504 <LL_FLASH_SetLatency>

  /* Enable HSI if not already activated*/
  if (LL_RCC_HSI_IsReady() == 0)
 8000af2:	f7ff fc11 	bl	8000318 <LL_RCC_HSI_IsReady>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d107      	bne.n	8000b0c <SystemClock_Config+0x24>
  {
    /* Enable HSI and wait for activation*/
    LL_RCC_HSI_Enable();
 8000afc:	f7ff fbfe 	bl	80002fc <LL_RCC_HSI_Enable>
    while(LL_RCC_HSI_IsReady() != 1)
 8000b00:	bf00      	nop
 8000b02:	f7ff fc09 	bl	8000318 <LL_RCC_HSI_IsReady>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d1fa      	bne.n	8000b02 <SystemClock_Config+0x1a>
    {
    };
  }

  /* Main PLL configuration and activation */
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI_DIV_2, LL_RCC_PLL_MUL_16);
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	f44f 1160 	mov.w	r1, #3670016	; 0x380000
 8000b12:	f7ff fcab 	bl	800046c <LL_RCC_PLL_ConfigDomain_SYS>

  LL_RCC_PLL_Enable();
 8000b16:	f7ff fc89 	bl	800042c <LL_RCC_PLL_Enable>
  while(LL_RCC_PLL_IsReady() != 1)
 8000b1a:	bf00      	nop
 8000b1c:	f7ff fc94 	bl	8000448 <LL_RCC_PLL_IsReady>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d1fa      	bne.n	8000b1c <SystemClock_Config+0x34>
  {
  };

  /* Sysclk activation on the main PLL */
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000b26:	2000      	movs	r0, #0
 8000b28:	f7ff fc2a 	bl	8000380 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000b2c:	2002      	movs	r0, #2
 8000b2e:	f7ff fc05 	bl	800033c <LL_RCC_SetSysClkSource>
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000b32:	bf00      	nop
 8000b34:	f7ff fc16 	bl	8000364 <LL_RCC_GetSysClkSource>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b08      	cmp	r3, #8
 8000b3c:	d1fa      	bne.n	8000b34 <SystemClock_Config+0x4c>
  {
  };

  /* Set APB1 & APB2 prescaler*/
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8000b3e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000b42:	f7ff fc31 	bl	80003a8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000b46:	2000      	movs	r0, #0
 8000b48:	f7ff fc42 	bl	80003d0 <LL_RCC_SetAPB2Prescaler>

  /* Set systick to 1ms in using frequency set to 64MHz */
  /* This frequency can be calculated through LL RCC macro */
  /* ex: __LL_RCC_CALC_PLLCLK_FREQ ((HSI_VALUE / 2), LL_RCC_PLL_MUL_16) */
  LL_Init1msTick(64000000);
 8000b4c:	4803      	ldr	r0, [pc, #12]	; (8000b5c <SystemClock_Config+0x74>)
 8000b4e:	f000 f94d 	bl	8000dec <LL_Init1msTick>

  /* Update CMSIS variable (which can be updated also through SystemCoreClockUpdate function) */
  LL_SetSystemCoreClock(64000000);
 8000b52:	4802      	ldr	r0, [pc, #8]	; (8000b5c <SystemClock_Config+0x74>)
 8000b54:	f000 f97a 	bl	8000e4c <LL_SetSystemCoreClock>
}
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	03d09000 	.word	0x03d09000

08000b60 <UserButton_Callback>:
  * @brief  Function to manage Button push
  * @param  None
  * @retval None
  */
void UserButton_Callback(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* Turn LED2 Off on User button press (allow to restart sequence) */
  LED_Off();
 8000b64:	f7ff ff78 	bl	8000a58 <LED_Off>
}
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop

08000b6c <USART_CharReception_Callback>:
  *         Function is in charge of reading character received on USART RX line.
  * @param  None
  * @retval None
  */
void USART_CharReception_Callback(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
__IO uint32_t received_char;

  /* Read Received character. RXNE flag is cleared by reading of RDR register */
  received_char = LL_USART_ReceiveData8(USARTx_INSTANCE);
 8000b72:	480c      	ldr	r0, [pc, #48]	; (8000ba4 <USART_CharReception_Callback+0x38>)
 8000b74:	f7ff feae 	bl	80008d4 <LL_USART_ReceiveData8>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	607b      	str	r3, [r7, #4]

  /* Check if received value is corresponding to specific one : S or s */
  if ((received_char == 'S') || (received_char == 's'))
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2b53      	cmp	r3, #83	; 0x53
 8000b80:	d002      	beq.n	8000b88 <USART_CharReception_Callback+0x1c>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2b73      	cmp	r3, #115	; 0x73
 8000b86:	d104      	bne.n	8000b92 <USART_CharReception_Callback+0x26>
  {
    /* Turn LED2 On : Expected character has been received */
    LED_On();
 8000b88:	f7ff ff5c 	bl	8000a44 <LED_On>
    SEGGER_SYSVIEW_Print("LED ON");
 8000b8c:	4806      	ldr	r0, [pc, #24]	; (8000ba8 <USART_CharReception_Callback+0x3c>)
 8000b8e:	f001 f945 	bl	8001e1c <SEGGER_SYSVIEW_Print>

  }

  /* Echo received character on TX */
  LL_USART_TransmitData8(USARTx_INSTANCE, received_char);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	4803      	ldr	r0, [pc, #12]	; (8000ba4 <USART_CharReception_Callback+0x38>)
 8000b98:	4619      	mov	r1, r3
 8000b9a:	f7ff fea9 	bl	80008f0 <LL_USART_TransmitData8>
}
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40013800 	.word	0x40013800
 8000ba8:	08001fe8 	.word	0x08001fe8

08000bac <Error_Callback>:
  * @brief  Function called in case of error detected in USART IT Handler
  * @param  None
  * @retval None
  */
void Error_Callback(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
  __IO uint32_t isr_reg;

  /* Disable USARTx_IRQn */
  NVIC_DisableIRQ(USARTx_IRQn);
 8000bb2:	2025      	movs	r0, #37	; 0x25
 8000bb4:	f7ff fb2e 	bl	8000214 <NVIC_DisableIRQ>

  /* Error handling example :
    - Read USART ISR register to identify flag that leads to IT raising
    - Perform corresponding error handling treatment according to flag
  */
  isr_reg = LL_USART_ReadReg(USARTx_INSTANCE, ISR);
 8000bb8:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <Error_Callback+0x34>)
 8000bba:	69db      	ldr	r3, [r3, #28]
 8000bbc:	607b      	str	r3, [r7, #4]
  if (isr_reg & LL_USART_ISR_NE)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	f003 0304 	and.w	r3, r3, #4
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d003      	beq.n	8000bd0 <Error_Callback+0x24>
  {
    /* case Noise Error flag is raised : ... */
    LED_Blinking(LED_BLINK_FAST);
 8000bc8:	20c8      	movs	r0, #200	; 0xc8
 8000bca:	f7ff ff4f 	bl	8000a6c <LED_Blinking>
 8000bce:	e003      	b.n	8000bd8 <Error_Callback+0x2c>
  }
  else
  {
    /* Unexpected IT source : Set LED to Blinking mode to indicate error occurs */
    LED_Blinking(LED_BLINK_ERROR);
 8000bd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bd4:	f7ff ff4a 	bl	8000a6c <LED_Blinking>
  }
}
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40013800 	.word	0x40013800

08000be4 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be8:	4a1f      	ldr	r2, [pc, #124]	; (8000c68 <SystemInit+0x84>)
 8000bea:	4b1f      	ldr	r3, [pc, #124]	; (8000c68 <SystemInit+0x84>)
 8000bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000bf8:	4a1c      	ldr	r2, [pc, #112]	; (8000c6c <SystemInit+0x88>)
 8000bfa:	4b1c      	ldr	r3, [pc, #112]	; (8000c6c <SystemInit+0x88>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f043 0301 	orr.w	r3, r3, #1
 8000c02:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8000c04:	4919      	ldr	r1, [pc, #100]	; (8000c6c <SystemInit+0x88>)
 8000c06:	4b19      	ldr	r3, [pc, #100]	; (8000c6c <SystemInit+0x88>)
 8000c08:	685a      	ldr	r2, [r3, #4]
 8000c0a:	4b19      	ldr	r3, [pc, #100]	; (8000c70 <SystemInit+0x8c>)
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000c10:	4a16      	ldr	r2, [pc, #88]	; (8000c6c <SystemInit+0x88>)
 8000c12:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <SystemInit+0x88>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c1e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c20:	4a12      	ldr	r2, [pc, #72]	; (8000c6c <SystemInit+0x88>)
 8000c22:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <SystemInit+0x88>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c2a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000c2c:	4a0f      	ldr	r2, [pc, #60]	; (8000c6c <SystemInit+0x88>)
 8000c2e:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <SystemInit+0x88>)
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000c36:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8000c38:	4a0c      	ldr	r2, [pc, #48]	; (8000c6c <SystemInit+0x88>)
 8000c3a:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <SystemInit+0x88>)
 8000c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c3e:	f023 030f 	bic.w	r3, r3, #15
 8000c42:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8000c44:	4909      	ldr	r1, [pc, #36]	; (8000c6c <SystemInit+0x88>)
 8000c46:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <SystemInit+0x88>)
 8000c48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <SystemInit+0x90>)
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <SystemInit+0x88>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c56:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <SystemInit+0x84>)
 8000c58:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c5c:	609a      	str	r2, [r3, #8]
#endif
}
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000ed00 	.word	0xe000ed00
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	f87fc00c 	.word	0xf87fc00c
 8000c74:	ff00fccc 	.word	0xff00fccc

08000c78 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8000c82:	695a      	ldr	r2, [r3, #20]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	401a      	ands	r2, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	bf0c      	ite	eq
 8000c8e:	2301      	moveq	r3, #1
 8000c90:	2300      	movne	r3, #0
 8000c92:	b2db      	uxtb	r3, r3
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	40010400 	.word	0x40010400

08000ca4 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8000cac:	4a03      	ldr	r2, [pc, #12]	; (8000cbc <LL_EXTI_ClearFlag_0_31+0x18>)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6153      	str	r3, [r2, #20]
}
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	40010400 	.word	0x40010400

08000cc0 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE));
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	69db      	ldr	r3, [r3, #28]
 8000ccc:	f003 0320 	and.w	r3, r3, #32
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	bf14      	ite	ne
 8000cd4:	2301      	movne	r3, #1
 8000cd6:	2300      	moveq	r3, #0
 8000cd8:	b2db      	uxtb	r3, r3
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(USART_TypeDef *USARTx)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f003 0320 	and.w	r3, r3, #32
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	bf14      	ite	ne
 8000cfc:	2301      	movne	r3, #1
 8000cfe:	2300      	moveq	r3, #0
 8000d00:	b2db      	uxtb	r3, r3
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop

08000d10 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
}
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000d20:	e7fe      	b.n	8000d20 <HardFault_Handler+0x4>
 8000d22:	bf00      	nop

08000d24 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000d28:	e7fe      	b.n	8000d28 <MemManage_Handler+0x4>
 8000d2a:	bf00      	nop

08000d2c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000d30:	e7fe      	b.n	8000d30 <BusFault_Handler+0x4>
 8000d32:	bf00      	nop

08000d34 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000d38:	e7fe      	b.n	8000d38 <UsageFault_Handler+0x4>
 8000d3a:	bf00      	nop

08000d3c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
}
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
}
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
}
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
}
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <EXTI15_10_IRQHandler>:
  * @brief  This function handles external line 15_10 interrupt request.
  * @param  None
  * @retval None
  */
void USER_BUTTON_IRQHANDLER(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* Manage Flags */
  if(LL_EXTI_IsActiveFlag_0_31(USER_BUTTON_EXTI_LINE) != RESET)
 8000d70:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d74:	f7ff ff80 	bl	8000c78 <LL_EXTI_IsActiveFlag_0_31>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d005      	beq.n	8000d8a <EXTI15_10_IRQHandler+0x1e>
  {
    /* Clear EXTI flag */
    LL_EXTI_ClearFlag_0_31(USER_BUTTON_EXTI_LINE);
 8000d7e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d82:	f7ff ff8f 	bl	8000ca4 <LL_EXTI_ClearFlag_0_31>

    /* Handle user button press in dedicated function */
    UserButton_Callback(); 
 8000d86:	f7ff feeb 	bl	8000b60 <UserButton_Callback>
  }
}
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <USART1_IRQHandler>:
  * Brief   This function handles USARTx Instance interrupt request.
  * Param   None
  * Retval  None
  */
void USARTx_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* Check RXNE flag value in ISR register */
  if(LL_USART_IsActiveFlag_RXNE(USARTx_INSTANCE) && LL_USART_IsEnabledIT_RXNE(USARTx_INSTANCE))
 8000d90:	4808      	ldr	r0, [pc, #32]	; (8000db4 <USART1_IRQHandler+0x28>)
 8000d92:	f7ff ff95 	bl	8000cc0 <LL_USART_IsActiveFlag_RXNE>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d008      	beq.n	8000dae <USART1_IRQHandler+0x22>
 8000d9c:	4805      	ldr	r0, [pc, #20]	; (8000db4 <USART1_IRQHandler+0x28>)
 8000d9e:	f7ff ffa3 	bl	8000ce8 <LL_USART_IsEnabledIT_RXNE>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d002      	beq.n	8000dae <USART1_IRQHandler+0x22>
  {
    /* RXNE flag will be cleared by reading of RDR register (done in call) */
    /* Call function in charge of handling Character reception */
    USART_CharReception_Callback();
 8000da8:	f7ff fee0 	bl	8000b6c <USART_CharReception_Callback>
 8000dac:	e001      	b.n	8000db2 <USART1_IRQHandler+0x26>
  }
  else
  {
    /* Call Error function */
    Error_Callback();
 8000dae:	f7ff fefd 	bl	8000bac <Error_Callback>
  }
	
}
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40013800 	.word	0x40013800

08000db8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000dc2:	4909      	ldr	r1, [pc, #36]	; (8000de8 <LL_InitTick+0x30>)
 8000dc4:	687a      	ldr	r2, [r7, #4]
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dcc:	3b01      	subs	r3, #1
 8000dce:	604b      	str	r3, [r1, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000dd0:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <LL_InitTick+0x30>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dd6:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <LL_InitTick+0x30>)
 8000dd8:	2205      	movs	r2, #5
 8000dda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	e000e010 	.word	0xe000e010

08000dec <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000dfa:	f7ff ffdd 	bl	8000db8 <LL_InitTick>
}
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <LL_mDelay+0x44>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8000e12:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e1a:	d002      	beq.n	8000e22 <LL_mDelay+0x1e>
  {
    Delay++;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8000e22:	e008      	b.n	8000e36 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8000e24:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <LL_mDelay+0x44>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d002      	beq.n	8000e36 <LL_mDelay+0x32>
    {
      Delay--;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3b01      	subs	r3, #1
 8000e34:	607b      	str	r3, [r7, #4]
  if (Delay < LL_MAX_DELAY)
  {
    Delay++;
  }

  while (Delay)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d1f3      	bne.n	8000e24 <LL_mDelay+0x20>
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
    {
      Delay--;
    }
  }
}
 8000e3c:	3714      	adds	r7, #20
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	e000e010 	.word	0xe000e010

08000e4c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000e54:	4a03      	ldr	r2, [pc, #12]	; (8000e64 <LL_SetSystemCoreClock+0x18>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6013      	str	r3, [r2, #0]
}
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	20000000 	.word	0x20000000

08000e68 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8000e6e:	4b21      	ldr	r3, [pc, #132]	; (8000ef4 <_DoInit+0x8c>)
 8000e70:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2203      	movs	r2, #3
 8000e76:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a1d      	ldr	r2, [pc, #116]	; (8000ef8 <_DoInit+0x90>)
 8000e82:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4a1d      	ldr	r2, [pc, #116]	; (8000efc <_DoInit+0x94>)
 8000e88:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e90:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2200      	movs	r2, #0
 8000e96:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a14      	ldr	r2, [pc, #80]	; (8000ef8 <_DoInit+0x90>)
 8000ea8:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a14      	ldr	r2, [pc, #80]	; (8000f00 <_DoInit+0x98>)
 8000eae:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2210      	movs	r2, #16
 8000eb4:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3307      	adds	r3, #7
 8000ecc:	4a0d      	ldr	r2, [pc, #52]	; (8000f04 <_DoInit+0x9c>)
 8000ece:	6810      	ldr	r0, [r2, #0]
 8000ed0:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a0c      	ldr	r2, [pc, #48]	; (8000f08 <_DoInit+0xa0>)
 8000ed6:	6810      	ldr	r0, [r2, #0]
 8000ed8:	6018      	str	r0, [r3, #0]
 8000eda:	8891      	ldrh	r1, [r2, #4]
 8000edc:	7992      	ldrb	r2, [r2, #6]
 8000ede:	8099      	strh	r1, [r3, #4]
 8000ee0:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2220      	movs	r2, #32
 8000ee6:	719a      	strb	r2, [r3, #6]
}
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	2000154c 	.word	0x2000154c
 8000ef8:	08001ff0 	.word	0x08001ff0
 8000efc:	20000020 	.word	0x20000020
 8000f00:	20000420 	.word	0x20000420
 8000f04:	08001ffc 	.word	0x08001ffc
 8000f08:	08002000 	.word	0x08002000

08000f0c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08a      	sub	sp, #40	; 0x28
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
  unsigned                RdOff;
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  //
  INIT();
 8000f18:	4b3c      	ldr	r3, [pc, #240]	; (800100c <SEGGER_RTT_ReadNoLock+0x100>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d101      	bne.n	8000f24 <SEGGER_RTT_ReadNoLock+0x18>
 8000f20:	f7ff ffa2 	bl	8000e68 <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 8000f24:	68fa      	ldr	r2, [r7, #12]
 8000f26:	4613      	mov	r3, r2
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	4413      	add	r3, r2
 8000f2c:	00db      	lsls	r3, r3, #3
 8000f2e:	3360      	adds	r3, #96	; 0x60
 8000f30:	4a36      	ldr	r2, [pc, #216]	; (800100c <SEGGER_RTT_ReadNoLock+0x100>)
 8000f32:	4413      	add	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	691b      	ldr	r3, [r3, #16]
 8000f3e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 8000f46:	2300      	movs	r3, #0
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8000f4a:	6a3a      	ldr	r2, [r7, #32]
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d92a      	bls.n	8000fa8 <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	689a      	ldr	r2, [r3, #8]
 8000f56:	6a3b      	ldr	r3, [r7, #32]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4293      	cmp	r3, r2
 8000f62:	bf28      	it	cs
 8000f64:	4613      	movcs	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
    memcpy(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	685a      	ldr	r2, [r3, #4]
 8000f6c:	6a3b      	ldr	r3, [r7, #32]
 8000f6e:	4413      	add	r3, r2
 8000f70:	69f8      	ldr	r0, [r7, #28]
 8000f72:	4619      	mov	r1, r3
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	f001 f81f 	bl	8001fb8 <memcpy>
    NumBytesRead += NumBytesRem;
 8000f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	4413      	add	r3, r2
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8000f82:	69fa      	ldr	r2, [r7, #28]
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	4413      	add	r3, r2
 8000f88:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8000f92:	6a3a      	ldr	r2, [r7, #32]
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	4413      	add	r3, r2
 8000f98:	623b      	str	r3, [r7, #32]
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	689a      	ldr	r2, [r3, #8]
 8000f9e:	6a3b      	ldr	r3, [r7, #32]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d101      	bne.n	8000fa8 <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8000fa8:	697a      	ldr	r2, [r7, #20]
 8000faa:	6a3b      	ldr	r3, [r7, #32]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	bf28      	it	cs
 8000fb8:	4613      	movcs	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d018      	beq.n	8000ff4 <SEGGER_RTT_ReadNoLock+0xe8>
    memcpy(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8000fc2:	69bb      	ldr	r3, [r7, #24]
 8000fc4:	685a      	ldr	r2, [r3, #4]
 8000fc6:	6a3b      	ldr	r3, [r7, #32]
 8000fc8:	4413      	add	r3, r2
 8000fca:	69f8      	ldr	r0, [r7, #28]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	f000 fff2 	bl	8001fb8 <memcpy>
    NumBytesRead += NumBytesRem;
 8000fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	4413      	add	r3, r2
 8000fda:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8000fdc:	69fa      	ldr	r2, [r7, #28]
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8000fec:	6a3a      	ldr	r2, [r7, #32]
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	623b      	str	r3, [r7, #32]
  }
  if (NumBytesRead) {
 8000ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d002      	beq.n	8001000 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	6a3a      	ldr	r2, [r7, #32]
 8000ffe:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8001000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001002:	4618      	mov	r0, r3
 8001004:	3728      	adds	r7, #40	; 0x28
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	2000154c 	.word	0x2000154c

08001010 <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8001010:	b580      	push	{r7, lr}
 8001012:	b08c      	sub	sp, #48	; 0x30
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
  unsigned              Avail;
  unsigned              RdOff;
  unsigned              WrOff;
  unsigned              Rem;

  pData = (const char *)pBuffer;
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	1c5a      	adds	r2, r3, #1
 8001024:	4613      	mov	r3, r2
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	4413      	add	r3, r2
 800102a:	00db      	lsls	r3, r3, #3
 800102c:	4a46      	ldr	r2, [pc, #280]	; (8001148 <SEGGER_RTT_WriteSkipNoLock+0x138>)
 800102e:	4413      	add	r3, r2
 8001030:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8001032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001034:	691b      	ldr	r3, [r3, #16]
 8001036:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8001038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	61fb      	str	r3, [r7, #28]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 800103e:	6a3a      	ldr	r2, [r7, #32]
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	429a      	cmp	r2, r3
 8001044:	d862      	bhi.n	800110c <SEGGER_RTT_WriteSkipNoLock+0xfc>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 8001046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001048:	689a      	ldr	r2, [r3, #8]
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	3b01      	subs	r3, #1
 8001050:	61bb      	str	r3, [r7, #24]
    if (Avail >= NumBytes) {
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	429a      	cmp	r2, r3
 8001058:	d31d      	bcc.n	8001096 <SEGGER_RTT_WriteSkipNoLock+0x86>
#if 1 // memcpy() is good for large amounts of data, but the overhead is too big for small amounts. Use a simple byte loop instead.
      char* pDst;
      pDst = pRing->pBuffer + WrOff;
 800105a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105c:	685a      	ldr	r2, [r3, #4]
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	4413      	add	r3, r2
 8001062:	62bb      	str	r3, [r7, #40]	; 0x28
      WrOff += NumBytes;
 8001064:	69fa      	ldr	r2, [r7, #28]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	61fb      	str	r3, [r7, #28]
      do {
        *pDst++ = *pData++;
 800106c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800106e:	1c5a      	adds	r2, r3, #1
 8001070:	62ba      	str	r2, [r7, #40]	; 0x28
 8001072:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001074:	1c51      	adds	r1, r2, #1
 8001076:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001078:	7812      	ldrb	r2, [r2, #0]
 800107a:	701a      	strb	r2, [r3, #0]
      } while (--NumBytes);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	607b      	str	r3, [r7, #4]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d1f1      	bne.n	800106c <SEGGER_RTT_WriteSkipNoLock+0x5c>
      pRing->WrOff = WrOff + NumBytes;
 8001088:	69fa      	ldr	r2, [r7, #28]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	441a      	add	r2, r3
 800108e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001090:	60da      	str	r2, [r3, #12]
#else
      memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
      pRing->WrOff = WrOff + NumBytes;
#endif
      return 1;
 8001092:	2301      	movs	r3, #1
 8001094:	e054      	b.n	8001140 <SEGGER_RTT_WriteSkipNoLock+0x130>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	6a3b      	ldr	r3, [r7, #32]
 800109a:	4413      	add	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d34b      	bcc.n	800113e <SEGGER_RTT_WriteSkipNoLock+0x12e>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 80010a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a8:	689a      	ldr	r2, [r3, #8]
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	617b      	str	r3, [r7, #20]
      if (Rem > NumBytes) {
 80010b0:	697a      	ldr	r2, [r7, #20]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d90e      	bls.n	80010d6 <SEGGER_RTT_WriteSkipNoLock+0xc6>
        memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
 80010b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ba:	685a      	ldr	r2, [r3, #4]
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	4413      	add	r3, r2
 80010c0:	4618      	mov	r0, r3
 80010c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	f000 ff77 	bl	8001fb8 <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 80010ca:	69fa      	ldr	r2, [r7, #28]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	441a      	add	r2, r3
 80010d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d2:	60da      	str	r2, [r3, #12]
 80010d4:	e018      	b.n	8001108 <SEGGER_RTT_WriteSkipNoLock+0xf8>
      } else {
        //
        // We reach the end of the buffer, so need to wrap around
        //
        memcpy(pRing->pBuffer + WrOff, pData, Rem);
 80010d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d8:	685a      	ldr	r2, [r3, #4]
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	4413      	add	r3, r2
 80010de:	4618      	mov	r0, r3
 80010e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80010e2:	697a      	ldr	r2, [r7, #20]
 80010e4:	f000 ff68 	bl	8001fb8 <memcpy>
        memcpy(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 80010e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ea:	6858      	ldr	r0, [r3, #4]
 80010ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	18d1      	adds	r1, r2, r3
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	461a      	mov	r2, r3
 80010fa:	f000 ff5d 	bl	8001fb8 <memcpy>
        pRing->WrOff = NumBytes - Rem;
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	1ad2      	subs	r2, r2, r3
 8001104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001106:	60da      	str	r2, [r3, #12]
      }
      return 1;
 8001108:	2301      	movs	r3, #1
 800110a:	e019      	b.n	8001140 <SEGGER_RTT_WriteSkipNoLock+0x130>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 800110c:	6a3a      	ldr	r2, [r7, #32]
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	3b01      	subs	r3, #1
 8001114:	61bb      	str	r3, [r7, #24]
    if (Avail >= NumBytes) {
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	429a      	cmp	r2, r3
 800111c:	d30f      	bcc.n	800113e <SEGGER_RTT_WriteSkipNoLock+0x12e>
      memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
 800111e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001120:	685a      	ldr	r2, [r3, #4]
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	4413      	add	r3, r2
 8001126:	4618      	mov	r0, r3
 8001128:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	f000 ff44 	bl	8001fb8 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8001130:	69fa      	ldr	r2, [r7, #28]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	441a      	add	r2, r3
 8001136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001138:	60da      	str	r2, [r3, #12]
      return 1;
 800113a:	2301      	movs	r3, #1
 800113c:	e000      	b.n	8001140 <SEGGER_RTT_WriteSkipNoLock+0x130>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 800113e:	2300      	movs	r3, #0
}
 8001140:	4618      	mov	r0, r3
 8001142:	3730      	adds	r7, #48	; 0x30
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	2000154c 	.word	0x2000154c

0800114c <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
 8001158:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 800115a:	4b30      	ldr	r3, [pc, #192]	; (800121c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d101      	bne.n	8001166 <SEGGER_RTT_ConfigUpBuffer+0x1a>
 8001162:	f7ff fe81 	bl	8000e68 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 8001166:	4b2d      	ldr	r3, [pc, #180]	; (800121c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8001168:	691b      	ldr	r3, [r3, #16]
 800116a:	461a      	mov	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	429a      	cmp	r2, r3
 8001170:	d94b      	bls.n	800120a <SEGGER_RTT_ConfigUpBuffer+0xbe>
    SEGGER_RTT_LOCK();
 8001172:	f3ef 8311 	mrs	r3, BASEPRI
 8001176:	f04f 0120 	mov.w	r1, #32
 800117a:	f381 8811 	msr	BASEPRI, r1
 800117e:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d031      	beq.n	80011ea <SEGGER_RTT_ConfigUpBuffer+0x9e>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 8001186:	4925      	ldr	r1, [pc, #148]	; (800121c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	1c5a      	adds	r2, r3, #1
 800118c:	4613      	mov	r3, r2
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	4413      	add	r3, r2
 8001192:	00db      	lsls	r3, r3, #3
 8001194:	440b      	add	r3, r1
 8001196:	68ba      	ldr	r2, [r7, #8]
 8001198:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800119a:	4920      	ldr	r1, [pc, #128]	; (800121c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	1c5a      	adds	r2, r3, #1
 80011a0:	4613      	mov	r3, r2
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	4413      	add	r3, r2
 80011a6:	00db      	lsls	r3, r3, #3
 80011a8:	440b      	add	r3, r1
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	605a      	str	r2, [r3, #4]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80011ae:	491b      	ldr	r1, [pc, #108]	; (800121c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80011b0:	68fa      	ldr	r2, [r7, #12]
 80011b2:	4613      	mov	r3, r2
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	4413      	add	r3, r2
 80011b8:	00db      	lsls	r3, r3, #3
 80011ba:	440b      	add	r3, r1
 80011bc:	3320      	adds	r3, #32
 80011be:	683a      	ldr	r2, [r7, #0]
 80011c0:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 80011c2:	4916      	ldr	r1, [pc, #88]	; (800121c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80011c4:	68fa      	ldr	r2, [r7, #12]
 80011c6:	4613      	mov	r3, r2
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	4413      	add	r3, r2
 80011cc:	00db      	lsls	r3, r3, #3
 80011ce:	440b      	add	r3, r1
 80011d0:	3328      	adds	r3, #40	; 0x28
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 80011d6:	4911      	ldr	r1, [pc, #68]	; (800121c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80011d8:	68fa      	ldr	r2, [r7, #12]
 80011da:	4613      	mov	r3, r2
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	4413      	add	r3, r2
 80011e0:	00db      	lsls	r3, r3, #3
 80011e2:	440b      	add	r3, r1
 80011e4:	3320      	adds	r3, #32
 80011e6:	2200      	movs	r2, #0
 80011e8:	605a      	str	r2, [r3, #4]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 80011ea:	490c      	ldr	r1, [pc, #48]	; (800121c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80011ec:	68fa      	ldr	r2, [r7, #12]
 80011ee:	4613      	mov	r3, r2
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	4413      	add	r3, r2
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	440b      	add	r3, r1
 80011f8:	3328      	adds	r3, #40	; 0x28
 80011fa:	6a3a      	ldr	r2, [r7, #32]
 80011fc:	605a      	str	r2, [r3, #4]
    SEGGER_RTT_UNLOCK();
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
 8001208:	e002      	b.n	8001210 <SEGGER_RTT_ConfigUpBuffer+0xc4>
  } else {
    r = -1;
 800120a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800120e:	617b      	str	r3, [r7, #20]
  }
  return r;
 8001210:	697b      	ldr	r3, [r7, #20]
}
 8001212:	4618      	mov	r0, r3
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	2000154c 	.word	0x2000154c

08001220 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
 800122c:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 800122e:	4b30      	ldr	r3, [pc, #192]	; (80012f0 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d101      	bne.n	800123a <SEGGER_RTT_ConfigDownBuffer+0x1a>
 8001236:	f7ff fe17 	bl	8000e68 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 800123a:	4b2d      	ldr	r3, [pc, #180]	; (80012f0 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	461a      	mov	r2, r3
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	429a      	cmp	r2, r3
 8001244:	d94b      	bls.n	80012de <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 8001246:	f3ef 8311 	mrs	r3, BASEPRI
 800124a:	f04f 0120 	mov.w	r1, #32
 800124e:	f381 8811 	msr	BASEPRI, r1
 8001252:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d031      	beq.n	80012be <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 800125a:	4925      	ldr	r1, [pc, #148]	; (80012f0 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800125c:	68fa      	ldr	r2, [r7, #12]
 800125e:	4613      	mov	r3, r2
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	4413      	add	r3, r2
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	440b      	add	r3, r1
 8001268:	3360      	adds	r3, #96	; 0x60
 800126a:	68ba      	ldr	r2, [r7, #8]
 800126c:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 800126e:	4920      	ldr	r1, [pc, #128]	; (80012f0 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8001270:	68fa      	ldr	r2, [r7, #12]
 8001272:	4613      	mov	r3, r2
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	4413      	add	r3, r2
 8001278:	00db      	lsls	r3, r3, #3
 800127a:	440b      	add	r3, r1
 800127c:	3360      	adds	r3, #96	; 0x60
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	605a      	str	r2, [r3, #4]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8001282:	491b      	ldr	r1, [pc, #108]	; (80012f0 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8001284:	68fa      	ldr	r2, [r7, #12]
 8001286:	4613      	mov	r3, r2
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	4413      	add	r3, r2
 800128c:	00db      	lsls	r3, r3, #3
 800128e:	440b      	add	r3, r1
 8001290:	3368      	adds	r3, #104	; 0x68
 8001292:	683a      	ldr	r2, [r7, #0]
 8001294:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 8001296:	4916      	ldr	r1, [pc, #88]	; (80012f0 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8001298:	68fa      	ldr	r2, [r7, #12]
 800129a:	4613      	mov	r3, r2
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	4413      	add	r3, r2
 80012a0:	00db      	lsls	r3, r3, #3
 80012a2:	440b      	add	r3, r1
 80012a4:	3370      	adds	r3, #112	; 0x70
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 80012aa:	4911      	ldr	r1, [pc, #68]	; (80012f0 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80012ac:	68fa      	ldr	r2, [r7, #12]
 80012ae:	4613      	mov	r3, r2
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	4413      	add	r3, r2
 80012b4:	00db      	lsls	r3, r3, #3
 80012b6:	440b      	add	r3, r1
 80012b8:	3368      	adds	r3, #104	; 0x68
 80012ba:	2200      	movs	r2, #0
 80012bc:	605a      	str	r2, [r3, #4]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 80012be:	490c      	ldr	r1, [pc, #48]	; (80012f0 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80012c0:	68fa      	ldr	r2, [r7, #12]
 80012c2:	4613      	mov	r3, r2
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	4413      	add	r3, r2
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	440b      	add	r3, r1
 80012cc:	3370      	adds	r3, #112	; 0x70
 80012ce:	6a3a      	ldr	r2, [r7, #32]
 80012d0:	605a      	str	r2, [r3, #4]
    SEGGER_RTT_UNLOCK();
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	e002      	b.n	80012e4 <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 80012de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012e2:	617b      	str	r3, [r7, #20]
  }
  return r;
 80012e4:	697b      	ldr	r3, [r7, #20]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	2000154c 	.word	0x2000154c

080012f4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80012f4:	b480      	push	{r7}
 80012f6:	b087      	sub	sp, #28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8001300:	2300      	movs	r3, #0
 8001302:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8001304:	e002      	b.n	800130c <_EncodeStr+0x18>
    Len++;
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	3301      	adds	r3, #1
 800130a:	613b      	str	r3, [r7, #16]
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
  while(*(pText + Len) != 0) {
 800130c:	68ba      	ldr	r2, [r7, #8]
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	4413      	add	r3, r2
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d1f6      	bne.n	8001306 <_EncodeStr+0x12>
    Len++;
  }
  if (Len > Limit) {
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	429a      	cmp	r2, r3
 800131e:	d901      	bls.n	8001324 <_EncodeStr+0x30>
    Len = Limit;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	2bfe      	cmp	r3, #254	; 0xfe
 8001328:	d806      	bhi.n	8001338 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	1c5a      	adds	r2, r3, #1
 800132e:	60fa      	str	r2, [r7, #12]
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	b2d2      	uxtb	r2, r2
 8001334:	701a      	strb	r2, [r3, #0]
 8001336:	e011      	b.n	800135c <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	1c5a      	adds	r2, r3, #1
 800133c:	60fa      	str	r2, [r7, #12]
 800133e:	22ff      	movs	r2, #255	; 0xff
 8001340:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	1c5a      	adds	r2, r3, #1
 8001346:	60fa      	str	r2, [r7, #12]
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	b2d2      	uxtb	r2, r2
 800134c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	1c5a      	adds	r2, r3, #1
 8001352:	60fa      	str	r2, [r7, #12]
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	0a12      	lsrs	r2, r2, #8
 8001358:	b2d2      	uxtb	r2, r2
 800135a:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8001360:	e00a      	b.n	8001378 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	1c5a      	adds	r2, r3, #1
 8001366:	60fa      	str	r2, [r7, #12]
 8001368:	68ba      	ldr	r2, [r7, #8]
 800136a:	1c51      	adds	r1, r2, #1
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	7812      	ldrb	r2, [r2, #0]
 8001370:	701a      	strb	r2, [r3, #0]
    n++;
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	3301      	adds	r3, #1
 8001376:	617b      	str	r3, [r7, #20]
  }
  //
  // copy string
  //
  n = 0;
  while (n < Len) {
 8001378:	697a      	ldr	r2, [r7, #20]
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	429a      	cmp	r2, r3
 800137e:	d3f0      	bcc.n	8001362 <_EncodeStr+0x6e>
    *pPayload++ = *pText++;
    n++;
  }
  return pPayload;
 8001380:	68fb      	ldr	r3, [r7, #12]
}
 8001382:	4618      	mov	r0, r3
 8001384:	371c      	adds	r7, #28
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop

08001390 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3304      	adds	r3, #4
}
 800139c:	4618      	mov	r0, r3
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80013ae:	1cfb      	adds	r3, r7, #3
 80013b0:	2001      	movs	r0, #1
 80013b2:	4619      	mov	r1, r3
 80013b4:	2201      	movs	r2, #1
 80013b6:	f7ff fda9 	bl	8000f0c <SEGGER_RTT_ReadNoLock>
 80013ba:	4603      	mov	r3, r0
 80013bc:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	dd46      	ble.n	8001452 <_HandleIncomingPacket+0xaa>
    switch (Cmd) {
 80013c4:	78fb      	ldrb	r3, [r7, #3]
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	d01a      	beq.n	8001400 <_HandleIncomingPacket+0x58>
 80013ca:	2b04      	cmp	r3, #4
 80013cc:	dc06      	bgt.n	80013dc <_HandleIncomingPacket+0x34>
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d010      	beq.n	80013f4 <_HandleIncomingPacket+0x4c>
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	dc11      	bgt.n	80013fa <_HandleIncomingPacket+0x52>
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d009      	beq.n	80013ee <_HandleIncomingPacket+0x46>
 80013da:	e02e      	b.n	800143a <_HandleIncomingPacket+0x92>
 80013dc:	2b06      	cmp	r3, #6
 80013de:	d015      	beq.n	800140c <_HandleIncomingPacket+0x64>
 80013e0:	2b06      	cmp	r3, #6
 80013e2:	db10      	blt.n	8001406 <_HandleIncomingPacket+0x5e>
 80013e4:	2b07      	cmp	r3, #7
 80013e6:	d014      	beq.n	8001412 <_HandleIncomingPacket+0x6a>
 80013e8:	2b80      	cmp	r3, #128	; 0x80
 80013ea:	d015      	beq.n	8001418 <_HandleIncomingPacket+0x70>
 80013ec:	e025      	b.n	800143a <_HandleIncomingPacket+0x92>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80013ee:	f000 fa67 	bl	80018c0 <SEGGER_SYSVIEW_Start>
      break;
 80013f2:	e02e      	b.n	8001452 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80013f4:	f000 fb20 	bl	8001a38 <SEGGER_SYSVIEW_Stop>
      break;
 80013f8:	e02b      	b.n	8001452 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80013fa:	f000 fc0f 	bl	8001c1c <SEGGER_SYSVIEW_RecordSystime>
      break;
 80013fe:	e028      	b.n	8001452 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8001400:	f000 fbd8 	bl	8001bb4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8001404:	e025      	b.n	8001452 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8001406:	f000 fb3b 	bl	8001a80 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800140a:	e022      	b.n	8001452 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800140c:	f000 fcca 	bl	8001da4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8001410:	e01f      	b.n	8001452 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8001412:	f000 fcab 	bl	8001d6c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8001416:	e01c      	b.n	8001452 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8001418:	1cfb      	adds	r3, r7, #3
 800141a:	2001      	movs	r0, #1
 800141c:	4619      	mov	r1, r3
 800141e:	2201      	movs	r2, #1
 8001420:	f7ff fd74 	bl	8000f0c <SEGGER_RTT_ReadNoLock>
 8001424:	4603      	mov	r3, r0
 8001426:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	dd04      	ble.n	8001438 <_HandleIncomingPacket+0x90>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800142e:	78fb      	ldrb	r3, [r7, #3]
 8001430:	4618      	mov	r0, r3
 8001432:	f000 fc1d 	bl	8001c70 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8001436:	e00c      	b.n	8001452 <_HandleIncomingPacket+0xaa>
 8001438:	e00b      	b.n	8001452 <_HandleIncomingPacket+0xaa>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800143a:	78fb      	ldrb	r3, [r7, #3]
 800143c:	b2db      	uxtb	r3, r3
 800143e:	b25b      	sxtb	r3, r3
 8001440:	2b00      	cmp	r3, #0
 8001442:	da05      	bge.n	8001450 <_HandleIncomingPacket+0xa8>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8001444:	1cfb      	adds	r3, r7, #3
 8001446:	2001      	movs	r0, #1
 8001448:	4619      	mov	r1, r3
 800144a:	2201      	movs	r2, #1
 800144c:	f7ff fd5e 	bl	8000f0c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8001450:	bf00      	nop
    }
  }
}
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8001458:	b580      	push	{r7, lr}
 800145a:	b08c      	sub	sp, #48	; 0x30
 800145c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800145e:	2301      	movs	r3, #1
 8001460:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	3301      	adds	r3, #1
 8001466:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800146c:	4b30      	ldr	r3, [pc, #192]	; (8001530 <_TrySendOverflowPacket+0xd8>)
 800146e:	695b      	ldr	r3, [r3, #20]
 8001470:	62bb      	str	r3, [r7, #40]	; 0x28
 8001472:	e00b      	b.n	800148c <_TrySendOverflowPacket+0x34>
 8001474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001476:	1c5a      	adds	r2, r3, #1
 8001478:	62fa      	str	r2, [r7, #44]	; 0x2c
 800147a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800147c:	b2d2      	uxtb	r2, r2
 800147e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	701a      	strb	r2, [r3, #0]
 8001486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001488:	09db      	lsrs	r3, r3, #7
 800148a:	62bb      	str	r3, [r7, #40]	; 0x28
 800148c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800148e:	2b7f      	cmp	r3, #127	; 0x7f
 8001490:	d8f0      	bhi.n	8001474 <_TrySendOverflowPacket+0x1c>
 8001492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001494:	1c5a      	adds	r2, r3, #1
 8001496:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001498:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	701a      	strb	r2, [r3, #0]
 800149e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014a0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80014a2:	4b24      	ldr	r3, [pc, #144]	; (8001534 <_TrySendOverflowPacket+0xdc>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80014a8:	4b21      	ldr	r3, [pc, #132]	; (8001530 <_TrySendOverflowPacket+0xd8>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	623b      	str	r3, [r7, #32]
 80014ba:	e00b      	b.n	80014d4 <_TrySendOverflowPacket+0x7c>
 80014bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014be:	1c5a      	adds	r2, r3, #1
 80014c0:	627a      	str	r2, [r7, #36]	; 0x24
 80014c2:	6a3a      	ldr	r2, [r7, #32]
 80014c4:	b2d2      	uxtb	r2, r2
 80014c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80014ca:	b2d2      	uxtb	r2, r2
 80014cc:	701a      	strb	r2, [r3, #0]
 80014ce:	6a3b      	ldr	r3, [r7, #32]
 80014d0:	09db      	lsrs	r3, r3, #7
 80014d2:	623b      	str	r3, [r7, #32]
 80014d4:	6a3b      	ldr	r3, [r7, #32]
 80014d6:	2b7f      	cmp	r3, #127	; 0x7f
 80014d8:	d8f0      	bhi.n	80014bc <_TrySendOverflowPacket+0x64>
 80014da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014dc:	1c5a      	adds	r2, r3, #1
 80014de:	627a      	str	r2, [r7, #36]	; 0x24
 80014e0:	6a3a      	ldr	r2, [r7, #32]
 80014e2:	b2d2      	uxtb	r2, r2
 80014e4:	701a      	strb	r2, [r3, #0]
 80014e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80014ea:	69fa      	ldr	r2, [r7, #28]
 80014ec:	1d3b      	adds	r3, r7, #4
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	461a      	mov	r2, r3
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	2001      	movs	r0, #1
 80014f6:	4619      	mov	r1, r3
 80014f8:	f7ff fd8a 	bl	8001010 <SEGGER_RTT_WriteSkipNoLock>
 80014fc:	4603      	mov	r3, r0
 80014fe:	613b      	str	r3, [r7, #16]
  if (Status) {
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d009      	beq.n	800151a <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8001506:	4a0a      	ldr	r2, [pc, #40]	; (8001530 <_TrySendOverflowPacket+0xd8>)
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800150c:	4b08      	ldr	r3, [pc, #32]	; (8001530 <_TrySendOverflowPacket+0xd8>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	3b01      	subs	r3, #1
 8001512:	b2da      	uxtb	r2, r3
 8001514:	4b06      	ldr	r3, [pc, #24]	; (8001530 <_TrySendOverflowPacket+0xd8>)
 8001516:	701a      	strb	r2, [r3, #0]
 8001518:	e004      	b.n	8001524 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800151a:	4b05      	ldr	r3, [pc, #20]	; (8001530 <_TrySendOverflowPacket+0xd8>)
 800151c:	695b      	ldr	r3, [r3, #20]
 800151e:	3301      	adds	r3, #1
 8001520:	4a03      	ldr	r2, [pc, #12]	; (8001530 <_TrySendOverflowPacket+0xd8>)
 8001522:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8001524:	693b      	ldr	r3, [r7, #16]
}
 8001526:	4618      	mov	r0, r3
 8001528:	3730      	adds	r7, #48	; 0x30
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20001438 	.word	0x20001438
 8001534:	e0001004 	.word	0xe0001004

08001538 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8001538:	b580      	push	{r7, lr}
 800153a:	b08a      	sub	sp, #40	; 0x28
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8001544:	4b5e      	ldr	r3, [pc, #376]	; (80016c0 <_SendPacket+0x188>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d100      	bne.n	800154e <_SendPacket+0x16>
    goto Send;
 800154c:	e00f      	b.n	800156e <_SendPacket+0x36>
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800154e:	4b5c      	ldr	r3, [pc, #368]	; (80016c0 <_SendPacket+0x188>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d100      	bne.n	8001558 <_SendPacket+0x20>
    goto SendDone;
 8001556:	e09b      	b.n	8001690 <_SendPacket+0x158>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8001558:	4b59      	ldr	r3, [pc, #356]	; (80016c0 <_SendPacket+0x188>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b02      	cmp	r3, #2
 800155e:	d106      	bne.n	800156e <_SendPacket+0x36>
    _TrySendOverflowPacket();
 8001560:	f7ff ff7a 	bl	8001458 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8001564:	4b56      	ldr	r3, [pc, #344]	; (80016c0 <_SendPacket+0x188>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d000      	beq.n	800156e <_SendPacket+0x36>
      goto SendDone;
 800156c:	e090      	b.n	8001690 <_SendPacket+0x158>
Send:
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2b1f      	cmp	r3, #31
 8001572:	d809      	bhi.n	8001588 <_SendPacket+0x50>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8001574:	4b52      	ldr	r3, [pc, #328]	; (80016c0 <_SendPacket+0x188>)
 8001576:	69da      	ldr	r2, [r3, #28]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	fa22 f303 	lsr.w	r3, r2, r3
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	2b00      	cmp	r3, #0
 8001584:	d000      	beq.n	8001588 <_SendPacket+0x50>
      goto SendDone;
 8001586:	e083      	b.n	8001690 <_SendPacket+0x158>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2b17      	cmp	r3, #23
 800158c:	d807      	bhi.n	800159e <_SendPacket+0x66>
    *--pStartPacket = EventId;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	3b01      	subs	r3, #1
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	b2da      	uxtb	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	701a      	strb	r2, [r3, #0]
 800159c:	e03d      	b.n	800161a <_SendPacket+0xe2>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800159e:	68ba      	ldr	r2, [r7, #8]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	2b7f      	cmp	r3, #127	; 0x7f
 80015aa:	d912      	bls.n	80015d2 <_SendPacket+0x9a>
      *--pStartPacket = (NumBytes >> 7);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	3b01      	subs	r3, #1
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	09db      	lsrs	r3, r3, #7
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	3b01      	subs	r3, #1
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	701a      	strb	r2, [r3, #0]
 80015d0:	e006      	b.n	80015e0 <_SendPacket+0xa8>
    } else {
      *--pStartPacket = NumBytes;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	3b01      	subs	r3, #1
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b7f      	cmp	r3, #127	; 0x7f
 80015e4:	d912      	bls.n	800160c <_SendPacket+0xd4>
      *--pStartPacket = (EventId >> 7);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	3b01      	subs	r3, #1
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	09db      	lsrs	r3, r3, #7
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	3b01      	subs	r3, #1
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001604:	b2da      	uxtb	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	701a      	strb	r2, [r3, #0]
 800160a:	e006      	b.n	800161a <_SendPacket+0xe2>
    } else {
      *--pStartPacket = EventId;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	3b01      	subs	r3, #1
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	b2da      	uxtb	r2, r3
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800161a:	4b2a      	ldr	r3, [pc, #168]	; (80016c4 <_SendPacket+0x18c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8001620:	4b27      	ldr	r3, [pc, #156]	; (80016c0 <_SendPacket+0x188>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	623b      	str	r3, [r7, #32]
 8001632:	e00b      	b.n	800164c <_SendPacket+0x114>
 8001634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001636:	1c5a      	adds	r2, r3, #1
 8001638:	627a      	str	r2, [r7, #36]	; 0x24
 800163a:	6a3a      	ldr	r2, [r7, #32]
 800163c:	b2d2      	uxtb	r2, r2
 800163e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001642:	b2d2      	uxtb	r2, r2
 8001644:	701a      	strb	r2, [r3, #0]
 8001646:	6a3b      	ldr	r3, [r7, #32]
 8001648:	09db      	lsrs	r3, r3, #7
 800164a:	623b      	str	r3, [r7, #32]
 800164c:	6a3b      	ldr	r3, [r7, #32]
 800164e:	2b7f      	cmp	r3, #127	; 0x7f
 8001650:	d8f0      	bhi.n	8001634 <_SendPacket+0xfc>
 8001652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001654:	1c5a      	adds	r2, r3, #1
 8001656:	627a      	str	r2, [r7, #36]	; 0x24
 8001658:	6a3a      	ldr	r2, [r7, #32]
 800165a:	b2d2      	uxtb	r2, r2
 800165c:	701a      	strb	r2, [r3, #0]
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8001662:	68ba      	ldr	r2, [r7, #8]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2001      	movs	r0, #1
 800166a:	68f9      	ldr	r1, [r7, #12]
 800166c:	461a      	mov	r2, r3
 800166e:	f7ff fccf 	bl	8001010 <SEGGER_RTT_WriteSkipNoLock>
 8001672:	4603      	mov	r3, r0
 8001674:	613b      	str	r3, [r7, #16]
  if (Status) {
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d003      	beq.n	8001684 <_SendPacket+0x14c>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800167c:	4a10      	ldr	r2, [pc, #64]	; (80016c0 <_SendPacket+0x188>)
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	60d3      	str	r3, [r2, #12]
 8001682:	e005      	b.n	8001690 <_SendPacket+0x158>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8001684:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <_SendPacket+0x188>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	3301      	adds	r3, #1
 800168a:	b2da      	uxtb	r2, r3
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <_SendPacket+0x188>)
 800168e:	701a      	strb	r2, [r3, #0]
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8001690:	4b0d      	ldr	r3, [pc, #52]	; (80016c8 <_SendPacket+0x190>)
 8001692:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001696:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <_SendPacket+0x190>)
 8001698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800169c:	429a      	cmp	r2, r3
 800169e:	d00b      	beq.n	80016b8 <_SendPacket+0x180>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80016a0:	4b07      	ldr	r3, [pc, #28]	; (80016c0 <_SendPacket+0x188>)
 80016a2:	789b      	ldrb	r3, [r3, #2]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d107      	bne.n	80016b8 <_SendPacket+0x180>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80016a8:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <_SendPacket+0x188>)
 80016aa:	2201      	movs	r2, #1
 80016ac:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80016ae:	f7ff fe7b 	bl	80013a8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80016b2:	4b03      	ldr	r3, [pc, #12]	; (80016c0 <_SendPacket+0x188>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80016b8:	3728      	adds	r7, #40	; 0x28
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20001438 	.word	0x20001438
 80016c4:	e0001004 	.word	0xe0001004
 80016c8:	2000154c 	.word	0x2000154c

080016cc <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af02      	add	r7, sp, #8
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
 80016d8:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80016da:	2300      	movs	r3, #0
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	2001      	movs	r0, #1
 80016e0:	4913      	ldr	r1, [pc, #76]	; (8001730 <SEGGER_SYSVIEW_Init+0x64>)
 80016e2:	4a14      	ldr	r2, [pc, #80]	; (8001734 <SEGGER_SYSVIEW_Init+0x68>)
 80016e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016e8:	f7ff fd30 	bl	800114c <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80016ec:	2300      	movs	r3, #0
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	2001      	movs	r0, #1
 80016f2:	490f      	ldr	r1, [pc, #60]	; (8001730 <SEGGER_SYSVIEW_Init+0x64>)
 80016f4:	4a10      	ldr	r2, [pc, #64]	; (8001738 <SEGGER_SYSVIEW_Init+0x6c>)
 80016f6:	2308      	movs	r3, #8
 80016f8:	f7ff fd92 	bl	8001220 <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80016fc:	4b0f      	ldr	r3, [pc, #60]	; (800173c <SEGGER_SYSVIEW_Init+0x70>)
 80016fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001702:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8001704:	4b0e      	ldr	r3, [pc, #56]	; (8001740 <SEGGER_SYSVIEW_Init+0x74>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a0c      	ldr	r2, [pc, #48]	; (800173c <SEGGER_SYSVIEW_Init+0x70>)
 800170a:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800170c:	4a0b      	ldr	r2, [pc, #44]	; (800173c <SEGGER_SYSVIEW_Init+0x70>)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8001712:	4a0a      	ldr	r2, [pc, #40]	; (800173c <SEGGER_SYSVIEW_Init+0x70>)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8001718:	4a08      	ldr	r2, [pc, #32]	; (800173c <SEGGER_SYSVIEW_Init+0x70>)
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800171e:	4a07      	ldr	r2, [pc, #28]	; (800173c <SEGGER_SYSVIEW_Init+0x70>)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8001724:	4b05      	ldr	r3, [pc, #20]	; (800173c <SEGGER_SYSVIEW_Init+0x70>)
 8001726:	2200      	movs	r2, #0
 8001728:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800172a:	3710      	adds	r7, #16
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	08002008 	.word	0x08002008
 8001734:	20000430 	.word	0x20000430
 8001738:	20001430 	.word	0x20001430
 800173c:	20001438 	.word	0x20001438
 8001740:	e0001004 	.word	0xe0001004

08001744 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800174c:	4a03      	ldr	r2, [pc, #12]	; (800175c <SEGGER_SYSVIEW_SetRAMBase+0x18>)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6113      	str	r3, [r2, #16]
}
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	20001438 	.word	0x20001438

08001760 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8001768:	f3ef 8311 	mrs	r3, BASEPRI
 800176c:	f04f 0120 	mov.w	r1, #32
 8001770:	f381 8811 	msr	BASEPRI, r1
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	4807      	ldr	r0, [pc, #28]	; (8001794 <SEGGER_SYSVIEW_RecordVoid+0x34>)
 8001778:	f7ff fe0a 	bl	8001390 <_PreparePacket>
 800177c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800177e:	68b8      	ldr	r0, [r7, #8]
 8001780:	68b9      	ldr	r1, [r7, #8]
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	f7ff fed8 	bl	8001538 <_SendPacket>
  RECORD_END();
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f383 8811 	msr	BASEPRI, r3
}
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20001468 	.word	0x20001468

08001798 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8001798:	b580      	push	{r7, lr}
 800179a:	b088      	sub	sp, #32
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80017a2:	f3ef 8311 	mrs	r3, BASEPRI
 80017a6:	f04f 0120 	mov.w	r1, #32
 80017aa:	f381 8811 	msr	BASEPRI, r1
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	4816      	ldr	r0, [pc, #88]	; (800180c <SEGGER_SYSVIEW_RecordU32+0x74>)
 80017b2:	f7ff fded 	bl	8001390 <_PreparePacket>
 80017b6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	61fb      	str	r3, [r7, #28]
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	61bb      	str	r3, [r7, #24]
 80017c4:	e00b      	b.n	80017de <SEGGER_SYSVIEW_RecordU32+0x46>
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	1c5a      	adds	r2, r3, #1
 80017ca:	61fa      	str	r2, [r7, #28]
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	b2d2      	uxtb	r2, r2
 80017d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80017d4:	b2d2      	uxtb	r2, r2
 80017d6:	701a      	strb	r2, [r3, #0]
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	09db      	lsrs	r3, r3, #7
 80017dc:	61bb      	str	r3, [r7, #24]
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	2b7f      	cmp	r3, #127	; 0x7f
 80017e2:	d8f0      	bhi.n	80017c6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	1c5a      	adds	r2, r3, #1
 80017e8:	61fa      	str	r2, [r7, #28]
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	b2d2      	uxtb	r2, r2
 80017ee:	701a      	strb	r2, [r3, #0]
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80017f4:	6938      	ldr	r0, [r7, #16]
 80017f6:	68f9      	ldr	r1, [r7, #12]
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	f7ff fe9d 	bl	8001538 <_SendPacket>
  RECORD_END();
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	f383 8811 	msr	BASEPRI, r3
}
 8001804:	3720      	adds	r7, #32
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20001468 	.word	0x20001468

08001810 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8001810:	b580      	push	{r7, lr}
 8001812:	b08c      	sub	sp, #48	; 0x30
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800181c:	f3ef 8311 	mrs	r3, BASEPRI
 8001820:	f04f 0120 	mov.w	r1, #32
 8001824:	f381 8811 	msr	BASEPRI, r1
 8001828:	61fb      	str	r3, [r7, #28]
 800182a:	4824      	ldr	r0, [pc, #144]	; (80018bc <SEGGER_SYSVIEW_RecordU32x2+0xac>)
 800182c:	f7ff fdb0 	bl	8001390 <_PreparePacket>
 8001830:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	62fb      	str	r3, [r7, #44]	; 0x2c
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	62bb      	str	r3, [r7, #40]	; 0x28
 800183e:	e00b      	b.n	8001858 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8001840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001842:	1c5a      	adds	r2, r3, #1
 8001844:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001846:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001848:	b2d2      	uxtb	r2, r2
 800184a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	701a      	strb	r2, [r3, #0]
 8001852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001854:	09db      	lsrs	r3, r3, #7
 8001856:	62bb      	str	r3, [r7, #40]	; 0x28
 8001858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800185a:	2b7f      	cmp	r3, #127	; 0x7f
 800185c:	d8f0      	bhi.n	8001840 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800185e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001860:	1c5a      	adds	r2, r3, #1
 8001862:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001864:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	701a      	strb	r2, [r3, #0]
 800186a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800186c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	627b      	str	r3, [r7, #36]	; 0x24
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	623b      	str	r3, [r7, #32]
 8001876:	e00b      	b.n	8001890 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	1c5a      	adds	r2, r3, #1
 800187c:	627a      	str	r2, [r7, #36]	; 0x24
 800187e:	6a3a      	ldr	r2, [r7, #32]
 8001880:	b2d2      	uxtb	r2, r2
 8001882:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001886:	b2d2      	uxtb	r2, r2
 8001888:	701a      	strb	r2, [r3, #0]
 800188a:	6a3b      	ldr	r3, [r7, #32]
 800188c:	09db      	lsrs	r3, r3, #7
 800188e:	623b      	str	r3, [r7, #32]
 8001890:	6a3b      	ldr	r3, [r7, #32]
 8001892:	2b7f      	cmp	r3, #127	; 0x7f
 8001894:	d8f0      	bhi.n	8001878 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8001896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001898:	1c5a      	adds	r2, r3, #1
 800189a:	627a      	str	r2, [r7, #36]	; 0x24
 800189c:	6a3a      	ldr	r2, [r7, #32]
 800189e:	b2d2      	uxtb	r2, r2
 80018a0:	701a      	strb	r2, [r3, #0]
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80018a6:	69b8      	ldr	r0, [r7, #24]
 80018a8:	6979      	ldr	r1, [r7, #20]
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	f7ff fe44 	bl	8001538 <_SendPacket>
  RECORD_END();
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f383 8811 	msr	BASEPRI, r3
}
 80018b6:	3730      	adds	r7, #48	; 0x30
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20001468 	.word	0x20001468

080018c0 <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08c      	sub	sp, #48	; 0x30
 80018c4:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 80018c6:	4b59      	ldr	r3, [pc, #356]	; (8001a2c <SEGGER_SYSVIEW_Start+0x16c>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f040 80aa 	bne.w	8001a24 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 80018d0:	4b56      	ldr	r3, [pc, #344]	; (8001a2c <SEGGER_SYSVIEW_Start+0x16c>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80018d6:	f3ef 8311 	mrs	r3, BASEPRI
 80018da:	f04f 0120 	mov.w	r1, #32
 80018de:	f381 8811 	msr	BASEPRI, r1
 80018e2:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80018e4:	2001      	movs	r0, #1
 80018e6:	4952      	ldr	r1, [pc, #328]	; (8001a30 <SEGGER_SYSVIEW_Start+0x170>)
 80018e8:	220a      	movs	r2, #10
 80018ea:	f7ff fb91 	bl	8001010 <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80018f4:	200a      	movs	r0, #10
 80018f6:	f7ff ff33 	bl	8001760 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80018fa:	f3ef 8311 	mrs	r3, BASEPRI
 80018fe:	f04f 0120 	mov.w	r1, #32
 8001902:	f381 8811 	msr	BASEPRI, r1
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	484a      	ldr	r0, [pc, #296]	; (8001a34 <SEGGER_SYSVIEW_Start+0x174>)
 800190a:	f7ff fd41 	bl	8001390 <_PreparePacket>
 800190e:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001918:	4b44      	ldr	r3, [pc, #272]	; (8001a2c <SEGGER_SYSVIEW_Start+0x16c>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	62bb      	str	r3, [r7, #40]	; 0x28
 800191e:	e00b      	b.n	8001938 <SEGGER_SYSVIEW_Start+0x78>
 8001920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001922:	1c5a      	adds	r2, r3, #1
 8001924:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001926:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001928:	b2d2      	uxtb	r2, r2
 800192a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800192e:	b2d2      	uxtb	r2, r2
 8001930:	701a      	strb	r2, [r3, #0]
 8001932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001934:	09db      	lsrs	r3, r3, #7
 8001936:	62bb      	str	r3, [r7, #40]	; 0x28
 8001938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800193a:	2b7f      	cmp	r3, #127	; 0x7f
 800193c:	d8f0      	bhi.n	8001920 <SEGGER_SYSVIEW_Start+0x60>
 800193e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001940:	1c5a      	adds	r2, r3, #1
 8001942:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001944:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	701a      	strb	r2, [r3, #0]
 800194a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800194c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
 8001952:	4b36      	ldr	r3, [pc, #216]	; (8001a2c <SEGGER_SYSVIEW_Start+0x16c>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	623b      	str	r3, [r7, #32]
 8001958:	e00b      	b.n	8001972 <SEGGER_SYSVIEW_Start+0xb2>
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	1c5a      	adds	r2, r3, #1
 800195e:	627a      	str	r2, [r7, #36]	; 0x24
 8001960:	6a3a      	ldr	r2, [r7, #32]
 8001962:	b2d2      	uxtb	r2, r2
 8001964:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001968:	b2d2      	uxtb	r2, r2
 800196a:	701a      	strb	r2, [r3, #0]
 800196c:	6a3b      	ldr	r3, [r7, #32]
 800196e:	09db      	lsrs	r3, r3, #7
 8001970:	623b      	str	r3, [r7, #32]
 8001972:	6a3b      	ldr	r3, [r7, #32]
 8001974:	2b7f      	cmp	r3, #127	; 0x7f
 8001976:	d8f0      	bhi.n	800195a <SEGGER_SYSVIEW_Start+0x9a>
 8001978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197a:	1c5a      	adds	r2, r3, #1
 800197c:	627a      	str	r2, [r7, #36]	; 0x24
 800197e:	6a3a      	ldr	r2, [r7, #32]
 8001980:	b2d2      	uxtb	r2, r2
 8001982:	701a      	strb	r2, [r3, #0]
 8001984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001986:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	61fb      	str	r3, [r7, #28]
 800198c:	4b27      	ldr	r3, [pc, #156]	; (8001a2c <SEGGER_SYSVIEW_Start+0x16c>)
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	61bb      	str	r3, [r7, #24]
 8001992:	e00b      	b.n	80019ac <SEGGER_SYSVIEW_Start+0xec>
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	1c5a      	adds	r2, r3, #1
 8001998:	61fa      	str	r2, [r7, #28]
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	b2d2      	uxtb	r2, r2
 800199e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	701a      	strb	r2, [r3, #0]
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	09db      	lsrs	r3, r3, #7
 80019aa:	61bb      	str	r3, [r7, #24]
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	2b7f      	cmp	r3, #127	; 0x7f
 80019b0:	d8f0      	bhi.n	8001994 <SEGGER_SYSVIEW_Start+0xd4>
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	1c5a      	adds	r2, r3, #1
 80019b6:	61fa      	str	r2, [r7, #28]
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	701a      	strb	r2, [r3, #0]
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	617b      	str	r3, [r7, #20]
 80019c6:	2302      	movs	r3, #2
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	e00b      	b.n	80019e4 <SEGGER_SYSVIEW_Start+0x124>
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	1c5a      	adds	r2, r3, #1
 80019d0:	617a      	str	r2, [r7, #20]
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	b2d2      	uxtb	r2, r2
 80019d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	701a      	strb	r2, [r3, #0]
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	09db      	lsrs	r3, r3, #7
 80019e2:	613b      	str	r3, [r7, #16]
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	2b7f      	cmp	r3, #127	; 0x7f
 80019e8:	d8f0      	bhi.n	80019cc <SEGGER_SYSVIEW_Start+0x10c>
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	1c5a      	adds	r2, r3, #1
 80019ee:	617a      	str	r2, [r7, #20]
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	b2d2      	uxtb	r2, r2
 80019f4:	701a      	strb	r2, [r3, #0]
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	6839      	ldr	r1, [r7, #0]
 80019fe:	2218      	movs	r2, #24
 8001a00:	f7ff fd9a 	bl	8001538 <_SendPacket>
      RECORD_END();
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8001a0a:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <SEGGER_SYSVIEW_Start+0x16c>)
 8001a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d002      	beq.n	8001a18 <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 8001a12:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <SEGGER_SYSVIEW_Start+0x16c>)
 8001a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a16:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8001a18:	f000 f900 	bl	8001c1c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8001a1c:	f000 f8ca 	bl	8001bb4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8001a20:	f000 f9c0 	bl	8001da4 <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 8001a24:	3730      	adds	r7, #48	; 0x30
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20001438 	.word	0x20001438
 8001a30:	08002040 	.word	0x08002040
 8001a34:	20001468 	.word	0x20001468

08001a38 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8001a3e:	f3ef 8311 	mrs	r3, BASEPRI
 8001a42:	f04f 0120 	mov.w	r1, #32
 8001a46:	f381 8811 	msr	BASEPRI, r1
 8001a4a:	607b      	str	r3, [r7, #4]
 8001a4c:	480a      	ldr	r0, [pc, #40]	; (8001a78 <SEGGER_SYSVIEW_Stop+0x40>)
 8001a4e:	f7ff fc9f 	bl	8001390 <_PreparePacket>
 8001a52:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8001a54:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <SEGGER_SYSVIEW_Stop+0x44>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d007      	beq.n	8001a6c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8001a5c:	6838      	ldr	r0, [r7, #0]
 8001a5e:	6839      	ldr	r1, [r7, #0]
 8001a60:	220b      	movs	r2, #11
 8001a62:	f7ff fd69 	bl	8001538 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8001a66:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <SEGGER_SYSVIEW_Stop+0x44>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f383 8811 	msr	BASEPRI, r3
}
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20001468 	.word	0x20001468
 8001a7c:	20001438 	.word	0x20001438

08001a80 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08c      	sub	sp, #48	; 0x30
 8001a84:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8001a86:	f3ef 8311 	mrs	r3, BASEPRI
 8001a8a:	f04f 0120 	mov.w	r1, #32
 8001a8e:	f381 8811 	msr	BASEPRI, r1
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	4845      	ldr	r0, [pc, #276]	; (8001bac <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8001a96:	f7ff fc7b 	bl	8001390 <_PreparePacket>
 8001a9a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001aa4:	4b42      	ldr	r3, [pc, #264]	; (8001bb0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001aaa:	e00b      	b.n	8001ac4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8001aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aae:	1c5a      	adds	r2, r3, #1
 8001ab0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ab2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ab4:	b2d2      	uxtb	r2, r2
 8001ab6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	701a      	strb	r2, [r3, #0]
 8001abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac0:	09db      	lsrs	r3, r3, #7
 8001ac2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac6:	2b7f      	cmp	r3, #127	; 0x7f
 8001ac8:	d8f0      	bhi.n	8001aac <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8001aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001acc:	1c5a      	adds	r2, r3, #1
 8001ace:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ad0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	701a      	strb	r2, [r3, #0]
 8001ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ade:	4b34      	ldr	r3, [pc, #208]	; (8001bb0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	623b      	str	r3, [r7, #32]
 8001ae4:	e00b      	b.n	8001afe <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	1c5a      	adds	r2, r3, #1
 8001aea:	627a      	str	r2, [r7, #36]	; 0x24
 8001aec:	6a3a      	ldr	r2, [r7, #32]
 8001aee:	b2d2      	uxtb	r2, r2
 8001af0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001af4:	b2d2      	uxtb	r2, r2
 8001af6:	701a      	strb	r2, [r3, #0]
 8001af8:	6a3b      	ldr	r3, [r7, #32]
 8001afa:	09db      	lsrs	r3, r3, #7
 8001afc:	623b      	str	r3, [r7, #32]
 8001afe:	6a3b      	ldr	r3, [r7, #32]
 8001b00:	2b7f      	cmp	r3, #127	; 0x7f
 8001b02:	d8f0      	bhi.n	8001ae6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8001b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b06:	1c5a      	adds	r2, r3, #1
 8001b08:	627a      	str	r2, [r7, #36]	; 0x24
 8001b0a:	6a3a      	ldr	r2, [r7, #32]
 8001b0c:	b2d2      	uxtb	r2, r2
 8001b0e:	701a      	strb	r2, [r3, #0]
 8001b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b12:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	61fb      	str	r3, [r7, #28]
 8001b18:	4b25      	ldr	r3, [pc, #148]	; (8001bb0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	61bb      	str	r3, [r7, #24]
 8001b1e:	e00b      	b.n	8001b38 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	1c5a      	adds	r2, r3, #1
 8001b24:	61fa      	str	r2, [r7, #28]
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	701a      	strb	r2, [r3, #0]
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	09db      	lsrs	r3, r3, #7
 8001b36:	61bb      	str	r3, [r7, #24]
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	2b7f      	cmp	r3, #127	; 0x7f
 8001b3c:	d8f0      	bhi.n	8001b20 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	1c5a      	adds	r2, r3, #1
 8001b42:	61fa      	str	r2, [r7, #28]
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	b2d2      	uxtb	r2, r2
 8001b48:	701a      	strb	r2, [r3, #0]
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	617b      	str	r3, [r7, #20]
 8001b52:	2302      	movs	r3, #2
 8001b54:	613b      	str	r3, [r7, #16]
 8001b56:	e00b      	b.n	8001b70 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	1c5a      	adds	r2, r3, #1
 8001b5c:	617a      	str	r2, [r7, #20]
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	b2d2      	uxtb	r2, r2
 8001b62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001b66:	b2d2      	uxtb	r2, r2
 8001b68:	701a      	strb	r2, [r3, #0]
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	09db      	lsrs	r3, r3, #7
 8001b6e:	613b      	str	r3, [r7, #16]
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	2b7f      	cmp	r3, #127	; 0x7f
 8001b74:	d8f0      	bhi.n	8001b58 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	1c5a      	adds	r2, r3, #1
 8001b7a:	617a      	str	r2, [r7, #20]
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	b2d2      	uxtb	r2, r2
 8001b80:	701a      	strb	r2, [r3, #0]
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8001b86:	68b8      	ldr	r0, [r7, #8]
 8001b88:	6879      	ldr	r1, [r7, #4]
 8001b8a:	2218      	movs	r2, #24
 8001b8c:	f7ff fcd4 	bl	8001538 <_SendPacket>
  RECORD_END();
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8001b96:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8001b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d002      	beq.n	8001ba4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8001b9e:	4b04      	ldr	r3, [pc, #16]	; (8001bb0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba2:	4798      	blx	r3
  }
}
 8001ba4:	3730      	adds	r7, #48	; 0x30
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20001468 	.word	0x20001468
 8001bb0:	20001438 	.word	0x20001438

08001bb4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8001bb8:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <SEGGER_SYSVIEW_SendTaskList+0x20>)
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d008      	beq.n	8001bd2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8001bc0:	4b04      	ldr	r3, [pc, #16]	; (8001bd4 <SEGGER_SYSVIEW_SendTaskList+0x20>)
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8001bca:	4b02      	ldr	r3, [pc, #8]	; (8001bd4 <SEGGER_SYSVIEW_SendTaskList+0x20>)
 8001bcc:	6a1b      	ldr	r3, [r3, #32]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	4798      	blx	r3
  }
}
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	20001438 	.word	0x20001438

08001bd8 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8001be0:	f3ef 8311 	mrs	r3, BASEPRI
 8001be4:	f04f 0120 	mov.w	r1, #32
 8001be8:	f381 8811 	msr	BASEPRI, r1
 8001bec:	617b      	str	r3, [r7, #20]
 8001bee:	480a      	ldr	r0, [pc, #40]	; (8001c18 <SEGGER_SYSVIEW_SendSysDesc+0x40>)
 8001bf0:	f7ff fbce 	bl	8001390 <_PreparePacket>
 8001bf4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8001bf6:	6938      	ldr	r0, [r7, #16]
 8001bf8:	6879      	ldr	r1, [r7, #4]
 8001bfa:	2280      	movs	r2, #128	; 0x80
 8001bfc:	f7ff fb7a 	bl	80012f4 <_EncodeStr>
 8001c00:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8001c02:	6938      	ldr	r0, [r7, #16]
 8001c04:	68f9      	ldr	r1, [r7, #12]
 8001c06:	220e      	movs	r2, #14
 8001c08:	f7ff fc96 	bl	8001538 <_SendPacket>
  RECORD_END();
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	f383 8811 	msr	BASEPRI, r3
}
 8001c12:	3718      	adds	r7, #24
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	20001468 	.word	0x20001468

08001c1c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8001c1c:	b5b0      	push	{r4, r5, r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8001c22:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <SEGGER_SYSVIEW_RecordSystime+0x4c>)
 8001c24:	6a1b      	ldr	r3, [r3, #32]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d015      	beq.n	8001c56 <SEGGER_SYSVIEW_RecordSystime+0x3a>
 8001c2a:	4b0f      	ldr	r3, [pc, #60]	; (8001c68 <SEGGER_SYSVIEW_RecordSystime+0x4c>)
 8001c2c:	6a1b      	ldr	r3, [r3, #32]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d010      	beq.n	8001c56 <SEGGER_SYSVIEW_RecordSystime+0x3a>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8001c34:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <SEGGER_SYSVIEW_RecordSystime+0x4c>)
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4798      	blx	r3
 8001c3c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8001c40:	6839      	ldr	r1, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8001c42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c46:	001c      	movs	r4, r3
 8001c48:	2500      	movs	r5, #0
void SEGGER_SYSVIEW_RecordSystime(void) {
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8001c4a:	4623      	mov	r3, r4
 8001c4c:	200d      	movs	r0, #13
 8001c4e:	461a      	mov	r2, r3
 8001c50:	f7ff fdde 	bl	8001810 <SEGGER_SYSVIEW_RecordU32x2>
 8001c54:	e005      	b.n	8001c62 <SEGGER_SYSVIEW_RecordSystime+0x46>
                               (U32)(Systime),
                               (U32)(Systime >> 32));
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8001c56:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <SEGGER_SYSVIEW_RecordSystime+0x50>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	200c      	movs	r0, #12
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	f7ff fd9b 	bl	8001798 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bdb0      	pop	{r4, r5, r7, pc}
 8001c68:	20001438 	.word	0x20001438
 8001c6c:	e0001004 	.word	0xe0001004

08001c70 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08c      	sub	sp, #48	; 0x30
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8001c7a:	4b3a      	ldr	r3, [pc, #232]	; (8001d64 <SEGGER_SYSVIEW_SendModule+0xf4>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d06c      	beq.n	8001d5c <SEGGER_SYSVIEW_SendModule+0xec>
    pModule = _pFirstModule;
 8001c82:	4b38      	ldr	r3, [pc, #224]	; (8001d64 <SEGGER_SYSVIEW_SendModule+0xf4>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8001c88:	2300      	movs	r3, #0
 8001c8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c8c:	e009      	b.n	8001ca2 <SEGGER_SYSVIEW_SendModule+0x32>
      pModule = pModule->pNext;
 8001c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8001c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d100      	bne.n	8001c9c <SEGGER_SYSVIEW_SendModule+0x2c>
        break;
 8001c9a:	e006      	b.n	8001caa <SEGGER_SYSVIEW_SendModule+0x3a>
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
    pModule = _pFirstModule;
    for (n = 0; n < ModuleId; n++) {
 8001c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ca2:	79fa      	ldrb	r2, [r7, #7]
 8001ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d8f1      	bhi.n	8001c8e <SEGGER_SYSVIEW_SendModule+0x1e>
      pModule = pModule->pNext;
      if (pModule == 0) {
        break;
      }
    }
    if (pModule != 0) {
 8001caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d055      	beq.n	8001d5c <SEGGER_SYSVIEW_SendModule+0xec>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8001cb0:	f3ef 8311 	mrs	r3, BASEPRI
 8001cb4:	f04f 0120 	mov.w	r1, #32
 8001cb8:	f381 8811 	msr	BASEPRI, r1
 8001cbc:	617b      	str	r3, [r7, #20]
 8001cbe:	482a      	ldr	r0, [pc, #168]	; (8001d68 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8001cc0:	f7ff fb66 	bl	8001390 <_PreparePacket>
 8001cc4:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	623b      	str	r3, [r7, #32]
 8001cd2:	e00b      	b.n	8001cec <SEGGER_SYSVIEW_SendModule+0x7c>
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	1c5a      	adds	r2, r3, #1
 8001cd8:	627a      	str	r2, [r7, #36]	; 0x24
 8001cda:	6a3a      	ldr	r2, [r7, #32]
 8001cdc:	b2d2      	uxtb	r2, r2
 8001cde:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001ce2:	b2d2      	uxtb	r2, r2
 8001ce4:	701a      	strb	r2, [r3, #0]
 8001ce6:	6a3b      	ldr	r3, [r7, #32]
 8001ce8:	09db      	lsrs	r3, r3, #7
 8001cea:	623b      	str	r3, [r7, #32]
 8001cec:	6a3b      	ldr	r3, [r7, #32]
 8001cee:	2b7f      	cmp	r3, #127	; 0x7f
 8001cf0:	d8f0      	bhi.n	8001cd4 <SEGGER_SYSVIEW_SendModule+0x64>
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	1c5a      	adds	r2, r3, #1
 8001cf6:	627a      	str	r2, [r7, #36]	; 0x24
 8001cf8:	6a3a      	ldr	r2, [r7, #32]
 8001cfa:	b2d2      	uxtb	r2, r2
 8001cfc:	701a      	strb	r2, [r3, #0]
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	61fb      	str	r3, [r7, #28]
 8001d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	61bb      	str	r3, [r7, #24]
 8001d0c:	e00b      	b.n	8001d26 <SEGGER_SYSVIEW_SendModule+0xb6>
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	1c5a      	adds	r2, r3, #1
 8001d12:	61fa      	str	r2, [r7, #28]
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001d1c:	b2d2      	uxtb	r2, r2
 8001d1e:	701a      	strb	r2, [r3, #0]
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	09db      	lsrs	r3, r3, #7
 8001d24:	61bb      	str	r3, [r7, #24]
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	2b7f      	cmp	r3, #127	; 0x7f
 8001d2a:	d8f0      	bhi.n	8001d0e <SEGGER_SYSVIEW_SendModule+0x9e>
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	1c5a      	adds	r2, r3, #1
 8001d30:	61fa      	str	r2, [r7, #28]
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	b2d2      	uxtb	r2, r2
 8001d36:	701a      	strb	r2, [r3, #0]
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8001d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68f8      	ldr	r0, [r7, #12]
 8001d42:	4619      	mov	r1, r3
 8001d44:	2280      	movs	r2, #128	; 0x80
 8001d46:	f7ff fad5 	bl	80012f4 <_EncodeStr>
 8001d4a:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8001d4c:	6938      	ldr	r0, [r7, #16]
 8001d4e:	68f9      	ldr	r1, [r7, #12]
 8001d50:	2216      	movs	r2, #22
 8001d52:	f7ff fbf1 	bl	8001538 <_SendPacket>
      RECORD_END();
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8001d5c:	3730      	adds	r7, #48	; 0x30
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20001460 	.word	0x20001460
 8001d68:	20001468 	.word	0x20001468

08001d6c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8001d72:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <SEGGER_SYSVIEW_SendModuleDescription+0x34>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00f      	beq.n	8001d9a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8001d7a:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <SEGGER_SYSVIEW_SendModuleDescription+0x34>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d002      	beq.n	8001d8e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1f2      	bne.n	8001d80 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	20001460 	.word	0x20001460

08001da4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8001daa:	f3ef 8311 	mrs	r3, BASEPRI
 8001dae:	f04f 0120 	mov.w	r1, #32
 8001db2:	f381 8811 	msr	BASEPRI, r1
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	4816      	ldr	r0, [pc, #88]	; (8001e14 <SEGGER_SYSVIEW_SendNumModules+0x70>)
 8001dba:	f7ff fae9 	bl	8001390 <_PreparePacket>
 8001dbe:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	617b      	str	r3, [r7, #20]
 8001dc8:	4b13      	ldr	r3, [pc, #76]	; (8001e18 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	613b      	str	r3, [r7, #16]
 8001dce:	e00b      	b.n	8001de8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	1c5a      	adds	r2, r3, #1
 8001dd4:	617a      	str	r2, [r7, #20]
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	b2d2      	uxtb	r2, r2
 8001dda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	701a      	strb	r2, [r3, #0]
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	09db      	lsrs	r3, r3, #7
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	2b7f      	cmp	r3, #127	; 0x7f
 8001dec:	d8f0      	bhi.n	8001dd0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	1c5a      	adds	r2, r3, #1
 8001df2:	617a      	str	r2, [r7, #20]
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	b2d2      	uxtb	r2, r2
 8001df8:	701a      	strb	r2, [r3, #0]
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8001dfe:	68b8      	ldr	r0, [r7, #8]
 8001e00:	6879      	ldr	r1, [r7, #4]
 8001e02:	221b      	movs	r2, #27
 8001e04:	f7ff fb98 	bl	8001538 <_SendPacket>
  RECORD_END();
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f383 8811 	msr	BASEPRI, r3
}
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	20001468 	.word	0x20001468
 8001e18:	20001464 	.word	0x20001464

08001e1c <SEGGER_SYSVIEW_Print>:
*    Print a string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Print(const char* s) {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b08a      	sub	sp, #40	; 0x28
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8001e24:	f3ef 8311 	mrs	r3, BASEPRI
 8001e28:	f04f 0120 	mov.w	r1, #32
 8001e2c:	f381 8811 	msr	BASEPRI, r1
 8001e30:	617b      	str	r3, [r7, #20]
 8001e32:	4826      	ldr	r0, [pc, #152]	; (8001ecc <SEGGER_SYSVIEW_Print+0xb0>)
 8001e34:	f7ff faac 	bl	8001390 <_PreparePacket>
 8001e38:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8001e3a:	6938      	ldr	r0, [r7, #16]
 8001e3c:	6879      	ldr	r1, [r7, #4]
 8001e3e:	2280      	movs	r2, #128	; 0x80
 8001e40:	f7ff fa58 	bl	80012f4 <_EncodeStr>
 8001e44:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_LOG);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	623b      	str	r3, [r7, #32]
 8001e4e:	e00b      	b.n	8001e68 <SEGGER_SYSVIEW_Print+0x4c>
 8001e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e52:	1c5a      	adds	r2, r3, #1
 8001e54:	627a      	str	r2, [r7, #36]	; 0x24
 8001e56:	6a3a      	ldr	r2, [r7, #32]
 8001e58:	b2d2      	uxtb	r2, r2
 8001e5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001e5e:	b2d2      	uxtb	r2, r2
 8001e60:	701a      	strb	r2, [r3, #0]
 8001e62:	6a3b      	ldr	r3, [r7, #32]
 8001e64:	09db      	lsrs	r3, r3, #7
 8001e66:	623b      	str	r3, [r7, #32]
 8001e68:	6a3b      	ldr	r3, [r7, #32]
 8001e6a:	2b7f      	cmp	r3, #127	; 0x7f
 8001e6c:	d8f0      	bhi.n	8001e50 <SEGGER_SYSVIEW_Print+0x34>
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e70:	1c5a      	adds	r2, r3, #1
 8001e72:	627a      	str	r2, [r7, #36]	; 0x24
 8001e74:	6a3a      	ldr	r2, [r7, #32]
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	701a      	strb	r2, [r3, #0]
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	61fb      	str	r3, [r7, #28]
 8001e82:	2300      	movs	r3, #0
 8001e84:	61bb      	str	r3, [r7, #24]
 8001e86:	e00b      	b.n	8001ea0 <SEGGER_SYSVIEW_Print+0x84>
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	1c5a      	adds	r2, r3, #1
 8001e8c:	61fa      	str	r2, [r7, #28]
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	701a      	strb	r2, [r3, #0]
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	09db      	lsrs	r3, r3, #7
 8001e9e:	61bb      	str	r3, [r7, #24]
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	2b7f      	cmp	r3, #127	; 0x7f
 8001ea4:	d8f0      	bhi.n	8001e88 <SEGGER_SYSVIEW_Print+0x6c>
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	1c5a      	adds	r2, r3, #1
 8001eaa:	61fa      	str	r2, [r7, #28]
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	b2d2      	uxtb	r2, r2
 8001eb0:	701a      	strb	r2, [r3, #0]
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8001eb6:	6938      	ldr	r0, [r7, #16]
 8001eb8:	68f9      	ldr	r1, [r7, #12]
 8001eba:	221a      	movs	r2, #26
 8001ebc:	f7ff fb3c 	bl	8001538 <_SendPacket>
  RECORD_END();
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	f383 8811 	msr	BASEPRI, r3
}
 8001ec6:	3728      	adds	r7, #40	; 0x28
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	20001468 	.word	0x20001468

08001ed0 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME);
 8001ed4:	4803      	ldr	r0, [pc, #12]	; (8001ee4 <_cbSendSystemDesc+0x14>)
 8001ed6:	f7ff fe7f 	bl	8001bd8 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8001eda:	4803      	ldr	r0, [pc, #12]	; (8001ee8 <_cbSendSystemDesc+0x18>)
 8001edc:	f7ff fe7c 	bl	8001bd8 <SEGGER_SYSVIEW_SendSysDesc>
}
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	08002010 	.word	0x08002010
 8001ee8:	08002030 	.word	0x08002030

08001eec <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001ef0:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <SEGGER_SYSVIEW_Conf+0x24>)
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <SEGGER_SYSVIEW_Conf+0x24>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4610      	mov	r0, r2
 8001efa:	4619      	mov	r1, r3
 8001efc:	2200      	movs	r2, #0
 8001efe:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <SEGGER_SYSVIEW_Conf+0x28>)
 8001f00:	f7ff fbe4 	bl	80016cc <SEGGER_SYSVIEW_Init>
                      0, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001f04:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001f08:	f7ff fc1c 	bl	8001744 <SEGGER_SYSVIEW_SetRAMBase>
}
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	20000000 	.word	0x20000000
 8001f14:	08001ed1 	.word	0x08001ed1

08001f18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f50 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001f1c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001f1e:	e003      	b.n	8001f28 <LoopCopyDataInit>

08001f20 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001f20:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001f22:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001f24:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001f26:	3104      	adds	r1, #4

08001f28 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001f28:	480b      	ldr	r0, [pc, #44]	; (8001f58 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001f2a:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001f2c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001f2e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001f30:	d3f6      	bcc.n	8001f20 <CopyDataInit>
	ldr	r2, =_sbss
 8001f32:	4a0b      	ldr	r2, [pc, #44]	; (8001f60 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001f34:	e002      	b.n	8001f3c <LoopFillZerobss>

08001f36 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001f36:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001f38:	f842 3b04 	str.w	r3, [r2], #4

08001f3c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001f3c:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <LoopForever+0x16>)
	cmp	r2, r3
 8001f3e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001f40:	d3f9      	bcc.n	8001f36 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f42:	f7fe fe4f 	bl	8000be4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f46:	f000 f811 	bl	8001f6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f4a:	f7fe fce1 	bl	8000910 <main>

08001f4e <LoopForever>:

LoopForever:
    b LoopForever
 8001f4e:	e7fe      	b.n	8001f4e <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f50:	20004000 	.word	0x20004000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8001f54:	08002054 	.word	0x08002054
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001f58:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001f5c:	20000004 	.word	0x20000004
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8001f60:	20000004 	.word	0x20000004
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8001f64:	200015f4 	.word	0x200015f4

08001f68 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f68:	e7fe      	b.n	8001f68 <ADC1_IRQHandler>
	...

08001f6c <__libc_init_array>:
 8001f6c:	b570      	push	{r4, r5, r6, lr}
 8001f6e:	4b0e      	ldr	r3, [pc, #56]	; (8001fa8 <__libc_init_array+0x3c>)
 8001f70:	4c0e      	ldr	r4, [pc, #56]	; (8001fac <__libc_init_array+0x40>)
 8001f72:	1ae4      	subs	r4, r4, r3
 8001f74:	10a4      	asrs	r4, r4, #2
 8001f76:	2500      	movs	r5, #0
 8001f78:	461e      	mov	r6, r3
 8001f7a:	42a5      	cmp	r5, r4
 8001f7c:	d004      	beq.n	8001f88 <__libc_init_array+0x1c>
 8001f7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f82:	4798      	blx	r3
 8001f84:	3501      	adds	r5, #1
 8001f86:	e7f8      	b.n	8001f7a <__libc_init_array+0xe>
 8001f88:	f000 f822 	bl	8001fd0 <_init>
 8001f8c:	4c08      	ldr	r4, [pc, #32]	; (8001fb0 <__libc_init_array+0x44>)
 8001f8e:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <__libc_init_array+0x48>)
 8001f90:	1ae4      	subs	r4, r4, r3
 8001f92:	10a4      	asrs	r4, r4, #2
 8001f94:	2500      	movs	r5, #0
 8001f96:	461e      	mov	r6, r3
 8001f98:	42a5      	cmp	r5, r4
 8001f9a:	d004      	beq.n	8001fa6 <__libc_init_array+0x3a>
 8001f9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001fa0:	4798      	blx	r3
 8001fa2:	3501      	adds	r5, #1
 8001fa4:	e7f8      	b.n	8001f98 <__libc_init_array+0x2c>
 8001fa6:	bd70      	pop	{r4, r5, r6, pc}
 8001fa8:	0800204c 	.word	0x0800204c
 8001fac:	0800204c 	.word	0x0800204c
 8001fb0:	08002050 	.word	0x08002050
 8001fb4:	0800204c 	.word	0x0800204c

08001fb8 <memcpy>:
 8001fb8:	b510      	push	{r4, lr}
 8001fba:	1e43      	subs	r3, r0, #1
 8001fbc:	440a      	add	r2, r1
 8001fbe:	4291      	cmp	r1, r2
 8001fc0:	d004      	beq.n	8001fcc <memcpy+0x14>
 8001fc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001fc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001fca:	e7f8      	b.n	8001fbe <memcpy+0x6>
 8001fcc:	bd10      	pop	{r4, pc}
	...

08001fd0 <_init>:
 8001fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fd2:	bf00      	nop
 8001fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fd6:	bc08      	pop	{r3}
 8001fd8:	469e      	mov	lr, r3
 8001fda:	4770      	bx	lr

08001fdc <_fini>:
 8001fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fde:	bf00      	nop
 8001fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fe2:	bc08      	pop	{r3}
 8001fe4:	469e      	mov	lr, r3
 8001fe6:	4770      	bx	lr
