
build/STM32F3.elf:     file format elf32-littlearm


Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000008 	.word	0x20000008
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005298 	.word	0x08005298

080001b4 <frame_dummy>:
 80001b4:	4b08      	ldr	r3, [pc, #32]	; (80001d8 <frame_dummy+0x24>)
 80001b6:	b510      	push	{r4, lr}
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4808      	ldr	r0, [pc, #32]	; (80001dc <frame_dummy+0x28>)
 80001bc:	4908      	ldr	r1, [pc, #32]	; (80001e0 <frame_dummy+0x2c>)
 80001be:	f3af 8000 	nop.w
 80001c2:	4808      	ldr	r0, [pc, #32]	; (80001e4 <frame_dummy+0x30>)
 80001c4:	6803      	ldr	r3, [r0, #0]
 80001c6:	b903      	cbnz	r3, 80001ca <frame_dummy+0x16>
 80001c8:	bd10      	pop	{r4, pc}
 80001ca:	4b07      	ldr	r3, [pc, #28]	; (80001e8 <frame_dummy+0x34>)
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d0fb      	beq.n	80001c8 <frame_dummy+0x14>
 80001d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80001d4:	4718      	bx	r3
 80001d6:	bf00      	nop
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08005298 	.word	0x08005298
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	20000008 	.word	0x20000008
 80001e8:	00000000 	.word	0x00000000

080001ec <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b082      	sub	sp, #8
 80001f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80001f2:	4a1e      	ldr	r2, [pc, #120]	; (800026c <HAL_MspInit+0x80>)
 80001f4:	4b1d      	ldr	r3, [pc, #116]	; (800026c <HAL_MspInit+0x80>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	f043 0301 	orr.w	r3, r3, #1
 80001fc:	6193      	str	r3, [r2, #24]
 80001fe:	4b1b      	ldr	r3, [pc, #108]	; (800026c <HAL_MspInit+0x80>)
 8000200:	699b      	ldr	r3, [r3, #24]
 8000202:	f003 0301 	and.w	r3, r3, #1
 8000206:	607b      	str	r3, [r7, #4]
 8000208:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800020a:	2003      	movs	r0, #3
 800020c:	f000 fb02 	bl	8000814 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000210:	f06f 000b 	mvn.w	r0, #11
 8000214:	2100      	movs	r1, #0
 8000216:	2200      	movs	r2, #0
 8000218:	f000 fb06 	bl	8000828 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800021c:	f06f 000a 	mvn.w	r0, #10
 8000220:	2100      	movs	r1, #0
 8000222:	2200      	movs	r2, #0
 8000224:	f000 fb00 	bl	8000828 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000228:	f06f 0009 	mvn.w	r0, #9
 800022c:	2100      	movs	r1, #0
 800022e:	2200      	movs	r2, #0
 8000230:	f000 fafa 	bl	8000828 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000234:	f06f 0004 	mvn.w	r0, #4
 8000238:	2100      	movs	r1, #0
 800023a:	2200      	movs	r2, #0
 800023c:	f000 faf4 	bl	8000828 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000240:	f06f 0003 	mvn.w	r0, #3
 8000244:	2100      	movs	r1, #0
 8000246:	2200      	movs	r2, #0
 8000248:	f000 faee 	bl	8000828 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800024c:	f06f 0001 	mvn.w	r0, #1
 8000250:	210f      	movs	r1, #15
 8000252:	2200      	movs	r2, #0
 8000254:	f000 fae8 	bl	8000828 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8000258:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800025c:	210f      	movs	r1, #15
 800025e:	2200      	movs	r2, #0
 8000260:	f000 fae2 	bl	8000828 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000264:	3708      	adds	r7, #8
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	40021000 	.word	0x40021000

08000270 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b08c      	sub	sp, #48	; 0x30
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000278:	2300      	movs	r3, #0
 800027a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800027c:	2300      	movs	r3, #0
 800027e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8000280:	2019      	movs	r0, #25
 8000282:	6879      	ldr	r1, [r7, #4]
 8000284:	2200      	movs	r2, #0
 8000286:	f000 facf 	bl	8000828 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 800028a:	2019      	movs	r0, #25
 800028c:	f000 fae8 	bl	8000860 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000290:	4a1e      	ldr	r2, [pc, #120]	; (800030c <HAL_InitTick+0x9c>)
 8000292:	4b1e      	ldr	r3, [pc, #120]	; (800030c <HAL_InitTick+0x9c>)
 8000294:	699b      	ldr	r3, [r3, #24]
 8000296:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800029a:	6193      	str	r3, [r2, #24]
 800029c:	4b1b      	ldr	r3, [pc, #108]	; (800030c <HAL_InitTick+0x9c>)
 800029e:	699b      	ldr	r3, [r3, #24]
 80002a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002a4:	60fb      	str	r3, [r7, #12]
 80002a6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80002a8:	f107 0214 	add.w	r2, r7, #20
 80002ac:	f107 0310 	add.w	r3, r7, #16
 80002b0:	4610      	mov	r0, r2
 80002b2:	4619      	mov	r1, r3
 80002b4:	f001 fe70 	bl	8001f98 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80002b8:	f001 fe4c 	bl	8001f54 <HAL_RCC_GetPCLK2Freq>
 80002bc:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80002be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002c0:	4a13      	ldr	r2, [pc, #76]	; (8000310 <HAL_InitTick+0xa0>)
 80002c2:	fba2 2303 	umull	r2, r3, r2, r3
 80002c6:	0c9b      	lsrs	r3, r3, #18
 80002c8:	3b01      	subs	r3, #1
 80002ca:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80002cc:	4b11      	ldr	r3, [pc, #68]	; (8000314 <HAL_InitTick+0xa4>)
 80002ce:	4a12      	ldr	r2, [pc, #72]	; (8000318 <HAL_InitTick+0xa8>)
 80002d0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80002d2:	4b10      	ldr	r3, [pc, #64]	; (8000314 <HAL_InitTick+0xa4>)
 80002d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80002d8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80002da:	4a0e      	ldr	r2, [pc, #56]	; (8000314 <HAL_InitTick+0xa4>)
 80002dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002de:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80002e0:	4b0c      	ldr	r3, [pc, #48]	; (8000314 <HAL_InitTick+0xa4>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002e6:	4b0b      	ldr	r3, [pc, #44]	; (8000314 <HAL_InitTick+0xa4>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80002ec:	4809      	ldr	r0, [pc, #36]	; (8000314 <HAL_InitTick+0xa4>)
 80002ee:	f002 f80b 	bl	8002308 <HAL_TIM_Base_Init>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d104      	bne.n	8000302 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80002f8:	4806      	ldr	r0, [pc, #24]	; (8000314 <HAL_InitTick+0xa4>)
 80002fa:	f002 f83b 	bl	8002374 <HAL_TIM_Base_Start_IT>
 80002fe:	4603      	mov	r3, r0
 8000300:	e000      	b.n	8000304 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000302:	2301      	movs	r3, #1
}
 8000304:	4618      	mov	r0, r3
 8000306:	3730      	adds	r7, #48	; 0x30
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	40021000 	.word	0x40021000
 8000310:	431bde83 	.word	0x431bde83
 8000314:	20002b40 	.word	0x20002b40
 8000318:	40012c00 	.word	0x40012c00

0800031c <blink_task>:
void Error_Handler(void);
static void MX_GPIO_Init(void);
static void blink_task( void *pvParameters);

void blink_task(void *pvParameters)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
	/*just to remove compiler warning*/
	(void) pvParameters;
	while(1){
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);	// Debugging, watch Calculation Time
 8000324:	4809      	ldr	r0, [pc, #36]	; (800034c <blink_task+0x30>)
 8000326:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800032a:	2201      	movs	r2, #1
 800032c:	f001 ffd4 	bl	80022d8 <HAL_GPIO_WritePin>

		  vTaskDelay(100);
 8000330:	2064      	movs	r0, #100	; 0x64
 8000332:	f002 ffc7 	bl	80032c4 <vTaskDelay>

		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	// Debugging, watch Calculation Time
 8000336:	4805      	ldr	r0, [pc, #20]	; (800034c <blink_task+0x30>)
 8000338:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800033c:	2200      	movs	r2, #0
 800033e:	f001 ffcb 	bl	80022d8 <HAL_GPIO_WritePin>
		  vTaskDelay(100);
 8000342:	2064      	movs	r0, #100	; 0x64
 8000344:	f002 ffbe 	bl	80032c4 <vTaskDelay>

	}
 8000348:	e7ec      	b.n	8000324 <blink_task+0x8>
 800034a:	bf00      	nop
 800034c:	48000400 	.word	0x48000400

08000350 <main>:
}


int main(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af02      	add	r7, sp, #8

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000356:	f000 f965 	bl	8000624 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800035a:	f000 f815 	bl	8000388 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800035e:	f000 f85b 	bl	8000418 <MX_GPIO_Init>

  SEGGER_SYSVIEW_Conf();
 8000362:	f000 f933 	bl	80005cc <SEGGER_SYSVIEW_Conf>

  xTaskCreate(blink_task, "Blink_task", configMINIMAL_STACK_SIZE, NULL, 1, ( TaskHandle_t * )NULL);
 8000366:	2301      	movs	r3, #1
 8000368:	9300      	str	r3, [sp, #0]
 800036a:	2300      	movs	r3, #0
 800036c:	9301      	str	r3, [sp, #4]
 800036e:	4804      	ldr	r0, [pc, #16]	; (8000380 <main+0x30>)
 8000370:	4904      	ldr	r1, [pc, #16]	; (8000384 <main+0x34>)
 8000372:	2280      	movs	r2, #128	; 0x80
 8000374:	2300      	movs	r3, #0
 8000376:	f002 fe4f 	bl	8003018 <xTaskCreate>
  vTaskStartScheduler();
 800037a:	f002 ffd9 	bl	8003330 <vTaskStartScheduler>

  /* Infinite loop */
  while (1)
  {

  }
 800037e:	e7fe      	b.n	800037e <main+0x2e>
 8000380:	0800031d 	.word	0x0800031d
 8000384:	080052b0 	.word	0x080052b0

08000388 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b090      	sub	sp, #64	; 0x40
 800038c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800038e:	2302      	movs	r3, #2
 8000390:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000392:	2301      	movs	r3, #1
 8000394:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000396:	2310      	movs	r3, #16
 8000398:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800039a:	2302      	movs	r3, #2
 800039c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800039e:	2300      	movs	r3, #0
 80003a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80003a2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80003a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003a8:	f107 0318 	add.w	r3, r7, #24
 80003ac:	4618      	mov	r0, r3
 80003ae:	f000 fa8d 	bl	80008cc <HAL_RCC_OscConfig>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80003b8:	f000 f89e 	bl	80004f8 <Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003bc:	230f      	movs	r3, #15
 80003be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003c0:	2302      	movs	r3, #2
 80003c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c4:	2300      	movs	r3, #0
 80003c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ce:	2300      	movs	r3, #0
 80003d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003d2:	1d3b      	adds	r3, r7, #4
 80003d4:	4618      	mov	r0, r3
 80003d6:	2102      	movs	r1, #2
 80003d8:	f001 fb44 	bl	8001a64 <HAL_RCC_ClockConfig>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80003e2:	f000 f889 	bl	80004f8 <Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80003e6:	f001 fda9 	bl	8001f3c <HAL_RCC_GetHCLKFreq>
 80003ea:	4602      	mov	r2, r0
 80003ec:	4b09      	ldr	r3, [pc, #36]	; (8000414 <SystemClock_Config+0x8c>)
 80003ee:	fba3 2302 	umull	r2, r3, r3, r2
 80003f2:	099b      	lsrs	r3, r3, #6
 80003f4:	4618      	mov	r0, r3
 80003f6:	f000 fa41 	bl	800087c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80003fa:	2004      	movs	r0, #4
 80003fc:	f000 fa4a 	bl	8000894 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8000400:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000404:	210f      	movs	r1, #15
 8000406:	2200      	movs	r2, #0
 8000408:	f000 fa0e 	bl	8000828 <HAL_NVIC_SetPriority>
}
 800040c:	3740      	adds	r7, #64	; 0x40
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	10624dd3 	.word	0x10624dd3

08000418 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b08a      	sub	sp, #40	; 0x28
 800041c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800041e:	4a2a      	ldr	r2, [pc, #168]	; (80004c8 <MX_GPIO_Init+0xb0>)
 8000420:	4b29      	ldr	r3, [pc, #164]	; (80004c8 <MX_GPIO_Init+0xb0>)
 8000422:	695b      	ldr	r3, [r3, #20]
 8000424:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000428:	6153      	str	r3, [r2, #20]
 800042a:	4b27      	ldr	r3, [pc, #156]	; (80004c8 <MX_GPIO_Init+0xb0>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000432:	613b      	str	r3, [r7, #16]
 8000434:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000436:	4a24      	ldr	r2, [pc, #144]	; (80004c8 <MX_GPIO_Init+0xb0>)
 8000438:	4b23      	ldr	r3, [pc, #140]	; (80004c8 <MX_GPIO_Init+0xb0>)
 800043a:	695b      	ldr	r3, [r3, #20]
 800043c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000440:	6153      	str	r3, [r2, #20]
 8000442:	4b21      	ldr	r3, [pc, #132]	; (80004c8 <MX_GPIO_Init+0xb0>)
 8000444:	695b      	ldr	r3, [r3, #20]
 8000446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800044a:	60fb      	str	r3, [r7, #12]
 800044c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800044e:	4a1e      	ldr	r2, [pc, #120]	; (80004c8 <MX_GPIO_Init+0xb0>)
 8000450:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <MX_GPIO_Init+0xb0>)
 8000452:	695b      	ldr	r3, [r3, #20]
 8000454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000458:	6153      	str	r3, [r2, #20]
 800045a:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <MX_GPIO_Init+0xb0>)
 800045c:	695b      	ldr	r3, [r3, #20]
 800045e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000462:	60bb      	str	r3, [r7, #8]
 8000464:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000466:	4a18      	ldr	r2, [pc, #96]	; (80004c8 <MX_GPIO_Init+0xb0>)
 8000468:	4b17      	ldr	r3, [pc, #92]	; (80004c8 <MX_GPIO_Init+0xb0>)
 800046a:	695b      	ldr	r3, [r3, #20]
 800046c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000470:	6153      	str	r3, [r2, #20]
 8000472:	4b15      	ldr	r3, [pc, #84]	; (80004c8 <MX_GPIO_Init+0xb0>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800047a:	607b      	str	r3, [r7, #4]
 800047c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800047e:	4813      	ldr	r0, [pc, #76]	; (80004cc <MX_GPIO_Init+0xb4>)
 8000480:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000484:	2200      	movs	r2, #0
 8000486:	f001 ff27 	bl	80022d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800048a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800048e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000490:	4b0f      	ldr	r3, [pc, #60]	; (80004d0 <MX_GPIO_Init+0xb8>)
 8000492:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000494:	2300      	movs	r3, #0
 8000496:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000498:	f107 0314 	add.w	r3, r7, #20
 800049c:	480d      	ldr	r0, [pc, #52]	; (80004d4 <MX_GPIO_Init+0xbc>)
 800049e:	4619      	mov	r1, r3
 80004a0:	f001 fdaa 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80004a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004aa:	2301      	movs	r3, #1
 80004ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ae:	2300      	movs	r3, #0
 80004b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b2:	2300      	movs	r3, #0
 80004b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80004b6:	f107 0314 	add.w	r3, r7, #20
 80004ba:	4804      	ldr	r0, [pc, #16]	; (80004cc <MX_GPIO_Init+0xb4>)
 80004bc:	4619      	mov	r1, r3
 80004be:	f001 fd9b 	bl	8001ff8 <HAL_GPIO_Init>

}
 80004c2:	3728      	adds	r7, #40	; 0x28
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	40021000 	.word	0x40021000
 80004cc:	48000400 	.word	0x48000400
 80004d0:	10210000 	.word	0x10210000
 80004d4:	48000800 	.word	0x48000800

080004d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN Callback 0 */

/* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a03      	ldr	r2, [pc, #12]	; (80004f4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d101      	bne.n	80004ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004ea:	f000 f8b1 	bl	8000650 <HAL_IncTick>
  }
/* USER CODE BEGIN Callback 1 */

/* USER CODE END Callback 1 */
}
 80004ee:	3708      	adds	r7, #8
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	40012c00 	.word	0x40012c00

080004f8 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
  }
 80004fc:	e7fe      	b.n	80004fc <Error_Handler+0x4>
 80004fe:	bf00      	nop

08000500 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000504:	4a1f      	ldr	r2, [pc, #124]	; (8000584 <SystemInit+0x84>)
 8000506:	4b1f      	ldr	r3, [pc, #124]	; (8000584 <SystemInit+0x84>)
 8000508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800050c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000510:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000514:	4a1c      	ldr	r2, [pc, #112]	; (8000588 <SystemInit+0x88>)
 8000516:	4b1c      	ldr	r3, [pc, #112]	; (8000588 <SystemInit+0x88>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f043 0301 	orr.w	r3, r3, #1
 800051e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8000520:	4919      	ldr	r1, [pc, #100]	; (8000588 <SystemInit+0x88>)
 8000522:	4b19      	ldr	r3, [pc, #100]	; (8000588 <SystemInit+0x88>)
 8000524:	685a      	ldr	r2, [r3, #4]
 8000526:	4b19      	ldr	r3, [pc, #100]	; (800058c <SystemInit+0x8c>)
 8000528:	4013      	ands	r3, r2
 800052a:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800052c:	4a16      	ldr	r2, [pc, #88]	; (8000588 <SystemInit+0x88>)
 800052e:	4b16      	ldr	r3, [pc, #88]	; (8000588 <SystemInit+0x88>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800053a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800053c:	4a12      	ldr	r2, [pc, #72]	; (8000588 <SystemInit+0x88>)
 800053e:	4b12      	ldr	r3, [pc, #72]	; (8000588 <SystemInit+0x88>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000546:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000548:	4a0f      	ldr	r2, [pc, #60]	; (8000588 <SystemInit+0x88>)
 800054a:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <SystemInit+0x88>)
 800054c:	685b      	ldr	r3, [r3, #4]
 800054e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000552:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8000554:	4a0c      	ldr	r2, [pc, #48]	; (8000588 <SystemInit+0x88>)
 8000556:	4b0c      	ldr	r3, [pc, #48]	; (8000588 <SystemInit+0x88>)
 8000558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800055a:	f023 030f 	bic.w	r3, r3, #15
 800055e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8000560:	4909      	ldr	r1, [pc, #36]	; (8000588 <SystemInit+0x88>)
 8000562:	4b09      	ldr	r3, [pc, #36]	; (8000588 <SystemInit+0x88>)
 8000564:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000566:	4b0a      	ldr	r3, [pc, #40]	; (8000590 <SystemInit+0x90>)
 8000568:	4013      	ands	r3, r2
 800056a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800056c:	4b06      	ldr	r3, [pc, #24]	; (8000588 <SystemInit+0x88>)
 800056e:	2200      	movs	r2, #0
 8000570:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000572:	4b04      	ldr	r3, [pc, #16]	; (8000584 <SystemInit+0x84>)
 8000574:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000578:	609a      	str	r2, [r3, #8]
#endif
}
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	e000ed00 	.word	0xe000ed00
 8000588:	40021000 	.word	0x40021000
 800058c:	f87fc00c 	.word	0xf87fc00c
 8000590:	ff00fccc 	.word	0xff00fccc

08000594 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  //HAL_IncTick();
  //HAL_SYSTICK_IRQHandler();
  xPortSysTickHandler();
 8000598:	f002 fae4 	bl	8002b64 <xPortSysTickHandler>
  //HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop

080005a0 <TIM1_UP_TIM16_IRQHandler>:

/**
* @brief This function handles TIM1 update and TIM16 interrupts.
*/
void TIM1_UP_TIM16_IRQHandler(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80005a4:	4801      	ldr	r0, [pc, #4]	; (80005ac <TIM1_UP_TIM16_IRQHandler+0xc>)
 80005a6:	f001 ff01 	bl	80023ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20002b40 	.word	0x20002b40

080005b0 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80005b4:	4803      	ldr	r0, [pc, #12]	; (80005c4 <_cbSendSystemDesc+0x14>)
 80005b6:	f004 f9c5 	bl	8004944 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80005ba:	4803      	ldr	r0, [pc, #12]	; (80005c8 <_cbSendSystemDesc+0x18>)
 80005bc:	f004 f9c2 	bl	8004944 <SEGGER_SYSVIEW_SendSysDesc>
}
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	080052bc 	.word	0x080052bc
 80005c8:	080052f0 	.word	0x080052f0

080005cc <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80005d0:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <SEGGER_SYSVIEW_Conf+0x24>)
 80005d2:	681a      	ldr	r2, [r3, #0]
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <SEGGER_SYSVIEW_Conf+0x24>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4610      	mov	r0, r2
 80005da:	4619      	mov	r1, r3
 80005dc:	4a05      	ldr	r2, [pc, #20]	; (80005f4 <SEGGER_SYSVIEW_Conf+0x28>)
 80005de:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <SEGGER_SYSVIEW_Conf+0x2c>)
 80005e0:	f003 fe46 	bl	8004270 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80005e4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80005e8:	f003 fe7e 	bl	80042e8 <SEGGER_SYSVIEW_SetRAMBase>
}
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000000 	.word	0x20000000
 80005f4:	080053d4 	.word	0x080053d4
 80005f8:	080005b1 	.word	0x080005b1

080005fc <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000628:	4a08      	ldr	r2, [pc, #32]	; (800064c <HAL_Init+0x28>)
 800062a:	4b08      	ldr	r3, [pc, #32]	; (800064c <HAL_Init+0x28>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f043 0310 	orr.w	r3, r3, #16
 8000632:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000634:	2003      	movs	r0, #3
 8000636:	f000 f8ed 	bl	8000814 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800063a:	2000      	movs	r0, #0
 800063c:	f7ff fe18 	bl	8000270 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000640:	f7ff fdd4 	bl	80001ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000644:	2300      	movs	r3, #0
}
 8000646:	4618      	mov	r0, r3
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40022000 	.word	0x40022000

08000650 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  uwTick++;
 8000654:	4b04      	ldr	r3, [pc, #16]	; (8000668 <HAL_IncTick+0x18>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	3301      	adds	r3, #1
 800065a:	4a03      	ldr	r2, [pc, #12]	; (8000668 <HAL_IncTick+0x18>)
 800065c:	6013      	str	r3, [r2, #0]
}
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	20002b80 	.word	0x20002b80

0800066c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000670:	4b03      	ldr	r3, [pc, #12]	; (8000680 <HAL_GetTick+0x14>)
 8000672:	681b      	ldr	r3, [r3, #0]
}
 8000674:	4618      	mov	r0, r3
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	20002b80 	.word	0x20002b80

08000684 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	f003 0307 	and.w	r3, r3, #7
 8000692:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <NVIC_SetPriorityGrouping+0x44>)
 8000696:	68db      	ldr	r3, [r3, #12]
 8000698:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800069a:	68ba      	ldr	r2, [r7, #8]
 800069c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006a0:	4013      	ands	r3, r2
 80006a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80006ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006b4:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80006b6:	4a04      	ldr	r2, [pc, #16]	; (80006c8 <NVIC_SetPriorityGrouping+0x44>)
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	60d3      	str	r3, [r2, #12]
}
 80006bc:	3714      	adds	r7, #20
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	e000ed00 	.word	0xe000ed00

080006cc <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006d0:	4b04      	ldr	r3, [pc, #16]	; (80006e4 <NVIC_GetPriorityGrouping+0x18>)
 80006d2:	68db      	ldr	r3, [r3, #12]
 80006d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80006d8:	0a1b      	lsrs	r3, r3, #8
}
 80006da:	4618      	mov	r0, r3
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80006f2:	4908      	ldr	r1, [pc, #32]	; (8000714 <NVIC_EnableIRQ+0x2c>)
 80006f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f8:	095b      	lsrs	r3, r3, #5
 80006fa:	79fa      	ldrb	r2, [r7, #7]
 80006fc:	f002 021f 	and.w	r2, r2, #31
 8000700:	2001      	movs	r0, #1
 8000702:	fa00 f202 	lsl.w	r2, r0, r2
 8000706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr
 8000714:	e000e100 	.word	0xe000e100

08000718 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	6039      	str	r1, [r7, #0]
 8000722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000728:	2b00      	cmp	r3, #0
 800072a:	da0b      	bge.n	8000744 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800072c:	490d      	ldr	r1, [pc, #52]	; (8000764 <NVIC_SetPriority+0x4c>)
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	f003 030f 	and.w	r3, r3, #15
 8000734:	3b04      	subs	r3, #4
 8000736:	683a      	ldr	r2, [r7, #0]
 8000738:	b2d2      	uxtb	r2, r2
 800073a:	0112      	lsls	r2, r2, #4
 800073c:	b2d2      	uxtb	r2, r2
 800073e:	440b      	add	r3, r1
 8000740:	761a      	strb	r2, [r3, #24]
 8000742:	e009      	b.n	8000758 <NVIC_SetPriority+0x40>
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000744:	4908      	ldr	r1, [pc, #32]	; (8000768 <NVIC_SetPriority+0x50>)
 8000746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074a:	683a      	ldr	r2, [r7, #0]
 800074c:	b2d2      	uxtb	r2, r2
 800074e:	0112      	lsls	r2, r2, #4
 8000750:	b2d2      	uxtb	r2, r2
 8000752:	440b      	add	r3, r1
 8000754:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	e000ed00 	.word	0xe000ed00
 8000768:	e000e100 	.word	0xe000e100

0800076c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800076c:	b480      	push	{r7}
 800076e:	b089      	sub	sp, #36	; 0x24
 8000770:	af00      	add	r7, sp, #0
 8000772:	60f8      	str	r0, [r7, #12]
 8000774:	60b9      	str	r1, [r7, #8]
 8000776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	f003 0307 	and.w	r3, r3, #7
 800077e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000780:	69fb      	ldr	r3, [r7, #28]
 8000782:	f1c3 0307 	rsb	r3, r3, #7
 8000786:	2b04      	cmp	r3, #4
 8000788:	bf28      	it	cs
 800078a:	2304      	movcs	r3, #4
 800078c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	3304      	adds	r3, #4
 8000792:	2b06      	cmp	r3, #6
 8000794:	d902      	bls.n	800079c <NVIC_EncodePriority+0x30>
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	3b03      	subs	r3, #3
 800079a:	e000      	b.n	800079e <NVIC_EncodePriority+0x32>
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a0:	69bb      	ldr	r3, [r7, #24]
 80007a2:	2201      	movs	r2, #1
 80007a4:	fa02 f303 	lsl.w	r3, r2, r3
 80007a8:	1e5a      	subs	r2, r3, #1
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	401a      	ands	r2, r3
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	2101      	movs	r1, #1
 80007b6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ba:	1e59      	subs	r1, r3, #1
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80007c0:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3724      	adds	r7, #36	; 0x24
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop

080007d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	3b01      	subs	r3, #1
 80007dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007e0:	d301      	bcc.n	80007e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007e2:	2301      	movs	r3, #1
 80007e4:	e00f      	b.n	8000806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007e6:	4a0a      	ldr	r2, [pc, #40]	; (8000810 <SysTick_Config+0x40>)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	3b01      	subs	r3, #1
 80007ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007f2:	210f      	movs	r1, #15
 80007f4:	f7ff ff90 	bl	8000718 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007f8:	4b05      	ldr	r3, [pc, #20]	; (8000810 <SysTick_Config+0x40>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007fe:	4b04      	ldr	r3, [pc, #16]	; (8000810 <SysTick_Config+0x40>)
 8000800:	2207      	movs	r2, #7
 8000802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000804:	2300      	movs	r3, #0
}
 8000806:	4618      	mov	r0, r3
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	e000e010 	.word	0xe000e010

08000814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	f7ff ff31 	bl	8000684 <NVIC_SetPriorityGrouping>
}
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b086      	sub	sp, #24
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	60b9      	str	r1, [r7, #8]
 8000832:	607a      	str	r2, [r7, #4]
 8000834:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000836:	2300      	movs	r3, #0
 8000838:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800083a:	f7ff ff47 	bl	80006cc <NVIC_GetPriorityGrouping>
 800083e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000840:	6978      	ldr	r0, [r7, #20]
 8000842:	68b9      	ldr	r1, [r7, #8]
 8000844:	687a      	ldr	r2, [r7, #4]
 8000846:	f7ff ff91 	bl	800076c <NVIC_EncodePriority>
 800084a:	4602      	mov	r2, r0
 800084c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000850:	4618      	mov	r0, r3
 8000852:	4611      	mov	r1, r2
 8000854:	f7ff ff60 	bl	8000718 <NVIC_SetPriority>
}
 8000858:	3718      	adds	r7, #24
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop

08000860 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800086a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086e:	4618      	mov	r0, r3
 8000870:	f7ff ff3a 	bl	80006e8 <NVIC_EnableIRQ>
}
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop

0800087c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f7ff ffa3 	bl	80007d0 <SysTick_Config>
 800088a:	4603      	mov	r3, r0
}
 800088c:	4618      	mov	r0, r3
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2b04      	cmp	r3, #4
 80008a0:	d106      	bne.n	80008b0 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80008a2:	4a09      	ldr	r2, [pc, #36]	; (80008c8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80008a4:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f043 0304 	orr.w	r3, r3, #4
 80008ac:	6013      	str	r3, [r2, #0]
 80008ae:	e005      	b.n	80008bc <HAL_SYSTICK_CLKSourceConfig+0x28>
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80008b0:	4a05      	ldr	r2, [pc, #20]	; (80008c8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80008b2:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	f023 0304 	bic.w	r3, r3, #4
 80008ba:	6013      	str	r3, [r2, #0]
  }
}
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	e000e010 	.word	0xe000e010

080008cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	6018      	str	r0, [r3, #0]
   uint32_t tickstart = 0U;
 80008d8:	2300      	movs	r3, #0
 80008da:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f003 0301 	and.w	r3, r3, #1
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	f000 81cc 	beq.w	8000c86 <HAL_RCC_OscConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80008ee:	4baf      	ldr	r3, [pc, #700]	; (8000bac <HAL_RCC_OscConfig+0x2e0>)
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	f003 030c 	and.w	r3, r3, #12
 80008f6:	2b04      	cmp	r3, #4
 80008f8:	d00b      	beq.n	8000912 <HAL_RCC_OscConfig+0x46>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80008fa:	4bac      	ldr	r3, [pc, #688]	; (8000bac <HAL_RCC_OscConfig+0x2e0>)
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	f003 030c 	and.w	r3, r3, #12
 8000902:	2b08      	cmp	r3, #8
 8000904:	d179      	bne.n	80009fa <HAL_RCC_OscConfig+0x12e>
 8000906:	4ba9      	ldr	r3, [pc, #676]	; (8000bac <HAL_RCC_OscConfig+0x2e0>)
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800090e:	2b00      	cmp	r3, #0
 8000910:	d073      	beq.n	80009fa <HAL_RCC_OscConfig+0x12e>
 8000912:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000916:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800091a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800091e:	fa93 f3a3 	rbit	r3, r3
 8000922:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000926:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800092a:	fab3 f383 	clz	r3, r3
 800092e:	b2db      	uxtb	r3, r3
 8000930:	f043 0320 	orr.w	r3, r3, #32
 8000934:	b2db      	uxtb	r3, r3
 8000936:	b2db      	uxtb	r3, r3
 8000938:	095b      	lsrs	r3, r3, #5
 800093a:	b2db      	uxtb	r3, r3
 800093c:	2b01      	cmp	r3, #1
 800093e:	d102      	bne.n	8000946 <HAL_RCC_OscConfig+0x7a>
 8000940:	4b9a      	ldr	r3, [pc, #616]	; (8000bac <HAL_RCC_OscConfig+0x2e0>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	e035      	b.n	80009b2 <HAL_RCC_OscConfig+0xe6>
 8000946:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800094a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800094e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000952:	fa93 f3a3 	rbit	r3, r3
 8000956:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800095a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800095e:	fab3 f383 	clz	r3, r3
 8000962:	b2db      	uxtb	r3, r3
 8000964:	f043 0320 	orr.w	r3, r3, #32
 8000968:	b2db      	uxtb	r3, r3
 800096a:	b2db      	uxtb	r3, r3
 800096c:	095b      	lsrs	r3, r3, #5
 800096e:	b2db      	uxtb	r3, r3
 8000970:	2b02      	cmp	r3, #2
 8000972:	d102      	bne.n	800097a <HAL_RCC_OscConfig+0xae>
 8000974:	4b8d      	ldr	r3, [pc, #564]	; (8000bac <HAL_RCC_OscConfig+0x2e0>)
 8000976:	6a1b      	ldr	r3, [r3, #32]
 8000978:	e01b      	b.n	80009b2 <HAL_RCC_OscConfig+0xe6>
 800097a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800097e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000982:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000986:	fa93 f3a3 	rbit	r3, r3
 800098a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800098e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000992:	fab3 f383 	clz	r3, r3
 8000996:	b2db      	uxtb	r3, r3
 8000998:	f043 0320 	orr.w	r3, r3, #32
 800099c:	b2db      	uxtb	r3, r3
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	095b      	lsrs	r3, r3, #5
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	2b04      	cmp	r3, #4
 80009a6:	d102      	bne.n	80009ae <HAL_RCC_OscConfig+0xe2>
 80009a8:	4b80      	ldr	r3, [pc, #512]	; (8000bac <HAL_RCC_OscConfig+0x2e0>)
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	e001      	b.n	80009b2 <HAL_RCC_OscConfig+0xe6>
 80009ae:	4b7f      	ldr	r3, [pc, #508]	; (8000bac <HAL_RCC_OscConfig+0x2e0>)
 80009b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80009b6:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009ba:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80009be:	fa92 f2a2 	rbit	r2, r2
 80009c2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80009c6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80009ca:	fab2 f282 	clz	r2, r2
 80009ce:	b2d2      	uxtb	r2, r2
 80009d0:	f042 0220 	orr.w	r2, r2, #32
 80009d4:	b2d2      	uxtb	r2, r2
 80009d6:	b2d2      	uxtb	r2, r2
 80009d8:	f002 021f 	and.w	r2, r2, #31
 80009dc:	2101      	movs	r1, #1
 80009de:	fa01 f202 	lsl.w	r2, r1, r2
 80009e2:	4013      	ands	r3, r2
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d007      	beq.n	80009f8 <HAL_RCC_OscConfig+0x12c>
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d102      	bne.n	80009f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
 80009f4:	f001 b831 	b.w	8001a5a <HAL_RCC_OscConfig+0x118e>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009f8:	e145      	b.n	8000c86 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a04:	d106      	bne.n	8000a14 <HAL_RCC_OscConfig+0x148>
 8000a06:	4a69      	ldr	r2, [pc, #420]	; (8000bac <HAL_RCC_OscConfig+0x2e0>)
 8000a08:	4b68      	ldr	r3, [pc, #416]	; (8000bac <HAL_RCC_OscConfig+0x2e0>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a10:	6013      	str	r3, [r2, #0]
 8000a12:	e030      	b.n	8000a76 <HAL_RCC_OscConfig+0x1aa>
 8000a14:	1d3b      	adds	r3, r7, #4
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d10c      	bne.n	8000a38 <HAL_RCC_OscConfig+0x16c>
 8000a1e:	4a63      	ldr	r2, [pc, #396]	; (8000bac <HAL_RCC_OscConfig+0x2e0>)
 8000a20:	4b62      	ldr	r3, [pc, #392]	; (8000bac <HAL_RCC_OscConfig+0x2e0>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a28:	6013      	str	r3, [r2, #0]
 8000a2a:	4a60      	ldr	r2, [pc, #384]	; (8000bac <HAL_RCC_OscConfig+0x2e0>)
 8000a2c:	4b5f      	ldr	r3, [pc, #380]	; (8000bac <HAL_RCC_OscConfig+0x2e0>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a34:	6013      	str	r3, [r2, #0]
 8000a36:	e01e      	b.n	8000a76 <HAL_RCC_OscConfig+0x1aa>
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000a42:	d10c      	bne.n	8000a5e <HAL_RCC_OscConfig+0x192>
 8000a44:	4a59      	ldr	r2, [pc, #356]	; (8000bac <HAL_RCC_OscConfig+0x2e0>)
 8000a46:	4b59      	ldr	r3, [pc, #356]	; (8000bac <HAL_RCC_OscConfig+0x2e0>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a4e:	6013      	str	r3, [r2, #0]
 8000a50:	4a56      	ldr	r2, [pc, #344]	; (8000bac <HAL_RCC_OscConfig+0x2e0>)
 8000a52:	4b56      	ldr	r3, [pc, #344]	; (8000bac <HAL_RCC_OscConfig+0x2e0>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a5a:	6013      	str	r3, [r2, #0]
 8000a5c:	e00b      	b.n	8000a76 <HAL_RCC_OscConfig+0x1aa>
 8000a5e:	4a53      	ldr	r2, [pc, #332]	; (8000bac <HAL_RCC_OscConfig+0x2e0>)
 8000a60:	4b52      	ldr	r3, [pc, #328]	; (8000bac <HAL_RCC_OscConfig+0x2e0>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a68:	6013      	str	r3, [r2, #0]
 8000a6a:	4a50      	ldr	r2, [pc, #320]	; (8000bac <HAL_RCC_OscConfig+0x2e0>)
 8000a6c:	4b4f      	ldr	r3, [pc, #316]	; (8000bac <HAL_RCC_OscConfig+0x2e0>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a74:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000a76:	494d      	ldr	r1, [pc, #308]	; (8000bac <HAL_RCC_OscConfig+0x2e0>)
 8000a78:	4b4c      	ldr	r3, [pc, #304]	; (8000bac <HAL_RCC_OscConfig+0x2e0>)
 8000a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a7c:	f023 020f 	bic.w	r2, r3, #15
 8000a80:	1d3b      	adds	r3, r7, #4
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	689b      	ldr	r3, [r3, #8]
 8000a86:	4313      	orrs	r3, r2
 8000a88:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a8a:	1d3b      	adds	r3, r7, #4
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d07b      	beq.n	8000b8c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a94:	f7ff fdea 	bl	800066c <HAL_GetTick>
 8000a98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a9c:	e00a      	b.n	8000ab4 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a9e:	f7ff fde5 	bl	800066c <HAL_GetTick>
 8000aa2:	4602      	mov	r2, r0
 8000aa4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	2b64      	cmp	r3, #100	; 0x64
 8000aac:	d902      	bls.n	8000ab4 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8000aae:	2303      	movs	r3, #3
 8000ab0:	f000 bfd3 	b.w	8001a5a <HAL_RCC_OscConfig+0x118e>
 8000ab4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ab8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000abc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000ac0:	fa93 f3a3 	rbit	r3, r3
 8000ac4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000ac8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000acc:	fab3 f383 	clz	r3, r3
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	f043 0320 	orr.w	r3, r3, #32
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	095b      	lsrs	r3, r3, #5
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d102      	bne.n	8000ae8 <HAL_RCC_OscConfig+0x21c>
 8000ae2:	4b32      	ldr	r3, [pc, #200]	; (8000bac <HAL_RCC_OscConfig+0x2e0>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	e035      	b.n	8000b54 <HAL_RCC_OscConfig+0x288>
 8000ae8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000aec:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000af0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000af4:	fa93 f3a3 	rbit	r3, r3
 8000af8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000afc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000b00:	fab3 f383 	clz	r3, r3
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	f043 0320 	orr.w	r3, r3, #32
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	095b      	lsrs	r3, r3, #5
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	2b02      	cmp	r3, #2
 8000b14:	d102      	bne.n	8000b1c <HAL_RCC_OscConfig+0x250>
 8000b16:	4b25      	ldr	r3, [pc, #148]	; (8000bac <HAL_RCC_OscConfig+0x2e0>)
 8000b18:	6a1b      	ldr	r3, [r3, #32]
 8000b1a:	e01b      	b.n	8000b54 <HAL_RCC_OscConfig+0x288>
 8000b1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b20:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b24:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000b28:	fa93 f3a3 	rbit	r3, r3
 8000b2c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000b30:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000b34:	fab3 f383 	clz	r3, r3
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	f043 0320 	orr.w	r3, r3, #32
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	095b      	lsrs	r3, r3, #5
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	2b04      	cmp	r3, #4
 8000b48:	d102      	bne.n	8000b50 <HAL_RCC_OscConfig+0x284>
 8000b4a:	4b18      	ldr	r3, [pc, #96]	; (8000bac <HAL_RCC_OscConfig+0x2e0>)
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	e001      	b.n	8000b54 <HAL_RCC_OscConfig+0x288>
 8000b50:	4b16      	ldr	r3, [pc, #88]	; (8000bac <HAL_RCC_OscConfig+0x2e0>)
 8000b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b54:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b58:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b5c:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000b60:	fa92 f2a2 	rbit	r2, r2
 8000b64:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000b68:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000b6c:	fab2 f282 	clz	r2, r2
 8000b70:	b2d2      	uxtb	r2, r2
 8000b72:	f042 0220 	orr.w	r2, r2, #32
 8000b76:	b2d2      	uxtb	r2, r2
 8000b78:	b2d2      	uxtb	r2, r2
 8000b7a:	f002 021f 	and.w	r2, r2, #31
 8000b7e:	2101      	movs	r1, #1
 8000b80:	fa01 f202 	lsl.w	r2, r1, r2
 8000b84:	4013      	ands	r3, r2
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d089      	beq.n	8000a9e <HAL_RCC_OscConfig+0x1d2>
 8000b8a:	e07c      	b.n	8000c86 <HAL_RCC_OscConfig+0x3ba>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b8c:	f7ff fd6e 	bl	800066c <HAL_GetTick>
 8000b90:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b94:	e00c      	b.n	8000bb0 <HAL_RCC_OscConfig+0x2e4>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b96:	f7ff fd69 	bl	800066c <HAL_GetTick>
 8000b9a:	4602      	mov	r2, r0
 8000b9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	2b64      	cmp	r3, #100	; 0x64
 8000ba4:	d904      	bls.n	8000bb0 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	f000 bf57 	b.w	8001a5a <HAL_RCC_OscConfig+0x118e>
 8000bac:	40021000 	.word	0x40021000
 8000bb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bb4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bb8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000bbc:	fa93 f3a3 	rbit	r3, r3
 8000bc0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000bc4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bc8:	fab3 f383 	clz	r3, r3
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	f043 0320 	orr.w	r3, r3, #32
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	095b      	lsrs	r3, r3, #5
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d102      	bne.n	8000be4 <HAL_RCC_OscConfig+0x318>
 8000bde:	4bb7      	ldr	r3, [pc, #732]	; (8000ebc <HAL_RCC_OscConfig+0x5f0>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	e035      	b.n	8000c50 <HAL_RCC_OscConfig+0x384>
 8000be4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000be8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bec:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000bf0:	fa93 f3a3 	rbit	r3, r3
 8000bf4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000bf8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000bfc:	fab3 f383 	clz	r3, r3
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	f043 0320 	orr.w	r3, r3, #32
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	095b      	lsrs	r3, r3, #5
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d102      	bne.n	8000c18 <HAL_RCC_OscConfig+0x34c>
 8000c12:	4baa      	ldr	r3, [pc, #680]	; (8000ebc <HAL_RCC_OscConfig+0x5f0>)
 8000c14:	6a1b      	ldr	r3, [r3, #32]
 8000c16:	e01b      	b.n	8000c50 <HAL_RCC_OscConfig+0x384>
 8000c18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c1c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c20:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000c24:	fa93 f3a3 	rbit	r3, r3
 8000c28:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000c2c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000c30:	fab3 f383 	clz	r3, r3
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	f043 0320 	orr.w	r3, r3, #32
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	095b      	lsrs	r3, r3, #5
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	2b04      	cmp	r3, #4
 8000c44:	d102      	bne.n	8000c4c <HAL_RCC_OscConfig+0x380>
 8000c46:	4b9d      	ldr	r3, [pc, #628]	; (8000ebc <HAL_RCC_OscConfig+0x5f0>)
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	e001      	b.n	8000c50 <HAL_RCC_OscConfig+0x384>
 8000c4c:	4b9b      	ldr	r3, [pc, #620]	; (8000ebc <HAL_RCC_OscConfig+0x5f0>)
 8000c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c50:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c54:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c58:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000c5c:	fa92 f2a2 	rbit	r2, r2
 8000c60:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000c64:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000c68:	fab2 f282 	clz	r2, r2
 8000c6c:	b2d2      	uxtb	r2, r2
 8000c6e:	f042 0220 	orr.w	r2, r2, #32
 8000c72:	b2d2      	uxtb	r2, r2
 8000c74:	b2d2      	uxtb	r2, r2
 8000c76:	f002 021f 	and.w	r2, r2, #31
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c80:	4013      	ands	r3, r2
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d187      	bne.n	8000b96 <HAL_RCC_OscConfig+0x2ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f003 0302 	and.w	r3, r3, #2
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	f000 81d7 	beq.w	8001044 <HAL_RCC_OscConfig+0x778>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000c96:	4b89      	ldr	r3, [pc, #548]	; (8000ebc <HAL_RCC_OscConfig+0x5f0>)
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f003 030c 	and.w	r3, r3, #12
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d00d      	beq.n	8000cbe <HAL_RCC_OscConfig+0x3f2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000ca2:	4b86      	ldr	r3, [pc, #536]	; (8000ebc <HAL_RCC_OscConfig+0x5f0>)
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f003 030c 	and.w	r3, r3, #12
 8000caa:	2b08      	cmp	r3, #8
 8000cac:	f040 8090 	bne.w	8000dd0 <HAL_RCC_OscConfig+0x504>
 8000cb0:	4b82      	ldr	r3, [pc, #520]	; (8000ebc <HAL_RCC_OscConfig+0x5f0>)
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	f040 8089 	bne.w	8000dd0 <HAL_RCC_OscConfig+0x504>
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cc4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000cc8:	fa93 f3a3 	rbit	r3, r3
 8000ccc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000cd0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cd4:	fab3 f383 	clz	r3, r3
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	f043 0320 	orr.w	r3, r3, #32
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	095b      	lsrs	r3, r3, #5
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d102      	bne.n	8000cf0 <HAL_RCC_OscConfig+0x424>
 8000cea:	4b74      	ldr	r3, [pc, #464]	; (8000ebc <HAL_RCC_OscConfig+0x5f0>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	e033      	b.n	8000d58 <HAL_RCC_OscConfig+0x48c>
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cf6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000cfa:	fa93 f3a3 	rbit	r3, r3
 8000cfe:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000d02:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000d06:	fab3 f383 	clz	r3, r3
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	f043 0320 	orr.w	r3, r3, #32
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	095b      	lsrs	r3, r3, #5
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	d102      	bne.n	8000d22 <HAL_RCC_OscConfig+0x456>
 8000d1c:	4b67      	ldr	r3, [pc, #412]	; (8000ebc <HAL_RCC_OscConfig+0x5f0>)
 8000d1e:	6a1b      	ldr	r3, [r3, #32]
 8000d20:	e01a      	b.n	8000d58 <HAL_RCC_OscConfig+0x48c>
 8000d22:	2302      	movs	r3, #2
 8000d24:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d28:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000d2c:	fa93 f3a3 	rbit	r3, r3
 8000d30:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000d34:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000d38:	fab3 f383 	clz	r3, r3
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	f043 0320 	orr.w	r3, r3, #32
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	095b      	lsrs	r3, r3, #5
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	2b04      	cmp	r3, #4
 8000d4c:	d102      	bne.n	8000d54 <HAL_RCC_OscConfig+0x488>
 8000d4e:	4b5b      	ldr	r3, [pc, #364]	; (8000ebc <HAL_RCC_OscConfig+0x5f0>)
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	e001      	b.n	8000d58 <HAL_RCC_OscConfig+0x48c>
 8000d54:	4b59      	ldr	r3, [pc, #356]	; (8000ebc <HAL_RCC_OscConfig+0x5f0>)
 8000d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d58:	2202      	movs	r2, #2
 8000d5a:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d5e:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000d62:	fa92 f2a2 	rbit	r2, r2
 8000d66:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000d6a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000d6e:	fab2 f282 	clz	r2, r2
 8000d72:	b2d2      	uxtb	r2, r2
 8000d74:	f042 0220 	orr.w	r2, r2, #32
 8000d78:	b2d2      	uxtb	r2, r2
 8000d7a:	b2d2      	uxtb	r2, r2
 8000d7c:	f002 021f 	and.w	r2, r2, #31
 8000d80:	2101      	movs	r1, #1
 8000d82:	fa01 f202 	lsl.w	r2, r1, r2
 8000d86:	4013      	ands	r3, r2
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d007      	beq.n	8000d9c <HAL_RCC_OscConfig+0x4d0>
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	691b      	ldr	r3, [r3, #16]
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d002      	beq.n	8000d9c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	f000 be5f 	b.w	8001a5a <HAL_RCC_OscConfig+0x118e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d9c:	4847      	ldr	r0, [pc, #284]	; (8000ebc <HAL_RCC_OscConfig+0x5f0>)
 8000d9e:	4b47      	ldr	r3, [pc, #284]	; (8000ebc <HAL_RCC_OscConfig+0x5f0>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	6959      	ldr	r1, [r3, #20]
 8000dac:	23f8      	movs	r3, #248	; 0xf8
 8000dae:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000db2:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000db6:	fa93 f3a3 	rbit	r3, r3
 8000dba:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000dbe:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8000dc2:	fab3 f383 	clz	r3, r3
 8000dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	6003      	str	r3, [r0, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dce:	e139      	b.n	8001044 <HAL_RCC_OscConfig+0x778>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000dd0:	1d3b      	adds	r3, r7, #4
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	691b      	ldr	r3, [r3, #16]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	f000 80a8 	beq.w	8000f2c <HAL_RCC_OscConfig+0x660>
 8000ddc:	2301      	movs	r3, #1
 8000dde:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000de2:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000de6:	fa93 f3a3 	rbit	r3, r3
 8000dea:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000dee:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000df2:	fab3 f383 	clz	r3, r3
 8000df6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000dfa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	461a      	mov	r2, r3
 8000e02:	2301      	movs	r3, #1
 8000e04:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e06:	f7ff fc31 	bl	800066c <HAL_GetTick>
 8000e0a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e0e:	e00a      	b.n	8000e26 <HAL_RCC_OscConfig+0x55a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e10:	f7ff fc2c 	bl	800066c <HAL_GetTick>
 8000e14:	4602      	mov	r2, r0
 8000e16:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e1a:	1ad3      	subs	r3, r2, r3
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d902      	bls.n	8000e26 <HAL_RCC_OscConfig+0x55a>
          {
            return HAL_TIMEOUT;
 8000e20:	2303      	movs	r3, #3
 8000e22:	f000 be1a 	b.w	8001a5a <HAL_RCC_OscConfig+0x118e>
 8000e26:	2302      	movs	r3, #2
 8000e28:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e2c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000e30:	fa93 f3a3 	rbit	r3, r3
 8000e34:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000e38:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e3c:	fab3 f383 	clz	r3, r3
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	f043 0320 	orr.w	r3, r3, #32
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	095b      	lsrs	r3, r3, #5
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d102      	bne.n	8000e58 <HAL_RCC_OscConfig+0x58c>
 8000e52:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <HAL_RCC_OscConfig+0x5f0>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	e035      	b.n	8000ec4 <HAL_RCC_OscConfig+0x5f8>
 8000e58:	2302      	movs	r3, #2
 8000e5a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e5e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000e62:	fa93 f3a3 	rbit	r3, r3
 8000e66:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000e6a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8000e6e:	fab3 f383 	clz	r3, r3
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	f043 0320 	orr.w	r3, r3, #32
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	095b      	lsrs	r3, r3, #5
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d102      	bne.n	8000e8a <HAL_RCC_OscConfig+0x5be>
 8000e84:	4b0d      	ldr	r3, [pc, #52]	; (8000ebc <HAL_RCC_OscConfig+0x5f0>)
 8000e86:	6a1b      	ldr	r3, [r3, #32]
 8000e88:	e01c      	b.n	8000ec4 <HAL_RCC_OscConfig+0x5f8>
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e90:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000e94:	fa93 f3a3 	rbit	r3, r3
 8000e98:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000e9c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000ea0:	fab3 f383 	clz	r3, r3
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	f043 0320 	orr.w	r3, r3, #32
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	095b      	lsrs	r3, r3, #5
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	2b04      	cmp	r3, #4
 8000eb4:	d104      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x5f4>
 8000eb6:	4b01      	ldr	r3, [pc, #4]	; (8000ebc <HAL_RCC_OscConfig+0x5f0>)
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	e003      	b.n	8000ec4 <HAL_RCC_OscConfig+0x5f8>
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	4bc6      	ldr	r3, [pc, #792]	; (80011dc <HAL_RCC_OscConfig+0x910>)
 8000ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec4:	2202      	movs	r2, #2
 8000ec6:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eca:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000ece:	fa92 f2a2 	rbit	r2, r2
 8000ed2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000ed6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000eda:	fab2 f282 	clz	r2, r2
 8000ede:	b2d2      	uxtb	r2, r2
 8000ee0:	f042 0220 	orr.w	r2, r2, #32
 8000ee4:	b2d2      	uxtb	r2, r2
 8000ee6:	b2d2      	uxtb	r2, r2
 8000ee8:	f002 021f 	and.w	r2, r2, #31
 8000eec:	2101      	movs	r1, #1
 8000eee:	fa01 f202 	lsl.w	r2, r1, r2
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d08b      	beq.n	8000e10 <HAL_RCC_OscConfig+0x544>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ef8:	48b8      	ldr	r0, [pc, #736]	; (80011dc <HAL_RCC_OscConfig+0x910>)
 8000efa:	4bb8      	ldr	r3, [pc, #736]	; (80011dc <HAL_RCC_OscConfig+0x910>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	6959      	ldr	r1, [r3, #20]
 8000f08:	23f8      	movs	r3, #248	; 0xf8
 8000f0a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f0e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000f12:	fa93 f3a3 	rbit	r3, r3
 8000f16:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000f1a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000f1e:	fab3 f383 	clz	r3, r3
 8000f22:	fa01 f303 	lsl.w	r3, r1, r3
 8000f26:	4313      	orrs	r3, r2
 8000f28:	6003      	str	r3, [r0, #0]
 8000f2a:	e08b      	b.n	8001044 <HAL_RCC_OscConfig+0x778>
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f32:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000f36:	fa93 f3a3 	rbit	r3, r3
 8000f3a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000f3e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f42:	fab3 f383 	clz	r3, r3
 8000f46:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f4a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	461a      	mov	r2, r3
 8000f52:	2300      	movs	r3, #0
 8000f54:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f56:	f7ff fb89 	bl	800066c <HAL_GetTick>
 8000f5a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f5e:	e00a      	b.n	8000f76 <HAL_RCC_OscConfig+0x6aa>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f60:	f7ff fb84 	bl	800066c <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d902      	bls.n	8000f76 <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 8000f70:	2303      	movs	r3, #3
 8000f72:	f000 bd72 	b.w	8001a5a <HAL_RCC_OscConfig+0x118e>
 8000f76:	2302      	movs	r3, #2
 8000f78:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f7c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000f80:	fa93 f3a3 	rbit	r3, r3
 8000f84:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000f88:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f8c:	fab3 f383 	clz	r3, r3
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	f043 0320 	orr.w	r3, r3, #32
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	095b      	lsrs	r3, r3, #5
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d102      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x6dc>
 8000fa2:	4b8e      	ldr	r3, [pc, #568]	; (80011dc <HAL_RCC_OscConfig+0x910>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	e033      	b.n	8001010 <HAL_RCC_OscConfig+0x744>
 8000fa8:	2302      	movs	r3, #2
 8000faa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000fb2:	fa93 f3a3 	rbit	r3, r3
 8000fb6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000fba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000fbe:	fab3 f383 	clz	r3, r3
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	f043 0320 	orr.w	r3, r3, #32
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	095b      	lsrs	r3, r3, #5
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d102      	bne.n	8000fda <HAL_RCC_OscConfig+0x70e>
 8000fd4:	4b81      	ldr	r3, [pc, #516]	; (80011dc <HAL_RCC_OscConfig+0x910>)
 8000fd6:	6a1b      	ldr	r3, [r3, #32]
 8000fd8:	e01a      	b.n	8001010 <HAL_RCC_OscConfig+0x744>
 8000fda:	2302      	movs	r3, #2
 8000fdc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fe0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000fe4:	fa93 f3a3 	rbit	r3, r3
 8000fe8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000fec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000ff0:	fab3 f383 	clz	r3, r3
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	f043 0320 	orr.w	r3, r3, #32
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	095b      	lsrs	r3, r3, #5
 8001000:	b2db      	uxtb	r3, r3
 8001002:	2b04      	cmp	r3, #4
 8001004:	d102      	bne.n	800100c <HAL_RCC_OscConfig+0x740>
 8001006:	4b75      	ldr	r3, [pc, #468]	; (80011dc <HAL_RCC_OscConfig+0x910>)
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	e001      	b.n	8001010 <HAL_RCC_OscConfig+0x744>
 800100c:	4b73      	ldr	r3, [pc, #460]	; (80011dc <HAL_RCC_OscConfig+0x910>)
 800100e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001010:	2202      	movs	r2, #2
 8001012:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001016:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800101a:	fa92 f2a2 	rbit	r2, r2
 800101e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001022:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001026:	fab2 f282 	clz	r2, r2
 800102a:	b2d2      	uxtb	r2, r2
 800102c:	f042 0220 	orr.w	r2, r2, #32
 8001030:	b2d2      	uxtb	r2, r2
 8001032:	b2d2      	uxtb	r2, r2
 8001034:	f002 021f 	and.w	r2, r2, #31
 8001038:	2101      	movs	r1, #1
 800103a:	fa01 f202 	lsl.w	r2, r1, r2
 800103e:	4013      	ands	r3, r2
 8001040:	2b00      	cmp	r3, #0
 8001042:	d18d      	bne.n	8000f60 <HAL_RCC_OscConfig+0x694>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 0308 	and.w	r3, r3, #8
 800104e:	2b00      	cmp	r3, #0
 8001050:	f000 8140 	beq.w	80012d4 <HAL_RCC_OscConfig+0xa08>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	699b      	ldr	r3, [r3, #24]
 800105a:	2b00      	cmp	r3, #0
 800105c:	f000 8096 	beq.w	800118c <HAL_RCC_OscConfig+0x8c0>
 8001060:	2301      	movs	r3, #1
 8001062:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001066:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800106a:	fa93 f3a3 	rbit	r3, r3
 800106e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001072:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001076:	fab3 f383 	clz	r3, r3
 800107a:	461a      	mov	r2, r3
 800107c:	4b58      	ldr	r3, [pc, #352]	; (80011e0 <HAL_RCC_OscConfig+0x914>)
 800107e:	4413      	add	r3, r2
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	461a      	mov	r2, r3
 8001084:	2301      	movs	r3, #1
 8001086:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001088:	f7ff faf0 	bl	800066c <HAL_GetTick>
 800108c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001090:	e00a      	b.n	80010a8 <HAL_RCC_OscConfig+0x7dc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001092:	f7ff faeb 	bl	800066c <HAL_GetTick>
 8001096:	4602      	mov	r2, r0
 8001098:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d902      	bls.n	80010a8 <HAL_RCC_OscConfig+0x7dc>
        {
          return HAL_TIMEOUT;
 80010a2:	2303      	movs	r3, #3
 80010a4:	f000 bcd9 	b.w	8001a5a <HAL_RCC_OscConfig+0x118e>
 80010a8:	2302      	movs	r3, #2
 80010aa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80010b2:	fa93 f3a3 	rbit	r3, r3
 80010b6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80010ba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010be:	fab3 f383 	clz	r3, r3
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	095b      	lsrs	r3, r3, #5
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d102      	bne.n	80010da <HAL_RCC_OscConfig+0x80e>
 80010d4:	4b41      	ldr	r3, [pc, #260]	; (80011dc <HAL_RCC_OscConfig+0x910>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	e039      	b.n	800114e <HAL_RCC_OscConfig+0x882>
 80010da:	2302      	movs	r3, #2
 80010dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80010e4:	fa93 f2a3 	rbit	r2, r3
 80010e8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80010ec:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80010ee:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	fab3 f383 	clz	r3, r3
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	b2db      	uxtb	r3, r3
 8001102:	095b      	lsrs	r3, r3, #5
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2b02      	cmp	r3, #2
 8001108:	d102      	bne.n	8001110 <HAL_RCC_OscConfig+0x844>
 800110a:	4b34      	ldr	r3, [pc, #208]	; (80011dc <HAL_RCC_OscConfig+0x910>)
 800110c:	6a1b      	ldr	r3, [r3, #32]
 800110e:	e01e      	b.n	800114e <HAL_RCC_OscConfig+0x882>
 8001110:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001114:	2202      	movs	r2, #2
 8001116:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001118:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	fa93 f2a3 	rbit	r2, r3
 8001122:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001126:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001128:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	fab3 f383 	clz	r3, r3
 8001132:	b2db      	uxtb	r3, r3
 8001134:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001138:	b2db      	uxtb	r3, r3
 800113a:	b2db      	uxtb	r3, r3
 800113c:	095b      	lsrs	r3, r3, #5
 800113e:	b2db      	uxtb	r3, r3
 8001140:	2b04      	cmp	r3, #4
 8001142:	d102      	bne.n	800114a <HAL_RCC_OscConfig+0x87e>
 8001144:	4b25      	ldr	r3, [pc, #148]	; (80011dc <HAL_RCC_OscConfig+0x910>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	e001      	b.n	800114e <HAL_RCC_OscConfig+0x882>
 800114a:	4b24      	ldr	r3, [pc, #144]	; (80011dc <HAL_RCC_OscConfig+0x910>)
 800114c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114e:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8001152:	2102      	movs	r1, #2
 8001154:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001156:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 800115a:	6812      	ldr	r2, [r2, #0]
 800115c:	fa92 f1a2 	rbit	r1, r2
 8001160:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001164:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001166:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800116a:	6812      	ldr	r2, [r2, #0]
 800116c:	fab2 f282 	clz	r2, r2
 8001170:	b2d2      	uxtb	r2, r2
 8001172:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001176:	b2d2      	uxtb	r2, r2
 8001178:	b2d2      	uxtb	r2, r2
 800117a:	f002 021f 	and.w	r2, r2, #31
 800117e:	2101      	movs	r1, #1
 8001180:	fa01 f202 	lsl.w	r2, r1, r2
 8001184:	4013      	ands	r3, r2
 8001186:	2b00      	cmp	r3, #0
 8001188:	d083      	beq.n	8001092 <HAL_RCC_OscConfig+0x7c6>
 800118a:	e0a3      	b.n	80012d4 <HAL_RCC_OscConfig+0xa08>
 800118c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001190:	2201      	movs	r2, #1
 8001192:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001194:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	fa93 f2a3 	rbit	r2, r3
 800119e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80011a2:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80011a4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80011a8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011aa:	fab3 f383 	clz	r3, r3
 80011ae:	461a      	mov	r2, r3
 80011b0:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <HAL_RCC_OscConfig+0x914>)
 80011b2:	4413      	add	r3, r2
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	461a      	mov	r2, r3
 80011b8:	2300      	movs	r3, #0
 80011ba:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011bc:	f7ff fa56 	bl	800066c <HAL_GetTick>
 80011c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011c4:	e00e      	b.n	80011e4 <HAL_RCC_OscConfig+0x918>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011c6:	f7ff fa51 	bl	800066c <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d906      	bls.n	80011e4 <HAL_RCC_OscConfig+0x918>
        {
          return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	f000 bc3f 	b.w	8001a5a <HAL_RCC_OscConfig+0x118e>
 80011dc:	40021000 	.word	0x40021000
 80011e0:	10908120 	.word	0x10908120
 80011e4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80011e8:	2202      	movs	r2, #2
 80011ea:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ec:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	fa93 f2a3 	rbit	r2, r3
 80011f6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80011fa:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80011fc:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001200:	681b      	ldr	r3, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001202:	fab3 f383 	clz	r3, r3
 8001206:	b2db      	uxtb	r3, r3
 8001208:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800120c:	b2db      	uxtb	r3, r3
 800120e:	b2db      	uxtb	r3, r3
 8001210:	095b      	lsrs	r3, r3, #5
 8001212:	b2db      	uxtb	r3, r3
 8001214:	2b01      	cmp	r3, #1
 8001216:	d102      	bne.n	800121e <HAL_RCC_OscConfig+0x952>
 8001218:	4ba6      	ldr	r3, [pc, #664]	; (80014b4 <HAL_RCC_OscConfig+0xbe8>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	e03b      	b.n	8001296 <HAL_RCC_OscConfig+0x9ca>
 800121e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001222:	2202      	movs	r2, #2
 8001224:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001226:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	fa93 f2a3 	rbit	r2, r3
 8001230:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001234:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001236:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	fab3 f383 	clz	r3, r3
 8001240:	b2db      	uxtb	r3, r3
 8001242:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001246:	b2db      	uxtb	r3, r3
 8001248:	b2db      	uxtb	r3, r3
 800124a:	095b      	lsrs	r3, r3, #5
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b02      	cmp	r3, #2
 8001250:	d102      	bne.n	8001258 <HAL_RCC_OscConfig+0x98c>
 8001252:	4b98      	ldr	r3, [pc, #608]	; (80014b4 <HAL_RCC_OscConfig+0xbe8>)
 8001254:	6a1b      	ldr	r3, [r3, #32]
 8001256:	e01e      	b.n	8001296 <HAL_RCC_OscConfig+0x9ca>
 8001258:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800125c:	2202      	movs	r2, #2
 800125e:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001260:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	fa93 f2a3 	rbit	r2, r3
 800126a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800126e:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001270:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	fab3 f383 	clz	r3, r3
 800127a:	b2db      	uxtb	r3, r3
 800127c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001280:	b2db      	uxtb	r3, r3
 8001282:	b2db      	uxtb	r3, r3
 8001284:	095b      	lsrs	r3, r3, #5
 8001286:	b2db      	uxtb	r3, r3
 8001288:	2b04      	cmp	r3, #4
 800128a:	d102      	bne.n	8001292 <HAL_RCC_OscConfig+0x9c6>
 800128c:	4b89      	ldr	r3, [pc, #548]	; (80014b4 <HAL_RCC_OscConfig+0xbe8>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	e001      	b.n	8001296 <HAL_RCC_OscConfig+0x9ca>
 8001292:	4b88      	ldr	r3, [pc, #544]	; (80014b4 <HAL_RCC_OscConfig+0xbe8>)
 8001294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001296:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 800129a:	2102      	movs	r1, #2
 800129c:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129e:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 80012a2:	6812      	ldr	r2, [r2, #0]
 80012a4:	fa92 f1a2 	rbit	r1, r2
 80012a8:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 80012ac:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80012ae:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 80012b2:	6812      	ldr	r2, [r2, #0]
 80012b4:	fab2 f282 	clz	r2, r2
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80012be:	b2d2      	uxtb	r2, r2
 80012c0:	b2d2      	uxtb	r2, r2
 80012c2:	f002 021f 	and.w	r2, r2, #31
 80012c6:	2101      	movs	r1, #1
 80012c8:	fa01 f202 	lsl.w	r2, r1, r2
 80012cc:	4013      	ands	r3, r2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	f47f af79 	bne.w	80011c6 <HAL_RCC_OscConfig+0x8fa>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0304 	and.w	r3, r3, #4
 80012de:	2b00      	cmp	r3, #0
 80012e0:	f000 81a1 	beq.w	8001626 <HAL_RCC_OscConfig+0xd5a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012e4:	2300      	movs	r3, #0
 80012e6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012ea:	4b72      	ldr	r3, [pc, #456]	; (80014b4 <HAL_RCC_OscConfig+0xbe8>)
 80012ec:	69db      	ldr	r3, [r3, #28]
 80012ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d112      	bne.n	800131c <HAL_RCC_OscConfig+0xa50>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012f6:	4a6f      	ldr	r2, [pc, #444]	; (80014b4 <HAL_RCC_OscConfig+0xbe8>)
 80012f8:	4b6e      	ldr	r3, [pc, #440]	; (80014b4 <HAL_RCC_OscConfig+0xbe8>)
 80012fa:	69db      	ldr	r3, [r3, #28]
 80012fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001300:	61d3      	str	r3, [r2, #28]
 8001302:	4b6c      	ldr	r3, [pc, #432]	; (80014b4 <HAL_RCC_OscConfig+0xbe8>)
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800130a:	f107 030c 	add.w	r3, r7, #12
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	f107 030c 	add.w	r3, r7, #12
 8001314:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001316:	2301      	movs	r3, #1
 8001318:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800131c:	4b66      	ldr	r3, [pc, #408]	; (80014b8 <HAL_RCC_OscConfig+0xbec>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001324:	2b00      	cmp	r3, #0
 8001326:	d11a      	bne.n	800135e <HAL_RCC_OscConfig+0xa92>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001328:	4a63      	ldr	r2, [pc, #396]	; (80014b8 <HAL_RCC_OscConfig+0xbec>)
 800132a:	4b63      	ldr	r3, [pc, #396]	; (80014b8 <HAL_RCC_OscConfig+0xbec>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001332:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001334:	f7ff f99a 	bl	800066c <HAL_GetTick>
 8001338:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800133c:	e009      	b.n	8001352 <HAL_RCC_OscConfig+0xa86>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800133e:	f7ff f995 	bl	800066c <HAL_GetTick>
 8001342:	4602      	mov	r2, r0
 8001344:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b64      	cmp	r3, #100	; 0x64
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0xa86>
        {
          return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e383      	b.n	8001a5a <HAL_RCC_OscConfig+0x118e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001352:	4b59      	ldr	r3, [pc, #356]	; (80014b8 <HAL_RCC_OscConfig+0xbec>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800135a:	2b00      	cmp	r3, #0
 800135c:	d0ef      	beq.n	800133e <HAL_RCC_OscConfig+0xa72>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800135e:	1d3b      	adds	r3, r7, #4
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d106      	bne.n	8001376 <HAL_RCC_OscConfig+0xaaa>
 8001368:	4a52      	ldr	r2, [pc, #328]	; (80014b4 <HAL_RCC_OscConfig+0xbe8>)
 800136a:	4b52      	ldr	r3, [pc, #328]	; (80014b4 <HAL_RCC_OscConfig+0xbe8>)
 800136c:	6a1b      	ldr	r3, [r3, #32]
 800136e:	f043 0301 	orr.w	r3, r3, #1
 8001372:	6213      	str	r3, [r2, #32]
 8001374:	e02f      	b.n	80013d6 <HAL_RCC_OscConfig+0xb0a>
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d10c      	bne.n	800139a <HAL_RCC_OscConfig+0xace>
 8001380:	4a4c      	ldr	r2, [pc, #304]	; (80014b4 <HAL_RCC_OscConfig+0xbe8>)
 8001382:	4b4c      	ldr	r3, [pc, #304]	; (80014b4 <HAL_RCC_OscConfig+0xbe8>)
 8001384:	6a1b      	ldr	r3, [r3, #32]
 8001386:	f023 0301 	bic.w	r3, r3, #1
 800138a:	6213      	str	r3, [r2, #32]
 800138c:	4a49      	ldr	r2, [pc, #292]	; (80014b4 <HAL_RCC_OscConfig+0xbe8>)
 800138e:	4b49      	ldr	r3, [pc, #292]	; (80014b4 <HAL_RCC_OscConfig+0xbe8>)
 8001390:	6a1b      	ldr	r3, [r3, #32]
 8001392:	f023 0304 	bic.w	r3, r3, #4
 8001396:	6213      	str	r3, [r2, #32]
 8001398:	e01d      	b.n	80013d6 <HAL_RCC_OscConfig+0xb0a>
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	2b05      	cmp	r3, #5
 80013a2:	d10c      	bne.n	80013be <HAL_RCC_OscConfig+0xaf2>
 80013a4:	4a43      	ldr	r2, [pc, #268]	; (80014b4 <HAL_RCC_OscConfig+0xbe8>)
 80013a6:	4b43      	ldr	r3, [pc, #268]	; (80014b4 <HAL_RCC_OscConfig+0xbe8>)
 80013a8:	6a1b      	ldr	r3, [r3, #32]
 80013aa:	f043 0304 	orr.w	r3, r3, #4
 80013ae:	6213      	str	r3, [r2, #32]
 80013b0:	4a40      	ldr	r2, [pc, #256]	; (80014b4 <HAL_RCC_OscConfig+0xbe8>)
 80013b2:	4b40      	ldr	r3, [pc, #256]	; (80014b4 <HAL_RCC_OscConfig+0xbe8>)
 80013b4:	6a1b      	ldr	r3, [r3, #32]
 80013b6:	f043 0301 	orr.w	r3, r3, #1
 80013ba:	6213      	str	r3, [r2, #32]
 80013bc:	e00b      	b.n	80013d6 <HAL_RCC_OscConfig+0xb0a>
 80013be:	4a3d      	ldr	r2, [pc, #244]	; (80014b4 <HAL_RCC_OscConfig+0xbe8>)
 80013c0:	4b3c      	ldr	r3, [pc, #240]	; (80014b4 <HAL_RCC_OscConfig+0xbe8>)
 80013c2:	6a1b      	ldr	r3, [r3, #32]
 80013c4:	f023 0301 	bic.w	r3, r3, #1
 80013c8:	6213      	str	r3, [r2, #32]
 80013ca:	4a3a      	ldr	r2, [pc, #232]	; (80014b4 <HAL_RCC_OscConfig+0xbe8>)
 80013cc:	4b39      	ldr	r3, [pc, #228]	; (80014b4 <HAL_RCC_OscConfig+0xbe8>)
 80013ce:	6a1b      	ldr	r3, [r3, #32]
 80013d0:	f023 0304 	bic.w	r3, r3, #4
 80013d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	f000 808f 	beq.w	8001500 <HAL_RCC_OscConfig+0xc34>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013e2:	f7ff f943 	bl	800066c <HAL_GetTick>
 80013e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ea:	e00b      	b.n	8001404 <HAL_RCC_OscConfig+0xb38>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013ec:	f7ff f93e 	bl	800066c <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d901      	bls.n	8001404 <HAL_RCC_OscConfig+0xb38>
        {
          return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e32a      	b.n	8001a5a <HAL_RCC_OscConfig+0x118e>
 8001404:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001408:	2202      	movs	r2, #2
 800140a:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800140c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	fa93 f2a3 	rbit	r2, r3
 8001416:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800141a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800141c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001420:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001422:	fab3 f383 	clz	r3, r3
 8001426:	b2db      	uxtb	r3, r3
 8001428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800142c:	b2db      	uxtb	r3, r3
 800142e:	b2db      	uxtb	r3, r3
 8001430:	095b      	lsrs	r3, r3, #5
 8001432:	b2db      	uxtb	r3, r3
 8001434:	2b01      	cmp	r3, #1
 8001436:	d102      	bne.n	800143e <HAL_RCC_OscConfig+0xb72>
 8001438:	4b1e      	ldr	r3, [pc, #120]	; (80014b4 <HAL_RCC_OscConfig+0xbe8>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	e040      	b.n	80014c0 <HAL_RCC_OscConfig+0xbf4>
 800143e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001442:	2202      	movs	r2, #2
 8001444:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001446:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	fa93 f2a3 	rbit	r2, r3
 8001450:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001454:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001456:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	fab3 f383 	clz	r3, r3
 8001460:	b2db      	uxtb	r3, r3
 8001462:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001466:	b2db      	uxtb	r3, r3
 8001468:	b2db      	uxtb	r3, r3
 800146a:	095b      	lsrs	r3, r3, #5
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d102      	bne.n	8001478 <HAL_RCC_OscConfig+0xbac>
 8001472:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <HAL_RCC_OscConfig+0xbe8>)
 8001474:	6a1b      	ldr	r3, [r3, #32]
 8001476:	e023      	b.n	80014c0 <HAL_RCC_OscConfig+0xbf4>
 8001478:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800147c:	2202      	movs	r2, #2
 800147e:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001480:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	fa93 f2a3 	rbit	r2, r3
 800148a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800148e:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001490:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	fab3 f383 	clz	r3, r3
 800149a:	b2db      	uxtb	r3, r3
 800149c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	095b      	lsrs	r3, r3, #5
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	2b04      	cmp	r3, #4
 80014aa:	d107      	bne.n	80014bc <HAL_RCC_OscConfig+0xbf0>
 80014ac:	4b01      	ldr	r3, [pc, #4]	; (80014b4 <HAL_RCC_OscConfig+0xbe8>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	e006      	b.n	80014c0 <HAL_RCC_OscConfig+0xbf4>
 80014b2:	bf00      	nop
 80014b4:	40021000 	.word	0x40021000
 80014b8:	40007000 	.word	0x40007000
 80014bc:	4ba5      	ldr	r3, [pc, #660]	; (8001754 <HAL_RCC_OscConfig+0xe88>)
 80014be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80014c4:	2102      	movs	r1, #2
 80014c6:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80014cc:	6812      	ldr	r2, [r2, #0]
 80014ce:	fa92 f1a2 	rbit	r1, r2
 80014d2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80014d6:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80014d8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80014dc:	6812      	ldr	r2, [r2, #0]
 80014de:	fab2 f282 	clz	r2, r2
 80014e2:	b2d2      	uxtb	r2, r2
 80014e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014e8:	b2d2      	uxtb	r2, r2
 80014ea:	b2d2      	uxtb	r2, r2
 80014ec:	f002 021f 	and.w	r2, r2, #31
 80014f0:	2101      	movs	r1, #1
 80014f2:	fa01 f202 	lsl.w	r2, r1, r2
 80014f6:	4013      	ands	r3, r2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	f43f af77 	beq.w	80013ec <HAL_RCC_OscConfig+0xb20>
 80014fe:	e088      	b.n	8001612 <HAL_RCC_OscConfig+0xd46>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001500:	f7ff f8b4 	bl	800066c <HAL_GetTick>
 8001504:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001508:	e00b      	b.n	8001522 <HAL_RCC_OscConfig+0xc56>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800150a:	f7ff f8af 	bl	800066c <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	f241 3288 	movw	r2, #5000	; 0x1388
 800151a:	4293      	cmp	r3, r2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0xc56>
        {
          return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e29b      	b.n	8001a5a <HAL_RCC_OscConfig+0x118e>
 8001522:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001526:	2202      	movs	r2, #2
 8001528:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800152a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	fa93 f2a3 	rbit	r2, r3
 8001534:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001538:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800153a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800153e:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001540:	fab3 f383 	clz	r3, r3
 8001544:	b2db      	uxtb	r3, r3
 8001546:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800154a:	b2db      	uxtb	r3, r3
 800154c:	b2db      	uxtb	r3, r3
 800154e:	095b      	lsrs	r3, r3, #5
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b01      	cmp	r3, #1
 8001554:	d102      	bne.n	800155c <HAL_RCC_OscConfig+0xc90>
 8001556:	4b7f      	ldr	r3, [pc, #508]	; (8001754 <HAL_RCC_OscConfig+0xe88>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	e03b      	b.n	80015d4 <HAL_RCC_OscConfig+0xd08>
 800155c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001560:	2202      	movs	r2, #2
 8001562:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001564:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	fa93 f2a3 	rbit	r2, r3
 800156e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001572:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001574:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	fab3 f383 	clz	r3, r3
 800157e:	b2db      	uxtb	r3, r3
 8001580:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001584:	b2db      	uxtb	r3, r3
 8001586:	b2db      	uxtb	r3, r3
 8001588:	095b      	lsrs	r3, r3, #5
 800158a:	b2db      	uxtb	r3, r3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d102      	bne.n	8001596 <HAL_RCC_OscConfig+0xcca>
 8001590:	4b70      	ldr	r3, [pc, #448]	; (8001754 <HAL_RCC_OscConfig+0xe88>)
 8001592:	6a1b      	ldr	r3, [r3, #32]
 8001594:	e01e      	b.n	80015d4 <HAL_RCC_OscConfig+0xd08>
 8001596:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800159a:	2202      	movs	r2, #2
 800159c:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800159e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	fa93 f2a3 	rbit	r2, r3
 80015a8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80015ac:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80015ae:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	fab3 f383 	clz	r3, r3
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	095b      	lsrs	r3, r3, #5
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b04      	cmp	r3, #4
 80015c8:	d102      	bne.n	80015d0 <HAL_RCC_OscConfig+0xd04>
 80015ca:	4b62      	ldr	r3, [pc, #392]	; (8001754 <HAL_RCC_OscConfig+0xe88>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	e001      	b.n	80015d4 <HAL_RCC_OscConfig+0xd08>
 80015d0:	4b60      	ldr	r3, [pc, #384]	; (8001754 <HAL_RCC_OscConfig+0xe88>)
 80015d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d4:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80015d8:	2102      	movs	r1, #2
 80015da:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015dc:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80015e0:	6812      	ldr	r2, [r2, #0]
 80015e2:	fa92 f1a2 	rbit	r1, r2
 80015e6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80015ea:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80015ec:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80015f0:	6812      	ldr	r2, [r2, #0]
 80015f2:	fab2 f282 	clz	r2, r2
 80015f6:	b2d2      	uxtb	r2, r2
 80015f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	b2d2      	uxtb	r2, r2
 8001600:	f002 021f 	and.w	r2, r2, #31
 8001604:	2101      	movs	r1, #1
 8001606:	fa01 f202 	lsl.w	r2, r1, r2
 800160a:	4013      	ands	r3, r2
 800160c:	2b00      	cmp	r3, #0
 800160e:	f47f af7c 	bne.w	800150a <HAL_RCC_OscConfig+0xc3e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001612:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001616:	2b01      	cmp	r3, #1
 8001618:	d105      	bne.n	8001626 <HAL_RCC_OscConfig+0xd5a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800161a:	4a4e      	ldr	r2, [pc, #312]	; (8001754 <HAL_RCC_OscConfig+0xe88>)
 800161c:	4b4d      	ldr	r3, [pc, #308]	; (8001754 <HAL_RCC_OscConfig+0xe88>)
 800161e:	69db      	ldr	r3, [r3, #28]
 8001620:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001624:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001626:	1d3b      	adds	r3, r7, #4
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	69db      	ldr	r3, [r3, #28]
 800162c:	2b00      	cmp	r3, #0
 800162e:	f000 8213 	beq.w	8001a58 <HAL_RCC_OscConfig+0x118c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001632:	4b48      	ldr	r3, [pc, #288]	; (8001754 <HAL_RCC_OscConfig+0xe88>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f003 030c 	and.w	r3, r3, #12
 800163a:	2b08      	cmp	r3, #8
 800163c:	f000 8208 	beq.w	8001a50 <HAL_RCC_OscConfig+0x1184>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	2b02      	cmp	r3, #2
 8001648:	f040 815c 	bne.w	8001904 <HAL_RCC_OscConfig+0x1038>
 800164c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001650:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001654:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001656:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	fa93 f2a3 	rbit	r2, r3
 8001660:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001664:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001666:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800166a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800166c:	fab3 f383 	clz	r3, r3
 8001670:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001674:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	461a      	mov	r2, r3
 800167c:	2300      	movs	r3, #0
 800167e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001680:	f7fe fff4 	bl	800066c <HAL_GetTick>
 8001684:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001688:	e009      	b.n	800169e <HAL_RCC_OscConfig+0xdd2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800168a:	f7fe ffef 	bl	800066c <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0xdd2>
          {
            return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e1dd      	b.n	8001a5a <HAL_RCC_OscConfig+0x118e>
 800169e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80016a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016a6:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	fa93 f2a3 	rbit	r2, r3
 80016b2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80016b6:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80016b8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80016bc:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016be:	fab3 f383 	clz	r3, r3
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	f043 0320 	orr.w	r3, r3, #32
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	095b      	lsrs	r3, r3, #5
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d102      	bne.n	80016da <HAL_RCC_OscConfig+0xe0e>
 80016d4:	4b1f      	ldr	r3, [pc, #124]	; (8001754 <HAL_RCC_OscConfig+0xe88>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	e040      	b.n	800175c <HAL_RCC_OscConfig+0xe90>
 80016da:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80016de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016e2:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	fa93 f2a3 	rbit	r2, r3
 80016ee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80016f2:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80016f4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	fab3 f383 	clz	r3, r3
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	f043 0320 	orr.w	r3, r3, #32
 8001704:	b2db      	uxtb	r3, r3
 8001706:	b2db      	uxtb	r3, r3
 8001708:	095b      	lsrs	r3, r3, #5
 800170a:	b2db      	uxtb	r3, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d102      	bne.n	8001716 <HAL_RCC_OscConfig+0xe4a>
 8001710:	4b10      	ldr	r3, [pc, #64]	; (8001754 <HAL_RCC_OscConfig+0xe88>)
 8001712:	6a1b      	ldr	r3, [r3, #32]
 8001714:	e022      	b.n	800175c <HAL_RCC_OscConfig+0xe90>
 8001716:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800171a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800171e:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001720:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	fa93 f2a3 	rbit	r2, r3
 800172a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800172e:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001730:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	fab3 f383 	clz	r3, r3
 800173a:	b2db      	uxtb	r3, r3
 800173c:	f043 0320 	orr.w	r3, r3, #32
 8001740:	b2db      	uxtb	r3, r3
 8001742:	b2db      	uxtb	r3, r3
 8001744:	095b      	lsrs	r3, r3, #5
 8001746:	b2db      	uxtb	r3, r3
 8001748:	2b04      	cmp	r3, #4
 800174a:	d105      	bne.n	8001758 <HAL_RCC_OscConfig+0xe8c>
 800174c:	4b01      	ldr	r3, [pc, #4]	; (8001754 <HAL_RCC_OscConfig+0xe88>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	e004      	b.n	800175c <HAL_RCC_OscConfig+0xe90>
 8001752:	bf00      	nop
 8001754:	40021000 	.word	0x40021000
 8001758:	4bbe      	ldr	r3, [pc, #760]	; (8001a54 <HAL_RCC_OscConfig+0x1188>)
 800175a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001760:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001764:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001766:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800176a:	6812      	ldr	r2, [r2, #0]
 800176c:	fa92 f1a2 	rbit	r1, r2
 8001770:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001774:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001776:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800177a:	6812      	ldr	r2, [r2, #0]
 800177c:	fab2 f282 	clz	r2, r2
 8001780:	b2d2      	uxtb	r2, r2
 8001782:	f042 0220 	orr.w	r2, r2, #32
 8001786:	b2d2      	uxtb	r2, r2
 8001788:	b2d2      	uxtb	r2, r2
 800178a:	f002 021f 	and.w	r2, r2, #31
 800178e:	2101      	movs	r1, #1
 8001790:	fa01 f202 	lsl.w	r2, r1, r2
 8001794:	4013      	ands	r3, r2
 8001796:	2b00      	cmp	r3, #0
 8001798:	f47f af77 	bne.w	800168a <HAL_RCC_OscConfig+0xdbe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800179c:	48ad      	ldr	r0, [pc, #692]	; (8001a54 <HAL_RCC_OscConfig+0x1188>)
 800179e:	4bad      	ldr	r3, [pc, #692]	; (8001a54 <HAL_RCC_OscConfig+0x1188>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80017ac:	1d3b      	adds	r3, r7, #4
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6a1b      	ldr	r3, [r3, #32]
 80017b2:	430b      	orrs	r3, r1
 80017b4:	4313      	orrs	r3, r2
 80017b6:	6043      	str	r3, [r0, #4]
 80017b8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80017bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80017c0:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	fa93 f2a3 	rbit	r2, r3
 80017cc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017d0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80017d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017d6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017d8:	fab3 f383 	clz	r3, r3
 80017dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	461a      	mov	r2, r3
 80017e8:	2301      	movs	r3, #1
 80017ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ec:	f7fe ff3e 	bl	800066c <HAL_GetTick>
 80017f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017f4:	e009      	b.n	800180a <HAL_RCC_OscConfig+0xf3e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017f6:	f7fe ff39 	bl	800066c <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0xf3e>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e127      	b.n	8001a5a <HAL_RCC_OscConfig+0x118e>
 800180a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800180e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001812:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001814:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	fa93 f2a3 	rbit	r2, r3
 800181e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001822:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001824:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001828:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800182a:	fab3 f383 	clz	r3, r3
 800182e:	b2db      	uxtb	r3, r3
 8001830:	f043 0320 	orr.w	r3, r3, #32
 8001834:	b2db      	uxtb	r3, r3
 8001836:	b2db      	uxtb	r3, r3
 8001838:	095b      	lsrs	r3, r3, #5
 800183a:	b2db      	uxtb	r3, r3
 800183c:	2b01      	cmp	r3, #1
 800183e:	d102      	bne.n	8001846 <HAL_RCC_OscConfig+0xf7a>
 8001840:	4b84      	ldr	r3, [pc, #528]	; (8001a54 <HAL_RCC_OscConfig+0x1188>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	e03d      	b.n	80018c2 <HAL_RCC_OscConfig+0xff6>
 8001846:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800184a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800184e:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001850:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	fa93 f2a3 	rbit	r2, r3
 800185a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800185e:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001860:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	fab3 f383 	clz	r3, r3
 800186a:	b2db      	uxtb	r3, r3
 800186c:	f043 0320 	orr.w	r3, r3, #32
 8001870:	b2db      	uxtb	r3, r3
 8001872:	b2db      	uxtb	r3, r3
 8001874:	095b      	lsrs	r3, r3, #5
 8001876:	b2db      	uxtb	r3, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d102      	bne.n	8001882 <HAL_RCC_OscConfig+0xfb6>
 800187c:	4b75      	ldr	r3, [pc, #468]	; (8001a54 <HAL_RCC_OscConfig+0x1188>)
 800187e:	6a1b      	ldr	r3, [r3, #32]
 8001880:	e01f      	b.n	80018c2 <HAL_RCC_OscConfig+0xff6>
 8001882:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001886:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800188a:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	fa93 f2a3 	rbit	r2, r3
 8001896:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800189a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800189c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	fab3 f383 	clz	r3, r3
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	f043 0320 	orr.w	r3, r3, #32
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	095b      	lsrs	r3, r3, #5
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	2b04      	cmp	r3, #4
 80018b6:	d102      	bne.n	80018be <HAL_RCC_OscConfig+0xff2>
 80018b8:	4b66      	ldr	r3, [pc, #408]	; (8001a54 <HAL_RCC_OscConfig+0x1188>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	e001      	b.n	80018c2 <HAL_RCC_OscConfig+0xff6>
 80018be:	4b65      	ldr	r3, [pc, #404]	; (8001a54 <HAL_RCC_OscConfig+0x1188>)
 80018c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80018c6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80018ca:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018cc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80018d0:	6812      	ldr	r2, [r2, #0]
 80018d2:	fa92 f1a2 	rbit	r1, r2
 80018d6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80018da:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80018dc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80018e0:	6812      	ldr	r2, [r2, #0]
 80018e2:	fab2 f282 	clz	r2, r2
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	f042 0220 	orr.w	r2, r2, #32
 80018ec:	b2d2      	uxtb	r2, r2
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	f002 021f 	and.w	r2, r2, #31
 80018f4:	2101      	movs	r1, #1
 80018f6:	fa01 f202 	lsl.w	r2, r1, r2
 80018fa:	4013      	ands	r3, r2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f43f af7a 	beq.w	80017f6 <HAL_RCC_OscConfig+0xf2a>
 8001902:	e0a9      	b.n	8001a58 <HAL_RCC_OscConfig+0x118c>
 8001904:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001908:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800190c:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	fa93 f2a3 	rbit	r2, r3
 8001918:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800191c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800191e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001922:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001924:	fab3 f383 	clz	r3, r3
 8001928:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800192c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	461a      	mov	r2, r3
 8001934:	2300      	movs	r3, #0
 8001936:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001938:	f7fe fe98 	bl	800066c <HAL_GetTick>
 800193c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001940:	e009      	b.n	8001956 <HAL_RCC_OscConfig+0x108a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001942:	f7fe fe93 	bl	800066c <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x108a>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e081      	b.n	8001a5a <HAL_RCC_OscConfig+0x118e>
 8001956:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800195a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800195e:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001960:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	fa93 f2a3 	rbit	r2, r3
 800196a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800196e:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001970:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001974:	681b      	ldr	r3, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001976:	fab3 f383 	clz	r3, r3
 800197a:	b2db      	uxtb	r3, r3
 800197c:	f043 0320 	orr.w	r3, r3, #32
 8001980:	b2db      	uxtb	r3, r3
 8001982:	b2db      	uxtb	r3, r3
 8001984:	095b      	lsrs	r3, r3, #5
 8001986:	b2db      	uxtb	r3, r3
 8001988:	2b01      	cmp	r3, #1
 800198a:	d102      	bne.n	8001992 <HAL_RCC_OscConfig+0x10c6>
 800198c:	4b31      	ldr	r3, [pc, #196]	; (8001a54 <HAL_RCC_OscConfig+0x1188>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	e03d      	b.n	8001a0e <HAL_RCC_OscConfig+0x1142>
 8001992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001996:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800199a:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	fa93 f2a3 	rbit	r2, r3
 80019a6:	f107 0320 	add.w	r3, r7, #32
 80019aa:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80019ac:	f107 0320 	add.w	r3, r7, #32
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	fab3 f383 	clz	r3, r3
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	f043 0320 	orr.w	r3, r3, #32
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	095b      	lsrs	r3, r3, #5
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d102      	bne.n	80019ce <HAL_RCC_OscConfig+0x1102>
 80019c8:	4b22      	ldr	r3, [pc, #136]	; (8001a54 <HAL_RCC_OscConfig+0x1188>)
 80019ca:	6a1b      	ldr	r3, [r3, #32]
 80019cc:	e01f      	b.n	8001a0e <HAL_RCC_OscConfig+0x1142>
 80019ce:	f107 031c 	add.w	r3, r7, #28
 80019d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019d6:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d8:	f107 031c 	add.w	r3, r7, #28
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	fa93 f2a3 	rbit	r2, r3
 80019e2:	f107 0318 	add.w	r3, r7, #24
 80019e6:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80019e8:	f107 0318 	add.w	r3, r7, #24
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	fab3 f383 	clz	r3, r3
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	f043 0320 	orr.w	r3, r3, #32
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	095b      	lsrs	r3, r3, #5
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	2b04      	cmp	r3, #4
 8001a02:	d102      	bne.n	8001a0a <HAL_RCC_OscConfig+0x113e>
 8001a04:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <HAL_RCC_OscConfig+0x1188>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	e001      	b.n	8001a0e <HAL_RCC_OscConfig+0x1142>
 8001a0a:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <HAL_RCC_OscConfig+0x1188>)
 8001a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0e:	f107 0214 	add.w	r2, r7, #20
 8001a12:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a16:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a18:	f107 0214 	add.w	r2, r7, #20
 8001a1c:	6812      	ldr	r2, [r2, #0]
 8001a1e:	fa92 f1a2 	rbit	r1, r2
 8001a22:	f107 0210 	add.w	r2, r7, #16
 8001a26:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001a28:	f107 0210 	add.w	r2, r7, #16
 8001a2c:	6812      	ldr	r2, [r2, #0]
 8001a2e:	fab2 f282 	clz	r2, r2
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	f042 0220 	orr.w	r2, r2, #32
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	f002 021f 	and.w	r2, r2, #31
 8001a40:	2101      	movs	r1, #1
 8001a42:	fa01 f202 	lsl.w	r2, r1, r2
 8001a46:	4013      	ands	r3, r2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f47f af7a 	bne.w	8001942 <HAL_RCC_OscConfig+0x1076>
 8001a4e:	e003      	b.n	8001a58 <HAL_RCC_OscConfig+0x118c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e002      	b.n	8001a5a <HAL_RCC_OscConfig+0x118e>
 8001a54:	40021000 	.word	0x40021000
    }
  }
  
  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b09e      	sub	sp, #120	; 0x78
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	677b      	str	r3, [r7, #116]	; 0x74
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001a72:	4ba5      	ldr	r3, [pc, #660]	; (8001d08 <HAL_RCC_ClockConfig+0x2a4>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0207 	and.w	r2, r3, #7
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d210      	bcs.n	8001aa2 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a80:	49a1      	ldr	r1, [pc, #644]	; (8001d08 <HAL_RCC_ClockConfig+0x2a4>)
 8001a82:	4ba1      	ldr	r3, [pc, #644]	; (8001d08 <HAL_RCC_ClockConfig+0x2a4>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f023 0207 	bic.w	r2, r3, #7
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a90:	4b9d      	ldr	r3, [pc, #628]	; (8001d08 <HAL_RCC_ClockConfig+0x2a4>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0207 	and.w	r2, r3, #7
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d001      	beq.n	8001aa2 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e1d5      	b.n	8001e4e <HAL_RCC_ClockConfig+0x3ea>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d008      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aae:	4997      	ldr	r1, [pc, #604]	; (8001d0c <HAL_RCC_ClockConfig+0x2a8>)
 8001ab0:	4b96      	ldr	r3, [pc, #600]	; (8001d0c <HAL_RCC_ClockConfig+0x2a8>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f000 816d 	beq.w	8001da8 <HAL_RCC_ClockConfig+0x344>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d15d      	bne.n	8001b92 <HAL_RCC_ClockConfig+0x12e>
 8001ad6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ada:	673b      	str	r3, [r7, #112]	; 0x70
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001adc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ade:	fa93 f3a3 	rbit	r3, r3
 8001ae2:	66fb      	str	r3, [r7, #108]	; 0x6c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001ae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae6:	fab3 f383 	clz	r3, r3
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	f043 0320 	orr.w	r3, r3, #32
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	095b      	lsrs	r3, r3, #5
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d102      	bne.n	8001b02 <HAL_RCC_ClockConfig+0x9e>
 8001afc:	4b83      	ldr	r3, [pc, #524]	; (8001d0c <HAL_RCC_ClockConfig+0x2a8>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	e02d      	b.n	8001b5e <HAL_RCC_ClockConfig+0xfa>
 8001b02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b06:	66bb      	str	r3, [r7, #104]	; 0x68
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b0a:	fa93 f3a3 	rbit	r3, r3
 8001b0e:	667b      	str	r3, [r7, #100]	; 0x64
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001b10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b12:	fab3 f383 	clz	r3, r3
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	f043 0320 	orr.w	r3, r3, #32
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	095b      	lsrs	r3, r3, #5
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d102      	bne.n	8001b2e <HAL_RCC_ClockConfig+0xca>
 8001b28:	4b78      	ldr	r3, [pc, #480]	; (8001d0c <HAL_RCC_ClockConfig+0x2a8>)
 8001b2a:	6a1b      	ldr	r3, [r3, #32]
 8001b2c:	e017      	b.n	8001b5e <HAL_RCC_ClockConfig+0xfa>
 8001b2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b32:	663b      	str	r3, [r7, #96]	; 0x60
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b36:	fa93 f3a3 	rbit	r3, r3
 8001b3a:	65fb      	str	r3, [r7, #92]	; 0x5c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001b3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b3e:	fab3 f383 	clz	r3, r3
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	f043 0320 	orr.w	r3, r3, #32
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	095b      	lsrs	r3, r3, #5
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	2b04      	cmp	r3, #4
 8001b52:	d102      	bne.n	8001b5a <HAL_RCC_ClockConfig+0xf6>
 8001b54:	4b6d      	ldr	r3, [pc, #436]	; (8001d0c <HAL_RCC_ClockConfig+0x2a8>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	e001      	b.n	8001b5e <HAL_RCC_ClockConfig+0xfa>
 8001b5a:	4b6c      	ldr	r3, [pc, #432]	; (8001d0c <HAL_RCC_ClockConfig+0x2a8>)
 8001b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b62:	65ba      	str	r2, [r7, #88]	; 0x58
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b66:	fa92 f2a2 	rbit	r2, r2
 8001b6a:	657a      	str	r2, [r7, #84]	; 0x54
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001b6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b6e:	fab2 f282 	clz	r2, r2
 8001b72:	b2d2      	uxtb	r2, r2
 8001b74:	f042 0220 	orr.w	r2, r2, #32
 8001b78:	b2d2      	uxtb	r2, r2
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	f002 021f 	and.w	r2, r2, #31
 8001b80:	2101      	movs	r1, #1
 8001b82:	fa01 f202 	lsl.w	r2, r1, r2
 8001b86:	4013      	ands	r3, r2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f040 80c1 	bne.w	8001d10 <HAL_RCC_ClockConfig+0x2ac>
      {
        return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e15d      	b.n	8001e4e <HAL_RCC_ClockConfig+0x3ea>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d15c      	bne.n	8001c54 <HAL_RCC_ClockConfig+0x1f0>
 8001b9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b9e:	653b      	str	r3, [r7, #80]	; 0x50
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ba2:	fa93 f3a3 	rbit	r3, r3
 8001ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001baa:	fab3 f383 	clz	r3, r3
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	f043 0320 	orr.w	r3, r3, #32
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	095b      	lsrs	r3, r3, #5
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d102      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0x162>
 8001bc0:	4b52      	ldr	r3, [pc, #328]	; (8001d0c <HAL_RCC_ClockConfig+0x2a8>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	e02d      	b.n	8001c22 <HAL_RCC_ClockConfig+0x1be>
 8001bc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bca:	64bb      	str	r3, [r7, #72]	; 0x48
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bce:	fa93 f3a3 	rbit	r3, r3
 8001bd2:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001bd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bd6:	fab3 f383 	clz	r3, r3
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	f043 0320 	orr.w	r3, r3, #32
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	095b      	lsrs	r3, r3, #5
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d102      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0x18e>
 8001bec:	4b47      	ldr	r3, [pc, #284]	; (8001d0c <HAL_RCC_ClockConfig+0x2a8>)
 8001bee:	6a1b      	ldr	r3, [r3, #32]
 8001bf0:	e017      	b.n	8001c22 <HAL_RCC_ClockConfig+0x1be>
 8001bf2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bf6:	643b      	str	r3, [r7, #64]	; 0x40
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bfa:	fa93 f3a3 	rbit	r3, r3
 8001bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c02:	fab3 f383 	clz	r3, r3
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	f043 0320 	orr.w	r3, r3, #32
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	095b      	lsrs	r3, r3, #5
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2b04      	cmp	r3, #4
 8001c16:	d102      	bne.n	8001c1e <HAL_RCC_ClockConfig+0x1ba>
 8001c18:	4b3c      	ldr	r3, [pc, #240]	; (8001d0c <HAL_RCC_ClockConfig+0x2a8>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	e001      	b.n	8001c22 <HAL_RCC_ClockConfig+0x1be>
 8001c1e:	4b3b      	ldr	r3, [pc, #236]	; (8001d0c <HAL_RCC_ClockConfig+0x2a8>)
 8001c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c26:	63ba      	str	r2, [r7, #56]	; 0x38
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c2a:	fa92 f2a2 	rbit	r2, r2
 8001c2e:	637a      	str	r2, [r7, #52]	; 0x34
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001c30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c32:	fab2 f282 	clz	r2, r2
 8001c36:	b2d2      	uxtb	r2, r2
 8001c38:	f042 0220 	orr.w	r2, r2, #32
 8001c3c:	b2d2      	uxtb	r2, r2
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	f002 021f 	and.w	r2, r2, #31
 8001c44:	2101      	movs	r1, #1
 8001c46:	fa01 f202 	lsl.w	r2, r1, r2
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d15f      	bne.n	8001d10 <HAL_RCC_ClockConfig+0x2ac>
      {
        return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e0fc      	b.n	8001e4e <HAL_RCC_ClockConfig+0x3ea>
 8001c54:	2302      	movs	r3, #2
 8001c56:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c5a:	fa93 f3a3 	rbit	r3, r3
 8001c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c62:	fab3 f383 	clz	r3, r3
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	f043 0320 	orr.w	r3, r3, #32
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	095b      	lsrs	r3, r3, #5
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d102      	bne.n	8001c7e <HAL_RCC_ClockConfig+0x21a>
 8001c78:	4b24      	ldr	r3, [pc, #144]	; (8001d0c <HAL_RCC_ClockConfig+0x2a8>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	e02b      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x272>
 8001c7e:	2302      	movs	r3, #2
 8001c80:	62bb      	str	r3, [r7, #40]	; 0x28
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c84:	fa93 f3a3 	rbit	r3, r3
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8c:	fab3 f383 	clz	r3, r3
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	f043 0320 	orr.w	r3, r3, #32
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	095b      	lsrs	r3, r3, #5
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d102      	bne.n	8001ca8 <HAL_RCC_ClockConfig+0x244>
 8001ca2:	4b1a      	ldr	r3, [pc, #104]	; (8001d0c <HAL_RCC_ClockConfig+0x2a8>)
 8001ca4:	6a1b      	ldr	r3, [r3, #32]
 8001ca6:	e016      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x272>
 8001ca8:	2302      	movs	r3, #2
 8001caa:	623b      	str	r3, [r7, #32]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cac:	6a3b      	ldr	r3, [r7, #32]
 8001cae:	fa93 f3a3 	rbit	r3, r3
 8001cb2:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	fab3 f383 	clz	r3, r3
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	f043 0320 	orr.w	r3, r3, #32
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	095b      	lsrs	r3, r3, #5
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	2b04      	cmp	r3, #4
 8001cca:	d102      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0x26e>
 8001ccc:	4b0f      	ldr	r3, [pc, #60]	; (8001d0c <HAL_RCC_ClockConfig+0x2a8>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	e001      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x272>
 8001cd2:	4b0e      	ldr	r3, [pc, #56]	; (8001d0c <HAL_RCC_ClockConfig+0x2a8>)
 8001cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	61ba      	str	r2, [r7, #24]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	fa92 f2a2 	rbit	r2, r2
 8001ce0:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	fab2 f282 	clz	r2, r2
 8001ce8:	b2d2      	uxtb	r2, r2
 8001cea:	f042 0220 	orr.w	r2, r2, #32
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	b2d2      	uxtb	r2, r2
 8001cf2:	f002 021f 	and.w	r2, r2, #31
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	fa01 f202 	lsl.w	r2, r1, r2
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d106      	bne.n	8001d10 <HAL_RCC_ClockConfig+0x2ac>
      {
        return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e0a3      	b.n	8001e4e <HAL_RCC_ClockConfig+0x3ea>
 8001d06:	bf00      	nop
 8001d08:	40022000 	.word	0x40022000
 8001d0c:	40021000 	.word	0x40021000
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d10:	4951      	ldr	r1, [pc, #324]	; (8001e58 <HAL_RCC_ClockConfig+0x3f4>)
 8001d12:	4b51      	ldr	r3, [pc, #324]	; (8001e58 <HAL_RCC_ClockConfig+0x3f4>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f023 0203 	bic.w	r2, r3, #3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d22:	f7fe fca3 	bl	800066c <HAL_GetTick>
 8001d26:	6778      	str	r0, [r7, #116]	; 0x74
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d112      	bne.n	8001d56 <HAL_RCC_ClockConfig+0x2f2>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d30:	e00a      	b.n	8001d48 <HAL_RCC_ClockConfig+0x2e4>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d32:	f7fe fc9b 	bl	800066c <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_ClockConfig+0x2e4>
        {
          return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e082      	b.n	8001e4e <HAL_RCC_ClockConfig+0x3ea>
    /* Get Start Tick */
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d48:	4b43      	ldr	r3, [pc, #268]	; (8001e58 <HAL_RCC_ClockConfig+0x3f4>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f003 030c 	and.w	r3, r3, #12
 8001d50:	2b04      	cmp	r3, #4
 8001d52:	d1ee      	bne.n	8001d32 <HAL_RCC_ClockConfig+0x2ce>
 8001d54:	e028      	b.n	8001da8 <HAL_RCC_ClockConfig+0x344>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d112      	bne.n	8001d84 <HAL_RCC_ClockConfig+0x320>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d5e:	e00a      	b.n	8001d76 <HAL_RCC_ClockConfig+0x312>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d60:	f7fe fc84 	bl	800066c <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_ClockConfig+0x312>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e06b      	b.n	8001e4e <HAL_RCC_ClockConfig+0x3ea>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d76:	4b38      	ldr	r3, [pc, #224]	; (8001e58 <HAL_RCC_ClockConfig+0x3f4>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
 8001d7e:	2b08      	cmp	r3, #8
 8001d80:	d1ee      	bne.n	8001d60 <HAL_RCC_ClockConfig+0x2fc>
 8001d82:	e011      	b.n	8001da8 <HAL_RCC_ClockConfig+0x344>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d84:	e00a      	b.n	8001d9c <HAL_RCC_ClockConfig+0x338>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d86:	f7fe fc71 	bl	800066c <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_ClockConfig+0x338>
        {
          return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e058      	b.n	8001e4e <HAL_RCC_ClockConfig+0x3ea>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d9c:	4b2e      	ldr	r3, [pc, #184]	; (8001e58 <HAL_RCC_ClockConfig+0x3f4>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 030c 	and.w	r3, r3, #12
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1ee      	bne.n	8001d86 <HAL_RCC_ClockConfig+0x322>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001da8:	4b2c      	ldr	r3, [pc, #176]	; (8001e5c <HAL_RCC_ClockConfig+0x3f8>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0207 	and.w	r2, r3, #7
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d910      	bls.n	8001dd8 <HAL_RCC_ClockConfig+0x374>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db6:	4929      	ldr	r1, [pc, #164]	; (8001e5c <HAL_RCC_ClockConfig+0x3f8>)
 8001db8:	4b28      	ldr	r3, [pc, #160]	; (8001e5c <HAL_RCC_ClockConfig+0x3f8>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f023 0207 	bic.w	r2, r3, #7
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001dc6:	4b25      	ldr	r3, [pc, #148]	; (8001e5c <HAL_RCC_ClockConfig+0x3f8>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0207 	and.w	r2, r3, #7
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d001      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x374>
    {
      return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e03a      	b.n	8001e4e <HAL_RCC_ClockConfig+0x3ea>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d008      	beq.n	8001df6 <HAL_RCC_ClockConfig+0x392>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001de4:	491c      	ldr	r1, [pc, #112]	; (8001e58 <HAL_RCC_ClockConfig+0x3f4>)
 8001de6:	4b1c      	ldr	r3, [pc, #112]	; (8001e58 <HAL_RCC_ClockConfig+0x3f4>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d009      	beq.n	8001e16 <HAL_RCC_ClockConfig+0x3b2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e02:	4915      	ldr	r1, [pc, #84]	; (8001e58 <HAL_RCC_ClockConfig+0x3f4>)
 8001e04:	4b14      	ldr	r3, [pc, #80]	; (8001e58 <HAL_RCC_ClockConfig+0x3f4>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	4313      	orrs	r3, r2
 8001e14:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e16:	f000 f827 	bl	8001e68 <HAL_RCC_GetSysClockFreq>
 8001e1a:	4601      	mov	r1, r0
 8001e1c:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <HAL_RCC_ClockConfig+0x3f4>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e24:	23f0      	movs	r3, #240	; 0xf0
 8001e26:	613b      	str	r3, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	fa93 f3a3 	rbit	r3, r3
 8001e2e:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	fab3 f383 	clz	r3, r3
 8001e36:	fa22 f303 	lsr.w	r3, r2, r3
 8001e3a:	4a09      	ldr	r2, [pc, #36]	; (8001e60 <HAL_RCC_ClockConfig+0x3fc>)
 8001e3c:	5cd3      	ldrb	r3, [r2, r3]
 8001e3e:	fa21 f303 	lsr.w	r3, r1, r3
 8001e42:	4a08      	ldr	r2, [pc, #32]	; (8001e64 <HAL_RCC_ClockConfig+0x400>)
 8001e44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001e46:	2000      	movs	r0, #0
 8001e48:	f7fe fa12 	bl	8000270 <HAL_InitTick>
  
  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3778      	adds	r7, #120	; 0x78
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	40022000 	.word	0x40022000
 8001e60:	08005390 	.word	0x08005390
 8001e64:	20000000 	.word	0x20000000

08001e68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b08b      	sub	sp, #44	; 0x2c
 8001e6c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61fb      	str	r3, [r7, #28]
 8001e72:	2300      	movs	r3, #0
 8001e74:	61bb      	str	r3, [r7, #24]
 8001e76:	2300      	movs	r3, #0
 8001e78:	627b      	str	r3, [r7, #36]	; 0x24
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001e82:	4b29      	ldr	r3, [pc, #164]	; (8001f28 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	f003 030c 	and.w	r3, r3, #12
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	d002      	beq.n	8001e98 <HAL_RCC_GetSysClockFreq+0x30>
 8001e92:	2b08      	cmp	r3, #8
 8001e94:	d003      	beq.n	8001e9e <HAL_RCC_GetSysClockFreq+0x36>
 8001e96:	e03c      	b.n	8001f12 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e98:	4b24      	ldr	r3, [pc, #144]	; (8001f2c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e9a:	623b      	str	r3, [r7, #32]
      break;
 8001e9c:	e03c      	b.n	8001f18 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ea4:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8001ea8:	613b      	str	r3, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	fa93 f3a3 	rbit	r3, r3
 8001eb0:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	fab3 f383 	clz	r3, r3
 8001eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ebc:	4a1c      	ldr	r2, [pc, #112]	; (8001f30 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001ebe:	5cd3      	ldrb	r3, [r2, r3]
 8001ec0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001ec2:	4b19      	ldr	r3, [pc, #100]	; (8001f28 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec6:	f003 020f 	and.w	r2, r3, #15
 8001eca:	230f      	movs	r3, #15
 8001ecc:	60bb      	str	r3, [r7, #8]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	fa93 f3a3 	rbit	r3, r3
 8001ed4:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	fab3 f383 	clz	r3, r3
 8001edc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee0:	4a14      	ldr	r2, [pc, #80]	; (8001f34 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001ee2:	5cd3      	ldrb	r3, [r2, r3]
 8001ee4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d008      	beq.n	8001f02 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001ef0:	4a0e      	ldr	r2, [pc, #56]	; (8001f2c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef8:	697a      	ldr	r2, [r7, #20]
 8001efa:	fb02 f303 	mul.w	r3, r2, r3
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24
 8001f00:	e004      	b.n	8001f0c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	4a0c      	ldr	r2, [pc, #48]	; (8001f38 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001f06:	fb02 f303 	mul.w	r3, r2, r3
 8001f0a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0e:	623b      	str	r3, [r7, #32]
      break;
 8001f10:	e002      	b.n	8001f18 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f12:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f14:	623b      	str	r3, [r7, #32]
      break;
 8001f16:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f18:	6a3b      	ldr	r3, [r7, #32]
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	372c      	adds	r7, #44	; 0x2c
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	007a1200 	.word	0x007a1200
 8001f30:	080053a8 	.word	0x080053a8
 8001f34:	080053b8 	.word	0x080053b8
 8001f38:	003d0900 	.word	0x003d0900

08001f3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f40:	4b03      	ldr	r3, [pc, #12]	; (8001f50 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f42:	681b      	ldr	r3, [r3, #0]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	20000000 	.word	0x20000000

08001f54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001f5a:	f7ff ffef 	bl	8001f3c <HAL_RCC_GetHCLKFreq>
 8001f5e:	4601      	mov	r1, r0
 8001f60:	4b0b      	ldr	r3, [pc, #44]	; (8001f90 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8001f68:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001f6c:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	fa93 f3a3 	rbit	r3, r3
 8001f74:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	fab3 f383 	clz	r3, r3
 8001f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f80:	4a04      	ldr	r2, [pc, #16]	; (8001f94 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001f82:	5cd3      	ldrb	r3, [r2, r3]
 8001f84:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40021000 	.word	0x40021000
 8001f94:	080053a0 	.word	0x080053a0

08001f98 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	220f      	movs	r2, #15
 8001fa6:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001fa8:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <HAL_RCC_GetClockConfig+0x58>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f003 0203 	and.w	r2, r3, #3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001fb4:	4b0e      	ldr	r3, [pc, #56]	; (8001ff0 <HAL_RCC_GetClockConfig+0x58>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8001fc0:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <HAL_RCC_GetClockConfig+0x58>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001fcc:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <HAL_RCC_GetClockConfig+0x58>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001fd4:	08da      	lsrs	r2, r3, #3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8001fda:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <HAL_RCC_GetClockConfig+0x5c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0207 	and.w	r2, r3, #7
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	601a      	str	r2, [r3, #0]
}
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	40022000 	.word	0x40022000

08001ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b087      	sub	sp, #28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800200a:	2300      	movs	r3, #0
 800200c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800200e:	e14a      	b.n	80022a6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	2101      	movs	r1, #1
 8002018:	fa01 f303 	lsl.w	r3, r1, r3
 800201c:	4013      	ands	r3, r2
 800201e:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2b00      	cmp	r3, #0
 8002024:	f000 813c 	beq.w	80022a0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2b02      	cmp	r3, #2
 800202e:	d003      	beq.n	8002038 <HAL_GPIO_Init+0x40>
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	2b12      	cmp	r3, #18
 8002036:	d122      	bne.n	800207e <HAL_GPIO_Init+0x86>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	08da      	lsrs	r2, r3, #3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3208      	adds	r2, #8
 8002040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002044:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	f003 0307 	and.w	r3, r3, #7
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	461a      	mov	r2, r3
 8002050:	230f      	movs	r3, #15
 8002052:	4093      	lsls	r3, r2
 8002054:	43db      	mvns	r3, r3
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	4013      	ands	r3, r2
 800205a:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	697a      	ldr	r2, [r7, #20]
 8002062:	f002 0207 	and.w	r2, r2, #7
 8002066:	0092      	lsls	r2, r2, #2
 8002068:	4093      	lsls	r3, r2
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	4313      	orrs	r3, r2
 800206e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	08da      	lsrs	r2, r3, #3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3208      	adds	r2, #8
 8002078:	6939      	ldr	r1, [r7, #16]
 800207a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	461a      	mov	r2, r3
 800208a:	2303      	movs	r3, #3
 800208c:	4093      	lsls	r3, r2
 800208e:	43db      	mvns	r3, r3
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	4013      	ands	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f003 0303 	and.w	r3, r3, #3
 800209e:	697a      	ldr	r2, [r7, #20]
 80020a0:	0052      	lsls	r2, r2, #1
 80020a2:	4093      	lsls	r3, r2
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d00b      	beq.n	80020d0 <HAL_GPIO_Init+0xd8>
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d007      	beq.n	80020d0 <HAL_GPIO_Init+0xd8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020c4:	2b11      	cmp	r3, #17
 80020c6:	d003      	beq.n	80020d0 <HAL_GPIO_Init+0xd8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	2b12      	cmp	r3, #18
 80020ce:	d12f      	bne.n	8002130 <HAL_GPIO_Init+0x138>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	461a      	mov	r2, r3
 80020dc:	2303      	movs	r3, #3
 80020de:	4093      	lsls	r3, r2
 80020e0:	43db      	mvns	r3, r3
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	4013      	ands	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	697a      	ldr	r2, [r7, #20]
 80020ee:	0052      	lsls	r2, r2, #1
 80020f0:	4093      	lsls	r3, r2
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	2201      	movs	r2, #1
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	43db      	mvns	r3, r3
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	4013      	ands	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f003 0310 	and.w	r3, r3, #16
 800211c:	091a      	lsrs	r2, r3, #4
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	4313      	orrs	r3, r2
 8002128:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	461a      	mov	r2, r3
 800213c:	2303      	movs	r3, #3
 800213e:	4093      	lsls	r3, r2
 8002140:	43db      	mvns	r3, r3
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	4013      	ands	r3, r2
 8002146:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	0052      	lsls	r2, r2, #1
 8002150:	4093      	lsls	r3, r2
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	4313      	orrs	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	f000 809a 	beq.w	80022a0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800216c:	4a54      	ldr	r2, [pc, #336]	; (80022c0 <HAL_GPIO_Init+0x2c8>)
 800216e:	4b54      	ldr	r3, [pc, #336]	; (80022c0 <HAL_GPIO_Init+0x2c8>)
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	f043 0301 	orr.w	r3, r3, #1
 8002176:	6193      	str	r3, [r2, #24]
 8002178:	4b51      	ldr	r3, [pc, #324]	; (80022c0 <HAL_GPIO_Init+0x2c8>)
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	60bb      	str	r3, [r7, #8]
 8002182:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002184:	4a4f      	ldr	r2, [pc, #316]	; (80022c4 <HAL_GPIO_Init+0x2cc>)
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	089b      	lsrs	r3, r3, #2
 800218a:	3302      	adds	r3, #2
 800218c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002190:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f003 0303 	and.w	r3, r3, #3
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	461a      	mov	r2, r3
 800219c:	230f      	movs	r3, #15
 800219e:	4093      	lsls	r3, r2
 80021a0:	43db      	mvns	r3, r3
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	4013      	ands	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021ae:	d013      	beq.n	80021d8 <HAL_GPIO_Init+0x1e0>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a45      	ldr	r2, [pc, #276]	; (80022c8 <HAL_GPIO_Init+0x2d0>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d00d      	beq.n	80021d4 <HAL_GPIO_Init+0x1dc>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a44      	ldr	r2, [pc, #272]	; (80022cc <HAL_GPIO_Init+0x2d4>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d007      	beq.n	80021d0 <HAL_GPIO_Init+0x1d8>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a43      	ldr	r2, [pc, #268]	; (80022d0 <HAL_GPIO_Init+0x2d8>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d101      	bne.n	80021cc <HAL_GPIO_Init+0x1d4>
 80021c8:	2303      	movs	r3, #3
 80021ca:	e006      	b.n	80021da <HAL_GPIO_Init+0x1e2>
 80021cc:	2305      	movs	r3, #5
 80021ce:	e004      	b.n	80021da <HAL_GPIO_Init+0x1e2>
 80021d0:	2302      	movs	r3, #2
 80021d2:	e002      	b.n	80021da <HAL_GPIO_Init+0x1e2>
 80021d4:	2301      	movs	r3, #1
 80021d6:	e000      	b.n	80021da <HAL_GPIO_Init+0x1e2>
 80021d8:	2300      	movs	r3, #0
 80021da:	697a      	ldr	r2, [r7, #20]
 80021dc:	f002 0203 	and.w	r2, r2, #3
 80021e0:	0092      	lsls	r2, r2, #2
 80021e2:	4093      	lsls	r3, r2
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80021ea:	4936      	ldr	r1, [pc, #216]	; (80022c4 <HAL_GPIO_Init+0x2cc>)
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	089b      	lsrs	r3, r3, #2
 80021f0:	3302      	adds	r3, #2
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021f8:	4b36      	ldr	r3, [pc, #216]	; (80022d4 <HAL_GPIO_Init+0x2dc>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	43db      	mvns	r3, r3
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	4013      	ands	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d003      	beq.n	800221c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	4313      	orrs	r3, r2
 800221a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800221c:	4a2d      	ldr	r2, [pc, #180]	; (80022d4 <HAL_GPIO_Init+0x2dc>)
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002222:	4b2c      	ldr	r3, [pc, #176]	; (80022d4 <HAL_GPIO_Init+0x2dc>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	43db      	mvns	r3, r3
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	4013      	ands	r3, r2
 8002230:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	4313      	orrs	r3, r2
 8002244:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002246:	4a23      	ldr	r2, [pc, #140]	; (80022d4 <HAL_GPIO_Init+0x2dc>)
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800224c:	4b21      	ldr	r3, [pc, #132]	; (80022d4 <HAL_GPIO_Init+0x2dc>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	43db      	mvns	r3, r3
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	4013      	ands	r3, r2
 800225a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d003      	beq.n	8002270 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	4313      	orrs	r3, r2
 800226e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002270:	4a18      	ldr	r2, [pc, #96]	; (80022d4 <HAL_GPIO_Init+0x2dc>)
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002276:	4b17      	ldr	r3, [pc, #92]	; (80022d4 <HAL_GPIO_Init+0x2dc>)
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	43db      	mvns	r3, r3
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	4013      	ands	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	4313      	orrs	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800229a:	4a0e      	ldr	r2, [pc, #56]	; (80022d4 <HAL_GPIO_Init+0x2dc>)
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	3301      	adds	r3, #1
 80022a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	fa22 f303 	lsr.w	r3, r2, r3
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f47f aead 	bne.w	8002010 <HAL_GPIO_Init+0x18>
      }
    }
    
    position++;
  }
}
 80022b6:	371c      	adds	r7, #28
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40010000 	.word	0x40010000
 80022c8:	48000400 	.word	0x48000400
 80022cc:	48000800 	.word	0x48000800
 80022d0:	48000c00 	.word	0x48000c00
 80022d4:	40010400 	.word	0x40010400

080022d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	460b      	mov	r3, r1
 80022e2:	807b      	strh	r3, [r7, #2]
 80022e4:	4613      	mov	r3, r2
 80022e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022e8:	787b      	ldrb	r3, [r7, #1]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022ee:	887a      	ldrh	r2, [r7, #2]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	619a      	str	r2, [r3, #24]
 80022f4:	e002      	b.n	80022fc <HAL_GPIO_WritePin+0x24>
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022f6:	887a      	ldrh	r2, [r7, #2]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop

08002308 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim: TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e01d      	b.n	8002356 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d106      	bne.n	8002334 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f816 	bl	8002360 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2202      	movs	r2, #2
 8002338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3304      	adds	r3, #4
 8002344:	4610      	mov	r0, r2
 8002346:	4619      	mov	r1, r3
 8002348:	f000 f960 	bl	800260c <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop

08002360 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop

08002374 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim: TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	6812      	ldr	r2, [r2, #0]
 8002384:	68d2      	ldr	r2, [r2, #12]
 8002386:	f042 0201 	orr.w	r2, r2, #1
 800238a:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	6812      	ldr	r2, [r2, #0]
 8002394:	6812      	ldr	r2, [r2, #0]
 8002396:	f042 0201 	orr.w	r2, r2, #1
 800239a:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop

080023ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim: TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d022      	beq.n	8002408 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d01b      	beq.n	8002408 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f06f 0202 	mvn.w	r2, #2
 80023d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2201      	movs	r2, #1
 80023de:	771a      	strb	r2, [r3, #28]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	f003 0303 	and.w	r3, r3, #3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d003      	beq.n	80023f6 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f8ee 	bl	80025d0 <HAL_TIM_IC_CaptureCallback>
 80023f4:	e005      	b.n	8002402 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 f8e0 	bl	80025bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 f8f1 	bl	80025e4 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	f003 0304 	and.w	r3, r3, #4
 8002412:	2b00      	cmp	r3, #0
 8002414:	d022      	beq.n	800245c <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	f003 0304 	and.w	r3, r3, #4
 8002420:	2b00      	cmp	r3, #0
 8002422:	d01b      	beq.n	800245c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f06f 0204 	mvn.w	r2, #4
 800242c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2202      	movs	r2, #2
 8002432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 f8c4 	bl	80025d0 <HAL_TIM_IC_CaptureCallback>
 8002448:	e005      	b.n	8002456 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 f8b6 	bl	80025bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 f8c7 	bl	80025e4 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	2b00      	cmp	r3, #0
 8002468:	d022      	beq.n	80024b0 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	f003 0308 	and.w	r3, r3, #8
 8002474:	2b00      	cmp	r3, #0
 8002476:	d01b      	beq.n	80024b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f06f 0208 	mvn.w	r2, #8
 8002480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2204      	movs	r2, #4
 8002486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	f003 0303 	and.w	r3, r3, #3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 f89a 	bl	80025d0 <HAL_TIM_IC_CaptureCallback>
 800249c:	e005      	b.n	80024aa <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f88c 	bl	80025bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 f89d 	bl	80025e4 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	f003 0310 	and.w	r3, r3, #16
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d022      	beq.n	8002504 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	f003 0310 	and.w	r3, r3, #16
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d01b      	beq.n	8002504 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f06f 0210 	mvn.w	r2, #16
 80024d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2208      	movs	r2, #8
 80024da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 f870 	bl	80025d0 <HAL_TIM_IC_CaptureCallback>
 80024f0:	e005      	b.n	80024fe <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 f862 	bl	80025bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 f873 	bl	80025e4 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00e      	beq.n	8002530 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	2b00      	cmp	r3, #0
 800251e:	d007      	beq.n	8002530 <HAL_TIM_IRQHandler+0x184>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f06f 0201 	mvn.w	r2, #1
 8002528:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7fd ffd4 	bl	80004d8 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00e      	beq.n	800255c <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002548:	2b00      	cmp	r3, #0
 800254a:	d007      	beq.n	800255c <HAL_TIM_IRQHandler+0x1b0>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002554:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f7fe f85a 	bl	8000610 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00e      	beq.n	8002588 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002574:	2b00      	cmp	r3, #0
 8002576:	d007      	beq.n	8002588 <HAL_TIM_IRQHandler+0x1dc>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002580:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 f838 	bl	80025f8 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	f003 0320 	and.w	r3, r3, #32
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00e      	beq.n	80025b4 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	f003 0320 	and.w	r3, r3, #32
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d007      	beq.n	80025b4 <HAL_TIM_IRQHandler+0x208>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f06f 0220 	mvn.w	r2, #32
 80025ac:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7fe f824 	bl	80005fc <HAL_TIMEx_CommutationCallback>
    }
  }
}
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop

080025bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim: TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop

080025d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim: TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop

080025e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop

080025f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop

0800260c <TIM_Base_SetConfig>:
  * @param  TIMx: TIM periheral
  * @param  Structure: TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8002616:	2300      	movs	r3, #0
 8002618:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a2d      	ldr	r2, [pc, #180]	; (80026d8 <TIM_Base_SetConfig+0xcc>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d003      	beq.n	8002630 <TIM_Base_SetConfig+0x24>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800262e:	d108      	bne.n	8002642 <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002636:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	4313      	orrs	r3, r2
 8002640:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a24      	ldr	r2, [pc, #144]	; (80026d8 <TIM_Base_SetConfig+0xcc>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d00f      	beq.n	800266a <TIM_Base_SetConfig+0x5e>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002650:	d00b      	beq.n	800266a <TIM_Base_SetConfig+0x5e>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a21      	ldr	r2, [pc, #132]	; (80026dc <TIM_Base_SetConfig+0xd0>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d007      	beq.n	800266a <TIM_Base_SetConfig+0x5e>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a20      	ldr	r2, [pc, #128]	; (80026e0 <TIM_Base_SetConfig+0xd4>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d003      	beq.n	800266a <TIM_Base_SetConfig+0x5e>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a1f      	ldr	r2, [pc, #124]	; (80026e4 <TIM_Base_SetConfig+0xd8>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d108      	bne.n	800267c <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002670:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	4313      	orrs	r3, r2
 800267a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	4313      	orrs	r3, r2
 8002688:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	629a      	str	r2, [r3, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a0d      	ldr	r2, [pc, #52]	; (80026d8 <TIM_Base_SetConfig+0xcc>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d00b      	beq.n	80026c0 <TIM_Base_SetConfig+0xb4>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a0c      	ldr	r2, [pc, #48]	; (80026dc <TIM_Base_SetConfig+0xd0>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d007      	beq.n	80026c0 <TIM_Base_SetConfig+0xb4>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a0b      	ldr	r2, [pc, #44]	; (80026e0 <TIM_Base_SetConfig+0xd4>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d003      	beq.n	80026c0 <TIM_Base_SetConfig+0xb4>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a0a      	ldr	r2, [pc, #40]	; (80026e4 <TIM_Base_SetConfig+0xd8>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d103      	bne.n	80026c8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	691a      	ldr	r2, [r3, #16]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	615a      	str	r2, [r3, #20]
}
 80026ce:	3714      	adds	r7, #20
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	40012c00 	.word	0x40012c00
 80026dc:	40014000 	.word	0x40014000
 80026e0:	40014400 	.word	0x40014400
 80026e4:	40014800 	.word	0x40014800

080026e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f103 0208 	add.w	r2, r3, #8
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002700:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f103 0208 	add.w	r2, r3, #8
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f103 0208 	add.w	r2, r3, #8
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop

08002728 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	689a      	ldr	r2, [r3, #8]
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	1c5a      	adds	r2, r3, #1
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	601a      	str	r2, [r3, #0]
}
 800277c:	3714      	adds	r7, #20
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop

08002788 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800279e:	d103      	bne.n	80027a8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	60fb      	str	r3, [r7, #12]
 80027a6:	e00c      	b.n	80027c2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	3308      	adds	r3, #8
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	e002      	b.n	80027b6 <vListInsert+0x2e>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d9f6      	bls.n	80027b0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	1c5a      	adds	r2, r3, #1
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	601a      	str	r2, [r3, #0]
}
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	6892      	ldr	r2, [r2, #8]
 800280e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	6852      	ldr	r2, [r2, #4]
 8002818:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	429a      	cmp	r2, r3
 8002822:	d103      	bne.n	800282c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	1e5a      	subs	r2, r3, #1
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	3b04      	subs	r3, #4
 800285c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002864:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	3b04      	subs	r3, #4
 800286a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	f023 0201 	bic.w	r2, r3, #1
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	3b04      	subs	r3, #4
 800287a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800287c:	4a0c      	ldr	r2, [pc, #48]	; (80028b0 <pxPortInitialiseStack+0x64>)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	3b14      	subs	r3, #20
 8002886:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	3b04      	subs	r3, #4
 8002892:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f06f 0202 	mvn.w	r2, #2
 800289a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	3b20      	subs	r3, #32
 80028a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80028a2:	68fb      	ldr	r3, [r7, #12]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3714      	adds	r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	080028b5 	.word	0x080028b5

080028b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80028ba:	4b0c      	ldr	r3, [pc, #48]	; (80028ec <prvTaskExitError+0x38>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028c2:	d009      	beq.n	80028d8 <prvTaskExitError+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80028c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c8:	f383 8811 	msr	BASEPRI, r3
 80028cc:	f3bf 8f6f 	isb	sy
 80028d0:	f3bf 8f4f 	dsb	sy
 80028d4:	607b      	str	r3, [r7, #4]
 80028d6:	e7fe      	b.n	80028d6 <prvTaskExitError+0x22>
 80028d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028dc:	f383 8811 	msr	BASEPRI, r3
 80028e0:	f3bf 8f6f 	isb	sy
 80028e4:	f3bf 8f4f 	dsb	sy
 80028e8:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 80028ea:	e7fe      	b.n	80028ea <prvTaskExitError+0x36>
 80028ec:	20000004 	.word	0x20000004

080028f0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80028f0:	4b07      	ldr	r3, [pc, #28]	; (8002910 <pxCurrentTCBConst2>)
 80028f2:	6819      	ldr	r1, [r3, #0]
 80028f4:	6808      	ldr	r0, [r1, #0]
 80028f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028fa:	f380 8809 	msr	PSP, r0
 80028fe:	f3bf 8f6f 	isb	sy
 8002902:	f04f 0000 	mov.w	r0, #0
 8002906:	f380 8811 	msr	BASEPRI, r0
 800290a:	4770      	bx	lr
 800290c:	f3af 8000 	nop.w

08002910 <pxCurrentTCBConst2>:
 8002910:	20001444 	.word	0x20001444

08002914 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002914:	4806      	ldr	r0, [pc, #24]	; (8002930 <prvPortStartFirstTask+0x1c>)
 8002916:	6800      	ldr	r0, [r0, #0]
 8002918:	6800      	ldr	r0, [r0, #0]
 800291a:	f380 8808 	msr	MSP, r0
 800291e:	b662      	cpsie	i
 8002920:	b661      	cpsie	f
 8002922:	f3bf 8f4f 	dsb	sy
 8002926:	f3bf 8f6f 	isb	sy
 800292a:	df00      	svc	0
 800292c:	bf00      	nop
 800292e:	0000      	.short	0x0000
 8002930:	e000ed08 	.word	0xe000ed08

08002934 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800293a:	4b3b      	ldr	r3, [pc, #236]	; (8002a28 <xPortStartScheduler+0xf4>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a3b      	ldr	r2, [pc, #236]	; (8002a2c <xPortStartScheduler+0xf8>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d109      	bne.n	8002958 <xPortStartScheduler+0x24>
 8002944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002948:	f383 8811 	msr	BASEPRI, r3
 800294c:	f3bf 8f6f 	isb	sy
 8002950:	f3bf 8f4f 	dsb	sy
 8002954:	613b      	str	r3, [r7, #16]
 8002956:	e7fe      	b.n	8002956 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002958:	4b33      	ldr	r3, [pc, #204]	; (8002a28 <xPortStartScheduler+0xf4>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a34      	ldr	r2, [pc, #208]	; (8002a30 <xPortStartScheduler+0xfc>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d109      	bne.n	8002976 <xPortStartScheduler+0x42>
 8002962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002966:	f383 8811 	msr	BASEPRI, r3
 800296a:	f3bf 8f6f 	isb	sy
 800296e:	f3bf 8f4f 	dsb	sy
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	e7fe      	b.n	8002974 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002976:	4b2f      	ldr	r3, [pc, #188]	; (8002a34 <xPortStartScheduler+0x100>)
 8002978:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	b2db      	uxtb	r3, r3
 8002980:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	22ff      	movs	r2, #255	; 0xff
 8002986:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	b2db      	uxtb	r3, r3
 800298e:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002990:	79fb      	ldrb	r3, [r7, #7]
 8002992:	b2db      	uxtb	r3, r3
 8002994:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002998:	b2da      	uxtb	r2, r3
 800299a:	4b27      	ldr	r3, [pc, #156]	; (8002a38 <xPortStartScheduler+0x104>)
 800299c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800299e:	4b27      	ldr	r3, [pc, #156]	; (8002a3c <xPortStartScheduler+0x108>)
 80029a0:	2207      	movs	r2, #7
 80029a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80029a4:	e009      	b.n	80029ba <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80029a6:	4b25      	ldr	r3, [pc, #148]	; (8002a3c <xPortStartScheduler+0x108>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	3b01      	subs	r3, #1
 80029ac:	4a23      	ldr	r2, [pc, #140]	; (8002a3c <xPortStartScheduler+0x108>)
 80029ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80029b0:	79fb      	ldrb	r3, [r7, #7]
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	71fb      	strb	r3, [r7, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80029ba:	79fb      	ldrb	r3, [r7, #7]
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	b25b      	sxtb	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	dbef      	blt.n	80029a6 <xPortStartScheduler+0x72>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80029c6:	4b1d      	ldr	r3, [pc, #116]	; (8002a3c <xPortStartScheduler+0x108>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	021b      	lsls	r3, r3, #8
 80029cc:	4a1b      	ldr	r2, [pc, #108]	; (8002a3c <xPortStartScheduler+0x108>)
 80029ce:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80029d0:	4b1a      	ldr	r3, [pc, #104]	; (8002a3c <xPortStartScheduler+0x108>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80029d8:	4a18      	ldr	r2, [pc, #96]	; (8002a3c <xPortStartScheduler+0x108>)
 80029da:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80029e4:	4a16      	ldr	r2, [pc, #88]	; (8002a40 <xPortStartScheduler+0x10c>)
 80029e6:	4b16      	ldr	r3, [pc, #88]	; (8002a40 <xPortStartScheduler+0x10c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029ee:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80029f0:	4a13      	ldr	r2, [pc, #76]	; (8002a40 <xPortStartScheduler+0x10c>)
 80029f2:	4b13      	ldr	r3, [pc, #76]	; (8002a40 <xPortStartScheduler+0x10c>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80029fa:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80029fc:	f000 f8d8 	bl	8002bb0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002a00:	4b10      	ldr	r3, [pc, #64]	; (8002a44 <xPortStartScheduler+0x110>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002a06:	f000 f8ed 	bl	8002be4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002a0a:	4a0f      	ldr	r2, [pc, #60]	; (8002a48 <xPortStartScheduler+0x114>)
 8002a0c:	4b0e      	ldr	r3, [pc, #56]	; (8002a48 <xPortStartScheduler+0x114>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002a14:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002a16:	f7ff ff7d 	bl	8002914 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8002a1a:	f7ff ff4b 	bl	80028b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3718      	adds	r7, #24
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	e000ed00 	.word	0xe000ed00
 8002a2c:	410fc271 	.word	0x410fc271
 8002a30:	410fc270 	.word	0x410fc270
 8002a34:	e000e400 	.word	0xe000e400
 8002a38:	20000024 	.word	0x20000024
 8002a3c:	20000028 	.word	0x20000028
 8002a40:	e000ed20 	.word	0xe000ed20
 8002a44:	20000004 	.word	0x20000004
 8002a48:	e000ef34 	.word	0xe000ef34

08002a4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a56:	f383 8811 	msr	BASEPRI, r3
 8002a5a:	f3bf 8f6f 	isb	sy
 8002a5e:	f3bf 8f4f 	dsb	sy
 8002a62:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002a64:	4b0e      	ldr	r3, [pc, #56]	; (8002aa0 <vPortEnterCritical+0x54>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	4a0d      	ldr	r2, [pc, #52]	; (8002aa0 <vPortEnterCritical+0x54>)
 8002a6c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002a6e:	4b0c      	ldr	r3, [pc, #48]	; (8002aa0 <vPortEnterCritical+0x54>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d10e      	bne.n	8002a94 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002a76:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <vPortEnterCritical+0x58>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d009      	beq.n	8002a94 <vPortEnterCritical+0x48>
 8002a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a84:	f383 8811 	msr	BASEPRI, r3
 8002a88:	f3bf 8f6f 	isb	sy
 8002a8c:	f3bf 8f4f 	dsb	sy
 8002a90:	603b      	str	r3, [r7, #0]
 8002a92:	e7fe      	b.n	8002a92 <vPortEnterCritical+0x46>
	}
}
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	20000004 	.word	0x20000004
 8002aa4:	e000ed04 	.word	0xe000ed04

08002aa8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002aae:	4b10      	ldr	r3, [pc, #64]	; (8002af0 <vPortExitCritical+0x48>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d109      	bne.n	8002aca <vPortExitCritical+0x22>
 8002ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aba:	f383 8811 	msr	BASEPRI, r3
 8002abe:	f3bf 8f6f 	isb	sy
 8002ac2:	f3bf 8f4f 	dsb	sy
 8002ac6:	607b      	str	r3, [r7, #4]
 8002ac8:	e7fe      	b.n	8002ac8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8002aca:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <vPortExitCritical+0x48>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	4a07      	ldr	r2, [pc, #28]	; (8002af0 <vPortExitCritical+0x48>)
 8002ad2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002ad4:	4b06      	ldr	r3, [pc, #24]	; (8002af0 <vPortExitCritical+0x48>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d104      	bne.n	8002ae6 <vPortExitCritical+0x3e>
 8002adc:	2300      	movs	r3, #0
 8002ade:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	20000004 	.word	0x20000004
	...

08002b00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002b00:	f3ef 8009 	mrs	r0, PSP
 8002b04:	f3bf 8f6f 	isb	sy
 8002b08:	4b15      	ldr	r3, [pc, #84]	; (8002b60 <pxCurrentTCBConst>)
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	f01e 0f10 	tst.w	lr, #16
 8002b10:	bf08      	it	eq
 8002b12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002b16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b1a:	6010      	str	r0, [r2, #0]
 8002b1c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8002b20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002b24:	f380 8811 	msr	BASEPRI, r0
 8002b28:	f3bf 8f4f 	dsb	sy
 8002b2c:	f3bf 8f6f 	isb	sy
 8002b30:	f000 fdc6 	bl	80036c0 <vTaskSwitchContext>
 8002b34:	f04f 0000 	mov.w	r0, #0
 8002b38:	f380 8811 	msr	BASEPRI, r0
 8002b3c:	bc08      	pop	{r3}
 8002b3e:	6819      	ldr	r1, [r3, #0]
 8002b40:	6808      	ldr	r0, [r1, #0]
 8002b42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b46:	f01e 0f10 	tst.w	lr, #16
 8002b4a:	bf08      	it	eq
 8002b4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002b50:	f380 8809 	msr	PSP, r0
 8002b54:	f3bf 8f6f 	isb	sy
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	f3af 8000 	nop.w

08002b60 <pxCurrentTCBConst>:
 8002b60:	20001444 	.word	0x20001444

08002b64 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b6e:	f383 8811 	msr	BASEPRI, r3
 8002b72:	f3bf 8f6f 	isb	sy
 8002b76:	f3bf 8f4f 	dsb	sy
 8002b7a:	607b      	str	r3, [r7, #4]
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002b7c:	f001 ff2e 	bl	80049dc <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002b80:	f000 fcdc 	bl	800353c <xTaskIncrementTick>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d006      	beq.n	8002b98 <xPortSysTickHandler+0x34>
		{
			traceISR_EXIT_TO_SCHEDULER();
 8002b8a:	f001 ff83 	bl	8004a94 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002b8e:	4b07      	ldr	r3, [pc, #28]	; (8002bac <xPortSysTickHandler+0x48>)
 8002b90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	e001      	b.n	8002b9c <xPortSysTickHandler+0x38>
		}
		else
		{
			traceISR_EXIT();
 8002b98:	f001 ff60 	bl	8004a5c <SEGGER_SYSVIEW_RecordExitISR>
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	e000ed04 	.word	0xe000ed04

08002bb0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002bb4:	4a07      	ldr	r2, [pc, #28]	; (8002bd4 <vPortSetupTimerInterrupt+0x24>)
 8002bb6:	4b08      	ldr	r3, [pc, #32]	; (8002bd8 <vPortSetupTimerInterrupt+0x28>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4908      	ldr	r1, [pc, #32]	; (8002bdc <vPortSetupTimerInterrupt+0x2c>)
 8002bbc:	fba1 1303 	umull	r1, r3, r1, r3
 8002bc0:	099b      	lsrs	r3, r3, #6
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002bc6:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <vPortSetupTimerInterrupt+0x30>)
 8002bc8:	2207      	movs	r2, #7
 8002bca:	601a      	str	r2, [r3, #0]
}
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	e000e014 	.word	0xe000e014
 8002bd8:	20000000 	.word	0x20000000
 8002bdc:	10624dd3 	.word	0x10624dd3
 8002be0:	e000e010 	.word	0xe000e010

08002be4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002be4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002bf4 <vPortEnableVFP+0x10>
 8002be8:	6801      	ldr	r1, [r0, #0]
 8002bea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002bee:	6001      	str	r1, [r0, #0]
 8002bf0:	4770      	bx	lr
 8002bf2:	0000      	.short	0x0000
 8002bf4:	e000ed88 	.word	0xe000ed88

08002bf8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8002bfe:	f3ef 8305 	mrs	r3, IPSR
 8002c02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2b0f      	cmp	r3, #15
 8002c08:	d913      	bls.n	8002c32 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002c0a:	4a15      	ldr	r2, [pc, #84]	; (8002c60 <vPortValidateInterruptPriority+0x68>)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	4413      	add	r3, r2
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002c14:	4b13      	ldr	r3, [pc, #76]	; (8002c64 <vPortValidateInterruptPriority+0x6c>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	7afa      	ldrb	r2, [r7, #11]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d209      	bcs.n	8002c32 <vPortValidateInterruptPriority+0x3a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c22:	f383 8811 	msr	BASEPRI, r3
 8002c26:	f3bf 8f6f 	isb	sy
 8002c2a:	f3bf 8f4f 	dsb	sy
 8002c2e:	607b      	str	r3, [r7, #4]
 8002c30:	e7fe      	b.n	8002c30 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002c32:	4b0d      	ldr	r3, [pc, #52]	; (8002c68 <vPortValidateInterruptPriority+0x70>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002c3a:	4b0c      	ldr	r3, [pc, #48]	; (8002c6c <vPortValidateInterruptPriority+0x74>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d909      	bls.n	8002c56 <vPortValidateInterruptPriority+0x5e>
 8002c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c46:	f383 8811 	msr	BASEPRI, r3
 8002c4a:	f3bf 8f6f 	isb	sy
 8002c4e:	f3bf 8f4f 	dsb	sy
 8002c52:	603b      	str	r3, [r7, #0]
 8002c54:	e7fe      	b.n	8002c54 <vPortValidateInterruptPriority+0x5c>
	}
 8002c56:	3714      	adds	r7, #20
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	e000e3f0 	.word	0xe000e3f0
 8002c64:	20000024 	.word	0x20000024
 8002c68:	e000ed0c 	.word	0xe000ed0c
 8002c6c:	20000028 	.word	0x20000028

08002c70 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b08a      	sub	sp, #40	; 0x28
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002c7c:	f000 fb9c 	bl	80033b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002c80:	4b57      	ldr	r3, [pc, #348]	; (8002de0 <pvPortMalloc+0x170>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d101      	bne.n	8002c8c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002c88:	f000 f90c 	bl	8002ea4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002c8c:	4b55      	ldr	r3, [pc, #340]	; (8002de4 <pvPortMalloc+0x174>)
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4013      	ands	r3, r2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f040 808c 	bne.w	8002db2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d01c      	beq.n	8002cda <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8002ca0:	2208      	movs	r2, #8
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f003 0307 	and.w	r3, r3, #7
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d013      	beq.n	8002cda <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f023 0307 	bic.w	r3, r3, #7
 8002cb8:	3308      	adds	r3, #8
 8002cba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d009      	beq.n	8002cda <pvPortMalloc+0x6a>
 8002cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cca:	f383 8811 	msr	BASEPRI, r3
 8002cce:	f3bf 8f6f 	isb	sy
 8002cd2:	f3bf 8f4f 	dsb	sy
 8002cd6:	617b      	str	r3, [r7, #20]
 8002cd8:	e7fe      	b.n	8002cd8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d068      	beq.n	8002db2 <pvPortMalloc+0x142>
 8002ce0:	4b41      	ldr	r3, [pc, #260]	; (8002de8 <pvPortMalloc+0x178>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d863      	bhi.n	8002db2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002cea:	4b40      	ldr	r3, [pc, #256]	; (8002dec <pvPortMalloc+0x17c>)
 8002cec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002cee:	4b3f      	ldr	r3, [pc, #252]	; (8002dec <pvPortMalloc+0x17c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002cf4:	e004      	b.n	8002d00 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	627b      	str	r3, [r7, #36]	; 0x24
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d203      	bcs.n	8002d12 <pvPortMalloc+0xa2>
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1f1      	bne.n	8002cf6 <pvPortMalloc+0x86>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002d12:	4b33      	ldr	r3, [pc, #204]	; (8002de0 <pvPortMalloc+0x170>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d04a      	beq.n	8002db2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002d1c:	6a3b      	ldr	r3, [r7, #32]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2208      	movs	r2, #8
 8002d22:	4413      	add	r3, r2
 8002d24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	6a3b      	ldr	r3, [r7, #32]
 8002d2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	685a      	ldr	r2, [r3, #4]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	1ad2      	subs	r2, r2, r3
 8002d36:	2308      	movs	r3, #8
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d91e      	bls.n	8002d7c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4413      	add	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	f003 0307 	and.w	r3, r3, #7
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d009      	beq.n	8002d64 <pvPortMalloc+0xf4>
 8002d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d54:	f383 8811 	msr	BASEPRI, r3
 8002d58:	f3bf 8f6f 	isb	sy
 8002d5c:	f3bf 8f4f 	dsb	sy
 8002d60:	613b      	str	r3, [r7, #16]
 8002d62:	e7fe      	b.n	8002d62 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	1ad2      	subs	r2, r2, r3
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002d76:	69b8      	ldr	r0, [r7, #24]
 8002d78:	f000 f8f6 	bl	8002f68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002d7c:	4b1a      	ldr	r3, [pc, #104]	; (8002de8 <pvPortMalloc+0x178>)
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	4a18      	ldr	r2, [pc, #96]	; (8002de8 <pvPortMalloc+0x178>)
 8002d88:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002d8a:	4b17      	ldr	r3, [pc, #92]	; (8002de8 <pvPortMalloc+0x178>)
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	4b18      	ldr	r3, [pc, #96]	; (8002df0 <pvPortMalloc+0x180>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d203      	bcs.n	8002d9e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002d96:	4b14      	ldr	r3, [pc, #80]	; (8002de8 <pvPortMalloc+0x178>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a15      	ldr	r2, [pc, #84]	; (8002df0 <pvPortMalloc+0x180>)
 8002d9c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	4b10      	ldr	r3, [pc, #64]	; (8002de4 <pvPortMalloc+0x174>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	431a      	orrs	r2, r3
 8002da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002daa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dae:	2200      	movs	r2, #0
 8002db0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002db2:	f000 fb0f 	bl	80033d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d009      	beq.n	8002dd4 <pvPortMalloc+0x164>
 8002dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc4:	f383 8811 	msr	BASEPRI, r3
 8002dc8:	f3bf 8f6f 	isb	sy
 8002dcc:	f3bf 8f4f 	dsb	sy
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	e7fe      	b.n	8002dd2 <pvPortMalloc+0x162>
	return pvReturn;
 8002dd4:	69fb      	ldr	r3, [r7, #28]
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3728      	adds	r7, #40	; 0x28
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	20001434 	.word	0x20001434
 8002de4:	20001440 	.word	0x20001440
 8002de8:	20001438 	.word	0x20001438
 8002dec:	2000142c 	.word	0x2000142c
 8002df0:	2000143c 	.word	0x2000143c

08002df4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d046      	beq.n	8002e94 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002e06:	2308      	movs	r3, #8
 8002e08:	425b      	negs	r3, r3
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	4b20      	ldr	r3, [pc, #128]	; (8002e9c <vPortFree+0xa8>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d109      	bne.n	8002e36 <vPortFree+0x42>
 8002e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e26:	f383 8811 	msr	BASEPRI, r3
 8002e2a:	f3bf 8f6f 	isb	sy
 8002e2e:	f3bf 8f4f 	dsb	sy
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	e7fe      	b.n	8002e34 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d009      	beq.n	8002e52 <vPortFree+0x5e>
 8002e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e42:	f383 8811 	msr	BASEPRI, r3
 8002e46:	f3bf 8f6f 	isb	sy
 8002e4a:	f3bf 8f4f 	dsb	sy
 8002e4e:	60bb      	str	r3, [r7, #8]
 8002e50:	e7fe      	b.n	8002e50 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	4b11      	ldr	r3, [pc, #68]	; (8002e9c <vPortFree+0xa8>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d019      	beq.n	8002e94 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d115      	bne.n	8002e94 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	4b0b      	ldr	r3, [pc, #44]	; (8002e9c <vPortFree+0xa8>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	43db      	mvns	r3, r3
 8002e72:	401a      	ands	r2, r3
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002e78:	f000 fa9e 	bl	80033b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	4b07      	ldr	r3, [pc, #28]	; (8002ea0 <vPortFree+0xac>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4413      	add	r3, r2
 8002e86:	4a06      	ldr	r2, [pc, #24]	; (8002ea0 <vPortFree+0xac>)
 8002e88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002e8a:	6938      	ldr	r0, [r7, #16]
 8002e8c:	f000 f86c 	bl	8002f68 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002e90:	f000 faa0 	bl	80033d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002e94:	3718      	adds	r7, #24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	20001440 	.word	0x20001440
 8002ea0:	20001438 	.word	0x20001438

08002ea4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002eaa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002eae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002eb0:	4b27      	ldr	r3, [pc, #156]	; (8002f50 <prvHeapInit+0xac>)
 8002eb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00c      	beq.n	8002ed8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	3307      	adds	r3, #7
 8002ec2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f023 0307 	bic.w	r3, r3, #7
 8002eca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	4a1f      	ldr	r2, [pc, #124]	; (8002f50 <prvHeapInit+0xac>)
 8002ed4:	4413      	add	r3, r2
 8002ed6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002edc:	4a1d      	ldr	r2, [pc, #116]	; (8002f54 <prvHeapInit+0xb0>)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002ee2:	4b1c      	ldr	r3, [pc, #112]	; (8002f54 <prvHeapInit+0xb0>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	4413      	add	r3, r2
 8002eee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002ef0:	2208      	movs	r2, #8
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	1a9b      	subs	r3, r3, r2
 8002ef6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f023 0307 	bic.w	r3, r3, #7
 8002efe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	4a15      	ldr	r2, [pc, #84]	; (8002f58 <prvHeapInit+0xb4>)
 8002f04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002f06:	4b14      	ldr	r3, [pc, #80]	; (8002f58 <prvHeapInit+0xb4>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002f0e:	4b12      	ldr	r3, [pc, #72]	; (8002f58 <prvHeapInit+0xb4>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2200      	movs	r2, #0
 8002f14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	1ad2      	subs	r2, r2, r3
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002f24:	4b0c      	ldr	r3, [pc, #48]	; (8002f58 <prvHeapInit+0xb4>)
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	4a0a      	ldr	r2, [pc, #40]	; (8002f5c <prvHeapInit+0xb8>)
 8002f32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	4a09      	ldr	r2, [pc, #36]	; (8002f60 <prvHeapInit+0xbc>)
 8002f3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002f3c:	4b09      	ldr	r3, [pc, #36]	; (8002f64 <prvHeapInit+0xc0>)
 8002f3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002f42:	601a      	str	r2, [r3, #0]
}
 8002f44:	3714      	adds	r7, #20
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	2000002c 	.word	0x2000002c
 8002f54:	2000142c 	.word	0x2000142c
 8002f58:	20001434 	.word	0x20001434
 8002f5c:	2000143c 	.word	0x2000143c
 8002f60:	20001438 	.word	0x20001438
 8002f64:	20001440 	.word	0x20001440

08002f68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002f70:	4b27      	ldr	r3, [pc, #156]	; (8003010 <prvInsertBlockIntoFreeList+0xa8>)
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	e002      	b.n	8002f7c <prvInsertBlockIntoFreeList+0x14>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d3f7      	bcc.n	8002f76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	68ba      	ldr	r2, [r7, #8]
 8002f90:	441a      	add	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d108      	bne.n	8002faa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	441a      	add	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	68ba      	ldr	r2, [r7, #8]
 8002fb4:	441a      	add	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d118      	bne.n	8002ff0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	4b14      	ldr	r3, [pc, #80]	; (8003014 <prvInsertBlockIntoFreeList+0xac>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d00d      	beq.n	8002fe6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685a      	ldr	r2, [r3, #4]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	441a      	add	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	e008      	b.n	8002ff8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002fe6:	4b0b      	ldr	r3, [pc, #44]	; (8003014 <prvInsertBlockIntoFreeList+0xac>)
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	601a      	str	r2, [r3, #0]
 8002fee:	e003      	b.n	8002ff8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d002      	beq.n	8003006 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003006:	3714      	adds	r7, #20
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	2000142c 	.word	0x2000142c
 8003014:	20001434 	.word	0x20001434

08003018 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003018:	b580      	push	{r7, lr}
 800301a:	b08c      	sub	sp, #48	; 0x30
 800301c:	af04      	add	r7, sp, #16
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	603b      	str	r3, [r7, #0]
 8003024:	4613      	mov	r3, r2
 8003026:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003028:	88fb      	ldrh	r3, [r7, #6]
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff fe1f 	bl	8002c70 <pvPortMalloc>
 8003032:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00e      	beq.n	8003058 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800303a:	205c      	movs	r0, #92	; 0x5c
 800303c:	f7ff fe18 	bl	8002c70 <pvPortMalloc>
 8003040:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d003      	beq.n	8003050 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	631a      	str	r2, [r3, #48]	; 0x30
 800304e:	e005      	b.n	800305c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003050:	6978      	ldr	r0, [r7, #20]
 8003052:	f7ff fecf 	bl	8002df4 <vPortFree>
 8003056:	e001      	b.n	800305c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003058:	2300      	movs	r3, #0
 800305a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d013      	beq.n	800308a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003062:	88fa      	ldrh	r2, [r7, #6]
 8003064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003066:	9300      	str	r3, [sp, #0]
 8003068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800306a:	9301      	str	r3, [sp, #4]
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	9302      	str	r3, [sp, #8]
 8003070:	2300      	movs	r3, #0
 8003072:	9303      	str	r3, [sp, #12]
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	68b9      	ldr	r1, [r7, #8]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	f000 f80f 	bl	800309c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800307e:	69f8      	ldr	r0, [r7, #28]
 8003080:	f000 f892 	bl	80031a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003084:	2301      	movs	r3, #1
 8003086:	61bb      	str	r3, [r7, #24]
 8003088:	e002      	b.n	8003090 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800308a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800308e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003090:	69bb      	ldr	r3, [r7, #24]
	}
 8003092:	4618      	mov	r0, r3
 8003094:	3720      	adds	r7, #32
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop

0800309c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b088      	sub	sp, #32
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
 80030a8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80030aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4610      	mov	r0, r2
 80030b4:	21a5      	movs	r1, #165	; 0xa5
 80030b6:	461a      	mov	r2, r3
 80030b8:	f002 f8e5 	bl	8005286 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80030bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80030c6:	3b01      	subs	r3, #1
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4413      	add	r3, r2
 80030cc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	f023 0307 	bic.w	r3, r3, #7
 80030d4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	f003 0307 	and.w	r3, r3, #7
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d009      	beq.n	80030f4 <prvInitialiseNewTask+0x58>
 80030e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e4:	f383 8811 	msr	BASEPRI, r3
 80030e8:	f3bf 8f6f 	isb	sy
 80030ec:	f3bf 8f4f 	dsb	sy
 80030f0:	617b      	str	r3, [r7, #20]
 80030f2:	e7fe      	b.n	80030f2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80030f4:	2300      	movs	r3, #0
 80030f6:	61fb      	str	r3, [r7, #28]
 80030f8:	e013      	b.n	8003122 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80030fa:	68ba      	ldr	r2, [r7, #8]
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	4413      	add	r3, r2
 8003100:	7819      	ldrb	r1, [r3, #0]
 8003102:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	4413      	add	r3, r2
 8003108:	3330      	adds	r3, #48	; 0x30
 800310a:	460a      	mov	r2, r1
 800310c:	711a      	strb	r2, [r3, #4]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	4413      	add	r3, r2
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d100      	bne.n	800311c <prvInitialiseNewTask+0x80>
		{
			break;
 800311a:	e005      	b.n	8003128 <prvInitialiseNewTask+0x8c>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	3301      	adds	r3, #1
 8003120:	61fb      	str	r3, [r7, #28]
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	2b0f      	cmp	r3, #15
 8003126:	d9e8      	bls.n	80030fa <prvInitialiseNewTask+0x5e>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312a:	2200      	movs	r2, #0
 800312c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003132:	2b06      	cmp	r3, #6
 8003134:	d901      	bls.n	800313a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003136:	2306      	movs	r3, #6
 8003138:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800313a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800313e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003142:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003144:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003148:	2200      	movs	r2, #0
 800314a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800314c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314e:	3304      	adds	r3, #4
 8003150:	4618      	mov	r0, r3
 8003152:	f7ff fae9 	bl	8002728 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003158:	3318      	adds	r3, #24
 800315a:	4618      	mov	r0, r3
 800315c:	f7ff fae4 	bl	8002728 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003162:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003164:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003168:	f1c3 0207 	rsb	r2, r3, #7
 800316c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003172:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003174:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003178:	2200      	movs	r2, #0
 800317a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800317c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317e:	2200      	movs	r2, #0
 8003180:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003184:	69b8      	ldr	r0, [r7, #24]
 8003186:	68f9      	ldr	r1, [r7, #12]
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	f7ff fb5f 	bl	800284c <pxPortInitialiseStack>
 800318e:	4602      	mov	r2, r0
 8003190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003192:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003196:	2b00      	cmp	r3, #0
 8003198:	d002      	beq.n	80031a0 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800319a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800319c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800319e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80031a0:	3720      	adds	r7, #32
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop

080031a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80031a8:	b5b0      	push	{r4, r5, r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af02      	add	r7, sp, #8
 80031ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80031b0:	f7ff fc4c 	bl	8002a4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80031b4:	4b3c      	ldr	r3, [pc, #240]	; (80032a8 <prvAddNewTaskToReadyList+0x100>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	3301      	adds	r3, #1
 80031ba:	4a3b      	ldr	r2, [pc, #236]	; (80032a8 <prvAddNewTaskToReadyList+0x100>)
 80031bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80031be:	4b3b      	ldr	r3, [pc, #236]	; (80032ac <prvAddNewTaskToReadyList+0x104>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d109      	bne.n	80031da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80031c6:	4a39      	ldr	r2, [pc, #228]	; (80032ac <prvAddNewTaskToReadyList+0x104>)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80031cc:	4b36      	ldr	r3, [pc, #216]	; (80032a8 <prvAddNewTaskToReadyList+0x100>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d110      	bne.n	80031f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80031d4:	f000 faf8 	bl	80037c8 <prvInitialiseTaskLists>
 80031d8:	e00d      	b.n	80031f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80031da:	4b35      	ldr	r3, [pc, #212]	; (80032b0 <prvAddNewTaskToReadyList+0x108>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d109      	bne.n	80031f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80031e2:	4b32      	ldr	r3, [pc, #200]	; (80032ac <prvAddNewTaskToReadyList+0x104>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d802      	bhi.n	80031f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80031f0:	4a2e      	ldr	r2, [pc, #184]	; (80032ac <prvAddNewTaskToReadyList+0x104>)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80031f6:	4b2f      	ldr	r3, [pc, #188]	; (80032b4 <prvAddNewTaskToReadyList+0x10c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	3301      	adds	r3, #1
 80031fc:	4a2d      	ldr	r2, [pc, #180]	; (80032b4 <prvAddNewTaskToReadyList+0x10c>)
 80031fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003200:	4b2c      	ldr	r3, [pc, #176]	; (80032b4 <prvAddNewTaskToReadyList+0x10c>)
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d016      	beq.n	800323c <prvAddNewTaskToReadyList+0x94>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4618      	mov	r0, r3
 8003212:	f001 fc77 	bl	8004b04 <SEGGER_SYSVIEW_OnTaskCreate>
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	461d      	mov	r5, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	461c      	mov	r4, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	1ae3      	subs	r3, r4, r3
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	462b      	mov	r3, r5
 8003238:	f001 ff34 	bl	80050a4 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4618      	mov	r0, r3
 8003240:	f001 fce4 	bl	8004c0c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003248:	461a      	mov	r2, r3
 800324a:	2301      	movs	r3, #1
 800324c:	fa03 f202 	lsl.w	r2, r3, r2
 8003250:	4b19      	ldr	r3, [pc, #100]	; (80032b8 <prvAddNewTaskToReadyList+0x110>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4313      	orrs	r3, r2
 8003256:	4a18      	ldr	r2, [pc, #96]	; (80032b8 <prvAddNewTaskToReadyList+0x110>)
 8003258:	6013      	str	r3, [r2, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800325e:	4613      	mov	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4413      	add	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4a15      	ldr	r2, [pc, #84]	; (80032bc <prvAddNewTaskToReadyList+0x114>)
 8003268:	441a      	add	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	3304      	adds	r3, #4
 800326e:	4610      	mov	r0, r2
 8003270:	4619      	mov	r1, r3
 8003272:	f7ff fa65 	bl	8002740 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003276:	f7ff fc17 	bl	8002aa8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800327a:	4b0d      	ldr	r3, [pc, #52]	; (80032b0 <prvAddNewTaskToReadyList+0x108>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00e      	beq.n	80032a0 <prvAddNewTaskToReadyList+0xf8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003282:	4b0a      	ldr	r3, [pc, #40]	; (80032ac <prvAddNewTaskToReadyList+0x104>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328c:	429a      	cmp	r2, r3
 800328e:	d207      	bcs.n	80032a0 <prvAddNewTaskToReadyList+0xf8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003290:	4b0b      	ldr	r3, [pc, #44]	; (80032c0 <prvAddNewTaskToReadyList+0x118>)
 8003292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003296:	601a      	str	r2, [r3, #0]
 8003298:	f3bf 8f4f 	dsb	sy
 800329c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bdb0      	pop	{r4, r5, r7, pc}
 80032a6:	bf00      	nop
 80032a8:	20001544 	.word	0x20001544
 80032ac:	20001444 	.word	0x20001444
 80032b0:	20001550 	.word	0x20001550
 80032b4:	20001560 	.word	0x20001560
 80032b8:	2000154c 	.word	0x2000154c
 80032bc:	20001448 	.word	0x20001448
 80032c0:	e000ed04 	.word	0xe000ed04

080032c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80032cc:	2300      	movs	r3, #0
 80032ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d01a      	beq.n	800330c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80032d6:	4b14      	ldr	r3, [pc, #80]	; (8003328 <vTaskDelay+0x64>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d009      	beq.n	80032f2 <vTaskDelay+0x2e>
 80032de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e2:	f383 8811 	msr	BASEPRI, r3
 80032e6:	f3bf 8f6f 	isb	sy
 80032ea:	f3bf 8f4f 	dsb	sy
 80032ee:	60bb      	str	r3, [r7, #8]
 80032f0:	e7fe      	b.n	80032f0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80032f2:	f000 f861 	bl	80033b8 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 80032f6:	2023      	movs	r0, #35	; 0x23
 80032f8:	6879      	ldr	r1, [r7, #4]
 80032fa:	f001 f81f 	bl	800433c <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	2100      	movs	r1, #0
 8003302:	f000 fb0d 	bl	8003920 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003306:	f000 f865 	bl	80033d4 <xTaskResumeAll>
 800330a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d107      	bne.n	8003322 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8003312:	4b06      	ldr	r3, [pc, #24]	; (800332c <vTaskDelay+0x68>)
 8003314:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	f3bf 8f4f 	dsb	sy
 800331e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	2000156c 	.word	0x2000156c
 800332c:	e000ed04 	.word	0xe000ed04

08003330 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8003336:	2300      	movs	r3, #0
 8003338:	9300      	str	r3, [sp, #0]
 800333a:	4b19      	ldr	r3, [pc, #100]	; (80033a0 <vTaskStartScheduler+0x70>)
 800333c:	9301      	str	r3, [sp, #4]
 800333e:	4819      	ldr	r0, [pc, #100]	; (80033a4 <vTaskStartScheduler+0x74>)
 8003340:	4919      	ldr	r1, [pc, #100]	; (80033a8 <vTaskStartScheduler+0x78>)
 8003342:	2280      	movs	r2, #128	; 0x80
 8003344:	2300      	movs	r3, #0
 8003346:	f7ff fe67 	bl	8003018 <xTaskCreate>
 800334a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d115      	bne.n	800337e <vTaskStartScheduler+0x4e>
 8003352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003356:	f383 8811 	msr	BASEPRI, r3
 800335a:	f3bf 8f6f 	isb	sy
 800335e:	f3bf 8f4f 	dsb	sy
 8003362:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003364:	4b11      	ldr	r3, [pc, #68]	; (80033ac <vTaskStartScheduler+0x7c>)
 8003366:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800336a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800336c:	4b10      	ldr	r3, [pc, #64]	; (80033b0 <vTaskStartScheduler+0x80>)
 800336e:	2201      	movs	r2, #1
 8003370:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003372:	4b10      	ldr	r3, [pc, #64]	; (80033b4 <vTaskStartScheduler+0x84>)
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003378:	f7ff fadc 	bl	8002934 <xPortStartScheduler>
 800337c:	e00d      	b.n	800339a <vTaskStartScheduler+0x6a>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003384:	d109      	bne.n	800339a <vTaskStartScheduler+0x6a>
 8003386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800338a:	f383 8811 	msr	BASEPRI, r3
 800338e:	f3bf 8f6f 	isb	sy
 8003392:	f3bf 8f4f 	dsb	sy
 8003396:	607b      	str	r3, [r7, #4]
 8003398:	e7fe      	b.n	8003398 <vTaskStartScheduler+0x68>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	20001568 	.word	0x20001568
 80033a4:	08003799 	.word	0x08003799
 80033a8:	08005300 	.word	0x08005300
 80033ac:	20001564 	.word	0x20001564
 80033b0:	20001550 	.word	0x20001550
 80033b4:	20001548 	.word	0x20001548

080033b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80033bc:	4b04      	ldr	r3, [pc, #16]	; (80033d0 <vTaskSuspendAll+0x18>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	3301      	adds	r3, #1
 80033c2:	4a03      	ldr	r2, [pc, #12]	; (80033d0 <vTaskSuspendAll+0x18>)
 80033c4:	6013      	str	r3, [r2, #0]
}
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	2000156c 	.word	0x2000156c

080033d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80033da:	2300      	movs	r3, #0
 80033dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80033de:	2300      	movs	r3, #0
 80033e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80033e2:	4b44      	ldr	r3, [pc, #272]	; (80034f4 <xTaskResumeAll+0x120>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d109      	bne.n	80033fe <xTaskResumeAll+0x2a>
 80033ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ee:	f383 8811 	msr	BASEPRI, r3
 80033f2:	f3bf 8f6f 	isb	sy
 80033f6:	f3bf 8f4f 	dsb	sy
 80033fa:	603b      	str	r3, [r7, #0]
 80033fc:	e7fe      	b.n	80033fc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80033fe:	f7ff fb25 	bl	8002a4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003402:	4b3c      	ldr	r3, [pc, #240]	; (80034f4 <xTaskResumeAll+0x120>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	3b01      	subs	r3, #1
 8003408:	4a3a      	ldr	r2, [pc, #232]	; (80034f4 <xTaskResumeAll+0x120>)
 800340a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800340c:	4b39      	ldr	r3, [pc, #228]	; (80034f4 <xTaskResumeAll+0x120>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d167      	bne.n	80034e4 <xTaskResumeAll+0x110>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003414:	4b38      	ldr	r3, [pc, #224]	; (80034f8 <xTaskResumeAll+0x124>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d063      	beq.n	80034e4 <xTaskResumeAll+0x110>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800341c:	e034      	b.n	8003488 <xTaskResumeAll+0xb4>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800341e:	4b37      	ldr	r3, [pc, #220]	; (80034fc <xTaskResumeAll+0x128>)
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	3318      	adds	r3, #24
 800342a:	4618      	mov	r0, r3
 800342c:	f7ff f9e4 	bl	80027f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	3304      	adds	r3, #4
 8003434:	4618      	mov	r0, r3
 8003436:	f7ff f9df 	bl	80027f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	4618      	mov	r0, r3
 800343e:	f001 fbe5 	bl	8004c0c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003446:	461a      	mov	r2, r3
 8003448:	2301      	movs	r3, #1
 800344a:	fa03 f202 	lsl.w	r2, r3, r2
 800344e:	4b2c      	ldr	r3, [pc, #176]	; (8003500 <xTaskResumeAll+0x12c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4313      	orrs	r3, r2
 8003454:	4a2a      	ldr	r2, [pc, #168]	; (8003500 <xTaskResumeAll+0x12c>)
 8003456:	6013      	str	r3, [r2, #0]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800345c:	4613      	mov	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	4413      	add	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4a27      	ldr	r2, [pc, #156]	; (8003504 <xTaskResumeAll+0x130>)
 8003466:	441a      	add	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	3304      	adds	r3, #4
 800346c:	4610      	mov	r0, r2
 800346e:	4619      	mov	r1, r3
 8003470:	f7ff f966 	bl	8002740 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003478:	4b23      	ldr	r3, [pc, #140]	; (8003508 <xTaskResumeAll+0x134>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347e:	429a      	cmp	r2, r3
 8003480:	d302      	bcc.n	8003488 <xTaskResumeAll+0xb4>
					{
						xYieldPending = pdTRUE;
 8003482:	4b22      	ldr	r3, [pc, #136]	; (800350c <xTaskResumeAll+0x138>)
 8003484:	2201      	movs	r2, #1
 8003486:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003488:	4b1c      	ldr	r3, [pc, #112]	; (80034fc <xTaskResumeAll+0x128>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1c6      	bne.n	800341e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <xTaskResumeAll+0xc6>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003496:	f000 fa1f 	bl	80038d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800349a:	4b1d      	ldr	r3, [pc, #116]	; (8003510 <xTaskResumeAll+0x13c>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d010      	beq.n	80034c8 <xTaskResumeAll+0xf4>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80034a6:	f000 f849 	bl	800353c <xTaskIncrementTick>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d002      	beq.n	80034b6 <xTaskResumeAll+0xe2>
							{
								xYieldPending = pdTRUE;
 80034b0:	4b16      	ldr	r3, [pc, #88]	; (800350c <xTaskResumeAll+0x138>)
 80034b2:	2201      	movs	r2, #1
 80034b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	3b01      	subs	r3, #1
 80034ba:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1f1      	bne.n	80034a6 <xTaskResumeAll+0xd2>

						uxPendedTicks = 0;
 80034c2:	4b13      	ldr	r3, [pc, #76]	; (8003510 <xTaskResumeAll+0x13c>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80034c8:	4b10      	ldr	r3, [pc, #64]	; (800350c <xTaskResumeAll+0x138>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d009      	beq.n	80034e4 <xTaskResumeAll+0x110>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80034d0:	2301      	movs	r3, #1
 80034d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80034d4:	4b0f      	ldr	r3, [pc, #60]	; (8003514 <xTaskResumeAll+0x140>)
 80034d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034da:	601a      	str	r2, [r3, #0]
 80034dc:	f3bf 8f4f 	dsb	sy
 80034e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80034e4:	f7ff fae0 	bl	8002aa8 <vPortExitCritical>

	return xAlreadyYielded;
 80034e8:	68bb      	ldr	r3, [r7, #8]
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	2000156c 	.word	0x2000156c
 80034f8:	20001544 	.word	0x20001544
 80034fc:	20001504 	.word	0x20001504
 8003500:	2000154c 	.word	0x2000154c
 8003504:	20001448 	.word	0x20001448
 8003508:	20001444 	.word	0x20001444
 800350c:	20001558 	.word	0x20001558
 8003510:	20001554 	.word	0x20001554
 8003514:	e000ed04 	.word	0xe000ed04

08003518 <xTaskGetTickCountFromISR>:
	return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800351e:	f7ff fb6b 	bl	8002bf8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003522:	2300      	movs	r3, #0
 8003524:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8003526:	4b04      	ldr	r3, [pc, #16]	; (8003538 <xTaskGetTickCountFromISR+0x20>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800352c:	683b      	ldr	r3, [r7, #0]
}
 800352e:	4618      	mov	r0, r3
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	20001548 	.word	0x20001548

0800353c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003542:	2300      	movs	r3, #0
 8003544:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003546:	4b53      	ldr	r3, [pc, #332]	; (8003694 <xTaskIncrementTick+0x158>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	f040 8092 	bne.w	8003674 <xTaskIncrementTick+0x138>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8003550:	4b51      	ldr	r3, [pc, #324]	; (8003698 <xTaskIncrementTick+0x15c>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	3301      	adds	r3, #1
 8003556:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003558:	4a4f      	ldr	r2, [pc, #316]	; (8003698 <xTaskIncrementTick+0x15c>)
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d11f      	bne.n	80035a4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003564:	4b4d      	ldr	r3, [pc, #308]	; (800369c <xTaskIncrementTick+0x160>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d009      	beq.n	8003582 <xTaskIncrementTick+0x46>
 800356e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003572:	f383 8811 	msr	BASEPRI, r3
 8003576:	f3bf 8f6f 	isb	sy
 800357a:	f3bf 8f4f 	dsb	sy
 800357e:	603b      	str	r3, [r7, #0]
 8003580:	e7fe      	b.n	8003580 <xTaskIncrementTick+0x44>
 8003582:	4b46      	ldr	r3, [pc, #280]	; (800369c <xTaskIncrementTick+0x160>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	60fb      	str	r3, [r7, #12]
 8003588:	4b45      	ldr	r3, [pc, #276]	; (80036a0 <xTaskIncrementTick+0x164>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a43      	ldr	r2, [pc, #268]	; (800369c <xTaskIncrementTick+0x160>)
 800358e:	6013      	str	r3, [r2, #0]
 8003590:	4a43      	ldr	r2, [pc, #268]	; (80036a0 <xTaskIncrementTick+0x164>)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6013      	str	r3, [r2, #0]
 8003596:	4b43      	ldr	r3, [pc, #268]	; (80036a4 <xTaskIncrementTick+0x168>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	3301      	adds	r3, #1
 800359c:	4a41      	ldr	r2, [pc, #260]	; (80036a4 <xTaskIncrementTick+0x168>)
 800359e:	6013      	str	r3, [r2, #0]
 80035a0:	f000 f99a 	bl	80038d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80035a4:	4b40      	ldr	r3, [pc, #256]	; (80036a8 <xTaskIncrementTick+0x16c>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d353      	bcc.n	8003656 <xTaskIncrementTick+0x11a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035ae:	4b3b      	ldr	r3, [pc, #236]	; (800369c <xTaskIncrementTick+0x160>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d101      	bne.n	80035bc <xTaskIncrementTick+0x80>
 80035b8:	2301      	movs	r3, #1
 80035ba:	e000      	b.n	80035be <xTaskIncrementTick+0x82>
 80035bc:	2300      	movs	r3, #0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d004      	beq.n	80035cc <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035c2:	4b39      	ldr	r3, [pc, #228]	; (80036a8 <xTaskIncrementTick+0x16c>)
 80035c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035c8:	601a      	str	r2, [r3, #0]
					break;
 80035ca:	e044      	b.n	8003656 <xTaskIncrementTick+0x11a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80035cc:	4b33      	ldr	r3, [pc, #204]	; (800369c <xTaskIncrementTick+0x160>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d203      	bcs.n	80035ec <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80035e4:	4a30      	ldr	r2, [pc, #192]	; (80036a8 <xTaskIncrementTick+0x16c>)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6013      	str	r3, [r2, #0]
						break;
 80035ea:	e034      	b.n	8003656 <xTaskIncrementTick+0x11a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	3304      	adds	r3, #4
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff f901 	bl	80027f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d004      	beq.n	8003608 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	3318      	adds	r3, #24
 8003602:	4618      	mov	r0, r3
 8003604:	f7ff f8f8 	bl	80027f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	4618      	mov	r0, r3
 800360c:	f001 fafe 	bl	8004c0c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003614:	461a      	mov	r2, r3
 8003616:	2301      	movs	r3, #1
 8003618:	fa03 f202 	lsl.w	r2, r3, r2
 800361c:	4b23      	ldr	r3, [pc, #140]	; (80036ac <xTaskIncrementTick+0x170>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4313      	orrs	r3, r2
 8003622:	4a22      	ldr	r2, [pc, #136]	; (80036ac <xTaskIncrementTick+0x170>)
 8003624:	6013      	str	r3, [r2, #0]
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800362a:	4613      	mov	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4413      	add	r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4a1f      	ldr	r2, [pc, #124]	; (80036b0 <xTaskIncrementTick+0x174>)
 8003634:	441a      	add	r2, r3
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	3304      	adds	r3, #4
 800363a:	4610      	mov	r0, r2
 800363c:	4619      	mov	r1, r3
 800363e:	f7ff f87f 	bl	8002740 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003646:	4b1b      	ldr	r3, [pc, #108]	; (80036b4 <xTaskIncrementTick+0x178>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364c:	429a      	cmp	r2, r3
 800364e:	d301      	bcc.n	8003654 <xTaskIncrementTick+0x118>
						{
							xSwitchRequired = pdTRUE;
 8003650:	2301      	movs	r3, #1
 8003652:	617b      	str	r3, [r7, #20]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
 8003654:	e7ab      	b.n	80035ae <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003656:	4b17      	ldr	r3, [pc, #92]	; (80036b4 <xTaskIncrementTick+0x178>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800365c:	4914      	ldr	r1, [pc, #80]	; (80036b0 <xTaskIncrementTick+0x174>)
 800365e:	4613      	mov	r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	4413      	add	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	440b      	add	r3, r1
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d901      	bls.n	8003672 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800366e:	2301      	movs	r3, #1
 8003670:	617b      	str	r3, [r7, #20]
 8003672:	e004      	b.n	800367e <xTaskIncrementTick+0x142>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003674:	4b10      	ldr	r3, [pc, #64]	; (80036b8 <xTaskIncrementTick+0x17c>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	3301      	adds	r3, #1
 800367a:	4a0f      	ldr	r2, [pc, #60]	; (80036b8 <xTaskIncrementTick+0x17c>)
 800367c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800367e:	4b0f      	ldr	r3, [pc, #60]	; (80036bc <xTaskIncrementTick+0x180>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <xTaskIncrementTick+0x14e>
		{
			xSwitchRequired = pdTRUE;
 8003686:	2301      	movs	r3, #1
 8003688:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800368a:	697b      	ldr	r3, [r7, #20]
}
 800368c:	4618      	mov	r0, r3
 800368e:	3718      	adds	r7, #24
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	2000156c 	.word	0x2000156c
 8003698:	20001548 	.word	0x20001548
 800369c:	200014fc 	.word	0x200014fc
 80036a0:	20001500 	.word	0x20001500
 80036a4:	2000155c 	.word	0x2000155c
 80036a8:	20001564 	.word	0x20001564
 80036ac:	2000154c 	.word	0x2000154c
 80036b0:	20001448 	.word	0x20001448
 80036b4:	20001444 	.word	0x20001444
 80036b8:	20001554 	.word	0x20001554
 80036bc:	20001558 	.word	0x20001558

080036c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80036c6:	4b2e      	ldr	r3, [pc, #184]	; (8003780 <vTaskSwitchContext+0xc0>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80036ce:	4b2d      	ldr	r3, [pc, #180]	; (8003784 <vTaskSwitchContext+0xc4>)
 80036d0:	2201      	movs	r2, #1
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	e051      	b.n	800377a <vTaskSwitchContext+0xba>
	}
	else
	{
		xYieldPending = pdFALSE;
 80036d6:	4b2b      	ldr	r3, [pc, #172]	; (8003784 <vTaskSwitchContext+0xc4>)
 80036d8:	2200      	movs	r2, #0
 80036da:	601a      	str	r2, [r3, #0]
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80036dc:	4b2a      	ldr	r3, [pc, #168]	; (8003788 <vTaskSwitchContext+0xc8>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	60fb      	str	r3, [r7, #12]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	fab3 f383 	clz	r3, r3
 80036e8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80036ea:	7afb      	ldrb	r3, [r7, #11]
 80036ec:	f1c3 031f 	rsb	r3, r3, #31
 80036f0:	617b      	str	r3, [r7, #20]
 80036f2:	4926      	ldr	r1, [pc, #152]	; (800378c <vTaskSwitchContext+0xcc>)
 80036f4:	697a      	ldr	r2, [r7, #20]
 80036f6:	4613      	mov	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4413      	add	r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	440b      	add	r3, r1
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d109      	bne.n	800371a <vTaskSwitchContext+0x5a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800370a:	f383 8811 	msr	BASEPRI, r3
 800370e:	f3bf 8f6f 	isb	sy
 8003712:	f3bf 8f4f 	dsb	sy
 8003716:	607b      	str	r3, [r7, #4]
 8003718:	e7fe      	b.n	8003718 <vTaskSwitchContext+0x58>
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	4613      	mov	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	4413      	add	r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4a19      	ldr	r2, [pc, #100]	; (800378c <vTaskSwitchContext+0xcc>)
 8003726:	4413      	add	r3, r2
 8003728:	613b      	str	r3, [r7, #16]
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	605a      	str	r2, [r3, #4]
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	3308      	adds	r3, #8
 800373c:	429a      	cmp	r2, r3
 800373e:	d104      	bne.n	800374a <vTaskSwitchContext+0x8a>
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	685a      	ldr	r2, [r3, #4]
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	605a      	str	r2, [r3, #4]
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	4a0f      	ldr	r2, [pc, #60]	; (8003790 <vTaskSwitchContext+0xd0>)
 8003752:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8003754:	4b0e      	ldr	r3, [pc, #56]	; (8003790 <vTaskSwitchContext+0xd0>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	3334      	adds	r3, #52	; 0x34
 800375a:	4618      	mov	r0, r3
 800375c:	490d      	ldr	r1, [pc, #52]	; (8003794 <vTaskSwitchContext+0xd4>)
 800375e:	2205      	movs	r2, #5
 8003760:	f001 fd76 	bl	8005250 <memcmp>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d005      	beq.n	8003776 <vTaskSwitchContext+0xb6>
 800376a:	4b09      	ldr	r3, [pc, #36]	; (8003790 <vTaskSwitchContext+0xd0>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4618      	mov	r0, r3
 8003770:	f001 fa0a 	bl	8004b88 <SEGGER_SYSVIEW_OnTaskStartExec>
 8003774:	e001      	b.n	800377a <vTaskSwitchContext+0xba>
 8003776:	f001 f9a9 	bl	8004acc <SEGGER_SYSVIEW_OnIdle>
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800377a:	3718      	adds	r7, #24
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	2000156c 	.word	0x2000156c
 8003784:	20001558 	.word	0x20001558
 8003788:	2000154c 	.word	0x2000154c
 800378c:	20001448 	.word	0x20001448
 8003790:	20001444 	.word	0x20001444
 8003794:	08005300 	.word	0x08005300

08003798 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80037a0:	f000 f850 	bl	8003844 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80037a4:	4b06      	ldr	r3, [pc, #24]	; (80037c0 <prvIdleTask+0x28>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d907      	bls.n	80037bc <prvIdleTask+0x24>
			{
				taskYIELD();
 80037ac:	4b05      	ldr	r3, [pc, #20]	; (80037c4 <prvIdleTask+0x2c>)
 80037ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	f3bf 8f4f 	dsb	sy
 80037b8:	f3bf 8f6f 	isb	sy
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 80037bc:	e7f0      	b.n	80037a0 <prvIdleTask+0x8>
 80037be:	bf00      	nop
 80037c0:	20001448 	.word	0x20001448
 80037c4:	e000ed04 	.word	0xe000ed04

080037c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037ce:	2300      	movs	r3, #0
 80037d0:	607b      	str	r3, [r7, #4]
 80037d2:	e00c      	b.n	80037ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	4613      	mov	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4413      	add	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	4a11      	ldr	r2, [pc, #68]	; (8003824 <prvInitialiseTaskLists+0x5c>)
 80037e0:	4413      	add	r3, r2
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7fe ff80 	bl	80026e8 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3301      	adds	r3, #1
 80037ec:	607b      	str	r3, [r7, #4]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2b06      	cmp	r3, #6
 80037f2:	d9ef      	bls.n	80037d4 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 80037f4:	480c      	ldr	r0, [pc, #48]	; (8003828 <prvInitialiseTaskLists+0x60>)
 80037f6:	f7fe ff77 	bl	80026e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80037fa:	480c      	ldr	r0, [pc, #48]	; (800382c <prvInitialiseTaskLists+0x64>)
 80037fc:	f7fe ff74 	bl	80026e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003800:	480b      	ldr	r0, [pc, #44]	; (8003830 <prvInitialiseTaskLists+0x68>)
 8003802:	f7fe ff71 	bl	80026e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003806:	480b      	ldr	r0, [pc, #44]	; (8003834 <prvInitialiseTaskLists+0x6c>)
 8003808:	f7fe ff6e 	bl	80026e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800380c:	480a      	ldr	r0, [pc, #40]	; (8003838 <prvInitialiseTaskLists+0x70>)
 800380e:	f7fe ff6b 	bl	80026e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003812:	4b0a      	ldr	r3, [pc, #40]	; (800383c <prvInitialiseTaskLists+0x74>)
 8003814:	4a04      	ldr	r2, [pc, #16]	; (8003828 <prvInitialiseTaskLists+0x60>)
 8003816:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003818:	4b09      	ldr	r3, [pc, #36]	; (8003840 <prvInitialiseTaskLists+0x78>)
 800381a:	4a04      	ldr	r2, [pc, #16]	; (800382c <prvInitialiseTaskLists+0x64>)
 800381c:	601a      	str	r2, [r3, #0]
}
 800381e:	3708      	adds	r7, #8
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	20001448 	.word	0x20001448
 8003828:	200014d4 	.word	0x200014d4
 800382c:	200014e8 	.word	0x200014e8
 8003830:	20001504 	.word	0x20001504
 8003834:	20001518 	.word	0x20001518
 8003838:	20001530 	.word	0x20001530
 800383c:	200014fc 	.word	0x200014fc
 8003840:	20001500 	.word	0x20001500

08003844 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800384a:	e028      	b.n	800389e <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 800384c:	f7ff fdb4 	bl	80033b8 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8003850:	4b16      	ldr	r3, [pc, #88]	; (80038ac <prvCheckTasksWaitingTermination+0x68>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	bf0c      	ite	eq
 8003858:	2301      	moveq	r3, #1
 800385a:	2300      	movne	r3, #0
 800385c:	b2db      	uxtb	r3, r3
 800385e:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8003860:	f7ff fdb8 	bl	80033d4 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d119      	bne.n	800389e <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 800386a:	f7ff f8ef 	bl	8002a4c <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800386e:	4b0f      	ldr	r3, [pc, #60]	; (80038ac <prvCheckTasksWaitingTermination+0x68>)
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	3304      	adds	r3, #4
 800387a:	4618      	mov	r0, r3
 800387c:	f7fe ffbc 	bl	80027f8 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8003880:	4b0b      	ldr	r3, [pc, #44]	; (80038b0 <prvCheckTasksWaitingTermination+0x6c>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	3b01      	subs	r3, #1
 8003886:	4a0a      	ldr	r2, [pc, #40]	; (80038b0 <prvCheckTasksWaitingTermination+0x6c>)
 8003888:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 800388a:	4b0a      	ldr	r3, [pc, #40]	; (80038b4 <prvCheckTasksWaitingTermination+0x70>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	3b01      	subs	r3, #1
 8003890:	4a08      	ldr	r2, [pc, #32]	; (80038b4 <prvCheckTasksWaitingTermination+0x70>)
 8003892:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8003894:	f7ff f908 	bl	8002aa8 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8003898:	6838      	ldr	r0, [r7, #0]
 800389a:	f000 f80d 	bl	80038b8 <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800389e:	4b05      	ldr	r3, [pc, #20]	; (80038b4 <prvCheckTasksWaitingTermination+0x70>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1d2      	bne.n	800384c <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80038a6:	3708      	adds	r7, #8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	20001518 	.word	0x20001518
 80038b0:	20001544 	.word	0x20001544
 80038b4:	2000152c 	.word	0x2000152c

080038b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7ff fa95 	bl	8002df4 <vPortFree>
			vPortFree( pxTCB );
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f7ff fa92 	bl	8002df4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop

080038d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038de:	4b0e      	ldr	r3, [pc, #56]	; (8003918 <prvResetNextTaskUnblockTime+0x40>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <prvResetNextTaskUnblockTime+0x14>
 80038e8:	2301      	movs	r3, #1
 80038ea:	e000      	b.n	80038ee <prvResetNextTaskUnblockTime+0x16>
 80038ec:	2300      	movs	r3, #0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d004      	beq.n	80038fc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80038f2:	4b0a      	ldr	r3, [pc, #40]	; (800391c <prvResetNextTaskUnblockTime+0x44>)
 80038f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038f8:	601a      	str	r2, [r3, #0]
 80038fa:	e008      	b.n	800390e <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80038fc:	4b06      	ldr	r3, [pc, #24]	; (8003918 <prvResetNextTaskUnblockTime+0x40>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	4a04      	ldr	r2, [pc, #16]	; (800391c <prvResetNextTaskUnblockTime+0x44>)
 800390c:	6013      	str	r3, [r2, #0]
	}
}
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr
 8003918:	200014fc 	.word	0x200014fc
 800391c:	20001564 	.word	0x20001564

08003920 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800392a:	4b31      	ldr	r3, [pc, #196]	; (80039f0 <prvAddCurrentTaskToDelayedList+0xd0>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003930:	4b30      	ldr	r3, [pc, #192]	; (80039f4 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	3304      	adds	r3, #4
 8003936:	4618      	mov	r0, r3
 8003938:	f7fe ff5e 	bl	80027f8 <uxListRemove>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10b      	bne.n	800395a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003942:	4b2c      	ldr	r3, [pc, #176]	; (80039f4 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003948:	461a      	mov	r2, r3
 800394a:	2301      	movs	r3, #1
 800394c:	4093      	lsls	r3, r2
 800394e:	43da      	mvns	r2, r3
 8003950:	4b29      	ldr	r3, [pc, #164]	; (80039f8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4013      	ands	r3, r2
 8003956:	4a28      	ldr	r2, [pc, #160]	; (80039f8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003958:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003960:	d110      	bne.n	8003984 <prvAddCurrentTaskToDelayedList+0x64>
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00d      	beq.n	8003984 <prvAddCurrentTaskToDelayedList+0x64>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003968:	4b22      	ldr	r3, [pc, #136]	; (80039f4 <prvAddCurrentTaskToDelayedList+0xd4>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4618      	mov	r0, r3
 800396e:	211b      	movs	r1, #27
 8003970:	f001 f98e 	bl	8004c90 <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003974:	4b1f      	ldr	r3, [pc, #124]	; (80039f4 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	3304      	adds	r3, #4
 800397a:	4820      	ldr	r0, [pc, #128]	; (80039fc <prvAddCurrentTaskToDelayedList+0xdc>)
 800397c:	4619      	mov	r1, r3
 800397e:	f7fe fedf 	bl	8002740 <vListInsertEnd>
 8003982:	e032      	b.n	80039ea <prvAddCurrentTaskToDelayedList+0xca>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4413      	add	r3, r2
 800398a:	60bb      	str	r3, [r7, #8]

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800398c:	4b19      	ldr	r3, [pc, #100]	; (80039f4 <prvAddCurrentTaskToDelayedList+0xd4>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68ba      	ldr	r2, [r7, #8]
 8003992:	605a      	str	r2, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	429a      	cmp	r2, r3
 800399a:	d20f      	bcs.n	80039bc <prvAddCurrentTaskToDelayedList+0x9c>
			{
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800399c:	4b15      	ldr	r3, [pc, #84]	; (80039f4 <prvAddCurrentTaskToDelayedList+0xd4>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4618      	mov	r0, r3
 80039a2:	2104      	movs	r1, #4
 80039a4:	f001 f974 	bl	8004c90 <SEGGER_SYSVIEW_OnTaskStopReady>
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039a8:	4b15      	ldr	r3, [pc, #84]	; (8003a00 <prvAddCurrentTaskToDelayedList+0xe0>)
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	4b11      	ldr	r3, [pc, #68]	; (80039f4 <prvAddCurrentTaskToDelayedList+0xd4>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	3304      	adds	r3, #4
 80039b2:	4610      	mov	r0, r2
 80039b4:	4619      	mov	r1, r3
 80039b6:	f7fe fee7 	bl	8002788 <vListInsert>
 80039ba:	e016      	b.n	80039ea <prvAddCurrentTaskToDelayedList+0xca>
			}
			else
			{
                traceMOVED_TASK_TO_DELAYED_LIST();
 80039bc:	4b0d      	ldr	r3, [pc, #52]	; (80039f4 <prvAddCurrentTaskToDelayedList+0xd4>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4618      	mov	r0, r3
 80039c2:	2104      	movs	r1, #4
 80039c4:	f001 f964 	bl	8004c90 <SEGGER_SYSVIEW_OnTaskStopReady>
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039c8:	4b0e      	ldr	r3, [pc, #56]	; (8003a04 <prvAddCurrentTaskToDelayedList+0xe4>)
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	4b09      	ldr	r3, [pc, #36]	; (80039f4 <prvAddCurrentTaskToDelayedList+0xd4>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	3304      	adds	r3, #4
 80039d2:	4610      	mov	r0, r2
 80039d4:	4619      	mov	r1, r3
 80039d6:	f7fe fed7 	bl	8002788 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 80039da:	4b0b      	ldr	r3, [pc, #44]	; (8003a08 <prvAddCurrentTaskToDelayedList+0xe8>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68ba      	ldr	r2, [r7, #8]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d202      	bcs.n	80039ea <prvAddCurrentTaskToDelayedList+0xca>
				{
					xNextTaskUnblockTime = xTimeToWake;
 80039e4:	4a08      	ldr	r2, [pc, #32]	; (8003a08 <prvAddCurrentTaskToDelayedList+0xe8>)
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	6013      	str	r3, [r2, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	20001548 	.word	0x20001548
 80039f4:	20001444 	.word	0x20001444
 80039f8:	2000154c 	.word	0x2000154c
 80039fc:	20001530 	.word	0x20001530
 8003a00:	20001500 	.word	0x20001500
 8003a04:	200014fc 	.word	0x200014fc
 8003a08:	20001564 	.word	0x20001564

08003a0c <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8003a12:	4b21      	ldr	r3, [pc, #132]	; (8003a98 <_DoInit+0x8c>)
 8003a14:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2203      	movs	r2, #3
 8003a1a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2203      	movs	r2, #3
 8003a20:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a1d      	ldr	r2, [pc, #116]	; (8003a9c <_DoInit+0x90>)
 8003a26:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a1d      	ldr	r2, [pc, #116]	; (8003aa0 <_DoInit+0x94>)
 8003a2c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a34:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a14      	ldr	r2, [pc, #80]	; (8003a9c <_DoInit+0x90>)
 8003a4c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a14      	ldr	r2, [pc, #80]	; (8003aa4 <_DoInit+0x98>)
 8003a52:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2210      	movs	r2, #16
 8003a58:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3307      	adds	r3, #7
 8003a70:	4a0d      	ldr	r2, [pc, #52]	; (8003aa8 <_DoInit+0x9c>)
 8003a72:	6810      	ldr	r0, [r2, #0]
 8003a74:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a0c      	ldr	r2, [pc, #48]	; (8003aac <_DoInit+0xa0>)
 8003a7a:	6810      	ldr	r0, [r2, #0]
 8003a7c:	6018      	str	r0, [r3, #0]
 8003a7e:	8891      	ldrh	r1, [r2, #4]
 8003a80:	7992      	ldrb	r2, [r2, #6]
 8003a82:	8099      	strh	r1, [r3, #4]
 8003a84:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2220      	movs	r2, #32
 8003a8a:	719a      	strb	r2, [r3, #6]
}
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	20002b84 	.word	0x20002b84
 8003a9c:	08005318 	.word	0x08005318
 8003aa0:	20001570 	.word	0x20001570
 8003aa4:	20001970 	.word	0x20001970
 8003aa8:	08005324 	.word	0x08005324
 8003aac:	08005328 	.word	0x08005328

08003ab0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b08a      	sub	sp, #40	; 0x28
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
  unsigned                RdOff;
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  //
  INIT();
 8003abc:	4b3c      	ldr	r3, [pc, #240]	; (8003bb0 <SEGGER_RTT_ReadNoLock+0x100>)
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d101      	bne.n	8003ac8 <SEGGER_RTT_ReadNoLock+0x18>
 8003ac4:	f7ff ffa2 	bl	8003a0c <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	4613      	mov	r3, r2
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	4413      	add	r3, r2
 8003ad0:	00db      	lsls	r3, r3, #3
 8003ad2:	3360      	adds	r3, #96	; 0x60
 8003ad4:	4a36      	ldr	r2, [pc, #216]	; (8003bb0 <SEGGER_RTT_ReadNoLock+0x100>)
 8003ad6:	4413      	add	r3, r2
 8003ad8:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 8003aea:	2300      	movs	r3, #0
 8003aec:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003aee:	6a3a      	ldr	r2, [r7, #32]
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d92a      	bls.n	8003b4c <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	689a      	ldr	r2, [r3, #8]
 8003afa:	6a3b      	ldr	r3, [r7, #32]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4293      	cmp	r3, r2
 8003b06:	bf28      	it	cs
 8003b08:	4613      	movcs	r3, r2
 8003b0a:	613b      	str	r3, [r7, #16]
    memcpy(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	685a      	ldr	r2, [r3, #4]
 8003b10:	6a3b      	ldr	r3, [r7, #32]
 8003b12:	4413      	add	r3, r2
 8003b14:	69f8      	ldr	r0, [r7, #28]
 8003b16:	4619      	mov	r1, r3
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	f001 fba9 	bl	8005270 <memcpy>
    NumBytesRead += NumBytesRem;
 8003b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	4413      	add	r3, r2
 8003b24:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8003b26:	69fa      	ldr	r2, [r7, #28]
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003b36:	6a3a      	ldr	r2, [r7, #32]
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	623b      	str	r3, [r7, #32]
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	689a      	ldr	r2, [r3, #8]
 8003b42:	6a3b      	ldr	r3, [r7, #32]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d101      	bne.n	8003b4c <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	6a3b      	ldr	r3, [r7, #32]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	bf28      	it	cs
 8003b5c:	4613      	movcs	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d018      	beq.n	8003b98 <SEGGER_RTT_ReadNoLock+0xe8>
    memcpy(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	6a3b      	ldr	r3, [r7, #32]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	69f8      	ldr	r0, [r7, #28]
 8003b70:	4619      	mov	r1, r3
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	f001 fb7c 	bl	8005270 <memcpy>
    NumBytesRead += NumBytesRem;
 8003b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8003b80:	69fa      	ldr	r2, [r7, #28]
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	4413      	add	r3, r2
 8003b86:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003b90:	6a3a      	ldr	r2, [r7, #32]
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	4413      	add	r3, r2
 8003b96:	623b      	str	r3, [r7, #32]
  }
  if (NumBytesRead) {
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d002      	beq.n	8003ba4 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	6a3a      	ldr	r2, [r7, #32]
 8003ba2:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3728      	adds	r7, #40	; 0x28
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	20002b84 	.word	0x20002b84

08003bb4 <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b08c      	sub	sp, #48	; 0x30
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
  unsigned              Avail;
  unsigned              RdOff;
  unsigned              WrOff;
  unsigned              Rem;

  pData = (const char *)pBuffer;
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	1c5a      	adds	r2, r3, #1
 8003bc8:	4613      	mov	r3, r2
 8003bca:	005b      	lsls	r3, r3, #1
 8003bcc:	4413      	add	r3, r2
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	4a46      	ldr	r2, [pc, #280]	; (8003cec <SEGGER_RTT_WriteSkipNoLock+0x138>)
 8003bd2:	4413      	add	r3, r2
 8003bd4:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	61fb      	str	r3, [r7, #28]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 8003be2:	6a3a      	ldr	r2, [r7, #32]
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d862      	bhi.n	8003cb0 <SEGGER_RTT_WriteSkipNoLock+0xfc>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 8003bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bec:	689a      	ldr	r2, [r3, #8]
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	61bb      	str	r3, [r7, #24]
    if (Avail >= NumBytes) {
 8003bf6:	69ba      	ldr	r2, [r7, #24]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d31d      	bcc.n	8003c3a <SEGGER_RTT_WriteSkipNoLock+0x86>
#if 1 // memcpy() is good for large amounts of data, but the overhead is too big for small amounts. Use a simple byte loop instead.
      char* pDst;
      pDst = pRing->pBuffer + WrOff;
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c00:	685a      	ldr	r2, [r3, #4]
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	4413      	add	r3, r2
 8003c06:	62bb      	str	r3, [r7, #40]	; 0x28
      WrOff += NumBytes;
 8003c08:	69fa      	ldr	r2, [r7, #28]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	61fb      	str	r3, [r7, #28]
      do {
        *pDst++ = *pData++;
 8003c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c12:	1c5a      	adds	r2, r3, #1
 8003c14:	62ba      	str	r2, [r7, #40]	; 0x28
 8003c16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c18:	1c51      	adds	r1, r2, #1
 8003c1a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003c1c:	7812      	ldrb	r2, [r2, #0]
 8003c1e:	701a      	strb	r2, [r3, #0]
      } while (--NumBytes);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	3b01      	subs	r3, #1
 8003c24:	607b      	str	r3, [r7, #4]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1f1      	bne.n	8003c10 <SEGGER_RTT_WriteSkipNoLock+0x5c>
      pRing->WrOff = WrOff + NumBytes;
 8003c2c:	69fa      	ldr	r2, [r7, #28]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	441a      	add	r2, r3
 8003c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c34:	60da      	str	r2, [r3, #12]
#else
      memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
      pRing->WrOff = WrOff + NumBytes;
#endif
      return 1;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e054      	b.n	8003ce4 <SEGGER_RTT_WriteSkipNoLock+0x130>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 8003c3a:	69ba      	ldr	r2, [r7, #24]
 8003c3c:	6a3b      	ldr	r3, [r7, #32]
 8003c3e:	4413      	add	r3, r2
 8003c40:	61bb      	str	r3, [r7, #24]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d34b      	bcc.n	8003ce2 <SEGGER_RTT_WriteSkipNoLock+0x12e>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4c:	689a      	ldr	r2, [r3, #8]
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	617b      	str	r3, [r7, #20]
      if (Rem > NumBytes) {
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d90e      	bls.n	8003c7a <SEGGER_RTT_WriteSkipNoLock+0xc6>
        memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5e:	685a      	ldr	r2, [r3, #4]
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	4413      	add	r3, r2
 8003c64:	4618      	mov	r0, r3
 8003c66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	f001 fb01 	bl	8005270 <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 8003c6e:	69fa      	ldr	r2, [r7, #28]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	441a      	add	r2, r3
 8003c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c76:	60da      	str	r2, [r3, #12]
 8003c78:	e018      	b.n	8003cac <SEGGER_RTT_WriteSkipNoLock+0xf8>
      } else {
        //
        // We reach the end of the buffer, so need to wrap around
        //
        memcpy(pRing->pBuffer + WrOff, pData, Rem);
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	4413      	add	r3, r2
 8003c82:	4618      	mov	r0, r3
 8003c84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	f001 faf2 	bl	8005270 <memcpy>
        memcpy(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8e:	6858      	ldr	r0, [r3, #4]
 8003c90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	18d1      	adds	r1, r2, r3
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	f001 fae7 	bl	8005270 <memcpy>
        pRing->WrOff = NumBytes - Rem;
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	1ad2      	subs	r2, r2, r3
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003caa:	60da      	str	r2, [r3, #12]
      }
      return 1;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e019      	b.n	8003ce4 <SEGGER_RTT_WriteSkipNoLock+0x130>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 8003cb0:	6a3a      	ldr	r2, [r7, #32]
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	61bb      	str	r3, [r7, #24]
    if (Avail >= NumBytes) {
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d30f      	bcc.n	8003ce2 <SEGGER_RTT_WriteSkipNoLock+0x12e>
      memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	4413      	add	r3, r2
 8003cca:	4618      	mov	r0, r3
 8003ccc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	f001 face 	bl	8005270 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8003cd4:	69fa      	ldr	r2, [r7, #28]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	441a      	add	r2, r3
 8003cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cdc:	60da      	str	r2, [r3, #12]
      return 1;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e000      	b.n	8003ce4 <SEGGER_RTT_WriteSkipNoLock+0x130>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3730      	adds	r7, #48	; 0x30
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	20002b84 	.word	0x20002b84

08003cf0 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
 8003cfc:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8003cfe:	4b30      	ldr	r3, [pc, #192]	; (8003dc0 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <SEGGER_RTT_ConfigUpBuffer+0x1a>
 8003d06:	f7ff fe81 	bl	8003a0c <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 8003d0a:	4b2d      	ldr	r3, [pc, #180]	; (8003dc0 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d94b      	bls.n	8003dae <SEGGER_RTT_ConfigUpBuffer+0xbe>
    SEGGER_RTT_LOCK();
 8003d16:	f3ef 8311 	mrs	r3, BASEPRI
 8003d1a:	f04f 0120 	mov.w	r1, #32
 8003d1e:	f381 8811 	msr	BASEPRI, r1
 8003d22:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d031      	beq.n	8003d8e <SEGGER_RTT_ConfigUpBuffer+0x9e>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 8003d2a:	4925      	ldr	r1, [pc, #148]	; (8003dc0 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	1c5a      	adds	r2, r3, #1
 8003d30:	4613      	mov	r3, r2
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	4413      	add	r3, r2
 8003d36:	00db      	lsls	r3, r3, #3
 8003d38:	440b      	add	r3, r1
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003d3e:	4920      	ldr	r1, [pc, #128]	; (8003dc0 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	1c5a      	adds	r2, r3, #1
 8003d44:	4613      	mov	r3, r2
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	4413      	add	r3, r2
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	440b      	add	r3, r1
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	605a      	str	r2, [r3, #4]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003d52:	491b      	ldr	r1, [pc, #108]	; (8003dc0 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	4613      	mov	r3, r2
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	4413      	add	r3, r2
 8003d5c:	00db      	lsls	r3, r3, #3
 8003d5e:	440b      	add	r3, r1
 8003d60:	3320      	adds	r3, #32
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 8003d66:	4916      	ldr	r1, [pc, #88]	; (8003dc0 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	005b      	lsls	r3, r3, #1
 8003d6e:	4413      	add	r3, r2
 8003d70:	00db      	lsls	r3, r3, #3
 8003d72:	440b      	add	r3, r1
 8003d74:	3328      	adds	r3, #40	; 0x28
 8003d76:	2200      	movs	r2, #0
 8003d78:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 8003d7a:	4911      	ldr	r1, [pc, #68]	; (8003dc0 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	4413      	add	r3, r2
 8003d84:	00db      	lsls	r3, r3, #3
 8003d86:	440b      	add	r3, r1
 8003d88:	3320      	adds	r3, #32
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	605a      	str	r2, [r3, #4]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 8003d8e:	490c      	ldr	r1, [pc, #48]	; (8003dc0 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	4613      	mov	r3, r2
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	4413      	add	r3, r2
 8003d98:	00db      	lsls	r3, r3, #3
 8003d9a:	440b      	add	r3, r1
 8003d9c:	3328      	adds	r3, #40	; 0x28
 8003d9e:	6a3a      	ldr	r2, [r7, #32]
 8003da0:	605a      	str	r2, [r3, #4]
    SEGGER_RTT_UNLOCK();
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003da8:	2300      	movs	r3, #0
 8003daa:	617b      	str	r3, [r7, #20]
 8003dac:	e002      	b.n	8003db4 <SEGGER_RTT_ConfigUpBuffer+0xc4>
  } else {
    r = -1;
 8003dae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003db2:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003db4:	697b      	ldr	r3, [r7, #20]
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3718      	adds	r7, #24
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	20002b84 	.word	0x20002b84

08003dc4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b086      	sub	sp, #24
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
 8003dd0:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8003dd2:	4b30      	ldr	r3, [pc, #192]	; (8003e94 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <SEGGER_RTT_ConfigDownBuffer+0x1a>
 8003dda:	f7ff fe17 	bl	8003a0c <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 8003dde:	4b2d      	ldr	r3, [pc, #180]	; (8003e94 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	461a      	mov	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d94b      	bls.n	8003e82 <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 8003dea:	f3ef 8311 	mrs	r3, BASEPRI
 8003dee:	f04f 0120 	mov.w	r1, #32
 8003df2:	f381 8811 	msr	BASEPRI, r1
 8003df6:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d031      	beq.n	8003e62 <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 8003dfe:	4925      	ldr	r1, [pc, #148]	; (8003e94 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	4613      	mov	r3, r2
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	4413      	add	r3, r2
 8003e08:	00db      	lsls	r3, r3, #3
 8003e0a:	440b      	add	r3, r1
 8003e0c:	3360      	adds	r3, #96	; 0x60
 8003e0e:	68ba      	ldr	r2, [r7, #8]
 8003e10:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8003e12:	4920      	ldr	r1, [pc, #128]	; (8003e94 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	4613      	mov	r3, r2
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	4413      	add	r3, r2
 8003e1c:	00db      	lsls	r3, r3, #3
 8003e1e:	440b      	add	r3, r1
 8003e20:	3360      	adds	r3, #96	; 0x60
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	605a      	str	r2, [r3, #4]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8003e26:	491b      	ldr	r1, [pc, #108]	; (8003e94 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	4413      	add	r3, r2
 8003e30:	00db      	lsls	r3, r3, #3
 8003e32:	440b      	add	r3, r1
 8003e34:	3368      	adds	r3, #104	; 0x68
 8003e36:	683a      	ldr	r2, [r7, #0]
 8003e38:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 8003e3a:	4916      	ldr	r1, [pc, #88]	; (8003e94 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	4413      	add	r3, r2
 8003e44:	00db      	lsls	r3, r3, #3
 8003e46:	440b      	add	r3, r1
 8003e48:	3370      	adds	r3, #112	; 0x70
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 8003e4e:	4911      	ldr	r1, [pc, #68]	; (8003e94 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	4613      	mov	r3, r2
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	4413      	add	r3, r2
 8003e58:	00db      	lsls	r3, r3, #3
 8003e5a:	440b      	add	r3, r1
 8003e5c:	3368      	adds	r3, #104	; 0x68
 8003e5e:	2200      	movs	r2, #0
 8003e60:	605a      	str	r2, [r3, #4]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 8003e62:	490c      	ldr	r1, [pc, #48]	; (8003e94 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	4613      	mov	r3, r2
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	4413      	add	r3, r2
 8003e6c:	00db      	lsls	r3, r3, #3
 8003e6e:	440b      	add	r3, r1
 8003e70:	3370      	adds	r3, #112	; 0x70
 8003e72:	6a3a      	ldr	r2, [r7, #32]
 8003e74:	605a      	str	r2, [r3, #4]
    SEGGER_RTT_UNLOCK();
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	617b      	str	r3, [r7, #20]
 8003e80:	e002      	b.n	8003e88 <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 8003e82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e86:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003e88:	697b      	ldr	r3, [r7, #20]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3718      	adds	r7, #24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	20002b84 	.word	0x20002b84

08003e98 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003e98:	b480      	push	{r7}
 8003e9a:	b087      	sub	sp, #28
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003ea8:	e002      	b.n	8003eb0 <_EncodeStr+0x18>
    Len++;
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	3301      	adds	r3, #1
 8003eae:	613b      	str	r3, [r7, #16]
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
  while(*(pText + Len) != 0) {
 8003eb0:	68ba      	ldr	r2, [r7, #8]
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1f6      	bne.n	8003eaa <_EncodeStr+0x12>
    Len++;
  }
  if (Len > Limit) {
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d901      	bls.n	8003ec8 <_EncodeStr+0x30>
    Len = Limit;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	2bfe      	cmp	r3, #254	; 0xfe
 8003ecc:	d806      	bhi.n	8003edc <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	1c5a      	adds	r2, r3, #1
 8003ed2:	60fa      	str	r2, [r7, #12]
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	b2d2      	uxtb	r2, r2
 8003ed8:	701a      	strb	r2, [r3, #0]
 8003eda:	e011      	b.n	8003f00 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	1c5a      	adds	r2, r3, #1
 8003ee0:	60fa      	str	r2, [r7, #12]
 8003ee2:	22ff      	movs	r2, #255	; 0xff
 8003ee4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	1c5a      	adds	r2, r3, #1
 8003eea:	60fa      	str	r2, [r7, #12]
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	b2d2      	uxtb	r2, r2
 8003ef0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	1c5a      	adds	r2, r3, #1
 8003ef6:	60fa      	str	r2, [r7, #12]
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	0a12      	lsrs	r2, r2, #8
 8003efc:	b2d2      	uxtb	r2, r2
 8003efe:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003f00:	2300      	movs	r3, #0
 8003f02:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003f04:	e00a      	b.n	8003f1c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	1c5a      	adds	r2, r3, #1
 8003f0a:	60fa      	str	r2, [r7, #12]
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	1c51      	adds	r1, r2, #1
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	7812      	ldrb	r2, [r2, #0]
 8003f14:	701a      	strb	r2, [r3, #0]
    n++;
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	617b      	str	r3, [r7, #20]
  }
  //
  // copy string
  //
  n = 0;
  while (n < Len) {
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d3f0      	bcc.n	8003f06 <_EncodeStr+0x6e>
    *pPayload++ = *pText++;
    n++;
  }
  return pPayload;
 8003f24:	68fb      	ldr	r3, [r7, #12]
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	371c      	adds	r7, #28
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop

08003f34 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	3304      	adds	r3, #4
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003f52:	1cfb      	adds	r3, r7, #3
 8003f54:	2001      	movs	r0, #1
 8003f56:	4619      	mov	r1, r3
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f7ff fda9 	bl	8003ab0 <SEGGER_RTT_ReadNoLock>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	dd46      	ble.n	8003ff6 <_HandleIncomingPacket+0xaa>
    switch (Cmd) {
 8003f68:	78fb      	ldrb	r3, [r7, #3]
 8003f6a:	2b04      	cmp	r3, #4
 8003f6c:	d01a      	beq.n	8003fa4 <_HandleIncomingPacket+0x58>
 8003f6e:	2b04      	cmp	r3, #4
 8003f70:	dc06      	bgt.n	8003f80 <_HandleIncomingPacket+0x34>
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d010      	beq.n	8003f98 <_HandleIncomingPacket+0x4c>
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	dc11      	bgt.n	8003f9e <_HandleIncomingPacket+0x52>
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d009      	beq.n	8003f92 <_HandleIncomingPacket+0x46>
 8003f7e:	e02e      	b.n	8003fde <_HandleIncomingPacket+0x92>
 8003f80:	2b06      	cmp	r3, #6
 8003f82:	d015      	beq.n	8003fb0 <_HandleIncomingPacket+0x64>
 8003f84:	2b06      	cmp	r3, #6
 8003f86:	db10      	blt.n	8003faa <_HandleIncomingPacket+0x5e>
 8003f88:	2b07      	cmp	r3, #7
 8003f8a:	d014      	beq.n	8003fb6 <_HandleIncomingPacket+0x6a>
 8003f8c:	2b80      	cmp	r3, #128	; 0x80
 8003f8e:	d015      	beq.n	8003fbc <_HandleIncomingPacket+0x70>
 8003f90:	e025      	b.n	8003fde <_HandleIncomingPacket+0x92>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003f92:	f000 fa67 	bl	8004464 <SEGGER_SYSVIEW_Start>
      break;
 8003f96:	e02e      	b.n	8003ff6 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003f98:	f000 fb20 	bl	80045dc <SEGGER_SYSVIEW_Stop>
      break;
 8003f9c:	e02b      	b.n	8003ff6 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003f9e:	f000 fcf3 	bl	8004988 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003fa2:	e028      	b.n	8003ff6 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003fa4:	f000 fcbc 	bl	8004920 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003fa8:	e025      	b.n	8003ff6 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003faa:	f000 fb3b 	bl	8004624 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003fae:	e022      	b.n	8003ff6 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003fb0:	f000 ff68 	bl	8004e84 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003fb4:	e01f      	b.n	8003ff6 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003fb6:	f000 ff49 	bl	8004e4c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003fba:	e01c      	b.n	8003ff6 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003fbc:	1cfb      	adds	r3, r7, #3
 8003fbe:	2001      	movs	r0, #1
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f7ff fd74 	bl	8003ab0 <SEGGER_RTT_ReadNoLock>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	dd04      	ble.n	8003fdc <_HandleIncomingPacket+0x90>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003fd2:	78fb      	ldrb	r3, [r7, #3]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f000 febb 	bl	8004d50 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003fda:	e00c      	b.n	8003ff6 <_HandleIncomingPacket+0xaa>
 8003fdc:	e00b      	b.n	8003ff6 <_HandleIncomingPacket+0xaa>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003fde:	78fb      	ldrb	r3, [r7, #3]
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	b25b      	sxtb	r3, r3
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	da05      	bge.n	8003ff4 <_HandleIncomingPacket+0xa8>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003fe8:	1cfb      	adds	r3, r7, #3
 8003fea:	2001      	movs	r0, #1
 8003fec:	4619      	mov	r1, r3
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f7ff fd5e 	bl	8003ab0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003ff4:	bf00      	nop
    }
  }
}
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b08c      	sub	sp, #48	; 0x30
 8004000:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004002:	2301      	movs	r3, #1
 8004004:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004006:	1d3b      	adds	r3, r7, #4
 8004008:	3301      	adds	r3, #1
 800400a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004010:	4b30      	ldr	r3, [pc, #192]	; (80040d4 <_TrySendOverflowPacket+0xd8>)
 8004012:	695b      	ldr	r3, [r3, #20]
 8004014:	62bb      	str	r3, [r7, #40]	; 0x28
 8004016:	e00b      	b.n	8004030 <_TrySendOverflowPacket+0x34>
 8004018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800401a:	1c5a      	adds	r2, r3, #1
 800401c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800401e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004020:	b2d2      	uxtb	r2, r2
 8004022:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004026:	b2d2      	uxtb	r2, r2
 8004028:	701a      	strb	r2, [r3, #0]
 800402a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402c:	09db      	lsrs	r3, r3, #7
 800402e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004032:	2b7f      	cmp	r3, #127	; 0x7f
 8004034:	d8f0      	bhi.n	8004018 <_TrySendOverflowPacket+0x1c>
 8004036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004038:	1c5a      	adds	r2, r3, #1
 800403a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800403c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800403e:	b2d2      	uxtb	r2, r2
 8004040:	701a      	strb	r2, [r3, #0]
 8004042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004044:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004046:	4b24      	ldr	r3, [pc, #144]	; (80040d8 <_TrySendOverflowPacket+0xdc>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800404c:	4b21      	ldr	r3, [pc, #132]	; (80040d4 <_TrySendOverflowPacket+0xd8>)
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	69ba      	ldr	r2, [r7, #24]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	627b      	str	r3, [r7, #36]	; 0x24
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	623b      	str	r3, [r7, #32]
 800405e:	e00b      	b.n	8004078 <_TrySendOverflowPacket+0x7c>
 8004060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004062:	1c5a      	adds	r2, r3, #1
 8004064:	627a      	str	r2, [r7, #36]	; 0x24
 8004066:	6a3a      	ldr	r2, [r7, #32]
 8004068:	b2d2      	uxtb	r2, r2
 800406a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800406e:	b2d2      	uxtb	r2, r2
 8004070:	701a      	strb	r2, [r3, #0]
 8004072:	6a3b      	ldr	r3, [r7, #32]
 8004074:	09db      	lsrs	r3, r3, #7
 8004076:	623b      	str	r3, [r7, #32]
 8004078:	6a3b      	ldr	r3, [r7, #32]
 800407a:	2b7f      	cmp	r3, #127	; 0x7f
 800407c:	d8f0      	bhi.n	8004060 <_TrySendOverflowPacket+0x64>
 800407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004080:	1c5a      	adds	r2, r3, #1
 8004082:	627a      	str	r2, [r7, #36]	; 0x24
 8004084:	6a3a      	ldr	r2, [r7, #32]
 8004086:	b2d2      	uxtb	r2, r2
 8004088:	701a      	strb	r2, [r3, #0]
 800408a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800408e:	69fa      	ldr	r2, [r7, #28]
 8004090:	1d3b      	adds	r3, r7, #4
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	461a      	mov	r2, r3
 8004096:	1d3b      	adds	r3, r7, #4
 8004098:	2001      	movs	r0, #1
 800409a:	4619      	mov	r1, r3
 800409c:	f7ff fd8a 	bl	8003bb4 <SEGGER_RTT_WriteSkipNoLock>
 80040a0:	4603      	mov	r3, r0
 80040a2:	613b      	str	r3, [r7, #16]
  if (Status) {
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d009      	beq.n	80040be <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80040aa:	4a0a      	ldr	r2, [pc, #40]	; (80040d4 <_TrySendOverflowPacket+0xd8>)
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80040b0:	4b08      	ldr	r3, [pc, #32]	; (80040d4 <_TrySendOverflowPacket+0xd8>)
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	3b01      	subs	r3, #1
 80040b6:	b2da      	uxtb	r2, r3
 80040b8:	4b06      	ldr	r3, [pc, #24]	; (80040d4 <_TrySendOverflowPacket+0xd8>)
 80040ba:	701a      	strb	r2, [r3, #0]
 80040bc:	e004      	b.n	80040c8 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80040be:	4b05      	ldr	r3, [pc, #20]	; (80040d4 <_TrySendOverflowPacket+0xd8>)
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	3301      	adds	r3, #1
 80040c4:	4a03      	ldr	r2, [pc, #12]	; (80040d4 <_TrySendOverflowPacket+0xd8>)
 80040c6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80040c8:	693b      	ldr	r3, [r7, #16]
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3730      	adds	r7, #48	; 0x30
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	20002988 	.word	0x20002988
 80040d8:	e0001004 	.word	0xe0001004

080040dc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80040dc:	b580      	push	{r7, lr}
 80040de:	b08a      	sub	sp, #40	; 0x28
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80040e8:	4b5e      	ldr	r3, [pc, #376]	; (8004264 <_SendPacket+0x188>)
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d100      	bne.n	80040f2 <_SendPacket+0x16>
    goto Send;
 80040f0:	e00f      	b.n	8004112 <_SendPacket+0x36>
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80040f2:	4b5c      	ldr	r3, [pc, #368]	; (8004264 <_SendPacket+0x188>)
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d100      	bne.n	80040fc <_SendPacket+0x20>
    goto SendDone;
 80040fa:	e09b      	b.n	8004234 <_SendPacket+0x158>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80040fc:	4b59      	ldr	r3, [pc, #356]	; (8004264 <_SendPacket+0x188>)
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	2b02      	cmp	r3, #2
 8004102:	d106      	bne.n	8004112 <_SendPacket+0x36>
    _TrySendOverflowPacket();
 8004104:	f7ff ff7a 	bl	8003ffc <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004108:	4b56      	ldr	r3, [pc, #344]	; (8004264 <_SendPacket+0x188>)
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d000      	beq.n	8004112 <_SendPacket+0x36>
      goto SendDone;
 8004110:	e090      	b.n	8004234 <_SendPacket+0x158>
Send:
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2b1f      	cmp	r3, #31
 8004116:	d809      	bhi.n	800412c <_SendPacket+0x50>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004118:	4b52      	ldr	r3, [pc, #328]	; (8004264 <_SendPacket+0x188>)
 800411a:	69da      	ldr	r2, [r3, #28]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	fa22 f303 	lsr.w	r3, r2, r3
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b00      	cmp	r3, #0
 8004128:	d000      	beq.n	800412c <_SendPacket+0x50>
      goto SendDone;
 800412a:	e083      	b.n	8004234 <_SendPacket+0x158>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2b17      	cmp	r3, #23
 8004130:	d807      	bhi.n	8004142 <_SendPacket+0x66>
    *--pStartPacket = EventId;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	3b01      	subs	r3, #1
 8004136:	60fb      	str	r3, [r7, #12]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	b2da      	uxtb	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	701a      	strb	r2, [r3, #0]
 8004140:	e03d      	b.n	80041be <_SendPacket+0xe2>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004142:	68ba      	ldr	r2, [r7, #8]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	2b7f      	cmp	r3, #127	; 0x7f
 800414e:	d912      	bls.n	8004176 <_SendPacket+0x9a>
      *--pStartPacket = (NumBytes >> 7);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	3b01      	subs	r3, #1
 8004154:	60fb      	str	r3, [r7, #12]
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	09db      	lsrs	r3, r3, #7
 800415a:	b2da      	uxtb	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	3b01      	subs	r3, #1
 8004164:	60fb      	str	r3, [r7, #12]
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	b2db      	uxtb	r3, r3
 800416a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800416e:	b2da      	uxtb	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	701a      	strb	r2, [r3, #0]
 8004174:	e006      	b.n	8004184 <_SendPacket+0xa8>
    } else {
      *--pStartPacket = NumBytes;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	3b01      	subs	r3, #1
 800417a:	60fb      	str	r3, [r7, #12]
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	b2da      	uxtb	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b7f      	cmp	r3, #127	; 0x7f
 8004188:	d912      	bls.n	80041b0 <_SendPacket+0xd4>
      *--pStartPacket = (EventId >> 7);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	3b01      	subs	r3, #1
 800418e:	60fb      	str	r3, [r7, #12]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	09db      	lsrs	r3, r3, #7
 8004194:	b2da      	uxtb	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	3b01      	subs	r3, #1
 800419e:	60fb      	str	r3, [r7, #12]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80041a8:	b2da      	uxtb	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	701a      	strb	r2, [r3, #0]
 80041ae:	e006      	b.n	80041be <_SendPacket+0xe2>
    } else {
      *--pStartPacket = EventId;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	3b01      	subs	r3, #1
 80041b4:	60fb      	str	r3, [r7, #12]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	b2da      	uxtb	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80041be:	4b2a      	ldr	r3, [pc, #168]	; (8004268 <_SendPacket+0x18c>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80041c4:	4b27      	ldr	r3, [pc, #156]	; (8004264 <_SendPacket+0x188>)
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	627b      	str	r3, [r7, #36]	; 0x24
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	623b      	str	r3, [r7, #32]
 80041d6:	e00b      	b.n	80041f0 <_SendPacket+0x114>
 80041d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041da:	1c5a      	adds	r2, r3, #1
 80041dc:	627a      	str	r2, [r7, #36]	; 0x24
 80041de:	6a3a      	ldr	r2, [r7, #32]
 80041e0:	b2d2      	uxtb	r2, r2
 80041e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041e6:	b2d2      	uxtb	r2, r2
 80041e8:	701a      	strb	r2, [r3, #0]
 80041ea:	6a3b      	ldr	r3, [r7, #32]
 80041ec:	09db      	lsrs	r3, r3, #7
 80041ee:	623b      	str	r3, [r7, #32]
 80041f0:	6a3b      	ldr	r3, [r7, #32]
 80041f2:	2b7f      	cmp	r3, #127	; 0x7f
 80041f4:	d8f0      	bhi.n	80041d8 <_SendPacket+0xfc>
 80041f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f8:	1c5a      	adds	r2, r3, #1
 80041fa:	627a      	str	r2, [r7, #36]	; 0x24
 80041fc:	6a3a      	ldr	r2, [r7, #32]
 80041fe:	b2d2      	uxtb	r2, r2
 8004200:	701a      	strb	r2, [r3, #0]
 8004202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004204:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004206:	68ba      	ldr	r2, [r7, #8]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	2001      	movs	r0, #1
 800420e:	68f9      	ldr	r1, [r7, #12]
 8004210:	461a      	mov	r2, r3
 8004212:	f7ff fccf 	bl	8003bb4 <SEGGER_RTT_WriteSkipNoLock>
 8004216:	4603      	mov	r3, r0
 8004218:	613b      	str	r3, [r7, #16]
  if (Status) {
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d003      	beq.n	8004228 <_SendPacket+0x14c>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004220:	4a10      	ldr	r2, [pc, #64]	; (8004264 <_SendPacket+0x188>)
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	60d3      	str	r3, [r2, #12]
 8004226:	e005      	b.n	8004234 <_SendPacket+0x158>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004228:	4b0e      	ldr	r3, [pc, #56]	; (8004264 <_SendPacket+0x188>)
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	3301      	adds	r3, #1
 800422e:	b2da      	uxtb	r2, r3
 8004230:	4b0c      	ldr	r3, [pc, #48]	; (8004264 <_SendPacket+0x188>)
 8004232:	701a      	strb	r2, [r3, #0]
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004234:	4b0d      	ldr	r3, [pc, #52]	; (800426c <_SendPacket+0x190>)
 8004236:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800423a:	4b0c      	ldr	r3, [pc, #48]	; (800426c <_SendPacket+0x190>)
 800423c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004240:	429a      	cmp	r2, r3
 8004242:	d00b      	beq.n	800425c <_SendPacket+0x180>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004244:	4b07      	ldr	r3, [pc, #28]	; (8004264 <_SendPacket+0x188>)
 8004246:	789b      	ldrb	r3, [r3, #2]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d107      	bne.n	800425c <_SendPacket+0x180>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800424c:	4b05      	ldr	r3, [pc, #20]	; (8004264 <_SendPacket+0x188>)
 800424e:	2201      	movs	r2, #1
 8004250:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004252:	f7ff fe7b 	bl	8003f4c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004256:	4b03      	ldr	r3, [pc, #12]	; (8004264 <_SendPacket+0x188>)
 8004258:	2200      	movs	r2, #0
 800425a:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800425c:	3728      	adds	r7, #40	; 0x28
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	20002988 	.word	0x20002988
 8004268:	e0001004 	.word	0xe0001004
 800426c:	20002b84 	.word	0x20002b84

08004270 <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af02      	add	r7, sp, #8
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
 800427c:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800427e:	2300      	movs	r3, #0
 8004280:	9300      	str	r3, [sp, #0]
 8004282:	2001      	movs	r0, #1
 8004284:	4913      	ldr	r1, [pc, #76]	; (80042d4 <SEGGER_SYSVIEW_Init+0x64>)
 8004286:	4a14      	ldr	r2, [pc, #80]	; (80042d8 <SEGGER_SYSVIEW_Init+0x68>)
 8004288:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800428c:	f7ff fd30 	bl	8003cf0 <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004290:	2300      	movs	r3, #0
 8004292:	9300      	str	r3, [sp, #0]
 8004294:	2001      	movs	r0, #1
 8004296:	490f      	ldr	r1, [pc, #60]	; (80042d4 <SEGGER_SYSVIEW_Init+0x64>)
 8004298:	4a10      	ldr	r2, [pc, #64]	; (80042dc <SEGGER_SYSVIEW_Init+0x6c>)
 800429a:	2308      	movs	r3, #8
 800429c:	f7ff fd92 	bl	8003dc4 <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80042a0:	4b0f      	ldr	r3, [pc, #60]	; (80042e0 <SEGGER_SYSVIEW_Init+0x70>)
 80042a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042a6:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80042a8:	4b0e      	ldr	r3, [pc, #56]	; (80042e4 <SEGGER_SYSVIEW_Init+0x74>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a0c      	ldr	r2, [pc, #48]	; (80042e0 <SEGGER_SYSVIEW_Init+0x70>)
 80042ae:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80042b0:	4a0b      	ldr	r2, [pc, #44]	; (80042e0 <SEGGER_SYSVIEW_Init+0x70>)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80042b6:	4a0a      	ldr	r2, [pc, #40]	; (80042e0 <SEGGER_SYSVIEW_Init+0x70>)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80042bc:	4a08      	ldr	r2, [pc, #32]	; (80042e0 <SEGGER_SYSVIEW_Init+0x70>)
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80042c2:	4a07      	ldr	r2, [pc, #28]	; (80042e0 <SEGGER_SYSVIEW_Init+0x70>)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80042c8:	4b05      	ldr	r3, [pc, #20]	; (80042e0 <SEGGER_SYSVIEW_Init+0x70>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	08005330 	.word	0x08005330
 80042d8:	20001980 	.word	0x20001980
 80042dc:	20002980 	.word	0x20002980
 80042e0:	20002988 	.word	0x20002988
 80042e4:	e0001004 	.word	0xe0001004

080042e8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80042f0:	4a03      	ldr	r2, [pc, #12]	; (8004300 <SEGGER_SYSVIEW_SetRAMBase+0x18>)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6113      	str	r3, [r2, #16]
}
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr
 8004300:	20002988 	.word	0x20002988

08004304 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800430c:	f3ef 8311 	mrs	r3, BASEPRI
 8004310:	f04f 0120 	mov.w	r1, #32
 8004314:	f381 8811 	msr	BASEPRI, r1
 8004318:	60fb      	str	r3, [r7, #12]
 800431a:	4807      	ldr	r0, [pc, #28]	; (8004338 <SEGGER_SYSVIEW_RecordVoid+0x34>)
 800431c:	f7ff fe0a 	bl	8003f34 <_PreparePacket>
 8004320:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004322:	68b8      	ldr	r0, [r7, #8]
 8004324:	68b9      	ldr	r1, [r7, #8]
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	f7ff fed8 	bl	80040dc <_SendPacket>
  RECORD_END();
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f383 8811 	msr	BASEPRI, r3
}
 8004332:	3710      	adds	r7, #16
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	200029b8 	.word	0x200029b8

0800433c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800433c:	b580      	push	{r7, lr}
 800433e:	b088      	sub	sp, #32
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004346:	f3ef 8311 	mrs	r3, BASEPRI
 800434a:	f04f 0120 	mov.w	r1, #32
 800434e:	f381 8811 	msr	BASEPRI, r1
 8004352:	617b      	str	r3, [r7, #20]
 8004354:	4816      	ldr	r0, [pc, #88]	; (80043b0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004356:	f7ff fded 	bl	8003f34 <_PreparePacket>
 800435a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	61fb      	str	r3, [r7, #28]
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	61bb      	str	r3, [r7, #24]
 8004368:	e00b      	b.n	8004382 <SEGGER_SYSVIEW_RecordU32+0x46>
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	1c5a      	adds	r2, r3, #1
 800436e:	61fa      	str	r2, [r7, #28]
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	b2d2      	uxtb	r2, r2
 8004374:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004378:	b2d2      	uxtb	r2, r2
 800437a:	701a      	strb	r2, [r3, #0]
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	09db      	lsrs	r3, r3, #7
 8004380:	61bb      	str	r3, [r7, #24]
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	2b7f      	cmp	r3, #127	; 0x7f
 8004386:	d8f0      	bhi.n	800436a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	1c5a      	adds	r2, r3, #1
 800438c:	61fa      	str	r2, [r7, #28]
 800438e:	69ba      	ldr	r2, [r7, #24]
 8004390:	b2d2      	uxtb	r2, r2
 8004392:	701a      	strb	r2, [r3, #0]
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004398:	6938      	ldr	r0, [r7, #16]
 800439a:	68f9      	ldr	r1, [r7, #12]
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	f7ff fe9d 	bl	80040dc <_SendPacket>
  RECORD_END();
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	f383 8811 	msr	BASEPRI, r3
}
 80043a8:	3720      	adds	r7, #32
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	200029b8 	.word	0x200029b8

080043b4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b08c      	sub	sp, #48	; 0x30
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80043c0:	f3ef 8311 	mrs	r3, BASEPRI
 80043c4:	f04f 0120 	mov.w	r1, #32
 80043c8:	f381 8811 	msr	BASEPRI, r1
 80043cc:	61fb      	str	r3, [r7, #28]
 80043ce:	4824      	ldr	r0, [pc, #144]	; (8004460 <SEGGER_SYSVIEW_RecordU32x2+0xac>)
 80043d0:	f7ff fdb0 	bl	8003f34 <_PreparePacket>
 80043d4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80043e2:	e00b      	b.n	80043fc <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80043e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e6:	1c5a      	adds	r2, r3, #1
 80043e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043ec:	b2d2      	uxtb	r2, r2
 80043ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043f2:	b2d2      	uxtb	r2, r2
 80043f4:	701a      	strb	r2, [r3, #0]
 80043f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f8:	09db      	lsrs	r3, r3, #7
 80043fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80043fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fe:	2b7f      	cmp	r3, #127	; 0x7f
 8004400:	d8f0      	bhi.n	80043e4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004404:	1c5a      	adds	r2, r3, #1
 8004406:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004408:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800440a:	b2d2      	uxtb	r2, r2
 800440c:	701a      	strb	r2, [r3, #0]
 800440e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004410:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	627b      	str	r3, [r7, #36]	; 0x24
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	623b      	str	r3, [r7, #32]
 800441a:	e00b      	b.n	8004434 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800441c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441e:	1c5a      	adds	r2, r3, #1
 8004420:	627a      	str	r2, [r7, #36]	; 0x24
 8004422:	6a3a      	ldr	r2, [r7, #32]
 8004424:	b2d2      	uxtb	r2, r2
 8004426:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800442a:	b2d2      	uxtb	r2, r2
 800442c:	701a      	strb	r2, [r3, #0]
 800442e:	6a3b      	ldr	r3, [r7, #32]
 8004430:	09db      	lsrs	r3, r3, #7
 8004432:	623b      	str	r3, [r7, #32]
 8004434:	6a3b      	ldr	r3, [r7, #32]
 8004436:	2b7f      	cmp	r3, #127	; 0x7f
 8004438:	d8f0      	bhi.n	800441c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800443a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443c:	1c5a      	adds	r2, r3, #1
 800443e:	627a      	str	r2, [r7, #36]	; 0x24
 8004440:	6a3a      	ldr	r2, [r7, #32]
 8004442:	b2d2      	uxtb	r2, r2
 8004444:	701a      	strb	r2, [r3, #0]
 8004446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004448:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800444a:	69b8      	ldr	r0, [r7, #24]
 800444c:	6979      	ldr	r1, [r7, #20]
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	f7ff fe44 	bl	80040dc <_SendPacket>
  RECORD_END();
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	f383 8811 	msr	BASEPRI, r3
}
 800445a:	3730      	adds	r7, #48	; 0x30
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	200029b8 	.word	0x200029b8

08004464 <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004464:	b580      	push	{r7, lr}
 8004466:	b08c      	sub	sp, #48	; 0x30
 8004468:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 800446a:	4b59      	ldr	r3, [pc, #356]	; (80045d0 <SEGGER_SYSVIEW_Start+0x16c>)
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	f040 80aa 	bne.w	80045c8 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 8004474:	4b56      	ldr	r3, [pc, #344]	; (80045d0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004476:	2201      	movs	r2, #1
 8004478:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800447a:	f3ef 8311 	mrs	r3, BASEPRI
 800447e:	f04f 0120 	mov.w	r1, #32
 8004482:	f381 8811 	msr	BASEPRI, r1
 8004486:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004488:	2001      	movs	r0, #1
 800448a:	4952      	ldr	r1, [pc, #328]	; (80045d4 <SEGGER_SYSVIEW_Start+0x170>)
 800448c:	220a      	movs	r2, #10
 800448e:	f7ff fb91 	bl	8003bb4 <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004498:	200a      	movs	r0, #10
 800449a:	f7ff ff33 	bl	8004304 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800449e:	f3ef 8311 	mrs	r3, BASEPRI
 80044a2:	f04f 0120 	mov.w	r1, #32
 80044a6:	f381 8811 	msr	BASEPRI, r1
 80044aa:	60bb      	str	r3, [r7, #8]
 80044ac:	484a      	ldr	r0, [pc, #296]	; (80045d8 <SEGGER_SYSVIEW_Start+0x174>)
 80044ae:	f7ff fd41 	bl	8003f34 <_PreparePacket>
 80044b2:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044bc:	4b44      	ldr	r3, [pc, #272]	; (80045d0 <SEGGER_SYSVIEW_Start+0x16c>)
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80044c2:	e00b      	b.n	80044dc <SEGGER_SYSVIEW_Start+0x78>
 80044c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c6:	1c5a      	adds	r2, r3, #1
 80044c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044cc:	b2d2      	uxtb	r2, r2
 80044ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044d2:	b2d2      	uxtb	r2, r2
 80044d4:	701a      	strb	r2, [r3, #0]
 80044d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d8:	09db      	lsrs	r3, r3, #7
 80044da:	62bb      	str	r3, [r7, #40]	; 0x28
 80044dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044de:	2b7f      	cmp	r3, #127	; 0x7f
 80044e0:	d8f0      	bhi.n	80044c4 <SEGGER_SYSVIEW_Start+0x60>
 80044e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e4:	1c5a      	adds	r2, r3, #1
 80044e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044ea:	b2d2      	uxtb	r2, r2
 80044ec:	701a      	strb	r2, [r3, #0]
 80044ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	627b      	str	r3, [r7, #36]	; 0x24
 80044f6:	4b36      	ldr	r3, [pc, #216]	; (80045d0 <SEGGER_SYSVIEW_Start+0x16c>)
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	623b      	str	r3, [r7, #32]
 80044fc:	e00b      	b.n	8004516 <SEGGER_SYSVIEW_Start+0xb2>
 80044fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004500:	1c5a      	adds	r2, r3, #1
 8004502:	627a      	str	r2, [r7, #36]	; 0x24
 8004504:	6a3a      	ldr	r2, [r7, #32]
 8004506:	b2d2      	uxtb	r2, r2
 8004508:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800450c:	b2d2      	uxtb	r2, r2
 800450e:	701a      	strb	r2, [r3, #0]
 8004510:	6a3b      	ldr	r3, [r7, #32]
 8004512:	09db      	lsrs	r3, r3, #7
 8004514:	623b      	str	r3, [r7, #32]
 8004516:	6a3b      	ldr	r3, [r7, #32]
 8004518:	2b7f      	cmp	r3, #127	; 0x7f
 800451a:	d8f0      	bhi.n	80044fe <SEGGER_SYSVIEW_Start+0x9a>
 800451c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451e:	1c5a      	adds	r2, r3, #1
 8004520:	627a      	str	r2, [r7, #36]	; 0x24
 8004522:	6a3a      	ldr	r2, [r7, #32]
 8004524:	b2d2      	uxtb	r2, r2
 8004526:	701a      	strb	r2, [r3, #0]
 8004528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	61fb      	str	r3, [r7, #28]
 8004530:	4b27      	ldr	r3, [pc, #156]	; (80045d0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	61bb      	str	r3, [r7, #24]
 8004536:	e00b      	b.n	8004550 <SEGGER_SYSVIEW_Start+0xec>
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	1c5a      	adds	r2, r3, #1
 800453c:	61fa      	str	r2, [r7, #28]
 800453e:	69ba      	ldr	r2, [r7, #24]
 8004540:	b2d2      	uxtb	r2, r2
 8004542:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004546:	b2d2      	uxtb	r2, r2
 8004548:	701a      	strb	r2, [r3, #0]
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	09db      	lsrs	r3, r3, #7
 800454e:	61bb      	str	r3, [r7, #24]
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	2b7f      	cmp	r3, #127	; 0x7f
 8004554:	d8f0      	bhi.n	8004538 <SEGGER_SYSVIEW_Start+0xd4>
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	1c5a      	adds	r2, r3, #1
 800455a:	61fa      	str	r2, [r7, #28]
 800455c:	69ba      	ldr	r2, [r7, #24]
 800455e:	b2d2      	uxtb	r2, r2
 8004560:	701a      	strb	r2, [r3, #0]
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	617b      	str	r3, [r7, #20]
 800456a:	2302      	movs	r3, #2
 800456c:	613b      	str	r3, [r7, #16]
 800456e:	e00b      	b.n	8004588 <SEGGER_SYSVIEW_Start+0x124>
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	1c5a      	adds	r2, r3, #1
 8004574:	617a      	str	r2, [r7, #20]
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	b2d2      	uxtb	r2, r2
 800457a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800457e:	b2d2      	uxtb	r2, r2
 8004580:	701a      	strb	r2, [r3, #0]
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	09db      	lsrs	r3, r3, #7
 8004586:	613b      	str	r3, [r7, #16]
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	2b7f      	cmp	r3, #127	; 0x7f
 800458c:	d8f0      	bhi.n	8004570 <SEGGER_SYSVIEW_Start+0x10c>
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	1c5a      	adds	r2, r3, #1
 8004592:	617a      	str	r2, [r7, #20]
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	b2d2      	uxtb	r2, r2
 8004598:	701a      	strb	r2, [r3, #0]
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	6839      	ldr	r1, [r7, #0]
 80045a2:	2218      	movs	r2, #24
 80045a4:	f7ff fd9a 	bl	80040dc <_SendPacket>
      RECORD_END();
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80045ae:	4b08      	ldr	r3, [pc, #32]	; (80045d0 <SEGGER_SYSVIEW_Start+0x16c>)
 80045b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d002      	beq.n	80045bc <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 80045b6:	4b06      	ldr	r3, [pc, #24]	; (80045d0 <SEGGER_SYSVIEW_Start+0x16c>)
 80045b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ba:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80045bc:	f000 f9e4 	bl	8004988 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80045c0:	f000 f9ae 	bl	8004920 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80045c4:	f000 fc5e 	bl	8004e84 <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 80045c8:	3730      	adds	r7, #48	; 0x30
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	20002988 	.word	0x20002988
 80045d4:	080053c8 	.word	0x080053c8
 80045d8:	200029b8 	.word	0x200029b8

080045dc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80045e2:	f3ef 8311 	mrs	r3, BASEPRI
 80045e6:	f04f 0120 	mov.w	r1, #32
 80045ea:	f381 8811 	msr	BASEPRI, r1
 80045ee:	607b      	str	r3, [r7, #4]
 80045f0:	480a      	ldr	r0, [pc, #40]	; (800461c <SEGGER_SYSVIEW_Stop+0x40>)
 80045f2:	f7ff fc9f 	bl	8003f34 <_PreparePacket>
 80045f6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80045f8:	4b09      	ldr	r3, [pc, #36]	; (8004620 <SEGGER_SYSVIEW_Stop+0x44>)
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d007      	beq.n	8004610 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004600:	6838      	ldr	r0, [r7, #0]
 8004602:	6839      	ldr	r1, [r7, #0]
 8004604:	220b      	movs	r2, #11
 8004606:	f7ff fd69 	bl	80040dc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800460a:	4b05      	ldr	r3, [pc, #20]	; (8004620 <SEGGER_SYSVIEW_Stop+0x44>)
 800460c:	2200      	movs	r2, #0
 800460e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f383 8811 	msr	BASEPRI, r3
}
 8004616:	3708      	adds	r7, #8
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	200029b8 	.word	0x200029b8
 8004620:	20002988 	.word	0x20002988

08004624 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004624:	b580      	push	{r7, lr}
 8004626:	b08c      	sub	sp, #48	; 0x30
 8004628:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800462a:	f3ef 8311 	mrs	r3, BASEPRI
 800462e:	f04f 0120 	mov.w	r1, #32
 8004632:	f381 8811 	msr	BASEPRI, r1
 8004636:	60fb      	str	r3, [r7, #12]
 8004638:	4845      	ldr	r0, [pc, #276]	; (8004750 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800463a:	f7ff fc7b 	bl	8003f34 <_PreparePacket>
 800463e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004648:	4b42      	ldr	r3, [pc, #264]	; (8004754 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	62bb      	str	r3, [r7, #40]	; 0x28
 800464e:	e00b      	b.n	8004668 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004652:	1c5a      	adds	r2, r3, #1
 8004654:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004656:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004658:	b2d2      	uxtb	r2, r2
 800465a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800465e:	b2d2      	uxtb	r2, r2
 8004660:	701a      	strb	r2, [r3, #0]
 8004662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004664:	09db      	lsrs	r3, r3, #7
 8004666:	62bb      	str	r3, [r7, #40]	; 0x28
 8004668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466a:	2b7f      	cmp	r3, #127	; 0x7f
 800466c:	d8f0      	bhi.n	8004650 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800466e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004670:	1c5a      	adds	r2, r3, #1
 8004672:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004674:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004676:	b2d2      	uxtb	r2, r2
 8004678:	701a      	strb	r2, [r3, #0]
 800467a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800467c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	627b      	str	r3, [r7, #36]	; 0x24
 8004682:	4b34      	ldr	r3, [pc, #208]	; (8004754 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	623b      	str	r3, [r7, #32]
 8004688:	e00b      	b.n	80046a2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468c:	1c5a      	adds	r2, r3, #1
 800468e:	627a      	str	r2, [r7, #36]	; 0x24
 8004690:	6a3a      	ldr	r2, [r7, #32]
 8004692:	b2d2      	uxtb	r2, r2
 8004694:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004698:	b2d2      	uxtb	r2, r2
 800469a:	701a      	strb	r2, [r3, #0]
 800469c:	6a3b      	ldr	r3, [r7, #32]
 800469e:	09db      	lsrs	r3, r3, #7
 80046a0:	623b      	str	r3, [r7, #32]
 80046a2:	6a3b      	ldr	r3, [r7, #32]
 80046a4:	2b7f      	cmp	r3, #127	; 0x7f
 80046a6:	d8f0      	bhi.n	800468a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	1c5a      	adds	r2, r3, #1
 80046ac:	627a      	str	r2, [r7, #36]	; 0x24
 80046ae:	6a3a      	ldr	r2, [r7, #32]
 80046b0:	b2d2      	uxtb	r2, r2
 80046b2:	701a      	strb	r2, [r3, #0]
 80046b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	61fb      	str	r3, [r7, #28]
 80046bc:	4b25      	ldr	r3, [pc, #148]	; (8004754 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	61bb      	str	r3, [r7, #24]
 80046c2:	e00b      	b.n	80046dc <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	1c5a      	adds	r2, r3, #1
 80046c8:	61fa      	str	r2, [r7, #28]
 80046ca:	69ba      	ldr	r2, [r7, #24]
 80046cc:	b2d2      	uxtb	r2, r2
 80046ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046d2:	b2d2      	uxtb	r2, r2
 80046d4:	701a      	strb	r2, [r3, #0]
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	09db      	lsrs	r3, r3, #7
 80046da:	61bb      	str	r3, [r7, #24]
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	2b7f      	cmp	r3, #127	; 0x7f
 80046e0:	d8f0      	bhi.n	80046c4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	1c5a      	adds	r2, r3, #1
 80046e6:	61fa      	str	r2, [r7, #28]
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	b2d2      	uxtb	r2, r2
 80046ec:	701a      	strb	r2, [r3, #0]
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	617b      	str	r3, [r7, #20]
 80046f6:	2302      	movs	r3, #2
 80046f8:	613b      	str	r3, [r7, #16]
 80046fa:	e00b      	b.n	8004714 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	1c5a      	adds	r2, r3, #1
 8004700:	617a      	str	r2, [r7, #20]
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	b2d2      	uxtb	r2, r2
 8004706:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800470a:	b2d2      	uxtb	r2, r2
 800470c:	701a      	strb	r2, [r3, #0]
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	09db      	lsrs	r3, r3, #7
 8004712:	613b      	str	r3, [r7, #16]
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	2b7f      	cmp	r3, #127	; 0x7f
 8004718:	d8f0      	bhi.n	80046fc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	1c5a      	adds	r2, r3, #1
 800471e:	617a      	str	r2, [r7, #20]
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	b2d2      	uxtb	r2, r2
 8004724:	701a      	strb	r2, [r3, #0]
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800472a:	68b8      	ldr	r0, [r7, #8]
 800472c:	6879      	ldr	r1, [r7, #4]
 800472e:	2218      	movs	r2, #24
 8004730:	f7ff fcd4 	bl	80040dc <_SendPacket>
  RECORD_END();
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800473a:	4b06      	ldr	r3, [pc, #24]	; (8004754 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800473c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473e:	2b00      	cmp	r3, #0
 8004740:	d002      	beq.n	8004748 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004742:	4b04      	ldr	r3, [pc, #16]	; (8004754 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004746:	4798      	blx	r3
  }
}
 8004748:	3730      	adds	r7, #48	; 0x30
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	200029b8 	.word	0x200029b8
 8004754:	20002988 	.word	0x20002988

08004758 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004758:	b580      	push	{r7, lr}
 800475a:	b092      	sub	sp, #72	; 0x48
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004760:	f3ef 8311 	mrs	r3, BASEPRI
 8004764:	f04f 0120 	mov.w	r1, #32
 8004768:	f381 8811 	msr	BASEPRI, r1
 800476c:	617b      	str	r3, [r7, #20]
 800476e:	486a      	ldr	r0, [pc, #424]	; (8004918 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004770:	f7ff fbe0 	bl	8003f34 <_PreparePacket>
 8004774:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	647b      	str	r3, [r7, #68]	; 0x44
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	4b66      	ldr	r3, [pc, #408]	; (800491c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	089b      	lsrs	r3, r3, #2
 800478a:	643b      	str	r3, [r7, #64]	; 0x40
 800478c:	e00b      	b.n	80047a6 <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 800478e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004790:	1c5a      	adds	r2, r3, #1
 8004792:	647a      	str	r2, [r7, #68]	; 0x44
 8004794:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004796:	b2d2      	uxtb	r2, r2
 8004798:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800479c:	b2d2      	uxtb	r2, r2
 800479e:	701a      	strb	r2, [r3, #0]
 80047a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047a2:	09db      	lsrs	r3, r3, #7
 80047a4:	643b      	str	r3, [r7, #64]	; 0x40
 80047a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047a8:	2b7f      	cmp	r3, #127	; 0x7f
 80047aa:	d8f0      	bhi.n	800478e <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 80047ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047ae:	1c5a      	adds	r2, r3, #1
 80047b0:	647a      	str	r2, [r7, #68]	; 0x44
 80047b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047b4:	b2d2      	uxtb	r2, r2
 80047b6:	701a      	strb	r2, [r3, #0]
 80047b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047ba:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80047c6:	e00b      	b.n	80047e0 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 80047c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ca:	1c5a      	adds	r2, r3, #1
 80047cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80047ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047d0:	b2d2      	uxtb	r2, r2
 80047d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047d6:	b2d2      	uxtb	r2, r2
 80047d8:	701a      	strb	r2, [r3, #0]
 80047da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047dc:	09db      	lsrs	r3, r3, #7
 80047de:	63bb      	str	r3, [r7, #56]	; 0x38
 80047e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e2:	2b7f      	cmp	r3, #127	; 0x7f
 80047e4:	d8f0      	bhi.n	80047c8 <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 80047e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047e8:	1c5a      	adds	r2, r3, #1
 80047ea:	63fa      	str	r2, [r7, #60]	; 0x3c
 80047ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047ee:	b2d2      	uxtb	r2, r2
 80047f0:	701a      	strb	r2, [r3, #0]
 80047f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047f4:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	4619      	mov	r1, r3
 80047fe:	2220      	movs	r2, #32
 8004800:	f7ff fb4a 	bl	8003e98 <_EncodeStr>
 8004804:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004806:	6938      	ldr	r0, [r7, #16]
 8004808:	68f9      	ldr	r1, [r7, #12]
 800480a:	2209      	movs	r2, #9
 800480c:	f7ff fc66 	bl	80040dc <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	637b      	str	r3, [r7, #52]	; 0x34
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	4b3f      	ldr	r3, [pc, #252]	; (800491c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	089b      	lsrs	r3, r3, #2
 8004824:	633b      	str	r3, [r7, #48]	; 0x30
 8004826:	e00b      	b.n	8004840 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 8004828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800482a:	1c5a      	adds	r2, r3, #1
 800482c:	637a      	str	r2, [r7, #52]	; 0x34
 800482e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004830:	b2d2      	uxtb	r2, r2
 8004832:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004836:	b2d2      	uxtb	r2, r2
 8004838:	701a      	strb	r2, [r3, #0]
 800483a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483c:	09db      	lsrs	r3, r3, #7
 800483e:	633b      	str	r3, [r7, #48]	; 0x30
 8004840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004842:	2b7f      	cmp	r3, #127	; 0x7f
 8004844:	d8f0      	bhi.n	8004828 <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 8004846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004848:	1c5a      	adds	r2, r3, #1
 800484a:	637a      	str	r2, [r7, #52]	; 0x34
 800484c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800484e:	b2d2      	uxtb	r2, r2
 8004850:	701a      	strb	r2, [r3, #0]
 8004852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004854:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	62fb      	str	r3, [r7, #44]	; 0x2c
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004860:	e00b      	b.n	800487a <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 8004862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004864:	1c5a      	adds	r2, r3, #1
 8004866:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004868:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800486a:	b2d2      	uxtb	r2, r2
 800486c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004870:	b2d2      	uxtb	r2, r2
 8004872:	701a      	strb	r2, [r3, #0]
 8004874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004876:	09db      	lsrs	r3, r3, #7
 8004878:	62bb      	str	r3, [r7, #40]	; 0x28
 800487a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487c:	2b7f      	cmp	r3, #127	; 0x7f
 800487e:	d8f0      	bhi.n	8004862 <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 8004880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004882:	1c5a      	adds	r2, r3, #1
 8004884:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004886:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004888:	b2d2      	uxtb	r2, r2
 800488a:	701a      	strb	r2, [r3, #0]
 800488c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800488e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	627b      	str	r3, [r7, #36]	; 0x24
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	623b      	str	r3, [r7, #32]
 800489a:	e00b      	b.n	80048b4 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 800489c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489e:	1c5a      	adds	r2, r3, #1
 80048a0:	627a      	str	r2, [r7, #36]	; 0x24
 80048a2:	6a3a      	ldr	r2, [r7, #32]
 80048a4:	b2d2      	uxtb	r2, r2
 80048a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048aa:	b2d2      	uxtb	r2, r2
 80048ac:	701a      	strb	r2, [r3, #0]
 80048ae:	6a3b      	ldr	r3, [r7, #32]
 80048b0:	09db      	lsrs	r3, r3, #7
 80048b2:	623b      	str	r3, [r7, #32]
 80048b4:	6a3b      	ldr	r3, [r7, #32]
 80048b6:	2b7f      	cmp	r3, #127	; 0x7f
 80048b8:	d8f0      	bhi.n	800489c <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 80048ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048bc:	1c5a      	adds	r2, r3, #1
 80048be:	627a      	str	r2, [r7, #36]	; 0x24
 80048c0:	6a3a      	ldr	r2, [r7, #32]
 80048c2:	b2d2      	uxtb	r2, r2
 80048c4:	701a      	strb	r2, [r3, #0]
 80048c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	61fb      	str	r3, [r7, #28]
 80048ce:	2300      	movs	r3, #0
 80048d0:	61bb      	str	r3, [r7, #24]
 80048d2:	e00b      	b.n	80048ec <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	1c5a      	adds	r2, r3, #1
 80048d8:	61fa      	str	r2, [r7, #28]
 80048da:	69ba      	ldr	r2, [r7, #24]
 80048dc:	b2d2      	uxtb	r2, r2
 80048de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048e2:	b2d2      	uxtb	r2, r2
 80048e4:	701a      	strb	r2, [r3, #0]
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	09db      	lsrs	r3, r3, #7
 80048ea:	61bb      	str	r3, [r7, #24]
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	2b7f      	cmp	r3, #127	; 0x7f
 80048f0:	d8f0      	bhi.n	80048d4 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	1c5a      	adds	r2, r3, #1
 80048f6:	61fa      	str	r2, [r7, #28]
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	b2d2      	uxtb	r2, r2
 80048fc:	701a      	strb	r2, [r3, #0]
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004902:	6938      	ldr	r0, [r7, #16]
 8004904:	68f9      	ldr	r1, [r7, #12]
 8004906:	2215      	movs	r2, #21
 8004908:	f7ff fbe8 	bl	80040dc <_SendPacket>
  RECORD_END();
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	f383 8811 	msr	BASEPRI, r3
}
 8004912:	3748      	adds	r7, #72	; 0x48
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	200029b8 	.word	0x200029b8
 800491c:	20002988 	.word	0x20002988

08004920 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004920:	b580      	push	{r7, lr}
 8004922:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004924:	4b06      	ldr	r3, [pc, #24]	; (8004940 <SEGGER_SYSVIEW_SendTaskList+0x20>)
 8004926:	6a1b      	ldr	r3, [r3, #32]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d008      	beq.n	800493e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800492c:	4b04      	ldr	r3, [pc, #16]	; (8004940 <SEGGER_SYSVIEW_SendTaskList+0x20>)
 800492e:	6a1b      	ldr	r3, [r3, #32]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004936:	4b02      	ldr	r3, [pc, #8]	; (8004940 <SEGGER_SYSVIEW_SendTaskList+0x20>)
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	4798      	blx	r3
  }
}
 800493e:	bd80      	pop	{r7, pc}
 8004940:	20002988 	.word	0x20002988

08004944 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004944:	b580      	push	{r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800494c:	f3ef 8311 	mrs	r3, BASEPRI
 8004950:	f04f 0120 	mov.w	r1, #32
 8004954:	f381 8811 	msr	BASEPRI, r1
 8004958:	617b      	str	r3, [r7, #20]
 800495a:	480a      	ldr	r0, [pc, #40]	; (8004984 <SEGGER_SYSVIEW_SendSysDesc+0x40>)
 800495c:	f7ff faea 	bl	8003f34 <_PreparePacket>
 8004960:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004962:	6938      	ldr	r0, [r7, #16]
 8004964:	6879      	ldr	r1, [r7, #4]
 8004966:	2280      	movs	r2, #128	; 0x80
 8004968:	f7ff fa96 	bl	8003e98 <_EncodeStr>
 800496c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800496e:	6938      	ldr	r0, [r7, #16]
 8004970:	68f9      	ldr	r1, [r7, #12]
 8004972:	220e      	movs	r2, #14
 8004974:	f7ff fbb2 	bl	80040dc <_SendPacket>
  RECORD_END();
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	f383 8811 	msr	BASEPRI, r3
}
 800497e:	3718      	adds	r7, #24
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	200029b8 	.word	0x200029b8

08004988 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004988:	b5b0      	push	{r4, r5, r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800498e:	4b11      	ldr	r3, [pc, #68]	; (80049d4 <SEGGER_SYSVIEW_RecordSystime+0x4c>)
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d015      	beq.n	80049c2 <SEGGER_SYSVIEW_RecordSystime+0x3a>
 8004996:	4b0f      	ldr	r3, [pc, #60]	; (80049d4 <SEGGER_SYSVIEW_RecordSystime+0x4c>)
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d010      	beq.n	80049c2 <SEGGER_SYSVIEW_RecordSystime+0x3a>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80049a0:	4b0c      	ldr	r3, [pc, #48]	; (80049d4 <SEGGER_SYSVIEW_RecordSystime+0x4c>)
 80049a2:	6a1b      	ldr	r3, [r3, #32]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4798      	blx	r3
 80049a8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80049ac:	6839      	ldr	r1, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80049ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049b2:	001c      	movs	r4, r3
 80049b4:	2500      	movs	r5, #0
void SEGGER_SYSVIEW_RecordSystime(void) {
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80049b6:	4623      	mov	r3, r4
 80049b8:	200d      	movs	r0, #13
 80049ba:	461a      	mov	r2, r3
 80049bc:	f7ff fcfa 	bl	80043b4 <SEGGER_SYSVIEW_RecordU32x2>
 80049c0:	e005      	b.n	80049ce <SEGGER_SYSVIEW_RecordSystime+0x46>
                               (U32)(Systime),
                               (U32)(Systime >> 32));
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80049c2:	4b05      	ldr	r3, [pc, #20]	; (80049d8 <SEGGER_SYSVIEW_RecordSystime+0x50>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	200c      	movs	r0, #12
 80049c8:	4619      	mov	r1, r3
 80049ca:	f7ff fcb7 	bl	800433c <SEGGER_SYSVIEW_RecordU32>
  }
}
 80049ce:	3708      	adds	r7, #8
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bdb0      	pop	{r4, r5, r7, pc}
 80049d4:	20002988 	.word	0x20002988
 80049d8:	e0001004 	.word	0xe0001004

080049dc <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80049dc:	b580      	push	{r7, lr}
 80049de:	b086      	sub	sp, #24
 80049e0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80049e2:	f3ef 8311 	mrs	r3, BASEPRI
 80049e6:	f04f 0120 	mov.w	r1, #32
 80049ea:	f381 8811 	msr	BASEPRI, r1
 80049ee:	60fb      	str	r3, [r7, #12]
 80049f0:	4818      	ldr	r0, [pc, #96]	; (8004a54 <SEGGER_SYSVIEW_RecordEnterISR+0x78>)
 80049f2:	f7ff fa9f 	bl	8003f34 <_PreparePacket>
 80049f6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80049fc:	4b16      	ldr	r3, [pc, #88]	; (8004a58 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a04:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	617b      	str	r3, [r7, #20]
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	613b      	str	r3, [r7, #16]
 8004a0e:	e00b      	b.n	8004a28 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	1c5a      	adds	r2, r3, #1
 8004a14:	617a      	str	r2, [r7, #20]
 8004a16:	693a      	ldr	r2, [r7, #16]
 8004a18:	b2d2      	uxtb	r2, r2
 8004a1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a1e:	b2d2      	uxtb	r2, r2
 8004a20:	701a      	strb	r2, [r3, #0]
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	09db      	lsrs	r3, r3, #7
 8004a26:	613b      	str	r3, [r7, #16]
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	2b7f      	cmp	r3, #127	; 0x7f
 8004a2c:	d8f0      	bhi.n	8004a10 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	1c5a      	adds	r2, r3, #1
 8004a32:	617a      	str	r2, [r7, #20]
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	b2d2      	uxtb	r2, r2
 8004a38:	701a      	strb	r2, [r3, #0]
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004a3e:	68b8      	ldr	r0, [r7, #8]
 8004a40:	6879      	ldr	r1, [r7, #4]
 8004a42:	2202      	movs	r2, #2
 8004a44:	f7ff fb4a 	bl	80040dc <_SendPacket>
  RECORD_END();
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f383 8811 	msr	BASEPRI, r3
}
 8004a4e:	3718      	adds	r7, #24
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	200029b8 	.word	0x200029b8
 8004a58:	e000ed04 	.word	0xe000ed04

08004a5c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004a62:	f3ef 8311 	mrs	r3, BASEPRI
 8004a66:	f04f 0120 	mov.w	r1, #32
 8004a6a:	f381 8811 	msr	BASEPRI, r1
 8004a6e:	607b      	str	r3, [r7, #4]
 8004a70:	4807      	ldr	r0, [pc, #28]	; (8004a90 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004a72:	f7ff fa5f 	bl	8003f34 <_PreparePacket>
 8004a76:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004a78:	6838      	ldr	r0, [r7, #0]
 8004a7a:	6839      	ldr	r1, [r7, #0]
 8004a7c:	2203      	movs	r2, #3
 8004a7e:	f7ff fb2d 	bl	80040dc <_SendPacket>
  RECORD_END();
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f383 8811 	msr	BASEPRI, r3
}
 8004a88:	3708      	adds	r7, #8
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	200029b8 	.word	0x200029b8

08004a94 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004a9a:	f3ef 8311 	mrs	r3, BASEPRI
 8004a9e:	f04f 0120 	mov.w	r1, #32
 8004aa2:	f381 8811 	msr	BASEPRI, r1
 8004aa6:	607b      	str	r3, [r7, #4]
 8004aa8:	4807      	ldr	r0, [pc, #28]	; (8004ac8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004aaa:	f7ff fa43 	bl	8003f34 <_PreparePacket>
 8004aae:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004ab0:	6838      	ldr	r0, [r7, #0]
 8004ab2:	6839      	ldr	r1, [r7, #0]
 8004ab4:	2212      	movs	r2, #18
 8004ab6:	f7ff fb11 	bl	80040dc <_SendPacket>
  RECORD_END();
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f383 8811 	msr	BASEPRI, r3
}
 8004ac0:	3708      	adds	r7, #8
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	200029b8 	.word	0x200029b8

08004acc <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004ad2:	f3ef 8311 	mrs	r3, BASEPRI
 8004ad6:	f04f 0120 	mov.w	r1, #32
 8004ada:	f381 8811 	msr	BASEPRI, r1
 8004ade:	607b      	str	r3, [r7, #4]
 8004ae0:	4807      	ldr	r0, [pc, #28]	; (8004b00 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004ae2:	f7ff fa27 	bl	8003f34 <_PreparePacket>
 8004ae6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004ae8:	6838      	ldr	r0, [r7, #0]
 8004aea:	6839      	ldr	r1, [r7, #0]
 8004aec:	2211      	movs	r2, #17
 8004aee:	f7ff faf5 	bl	80040dc <_SendPacket>
  RECORD_END();
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f383 8811 	msr	BASEPRI, r3
}
 8004af8:	3708      	adds	r7, #8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	200029b8 	.word	0x200029b8

08004b04 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b088      	sub	sp, #32
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004b0c:	f3ef 8311 	mrs	r3, BASEPRI
 8004b10:	f04f 0120 	mov.w	r1, #32
 8004b14:	f381 8811 	msr	BASEPRI, r1
 8004b18:	617b      	str	r3, [r7, #20]
 8004b1a:	4819      	ldr	r0, [pc, #100]	; (8004b80 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004b1c:	f7ff fa0a 	bl	8003f34 <_PreparePacket>
 8004b20:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004b26:	4b17      	ldr	r3, [pc, #92]	; (8004b84 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	089b      	lsrs	r3, r3, #2
 8004b30:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	61fb      	str	r3, [r7, #28]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	61bb      	str	r3, [r7, #24]
 8004b3a:	e00b      	b.n	8004b54 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	1c5a      	adds	r2, r3, #1
 8004b40:	61fa      	str	r2, [r7, #28]
 8004b42:	69ba      	ldr	r2, [r7, #24]
 8004b44:	b2d2      	uxtb	r2, r2
 8004b46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b4a:	b2d2      	uxtb	r2, r2
 8004b4c:	701a      	strb	r2, [r3, #0]
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	09db      	lsrs	r3, r3, #7
 8004b52:	61bb      	str	r3, [r7, #24]
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	2b7f      	cmp	r3, #127	; 0x7f
 8004b58:	d8f0      	bhi.n	8004b3c <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	1c5a      	adds	r2, r3, #1
 8004b5e:	61fa      	str	r2, [r7, #28]
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	b2d2      	uxtb	r2, r2
 8004b64:	701a      	strb	r2, [r3, #0]
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004b6a:	6938      	ldr	r0, [r7, #16]
 8004b6c:	68f9      	ldr	r1, [r7, #12]
 8004b6e:	2208      	movs	r2, #8
 8004b70:	f7ff fab4 	bl	80040dc <_SendPacket>
  RECORD_END();
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	f383 8811 	msr	BASEPRI, r3
}
 8004b7a:	3720      	adds	r7, #32
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	200029b8 	.word	0x200029b8
 8004b84:	20002988 	.word	0x20002988

08004b88 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b088      	sub	sp, #32
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004b90:	f3ef 8311 	mrs	r3, BASEPRI
 8004b94:	f04f 0120 	mov.w	r1, #32
 8004b98:	f381 8811 	msr	BASEPRI, r1
 8004b9c:	617b      	str	r3, [r7, #20]
 8004b9e:	4819      	ldr	r0, [pc, #100]	; (8004c04 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004ba0:	f7ff f9c8 	bl	8003f34 <_PreparePacket>
 8004ba4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004baa:	4b17      	ldr	r3, [pc, #92]	; (8004c08 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	089b      	lsrs	r3, r3, #2
 8004bb4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	61fb      	str	r3, [r7, #28]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	61bb      	str	r3, [r7, #24]
 8004bbe:	e00b      	b.n	8004bd8 <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	1c5a      	adds	r2, r3, #1
 8004bc4:	61fa      	str	r2, [r7, #28]
 8004bc6:	69ba      	ldr	r2, [r7, #24]
 8004bc8:	b2d2      	uxtb	r2, r2
 8004bca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bce:	b2d2      	uxtb	r2, r2
 8004bd0:	701a      	strb	r2, [r3, #0]
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	09db      	lsrs	r3, r3, #7
 8004bd6:	61bb      	str	r3, [r7, #24]
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	2b7f      	cmp	r3, #127	; 0x7f
 8004bdc:	d8f0      	bhi.n	8004bc0 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	1c5a      	adds	r2, r3, #1
 8004be2:	61fa      	str	r2, [r7, #28]
 8004be4:	69ba      	ldr	r2, [r7, #24]
 8004be6:	b2d2      	uxtb	r2, r2
 8004be8:	701a      	strb	r2, [r3, #0]
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004bee:	6938      	ldr	r0, [r7, #16]
 8004bf0:	68f9      	ldr	r1, [r7, #12]
 8004bf2:	2204      	movs	r2, #4
 8004bf4:	f7ff fa72 	bl	80040dc <_SendPacket>
  RECORD_END();
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	f383 8811 	msr	BASEPRI, r3
}
 8004bfe:	3720      	adds	r7, #32
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	200029b8 	.word	0x200029b8
 8004c08:	20002988 	.word	0x20002988

08004c0c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b088      	sub	sp, #32
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004c14:	f3ef 8311 	mrs	r3, BASEPRI
 8004c18:	f04f 0120 	mov.w	r1, #32
 8004c1c:	f381 8811 	msr	BASEPRI, r1
 8004c20:	617b      	str	r3, [r7, #20]
 8004c22:	4819      	ldr	r0, [pc, #100]	; (8004c88 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004c24:	f7ff f986 	bl	8003f34 <_PreparePacket>
 8004c28:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004c2e:	4b17      	ldr	r3, [pc, #92]	; (8004c8c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	089b      	lsrs	r3, r3, #2
 8004c38:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	61fb      	str	r3, [r7, #28]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	61bb      	str	r3, [r7, #24]
 8004c42:	e00b      	b.n	8004c5c <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	1c5a      	adds	r2, r3, #1
 8004c48:	61fa      	str	r2, [r7, #28]
 8004c4a:	69ba      	ldr	r2, [r7, #24]
 8004c4c:	b2d2      	uxtb	r2, r2
 8004c4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c52:	b2d2      	uxtb	r2, r2
 8004c54:	701a      	strb	r2, [r3, #0]
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	09db      	lsrs	r3, r3, #7
 8004c5a:	61bb      	str	r3, [r7, #24]
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	2b7f      	cmp	r3, #127	; 0x7f
 8004c60:	d8f0      	bhi.n	8004c44 <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	1c5a      	adds	r2, r3, #1
 8004c66:	61fa      	str	r2, [r7, #28]
 8004c68:	69ba      	ldr	r2, [r7, #24]
 8004c6a:	b2d2      	uxtb	r2, r2
 8004c6c:	701a      	strb	r2, [r3, #0]
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004c72:	6938      	ldr	r0, [r7, #16]
 8004c74:	68f9      	ldr	r1, [r7, #12]
 8004c76:	2206      	movs	r2, #6
 8004c78:	f7ff fa30 	bl	80040dc <_SendPacket>
  RECORD_END();
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	f383 8811 	msr	BASEPRI, r3
}
 8004c82:	3720      	adds	r7, #32
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	200029b8 	.word	0x200029b8
 8004c8c:	20002988 	.word	0x20002988

08004c90 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b08a      	sub	sp, #40	; 0x28
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004c9a:	f3ef 8311 	mrs	r3, BASEPRI
 8004c9e:	f04f 0120 	mov.w	r1, #32
 8004ca2:	f381 8811 	msr	BASEPRI, r1
 8004ca6:	617b      	str	r3, [r7, #20]
 8004ca8:	4827      	ldr	r0, [pc, #156]	; (8004d48 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8004caa:	f7ff f943 	bl	8003f34 <_PreparePacket>
 8004cae:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004cb4:	4b25      	ldr	r3, [pc, #148]	; (8004d4c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	089b      	lsrs	r3, r3, #2
 8004cbe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	623b      	str	r3, [r7, #32]
 8004cc8:	e00b      	b.n	8004ce2 <SEGGER_SYSVIEW_OnTaskStopReady+0x52>
 8004cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ccc:	1c5a      	adds	r2, r3, #1
 8004cce:	627a      	str	r2, [r7, #36]	; 0x24
 8004cd0:	6a3a      	ldr	r2, [r7, #32]
 8004cd2:	b2d2      	uxtb	r2, r2
 8004cd4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cd8:	b2d2      	uxtb	r2, r2
 8004cda:	701a      	strb	r2, [r3, #0]
 8004cdc:	6a3b      	ldr	r3, [r7, #32]
 8004cde:	09db      	lsrs	r3, r3, #7
 8004ce0:	623b      	str	r3, [r7, #32]
 8004ce2:	6a3b      	ldr	r3, [r7, #32]
 8004ce4:	2b7f      	cmp	r3, #127	; 0x7f
 8004ce6:	d8f0      	bhi.n	8004cca <SEGGER_SYSVIEW_OnTaskStopReady+0x3a>
 8004ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cea:	1c5a      	adds	r2, r3, #1
 8004cec:	627a      	str	r2, [r7, #36]	; 0x24
 8004cee:	6a3a      	ldr	r2, [r7, #32]
 8004cf0:	b2d2      	uxtb	r2, r2
 8004cf2:	701a      	strb	r2, [r3, #0]
 8004cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	61fb      	str	r3, [r7, #28]
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	61bb      	str	r3, [r7, #24]
 8004d00:	e00b      	b.n	8004d1a <SEGGER_SYSVIEW_OnTaskStopReady+0x8a>
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	1c5a      	adds	r2, r3, #1
 8004d06:	61fa      	str	r2, [r7, #28]
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	b2d2      	uxtb	r2, r2
 8004d0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d10:	b2d2      	uxtb	r2, r2
 8004d12:	701a      	strb	r2, [r3, #0]
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	09db      	lsrs	r3, r3, #7
 8004d18:	61bb      	str	r3, [r7, #24]
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	2b7f      	cmp	r3, #127	; 0x7f
 8004d1e:	d8f0      	bhi.n	8004d02 <SEGGER_SYSVIEW_OnTaskStopReady+0x72>
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	1c5a      	adds	r2, r3, #1
 8004d24:	61fa      	str	r2, [r7, #28]
 8004d26:	69ba      	ldr	r2, [r7, #24]
 8004d28:	b2d2      	uxtb	r2, r2
 8004d2a:	701a      	strb	r2, [r3, #0]
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8004d30:	6938      	ldr	r0, [r7, #16]
 8004d32:	68f9      	ldr	r1, [r7, #12]
 8004d34:	2207      	movs	r2, #7
 8004d36:	f7ff f9d1 	bl	80040dc <_SendPacket>
  RECORD_END();
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	f383 8811 	msr	BASEPRI, r3
}
 8004d40:	3728      	adds	r7, #40	; 0x28
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	200029b8 	.word	0x200029b8
 8004d4c:	20002988 	.word	0x20002988

08004d50 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b08c      	sub	sp, #48	; 0x30
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	4603      	mov	r3, r0
 8004d58:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004d5a:	4b3a      	ldr	r3, [pc, #232]	; (8004e44 <SEGGER_SYSVIEW_SendModule+0xf4>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d06c      	beq.n	8004e3c <SEGGER_SYSVIEW_SendModule+0xec>
    pModule = _pFirstModule;
 8004d62:	4b38      	ldr	r3, [pc, #224]	; (8004e44 <SEGGER_SYSVIEW_SendModule+0xf4>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004d68:	2300      	movs	r3, #0
 8004d6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d6c:	e009      	b.n	8004d82 <SEGGER_SYSVIEW_SendModule+0x32>
      pModule = pModule->pNext;
 8004d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8004d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d100      	bne.n	8004d7c <SEGGER_SYSVIEW_SendModule+0x2c>
        break;
 8004d7a:	e006      	b.n	8004d8a <SEGGER_SYSVIEW_SendModule+0x3a>
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
    pModule = _pFirstModule;
    for (n = 0; n < ModuleId; n++) {
 8004d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7e:	3301      	adds	r3, #1
 8004d80:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d82:	79fa      	ldrb	r2, [r7, #7]
 8004d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d8f1      	bhi.n	8004d6e <SEGGER_SYSVIEW_SendModule+0x1e>
      pModule = pModule->pNext;
      if (pModule == 0) {
        break;
      }
    }
    if (pModule != 0) {
 8004d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d055      	beq.n	8004e3c <SEGGER_SYSVIEW_SendModule+0xec>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004d90:	f3ef 8311 	mrs	r3, BASEPRI
 8004d94:	f04f 0120 	mov.w	r1, #32
 8004d98:	f381 8811 	msr	BASEPRI, r1
 8004d9c:	617b      	str	r3, [r7, #20]
 8004d9e:	482a      	ldr	r0, [pc, #168]	; (8004e48 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004da0:	f7ff f8c8 	bl	8003f34 <_PreparePacket>
 8004da4:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	627b      	str	r3, [r7, #36]	; 0x24
 8004dae:	79fb      	ldrb	r3, [r7, #7]
 8004db0:	623b      	str	r3, [r7, #32]
 8004db2:	e00b      	b.n	8004dcc <SEGGER_SYSVIEW_SendModule+0x7c>
 8004db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db6:	1c5a      	adds	r2, r3, #1
 8004db8:	627a      	str	r2, [r7, #36]	; 0x24
 8004dba:	6a3a      	ldr	r2, [r7, #32]
 8004dbc:	b2d2      	uxtb	r2, r2
 8004dbe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dc2:	b2d2      	uxtb	r2, r2
 8004dc4:	701a      	strb	r2, [r3, #0]
 8004dc6:	6a3b      	ldr	r3, [r7, #32]
 8004dc8:	09db      	lsrs	r3, r3, #7
 8004dca:	623b      	str	r3, [r7, #32]
 8004dcc:	6a3b      	ldr	r3, [r7, #32]
 8004dce:	2b7f      	cmp	r3, #127	; 0x7f
 8004dd0:	d8f0      	bhi.n	8004db4 <SEGGER_SYSVIEW_SendModule+0x64>
 8004dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd4:	1c5a      	adds	r2, r3, #1
 8004dd6:	627a      	str	r2, [r7, #36]	; 0x24
 8004dd8:	6a3a      	ldr	r2, [r7, #32]
 8004dda:	b2d2      	uxtb	r2, r2
 8004ddc:	701a      	strb	r2, [r3, #0]
 8004dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de0:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	61fb      	str	r3, [r7, #28]
 8004de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	61bb      	str	r3, [r7, #24]
 8004dec:	e00b      	b.n	8004e06 <SEGGER_SYSVIEW_SendModule+0xb6>
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	1c5a      	adds	r2, r3, #1
 8004df2:	61fa      	str	r2, [r7, #28]
 8004df4:	69ba      	ldr	r2, [r7, #24]
 8004df6:	b2d2      	uxtb	r2, r2
 8004df8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dfc:	b2d2      	uxtb	r2, r2
 8004dfe:	701a      	strb	r2, [r3, #0]
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	09db      	lsrs	r3, r3, #7
 8004e04:	61bb      	str	r3, [r7, #24]
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	2b7f      	cmp	r3, #127	; 0x7f
 8004e0a:	d8f0      	bhi.n	8004dee <SEGGER_SYSVIEW_SendModule+0x9e>
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	1c5a      	adds	r2, r3, #1
 8004e10:	61fa      	str	r2, [r7, #28]
 8004e12:	69ba      	ldr	r2, [r7, #24]
 8004e14:	b2d2      	uxtb	r2, r2
 8004e16:	701a      	strb	r2, [r3, #0]
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68f8      	ldr	r0, [r7, #12]
 8004e22:	4619      	mov	r1, r3
 8004e24:	2280      	movs	r2, #128	; 0x80
 8004e26:	f7ff f837 	bl	8003e98 <_EncodeStr>
 8004e2a:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8004e2c:	6938      	ldr	r0, [r7, #16]
 8004e2e:	68f9      	ldr	r1, [r7, #12]
 8004e30:	2216      	movs	r2, #22
 8004e32:	f7ff f953 	bl	80040dc <_SendPacket>
      RECORD_END();
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8004e3c:	3730      	adds	r7, #48	; 0x30
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	200029b0 	.word	0x200029b0
 8004e48:	200029b8 	.word	0x200029b8

08004e4c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8004e52:	4b0b      	ldr	r3, [pc, #44]	; (8004e80 <SEGGER_SYSVIEW_SendModuleDescription+0x34>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00f      	beq.n	8004e7a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8004e5a:	4b09      	ldr	r3, [pc, #36]	; (8004e80 <SEGGER_SYSVIEW_SendModuleDescription+0x34>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d002      	beq.n	8004e6e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1f2      	bne.n	8004e60 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8004e7a:	3708      	adds	r7, #8
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	200029b0 	.word	0x200029b0

08004e84 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8004e8a:	f3ef 8311 	mrs	r3, BASEPRI
 8004e8e:	f04f 0120 	mov.w	r1, #32
 8004e92:	f381 8811 	msr	BASEPRI, r1
 8004e96:	60fb      	str	r3, [r7, #12]
 8004e98:	4816      	ldr	r0, [pc, #88]	; (8004ef4 <SEGGER_SYSVIEW_SendNumModules+0x70>)
 8004e9a:	f7ff f84b 	bl	8003f34 <_PreparePacket>
 8004e9e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	617b      	str	r3, [r7, #20]
 8004ea8:	4b13      	ldr	r3, [pc, #76]	; (8004ef8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	613b      	str	r3, [r7, #16]
 8004eae:	e00b      	b.n	8004ec8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	1c5a      	adds	r2, r3, #1
 8004eb4:	617a      	str	r2, [r7, #20]
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	b2d2      	uxtb	r2, r2
 8004eba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ebe:	b2d2      	uxtb	r2, r2
 8004ec0:	701a      	strb	r2, [r3, #0]
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	09db      	lsrs	r3, r3, #7
 8004ec6:	613b      	str	r3, [r7, #16]
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	2b7f      	cmp	r3, #127	; 0x7f
 8004ecc:	d8f0      	bhi.n	8004eb0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	1c5a      	adds	r2, r3, #1
 8004ed2:	617a      	str	r2, [r7, #20]
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	b2d2      	uxtb	r2, r2
 8004ed8:	701a      	strb	r2, [r3, #0]
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8004ede:	68b8      	ldr	r0, [r7, #8]
 8004ee0:	6879      	ldr	r1, [r7, #4]
 8004ee2:	221b      	movs	r2, #27
 8004ee4:	f7ff f8fa 	bl	80040dc <_SendPacket>
  RECORD_END();
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f383 8811 	msr	BASEPRI, r3
}
 8004eee:	3718      	adds	r7, #24
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	200029b8 	.word	0x200029b8
 8004ef8:	200029b4 	.word	0x200029b4

08004efc <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b08a      	sub	sp, #40	; 0x28
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004f04:	f3ef 8311 	mrs	r3, BASEPRI
 8004f08:	f04f 0120 	mov.w	r1, #32
 8004f0c:	f381 8811 	msr	BASEPRI, r1
 8004f10:	617b      	str	r3, [r7, #20]
 8004f12:	4826      	ldr	r0, [pc, #152]	; (8004fac <SEGGER_SYSVIEW_Warn+0xb0>)
 8004f14:	f7ff f80e 	bl	8003f34 <_PreparePacket>
 8004f18:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004f1a:	6938      	ldr	r0, [r7, #16]
 8004f1c:	6879      	ldr	r1, [r7, #4]
 8004f1e:	2280      	movs	r2, #128	; 0x80
 8004f20:	f7fe ffba 	bl	8003e98 <_EncodeStr>
 8004f24:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	627b      	str	r3, [r7, #36]	; 0x24
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	623b      	str	r3, [r7, #32]
 8004f2e:	e00b      	b.n	8004f48 <SEGGER_SYSVIEW_Warn+0x4c>
 8004f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f32:	1c5a      	adds	r2, r3, #1
 8004f34:	627a      	str	r2, [r7, #36]	; 0x24
 8004f36:	6a3a      	ldr	r2, [r7, #32]
 8004f38:	b2d2      	uxtb	r2, r2
 8004f3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f3e:	b2d2      	uxtb	r2, r2
 8004f40:	701a      	strb	r2, [r3, #0]
 8004f42:	6a3b      	ldr	r3, [r7, #32]
 8004f44:	09db      	lsrs	r3, r3, #7
 8004f46:	623b      	str	r3, [r7, #32]
 8004f48:	6a3b      	ldr	r3, [r7, #32]
 8004f4a:	2b7f      	cmp	r3, #127	; 0x7f
 8004f4c:	d8f0      	bhi.n	8004f30 <SEGGER_SYSVIEW_Warn+0x34>
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f50:	1c5a      	adds	r2, r3, #1
 8004f52:	627a      	str	r2, [r7, #36]	; 0x24
 8004f54:	6a3a      	ldr	r2, [r7, #32]
 8004f56:	b2d2      	uxtb	r2, r2
 8004f58:	701a      	strb	r2, [r3, #0]
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	61fb      	str	r3, [r7, #28]
 8004f62:	2300      	movs	r3, #0
 8004f64:	61bb      	str	r3, [r7, #24]
 8004f66:	e00b      	b.n	8004f80 <SEGGER_SYSVIEW_Warn+0x84>
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	1c5a      	adds	r2, r3, #1
 8004f6c:	61fa      	str	r2, [r7, #28]
 8004f6e:	69ba      	ldr	r2, [r7, #24]
 8004f70:	b2d2      	uxtb	r2, r2
 8004f72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f76:	b2d2      	uxtb	r2, r2
 8004f78:	701a      	strb	r2, [r3, #0]
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	09db      	lsrs	r3, r3, #7
 8004f7e:	61bb      	str	r3, [r7, #24]
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	2b7f      	cmp	r3, #127	; 0x7f
 8004f84:	d8f0      	bhi.n	8004f68 <SEGGER_SYSVIEW_Warn+0x6c>
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	1c5a      	adds	r2, r3, #1
 8004f8a:	61fa      	str	r2, [r7, #28]
 8004f8c:	69ba      	ldr	r2, [r7, #24]
 8004f8e:	b2d2      	uxtb	r2, r2
 8004f90:	701a      	strb	r2, [r3, #0]
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004f96:	6938      	ldr	r0, [r7, #16]
 8004f98:	68f9      	ldr	r1, [r7, #12]
 8004f9a:	221a      	movs	r2, #26
 8004f9c:	f7ff f89e 	bl	80040dc <_SendPacket>
  RECORD_END();
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	f383 8811 	msr	BASEPRI, r3
}
 8004fa6:	3728      	adds	r7, #40	; 0x28
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	200029b8 	.word	0x200029b8

08004fb0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	607b      	str	r3, [r7, #4]
 8004fba:	e033      	b.n	8005024 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004fbc:	491d      	ldr	r1, [pc, #116]	; (8005034 <_cbSendTaskList+0x84>)
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	440b      	add	r3, r1
 8004fca:	6818      	ldr	r0, [r3, #0]
 8004fcc:	4919      	ldr	r1, [pc, #100]	; (8005034 <_cbSendTaskList+0x84>)
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	440b      	add	r3, r1
 8004fda:	685e      	ldr	r6, [r3, #4]
 8004fdc:	4915      	ldr	r1, [pc, #84]	; (8005034 <_cbSendTaskList+0x84>)
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4413      	add	r3, r2
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	440b      	add	r3, r1
 8004fea:	3308      	adds	r3, #8
 8004fec:	681d      	ldr	r5, [r3, #0]
 8004fee:	4911      	ldr	r1, [pc, #68]	; (8005034 <_cbSendTaskList+0x84>)
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	4413      	add	r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	440b      	add	r3, r1
 8004ffc:	3308      	adds	r3, #8
 8004ffe:	685c      	ldr	r4, [r3, #4]
 8005000:	490c      	ldr	r1, [pc, #48]	; (8005034 <_cbSendTaskList+0x84>)
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	4613      	mov	r3, r2
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	4413      	add	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	440b      	add	r3, r1
 800500e:	3310      	adds	r3, #16
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	9300      	str	r3, [sp, #0]
 8005014:	4631      	mov	r1, r6
 8005016:	462a      	mov	r2, r5
 8005018:	4623      	mov	r3, r4
 800501a:	f000 f8a9 	bl	8005170 <SYSVIEW_SendTaskInfo>
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	3301      	adds	r3, #1
 8005022:	607b      	str	r3, [r7, #4]
 8005024:	4b04      	ldr	r3, [pc, #16]	; (8005038 <_cbSendTaskList+0x88>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	429a      	cmp	r2, r3
 800502c:	d3c6      	bcc.n	8004fbc <_cbSendTaskList+0xc>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
  }
}
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005034:	20002a9c 	.word	0x20002a9c
 8005038:	20002b3c 	.word	0x20002b3c

0800503c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800503c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005040:	b082      	sub	sp, #8
 8005042:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8005044:	f7fe fa68 	bl	8003518 <xTaskGetTickCountFromISR>
 8005048:	4603      	mov	r3, r0
 800504a:	461a      	mov	r2, r3
 800504c:	f04f 0300 	mov.w	r3, #0
 8005050:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8005054:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005058:	4602      	mov	r2, r0
 800505a:	460b      	mov	r3, r1
 800505c:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 8005060:	ea4b 7b92 	orr.w	fp, fp, r2, lsr #30
 8005064:	ea4f 0a82 	mov.w	sl, r2, lsl #2
 8005068:	4652      	mov	r2, sl
 800506a:	465b      	mov	r3, fp
 800506c:	015d      	lsls	r5, r3, #5
 800506e:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8005072:	0154      	lsls	r4, r2, #5
 8005074:	1aa4      	subs	r4, r4, r2
 8005076:	eb65 0503 	sbc.w	r5, r5, r3
 800507a:	1824      	adds	r4, r4, r0
 800507c:	eb45 0501 	adc.w	r5, r5, r1
 8005080:	ea4f 09c5 	mov.w	r9, r5, lsl #3
 8005084:	ea49 7954 	orr.w	r9, r9, r4, lsr #29
 8005088:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 800508c:	4644      	mov	r4, r8
 800508e:	464d      	mov	r5, r9
 8005090:	e9c7 4500 	strd	r4, r5, [r7]
  return Time;
 8005094:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8005098:	4610      	mov	r0, r2
 800509a:	4619      	mov	r1, r3
 800509c:	3708      	adds	r7, #8
 800509e:	46bd      	mov	sp, r7
 80050a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080050a4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b086      	sub	sp, #24
 80050a8:	af02      	add	r7, sp, #8
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
 80050b0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80050b2:	68b8      	ldr	r0, [r7, #8]
 80050b4:	492a      	ldr	r1, [pc, #168]	; (8005160 <SYSVIEW_AddTask+0xbc>)
 80050b6:	2205      	movs	r2, #5
 80050b8:	f000 f8ca 	bl	8005250 <memcmp>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d100      	bne.n	80050c4 <SYSVIEW_AddTask+0x20>
    return;
 80050c2:	e049      	b.n	8005158 <SYSVIEW_AddTask+0xb4>
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80050c4:	4b27      	ldr	r3, [pc, #156]	; (8005164 <SYSVIEW_AddTask+0xc0>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2b07      	cmp	r3, #7
 80050ca:	d903      	bls.n	80050d4 <SYSVIEW_AddTask+0x30>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80050cc:	4826      	ldr	r0, [pc, #152]	; (8005168 <SYSVIEW_AddTask+0xc4>)
 80050ce:	f7ff ff15 	bl	8004efc <SEGGER_SYSVIEW_Warn>
    return;
 80050d2:	e041      	b.n	8005158 <SYSVIEW_AddTask+0xb4>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80050d4:	4b23      	ldr	r3, [pc, #140]	; (8005164 <SYSVIEW_AddTask+0xc0>)
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	4924      	ldr	r1, [pc, #144]	; (800516c <SYSVIEW_AddTask+0xc8>)
 80050da:	4613      	mov	r3, r2
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	4413      	add	r3, r2
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	440b      	add	r3, r1
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80050e8:	4b1e      	ldr	r3, [pc, #120]	; (8005164 <SYSVIEW_AddTask+0xc0>)
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	491f      	ldr	r1, [pc, #124]	; (800516c <SYSVIEW_AddTask+0xc8>)
 80050ee:	4613      	mov	r3, r2
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	4413      	add	r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	440b      	add	r3, r1
 80050f8:	68ba      	ldr	r2, [r7, #8]
 80050fa:	605a      	str	r2, [r3, #4]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80050fc:	4b19      	ldr	r3, [pc, #100]	; (8005164 <SYSVIEW_AddTask+0xc0>)
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	491a      	ldr	r1, [pc, #104]	; (800516c <SYSVIEW_AddTask+0xc8>)
 8005102:	4613      	mov	r3, r2
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	4413      	add	r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	440b      	add	r3, r1
 800510c:	3308      	adds	r3, #8
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005112:	4b14      	ldr	r3, [pc, #80]	; (8005164 <SYSVIEW_AddTask+0xc0>)
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	4915      	ldr	r1, [pc, #84]	; (800516c <SYSVIEW_AddTask+0xc8>)
 8005118:	4613      	mov	r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	4413      	add	r3, r2
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	440b      	add	r3, r1
 8005122:	3308      	adds	r3, #8
 8005124:	683a      	ldr	r2, [r7, #0]
 8005126:	605a      	str	r2, [r3, #4]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8005128:	4b0e      	ldr	r3, [pc, #56]	; (8005164 <SYSVIEW_AddTask+0xc0>)
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	490f      	ldr	r1, [pc, #60]	; (800516c <SYSVIEW_AddTask+0xc8>)
 800512e:	4613      	mov	r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	4413      	add	r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	440b      	add	r3, r1
 8005138:	3310      	adds	r3, #16
 800513a:	69ba      	ldr	r2, [r7, #24]
 800513c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800513e:	4b09      	ldr	r3, [pc, #36]	; (8005164 <SYSVIEW_AddTask+0xc0>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	3301      	adds	r3, #1
 8005144:	4a07      	ldr	r2, [pc, #28]	; (8005164 <SYSVIEW_AddTask+0xc0>)
 8005146:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	9300      	str	r3, [sp, #0]
 800514c:	68f8      	ldr	r0, [r7, #12]
 800514e:	68b9      	ldr	r1, [r7, #8]
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	f000 f80c 	bl	8005170 <SYSVIEW_SendTaskInfo>

}
 8005158:	3710      	adds	r7, #16
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	08005338 	.word	0x08005338
 8005164:	20002b3c 	.word	0x20002b3c
 8005168:	08005340 	.word	0x08005340
 800516c:	20002a9c 	.word	0x20002a9c

08005170 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005170:	b580      	push	{r7, lr}
 8005172:	b08a      	sub	sp, #40	; 0x28
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]
 800517c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800517e:	f107 0314 	add.w	r3, r7, #20
 8005182:	4618      	mov	r0, r3
 8005184:	2100      	movs	r1, #0
 8005186:	2214      	movs	r2, #20
 8005188:	f000 f87d 	bl	8005286 <memset>
  TaskInfo.TaskID     = TaskID;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800519c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80051a0:	f107 0314 	add.w	r3, r7, #20
 80051a4:	4618      	mov	r0, r3
 80051a6:	f7ff fad7 	bl	8004758 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80051aa:	3728      	adds	r7, #40	; 0x28
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80051b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80051e8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80051b4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80051b6:	e003      	b.n	80051c0 <LoopCopyDataInit>

080051b8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80051b8:	4b0c      	ldr	r3, [pc, #48]	; (80051ec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80051ba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80051bc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80051be:	3104      	adds	r1, #4

080051c0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80051c0:	480b      	ldr	r0, [pc, #44]	; (80051f0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80051c2:	4b0c      	ldr	r3, [pc, #48]	; (80051f4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80051c4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80051c6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80051c8:	d3f6      	bcc.n	80051b8 <CopyDataInit>
	ldr	r2, =_sbss
 80051ca:	4a0b      	ldr	r2, [pc, #44]	; (80051f8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80051cc:	e002      	b.n	80051d4 <LoopFillZerobss>

080051ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80051ce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80051d0:	f842 3b04 	str.w	r3, [r2], #4

080051d4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80051d4:	4b09      	ldr	r3, [pc, #36]	; (80051fc <LoopForever+0x16>)
	cmp	r2, r3
 80051d6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80051d8:	d3f9      	bcc.n	80051ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80051da:	f7fb f991 	bl	8000500 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80051de:	f000 f811 	bl	8005204 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80051e2:	f7fb f8b5 	bl	8000350 <main>

080051e6 <LoopForever>:

LoopForever:
    b LoopForever
 80051e6:	e7fe      	b.n	80051e6 <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80051e8:	20004000 	.word	0x20004000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 80051ec:	080053e4 	.word	0x080053e4
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 80051f0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80051f4:	20000008 	.word	0x20000008
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 80051f8:	20000008 	.word	0x20000008
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 80051fc:	20002c2c 	.word	0x20002c2c

08005200 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005200:	e7fe      	b.n	8005200 <ADC1_IRQHandler>
	...

08005204 <__libc_init_array>:
 8005204:	b570      	push	{r4, r5, r6, lr}
 8005206:	4b0e      	ldr	r3, [pc, #56]	; (8005240 <__libc_init_array+0x3c>)
 8005208:	4c0e      	ldr	r4, [pc, #56]	; (8005244 <__libc_init_array+0x40>)
 800520a:	1ae4      	subs	r4, r4, r3
 800520c:	10a4      	asrs	r4, r4, #2
 800520e:	2500      	movs	r5, #0
 8005210:	461e      	mov	r6, r3
 8005212:	42a5      	cmp	r5, r4
 8005214:	d004      	beq.n	8005220 <__libc_init_array+0x1c>
 8005216:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800521a:	4798      	blx	r3
 800521c:	3501      	adds	r5, #1
 800521e:	e7f8      	b.n	8005212 <__libc_init_array+0xe>
 8005220:	f000 f83a 	bl	8005298 <_init>
 8005224:	4c08      	ldr	r4, [pc, #32]	; (8005248 <__libc_init_array+0x44>)
 8005226:	4b09      	ldr	r3, [pc, #36]	; (800524c <__libc_init_array+0x48>)
 8005228:	1ae4      	subs	r4, r4, r3
 800522a:	10a4      	asrs	r4, r4, #2
 800522c:	2500      	movs	r5, #0
 800522e:	461e      	mov	r6, r3
 8005230:	42a5      	cmp	r5, r4
 8005232:	d004      	beq.n	800523e <__libc_init_array+0x3a>
 8005234:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005238:	4798      	blx	r3
 800523a:	3501      	adds	r5, #1
 800523c:	e7f8      	b.n	8005230 <__libc_init_array+0x2c>
 800523e:	bd70      	pop	{r4, r5, r6, pc}
 8005240:	080053dc 	.word	0x080053dc
 8005244:	080053dc 	.word	0x080053dc
 8005248:	080053e0 	.word	0x080053e0
 800524c:	080053dc 	.word	0x080053dc

08005250 <memcmp>:
 8005250:	b510      	push	{r4, lr}
 8005252:	440a      	add	r2, r1
 8005254:	1e44      	subs	r4, r0, #1
 8005256:	4291      	cmp	r1, r2
 8005258:	d008      	beq.n	800526c <memcmp+0x1c>
 800525a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800525e:	7808      	ldrb	r0, [r1, #0]
 8005260:	4283      	cmp	r3, r0
 8005262:	d001      	beq.n	8005268 <memcmp+0x18>
 8005264:	1a18      	subs	r0, r3, r0
 8005266:	bd10      	pop	{r4, pc}
 8005268:	3101      	adds	r1, #1
 800526a:	e7f4      	b.n	8005256 <memcmp+0x6>
 800526c:	2000      	movs	r0, #0
 800526e:	bd10      	pop	{r4, pc}

08005270 <memcpy>:
 8005270:	b510      	push	{r4, lr}
 8005272:	1e43      	subs	r3, r0, #1
 8005274:	440a      	add	r2, r1
 8005276:	4291      	cmp	r1, r2
 8005278:	d004      	beq.n	8005284 <memcpy+0x14>
 800527a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800527e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005282:	e7f8      	b.n	8005276 <memcpy+0x6>
 8005284:	bd10      	pop	{r4, pc}

08005286 <memset>:
 8005286:	4402      	add	r2, r0
 8005288:	4603      	mov	r3, r0
 800528a:	4293      	cmp	r3, r2
 800528c:	d002      	beq.n	8005294 <memset+0xe>
 800528e:	f803 1b01 	strb.w	r1, [r3], #1
 8005292:	e7fa      	b.n	800528a <memset+0x4>
 8005294:	4770      	bx	lr
	...

08005298 <_init>:
 8005298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800529a:	bf00      	nop
 800529c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800529e:	bc08      	pop	{r3}
 80052a0:	469e      	mov	lr, r3
 80052a2:	4770      	bx	lr

080052a4 <_fini>:
 80052a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052a6:	bf00      	nop
 80052a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052aa:	bc08      	pop	{r3}
 80052ac:	469e      	mov	lr, r3
 80052ae:	4770      	bx	lr
