ARM GAS  /tmp/cc99qdVQ.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"queue.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.comm	xQueueRegistry,64,4
  21              		.section	.text.xQueueGenericReset,"ax",%progbits
  22              		.align	2
  23              		.global	xQueueGenericReset
  24              		.thumb
  25              		.thumb_func
  27              	xQueueGenericReset:
  28              	.LFB4:
  29              		.file 1 "../../../FreeRTOS/Source/queue.c"
   1:../../../FreeRTOS/Source/queue.c **** /*
   2:../../../FreeRTOS/Source/queue.c ****     FreeRTOS V8.2.3 - Copyright (C) 2015 Real Time Engineers Ltd.
   3:../../../FreeRTOS/Source/queue.c ****     All rights reserved
   4:../../../FreeRTOS/Source/queue.c **** 
   5:../../../FreeRTOS/Source/queue.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../../../FreeRTOS/Source/queue.c **** 
   7:../../../FreeRTOS/Source/queue.c ****     This file is part of the FreeRTOS distribution.
   8:../../../FreeRTOS/Source/queue.c **** 
   9:../../../FreeRTOS/Source/queue.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../../../FreeRTOS/Source/queue.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:../../../FreeRTOS/Source/queue.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../../../FreeRTOS/Source/queue.c **** 
  13:../../../FreeRTOS/Source/queue.c ****     ***************************************************************************
  14:../../../FreeRTOS/Source/queue.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../../../FreeRTOS/Source/queue.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../../../FreeRTOS/Source/queue.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../../../FreeRTOS/Source/queue.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../../../FreeRTOS/Source/queue.c ****     ***************************************************************************
  19:../../../FreeRTOS/Source/queue.c **** 
  20:../../../FreeRTOS/Source/queue.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../../../FreeRTOS/Source/queue.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../../../FreeRTOS/Source/queue.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../../../FreeRTOS/Source/queue.c ****     link: http://www.freertos.org/a00114.html
  24:../../../FreeRTOS/Source/queue.c **** 
  25:../../../FreeRTOS/Source/queue.c ****     ***************************************************************************
  26:../../../FreeRTOS/Source/queue.c ****      *                                                                       *
  27:../../../FreeRTOS/Source/queue.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../../../FreeRTOS/Source/queue.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../../../FreeRTOS/Source/queue.c ****      *    platform software that is more than just the market leader, it     *
ARM GAS  /tmp/cc99qdVQ.s 			page 2


  30:../../../FreeRTOS/Source/queue.c ****      *    is the industry's de facto standard.                               *
  31:../../../FreeRTOS/Source/queue.c ****      *                                                                       *
  32:../../../FreeRTOS/Source/queue.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../../../FreeRTOS/Source/queue.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../../../FreeRTOS/Source/queue.c ****      *    tutorial book, reference manual, or both:                          *
  35:../../../FreeRTOS/Source/queue.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../../../FreeRTOS/Source/queue.c ****      *                                                                       *
  37:../../../FreeRTOS/Source/queue.c ****     ***************************************************************************
  38:../../../FreeRTOS/Source/queue.c **** 
  39:../../../FreeRTOS/Source/queue.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../../../FreeRTOS/Source/queue.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../../../FreeRTOS/Source/queue.c ****     defined configASSERT()?
  42:../../../FreeRTOS/Source/queue.c **** 
  43:../../../FreeRTOS/Source/queue.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../../../FreeRTOS/Source/queue.c ****     embedded software for free we request you assist our global community by
  45:../../../FreeRTOS/Source/queue.c ****     participating in the support forum.
  46:../../../FreeRTOS/Source/queue.c **** 
  47:../../../FreeRTOS/Source/queue.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../../../FreeRTOS/Source/queue.c ****     be as productive as possible as early as possible.  Now you can receive
  49:../../../FreeRTOS/Source/queue.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../../../FreeRTOS/Source/queue.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../../../FreeRTOS/Source/queue.c **** 
  52:../../../FreeRTOS/Source/queue.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../../../FreeRTOS/Source/queue.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../../../FreeRTOS/Source/queue.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../../../FreeRTOS/Source/queue.c **** 
  56:../../../FreeRTOS/Source/queue.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../../../FreeRTOS/Source/queue.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../../../FreeRTOS/Source/queue.c **** 
  59:../../../FreeRTOS/Source/queue.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../../../FreeRTOS/Source/queue.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../../../FreeRTOS/Source/queue.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../../../FreeRTOS/Source/queue.c **** 
  63:../../../FreeRTOS/Source/queue.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../../../FreeRTOS/Source/queue.c ****     engineered and independently SIL3 certified version for use in safety and
  65:../../../FreeRTOS/Source/queue.c ****     mission critical applications that require provable dependability.
  66:../../../FreeRTOS/Source/queue.c **** 
  67:../../../FreeRTOS/Source/queue.c ****     1 tab == 4 spaces!
  68:../../../FreeRTOS/Source/queue.c **** */
  69:../../../FreeRTOS/Source/queue.c **** 
  70:../../../FreeRTOS/Source/queue.c **** #include <stdlib.h>
  71:../../../FreeRTOS/Source/queue.c **** #include <string.h>
  72:../../../FreeRTOS/Source/queue.c **** 
  73:../../../FreeRTOS/Source/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  74:../../../FreeRTOS/Source/queue.c **** all the API functions to use the MPU wrappers.  That should only be done when
  75:../../../FreeRTOS/Source/queue.c **** task.h is included from an application file. */
  76:../../../FreeRTOS/Source/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  77:../../../FreeRTOS/Source/queue.c **** 
  78:../../../FreeRTOS/Source/queue.c **** #include "FreeRTOS.h"
  79:../../../FreeRTOS/Source/queue.c **** #include "task.h"
  80:../../../FreeRTOS/Source/queue.c **** #include "queue.h"
  81:../../../FreeRTOS/Source/queue.c **** 
  82:../../../FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  83:../../../FreeRTOS/Source/queue.c **** 	#include "croutine.h"
  84:../../../FreeRTOS/Source/queue.c **** #endif
  85:../../../FreeRTOS/Source/queue.c **** 
  86:../../../FreeRTOS/Source/queue.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
ARM GAS  /tmp/cc99qdVQ.s 			page 3


  87:../../../FreeRTOS/Source/queue.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  88:../../../FreeRTOS/Source/queue.c **** header files above, but not in this file, in order to generate the correct
  89:../../../FreeRTOS/Source/queue.c **** privileged Vs unprivileged linkage and placement. */
  90:../../../FreeRTOS/Source/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  91:../../../FreeRTOS/Source/queue.c **** 
  92:../../../FreeRTOS/Source/queue.c **** 
  93:../../../FreeRTOS/Source/queue.c **** /* Constants used with the xRxLock and xTxLock structure members. */
  94:../../../FreeRTOS/Source/queue.c **** #define queueUNLOCKED					( ( BaseType_t ) -1 )
  95:../../../FreeRTOS/Source/queue.c **** #define queueLOCKED_UNMODIFIED			( ( BaseType_t ) 0 )
  96:../../../FreeRTOS/Source/queue.c **** 
  97:../../../FreeRTOS/Source/queue.c **** /* When the Queue_t structure is used to represent a base queue its pcHead and
  98:../../../FreeRTOS/Source/queue.c **** pcTail members are used as pointers into the queue storage area.  When the
  99:../../../FreeRTOS/Source/queue.c **** Queue_t structure is used to represent a mutex pcHead and pcTail pointers are
 100:../../../FreeRTOS/Source/queue.c **** not necessary, and the pcHead pointer is set to NULL to indicate that the
 101:../../../FreeRTOS/Source/queue.c **** pcTail pointer actually points to the mutex holder (if any).  Map alternative
 102:../../../FreeRTOS/Source/queue.c **** names to the pcHead and pcTail structure members to ensure the readability of
 103:../../../FreeRTOS/Source/queue.c **** the code is maintained despite this dual use of two structure members.  An
 104:../../../FreeRTOS/Source/queue.c **** alternative implementation would be to use a union, but use of a union is
 105:../../../FreeRTOS/Source/queue.c **** against the coding standard (although an exception to the standard has been
 106:../../../FreeRTOS/Source/queue.c **** permitted where the dual use also significantly changes the type of the
 107:../../../FreeRTOS/Source/queue.c **** structure member). */
 108:../../../FreeRTOS/Source/queue.c **** #define pxMutexHolder					pcTail
 109:../../../FreeRTOS/Source/queue.c **** #define uxQueueType						pcHead
 110:../../../FreeRTOS/Source/queue.c **** #define queueQUEUE_IS_MUTEX				NULL
 111:../../../FreeRTOS/Source/queue.c **** 
 112:../../../FreeRTOS/Source/queue.c **** /* Semaphores do not actually store or copy data, so have an item size of
 113:../../../FreeRTOS/Source/queue.c **** zero. */
 114:../../../FreeRTOS/Source/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH ( ( UBaseType_t ) 0 )
 115:../../../FreeRTOS/Source/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME		 ( ( TickType_t ) 0U )
 116:../../../FreeRTOS/Source/queue.c **** 
 117:../../../FreeRTOS/Source/queue.c **** #if( configUSE_PREEMPTION == 0 )
 118:../../../FreeRTOS/Source/queue.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 119:../../../FreeRTOS/Source/queue.c **** 	performed just because a higher priority task has been woken. */
 120:../../../FreeRTOS/Source/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION()
 121:../../../FreeRTOS/Source/queue.c **** #else
 122:../../../FreeRTOS/Source/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 123:../../../FreeRTOS/Source/queue.c **** #endif
 124:../../../FreeRTOS/Source/queue.c **** 
 125:../../../FreeRTOS/Source/queue.c **** /*
 126:../../../FreeRTOS/Source/queue.c ****  * Definition of the queue used by the scheduler.
 127:../../../FreeRTOS/Source/queue.c ****  * Items are queued by copy, not reference.  See the following link for the
 128:../../../FreeRTOS/Source/queue.c ****  * rationale: http://www.freertos.org/Embedded-RTOS-Queues.html
 129:../../../FreeRTOS/Source/queue.c ****  */
 130:../../../FreeRTOS/Source/queue.c **** typedef struct QueueDefinition
 131:../../../FreeRTOS/Source/queue.c **** {
 132:../../../FreeRTOS/Source/queue.c **** 	int8_t *pcHead;					/*< Points to the beginning of the queue storage area. */
 133:../../../FreeRTOS/Source/queue.c **** 	int8_t *pcTail;					/*< Points to the byte at the end of the queue storage area.  Once more byte i
 134:../../../FreeRTOS/Source/queue.c **** 	int8_t *pcWriteTo;				/*< Points to the free next place in the storage area. */
 135:../../../FreeRTOS/Source/queue.c **** 
 136:../../../FreeRTOS/Source/queue.c **** 	union							/* Use of a union is an exception to the coding standard to ensure two mutually exclus
 137:../../../FreeRTOS/Source/queue.c **** 	{
 138:../../../FreeRTOS/Source/queue.c **** 		int8_t *pcReadFrom;			/*< Points to the last place that a queued item was read from when the stru
 139:../../../FreeRTOS/Source/queue.c **** 		UBaseType_t uxRecursiveCallCount;/*< Maintains a count of the number of times a recursive mutex h
 140:../../../FreeRTOS/Source/queue.c **** 	} u;
 141:../../../FreeRTOS/Source/queue.c **** 
 142:../../../FreeRTOS/Source/queue.c **** 	List_t xTasksWaitingToSend;		/*< List of tasks that are blocked waiting to post onto this queue.  
 143:../../../FreeRTOS/Source/queue.c **** 	List_t xTasksWaitingToReceive;	/*< List of tasks that are blocked waiting to read from this queue.
ARM GAS  /tmp/cc99qdVQ.s 			page 4


 144:../../../FreeRTOS/Source/queue.c **** 
 145:../../../FreeRTOS/Source/queue.c **** 	volatile UBaseType_t uxMessagesWaiting;/*< The number of items currently in the queue. */
 146:../../../FreeRTOS/Source/queue.c **** 	UBaseType_t uxLength;			/*< The length of the queue defined as the number of items it will hold, n
 147:../../../FreeRTOS/Source/queue.c **** 	UBaseType_t uxItemSize;			/*< The size of each items that the queue will hold. */
 148:../../../FreeRTOS/Source/queue.c **** 
 149:../../../FreeRTOS/Source/queue.c **** 	volatile BaseType_t xRxLock;	/*< Stores the number of items received from the queue (removed from 
 150:../../../FreeRTOS/Source/queue.c **** 	volatile BaseType_t xTxLock;	/*< Stores the number of items transmitted to the queue (added to the
 151:../../../FreeRTOS/Source/queue.c **** 
 152:../../../FreeRTOS/Source/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 153:../../../FreeRTOS/Source/queue.c **** 		UBaseType_t uxQueueNumber;
 154:../../../FreeRTOS/Source/queue.c **** 		uint8_t ucQueueType;
 155:../../../FreeRTOS/Source/queue.c **** 	#endif
 156:../../../FreeRTOS/Source/queue.c **** 
 157:../../../FreeRTOS/Source/queue.c **** 	#if ( configUSE_QUEUE_SETS == 1 )
 158:../../../FreeRTOS/Source/queue.c **** 		struct QueueDefinition *pxQueueSetContainer;
 159:../../../FreeRTOS/Source/queue.c **** 	#endif
 160:../../../FreeRTOS/Source/queue.c **** 
 161:../../../FreeRTOS/Source/queue.c **** } xQUEUE;
 162:../../../FreeRTOS/Source/queue.c **** 
 163:../../../FreeRTOS/Source/queue.c **** /* The old xQUEUE name is maintained above then typedefed to the new Queue_t
 164:../../../FreeRTOS/Source/queue.c **** name below to enable the use of older kernel aware debuggers. */
 165:../../../FreeRTOS/Source/queue.c **** typedef xQUEUE Queue_t;
 166:../../../FreeRTOS/Source/queue.c **** 
 167:../../../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 168:../../../FreeRTOS/Source/queue.c **** 
 169:../../../FreeRTOS/Source/queue.c **** /*
 170:../../../FreeRTOS/Source/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 171:../../../FreeRTOS/Source/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 172:../../../FreeRTOS/Source/queue.c ****  */
 173:../../../FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
 174:../../../FreeRTOS/Source/queue.c **** 
 175:../../../FreeRTOS/Source/queue.c **** 	/* The type stored within the queue registry array.  This allows a name
 176:../../../FreeRTOS/Source/queue.c **** 	to be assigned to each queue making kernel aware debugging a little
 177:../../../FreeRTOS/Source/queue.c **** 	more user friendly. */
 178:../../../FreeRTOS/Source/queue.c **** 	typedef struct QUEUE_REGISTRY_ITEM
 179:../../../FreeRTOS/Source/queue.c **** 	{
 180:../../../FreeRTOS/Source/queue.c **** 		const char *pcQueueName; /*lint !e971 Unqualified char types are allowed for strings and single c
 181:../../../FreeRTOS/Source/queue.c **** 		QueueHandle_t xHandle;
 182:../../../FreeRTOS/Source/queue.c **** 	} xQueueRegistryItem;
 183:../../../FreeRTOS/Source/queue.c **** 
 184:../../../FreeRTOS/Source/queue.c **** 	/* The old xQueueRegistryItem name is maintained above then typedefed to the
 185:../../../FreeRTOS/Source/queue.c **** 	new xQueueRegistryItem name below to enable the use of older kernel aware
 186:../../../FreeRTOS/Source/queue.c **** 	debuggers. */
 187:../../../FreeRTOS/Source/queue.c **** 	typedef xQueueRegistryItem QueueRegistryItem_t;
 188:../../../FreeRTOS/Source/queue.c **** 
 189:../../../FreeRTOS/Source/queue.c **** 	/* The queue registry is simply an array of QueueRegistryItem_t structures.
 190:../../../FreeRTOS/Source/queue.c **** 	The pcQueueName member of a structure being NULL is indicative of the
 191:../../../FreeRTOS/Source/queue.c **** 	array position being vacant. */
 192:../../../FreeRTOS/Source/queue.c **** 	PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 193:../../../FreeRTOS/Source/queue.c **** 
 194:../../../FreeRTOS/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 195:../../../FreeRTOS/Source/queue.c **** 
 196:../../../FreeRTOS/Source/queue.c **** /*
 197:../../../FreeRTOS/Source/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 198:../../../FreeRTOS/Source/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 199:../../../FreeRTOS/Source/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 200:../../../FreeRTOS/Source/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
ARM GAS  /tmp/cc99qdVQ.s 			page 5


 201:../../../FreeRTOS/Source/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 202:../../../FreeRTOS/Source/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 203:../../../FreeRTOS/Source/queue.c ****  */
 204:../../../FreeRTOS/Source/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 205:../../../FreeRTOS/Source/queue.c **** 
 206:../../../FreeRTOS/Source/queue.c **** /*
 207:../../../FreeRTOS/Source/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 208:../../../FreeRTOS/Source/queue.c ****  *
 209:../../../FreeRTOS/Source/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 210:../../../FreeRTOS/Source/queue.c ****  */
 211:../../../FreeRTOS/Source/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 212:../../../FreeRTOS/Source/queue.c **** 
 213:../../../FreeRTOS/Source/queue.c **** /*
 214:../../../FreeRTOS/Source/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 215:../../../FreeRTOS/Source/queue.c ****  *
 216:../../../FreeRTOS/Source/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 217:../../../FreeRTOS/Source/queue.c ****  */
 218:../../../FreeRTOS/Source/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 219:../../../FreeRTOS/Source/queue.c **** 
 220:../../../FreeRTOS/Source/queue.c **** /*
 221:../../../FreeRTOS/Source/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 222:../../../FreeRTOS/Source/queue.c ****  * back of the queue.
 223:../../../FreeRTOS/Source/queue.c ****  */
 224:../../../FreeRTOS/Source/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
 225:../../../FreeRTOS/Source/queue.c **** 
 226:../../../FreeRTOS/Source/queue.c **** /*
 227:../../../FreeRTOS/Source/queue.c ****  * Copies an item out of a queue.
 228:../../../FreeRTOS/Source/queue.c ****  */
 229:../../../FreeRTOS/Source/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer ) PRIVILEGED_FUNCT
 230:../../../FreeRTOS/Source/queue.c **** 
 231:../../../FreeRTOS/Source/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
 232:../../../FreeRTOS/Source/queue.c **** 	/*
 233:../../../FreeRTOS/Source/queue.c **** 	 * Checks to see if a queue is a member of a queue set, and if so, notifies
 234:../../../FreeRTOS/Source/queue.c **** 	 * the queue set that the queue contains data.
 235:../../../FreeRTOS/Source/queue.c **** 	 */
 236:../../../FreeRTOS/Source/queue.c **** 	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCop
 237:../../../FreeRTOS/Source/queue.c **** #endif
 238:../../../FreeRTOS/Source/queue.c **** 
 239:../../../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 240:../../../FreeRTOS/Source/queue.c **** 
 241:../../../FreeRTOS/Source/queue.c **** /*
 242:../../../FreeRTOS/Source/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 243:../../../FreeRTOS/Source/queue.c ****  * accessing the queue event lists.
 244:../../../FreeRTOS/Source/queue.c ****  */
 245:../../../FreeRTOS/Source/queue.c **** #define prvLockQueue( pxQueue )								\
 246:../../../FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();									\
 247:../../../FreeRTOS/Source/queue.c **** 	{														\
 248:../../../FreeRTOS/Source/queue.c **** 		if( ( pxQueue )->xRxLock == queueUNLOCKED )			\
 249:../../../FreeRTOS/Source/queue.c **** 		{													\
 250:../../../FreeRTOS/Source/queue.c **** 			( pxQueue )->xRxLock = queueLOCKED_UNMODIFIED;	\
 251:../../../FreeRTOS/Source/queue.c **** 		}													\
 252:../../../FreeRTOS/Source/queue.c **** 		if( ( pxQueue )->xTxLock == queueUNLOCKED )			\
 253:../../../FreeRTOS/Source/queue.c **** 		{													\
 254:../../../FreeRTOS/Source/queue.c **** 			( pxQueue )->xTxLock = queueLOCKED_UNMODIFIED;	\
 255:../../../FreeRTOS/Source/queue.c **** 		}													\
 256:../../../FreeRTOS/Source/queue.c **** 	}														\
 257:../../../FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL()
ARM GAS  /tmp/cc99qdVQ.s 			page 6


 258:../../../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 259:../../../FreeRTOS/Source/queue.c **** 
 260:../../../FreeRTOS/Source/queue.c **** BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
 261:../../../FreeRTOS/Source/queue.c **** {
  30              		.loc 1 261 0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 16
  33              		@ frame_needed = 1, uses_anonymous_args = 0
  34 0000 80B5     		push	{r7, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 7, -8
  38              		.cfi_offset 14, -4
  39 0002 84B0     		sub	sp, sp, #16
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 24
  42 0004 00AF     		add	r7, sp, #0
  43              	.LCFI2:
  44              		.cfi_def_cfa_register 7
  45 0006 7860     		str	r0, [r7, #4]
  46 0008 3960     		str	r1, [r7]
 262:../../../FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
  47              		.loc 1 262 0
  48 000a 7B68     		ldr	r3, [r7, #4]
  49 000c FB60     		str	r3, [r7, #12]
 263:../../../FreeRTOS/Source/queue.c **** 
 264:../../../FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
  50              		.loc 1 264 0
  51 000e FB68     		ldr	r3, [r7, #12]
  52 0010 002B     		cmp	r3, #0
  53 0012 09D1     		bne	.L2
  54              	.LBB82:
  55              	.LBB83:
  56              		.file 2 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS V8.2.3 - Copyright (C) 2015 Real Time Engineers Ltd.
   3:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     All rights reserved
   4:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   5:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   7:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   9:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  13:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  14:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  19:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  20:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     link: http://www.freertos.org/a00114.html
ARM GAS  /tmp/cc99qdVQ.s 			page 7


  24:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  25:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  26:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  27:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  32:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  37:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  38:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  39:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     defined configASSERT()?
  42:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  43:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     embedded software for free we request you assist our global community by
  45:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     participating in the support forum.
  46:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  47:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  52:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  56:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  63:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     mission critical applications that require provable dependability.
  66:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  67:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     1 tab == 4 spaces!
  68:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** */
  69:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  70:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  71:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  72:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  73:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  74:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  75:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  76:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  77:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  79:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  80:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
ARM GAS  /tmp/cc99qdVQ.s 			page 8


  81:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  83:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  84:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  85:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  86:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  87:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  88:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  89:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  90:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  91:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  92:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  93:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  94:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  96:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  97:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  99:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
 100:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 101:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
 103:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
 105:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
 106:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
 110:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 112:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 113:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 114:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
 115:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 119:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 120:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
 121:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
 122:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
 123:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
 126:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
 130:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 131:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 132:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) { if( xSwitchRequired != pdFALSE ) { traceISR_EXIT
 135:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 137:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /tmp/cc99qdVQ.s 			page 9


 138:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
 139:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
 140:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
 141:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 148:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 149:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 153:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 156:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 157:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 158:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 162:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 163:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 164:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 165:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 171:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 172:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 174:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 175:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 176:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 178:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 179:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 180:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 181:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 184:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 185:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31 - ucPort
 192:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 193:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /tmp/cc99qdVQ.s 			page 10


 195:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 196:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 197:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 198:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 201:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 202:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 203:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 204:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 206:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 207:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 208:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 209:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 210:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 212:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 213:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 214:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 215:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
  57              		.loc 2 215 0 discriminator 1
  58              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
  59 0014 4FF05003 			mov r3, #80												
  60 0018 83F31188 		msr basepri, r3											
  61 001c BFF36F8F 		isb														
  62 0020 BFF34F8F 		dsb														
  63              	
  64              	@ 0 "" 2
  65              		.thumb
  66 0024 BB60     		str	r3, [r7, #8]
  67              	.L3:
  68              	.LBE83:
  69              	.LBE82:
  70              		.loc 1 264 0 discriminator 1
  71 0026 FEE7     		b	.L3
  72              	.L2:
 265:../../../FreeRTOS/Source/queue.c **** 
 266:../../../FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
  73              		.loc 1 266 0
  74 0028 FFF7FEFF 		bl	vPortEnterCritical
 267:../../../FreeRTOS/Source/queue.c **** 	{
 268:../../../FreeRTOS/Source/queue.c **** 		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  75              		.loc 1 268 0
  76 002c FB68     		ldr	r3, [r7, #12]
  77 002e 1A68     		ldr	r2, [r3]
  78 0030 FB68     		ldr	r3, [r7, #12]
  79 0032 DB6B     		ldr	r3, [r3, #60]
  80 0034 F968     		ldr	r1, [r7, #12]
  81 0036 096C     		ldr	r1, [r1, #64]
  82 0038 01FB03F3 		mul	r3, r1, r3
  83 003c 1A44     		add	r2, r2, r3
  84 003e FB68     		ldr	r3, [r7, #12]
  85 0040 5A60     		str	r2, [r3, #4]
 269:../../../FreeRTOS/Source/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  86              		.loc 1 269 0
  87 0042 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/cc99qdVQ.s 			page 11


  88 0044 0022     		movs	r2, #0
  89 0046 9A63     		str	r2, [r3, #56]
 270:../../../FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
  90              		.loc 1 270 0
  91 0048 FB68     		ldr	r3, [r7, #12]
  92 004a 1A68     		ldr	r2, [r3]
  93 004c FB68     		ldr	r3, [r7, #12]
  94 004e 9A60     		str	r2, [r3, #8]
 271:../../../FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue-
  95              		.loc 1 271 0
  96 0050 FB68     		ldr	r3, [r7, #12]
  97 0052 1A68     		ldr	r2, [r3]
  98 0054 FB68     		ldr	r3, [r7, #12]
  99 0056 DB6B     		ldr	r3, [r3, #60]
 100 0058 013B     		subs	r3, r3, #1
 101 005a F968     		ldr	r1, [r7, #12]
 102 005c 096C     		ldr	r1, [r1, #64]
 103 005e 01FB03F3 		mul	r3, r1, r3
 104 0062 1A44     		add	r2, r2, r3
 105 0064 FB68     		ldr	r3, [r7, #12]
 106 0066 DA60     		str	r2, [r3, #12]
 272:../../../FreeRTOS/Source/queue.c **** 		pxQueue->xRxLock = queueUNLOCKED;
 107              		.loc 1 272 0
 108 0068 FB68     		ldr	r3, [r7, #12]
 109 006a 4FF0FF32 		mov	r2, #-1
 110 006e 5A64     		str	r2, [r3, #68]
 273:../../../FreeRTOS/Source/queue.c **** 		pxQueue->xTxLock = queueUNLOCKED;
 111              		.loc 1 273 0
 112 0070 FB68     		ldr	r3, [r7, #12]
 113 0072 4FF0FF32 		mov	r2, #-1
 114 0076 9A64     		str	r2, [r3, #72]
 274:../../../FreeRTOS/Source/queue.c **** 
 275:../../../FreeRTOS/Source/queue.c **** 		if( xNewQueue == pdFALSE )
 115              		.loc 1 275 0
 116 0078 3B68     		ldr	r3, [r7]
 117 007a 002B     		cmp	r3, #0
 118 007c 14D1     		bne	.L4
 276:../../../FreeRTOS/Source/queue.c **** 		{
 277:../../../FreeRTOS/Source/queue.c **** 			/* If there are tasks blocked waiting to read from the queue, then
 278:../../../FreeRTOS/Source/queue.c **** 			the tasks will remain blocked as after this function exits the queue
 279:../../../FreeRTOS/Source/queue.c **** 			will still be empty.  If there are tasks blocked waiting to write to
 280:../../../FreeRTOS/Source/queue.c **** 			the queue, then one should be unblocked as after this function exits
 281:../../../FreeRTOS/Source/queue.c **** 			it will be possible to write to it. */
 282:../../../FreeRTOS/Source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 119              		.loc 1 282 0
 120 007e FB68     		ldr	r3, [r7, #12]
 121 0080 1B69     		ldr	r3, [r3, #16]
 122 0082 002B     		cmp	r3, #0
 123 0084 1AD0     		beq	.L5
 283:../../../FreeRTOS/Source/queue.c **** 			{
 284:../../../FreeRTOS/Source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 124              		.loc 1 284 0
 125 0086 FB68     		ldr	r3, [r7, #12]
 126 0088 1033     		adds	r3, r3, #16
 127 008a 1846     		mov	r0, r3
 128 008c FFF7FEFF 		bl	xTaskRemoveFromEventList
 129 0090 0346     		mov	r3, r0
ARM GAS  /tmp/cc99qdVQ.s 			page 12


 130 0092 012B     		cmp	r3, #1
 131 0094 12D1     		bne	.L5
 285:../../../FreeRTOS/Source/queue.c **** 				{
 286:../../../FreeRTOS/Source/queue.c **** 					queueYIELD_IF_USING_PREEMPTION();
 132              		.loc 1 286 0
 133 0096 0D4B     		ldr	r3, .L7
 134 0098 4FF08052 		mov	r2, #268435456
 135 009c 1A60     		str	r2, [r3]
 136              	@ 286 "../../../FreeRTOS/Source/queue.c" 1
 137 009e BFF34F8F 		dsb
 138              	@ 0 "" 2
 139              	@ 286 "../../../FreeRTOS/Source/queue.c" 1
 140 00a2 BFF36F8F 		isb
 141              	@ 0 "" 2
 142              		.thumb
 143 00a6 09E0     		b	.L5
 144              	.L4:
 287:../../../FreeRTOS/Source/queue.c **** 				}
 288:../../../FreeRTOS/Source/queue.c **** 				else
 289:../../../FreeRTOS/Source/queue.c **** 				{
 290:../../../FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 291:../../../FreeRTOS/Source/queue.c **** 				}
 292:../../../FreeRTOS/Source/queue.c **** 			}
 293:../../../FreeRTOS/Source/queue.c **** 			else
 294:../../../FreeRTOS/Source/queue.c **** 			{
 295:../../../FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 296:../../../FreeRTOS/Source/queue.c **** 			}
 297:../../../FreeRTOS/Source/queue.c **** 		}
 298:../../../FreeRTOS/Source/queue.c **** 		else
 299:../../../FreeRTOS/Source/queue.c **** 		{
 300:../../../FreeRTOS/Source/queue.c **** 			/* Ensure the event queues start in the correct state. */
 301:../../../FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 145              		.loc 1 301 0
 146 00a8 FB68     		ldr	r3, [r7, #12]
 147 00aa 1033     		adds	r3, r3, #16
 148 00ac 1846     		mov	r0, r3
 149 00ae FFF7FEFF 		bl	vListInitialise
 302:../../../FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 150              		.loc 1 302 0
 151 00b2 FB68     		ldr	r3, [r7, #12]
 152 00b4 2433     		adds	r3, r3, #36
 153 00b6 1846     		mov	r0, r3
 154 00b8 FFF7FEFF 		bl	vListInitialise
 155              	.L5:
 303:../../../FreeRTOS/Source/queue.c **** 		}
 304:../../../FreeRTOS/Source/queue.c **** 	}
 305:../../../FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 156              		.loc 1 305 0
 157 00bc FFF7FEFF 		bl	vPortExitCritical
 306:../../../FreeRTOS/Source/queue.c **** 
 307:../../../FreeRTOS/Source/queue.c **** 	/* A value is returned for calling semantic consistency with previous
 308:../../../FreeRTOS/Source/queue.c **** 	versions. */
 309:../../../FreeRTOS/Source/queue.c **** 	return pdPASS;
 158              		.loc 1 309 0
 159 00c0 0123     		movs	r3, #1
 310:../../../FreeRTOS/Source/queue.c **** }
 160              		.loc 1 310 0
ARM GAS  /tmp/cc99qdVQ.s 			page 13


 161 00c2 1846     		mov	r0, r3
 162 00c4 1037     		adds	r7, r7, #16
 163              	.LCFI3:
 164              		.cfi_def_cfa_offset 8
 165 00c6 BD46     		mov	sp, r7
 166              	.LCFI4:
 167              		.cfi_def_cfa_register 13
 168              		@ sp needed
 169 00c8 80BD     		pop	{r7, pc}
 170              	.L8:
 171 00ca 00BF     		.align	2
 172              	.L7:
 173 00cc 04ED00E0 		.word	-536810236
 174              		.cfi_endproc
 175              	.LFE4:
 177              		.section	.text.xQueueGenericCreate,"ax",%progbits
 178              		.align	2
 179              		.global	xQueueGenericCreate
 180              		.thumb
 181              		.thumb_func
 183              	xQueueGenericCreate:
 184              	.LFB5:
 311:../../../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 312:../../../FreeRTOS/Source/queue.c **** 
 313:../../../FreeRTOS/Source/queue.c **** QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, c
 314:../../../FreeRTOS/Source/queue.c **** {
 185              		.loc 1 314 0
 186              		.cfi_startproc
 187              		@ args = 0, pretend = 0, frame = 40
 188              		@ frame_needed = 1, uses_anonymous_args = 0
 189 0000 80B5     		push	{r7, lr}
 190              	.LCFI5:
 191              		.cfi_def_cfa_offset 8
 192              		.cfi_offset 7, -8
 193              		.cfi_offset 14, -4
 194 0002 8AB0     		sub	sp, sp, #40
 195              	.LCFI6:
 196              		.cfi_def_cfa_offset 48
 197 0004 00AF     		add	r7, sp, #0
 198              	.LCFI7:
 199              		.cfi_def_cfa_register 7
 200 0006 F860     		str	r0, [r7, #12]
 201 0008 B960     		str	r1, [r7, #8]
 202 000a 1346     		mov	r3, r2
 203 000c FB71     		strb	r3, [r7, #7]
 315:../../../FreeRTOS/Source/queue.c **** Queue_t *pxNewQueue;
 316:../../../FreeRTOS/Source/queue.c **** size_t xQueueSizeInBytes;
 317:../../../FreeRTOS/Source/queue.c **** QueueHandle_t xReturn = NULL;
 204              		.loc 1 317 0
 205 000e 0023     		movs	r3, #0
 206 0010 3B62     		str	r3, [r7, #32]
 318:../../../FreeRTOS/Source/queue.c **** 
 319:../../../FreeRTOS/Source/queue.c **** 	/* Remove compiler warnings about unused parameters should
 320:../../../FreeRTOS/Source/queue.c **** 	configUSE_TRACE_FACILITY not be set to 1. */
 321:../../../FreeRTOS/Source/queue.c **** 	( void ) ucQueueType;
 322:../../../FreeRTOS/Source/queue.c **** 
 323:../../../FreeRTOS/Source/queue.c **** 	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
ARM GAS  /tmp/cc99qdVQ.s 			page 14


 207              		.loc 1 323 0
 208 0012 FB68     		ldr	r3, [r7, #12]
 209 0014 002B     		cmp	r3, #0
 210 0016 09D1     		bne	.L10
 211              	.LBB84:
 212              	.LBB85:
 213              		.loc 2 215 0 discriminator 1
 214              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 215 0018 4FF05003 			mov r3, #80												
 216 001c 83F31188 		msr basepri, r3											
 217 0020 BFF36F8F 		isb														
 218 0024 BFF34F8F 		dsb														
 219              	
 220              	@ 0 "" 2
 221              		.thumb
 222 0028 BB61     		str	r3, [r7, #24]
 223              	.L11:
 224              	.LBE85:
 225              	.LBE84:
 226              		.loc 1 323 0 discriminator 1
 227 002a FEE7     		b	.L11
 228              	.L10:
 324:../../../FreeRTOS/Source/queue.c **** 
 325:../../../FreeRTOS/Source/queue.c **** 	if( uxItemSize == ( UBaseType_t ) 0 )
 229              		.loc 1 325 0
 230 002c BB68     		ldr	r3, [r7, #8]
 231 002e 002B     		cmp	r3, #0
 232 0030 02D1     		bne	.L12
 326:../../../FreeRTOS/Source/queue.c **** 	{
 327:../../../FreeRTOS/Source/queue.c **** 		/* There is not going to be a queue storage area. */
 328:../../../FreeRTOS/Source/queue.c **** 		xQueueSizeInBytes = ( size_t ) 0;
 233              		.loc 1 328 0
 234 0032 0023     		movs	r3, #0
 235 0034 7B62     		str	r3, [r7, #36]
 236 0036 05E0     		b	.L13
 237              	.L12:
 329:../../../FreeRTOS/Source/queue.c **** 	}
 330:../../../FreeRTOS/Source/queue.c **** 	else
 331:../../../FreeRTOS/Source/queue.c **** 	{
 332:../../../FreeRTOS/Source/queue.c **** 		/* The queue is one byte longer than asked for to make wrap checking
 333:../../../FreeRTOS/Source/queue.c **** 		easier/faster. */
 334:../../../FreeRTOS/Source/queue.c **** 		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA 
 238              		.loc 1 334 0
 239 0038 FB68     		ldr	r3, [r7, #12]
 240 003a BA68     		ldr	r2, [r7, #8]
 241 003c 02FB03F3 		mul	r3, r2, r3
 242 0040 0133     		adds	r3, r3, #1
 243 0042 7B62     		str	r3, [r7, #36]
 244              	.L13:
 335:../../../FreeRTOS/Source/queue.c **** 	}
 336:../../../FreeRTOS/Source/queue.c **** 
 337:../../../FreeRTOS/Source/queue.c **** 	/* Allocate the new queue structure and storage area. */
 338:../../../FreeRTOS/Source/queue.c **** 	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 245              		.loc 1 338 0
 246 0044 7B6A     		ldr	r3, [r7, #36]
 247 0046 5433     		adds	r3, r3, #84
 248 0048 1846     		mov	r0, r3
ARM GAS  /tmp/cc99qdVQ.s 			page 15


 249 004a FFF7FEFF 		bl	pvPortMalloc
 250 004e F861     		str	r0, [r7, #28]
 339:../../../FreeRTOS/Source/queue.c **** 
 340:../../../FreeRTOS/Source/queue.c **** 	if( pxNewQueue != NULL )
 251              		.loc 1 340 0
 252 0050 FB69     		ldr	r3, [r7, #28]
 253 0052 002B     		cmp	r3, #0
 254 0054 21D0     		beq	.L14
 341:../../../FreeRTOS/Source/queue.c **** 	{
 342:../../../FreeRTOS/Source/queue.c **** 		if( uxItemSize == ( UBaseType_t ) 0 )
 255              		.loc 1 342 0
 256 0056 BB68     		ldr	r3, [r7, #8]
 257 0058 002B     		cmp	r3, #0
 258 005a 03D1     		bne	.L15
 343:../../../FreeRTOS/Source/queue.c **** 		{
 344:../../../FreeRTOS/Source/queue.c **** 			/* No RAM was allocated for the queue storage area, but PC head
 345:../../../FreeRTOS/Source/queue.c **** 			cannot be set to NULL because NULL is used as a key to say the queue
 346:../../../FreeRTOS/Source/queue.c **** 			is used as a mutex.  Therefore just set pcHead to point to the queue
 347:../../../FreeRTOS/Source/queue.c **** 			as a benign value that is known to be within the memory map. */
 348:../../../FreeRTOS/Source/queue.c **** 			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 259              		.loc 1 348 0
 260 005c FB69     		ldr	r3, [r7, #28]
 261 005e FA69     		ldr	r2, [r7, #28]
 262 0060 1A60     		str	r2, [r3]
 263 0062 04E0     		b	.L16
 264              	.L15:
 349:../../../FreeRTOS/Source/queue.c **** 		}
 350:../../../FreeRTOS/Source/queue.c **** 		else
 351:../../../FreeRTOS/Source/queue.c **** 		{
 352:../../../FreeRTOS/Source/queue.c **** 			/* Jump past the queue structure to find the location of the queue
 353:../../../FreeRTOS/Source/queue.c **** 			storage area. */
 354:../../../FreeRTOS/Source/queue.c **** 			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
 265              		.loc 1 354 0
 266 0064 FB69     		ldr	r3, [r7, #28]
 267 0066 03F15402 		add	r2, r3, #84
 268 006a FB69     		ldr	r3, [r7, #28]
 269 006c 1A60     		str	r2, [r3]
 270              	.L16:
 355:../../../FreeRTOS/Source/queue.c **** 		}
 356:../../../FreeRTOS/Source/queue.c **** 
 357:../../../FreeRTOS/Source/queue.c **** 		/* Initialise the queue members as described above where the queue type
 358:../../../FreeRTOS/Source/queue.c **** 		is defined. */
 359:../../../FreeRTOS/Source/queue.c **** 		pxNewQueue->uxLength = uxQueueLength;
 271              		.loc 1 359 0
 272 006e FB69     		ldr	r3, [r7, #28]
 273 0070 FA68     		ldr	r2, [r7, #12]
 274 0072 DA63     		str	r2, [r3, #60]
 360:../../../FreeRTOS/Source/queue.c **** 		pxNewQueue->uxItemSize = uxItemSize;
 275              		.loc 1 360 0
 276 0074 FB69     		ldr	r3, [r7, #28]
 277 0076 BA68     		ldr	r2, [r7, #8]
 278 0078 1A64     		str	r2, [r3, #64]
 361:../../../FreeRTOS/Source/queue.c **** 		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 279              		.loc 1 361 0
 280 007a F869     		ldr	r0, [r7, #28]
 281 007c 0121     		movs	r1, #1
 282 007e FFF7FEFF 		bl	xQueueGenericReset
ARM GAS  /tmp/cc99qdVQ.s 			page 16


 362:../../../FreeRTOS/Source/queue.c **** 
 363:../../../FreeRTOS/Source/queue.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
 364:../../../FreeRTOS/Source/queue.c **** 		{
 365:../../../FreeRTOS/Source/queue.c **** 			pxNewQueue->ucQueueType = ucQueueType;
 283              		.loc 1 365 0
 284 0082 FB69     		ldr	r3, [r7, #28]
 285 0084 FA79     		ldrb	r2, [r7, #7]
 286 0086 83F85020 		strb	r2, [r3, #80]
 366:../../../FreeRTOS/Source/queue.c **** 		}
 367:../../../FreeRTOS/Source/queue.c **** 		#endif /* configUSE_TRACE_FACILITY */
 368:../../../FreeRTOS/Source/queue.c **** 
 369:../../../FreeRTOS/Source/queue.c **** 		#if( configUSE_QUEUE_SETS == 1 )
 370:../../../FreeRTOS/Source/queue.c **** 		{
 371:../../../FreeRTOS/Source/queue.c **** 			pxNewQueue->pxQueueSetContainer = NULL;
 372:../../../FreeRTOS/Source/queue.c **** 		}
 373:../../../FreeRTOS/Source/queue.c **** 		#endif /* configUSE_QUEUE_SETS */
 374:../../../FreeRTOS/Source/queue.c **** 
 375:../../../FreeRTOS/Source/queue.c **** 		traceQUEUE_CREATE( pxNewQueue );
 287              		.loc 1 375 0
 288 008a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 289 008c 7320     		movs	r0, #115
 290 008e F968     		ldr	r1, [r7, #12]
 291 0090 BA68     		ldr	r2, [r7, #8]
 292 0092 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x3
 376:../../../FreeRTOS/Source/queue.c **** 		xReturn = pxNewQueue;
 293              		.loc 1 376 0
 294 0096 FB69     		ldr	r3, [r7, #28]
 295 0098 3B62     		str	r3, [r7, #32]
 296              	.L14:
 377:../../../FreeRTOS/Source/queue.c **** 	}
 378:../../../FreeRTOS/Source/queue.c **** 	else
 379:../../../FreeRTOS/Source/queue.c **** 	{
 380:../../../FreeRTOS/Source/queue.c **** 		mtCOVERAGE_TEST_MARKER();
 381:../../../FreeRTOS/Source/queue.c **** 	}
 382:../../../FreeRTOS/Source/queue.c **** 
 383:../../../FreeRTOS/Source/queue.c **** 	configASSERT( xReturn );
 297              		.loc 1 383 0
 298 009a 3B6A     		ldr	r3, [r7, #32]
 299 009c 002B     		cmp	r3, #0
 300 009e 09D1     		bne	.L17
 301              	.LBB86:
 302              	.LBB87:
 303              		.loc 2 215 0 discriminator 1
 304              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 305 00a0 4FF05003 			mov r3, #80												
 306 00a4 83F31188 		msr basepri, r3											
 307 00a8 BFF36F8F 		isb														
 308 00ac BFF34F8F 		dsb														
 309              	
 310              	@ 0 "" 2
 311              		.thumb
 312 00b0 7B61     		str	r3, [r7, #20]
 313              	.L18:
 314              	.LBE87:
 315              	.LBE86:
 316              		.loc 1 383 0 discriminator 2
 317 00b2 FEE7     		b	.L18
ARM GAS  /tmp/cc99qdVQ.s 			page 17


 318              	.L17:
 384:../../../FreeRTOS/Source/queue.c **** 
 385:../../../FreeRTOS/Source/queue.c **** 	return xReturn;
 319              		.loc 1 385 0
 320 00b4 3B6A     		ldr	r3, [r7, #32]
 386:../../../FreeRTOS/Source/queue.c **** }
 321              		.loc 1 386 0
 322 00b6 1846     		mov	r0, r3
 323 00b8 2837     		adds	r7, r7, #40
 324              	.LCFI8:
 325              		.cfi_def_cfa_offset 8
 326 00ba BD46     		mov	sp, r7
 327              	.LCFI9:
 328              		.cfi_def_cfa_register 13
 329              		@ sp needed
 330 00bc 80BD     		pop	{r7, pc}
 331              		.cfi_endproc
 332              	.LFE5:
 334 00be 00BF     		.section	.text.xQueueCreateMutex,"ax",%progbits
 335              		.align	2
 336              		.global	xQueueCreateMutex
 337              		.thumb
 338              		.thumb_func
 340              	xQueueCreateMutex:
 341              	.LFB6:
 387:../../../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 388:../../../FreeRTOS/Source/queue.c **** 
 389:../../../FreeRTOS/Source/queue.c **** #if ( configUSE_MUTEXES == 1 )
 390:../../../FreeRTOS/Source/queue.c **** 
 391:../../../FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
 392:../../../FreeRTOS/Source/queue.c **** 	{
 342              		.loc 1 392 0
 343              		.cfi_startproc
 344              		@ args = 0, pretend = 0, frame = 16
 345              		@ frame_needed = 1, uses_anonymous_args = 0
 346 0000 80B5     		push	{r7, lr}
 347              	.LCFI10:
 348              		.cfi_def_cfa_offset 8
 349              		.cfi_offset 7, -8
 350              		.cfi_offset 14, -4
 351 0002 84B0     		sub	sp, sp, #16
 352              	.LCFI11:
 353              		.cfi_def_cfa_offset 24
 354 0004 00AF     		add	r7, sp, #0
 355              	.LCFI12:
 356              		.cfi_def_cfa_register 7
 357 0006 0346     		mov	r3, r0
 358 0008 FB71     		strb	r3, [r7, #7]
 393:../../../FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 394:../../../FreeRTOS/Source/queue.c **** 
 395:../../../FreeRTOS/Source/queue.c **** 		/* Prevent compiler warnings about unused parameters if
 396:../../../FreeRTOS/Source/queue.c **** 		configUSE_TRACE_FACILITY does not equal 1. */
 397:../../../FreeRTOS/Source/queue.c **** 		( void ) ucQueueType;
 398:../../../FreeRTOS/Source/queue.c **** 
 399:../../../FreeRTOS/Source/queue.c **** 		/* Allocate the new queue structure. */
 400:../../../FreeRTOS/Source/queue.c **** 		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
 359              		.loc 1 400 0
ARM GAS  /tmp/cc99qdVQ.s 			page 18


 360 000a 5420     		movs	r0, #84
 361 000c FFF7FEFF 		bl	pvPortMalloc
 362 0010 F860     		str	r0, [r7, #12]
 401:../../../FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 363              		.loc 1 401 0
 364 0012 FB68     		ldr	r3, [r7, #12]
 365 0014 002B     		cmp	r3, #0
 366 0016 30D0     		beq	.L21
 402:../../../FreeRTOS/Source/queue.c **** 		{
 403:../../../FreeRTOS/Source/queue.c **** 			/* Information required for priority inheritance. */
 404:../../../FreeRTOS/Source/queue.c **** 			pxNewQueue->pxMutexHolder = NULL;
 367              		.loc 1 404 0
 368 0018 FB68     		ldr	r3, [r7, #12]
 369 001a 0022     		movs	r2, #0
 370 001c 5A60     		str	r2, [r3, #4]
 405:../../../FreeRTOS/Source/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 371              		.loc 1 405 0
 372 001e FB68     		ldr	r3, [r7, #12]
 373 0020 0022     		movs	r2, #0
 374 0022 1A60     		str	r2, [r3]
 406:../../../FreeRTOS/Source/queue.c **** 
 407:../../../FreeRTOS/Source/queue.c **** 			/* Queues used as a mutex no data is actually copied into or out
 408:../../../FreeRTOS/Source/queue.c **** 			of the queue. */
 409:../../../FreeRTOS/Source/queue.c **** 			pxNewQueue->pcWriteTo = NULL;
 375              		.loc 1 409 0
 376 0024 FB68     		ldr	r3, [r7, #12]
 377 0026 0022     		movs	r2, #0
 378 0028 9A60     		str	r2, [r3, #8]
 410:../../../FreeRTOS/Source/queue.c **** 			pxNewQueue->u.pcReadFrom = NULL;
 379              		.loc 1 410 0
 380 002a FB68     		ldr	r3, [r7, #12]
 381 002c 0022     		movs	r2, #0
 382 002e DA60     		str	r2, [r3, #12]
 411:../../../FreeRTOS/Source/queue.c **** 
 412:../../../FreeRTOS/Source/queue.c **** 			/* Each mutex has a length of 1 (like a binary semaphore) and
 413:../../../FreeRTOS/Source/queue.c **** 			an item size of 0 as nothing is actually copied into or out
 414:../../../FreeRTOS/Source/queue.c **** 			of the mutex. */
 415:../../../FreeRTOS/Source/queue.c **** 			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 383              		.loc 1 415 0
 384 0030 FB68     		ldr	r3, [r7, #12]
 385 0032 0022     		movs	r2, #0
 386 0034 9A63     		str	r2, [r3, #56]
 416:../../../FreeRTOS/Source/queue.c **** 			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
 387              		.loc 1 416 0
 388 0036 FB68     		ldr	r3, [r7, #12]
 389 0038 0122     		movs	r2, #1
 390 003a DA63     		str	r2, [r3, #60]
 417:../../../FreeRTOS/Source/queue.c **** 			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
 391              		.loc 1 417 0
 392 003c FB68     		ldr	r3, [r7, #12]
 393 003e 0022     		movs	r2, #0
 394 0040 1A64     		str	r2, [r3, #64]
 418:../../../FreeRTOS/Source/queue.c **** 			pxNewQueue->xRxLock = queueUNLOCKED;
 395              		.loc 1 418 0
 396 0042 FB68     		ldr	r3, [r7, #12]
 397 0044 4FF0FF32 		mov	r2, #-1
 398 0048 5A64     		str	r2, [r3, #68]
ARM GAS  /tmp/cc99qdVQ.s 			page 19


 419:../../../FreeRTOS/Source/queue.c **** 			pxNewQueue->xTxLock = queueUNLOCKED;
 399              		.loc 1 419 0
 400 004a FB68     		ldr	r3, [r7, #12]
 401 004c 4FF0FF32 		mov	r2, #-1
 402 0050 9A64     		str	r2, [r3, #72]
 420:../../../FreeRTOS/Source/queue.c **** 
 421:../../../FreeRTOS/Source/queue.c **** 			#if ( configUSE_TRACE_FACILITY == 1 )
 422:../../../FreeRTOS/Source/queue.c **** 			{
 423:../../../FreeRTOS/Source/queue.c **** 				pxNewQueue->ucQueueType = ucQueueType;
 403              		.loc 1 423 0
 404 0052 FB68     		ldr	r3, [r7, #12]
 405 0054 FA79     		ldrb	r2, [r7, #7]
 406 0056 83F85020 		strb	r2, [r3, #80]
 424:../../../FreeRTOS/Source/queue.c **** 			}
 425:../../../FreeRTOS/Source/queue.c **** 			#endif
 426:../../../FreeRTOS/Source/queue.c **** 
 427:../../../FreeRTOS/Source/queue.c **** 			#if ( configUSE_QUEUE_SETS == 1 )
 428:../../../FreeRTOS/Source/queue.c **** 			{
 429:../../../FreeRTOS/Source/queue.c **** 				pxNewQueue->pxQueueSetContainer = NULL;
 430:../../../FreeRTOS/Source/queue.c **** 			}
 431:../../../FreeRTOS/Source/queue.c **** 			#endif
 432:../../../FreeRTOS/Source/queue.c **** 
 433:../../../FreeRTOS/Source/queue.c **** 			/* Ensure the event queues start with the correct state. */
 434:../../../FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 407              		.loc 1 434 0
 408 005a FB68     		ldr	r3, [r7, #12]
 409 005c 1033     		adds	r3, r3, #16
 410 005e 1846     		mov	r0, r3
 411 0060 FFF7FEFF 		bl	vListInitialise
 435:../../../FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 412              		.loc 1 435 0
 413 0064 FB68     		ldr	r3, [r7, #12]
 414 0066 2433     		adds	r3, r3, #36
 415 0068 1846     		mov	r0, r3
 416 006a FFF7FEFF 		bl	vListInitialise
 436:../../../FreeRTOS/Source/queue.c **** 
 437:../../../FreeRTOS/Source/queue.c **** 			traceCREATE_MUTEX( pxNewQueue );
 438:../../../FreeRTOS/Source/queue.c **** 
 439:../../../FreeRTOS/Source/queue.c **** 			/* Start with the semaphore in the expected state. */
 440:../../../FreeRTOS/Source/queue.c **** 			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 417              		.loc 1 440 0
 418 006e F868     		ldr	r0, [r7, #12]
 419 0070 0021     		movs	r1, #0
 420 0072 0022     		movs	r2, #0
 421 0074 0023     		movs	r3, #0
 422 0076 FFF7FEFF 		bl	xQueueGenericSend
 423              	.L21:
 441:../../../FreeRTOS/Source/queue.c **** 		}
 442:../../../FreeRTOS/Source/queue.c **** 		else
 443:../../../FreeRTOS/Source/queue.c **** 		{
 444:../../../FreeRTOS/Source/queue.c **** 			traceCREATE_MUTEX_FAILED();
 445:../../../FreeRTOS/Source/queue.c **** 		}
 446:../../../FreeRTOS/Source/queue.c **** 
 447:../../../FreeRTOS/Source/queue.c **** 		return pxNewQueue;
 424              		.loc 1 447 0
 425 007a FB68     		ldr	r3, [r7, #12]
 448:../../../FreeRTOS/Source/queue.c **** 	}
ARM GAS  /tmp/cc99qdVQ.s 			page 20


 426              		.loc 1 448 0
 427 007c 1846     		mov	r0, r3
 428 007e 1037     		adds	r7, r7, #16
 429              	.LCFI13:
 430              		.cfi_def_cfa_offset 8
 431 0080 BD46     		mov	sp, r7
 432              	.LCFI14:
 433              		.cfi_def_cfa_register 13
 434              		@ sp needed
 435 0082 80BD     		pop	{r7, pc}
 436              		.cfi_endproc
 437              	.LFE6:
 439              		.section	.text.xQueueGiveMutexRecursive,"ax",%progbits
 440              		.align	2
 441              		.global	xQueueGiveMutexRecursive
 442              		.thumb
 443              		.thumb_func
 445              	xQueueGiveMutexRecursive:
 446              	.LFB7:
 449:../../../FreeRTOS/Source/queue.c **** 
 450:../../../FreeRTOS/Source/queue.c **** #endif /* configUSE_MUTEXES */
 451:../../../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 452:../../../FreeRTOS/Source/queue.c **** 
 453:../../../FreeRTOS/Source/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 454:../../../FreeRTOS/Source/queue.c **** 
 455:../../../FreeRTOS/Source/queue.c **** 	void* xQueueGetMutexHolder( QueueHandle_t xSemaphore )
 456:../../../FreeRTOS/Source/queue.c **** 	{
 457:../../../FreeRTOS/Source/queue.c **** 	void *pxReturn;
 458:../../../FreeRTOS/Source/queue.c **** 
 459:../../../FreeRTOS/Source/queue.c **** 		/* This function is called by xSemaphoreGetMutexHolder(), and should not
 460:../../../FreeRTOS/Source/queue.c **** 		be called directly.  Note:  This is a good way of determining if the
 461:../../../FreeRTOS/Source/queue.c **** 		calling task is the mutex holder, but not a good way of determining the
 462:../../../FreeRTOS/Source/queue.c **** 		identity of the mutex holder, as the holder may change between the
 463:../../../FreeRTOS/Source/queue.c **** 		following critical section exiting and the function returning. */
 464:../../../FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
 465:../../../FreeRTOS/Source/queue.c **** 		{
 466:../../../FreeRTOS/Source/queue.c **** 			if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 467:../../../FreeRTOS/Source/queue.c **** 			{
 468:../../../FreeRTOS/Source/queue.c **** 				pxReturn = ( void * ) ( ( Queue_t * ) xSemaphore )->pxMutexHolder;
 469:../../../FreeRTOS/Source/queue.c **** 			}
 470:../../../FreeRTOS/Source/queue.c **** 			else
 471:../../../FreeRTOS/Source/queue.c **** 			{
 472:../../../FreeRTOS/Source/queue.c **** 				pxReturn = NULL;
 473:../../../FreeRTOS/Source/queue.c **** 			}
 474:../../../FreeRTOS/Source/queue.c **** 		}
 475:../../../FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
 476:../../../FreeRTOS/Source/queue.c **** 
 477:../../../FreeRTOS/Source/queue.c **** 		return pxReturn;
 478:../../../FreeRTOS/Source/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 479:../../../FreeRTOS/Source/queue.c **** 
 480:../../../FreeRTOS/Source/queue.c **** #endif
 481:../../../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 482:../../../FreeRTOS/Source/queue.c **** 
 483:../../../FreeRTOS/Source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 484:../../../FreeRTOS/Source/queue.c **** 
 485:../../../FreeRTOS/Source/queue.c **** 	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
 486:../../../FreeRTOS/Source/queue.c **** 	{
ARM GAS  /tmp/cc99qdVQ.s 			page 21


 447              		.loc 1 486 0
 448              		.cfi_startproc
 449              		@ args = 0, pretend = 0, frame = 24
 450              		@ frame_needed = 1, uses_anonymous_args = 0
 451 0000 90B5     		push	{r4, r7, lr}
 452              	.LCFI15:
 453              		.cfi_def_cfa_offset 12
 454              		.cfi_offset 4, -12
 455              		.cfi_offset 7, -8
 456              		.cfi_offset 14, -4
 457 0002 87B0     		sub	sp, sp, #28
 458              	.LCFI16:
 459              		.cfi_def_cfa_offset 40
 460 0004 00AF     		add	r7, sp, #0
 461              	.LCFI17:
 462              		.cfi_def_cfa_register 7
 463 0006 7860     		str	r0, [r7, #4]
 487:../../../FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
 488:../../../FreeRTOS/Source/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 464              		.loc 1 488 0
 465 0008 7B68     		ldr	r3, [r7, #4]
 466 000a 3B61     		str	r3, [r7, #16]
 489:../../../FreeRTOS/Source/queue.c **** 
 490:../../../FreeRTOS/Source/queue.c **** 		configASSERT( pxMutex );
 467              		.loc 1 490 0
 468 000c 3B69     		ldr	r3, [r7, #16]
 469 000e 002B     		cmp	r3, #0
 470 0010 09D1     		bne	.L24
 471              	.LBB88:
 472              	.LBB89:
 473              		.loc 2 215 0 discriminator 1
 474              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 475 0012 4FF05003 			mov r3, #80												
 476 0016 83F31188 		msr basepri, r3											
 477 001a BFF36F8F 		isb														
 478 001e BFF34F8F 		dsb														
 479              	
 480              	@ 0 "" 2
 481              		.thumb
 482 0022 FB60     		str	r3, [r7, #12]
 483              	.L25:
 484              	.LBE89:
 485              	.LBE88:
 486              		.loc 1 490 0 discriminator 1
 487 0024 FEE7     		b	.L25
 488              	.L24:
 491:../../../FreeRTOS/Source/queue.c **** 
 492:../../../FreeRTOS/Source/queue.c **** 		/* If this is the task that holds the mutex then pxMutexHolder will not
 493:../../../FreeRTOS/Source/queue.c **** 		change outside of this task.  If this task does not hold the mutex then
 494:../../../FreeRTOS/Source/queue.c **** 		pxMutexHolder can never coincidentally equal the tasks handle, and as
 495:../../../FreeRTOS/Source/queue.c **** 		this is the only condition we are interested in it does not matter if
 496:../../../FreeRTOS/Source/queue.c **** 		pxMutexHolder is accessed simultaneously by another task.  Therefore no
 497:../../../FreeRTOS/Source/queue.c **** 		mutual exclusion is required to test the pxMutexHolder variable. */
 498:../../../FreeRTOS/Source/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redunda
 489              		.loc 1 498 0
 490 0026 3B69     		ldr	r3, [r7, #16]
 491 0028 5C68     		ldr	r4, [r3, #4]
ARM GAS  /tmp/cc99qdVQ.s 			page 22


 492 002a FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 493 002e 0346     		mov	r3, r0
 494 0030 9C42     		cmp	r4, r3
 495 0032 11D1     		bne	.L26
 499:../../../FreeRTOS/Source/queue.c **** 		{
 500:../../../FreeRTOS/Source/queue.c **** 			traceGIVE_MUTEX_RECURSIVE( pxMutex );
 501:../../../FreeRTOS/Source/queue.c **** 
 502:../../../FreeRTOS/Source/queue.c **** 			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
 503:../../../FreeRTOS/Source/queue.c **** 			the task handle, therefore no underflow check is required.  Also,
 504:../../../FreeRTOS/Source/queue.c **** 			uxRecursiveCallCount is only modified by the mutex holder, and as
 505:../../../FreeRTOS/Source/queue.c **** 			there can only be one, no mutual exclusion is required to modify the
 506:../../../FreeRTOS/Source/queue.c **** 			uxRecursiveCallCount member. */
 507:../../../FreeRTOS/Source/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )--;
 496              		.loc 1 507 0
 497 0034 3B69     		ldr	r3, [r7, #16]
 498 0036 DB68     		ldr	r3, [r3, #12]
 499 0038 5A1E     		subs	r2, r3, #1
 500 003a 3B69     		ldr	r3, [r7, #16]
 501 003c DA60     		str	r2, [r3, #12]
 508:../../../FreeRTOS/Source/queue.c **** 
 509:../../../FreeRTOS/Source/queue.c **** 			/* Have we unwound the call count? */
 510:../../../FreeRTOS/Source/queue.c **** 			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 502              		.loc 1 510 0
 503 003e 3B69     		ldr	r3, [r7, #16]
 504 0040 DB68     		ldr	r3, [r3, #12]
 505 0042 002B     		cmp	r3, #0
 506 0044 05D1     		bne	.L27
 511:../../../FreeRTOS/Source/queue.c **** 			{
 512:../../../FreeRTOS/Source/queue.c **** 				/* Return the mutex.  This will automatically unblock any other
 513:../../../FreeRTOS/Source/queue.c **** 				task that might be waiting to access the mutex. */
 514:../../../FreeRTOS/Source/queue.c **** 				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 507              		.loc 1 514 0
 508 0046 3869     		ldr	r0, [r7, #16]
 509 0048 0021     		movs	r1, #0
 510 004a 0022     		movs	r2, #0
 511 004c 0023     		movs	r3, #0
 512 004e FFF7FEFF 		bl	xQueueGenericSend
 513              	.L27:
 515:../../../FreeRTOS/Source/queue.c **** 			}
 516:../../../FreeRTOS/Source/queue.c **** 			else
 517:../../../FreeRTOS/Source/queue.c **** 			{
 518:../../../FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 519:../../../FreeRTOS/Source/queue.c **** 			}
 520:../../../FreeRTOS/Source/queue.c **** 
 521:../../../FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 514              		.loc 1 521 0
 515 0052 0123     		movs	r3, #1
 516 0054 7B61     		str	r3, [r7, #20]
 517 0056 01E0     		b	.L28
 518              	.L26:
 522:../../../FreeRTOS/Source/queue.c **** 		}
 523:../../../FreeRTOS/Source/queue.c **** 		else
 524:../../../FreeRTOS/Source/queue.c **** 		{
 525:../../../FreeRTOS/Source/queue.c **** 			/* The mutex cannot be given because the calling task is not the
 526:../../../FreeRTOS/Source/queue.c **** 			holder. */
 527:../../../FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
 519              		.loc 1 527 0
ARM GAS  /tmp/cc99qdVQ.s 			page 23


 520 0058 0023     		movs	r3, #0
 521 005a 7B61     		str	r3, [r7, #20]
 522              	.L28:
 528:../../../FreeRTOS/Source/queue.c **** 
 529:../../../FreeRTOS/Source/queue.c **** 			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 530:../../../FreeRTOS/Source/queue.c **** 		}
 531:../../../FreeRTOS/Source/queue.c **** 
 532:../../../FreeRTOS/Source/queue.c **** 		return xReturn;
 523              		.loc 1 532 0
 524 005c 7B69     		ldr	r3, [r7, #20]
 533:../../../FreeRTOS/Source/queue.c **** 	}
 525              		.loc 1 533 0
 526 005e 1846     		mov	r0, r3
 527 0060 1C37     		adds	r7, r7, #28
 528              	.LCFI18:
 529              		.cfi_def_cfa_offset 12
 530 0062 BD46     		mov	sp, r7
 531              	.LCFI19:
 532              		.cfi_def_cfa_register 13
 533              		@ sp needed
 534 0064 90BD     		pop	{r4, r7, pc}
 535              		.cfi_endproc
 536              	.LFE7:
 538 0066 00BF     		.section	.text.xQueueTakeMutexRecursive,"ax",%progbits
 539              		.align	2
 540              		.global	xQueueTakeMutexRecursive
 541              		.thumb
 542              		.thumb_func
 544              	xQueueTakeMutexRecursive:
 545              	.LFB8:
 534:../../../FreeRTOS/Source/queue.c **** 
 535:../../../FreeRTOS/Source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 536:../../../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 537:../../../FreeRTOS/Source/queue.c **** 
 538:../../../FreeRTOS/Source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 539:../../../FreeRTOS/Source/queue.c **** 
 540:../../../FreeRTOS/Source/queue.c **** 	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
 541:../../../FreeRTOS/Source/queue.c **** 	{
 546              		.loc 1 541 0
 547              		.cfi_startproc
 548              		@ args = 0, pretend = 0, frame = 24
 549              		@ frame_needed = 1, uses_anonymous_args = 0
 550 0000 90B5     		push	{r4, r7, lr}
 551              	.LCFI20:
 552              		.cfi_def_cfa_offset 12
 553              		.cfi_offset 4, -12
 554              		.cfi_offset 7, -8
 555              		.cfi_offset 14, -4
 556 0002 87B0     		sub	sp, sp, #28
 557              	.LCFI21:
 558              		.cfi_def_cfa_offset 40
 559 0004 00AF     		add	r7, sp, #0
 560              	.LCFI22:
 561              		.cfi_def_cfa_register 7
 562 0006 7860     		str	r0, [r7, #4]
 563 0008 3960     		str	r1, [r7]
 542:../../../FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
ARM GAS  /tmp/cc99qdVQ.s 			page 24


 543:../../../FreeRTOS/Source/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 564              		.loc 1 543 0
 565 000a 7B68     		ldr	r3, [r7, #4]
 566 000c 3B61     		str	r3, [r7, #16]
 544:../../../FreeRTOS/Source/queue.c **** 
 545:../../../FreeRTOS/Source/queue.c **** 		configASSERT( pxMutex );
 567              		.loc 1 545 0
 568 000e 3B69     		ldr	r3, [r7, #16]
 569 0010 002B     		cmp	r3, #0
 570 0012 09D1     		bne	.L31
 571              	.LBB90:
 572              	.LBB91:
 573              		.loc 2 215 0 discriminator 1
 574              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 575 0014 4FF05003 			mov r3, #80												
 576 0018 83F31188 		msr basepri, r3											
 577 001c BFF36F8F 		isb														
 578 0020 BFF34F8F 		dsb														
 579              	
 580              	@ 0 "" 2
 581              		.thumb
 582 0024 FB60     		str	r3, [r7, #12]
 583              	.L32:
 584              	.LBE91:
 585              	.LBE90:
 586              		.loc 1 545 0 discriminator 1
 587 0026 FEE7     		b	.L32
 588              	.L31:
 546:../../../FreeRTOS/Source/queue.c **** 
 547:../../../FreeRTOS/Source/queue.c **** 		/* Comments regarding mutual exclusion as per those within
 548:../../../FreeRTOS/Source/queue.c **** 		xQueueGiveMutexRecursive(). */
 549:../../../FreeRTOS/Source/queue.c **** 
 550:../../../FreeRTOS/Source/queue.c **** 		traceTAKE_MUTEX_RECURSIVE( pxMutex );
 551:../../../FreeRTOS/Source/queue.c **** 
 552:../../../FreeRTOS/Source/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not r
 589              		.loc 1 552 0
 590 0028 3B69     		ldr	r3, [r7, #16]
 591 002a 5C68     		ldr	r4, [r3, #4]
 592 002c FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 593 0030 0346     		mov	r3, r0
 594 0032 9C42     		cmp	r4, r3
 595 0034 07D1     		bne	.L33
 553:../../../FreeRTOS/Source/queue.c **** 		{
 554:../../../FreeRTOS/Source/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )++;
 596              		.loc 1 554 0
 597 0036 3B69     		ldr	r3, [r7, #16]
 598 0038 DB68     		ldr	r3, [r3, #12]
 599 003a 5A1C     		adds	r2, r3, #1
 600 003c 3B69     		ldr	r3, [r7, #16]
 601 003e DA60     		str	r2, [r3, #12]
 555:../../../FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 602              		.loc 1 555 0
 603 0040 0123     		movs	r3, #1
 604 0042 7B61     		str	r3, [r7, #20]
 605 0044 0EE0     		b	.L34
 606              	.L33:
 556:../../../FreeRTOS/Source/queue.c **** 		}
ARM GAS  /tmp/cc99qdVQ.s 			page 25


 557:../../../FreeRTOS/Source/queue.c **** 		else
 558:../../../FreeRTOS/Source/queue.c **** 		{
 559:../../../FreeRTOS/Source/queue.c **** 			xReturn = xQueueGenericReceive( pxMutex, NULL, xTicksToWait, pdFALSE );
 607              		.loc 1 559 0
 608 0046 3869     		ldr	r0, [r7, #16]
 609 0048 0021     		movs	r1, #0
 610 004a 3A68     		ldr	r2, [r7]
 611 004c 0023     		movs	r3, #0
 612 004e FFF7FEFF 		bl	xQueueGenericReceive
 613 0052 7861     		str	r0, [r7, #20]
 560:../../../FreeRTOS/Source/queue.c **** 
 561:../../../FreeRTOS/Source/queue.c **** 			/* pdPASS will only be returned if the mutex was successfully
 562:../../../FreeRTOS/Source/queue.c **** 			obtained.  The calling task may have entered the Blocked state
 563:../../../FreeRTOS/Source/queue.c **** 			before reaching here. */
 564:../../../FreeRTOS/Source/queue.c **** 			if( xReturn == pdPASS )
 614              		.loc 1 564 0
 615 0054 7B69     		ldr	r3, [r7, #20]
 616 0056 012B     		cmp	r3, #1
 617 0058 04D1     		bne	.L34
 565:../../../FreeRTOS/Source/queue.c **** 			{
 566:../../../FreeRTOS/Source/queue.c **** 				( pxMutex->u.uxRecursiveCallCount )++;
 618              		.loc 1 566 0
 619 005a 3B69     		ldr	r3, [r7, #16]
 620 005c DB68     		ldr	r3, [r3, #12]
 621 005e 5A1C     		adds	r2, r3, #1
 622 0060 3B69     		ldr	r3, [r7, #16]
 623 0062 DA60     		str	r2, [r3, #12]
 624              	.L34:
 567:../../../FreeRTOS/Source/queue.c **** 			}
 568:../../../FreeRTOS/Source/queue.c **** 			else
 569:../../../FreeRTOS/Source/queue.c **** 			{
 570:../../../FreeRTOS/Source/queue.c **** 				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
 571:../../../FreeRTOS/Source/queue.c **** 			}
 572:../../../FreeRTOS/Source/queue.c **** 		}
 573:../../../FreeRTOS/Source/queue.c **** 
 574:../../../FreeRTOS/Source/queue.c **** 		return xReturn;
 625              		.loc 1 574 0
 626 0064 7B69     		ldr	r3, [r7, #20]
 575:../../../FreeRTOS/Source/queue.c **** 	}
 627              		.loc 1 575 0
 628 0066 1846     		mov	r0, r3
 629 0068 1C37     		adds	r7, r7, #28
 630              	.LCFI23:
 631              		.cfi_def_cfa_offset 12
 632 006a BD46     		mov	sp, r7
 633              	.LCFI24:
 634              		.cfi_def_cfa_register 13
 635              		@ sp needed
 636 006c 90BD     		pop	{r4, r7, pc}
 637              		.cfi_endproc
 638              	.LFE8:
 640 006e 00BF     		.section	.text.xQueueCreateCountingSemaphore,"ax",%progbits
 641              		.align	2
 642              		.global	xQueueCreateCountingSemaphore
 643              		.thumb
 644              		.thumb_func
 646              	xQueueCreateCountingSemaphore:
ARM GAS  /tmp/cc99qdVQ.s 			page 26


 647              	.LFB9:
 576:../../../FreeRTOS/Source/queue.c **** 
 577:../../../FreeRTOS/Source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 578:../../../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 579:../../../FreeRTOS/Source/queue.c **** 
 580:../../../FreeRTOS/Source/queue.c **** #if ( configUSE_COUNTING_SEMAPHORES == 1 )
 581:../../../FreeRTOS/Source/queue.c **** 
 582:../../../FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxIni
 583:../../../FreeRTOS/Source/queue.c **** 	{
 648              		.loc 1 583 0
 649              		.cfi_startproc
 650              		@ args = 0, pretend = 0, frame = 24
 651              		@ frame_needed = 1, uses_anonymous_args = 0
 652 0000 80B5     		push	{r7, lr}
 653              	.LCFI25:
 654              		.cfi_def_cfa_offset 8
 655              		.cfi_offset 7, -8
 656              		.cfi_offset 14, -4
 657 0002 86B0     		sub	sp, sp, #24
 658              	.LCFI26:
 659              		.cfi_def_cfa_offset 32
 660 0004 00AF     		add	r7, sp, #0
 661              	.LCFI27:
 662              		.cfi_def_cfa_register 7
 663 0006 7860     		str	r0, [r7, #4]
 664 0008 3960     		str	r1, [r7]
 584:../../../FreeRTOS/Source/queue.c **** 	QueueHandle_t xHandle;
 585:../../../FreeRTOS/Source/queue.c **** 
 586:../../../FreeRTOS/Source/queue.c **** 		configASSERT( uxMaxCount != 0 );
 665              		.loc 1 586 0
 666 000a 7B68     		ldr	r3, [r7, #4]
 667 000c 002B     		cmp	r3, #0
 668 000e 09D1     		bne	.L37
 669              	.LBB92:
 670              	.LBB93:
 671              		.loc 2 215 0 discriminator 1
 672              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 673 0010 4FF05003 			mov r3, #80												
 674 0014 83F31188 		msr basepri, r3											
 675 0018 BFF36F8F 		isb														
 676 001c BFF34F8F 		dsb														
 677              	
 678              	@ 0 "" 2
 679              		.thumb
 680 0020 3B61     		str	r3, [r7, #16]
 681              	.L38:
 682              	.LBE93:
 683              	.LBE92:
 684              		.loc 1 586 0 discriminator 1
 685 0022 FEE7     		b	.L38
 686              	.L37:
 587:../../../FreeRTOS/Source/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 687              		.loc 1 587 0
 688 0024 3A68     		ldr	r2, [r7]
 689 0026 7B68     		ldr	r3, [r7, #4]
 690 0028 9A42     		cmp	r2, r3
 691 002a 09D9     		bls	.L39
ARM GAS  /tmp/cc99qdVQ.s 			page 27


 692              	.LBB94:
 693              	.LBB95:
 694              		.loc 2 215 0 discriminator 1
 695              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 696 002c 4FF05003 			mov r3, #80												
 697 0030 83F31188 		msr basepri, r3											
 698 0034 BFF36F8F 		isb														
 699 0038 BFF34F8F 		dsb														
 700              	
 701              	@ 0 "" 2
 702              		.thumb
 703 003c FB60     		str	r3, [r7, #12]
 704              	.L40:
 705              	.LBE95:
 706              	.LBE94:
 707              		.loc 1 587 0 discriminator 2
 708 003e FEE7     		b	.L40
 709              	.L39:
 588:../../../FreeRTOS/Source/queue.c **** 
 589:../../../FreeRTOS/Source/queue.c **** 		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUN
 710              		.loc 1 589 0
 711 0040 7868     		ldr	r0, [r7, #4]
 712 0042 0021     		movs	r1, #0
 713 0044 0222     		movs	r2, #2
 714 0046 FFF7FEFF 		bl	xQueueGenericCreate
 715 004a 7861     		str	r0, [r7, #20]
 590:../../../FreeRTOS/Source/queue.c **** 
 591:../../../FreeRTOS/Source/queue.c **** 		if( xHandle != NULL )
 716              		.loc 1 591 0
 717 004c 7B69     		ldr	r3, [r7, #20]
 718 004e 002B     		cmp	r3, #0
 719 0050 02D0     		beq	.L41
 592:../../../FreeRTOS/Source/queue.c **** 		{
 593:../../../FreeRTOS/Source/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 720              		.loc 1 593 0
 721 0052 7B69     		ldr	r3, [r7, #20]
 722 0054 3A68     		ldr	r2, [r7]
 723 0056 9A63     		str	r2, [r3, #56]
 724              	.L41:
 594:../../../FreeRTOS/Source/queue.c **** 
 595:../../../FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 596:../../../FreeRTOS/Source/queue.c **** 		}
 597:../../../FreeRTOS/Source/queue.c **** 		else
 598:../../../FreeRTOS/Source/queue.c **** 		{
 599:../../../FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 600:../../../FreeRTOS/Source/queue.c **** 		}
 601:../../../FreeRTOS/Source/queue.c **** 
 602:../../../FreeRTOS/Source/queue.c **** 		configASSERT( xHandle );
 725              		.loc 1 602 0
 726 0058 7B69     		ldr	r3, [r7, #20]
 727 005a 002B     		cmp	r3, #0
 728 005c 09D1     		bne	.L42
 729              	.LBB96:
 730              	.LBB97:
 731              		.loc 2 215 0 discriminator 1
 732              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 733 005e 4FF05003 			mov r3, #80												
ARM GAS  /tmp/cc99qdVQ.s 			page 28


 734 0062 83F31188 		msr basepri, r3											
 735 0066 BFF36F8F 		isb														
 736 006a BFF34F8F 		dsb														
 737              	
 738              	@ 0 "" 2
 739              		.thumb
 740 006e BB60     		str	r3, [r7, #8]
 741              	.L43:
 742              	.LBE97:
 743              	.LBE96:
 744              		.loc 1 602 0 discriminator 3
 745 0070 FEE7     		b	.L43
 746              	.L42:
 603:../../../FreeRTOS/Source/queue.c **** 		return xHandle;
 747              		.loc 1 603 0
 748 0072 7B69     		ldr	r3, [r7, #20]
 604:../../../FreeRTOS/Source/queue.c **** 	}
 749              		.loc 1 604 0
 750 0074 1846     		mov	r0, r3
 751 0076 1837     		adds	r7, r7, #24
 752              	.LCFI28:
 753              		.cfi_def_cfa_offset 8
 754 0078 BD46     		mov	sp, r7
 755              	.LCFI29:
 756              		.cfi_def_cfa_register 13
 757              		@ sp needed
 758 007a 80BD     		pop	{r7, pc}
 759              		.cfi_endproc
 760              	.LFE9:
 762              		.section	.text.xQueueGenericSend,"ax",%progbits
 763              		.align	2
 764              		.global	xQueueGenericSend
 765              		.thumb
 766              		.thumb_func
 768              	xQueueGenericSend:
 769              	.LFB10:
 605:../../../FreeRTOS/Source/queue.c **** 
 606:../../../FreeRTOS/Source/queue.c **** #endif /* configUSE_COUNTING_SEMAPHORES */
 607:../../../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 608:../../../FreeRTOS/Source/queue.c **** 
 609:../../../FreeRTOS/Source/queue.c **** BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xT
 610:../../../FreeRTOS/Source/queue.c **** {
 770              		.loc 1 610 0
 771              		.cfi_startproc
 772              		@ args = 0, pretend = 0, frame = 56
 773              		@ frame_needed = 1, uses_anonymous_args = 0
 774 0000 90B5     		push	{r4, r7, lr}
 775              	.LCFI30:
 776              		.cfi_def_cfa_offset 12
 777              		.cfi_offset 4, -12
 778              		.cfi_offset 7, -8
 779              		.cfi_offset 14, -4
 780 0002 91B0     		sub	sp, sp, #68
 781              	.LCFI31:
 782              		.cfi_def_cfa_offset 80
 783 0004 02AF     		add	r7, sp, #8
 784              	.LCFI32:
ARM GAS  /tmp/cc99qdVQ.s 			page 29


 785              		.cfi_def_cfa 7, 72
 786 0006 F860     		str	r0, [r7, #12]
 787 0008 B960     		str	r1, [r7, #8]
 788 000a 7A60     		str	r2, [r7, #4]
 789 000c 3B60     		str	r3, [r7]
 611:../../../FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 790              		.loc 1 611 0
 791 000e 0023     		movs	r3, #0
 792 0010 7B63     		str	r3, [r7, #52]
 612:../../../FreeRTOS/Source/queue.c **** TimeOut_t xTimeOut;
 613:../../../FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 793              		.loc 1 613 0
 794 0012 FB68     		ldr	r3, [r7, #12]
 795 0014 3B63     		str	r3, [r7, #48]
 614:../../../FreeRTOS/Source/queue.c **** 
 615:../../../FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 796              		.loc 1 615 0
 797 0016 3B6B     		ldr	r3, [r7, #48]
 798 0018 002B     		cmp	r3, #0
 799 001a 09D1     		bne	.L46
 800              	.LBB98:
 801              	.LBB99:
 802              		.loc 2 215 0 discriminator 1
 803              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 804 001c 4FF05003 			mov r3, #80												
 805 0020 83F31188 		msr basepri, r3											
 806 0024 BFF36F8F 		isb														
 807 0028 BFF34F8F 		dsb														
 808              	
 809              	@ 0 "" 2
 810              		.thumb
 811 002c BB62     		str	r3, [r7, #40]
 812              	.L47:
 813              	.LBE99:
 814              	.LBE98:
 815              		.loc 1 615 0 discriminator 1
 816 002e FEE7     		b	.L47
 817              	.L46:
 616:../../../FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 818              		.loc 1 616 0
 819 0030 BB68     		ldr	r3, [r7, #8]
 820 0032 002B     		cmp	r3, #0
 821 0034 03D1     		bne	.L48
 822              		.loc 1 616 0 is_stmt 0 discriminator 2
 823 0036 3B6B     		ldr	r3, [r7, #48]
 824 0038 1B6C     		ldr	r3, [r3, #64]
 825 003a 002B     		cmp	r3, #0
 826 003c 01D1     		bne	.L49
 827              	.L48:
 828              		.loc 1 616 0 discriminator 3
 829 003e 0123     		movs	r3, #1
 830 0040 00E0     		b	.L50
 831              	.L49:
 832              		.loc 1 616 0 discriminator 4
 833 0042 0023     		movs	r3, #0
 834              	.L50:
 835              		.loc 1 616 0 discriminator 6
ARM GAS  /tmp/cc99qdVQ.s 			page 30


 836 0044 002B     		cmp	r3, #0
 837 0046 09D1     		bne	.L51
 838              	.LBB100:
 839              	.LBB101:
 840              		.loc 2 215 0 is_stmt 1 discriminator 7
 841              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 842 0048 4FF05003 			mov r3, #80												
 843 004c 83F31188 		msr basepri, r3											
 844 0050 BFF36F8F 		isb														
 845 0054 BFF34F8F 		dsb														
 846              	
 847              	@ 0 "" 2
 848              		.thumb
 849 0058 7B62     		str	r3, [r7, #36]
 850              	.L52:
 851              	.LBE101:
 852              	.LBE100:
 853              		.loc 1 616 0 discriminator 2
 854 005a FEE7     		b	.L52
 855              	.L51:
 617:../../../FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 856              		.loc 1 617 0
 857 005c 3B68     		ldr	r3, [r7]
 858 005e 022B     		cmp	r3, #2
 859 0060 03D1     		bne	.L53
 860              		.loc 1 617 0 is_stmt 0 discriminator 2
 861 0062 3B6B     		ldr	r3, [r7, #48]
 862 0064 DB6B     		ldr	r3, [r3, #60]
 863 0066 012B     		cmp	r3, #1
 864 0068 01D1     		bne	.L54
 865              	.L53:
 866              		.loc 1 617 0 discriminator 3
 867 006a 0123     		movs	r3, #1
 868 006c 00E0     		b	.L55
 869              	.L54:
 870              		.loc 1 617 0 discriminator 4
 871 006e 0023     		movs	r3, #0
 872              	.L55:
 873              		.loc 1 617 0 discriminator 6
 874 0070 002B     		cmp	r3, #0
 875 0072 09D1     		bne	.L56
 876              	.LBB102:
 877              	.LBB103:
 878              		.loc 2 215 0 is_stmt 1 discriminator 7
 879              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 880 0074 4FF05003 			mov r3, #80												
 881 0078 83F31188 		msr basepri, r3											
 882 007c BFF36F8F 		isb														
 883 0080 BFF34F8F 		dsb														
 884              	
 885              	@ 0 "" 2
 886              		.thumb
 887 0084 3B62     		str	r3, [r7, #32]
 888              	.L57:
 889              	.LBE103:
 890              	.LBE102:
 891              		.loc 1 617 0 discriminator 3
ARM GAS  /tmp/cc99qdVQ.s 			page 31


 892 0086 FEE7     		b	.L57
 893              	.L56:
 618:../../../FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 619:../../../FreeRTOS/Source/queue.c **** 	{
 620:../../../FreeRTOS/Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 894              		.loc 1 620 0
 895 0088 FFF7FEFF 		bl	xTaskGetSchedulerState
 896 008c 0346     		mov	r3, r0
 897 008e 002B     		cmp	r3, #0
 898 0090 02D1     		bne	.L58
 899              		.loc 1 620 0 is_stmt 0 discriminator 2
 900 0092 7B68     		ldr	r3, [r7, #4]
 901 0094 002B     		cmp	r3, #0
 902 0096 01D1     		bne	.L59
 903              	.L58:
 904              		.loc 1 620 0 discriminator 3
 905 0098 0123     		movs	r3, #1
 906 009a 00E0     		b	.L60
 907              	.L59:
 908              		.loc 1 620 0 discriminator 4
 909 009c 0023     		movs	r3, #0
 910              	.L60:
 911              		.loc 1 620 0 discriminator 6
 912 009e 002B     		cmp	r3, #0
 913 00a0 09D1     		bne	.L61
 914              	.LBB104:
 915              	.LBB105:
 916              		.loc 2 215 0 is_stmt 1 discriminator 7
 917              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 918 00a2 4FF05003 			mov r3, #80												
 919 00a6 83F31188 		msr basepri, r3											
 920 00aa BFF36F8F 		isb														
 921 00ae BFF34F8F 		dsb														
 922              	
 923              	@ 0 "" 2
 924              		.thumb
 925 00b2 FB61     		str	r3, [r7, #28]
 926              	.L62:
 927              	.LBE105:
 928              	.LBE104:
 929              		.loc 1 620 0 discriminator 4
 930 00b4 FEE7     		b	.L62
 931              	.L61:
 621:../../../FreeRTOS/Source/queue.c **** 	}
 622:../../../FreeRTOS/Source/queue.c **** 	#endif
 623:../../../FreeRTOS/Source/queue.c **** 
 624:../../../FreeRTOS/Source/queue.c **** 
 625:../../../FreeRTOS/Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
 626:../../../FreeRTOS/Source/queue.c **** 	statements within the function itself.  This is done in the interest
 627:../../../FreeRTOS/Source/queue.c **** 	of execution time efficiency. */
 628:../../../FreeRTOS/Source/queue.c **** 	for( ;; )
 629:../../../FreeRTOS/Source/queue.c **** 	{
 630:../../../FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
 932              		.loc 1 630 0
 933 00b6 FFF7FEFF 		bl	vPortEnterCritical
 631:../../../FreeRTOS/Source/queue.c **** 		{
 632:../../../FreeRTOS/Source/queue.c **** 			/* Is there room on the queue now?  The running task must be the
ARM GAS  /tmp/cc99qdVQ.s 			page 32


 633:../../../FreeRTOS/Source/queue.c **** 			highest priority task wanting to access the queue.  If the head item
 634:../../../FreeRTOS/Source/queue.c **** 			in the queue is to be overwritten then it does not matter if the
 635:../../../FreeRTOS/Source/queue.c **** 			queue is full. */
 636:../../../FreeRTOS/Source/queue.c **** 			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 934              		.loc 1 636 0
 935 00ba 3B6B     		ldr	r3, [r7, #48]
 936 00bc 9A6B     		ldr	r2, [r3, #56]
 937 00be 3B6B     		ldr	r3, [r7, #48]
 938 00c0 DB6B     		ldr	r3, [r3, #60]
 939 00c2 9A42     		cmp	r2, r3
 940 00c4 02D3     		bcc	.L63
 941              		.loc 1 636 0 is_stmt 0 discriminator 1
 942 00c6 3B68     		ldr	r3, [r7]
 943 00c8 022B     		cmp	r3, #2
 944 00ca 36D1     		bne	.L64
 945              	.L63:
 637:../../../FreeRTOS/Source/queue.c **** 			{
 638:../../../FreeRTOS/Source/queue.c **** 				traceQUEUE_SEND( pxQueue );
 946              		.loc 1 638 0 is_stmt 1
 947 00cc 3B6B     		ldr	r3, [r7, #48]
 948 00ce 1846     		mov	r0, r3
 949 00d0 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 950 00d4 0146     		mov	r1, r0
 951 00d6 BA68     		ldr	r2, [r7, #8]
 952 00d8 7C68     		ldr	r4, [r7, #4]
 953 00da 3B68     		ldr	r3, [r7]
 954 00dc 0093     		str	r3, [sp]
 955 00de 5A20     		movs	r0, #90
 956 00e0 2346     		mov	r3, r4
 957 00e2 FFF7FEFF 		bl	SYSVIEW_RecordU32x4
 639:../../../FreeRTOS/Source/queue.c **** 				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 958              		.loc 1 639 0
 959 00e6 386B     		ldr	r0, [r7, #48]
 960 00e8 B968     		ldr	r1, [r7, #8]
 961 00ea 3A68     		ldr	r2, [r7]
 962 00ec FFF7FEFF 		bl	prvCopyDataToQueue
 963 00f0 F862     		str	r0, [r7, #44]
 640:../../../FreeRTOS/Source/queue.c **** 
 641:../../../FreeRTOS/Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 642:../../../FreeRTOS/Source/queue.c **** 				{
 643:../../../FreeRTOS/Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 644:../../../FreeRTOS/Source/queue.c **** 					{
 645:../../../FreeRTOS/Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
 646:../../../FreeRTOS/Source/queue.c **** 						{
 647:../../../FreeRTOS/Source/queue.c **** 							/* The queue is a member of a queue set, and posting
 648:../../../FreeRTOS/Source/queue.c **** 							to the queue set caused a higher priority task to
 649:../../../FreeRTOS/Source/queue.c **** 							unblock. A context switch is required. */
 650:../../../FreeRTOS/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 651:../../../FreeRTOS/Source/queue.c **** 						}
 652:../../../FreeRTOS/Source/queue.c **** 						else
 653:../../../FreeRTOS/Source/queue.c **** 						{
 654:../../../FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 655:../../../FreeRTOS/Source/queue.c **** 						}
 656:../../../FreeRTOS/Source/queue.c **** 					}
 657:../../../FreeRTOS/Source/queue.c **** 					else
 658:../../../FreeRTOS/Source/queue.c **** 					{
 659:../../../FreeRTOS/Source/queue.c **** 						/* If there was a task waiting for data to arrive on the
ARM GAS  /tmp/cc99qdVQ.s 			page 33


 660:../../../FreeRTOS/Source/queue.c **** 						queue then unblock it now. */
 661:../../../FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 662:../../../FreeRTOS/Source/queue.c **** 						{
 663:../../../FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 664:../../../FreeRTOS/Source/queue.c **** 							{
 665:../../../FreeRTOS/Source/queue.c **** 								/* The unblocked task has a priority higher than
 666:../../../FreeRTOS/Source/queue.c **** 								our own so yield immediately.  Yes it is ok to
 667:../../../FreeRTOS/Source/queue.c **** 								do this from within the critical section - the
 668:../../../FreeRTOS/Source/queue.c **** 								kernel takes care of that. */
 669:../../../FreeRTOS/Source/queue.c **** 								queueYIELD_IF_USING_PREEMPTION();
 670:../../../FreeRTOS/Source/queue.c **** 							}
 671:../../../FreeRTOS/Source/queue.c **** 							else
 672:../../../FreeRTOS/Source/queue.c **** 							{
 673:../../../FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 674:../../../FreeRTOS/Source/queue.c **** 							}
 675:../../../FreeRTOS/Source/queue.c **** 						}
 676:../../../FreeRTOS/Source/queue.c **** 						else if( xYieldRequired != pdFALSE )
 677:../../../FreeRTOS/Source/queue.c **** 						{
 678:../../../FreeRTOS/Source/queue.c **** 							/* This path is a special case that will only get
 679:../../../FreeRTOS/Source/queue.c **** 							executed if the task was holding multiple mutexes
 680:../../../FreeRTOS/Source/queue.c **** 							and the mutexes were given back in an order that is
 681:../../../FreeRTOS/Source/queue.c **** 							different to that in which they were taken. */
 682:../../../FreeRTOS/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 683:../../../FreeRTOS/Source/queue.c **** 						}
 684:../../../FreeRTOS/Source/queue.c **** 						else
 685:../../../FreeRTOS/Source/queue.c **** 						{
 686:../../../FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 687:../../../FreeRTOS/Source/queue.c **** 						}
 688:../../../FreeRTOS/Source/queue.c **** 					}
 689:../../../FreeRTOS/Source/queue.c **** 				}
 690:../../../FreeRTOS/Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
 691:../../../FreeRTOS/Source/queue.c **** 				{
 692:../../../FreeRTOS/Source/queue.c **** 					/* If there was a task waiting for data to arrive on the
 693:../../../FreeRTOS/Source/queue.c **** 					queue then unblock it now. */
 694:../../../FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 964              		.loc 1 694 0
 965 00f2 3B6B     		ldr	r3, [r7, #48]
 966 00f4 5B6A     		ldr	r3, [r3, #36]
 967 00f6 002B     		cmp	r3, #0
 968 00f8 10D0     		beq	.L65
 695:../../../FreeRTOS/Source/queue.c **** 					{
 696:../../../FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 969              		.loc 1 696 0
 970 00fa 3B6B     		ldr	r3, [r7, #48]
 971 00fc 2433     		adds	r3, r3, #36
 972 00fe 1846     		mov	r0, r3
 973 0100 FFF7FEFF 		bl	xTaskRemoveFromEventList
 974 0104 0346     		mov	r3, r0
 975 0106 012B     		cmp	r3, #1
 976 0108 13D1     		bne	.L66
 697:../../../FreeRTOS/Source/queue.c **** 						{
 698:../../../FreeRTOS/Source/queue.c **** 							/* The unblocked task has a priority higher than
 699:../../../FreeRTOS/Source/queue.c **** 							our own so yield immediately.  Yes it is ok to do
 700:../../../FreeRTOS/Source/queue.c **** 							this from within the critical section - the kernel
 701:../../../FreeRTOS/Source/queue.c **** 							takes care of that. */
 702:../../../FreeRTOS/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 977              		.loc 1 702 0
ARM GAS  /tmp/cc99qdVQ.s 			page 34


 978 010a 4B4B     		ldr	r3, .L78
 979 010c 4FF08052 		mov	r2, #268435456
 980 0110 1A60     		str	r2, [r3]
 981              	@ 702 "../../../FreeRTOS/Source/queue.c" 1
 982 0112 BFF34F8F 		dsb
 983              	@ 0 "" 2
 984              	@ 702 "../../../FreeRTOS/Source/queue.c" 1
 985 0116 BFF36F8F 		isb
 986              	@ 0 "" 2
 987              		.thumb
 988 011a 0AE0     		b	.L66
 989              	.L65:
 703:../../../FreeRTOS/Source/queue.c **** 						}
 704:../../../FreeRTOS/Source/queue.c **** 						else
 705:../../../FreeRTOS/Source/queue.c **** 						{
 706:../../../FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 707:../../../FreeRTOS/Source/queue.c **** 						}
 708:../../../FreeRTOS/Source/queue.c **** 					}
 709:../../../FreeRTOS/Source/queue.c **** 					else if( xYieldRequired != pdFALSE )
 990              		.loc 1 709 0
 991 011c FB6A     		ldr	r3, [r7, #44]
 992 011e 002B     		cmp	r3, #0
 993 0120 07D0     		beq	.L66
 710:../../../FreeRTOS/Source/queue.c **** 					{
 711:../../../FreeRTOS/Source/queue.c **** 						/* This path is a special case that will only get
 712:../../../FreeRTOS/Source/queue.c **** 						executed if the task was holding multiple mutexes and
 713:../../../FreeRTOS/Source/queue.c **** 						the mutexes were given back in an order that is
 714:../../../FreeRTOS/Source/queue.c **** 						different to that in which they were taken. */
 715:../../../FreeRTOS/Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
 994              		.loc 1 715 0
 995 0122 454B     		ldr	r3, .L78
 996 0124 4FF08052 		mov	r2, #268435456
 997 0128 1A60     		str	r2, [r3]
 998              	@ 715 "../../../FreeRTOS/Source/queue.c" 1
 999 012a BFF34F8F 		dsb
 1000              	@ 0 "" 2
 1001              	@ 715 "../../../FreeRTOS/Source/queue.c" 1
 1002 012e BFF36F8F 		isb
 1003              	@ 0 "" 2
 1004              		.thumb
 1005              	.L66:
 716:../../../FreeRTOS/Source/queue.c **** 					}
 717:../../../FreeRTOS/Source/queue.c **** 					else
 718:../../../FreeRTOS/Source/queue.c **** 					{
 719:../../../FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
 720:../../../FreeRTOS/Source/queue.c **** 					}
 721:../../../FreeRTOS/Source/queue.c **** 				}
 722:../../../FreeRTOS/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
 723:../../../FreeRTOS/Source/queue.c **** 
 724:../../../FreeRTOS/Source/queue.c **** 				taskEXIT_CRITICAL();
 1006              		.loc 1 724 0
 1007 0132 FFF7FEFF 		bl	vPortExitCritical
 725:../../../FreeRTOS/Source/queue.c **** 				return pdPASS;
 1008              		.loc 1 725 0
 1009 0136 0123     		movs	r3, #1
 1010 0138 79E0     		b	.L77
 1011              	.L64:
ARM GAS  /tmp/cc99qdVQ.s 			page 35


 726:../../../FreeRTOS/Source/queue.c **** 			}
 727:../../../FreeRTOS/Source/queue.c **** 			else
 728:../../../FreeRTOS/Source/queue.c **** 			{
 729:../../../FreeRTOS/Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 1012              		.loc 1 729 0
 1013 013a 7B68     		ldr	r3, [r7, #4]
 1014 013c 002B     		cmp	r3, #0
 1015 013e 10D1     		bne	.L68
 730:../../../FreeRTOS/Source/queue.c **** 				{
 731:../../../FreeRTOS/Source/queue.c **** 					/* The queue was full and no block time is specified (or
 732:../../../FreeRTOS/Source/queue.c **** 					the block time has expired) so leave now. */
 733:../../../FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
 1016              		.loc 1 733 0
 1017 0140 FFF7FEFF 		bl	vPortExitCritical
 734:../../../FreeRTOS/Source/queue.c **** 
 735:../../../FreeRTOS/Source/queue.c **** 					/* Return to the original privilege level before exiting
 736:../../../FreeRTOS/Source/queue.c **** 					the function. */
 737:../../../FreeRTOS/Source/queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 1018              		.loc 1 737 0
 1019 0144 3B6B     		ldr	r3, [r7, #48]
 1020 0146 1846     		mov	r0, r3
 1021 0148 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 1022 014c 0146     		mov	r1, r0
 1023 014e BA68     		ldr	r2, [r7, #8]
 1024 0150 7C68     		ldr	r4, [r7, #4]
 1025 0152 3B68     		ldr	r3, [r7]
 1026 0154 0093     		str	r3, [sp]
 1027 0156 5A20     		movs	r0, #90
 1028 0158 2346     		mov	r3, r4
 1029 015a FFF7FEFF 		bl	SYSVIEW_RecordU32x4
 738:../../../FreeRTOS/Source/queue.c **** 					return errQUEUE_FULL;
 1030              		.loc 1 738 0
 1031 015e 0023     		movs	r3, #0
 1032 0160 65E0     		b	.L77
 1033              	.L68:
 739:../../../FreeRTOS/Source/queue.c **** 				}
 740:../../../FreeRTOS/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 1034              		.loc 1 740 0
 1035 0162 7B6B     		ldr	r3, [r7, #52]
 1036 0164 002B     		cmp	r3, #0
 1037 0166 06D1     		bne	.L69
 741:../../../FreeRTOS/Source/queue.c **** 				{
 742:../../../FreeRTOS/Source/queue.c **** 					/* The queue was full and a block time was specified so
 743:../../../FreeRTOS/Source/queue.c **** 					configure the timeout structure. */
 744:../../../FreeRTOS/Source/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
 1038              		.loc 1 744 0
 1039 0168 07F11403 		add	r3, r7, #20
 1040 016c 1846     		mov	r0, r3
 1041 016e FFF7FEFF 		bl	vTaskSetTimeOutState
 745:../../../FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 1042              		.loc 1 745 0
 1043 0172 0123     		movs	r3, #1
 1044 0174 7B63     		str	r3, [r7, #52]
 1045              	.L69:
 746:../../../FreeRTOS/Source/queue.c **** 				}
 747:../../../FreeRTOS/Source/queue.c **** 				else
 748:../../../FreeRTOS/Source/queue.c **** 				{
ARM GAS  /tmp/cc99qdVQ.s 			page 36


 749:../../../FreeRTOS/Source/queue.c **** 					/* Entry time was already set. */
 750:../../../FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 751:../../../FreeRTOS/Source/queue.c **** 				}
 752:../../../FreeRTOS/Source/queue.c **** 			}
 753:../../../FreeRTOS/Source/queue.c **** 		}
 754:../../../FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
 1046              		.loc 1 754 0
 1047 0176 FFF7FEFF 		bl	vPortExitCritical
 755:../../../FreeRTOS/Source/queue.c **** 
 756:../../../FreeRTOS/Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
 757:../../../FreeRTOS/Source/queue.c **** 		now the critical section has been exited. */
 758:../../../FreeRTOS/Source/queue.c **** 
 759:../../../FreeRTOS/Source/queue.c **** 		vTaskSuspendAll();
 1048              		.loc 1 759 0
 1049 017a FFF7FEFF 		bl	vTaskSuspendAll
 760:../../../FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 1050              		.loc 1 760 0
 1051 017e FFF7FEFF 		bl	vPortEnterCritical
 1052 0182 3B6B     		ldr	r3, [r7, #48]
 1053 0184 5B6C     		ldr	r3, [r3, #68]
 1054 0186 B3F1FF3F 		cmp	r3, #-1
 1055 018a 02D1     		bne	.L70
 1056              		.loc 1 760 0 is_stmt 0 discriminator 1
 1057 018c 3B6B     		ldr	r3, [r7, #48]
 1058 018e 0022     		movs	r2, #0
 1059 0190 5A64     		str	r2, [r3, #68]
 1060              	.L70:
 1061              		.loc 1 760 0 discriminator 3
 1062 0192 3B6B     		ldr	r3, [r7, #48]
 1063 0194 9B6C     		ldr	r3, [r3, #72]
 1064 0196 B3F1FF3F 		cmp	r3, #-1
 1065 019a 02D1     		bne	.L71
 1066              		.loc 1 760 0 discriminator 4
 1067 019c 3B6B     		ldr	r3, [r7, #48]
 1068 019e 0022     		movs	r2, #0
 1069 01a0 9A64     		str	r2, [r3, #72]
 1070              	.L71:
 1071              		.loc 1 760 0 discriminator 6
 1072 01a2 FFF7FEFF 		bl	vPortExitCritical
 761:../../../FreeRTOS/Source/queue.c **** 
 762:../../../FreeRTOS/Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
 763:../../../FreeRTOS/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 1073              		.loc 1 763 0 is_stmt 1 discriminator 6
 1074 01a6 07F11402 		add	r2, r7, #20
 1075 01aa 3B1D     		adds	r3, r7, #4
 1076 01ac 1046     		mov	r0, r2
 1077 01ae 1946     		mov	r1, r3
 1078 01b0 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1079 01b4 0346     		mov	r3, r0
 1080 01b6 002B     		cmp	r3, #0
 1081 01b8 24D1     		bne	.L72
 764:../../../FreeRTOS/Source/queue.c **** 		{
 765:../../../FreeRTOS/Source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 1082              		.loc 1 765 0
 1083 01ba 386B     		ldr	r0, [r7, #48]
 1084 01bc FFF7FEFF 		bl	prvIsQueueFull
 1085 01c0 0346     		mov	r3, r0
ARM GAS  /tmp/cc99qdVQ.s 			page 37


 1086 01c2 002B     		cmp	r3, #0
 1087 01c4 18D0     		beq	.L73
 766:../../../FreeRTOS/Source/queue.c **** 			{
 767:../../../FreeRTOS/Source/queue.c **** 				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 768:../../../FreeRTOS/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 1088              		.loc 1 768 0
 1089 01c6 3B6B     		ldr	r3, [r7, #48]
 1090 01c8 03F11002 		add	r2, r3, #16
 1091 01cc 7B68     		ldr	r3, [r7, #4]
 1092 01ce 1046     		mov	r0, r2
 1093 01d0 1946     		mov	r1, r3
 1094 01d2 FFF7FEFF 		bl	vTaskPlaceOnEventList
 769:../../../FreeRTOS/Source/queue.c **** 
 770:../../../FreeRTOS/Source/queue.c **** 				/* Unlocking the queue means queue events can effect the
 771:../../../FreeRTOS/Source/queue.c **** 				event list.  It is possible	that interrupts occurring now
 772:../../../FreeRTOS/Source/queue.c **** 				remove this task from the event	list again - but as the
 773:../../../FreeRTOS/Source/queue.c **** 				scheduler is suspended the task will go onto the pending
 774:../../../FreeRTOS/Source/queue.c **** 				ready last instead of the actual ready list. */
 775:../../../FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 1095              		.loc 1 775 0
 1096 01d6 386B     		ldr	r0, [r7, #48]
 1097 01d8 FFF7FEFF 		bl	prvUnlockQueue
 776:../../../FreeRTOS/Source/queue.c **** 
 777:../../../FreeRTOS/Source/queue.c **** 				/* Resuming the scheduler will move tasks from the pending
 778:../../../FreeRTOS/Source/queue.c **** 				ready list into the ready list - so it is feasible that this
 779:../../../FreeRTOS/Source/queue.c **** 				task is already in a ready list before it yields - in which
 780:../../../FreeRTOS/Source/queue.c **** 				case the yield will not cause a context switch unless there
 781:../../../FreeRTOS/Source/queue.c **** 				is also a higher priority task in the pending ready list. */
 782:../../../FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 1098              		.loc 1 782 0
 1099 01dc FFF7FEFF 		bl	xTaskResumeAll
 1100 01e0 0346     		mov	r3, r0
 1101 01e2 002B     		cmp	r3, #0
 1102 01e4 22D1     		bne	.L76
 783:../../../FreeRTOS/Source/queue.c **** 				{
 784:../../../FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
 1103              		.loc 1 784 0
 1104 01e6 144B     		ldr	r3, .L78
 1105 01e8 4FF08052 		mov	r2, #268435456
 1106 01ec 1A60     		str	r2, [r3]
 1107              	@ 784 "../../../FreeRTOS/Source/queue.c" 1
 1108 01ee BFF34F8F 		dsb
 1109              	@ 0 "" 2
 1110              	@ 784 "../../../FreeRTOS/Source/queue.c" 1
 1111 01f2 BFF36F8F 		isb
 1112              	@ 0 "" 2
 1113              		.thumb
 1114 01f6 19E0     		b	.L76
 1115              	.L73:
 785:../../../FreeRTOS/Source/queue.c **** 				}
 786:../../../FreeRTOS/Source/queue.c **** 			}
 787:../../../FreeRTOS/Source/queue.c **** 			else
 788:../../../FreeRTOS/Source/queue.c **** 			{
 789:../../../FreeRTOS/Source/queue.c **** 				/* Try again. */
 790:../../../FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 1116              		.loc 1 790 0
 1117 01f8 386B     		ldr	r0, [r7, #48]
ARM GAS  /tmp/cc99qdVQ.s 			page 38


 1118 01fa FFF7FEFF 		bl	prvUnlockQueue
 791:../../../FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 1119              		.loc 1 791 0
 1120 01fe FFF7FEFF 		bl	xTaskResumeAll
 1121 0202 58E7     		b	.L61
 1122              	.L72:
 792:../../../FreeRTOS/Source/queue.c **** 			}
 793:../../../FreeRTOS/Source/queue.c **** 		}
 794:../../../FreeRTOS/Source/queue.c **** 		else
 795:../../../FreeRTOS/Source/queue.c **** 		{
 796:../../../FreeRTOS/Source/queue.c **** 			/* The timeout has expired. */
 797:../../../FreeRTOS/Source/queue.c **** 			prvUnlockQueue( pxQueue );
 1123              		.loc 1 797 0
 1124 0204 386B     		ldr	r0, [r7, #48]
 1125 0206 FFF7FEFF 		bl	prvUnlockQueue
 798:../../../FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 1126              		.loc 1 798 0
 1127 020a FFF7FEFF 		bl	xTaskResumeAll
 799:../../../FreeRTOS/Source/queue.c **** 
 800:../../../FreeRTOS/Source/queue.c **** 			/* Return to the original privilege level before exiting the
 801:../../../FreeRTOS/Source/queue.c **** 			function. */
 802:../../../FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FAILED( pxQueue );
 1128              		.loc 1 802 0
 1129 020e 3B6B     		ldr	r3, [r7, #48]
 1130 0210 1846     		mov	r0, r3
 1131 0212 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 1132 0216 0146     		mov	r1, r0
 1133 0218 BA68     		ldr	r2, [r7, #8]
 1134 021a 7C68     		ldr	r4, [r7, #4]
 1135 021c 3B68     		ldr	r3, [r7]
 1136 021e 0093     		str	r3, [sp]
 1137 0220 5A20     		movs	r0, #90
 1138 0222 2346     		mov	r3, r4
 1139 0224 FFF7FEFF 		bl	SYSVIEW_RecordU32x4
 803:../../../FreeRTOS/Source/queue.c **** 			return errQUEUE_FULL;
 1140              		.loc 1 803 0
 1141 0228 0023     		movs	r3, #0
 1142 022a 00E0     		b	.L77
 1143              	.L76:
 804:../../../FreeRTOS/Source/queue.c **** 		}
 805:../../../FreeRTOS/Source/queue.c **** 	}
 1144              		.loc 1 805 0 discriminator 6
 1145 022c 43E7     		b	.L61
 1146              	.L77:
 806:../../../FreeRTOS/Source/queue.c **** }
 1147              		.loc 1 806 0 discriminator 7
 1148 022e 1846     		mov	r0, r3
 1149 0230 3C37     		adds	r7, r7, #60
 1150              	.LCFI33:
 1151              		.cfi_def_cfa_offset 12
 1152 0232 BD46     		mov	sp, r7
 1153              	.LCFI34:
 1154              		.cfi_def_cfa_register 13
 1155              		@ sp needed
 1156 0234 90BD     		pop	{r4, r7, pc}
 1157              	.L79:
 1158 0236 00BF     		.align	2
ARM GAS  /tmp/cc99qdVQ.s 			page 39


 1159              	.L78:
 1160 0238 04ED00E0 		.word	-536810236
 1161              		.cfi_endproc
 1162              	.LFE10:
 1164              		.section	.text.xQueueGenericSendFromISR,"ax",%progbits
 1165              		.align	2
 1166              		.global	xQueueGenericSendFromISR
 1167              		.thumb
 1168              		.thumb_func
 1170              	xQueueGenericSendFromISR:
 1171              	.LFB11:
 807:../../../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 808:../../../FreeRTOS/Source/queue.c **** 
 809:../../../FreeRTOS/Source/queue.c **** #if ( configUSE_ALTERNATIVE_API == 1 )
 810:../../../FreeRTOS/Source/queue.c **** 
 811:../../../FreeRTOS/Source/queue.c **** 	BaseType_t xQueueAltGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_
 812:../../../FreeRTOS/Source/queue.c **** 	{
 813:../../../FreeRTOS/Source/queue.c **** 	BaseType_t xEntryTimeSet = pdFALSE;
 814:../../../FreeRTOS/Source/queue.c **** 	TimeOut_t xTimeOut;
 815:../../../FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 816:../../../FreeRTOS/Source/queue.c **** 
 817:../../../FreeRTOS/Source/queue.c **** 		configASSERT( pxQueue );
 818:../../../FreeRTOS/Source/queue.c **** 		configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 819:../../../FreeRTOS/Source/queue.c **** 
 820:../../../FreeRTOS/Source/queue.c **** 		for( ;; )
 821:../../../FreeRTOS/Source/queue.c **** 		{
 822:../../../FreeRTOS/Source/queue.c **** 			taskENTER_CRITICAL();
 823:../../../FreeRTOS/Source/queue.c **** 			{
 824:../../../FreeRTOS/Source/queue.c **** 				/* Is there room on the queue now?  To be running we must be
 825:../../../FreeRTOS/Source/queue.c **** 				the highest priority task wanting to access the queue. */
 826:../../../FreeRTOS/Source/queue.c **** 				if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 827:../../../FreeRTOS/Source/queue.c **** 				{
 828:../../../FreeRTOS/Source/queue.c **** 					traceQUEUE_SEND( pxQueue );
 829:../../../FreeRTOS/Source/queue.c **** 					prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 830:../../../FreeRTOS/Source/queue.c **** 
 831:../../../FreeRTOS/Source/queue.c **** 					/* If there was a task waiting for data to arrive on the
 832:../../../FreeRTOS/Source/queue.c **** 					queue then unblock it now. */
 833:../../../FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 834:../../../FreeRTOS/Source/queue.c **** 					{
 835:../../../FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 836:../../../FreeRTOS/Source/queue.c **** 						{
 837:../../../FreeRTOS/Source/queue.c **** 							/* The unblocked task has a priority higher than
 838:../../../FreeRTOS/Source/queue.c **** 							our own so yield immediately. */
 839:../../../FreeRTOS/Source/queue.c **** 							portYIELD_WITHIN_API();
 840:../../../FreeRTOS/Source/queue.c **** 						}
 841:../../../FreeRTOS/Source/queue.c **** 						else
 842:../../../FreeRTOS/Source/queue.c **** 						{
 843:../../../FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 844:../../../FreeRTOS/Source/queue.c **** 						}
 845:../../../FreeRTOS/Source/queue.c **** 					}
 846:../../../FreeRTOS/Source/queue.c **** 					else
 847:../../../FreeRTOS/Source/queue.c **** 					{
 848:../../../FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
 849:../../../FreeRTOS/Source/queue.c **** 					}
 850:../../../FreeRTOS/Source/queue.c **** 
 851:../../../FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
 852:../../../FreeRTOS/Source/queue.c **** 					return pdPASS;
ARM GAS  /tmp/cc99qdVQ.s 			page 40


 853:../../../FreeRTOS/Source/queue.c **** 				}
 854:../../../FreeRTOS/Source/queue.c **** 				else
 855:../../../FreeRTOS/Source/queue.c **** 				{
 856:../../../FreeRTOS/Source/queue.c **** 					if( xTicksToWait == ( TickType_t ) 0 )
 857:../../../FreeRTOS/Source/queue.c **** 					{
 858:../../../FreeRTOS/Source/queue.c **** 						taskEXIT_CRITICAL();
 859:../../../FreeRTOS/Source/queue.c **** 						return errQUEUE_FULL;
 860:../../../FreeRTOS/Source/queue.c **** 					}
 861:../../../FreeRTOS/Source/queue.c **** 					else if( xEntryTimeSet == pdFALSE )
 862:../../../FreeRTOS/Source/queue.c **** 					{
 863:../../../FreeRTOS/Source/queue.c **** 						vTaskSetTimeOutState( &xTimeOut );
 864:../../../FreeRTOS/Source/queue.c **** 						xEntryTimeSet = pdTRUE;
 865:../../../FreeRTOS/Source/queue.c **** 					}
 866:../../../FreeRTOS/Source/queue.c **** 				}
 867:../../../FreeRTOS/Source/queue.c **** 			}
 868:../../../FreeRTOS/Source/queue.c **** 			taskEXIT_CRITICAL();
 869:../../../FreeRTOS/Source/queue.c **** 
 870:../../../FreeRTOS/Source/queue.c **** 			taskENTER_CRITICAL();
 871:../../../FreeRTOS/Source/queue.c **** 			{
 872:../../../FreeRTOS/Source/queue.c **** 				if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 873:../../../FreeRTOS/Source/queue.c **** 				{
 874:../../../FreeRTOS/Source/queue.c **** 					if( prvIsQueueFull( pxQueue ) != pdFALSE )
 875:../../../FreeRTOS/Source/queue.c **** 					{
 876:../../../FreeRTOS/Source/queue.c **** 						traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 877:../../../FreeRTOS/Source/queue.c **** 						vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 878:../../../FreeRTOS/Source/queue.c **** 						portYIELD_WITHIN_API();
 879:../../../FreeRTOS/Source/queue.c **** 					}
 880:../../../FreeRTOS/Source/queue.c **** 					else
 881:../../../FreeRTOS/Source/queue.c **** 					{
 882:../../../FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
 883:../../../FreeRTOS/Source/queue.c **** 					}
 884:../../../FreeRTOS/Source/queue.c **** 				}
 885:../../../FreeRTOS/Source/queue.c **** 				else
 886:../../../FreeRTOS/Source/queue.c **** 				{
 887:../../../FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
 888:../../../FreeRTOS/Source/queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 889:../../../FreeRTOS/Source/queue.c **** 					return errQUEUE_FULL;
 890:../../../FreeRTOS/Source/queue.c **** 				}
 891:../../../FreeRTOS/Source/queue.c **** 			}
 892:../../../FreeRTOS/Source/queue.c **** 			taskEXIT_CRITICAL();
 893:../../../FreeRTOS/Source/queue.c **** 		}
 894:../../../FreeRTOS/Source/queue.c **** 	}
 895:../../../FreeRTOS/Source/queue.c **** 
 896:../../../FreeRTOS/Source/queue.c **** #endif /* configUSE_ALTERNATIVE_API */
 897:../../../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 898:../../../FreeRTOS/Source/queue.c **** 
 899:../../../FreeRTOS/Source/queue.c **** #if ( configUSE_ALTERNATIVE_API == 1 )
 900:../../../FreeRTOS/Source/queue.c **** 
 901:../../../FreeRTOS/Source/queue.c **** 	BaseType_t xQueueAltGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicks
 902:../../../FreeRTOS/Source/queue.c **** 	{
 903:../../../FreeRTOS/Source/queue.c **** 	BaseType_t xEntryTimeSet = pdFALSE;
 904:../../../FreeRTOS/Source/queue.c **** 	TimeOut_t xTimeOut;
 905:../../../FreeRTOS/Source/queue.c **** 	int8_t *pcOriginalReadPosition;
 906:../../../FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 907:../../../FreeRTOS/Source/queue.c **** 
 908:../../../FreeRTOS/Source/queue.c **** 		configASSERT( pxQueue );
 909:../../../FreeRTOS/Source/queue.c **** 		configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
ARM GAS  /tmp/cc99qdVQ.s 			page 41


 910:../../../FreeRTOS/Source/queue.c **** 
 911:../../../FreeRTOS/Source/queue.c **** 		for( ;; )
 912:../../../FreeRTOS/Source/queue.c **** 		{
 913:../../../FreeRTOS/Source/queue.c **** 			taskENTER_CRITICAL();
 914:../../../FreeRTOS/Source/queue.c **** 			{
 915:../../../FreeRTOS/Source/queue.c **** 				if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 916:../../../FreeRTOS/Source/queue.c **** 				{
 917:../../../FreeRTOS/Source/queue.c **** 					/* Remember our read position in case we are just peeking. */
 918:../../../FreeRTOS/Source/queue.c **** 					pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 919:../../../FreeRTOS/Source/queue.c **** 
 920:../../../FreeRTOS/Source/queue.c **** 					prvCopyDataFromQueue( pxQueue, pvBuffer );
 921:../../../FreeRTOS/Source/queue.c **** 
 922:../../../FreeRTOS/Source/queue.c **** 					if( xJustPeeking == pdFALSE )
 923:../../../FreeRTOS/Source/queue.c **** 					{
 924:../../../FreeRTOS/Source/queue.c **** 						traceQUEUE_RECEIVE( pxQueue );
 925:../../../FreeRTOS/Source/queue.c **** 
 926:../../../FreeRTOS/Source/queue.c **** 						/* Data is actually being removed (not just peeked). */
 927:../../../FreeRTOS/Source/queue.c **** 						--( pxQueue->uxMessagesWaiting );
 928:../../../FreeRTOS/Source/queue.c **** 
 929:../../../FreeRTOS/Source/queue.c **** 						#if ( configUSE_MUTEXES == 1 )
 930:../../../FreeRTOS/Source/queue.c **** 						{
 931:../../../FreeRTOS/Source/queue.c **** 							if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 932:../../../FreeRTOS/Source/queue.c **** 							{
 933:../../../FreeRTOS/Source/queue.c **** 								/* Record the information required to implement
 934:../../../FreeRTOS/Source/queue.c **** 								priority inheritance should it become necessary. */
 935:../../../FreeRTOS/Source/queue.c **** 								pxQueue->pxMutexHolder = ( int8_t * ) xTaskGetCurrentTaskHandle();
 936:../../../FreeRTOS/Source/queue.c **** 							}
 937:../../../FreeRTOS/Source/queue.c **** 							else
 938:../../../FreeRTOS/Source/queue.c **** 							{
 939:../../../FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 940:../../../FreeRTOS/Source/queue.c **** 							}
 941:../../../FreeRTOS/Source/queue.c **** 						}
 942:../../../FreeRTOS/Source/queue.c **** 						#endif
 943:../../../FreeRTOS/Source/queue.c **** 
 944:../../../FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 945:../../../FreeRTOS/Source/queue.c **** 						{
 946:../../../FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 947:../../../FreeRTOS/Source/queue.c **** 							{
 948:../../../FreeRTOS/Source/queue.c **** 								portYIELD_WITHIN_API();
 949:../../../FreeRTOS/Source/queue.c **** 							}
 950:../../../FreeRTOS/Source/queue.c **** 							else
 951:../../../FreeRTOS/Source/queue.c **** 							{
 952:../../../FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 953:../../../FreeRTOS/Source/queue.c **** 							}
 954:../../../FreeRTOS/Source/queue.c **** 						}
 955:../../../FreeRTOS/Source/queue.c **** 					}
 956:../../../FreeRTOS/Source/queue.c **** 					else
 957:../../../FreeRTOS/Source/queue.c **** 					{
 958:../../../FreeRTOS/Source/queue.c **** 						traceQUEUE_PEEK( pxQueue );
 959:../../../FreeRTOS/Source/queue.c **** 
 960:../../../FreeRTOS/Source/queue.c **** 						/* The data is not being removed, so reset our read
 961:../../../FreeRTOS/Source/queue.c **** 						pointer. */
 962:../../../FreeRTOS/Source/queue.c **** 						pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 963:../../../FreeRTOS/Source/queue.c **** 
 964:../../../FreeRTOS/Source/queue.c **** 						/* The data is being left in the queue, so see if there are
 965:../../../FreeRTOS/Source/queue.c **** 						any other tasks waiting for the data. */
 966:../../../FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
ARM GAS  /tmp/cc99qdVQ.s 			page 42


 967:../../../FreeRTOS/Source/queue.c **** 						{
 968:../../../FreeRTOS/Source/queue.c **** 							/* Tasks that are removed from the event list will get added to
 969:../../../FreeRTOS/Source/queue.c **** 							the pending ready list as the scheduler is still suspended. */
 970:../../../FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 971:../../../FreeRTOS/Source/queue.c **** 							{
 972:../../../FreeRTOS/Source/queue.c **** 								/* The task waiting has a higher priority than this task. */
 973:../../../FreeRTOS/Source/queue.c **** 								portYIELD_WITHIN_API();
 974:../../../FreeRTOS/Source/queue.c **** 							}
 975:../../../FreeRTOS/Source/queue.c **** 							else
 976:../../../FreeRTOS/Source/queue.c **** 							{
 977:../../../FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 978:../../../FreeRTOS/Source/queue.c **** 							}
 979:../../../FreeRTOS/Source/queue.c **** 						}
 980:../../../FreeRTOS/Source/queue.c **** 						else
 981:../../../FreeRTOS/Source/queue.c **** 						{
 982:../../../FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 983:../../../FreeRTOS/Source/queue.c **** 						}
 984:../../../FreeRTOS/Source/queue.c **** 					}
 985:../../../FreeRTOS/Source/queue.c **** 
 986:../../../FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
 987:../../../FreeRTOS/Source/queue.c **** 					return pdPASS;
 988:../../../FreeRTOS/Source/queue.c **** 				}
 989:../../../FreeRTOS/Source/queue.c **** 				else
 990:../../../FreeRTOS/Source/queue.c **** 				{
 991:../../../FreeRTOS/Source/queue.c **** 					if( xTicksToWait == ( TickType_t ) 0 )
 992:../../../FreeRTOS/Source/queue.c **** 					{
 993:../../../FreeRTOS/Source/queue.c **** 						taskEXIT_CRITICAL();
 994:../../../FreeRTOS/Source/queue.c **** 						traceQUEUE_RECEIVE_FAILED( pxQueue );
 995:../../../FreeRTOS/Source/queue.c **** 						return errQUEUE_EMPTY;
 996:../../../FreeRTOS/Source/queue.c **** 					}
 997:../../../FreeRTOS/Source/queue.c **** 					else if( xEntryTimeSet == pdFALSE )
 998:../../../FreeRTOS/Source/queue.c **** 					{
 999:../../../FreeRTOS/Source/queue.c **** 						vTaskSetTimeOutState( &xTimeOut );
1000:../../../FreeRTOS/Source/queue.c **** 						xEntryTimeSet = pdTRUE;
1001:../../../FreeRTOS/Source/queue.c **** 					}
1002:../../../FreeRTOS/Source/queue.c **** 				}
1003:../../../FreeRTOS/Source/queue.c **** 			}
1004:../../../FreeRTOS/Source/queue.c **** 			taskEXIT_CRITICAL();
1005:../../../FreeRTOS/Source/queue.c **** 
1006:../../../FreeRTOS/Source/queue.c **** 			taskENTER_CRITICAL();
1007:../../../FreeRTOS/Source/queue.c **** 			{
1008:../../../FreeRTOS/Source/queue.c **** 				if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1009:../../../FreeRTOS/Source/queue.c **** 				{
1010:../../../FreeRTOS/Source/queue.c **** 					if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1011:../../../FreeRTOS/Source/queue.c **** 					{
1012:../../../FreeRTOS/Source/queue.c **** 						traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1013:../../../FreeRTOS/Source/queue.c **** 
1014:../../../FreeRTOS/Source/queue.c **** 						#if ( configUSE_MUTEXES == 1 )
1015:../../../FreeRTOS/Source/queue.c **** 						{
1016:../../../FreeRTOS/Source/queue.c **** 							if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1017:../../../FreeRTOS/Source/queue.c **** 							{
1018:../../../FreeRTOS/Source/queue.c **** 								taskENTER_CRITICAL();
1019:../../../FreeRTOS/Source/queue.c **** 								{
1020:../../../FreeRTOS/Source/queue.c **** 									vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1021:../../../FreeRTOS/Source/queue.c **** 								}
1022:../../../FreeRTOS/Source/queue.c **** 								taskEXIT_CRITICAL();
1023:../../../FreeRTOS/Source/queue.c **** 							}
ARM GAS  /tmp/cc99qdVQ.s 			page 43


1024:../../../FreeRTOS/Source/queue.c **** 							else
1025:../../../FreeRTOS/Source/queue.c **** 							{
1026:../../../FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1027:../../../FreeRTOS/Source/queue.c **** 							}
1028:../../../FreeRTOS/Source/queue.c **** 						}
1029:../../../FreeRTOS/Source/queue.c **** 						#endif
1030:../../../FreeRTOS/Source/queue.c **** 
1031:../../../FreeRTOS/Source/queue.c **** 						vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1032:../../../FreeRTOS/Source/queue.c **** 						portYIELD_WITHIN_API();
1033:../../../FreeRTOS/Source/queue.c **** 					}
1034:../../../FreeRTOS/Source/queue.c **** 					else
1035:../../../FreeRTOS/Source/queue.c **** 					{
1036:../../../FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1037:../../../FreeRTOS/Source/queue.c **** 					}
1038:../../../FreeRTOS/Source/queue.c **** 				}
1039:../../../FreeRTOS/Source/queue.c **** 				else
1040:../../../FreeRTOS/Source/queue.c **** 				{
1041:../../../FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
1042:../../../FreeRTOS/Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1043:../../../FreeRTOS/Source/queue.c **** 					return errQUEUE_EMPTY;
1044:../../../FreeRTOS/Source/queue.c **** 				}
1045:../../../FreeRTOS/Source/queue.c **** 			}
1046:../../../FreeRTOS/Source/queue.c **** 			taskEXIT_CRITICAL();
1047:../../../FreeRTOS/Source/queue.c **** 		}
1048:../../../FreeRTOS/Source/queue.c **** 	}
1049:../../../FreeRTOS/Source/queue.c **** 
1050:../../../FreeRTOS/Source/queue.c **** 
1051:../../../FreeRTOS/Source/queue.c **** #endif /* configUSE_ALTERNATIVE_API */
1052:../../../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1053:../../../FreeRTOS/Source/queue.c **** 
1054:../../../FreeRTOS/Source/queue.c **** BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseTy
1055:../../../FreeRTOS/Source/queue.c **** {
 1172              		.loc 1 1055 0
 1173              		.cfi_startproc
 1174              		@ args = 0, pretend = 0, frame = 56
 1175              		@ frame_needed = 1, uses_anonymous_args = 0
 1176 0000 80B5     		push	{r7, lr}
 1177              	.LCFI35:
 1178              		.cfi_def_cfa_offset 8
 1179              		.cfi_offset 7, -8
 1180              		.cfi_offset 14, -4
 1181 0002 8EB0     		sub	sp, sp, #56
 1182              	.LCFI36:
 1183              		.cfi_def_cfa_offset 64
 1184 0004 00AF     		add	r7, sp, #0
 1185              	.LCFI37:
 1186              		.cfi_def_cfa_register 7
 1187 0006 F860     		str	r0, [r7, #12]
 1188 0008 B960     		str	r1, [r7, #8]
 1189 000a 7A60     		str	r2, [r7, #4]
 1190 000c 3B60     		str	r3, [r7]
1056:../../../FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1057:../../../FreeRTOS/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1058:../../../FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 1191              		.loc 1 1058 0
 1192 000e FB68     		ldr	r3, [r7, #12]
 1193 0010 3B63     		str	r3, [r7, #48]
ARM GAS  /tmp/cc99qdVQ.s 			page 44


1059:../../../FreeRTOS/Source/queue.c **** 
1060:../../../FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 1194              		.loc 1 1060 0
 1195 0012 3B6B     		ldr	r3, [r7, #48]
 1196 0014 002B     		cmp	r3, #0
 1197 0016 09D1     		bne	.L81
 1198              	.LBB106:
 1199              	.LBB107:
 1200              		.loc 2 215 0 discriminator 1
 1201              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1202 0018 4FF05003 			mov r3, #80												
 1203 001c 83F31188 		msr basepri, r3											
 1204 0020 BFF36F8F 		isb														
 1205 0024 BFF34F8F 		dsb														
 1206              	
 1207              	@ 0 "" 2
 1208              		.thumb
 1209 0028 BB62     		str	r3, [r7, #40]
 1210              	.L82:
 1211              	.LBE107:
 1212              	.LBE106:
 1213              		.loc 1 1060 0 discriminator 1
 1214 002a FEE7     		b	.L82
 1215              	.L81:
1061:../../../FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1216              		.loc 1 1061 0
 1217 002c BB68     		ldr	r3, [r7, #8]
 1218 002e 002B     		cmp	r3, #0
 1219 0030 03D1     		bne	.L83
 1220              		.loc 1 1061 0 is_stmt 0 discriminator 2
 1221 0032 3B6B     		ldr	r3, [r7, #48]
 1222 0034 1B6C     		ldr	r3, [r3, #64]
 1223 0036 002B     		cmp	r3, #0
 1224 0038 01D1     		bne	.L84
 1225              	.L83:
 1226              		.loc 1 1061 0 discriminator 3
 1227 003a 0123     		movs	r3, #1
 1228 003c 00E0     		b	.L85
 1229              	.L84:
 1230              		.loc 1 1061 0 discriminator 4
 1231 003e 0023     		movs	r3, #0
 1232              	.L85:
 1233              		.loc 1 1061 0 discriminator 6
 1234 0040 002B     		cmp	r3, #0
 1235 0042 09D1     		bne	.L86
 1236              	.LBB108:
 1237              	.LBB109:
 1238              		.loc 2 215 0 is_stmt 1 discriminator 7
 1239              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1240 0044 4FF05003 			mov r3, #80												
 1241 0048 83F31188 		msr basepri, r3											
 1242 004c BFF36F8F 		isb														
 1243 0050 BFF34F8F 		dsb														
 1244              	
 1245              	@ 0 "" 2
 1246              		.thumb
 1247 0054 7B62     		str	r3, [r7, #36]
ARM GAS  /tmp/cc99qdVQ.s 			page 45


 1248              	.L87:
 1249              	.LBE109:
 1250              	.LBE108:
 1251              		.loc 1 1061 0 discriminator 2
 1252 0056 FEE7     		b	.L87
 1253              	.L86:
1062:../../../FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1254              		.loc 1 1062 0
 1255 0058 3B68     		ldr	r3, [r7]
 1256 005a 022B     		cmp	r3, #2
 1257 005c 03D1     		bne	.L88
 1258              		.loc 1 1062 0 is_stmt 0 discriminator 2
 1259 005e 3B6B     		ldr	r3, [r7, #48]
 1260 0060 DB6B     		ldr	r3, [r3, #60]
 1261 0062 012B     		cmp	r3, #1
 1262 0064 01D1     		bne	.L89
 1263              	.L88:
 1264              		.loc 1 1062 0 discriminator 3
 1265 0066 0123     		movs	r3, #1
 1266 0068 00E0     		b	.L90
 1267              	.L89:
 1268              		.loc 1 1062 0 discriminator 4
 1269 006a 0023     		movs	r3, #0
 1270              	.L90:
 1271              		.loc 1 1062 0 discriminator 6
 1272 006c 002B     		cmp	r3, #0
 1273 006e 09D1     		bne	.L91
 1274              	.LBB110:
 1275              	.LBB111:
 1276              		.loc 2 215 0 is_stmt 1 discriminator 7
 1277              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1278 0070 4FF05003 			mov r3, #80												
 1279 0074 83F31188 		msr basepri, r3											
 1280 0078 BFF36F8F 		isb														
 1281 007c BFF34F8F 		dsb														
 1282              	
 1283              	@ 0 "" 2
 1284              		.thumb
 1285 0080 3B62     		str	r3, [r7, #32]
 1286              	.L92:
 1287              	.LBE111:
 1288              	.LBE110:
 1289              		.loc 1 1062 0 discriminator 3
 1290 0082 FEE7     		b	.L92
 1291              	.L91:
1063:../../../FreeRTOS/Source/queue.c **** 
1064:../../../FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1065:../../../FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1066:../../../FreeRTOS/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1067:../../../FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1068:../../../FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1069:../../../FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1070:../../../FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1071:../../../FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1072:../../../FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1073:../../../FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1074:../../../FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
ARM GAS  /tmp/cc99qdVQ.s 			page 46


1075:../../../FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1076:../../../FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1077:../../../FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1078:../../../FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1292              		.loc 1 1078 0
 1293 0084 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1294              	.LBB112:
 1295              	.LBB113:
 216:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 217:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 218:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 219:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 220:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 221:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 222:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 223:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 224:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 225:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 226:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 228:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 229:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 230:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 231:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1296              		.loc 2 231 0
 1297              	@ 231 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1298 0088 EFF31182 			mrs r2, basepri											
 1299 008c 4FF05003 		mov r3, #80												
 1300 0090 83F31188 		msr basepri, r3											
 1301 0094 BFF36F8F 		isb														
 1302 0098 BFF34F8F 		dsb														
 1303              	
 1304              	@ 0 "" 2
 1305              		.thumb
 1306 009c FA61     		str	r2, [r7, #28]
 1307 009e BB61     		str	r3, [r7, #24]
 232:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 233:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 234:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 235:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 236:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 237:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 238:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 239:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 240:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 241:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 242:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 243:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 1308              		.loc 2 243 0
 1309 00a0 FB69     		ldr	r3, [r7, #28]
 1310              	.LBE113:
 1311              	.LBE112:
1079:../../../FreeRTOS/Source/queue.c **** 
1080:../../../FreeRTOS/Source/queue.c **** 	/* Similar to xQueueGenericSend, except without blocking if there is no room
1081:../../../FreeRTOS/Source/queue.c **** 	in the queue.  Also don't directly wake a task that was blocked on a queue
1082:../../../FreeRTOS/Source/queue.c **** 	read, instead return a flag to say whether a context switch is required or
1083:../../../FreeRTOS/Source/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
ARM GAS  /tmp/cc99qdVQ.s 			page 47


1084:../../../FreeRTOS/Source/queue.c **** 	post). */
1085:../../../FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1312              		.loc 1 1085 0
 1313 00a2 FB62     		str	r3, [r7, #44]
1086:../../../FreeRTOS/Source/queue.c **** 	{
1087:../../../FreeRTOS/Source/queue.c **** 		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 1314              		.loc 1 1087 0
 1315 00a4 3B6B     		ldr	r3, [r7, #48]
 1316 00a6 9A6B     		ldr	r2, [r3, #56]
 1317 00a8 3B6B     		ldr	r3, [r7, #48]
 1318 00aa DB6B     		ldr	r3, [r3, #60]
 1319 00ac 9A42     		cmp	r2, r3
 1320 00ae 02D3     		bcc	.L94
 1321              		.loc 1 1087 0 is_stmt 0 discriminator 1
 1322 00b0 3B68     		ldr	r3, [r7]
 1323 00b2 022B     		cmp	r3, #2
 1324 00b4 2FD1     		bne	.L95
 1325              	.L94:
1088:../../../FreeRTOS/Source/queue.c **** 		{
1089:../../../FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
 1326              		.loc 1 1089 0 is_stmt 1
 1327 00b6 3B6B     		ldr	r3, [r7, #48]
 1328 00b8 1846     		mov	r0, r3
 1329 00ba FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 1330 00be 0246     		mov	r2, r0
 1331 00c0 7B68     		ldr	r3, [r7, #4]
 1332 00c2 6020     		movs	r0, #96
 1333 00c4 1146     		mov	r1, r2
 1334 00c6 1A46     		mov	r2, r3
 1335 00c8 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x2
1090:../../../FreeRTOS/Source/queue.c **** 
1091:../../../FreeRTOS/Source/queue.c **** 			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
1092:../../../FreeRTOS/Source/queue.c **** 			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
1093:../../../FreeRTOS/Source/queue.c **** 			in a task disinheriting a priority and prvCopyDataToQueue() can be
1094:../../../FreeRTOS/Source/queue.c **** 			called here even though the disinherit function does not check if
1095:../../../FreeRTOS/Source/queue.c **** 			the scheduler is suspended before accessing the ready lists. */
1096:../../../FreeRTOS/Source/queue.c **** 			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 1336              		.loc 1 1096 0
 1337 00cc 386B     		ldr	r0, [r7, #48]
 1338 00ce B968     		ldr	r1, [r7, #8]
 1339 00d0 3A68     		ldr	r2, [r7]
 1340 00d2 FFF7FEFF 		bl	prvCopyDataToQueue
1097:../../../FreeRTOS/Source/queue.c **** 
1098:../../../FreeRTOS/Source/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
1099:../../../FreeRTOS/Source/queue.c **** 			be done when the queue is unlocked later. */
1100:../../../FreeRTOS/Source/queue.c **** 			if( pxQueue->xTxLock == queueUNLOCKED )
 1341              		.loc 1 1100 0
 1342 00d6 3B6B     		ldr	r3, [r7, #48]
 1343 00d8 9B6C     		ldr	r3, [r3, #72]
 1344 00da B3F1FF3F 		cmp	r3, #-1
 1345 00de 12D1     		bne	.L96
1101:../../../FreeRTOS/Source/queue.c **** 			{
1102:../../../FreeRTOS/Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
1103:../../../FreeRTOS/Source/queue.c **** 				{
1104:../../../FreeRTOS/Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1105:../../../FreeRTOS/Source/queue.c **** 					{
1106:../../../FreeRTOS/Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
ARM GAS  /tmp/cc99qdVQ.s 			page 48


1107:../../../FreeRTOS/Source/queue.c **** 						{
1108:../../../FreeRTOS/Source/queue.c **** 							/* The queue is a member of a queue set, and posting
1109:../../../FreeRTOS/Source/queue.c **** 							to the queue set caused a higher priority task to
1110:../../../FreeRTOS/Source/queue.c **** 							unblock.  A context switch is required. */
1111:../../../FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1112:../../../FreeRTOS/Source/queue.c **** 							{
1113:../../../FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1114:../../../FreeRTOS/Source/queue.c **** 							}
1115:../../../FreeRTOS/Source/queue.c **** 							else
1116:../../../FreeRTOS/Source/queue.c **** 							{
1117:../../../FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1118:../../../FreeRTOS/Source/queue.c **** 							}
1119:../../../FreeRTOS/Source/queue.c **** 						}
1120:../../../FreeRTOS/Source/queue.c **** 						else
1121:../../../FreeRTOS/Source/queue.c **** 						{
1122:../../../FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1123:../../../FreeRTOS/Source/queue.c **** 						}
1124:../../../FreeRTOS/Source/queue.c **** 					}
1125:../../../FreeRTOS/Source/queue.c **** 					else
1126:../../../FreeRTOS/Source/queue.c **** 					{
1127:../../../FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1128:../../../FreeRTOS/Source/queue.c **** 						{
1129:../../../FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1130:../../../FreeRTOS/Source/queue.c **** 							{
1131:../../../FreeRTOS/Source/queue.c **** 								/* The task waiting has a higher priority so
1132:../../../FreeRTOS/Source/queue.c **** 								record that a context switch is required. */
1133:../../../FreeRTOS/Source/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1134:../../../FreeRTOS/Source/queue.c **** 								{
1135:../../../FreeRTOS/Source/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1136:../../../FreeRTOS/Source/queue.c **** 								}
1137:../../../FreeRTOS/Source/queue.c **** 								else
1138:../../../FreeRTOS/Source/queue.c **** 								{
1139:../../../FreeRTOS/Source/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1140:../../../FreeRTOS/Source/queue.c **** 								}
1141:../../../FreeRTOS/Source/queue.c **** 							}
1142:../../../FreeRTOS/Source/queue.c **** 							else
1143:../../../FreeRTOS/Source/queue.c **** 							{
1144:../../../FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1145:../../../FreeRTOS/Source/queue.c **** 							}
1146:../../../FreeRTOS/Source/queue.c **** 						}
1147:../../../FreeRTOS/Source/queue.c **** 						else
1148:../../../FreeRTOS/Source/queue.c **** 						{
1149:../../../FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1150:../../../FreeRTOS/Source/queue.c **** 						}
1151:../../../FreeRTOS/Source/queue.c **** 					}
1152:../../../FreeRTOS/Source/queue.c **** 				}
1153:../../../FreeRTOS/Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1154:../../../FreeRTOS/Source/queue.c **** 				{
1155:../../../FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 1346              		.loc 1 1155 0
 1347 00e0 3B6B     		ldr	r3, [r7, #48]
 1348 00e2 5B6A     		ldr	r3, [r3, #36]
 1349 00e4 002B     		cmp	r3, #0
 1350 00e6 13D0     		beq	.L97
1156:../../../FreeRTOS/Source/queue.c **** 					{
1157:../../../FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 1351              		.loc 1 1157 0
ARM GAS  /tmp/cc99qdVQ.s 			page 49


 1352 00e8 3B6B     		ldr	r3, [r7, #48]
 1353 00ea 2433     		adds	r3, r3, #36
 1354 00ec 1846     		mov	r0, r3
 1355 00ee FFF7FEFF 		bl	xTaskRemoveFromEventList
 1356 00f2 0346     		mov	r3, r0
 1357 00f4 002B     		cmp	r3, #0
 1358 00f6 0BD0     		beq	.L97
1158:../../../FreeRTOS/Source/queue.c **** 						{
1159:../../../FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1160:../../../FreeRTOS/Source/queue.c **** 							context	switch is required. */
1161:../../../FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
 1359              		.loc 1 1161 0
 1360 00f8 7B68     		ldr	r3, [r7, #4]
 1361 00fa 002B     		cmp	r3, #0
 1362 00fc 08D0     		beq	.L97
1162:../../../FreeRTOS/Source/queue.c **** 							{
1163:../../../FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
 1363              		.loc 1 1163 0
 1364 00fe 7B68     		ldr	r3, [r7, #4]
 1365 0100 0122     		movs	r2, #1
 1366 0102 1A60     		str	r2, [r3]
 1367 0104 04E0     		b	.L97
 1368              	.L96:
1164:../../../FreeRTOS/Source/queue.c **** 							}
1165:../../../FreeRTOS/Source/queue.c **** 							else
1166:../../../FreeRTOS/Source/queue.c **** 							{
1167:../../../FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1168:../../../FreeRTOS/Source/queue.c **** 							}
1169:../../../FreeRTOS/Source/queue.c **** 						}
1170:../../../FreeRTOS/Source/queue.c **** 						else
1171:../../../FreeRTOS/Source/queue.c **** 						{
1172:../../../FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1173:../../../FreeRTOS/Source/queue.c **** 						}
1174:../../../FreeRTOS/Source/queue.c **** 					}
1175:../../../FreeRTOS/Source/queue.c **** 					else
1176:../../../FreeRTOS/Source/queue.c **** 					{
1177:../../../FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1178:../../../FreeRTOS/Source/queue.c **** 					}
1179:../../../FreeRTOS/Source/queue.c **** 				}
1180:../../../FreeRTOS/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1181:../../../FreeRTOS/Source/queue.c **** 			}
1182:../../../FreeRTOS/Source/queue.c **** 			else
1183:../../../FreeRTOS/Source/queue.c **** 			{
1184:../../../FreeRTOS/Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1185:../../../FreeRTOS/Source/queue.c **** 				knows that data was posted while it was locked. */
1186:../../../FreeRTOS/Source/queue.c **** 				++( pxQueue->xTxLock );
 1369              		.loc 1 1186 0
 1370 0106 3B6B     		ldr	r3, [r7, #48]
 1371 0108 9B6C     		ldr	r3, [r3, #72]
 1372 010a 5A1C     		adds	r2, r3, #1
 1373 010c 3B6B     		ldr	r3, [r7, #48]
 1374 010e 9A64     		str	r2, [r3, #72]
 1375              	.L97:
1187:../../../FreeRTOS/Source/queue.c **** 			}
1188:../../../FreeRTOS/Source/queue.c **** 
1189:../../../FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 1376              		.loc 1 1189 0
ARM GAS  /tmp/cc99qdVQ.s 			page 50


 1377 0110 0123     		movs	r3, #1
 1378 0112 7B63     		str	r3, [r7, #52]
 1379 0114 0CE0     		b	.L98
 1380              	.L95:
1190:../../../FreeRTOS/Source/queue.c **** 		}
1191:../../../FreeRTOS/Source/queue.c **** 		else
1192:../../../FreeRTOS/Source/queue.c **** 		{
1193:../../../FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 1381              		.loc 1 1193 0
 1382 0116 3B6B     		ldr	r3, [r7, #48]
 1383 0118 1846     		mov	r0, r3
 1384 011a FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 1385 011e 0246     		mov	r2, r0
 1386 0120 7B68     		ldr	r3, [r7, #4]
 1387 0122 6020     		movs	r0, #96
 1388 0124 1146     		mov	r1, r2
 1389 0126 1A46     		mov	r2, r3
 1390 0128 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x2
1194:../../../FreeRTOS/Source/queue.c **** 			xReturn = errQUEUE_FULL;
 1391              		.loc 1 1194 0
 1392 012c 0023     		movs	r3, #0
 1393 012e 7B63     		str	r3, [r7, #52]
 1394              	.L98:
 1395 0130 FB6A     		ldr	r3, [r7, #44]
 1396 0132 7B61     		str	r3, [r7, #20]
 1397              	.LBB114:
 1398              	.LBB115:
 244:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 245:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 246:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 247:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 248:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 249:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1399              		.loc 2 249 0
 1400 0134 7B69     		ldr	r3, [r7, #20]
 1401              	@ 249 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1402 0136 83F31188 			msr basepri, r3	
 1403              	@ 0 "" 2
 1404              		.thumb
 1405              	.LBE115:
 1406              	.LBE114:
1195:../../../FreeRTOS/Source/queue.c **** 		}
1196:../../../FreeRTOS/Source/queue.c **** 	}
1197:../../../FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1198:../../../FreeRTOS/Source/queue.c **** 
1199:../../../FreeRTOS/Source/queue.c **** 	return xReturn;
 1407              		.loc 1 1199 0
 1408 013a 7B6B     		ldr	r3, [r7, #52]
1200:../../../FreeRTOS/Source/queue.c **** }
 1409              		.loc 1 1200 0
 1410 013c 1846     		mov	r0, r3
 1411 013e 3837     		adds	r7, r7, #56
 1412              	.LCFI38:
 1413              		.cfi_def_cfa_offset 8
 1414 0140 BD46     		mov	sp, r7
 1415              	.LCFI39:
 1416              		.cfi_def_cfa_register 13
ARM GAS  /tmp/cc99qdVQ.s 			page 51


 1417              		@ sp needed
 1418 0142 80BD     		pop	{r7, pc}
 1419              		.cfi_endproc
 1420              	.LFE11:
 1422              		.section	.text.xQueueGiveFromISR,"ax",%progbits
 1423              		.align	2
 1424              		.global	xQueueGiveFromISR
 1425              		.thumb
 1426              		.thumb_func
 1428              	xQueueGiveFromISR:
 1429              	.LFB12:
1201:../../../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1202:../../../FreeRTOS/Source/queue.c **** 
1203:../../../FreeRTOS/Source/queue.c **** BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
1204:../../../FreeRTOS/Source/queue.c **** {
 1430              		.loc 1 1204 0
 1431              		.cfi_startproc
 1432              		@ args = 0, pretend = 0, frame = 48
 1433              		@ frame_needed = 1, uses_anonymous_args = 0
 1434 0000 80B5     		push	{r7, lr}
 1435              	.LCFI40:
 1436              		.cfi_def_cfa_offset 8
 1437              		.cfi_offset 7, -8
 1438              		.cfi_offset 14, -4
 1439 0002 8CB0     		sub	sp, sp, #48
 1440              	.LCFI41:
 1441              		.cfi_def_cfa_offset 56
 1442 0004 00AF     		add	r7, sp, #0
 1443              	.LCFI42:
 1444              		.cfi_def_cfa_register 7
 1445 0006 7860     		str	r0, [r7, #4]
 1446 0008 3960     		str	r1, [r7]
1205:../../../FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1206:../../../FreeRTOS/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1207:../../../FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 1447              		.loc 1 1207 0
 1448 000a 7B68     		ldr	r3, [r7, #4]
 1449 000c BB62     		str	r3, [r7, #40]
1208:../../../FreeRTOS/Source/queue.c **** 
1209:../../../FreeRTOS/Source/queue.c **** 	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
1210:../../../FreeRTOS/Source/queue.c **** 	item size is 0.  Don't directly wake a task that was blocked on a queue
1211:../../../FreeRTOS/Source/queue.c **** 	read, instead return a flag to say whether a context switch is required or
1212:../../../FreeRTOS/Source/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
1213:../../../FreeRTOS/Source/queue.c **** 	post). */
1214:../../../FreeRTOS/Source/queue.c **** 
1215:../../../FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 1450              		.loc 1 1215 0
 1451 000e BB6A     		ldr	r3, [r7, #40]
 1452 0010 002B     		cmp	r3, #0
 1453 0012 09D1     		bne	.L101
 1454              	.LBB116:
 1455              	.LBB117:
 215:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1456              		.loc 2 215 0 discriminator 1
 1457              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1458 0014 4FF05003 			mov r3, #80												
 1459 0018 83F31188 		msr basepri, r3											
ARM GAS  /tmp/cc99qdVQ.s 			page 52


 1460 001c BFF36F8F 		isb														
 1461 0020 BFF34F8F 		dsb														
 1462              	
 1463              	@ 0 "" 2
 1464              		.thumb
 1465 0024 3B62     		str	r3, [r7, #32]
 1466              	.L102:
 1467              	.LBE117:
 1468              	.LBE116:
 1469              		.loc 1 1215 0 discriminator 1
 1470 0026 FEE7     		b	.L102
 1471              	.L101:
1216:../../../FreeRTOS/Source/queue.c **** 
1217:../../../FreeRTOS/Source/queue.c **** 	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
1218:../../../FreeRTOS/Source/queue.c **** 	if the item size is not 0. */
1219:../../../FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
 1472              		.loc 1 1219 0
 1473 0028 BB6A     		ldr	r3, [r7, #40]
 1474 002a 1B6C     		ldr	r3, [r3, #64]
 1475 002c 002B     		cmp	r3, #0
 1476 002e 09D0     		beq	.L103
 1477              	.LBB118:
 1478              	.LBB119:
 215:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1479              		.loc 2 215 0 discriminator 1
 1480              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1481 0030 4FF05003 			mov r3, #80												
 1482 0034 83F31188 		msr basepri, r3											
 1483 0038 BFF36F8F 		isb														
 1484 003c BFF34F8F 		dsb														
 1485              	
 1486              	@ 0 "" 2
 1487              		.thumb
 1488 0040 FB61     		str	r3, [r7, #28]
 1489              	.L104:
 1490              	.LBE119:
 1491              	.LBE118:
 1492              		.loc 1 1219 0 discriminator 2
 1493 0042 FEE7     		b	.L104
 1494              	.L103:
1220:../../../FreeRTOS/Source/queue.c **** 
1221:../../../FreeRTOS/Source/queue.c **** 	/* Normally a mutex would not be given from an interrupt, especially if
1222:../../../FreeRTOS/Source/queue.c **** 	there is a mutex holder, as priority inheritance makes no sense for an
1223:../../../FreeRTOS/Source/queue.c **** 	interrupts, only tasks. */
1224:../../../FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NU
 1495              		.loc 1 1224 0
 1496 0044 BB6A     		ldr	r3, [r7, #40]
 1497 0046 1B68     		ldr	r3, [r3]
 1498 0048 002B     		cmp	r3, #0
 1499 004a 03D1     		bne	.L105
 1500              		.loc 1 1224 0 is_stmt 0 discriminator 2
 1501 004c BB6A     		ldr	r3, [r7, #40]
 1502 004e 5B68     		ldr	r3, [r3, #4]
 1503 0050 002B     		cmp	r3, #0
 1504 0052 01D1     		bne	.L106
 1505              	.L105:
 1506              		.loc 1 1224 0 discriminator 3
ARM GAS  /tmp/cc99qdVQ.s 			page 53


 1507 0054 0123     		movs	r3, #1
 1508 0056 00E0     		b	.L107
 1509              	.L106:
 1510              		.loc 1 1224 0 discriminator 4
 1511 0058 0023     		movs	r3, #0
 1512              	.L107:
 1513              		.loc 1 1224 0 discriminator 6
 1514 005a 002B     		cmp	r3, #0
 1515 005c 09D1     		bne	.L108
 1516              	.LBB120:
 1517              	.LBB121:
 215:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1518              		.loc 2 215 0 is_stmt 1 discriminator 7
 1519              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1520 005e 4FF05003 			mov r3, #80												
 1521 0062 83F31188 		msr basepri, r3											
 1522 0066 BFF36F8F 		isb														
 1523 006a BFF34F8F 		dsb														
 1524              	
 1525              	@ 0 "" 2
 1526              		.thumb
 1527 006e BB61     		str	r3, [r7, #24]
 1528              	.L109:
 1529              	.LBE121:
 1530              	.LBE120:
 1531              		.loc 1 1224 0 discriminator 3
 1532 0070 FEE7     		b	.L109
 1533              	.L108:
1225:../../../FreeRTOS/Source/queue.c **** 
1226:../../../FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1227:../../../FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1228:../../../FreeRTOS/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1229:../../../FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1230:../../../FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1231:../../../FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1232:../../../FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1233:../../../FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1234:../../../FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1235:../../../FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1236:../../../FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1237:../../../FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1238:../../../FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1239:../../../FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1240:../../../FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1534              		.loc 1 1240 0
 1535 0072 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1536              	.LBB122:
 1537              	.LBB123:
 231:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1538              		.loc 2 231 0
 1539              	@ 231 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1540 0076 EFF31182 			mrs r2, basepri											
 1541 007a 4FF05003 		mov r3, #80												
 1542 007e 83F31188 		msr basepri, r3											
 1543 0082 BFF36F8F 		isb														
 1544 0086 BFF34F8F 		dsb														
 1545              	
ARM GAS  /tmp/cc99qdVQ.s 			page 54


 1546              	@ 0 "" 2
 1547              		.thumb
 1548 008a 7A61     		str	r2, [r7, #20]
 1549 008c 3B61     		str	r3, [r7, #16]
 243:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 1550              		.loc 2 243 0
 1551 008e 7B69     		ldr	r3, [r7, #20]
 1552              	.LBE123:
 1553              	.LBE122:
1241:../../../FreeRTOS/Source/queue.c **** 
1242:../../../FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1554              		.loc 1 1242 0
 1555 0090 7B62     		str	r3, [r7, #36]
1243:../../../FreeRTOS/Source/queue.c **** 	{
1244:../../../FreeRTOS/Source/queue.c **** 		/* When the queue is used to implement a semaphore no data is ever
1245:../../../FreeRTOS/Source/queue.c **** 		moved through the queue but it is still valid to see if the queue 'has
1246:../../../FreeRTOS/Source/queue.c **** 		space'. */
1247:../../../FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 1556              		.loc 1 1247 0
 1557 0092 BB6A     		ldr	r3, [r7, #40]
 1558 0094 9A6B     		ldr	r2, [r3, #56]
 1559 0096 BB6A     		ldr	r3, [r7, #40]
 1560 0098 DB6B     		ldr	r3, [r3, #60]
 1561 009a 9A42     		cmp	r2, r3
 1562 009c 2FD2     		bcs	.L111
1248:../../../FreeRTOS/Source/queue.c **** 		{
1249:../../../FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
 1563              		.loc 1 1249 0
 1564 009e BB6A     		ldr	r3, [r7, #40]
 1565 00a0 1846     		mov	r0, r3
 1566 00a2 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 1567 00a6 0246     		mov	r2, r0
 1568 00a8 3B68     		ldr	r3, [r7]
 1569 00aa 6020     		movs	r0, #96
 1570 00ac 1146     		mov	r1, r2
 1571 00ae 1A46     		mov	r2, r3
 1572 00b0 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x2
1250:../../../FreeRTOS/Source/queue.c **** 
1251:../../../FreeRTOS/Source/queue.c **** 			/* A task can only have an inherited priority if it is a mutex
1252:../../../FreeRTOS/Source/queue.c **** 			holder - and if there is a mutex holder then the mutex cannot be
1253:../../../FreeRTOS/Source/queue.c **** 			given from an ISR.  As this is the ISR version of the function it
1254:../../../FreeRTOS/Source/queue.c **** 			can be assumed there is no mutex holder and no need to determine if
1255:../../../FreeRTOS/Source/queue.c **** 			priority disinheritance is needed.  Simply increase the count of
1256:../../../FreeRTOS/Source/queue.c **** 			messages (semaphores) available. */
1257:../../../FreeRTOS/Source/queue.c **** 			++( pxQueue->uxMessagesWaiting );
 1573              		.loc 1 1257 0
 1574 00b4 BB6A     		ldr	r3, [r7, #40]
 1575 00b6 9B6B     		ldr	r3, [r3, #56]
 1576 00b8 5A1C     		adds	r2, r3, #1
 1577 00ba BB6A     		ldr	r3, [r7, #40]
 1578 00bc 9A63     		str	r2, [r3, #56]
1258:../../../FreeRTOS/Source/queue.c **** 
1259:../../../FreeRTOS/Source/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
1260:../../../FreeRTOS/Source/queue.c **** 			be done when the queue is unlocked later. */
1261:../../../FreeRTOS/Source/queue.c **** 			if( pxQueue->xTxLock == queueUNLOCKED )
 1579              		.loc 1 1261 0
 1580 00be BB6A     		ldr	r3, [r7, #40]
ARM GAS  /tmp/cc99qdVQ.s 			page 55


 1581 00c0 9B6C     		ldr	r3, [r3, #72]
 1582 00c2 B3F1FF3F 		cmp	r3, #-1
 1583 00c6 12D1     		bne	.L112
1262:../../../FreeRTOS/Source/queue.c **** 			{
1263:../../../FreeRTOS/Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
1264:../../../FreeRTOS/Source/queue.c **** 				{
1265:../../../FreeRTOS/Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1266:../../../FreeRTOS/Source/queue.c **** 					{
1267:../../../FreeRTOS/Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
1268:../../../FreeRTOS/Source/queue.c **** 						{
1269:../../../FreeRTOS/Source/queue.c **** 							/* The semaphore is a member of a queue set, and
1270:../../../FreeRTOS/Source/queue.c **** 							posting	to the queue set caused a higher priority
1271:../../../FreeRTOS/Source/queue.c **** 							task to	unblock.  A context switch is required. */
1272:../../../FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1273:../../../FreeRTOS/Source/queue.c **** 							{
1274:../../../FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1275:../../../FreeRTOS/Source/queue.c **** 							}
1276:../../../FreeRTOS/Source/queue.c **** 							else
1277:../../../FreeRTOS/Source/queue.c **** 							{
1278:../../../FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1279:../../../FreeRTOS/Source/queue.c **** 							}
1280:../../../FreeRTOS/Source/queue.c **** 						}
1281:../../../FreeRTOS/Source/queue.c **** 						else
1282:../../../FreeRTOS/Source/queue.c **** 						{
1283:../../../FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1284:../../../FreeRTOS/Source/queue.c **** 						}
1285:../../../FreeRTOS/Source/queue.c **** 					}
1286:../../../FreeRTOS/Source/queue.c **** 					else
1287:../../../FreeRTOS/Source/queue.c **** 					{
1288:../../../FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1289:../../../FreeRTOS/Source/queue.c **** 						{
1290:../../../FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1291:../../../FreeRTOS/Source/queue.c **** 							{
1292:../../../FreeRTOS/Source/queue.c **** 								/* The task waiting has a higher priority so
1293:../../../FreeRTOS/Source/queue.c **** 								record that a context switch is required. */
1294:../../../FreeRTOS/Source/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1295:../../../FreeRTOS/Source/queue.c **** 								{
1296:../../../FreeRTOS/Source/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1297:../../../FreeRTOS/Source/queue.c **** 								}
1298:../../../FreeRTOS/Source/queue.c **** 								else
1299:../../../FreeRTOS/Source/queue.c **** 								{
1300:../../../FreeRTOS/Source/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1301:../../../FreeRTOS/Source/queue.c **** 								}
1302:../../../FreeRTOS/Source/queue.c **** 							}
1303:../../../FreeRTOS/Source/queue.c **** 							else
1304:../../../FreeRTOS/Source/queue.c **** 							{
1305:../../../FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1306:../../../FreeRTOS/Source/queue.c **** 							}
1307:../../../FreeRTOS/Source/queue.c **** 						}
1308:../../../FreeRTOS/Source/queue.c **** 						else
1309:../../../FreeRTOS/Source/queue.c **** 						{
1310:../../../FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1311:../../../FreeRTOS/Source/queue.c **** 						}
1312:../../../FreeRTOS/Source/queue.c **** 					}
1313:../../../FreeRTOS/Source/queue.c **** 				}
1314:../../../FreeRTOS/Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1315:../../../FreeRTOS/Source/queue.c **** 				{
ARM GAS  /tmp/cc99qdVQ.s 			page 56


1316:../../../FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 1584              		.loc 1 1316 0
 1585 00c8 BB6A     		ldr	r3, [r7, #40]
 1586 00ca 5B6A     		ldr	r3, [r3, #36]
 1587 00cc 002B     		cmp	r3, #0
 1588 00ce 13D0     		beq	.L113
1317:../../../FreeRTOS/Source/queue.c **** 					{
1318:../../../FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 1589              		.loc 1 1318 0
 1590 00d0 BB6A     		ldr	r3, [r7, #40]
 1591 00d2 2433     		adds	r3, r3, #36
 1592 00d4 1846     		mov	r0, r3
 1593 00d6 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1594 00da 0346     		mov	r3, r0
 1595 00dc 002B     		cmp	r3, #0
 1596 00de 0BD0     		beq	.L113
1319:../../../FreeRTOS/Source/queue.c **** 						{
1320:../../../FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1321:../../../FreeRTOS/Source/queue.c **** 							context	switch is required. */
1322:../../../FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
 1597              		.loc 1 1322 0
 1598 00e0 3B68     		ldr	r3, [r7]
 1599 00e2 002B     		cmp	r3, #0
 1600 00e4 08D0     		beq	.L113
1323:../../../FreeRTOS/Source/queue.c **** 							{
1324:../../../FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
 1601              		.loc 1 1324 0
 1602 00e6 3B68     		ldr	r3, [r7]
 1603 00e8 0122     		movs	r2, #1
 1604 00ea 1A60     		str	r2, [r3]
 1605 00ec 04E0     		b	.L113
 1606              	.L112:
1325:../../../FreeRTOS/Source/queue.c **** 							}
1326:../../../FreeRTOS/Source/queue.c **** 							else
1327:../../../FreeRTOS/Source/queue.c **** 							{
1328:../../../FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1329:../../../FreeRTOS/Source/queue.c **** 							}
1330:../../../FreeRTOS/Source/queue.c **** 						}
1331:../../../FreeRTOS/Source/queue.c **** 						else
1332:../../../FreeRTOS/Source/queue.c **** 						{
1333:../../../FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1334:../../../FreeRTOS/Source/queue.c **** 						}
1335:../../../FreeRTOS/Source/queue.c **** 					}
1336:../../../FreeRTOS/Source/queue.c **** 					else
1337:../../../FreeRTOS/Source/queue.c **** 					{
1338:../../../FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1339:../../../FreeRTOS/Source/queue.c **** 					}
1340:../../../FreeRTOS/Source/queue.c **** 				}
1341:../../../FreeRTOS/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1342:../../../FreeRTOS/Source/queue.c **** 			}
1343:../../../FreeRTOS/Source/queue.c **** 			else
1344:../../../FreeRTOS/Source/queue.c **** 			{
1345:../../../FreeRTOS/Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1346:../../../FreeRTOS/Source/queue.c **** 				knows that data was posted while it was locked. */
1347:../../../FreeRTOS/Source/queue.c **** 				++( pxQueue->xTxLock );
 1607              		.loc 1 1347 0
 1608 00ee BB6A     		ldr	r3, [r7, #40]
ARM GAS  /tmp/cc99qdVQ.s 			page 57


 1609 00f0 9B6C     		ldr	r3, [r3, #72]
 1610 00f2 5A1C     		adds	r2, r3, #1
 1611 00f4 BB6A     		ldr	r3, [r7, #40]
 1612 00f6 9A64     		str	r2, [r3, #72]
 1613              	.L113:
1348:../../../FreeRTOS/Source/queue.c **** 			}
1349:../../../FreeRTOS/Source/queue.c **** 
1350:../../../FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 1614              		.loc 1 1350 0
 1615 00f8 0123     		movs	r3, #1
 1616 00fa FB62     		str	r3, [r7, #44]
 1617 00fc 0CE0     		b	.L114
 1618              	.L111:
1351:../../../FreeRTOS/Source/queue.c **** 		}
1352:../../../FreeRTOS/Source/queue.c **** 		else
1353:../../../FreeRTOS/Source/queue.c **** 		{
1354:../../../FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 1619              		.loc 1 1354 0
 1620 00fe BB6A     		ldr	r3, [r7, #40]
 1621 0100 1846     		mov	r0, r3
 1622 0102 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 1623 0106 0246     		mov	r2, r0
 1624 0108 3B68     		ldr	r3, [r7]
 1625 010a 6020     		movs	r0, #96
 1626 010c 1146     		mov	r1, r2
 1627 010e 1A46     		mov	r2, r3
 1628 0110 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x2
1355:../../../FreeRTOS/Source/queue.c **** 			xReturn = errQUEUE_FULL;
 1629              		.loc 1 1355 0
 1630 0114 0023     		movs	r3, #0
 1631 0116 FB62     		str	r3, [r7, #44]
 1632              	.L114:
 1633 0118 7B6A     		ldr	r3, [r7, #36]
 1634 011a FB60     		str	r3, [r7, #12]
 1635              	.LBB124:
 1636              	.LBB125:
 1637              		.loc 2 249 0
 1638 011c FB68     		ldr	r3, [r7, #12]
 1639              	@ 249 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1640 011e 83F31188 			msr basepri, r3	
 1641              	@ 0 "" 2
 1642              		.thumb
 1643              	.LBE125:
 1644              	.LBE124:
1356:../../../FreeRTOS/Source/queue.c **** 		}
1357:../../../FreeRTOS/Source/queue.c **** 	}
1358:../../../FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1359:../../../FreeRTOS/Source/queue.c **** 
1360:../../../FreeRTOS/Source/queue.c **** 	return xReturn;
 1645              		.loc 1 1360 0
 1646 0122 FB6A     		ldr	r3, [r7, #44]
1361:../../../FreeRTOS/Source/queue.c **** }
 1647              		.loc 1 1361 0
 1648 0124 1846     		mov	r0, r3
 1649 0126 3037     		adds	r7, r7, #48
 1650              	.LCFI43:
 1651              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cc99qdVQ.s 			page 58


 1652 0128 BD46     		mov	sp, r7
 1653              	.LCFI44:
 1654              		.cfi_def_cfa_register 13
 1655              		@ sp needed
 1656 012a 80BD     		pop	{r7, pc}
 1657              		.cfi_endproc
 1658              	.LFE12:
 1660              		.section	.text.xQueueGenericReceive,"ax",%progbits
 1661              		.align	2
 1662              		.global	xQueueGenericReceive
 1663              		.thumb
 1664              		.thumb_func
 1666              	xQueueGenericReceive:
 1667              	.LFB13:
1362:../../../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1363:../../../FreeRTOS/Source/queue.c **** 
1364:../../../FreeRTOS/Source/queue.c **** BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWa
1365:../../../FreeRTOS/Source/queue.c **** {
 1668              		.loc 1 1365 0
 1669              		.cfi_startproc
 1670              		@ args = 0, pretend = 0, frame = 48
 1671              		@ frame_needed = 1, uses_anonymous_args = 0
 1672 0000 B0B5     		push	{r4, r5, r7, lr}
 1673              	.LCFI45:
 1674              		.cfi_def_cfa_offset 16
 1675              		.cfi_offset 4, -16
 1676              		.cfi_offset 5, -12
 1677              		.cfi_offset 7, -8
 1678              		.cfi_offset 14, -4
 1679 0002 8EB0     		sub	sp, sp, #56
 1680              	.LCFI46:
 1681              		.cfi_def_cfa_offset 72
 1682 0004 02AF     		add	r7, sp, #8
 1683              	.LCFI47:
 1684              		.cfi_def_cfa 7, 64
 1685 0006 F860     		str	r0, [r7, #12]
 1686 0008 B960     		str	r1, [r7, #8]
 1687 000a 7A60     		str	r2, [r7, #4]
 1688 000c 3B60     		str	r3, [r7]
1366:../../../FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1689              		.loc 1 1366 0
 1690 000e 0023     		movs	r3, #0
 1691 0010 FB62     		str	r3, [r7, #44]
1367:../../../FreeRTOS/Source/queue.c **** TimeOut_t xTimeOut;
1368:../../../FreeRTOS/Source/queue.c **** int8_t *pcOriginalReadPosition;
1369:../../../FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 1692              		.loc 1 1369 0
 1693 0012 FB68     		ldr	r3, [r7, #12]
 1694 0014 BB62     		str	r3, [r7, #40]
1370:../../../FreeRTOS/Source/queue.c **** 
1371:../../../FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 1695              		.loc 1 1371 0
 1696 0016 BB6A     		ldr	r3, [r7, #40]
 1697 0018 002B     		cmp	r3, #0
 1698 001a 09D1     		bne	.L117
 1699              	.LBB126:
 1700              	.LBB127:
ARM GAS  /tmp/cc99qdVQ.s 			page 59


 215:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1701              		.loc 2 215 0 discriminator 1
 1702              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1703 001c 4FF05003 			mov r3, #80												
 1704 0020 83F31188 		msr basepri, r3											
 1705 0024 BFF36F8F 		isb														
 1706 0028 BFF34F8F 		dsb														
 1707              	
 1708              	@ 0 "" 2
 1709              		.thumb
 1710 002c 3B62     		str	r3, [r7, #32]
 1711              	.L118:
 1712              	.LBE127:
 1713              	.LBE126:
 1714              		.loc 1 1371 0 discriminator 1
 1715 002e FEE7     		b	.L118
 1716              	.L117:
1372:../../../FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1717              		.loc 1 1372 0
 1718 0030 BB68     		ldr	r3, [r7, #8]
 1719 0032 002B     		cmp	r3, #0
 1720 0034 03D1     		bne	.L119
 1721              		.loc 1 1372 0 is_stmt 0 discriminator 2
 1722 0036 BB6A     		ldr	r3, [r7, #40]
 1723 0038 1B6C     		ldr	r3, [r3, #64]
 1724 003a 002B     		cmp	r3, #0
 1725 003c 01D1     		bne	.L120
 1726              	.L119:
 1727              		.loc 1 1372 0 discriminator 3
 1728 003e 0123     		movs	r3, #1
 1729 0040 00E0     		b	.L121
 1730              	.L120:
 1731              		.loc 1 1372 0 discriminator 4
 1732 0042 0023     		movs	r3, #0
 1733              	.L121:
 1734              		.loc 1 1372 0 discriminator 6
 1735 0044 002B     		cmp	r3, #0
 1736 0046 09D1     		bne	.L122
 1737              	.LBB128:
 1738              	.LBB129:
 215:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1739              		.loc 2 215 0 is_stmt 1 discriminator 7
 1740              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1741 0048 4FF05003 			mov r3, #80												
 1742 004c 83F31188 		msr basepri, r3											
 1743 0050 BFF36F8F 		isb														
 1744 0054 BFF34F8F 		dsb														
 1745              	
 1746              	@ 0 "" 2
 1747              		.thumb
 1748 0058 FB61     		str	r3, [r7, #28]
 1749              	.L123:
 1750              	.LBE129:
 1751              	.LBE128:
 1752              		.loc 1 1372 0 discriminator 2
 1753 005a FEE7     		b	.L123
 1754              	.L122:
ARM GAS  /tmp/cc99qdVQ.s 			page 60


1373:../../../FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1374:../../../FreeRTOS/Source/queue.c **** 	{
1375:../../../FreeRTOS/Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 1755              		.loc 1 1375 0
 1756 005c FFF7FEFF 		bl	xTaskGetSchedulerState
 1757 0060 0346     		mov	r3, r0
 1758 0062 002B     		cmp	r3, #0
 1759 0064 02D1     		bne	.L124
 1760              		.loc 1 1375 0 is_stmt 0 discriminator 2
 1761 0066 7B68     		ldr	r3, [r7, #4]
 1762 0068 002B     		cmp	r3, #0
 1763 006a 01D1     		bne	.L125
 1764              	.L124:
 1765              		.loc 1 1375 0 discriminator 3
 1766 006c 0123     		movs	r3, #1
 1767 006e 00E0     		b	.L126
 1768              	.L125:
 1769              		.loc 1 1375 0 discriminator 4
 1770 0070 0023     		movs	r3, #0
 1771              	.L126:
 1772              		.loc 1 1375 0 discriminator 6
 1773 0072 002B     		cmp	r3, #0
 1774 0074 09D1     		bne	.L127
 1775              	.LBB130:
 1776              	.LBB131:
 215:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1777              		.loc 2 215 0 is_stmt 1 discriminator 7
 1778              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1779 0076 4FF05003 			mov r3, #80												
 1780 007a 83F31188 		msr basepri, r3											
 1781 007e BFF36F8F 		isb														
 1782 0082 BFF34F8F 		dsb														
 1783              	
 1784              	@ 0 "" 2
 1785              		.thumb
 1786 0086 BB61     		str	r3, [r7, #24]
 1787              	.L128:
 1788              	.LBE131:
 1789              	.LBE130:
 1790              		.loc 1 1375 0 discriminator 3
 1791 0088 FEE7     		b	.L128
 1792              	.L127:
1376:../../../FreeRTOS/Source/queue.c **** 	}
1377:../../../FreeRTOS/Source/queue.c **** 	#endif
1378:../../../FreeRTOS/Source/queue.c **** 
1379:../../../FreeRTOS/Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
1380:../../../FreeRTOS/Source/queue.c **** 	statements within the function itself.  This is done in the interest
1381:../../../FreeRTOS/Source/queue.c **** 	of execution time efficiency. */
1382:../../../FreeRTOS/Source/queue.c **** 
1383:../../../FreeRTOS/Source/queue.c **** 	for( ;; )
1384:../../../FreeRTOS/Source/queue.c **** 	{
1385:../../../FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
 1793              		.loc 1 1385 0
 1794 008a FFF7FEFF 		bl	vPortEnterCritical
1386:../../../FreeRTOS/Source/queue.c **** 		{
1387:../../../FreeRTOS/Source/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1388:../../../FreeRTOS/Source/queue.c **** 			must be	the highest priority task wanting to access the queue. */
ARM GAS  /tmp/cc99qdVQ.s 			page 61


1389:../../../FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 1795              		.loc 1 1389 0
 1796 008e BB6A     		ldr	r3, [r7, #40]
 1797 0090 9B6B     		ldr	r3, [r3, #56]
 1798 0092 002B     		cmp	r3, #0
 1799 0094 6BD0     		beq	.L129
1390:../../../FreeRTOS/Source/queue.c **** 			{
1391:../../../FreeRTOS/Source/queue.c **** 				/* Remember the read position in case the queue is only being
1392:../../../FreeRTOS/Source/queue.c **** 				peeked. */
1393:../../../FreeRTOS/Source/queue.c **** 				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 1800              		.loc 1 1393 0
 1801 0096 BB6A     		ldr	r3, [r7, #40]
 1802 0098 DB68     		ldr	r3, [r3, #12]
 1803 009a 7B62     		str	r3, [r7, #36]
1394:../../../FreeRTOS/Source/queue.c **** 
1395:../../../FreeRTOS/Source/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
 1804              		.loc 1 1395 0
 1805 009c B86A     		ldr	r0, [r7, #40]
 1806 009e B968     		ldr	r1, [r7, #8]
 1807 00a0 FFF7FEFF 		bl	prvCopyDataFromQueue
1396:../../../FreeRTOS/Source/queue.c **** 
1397:../../../FreeRTOS/Source/queue.c **** 				if( xJustPeeking == pdFALSE )
 1808              		.loc 1 1397 0
 1809 00a4 3B68     		ldr	r3, [r7]
 1810 00a6 002B     		cmp	r3, #0
 1811 00a8 34D1     		bne	.L130
1398:../../../FreeRTOS/Source/queue.c **** 				{
1399:../../../FreeRTOS/Source/queue.c **** 					traceQUEUE_RECEIVE( pxQueue );
 1812              		.loc 1 1399 0
 1813 00aa BB6A     		ldr	r3, [r7, #40]
 1814 00ac 1846     		mov	r0, r3
 1815 00ae FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 1816 00b2 0546     		mov	r5, r0
 1817 00b4 BB68     		ldr	r3, [r7, #8]
 1818 00b6 1846     		mov	r0, r3
 1819 00b8 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 1820 00bc 0246     		mov	r2, r0
 1821 00be 7C68     		ldr	r4, [r7, #4]
 1822 00c0 3B68     		ldr	r3, [r7]
 1823 00c2 0093     		str	r3, [sp]
 1824 00c4 5C20     		movs	r0, #92
 1825 00c6 2946     		mov	r1, r5
 1826 00c8 2346     		mov	r3, r4
 1827 00ca FFF7FEFF 		bl	SYSVIEW_RecordU32x4
1400:../../../FreeRTOS/Source/queue.c **** 
1401:../../../FreeRTOS/Source/queue.c **** 					/* Actually removing data, not just peeking. */
1402:../../../FreeRTOS/Source/queue.c **** 					--( pxQueue->uxMessagesWaiting );
 1828              		.loc 1 1402 0
 1829 00ce BB6A     		ldr	r3, [r7, #40]
 1830 00d0 9B6B     		ldr	r3, [r3, #56]
 1831 00d2 5A1E     		subs	r2, r3, #1
 1832 00d4 BB6A     		ldr	r3, [r7, #40]
 1833 00d6 9A63     		str	r2, [r3, #56]
1403:../../../FreeRTOS/Source/queue.c **** 
1404:../../../FreeRTOS/Source/queue.c **** 					#if ( configUSE_MUTEXES == 1 )
1405:../../../FreeRTOS/Source/queue.c **** 					{
1406:../../../FreeRTOS/Source/queue.c **** 						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
ARM GAS  /tmp/cc99qdVQ.s 			page 62


 1834              		.loc 1 1406 0
 1835 00d8 BB6A     		ldr	r3, [r7, #40]
 1836 00da 1B68     		ldr	r3, [r3]
 1837 00dc 002B     		cmp	r3, #0
 1838 00de 04D1     		bne	.L131
1407:../../../FreeRTOS/Source/queue.c **** 						{
1408:../../../FreeRTOS/Source/queue.c **** 							/* Record the information required to implement
1409:../../../FreeRTOS/Source/queue.c **** 							priority inheritance should it become necessary. */
1410:../../../FreeRTOS/Source/queue.c **** 							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is 
 1839              		.loc 1 1410 0
 1840 00e0 FFF7FEFF 		bl	pvTaskIncrementMutexHeldCount
 1841 00e4 0246     		mov	r2, r0
 1842 00e6 BB6A     		ldr	r3, [r7, #40]
 1843 00e8 5A60     		str	r2, [r3, #4]
 1844              	.L131:
1411:../../../FreeRTOS/Source/queue.c **** 						}
1412:../../../FreeRTOS/Source/queue.c **** 						else
1413:../../../FreeRTOS/Source/queue.c **** 						{
1414:../../../FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1415:../../../FreeRTOS/Source/queue.c **** 						}
1416:../../../FreeRTOS/Source/queue.c **** 					}
1417:../../../FreeRTOS/Source/queue.c **** 					#endif /* configUSE_MUTEXES */
1418:../../../FreeRTOS/Source/queue.c **** 
1419:../../../FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 1845              		.loc 1 1419 0
 1846 00ea BB6A     		ldr	r3, [r7, #40]
 1847 00ec 1B69     		ldr	r3, [r3, #16]
 1848 00ee 002B     		cmp	r3, #0
 1849 00f0 39D0     		beq	.L132
1420:../../../FreeRTOS/Source/queue.c **** 					{
1421:../../../FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 1850              		.loc 1 1421 0
 1851 00f2 BB6A     		ldr	r3, [r7, #40]
 1852 00f4 1033     		adds	r3, r3, #16
 1853 00f6 1846     		mov	r0, r3
 1854 00f8 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1855 00fc 0346     		mov	r3, r0
 1856 00fe 012B     		cmp	r3, #1
 1857 0100 31D1     		bne	.L132
1422:../../../FreeRTOS/Source/queue.c **** 						{
1423:../../../FreeRTOS/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 1858              		.loc 1 1423 0
 1859 0102 654B     		ldr	r3, .L144
 1860 0104 4FF08052 		mov	r2, #268435456
 1861 0108 1A60     		str	r2, [r3]
 1862              	@ 1423 "../../../FreeRTOS/Source/queue.c" 1
 1863 010a BFF34F8F 		dsb
 1864              	@ 0 "" 2
 1865              	@ 1423 "../../../FreeRTOS/Source/queue.c" 1
 1866 010e BFF36F8F 		isb
 1867              	@ 0 "" 2
 1868              		.thumb
 1869 0112 28E0     		b	.L132
 1870              	.L130:
1424:../../../FreeRTOS/Source/queue.c **** 						}
1425:../../../FreeRTOS/Source/queue.c **** 						else
1426:../../../FreeRTOS/Source/queue.c **** 						{
ARM GAS  /tmp/cc99qdVQ.s 			page 63


1427:../../../FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1428:../../../FreeRTOS/Source/queue.c **** 						}
1429:../../../FreeRTOS/Source/queue.c **** 					}
1430:../../../FreeRTOS/Source/queue.c **** 					else
1431:../../../FreeRTOS/Source/queue.c **** 					{
1432:../../../FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1433:../../../FreeRTOS/Source/queue.c **** 					}
1434:../../../FreeRTOS/Source/queue.c **** 				}
1435:../../../FreeRTOS/Source/queue.c **** 				else
1436:../../../FreeRTOS/Source/queue.c **** 				{
1437:../../../FreeRTOS/Source/queue.c **** 					traceQUEUE_PEEK( pxQueue );
 1871              		.loc 1 1437 0
 1872 0114 BB6A     		ldr	r3, [r7, #40]
 1873 0116 1846     		mov	r0, r3
 1874 0118 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 1875 011c 0546     		mov	r5, r0
 1876 011e BB68     		ldr	r3, [r7, #8]
 1877 0120 1846     		mov	r0, r3
 1878 0122 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 1879 0126 0246     		mov	r2, r0
 1880 0128 7C68     		ldr	r4, [r7, #4]
 1881 012a 3B68     		ldr	r3, [r7]
 1882 012c 0093     		str	r3, [sp]
 1883 012e 5C20     		movs	r0, #92
 1884 0130 2946     		mov	r1, r5
 1885 0132 2346     		mov	r3, r4
 1886 0134 FFF7FEFF 		bl	SYSVIEW_RecordU32x4
1438:../../../FreeRTOS/Source/queue.c **** 
1439:../../../FreeRTOS/Source/queue.c **** 					/* The data is not being removed, so reset the read
1440:../../../FreeRTOS/Source/queue.c **** 					pointer. */
1441:../../../FreeRTOS/Source/queue.c **** 					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 1887              		.loc 1 1441 0
 1888 0138 BB6A     		ldr	r3, [r7, #40]
 1889 013a 7A6A     		ldr	r2, [r7, #36]
 1890 013c DA60     		str	r2, [r3, #12]
1442:../../../FreeRTOS/Source/queue.c **** 
1443:../../../FreeRTOS/Source/queue.c **** 					/* The data is being left in the queue, so see if there are
1444:../../../FreeRTOS/Source/queue.c **** 					any other tasks waiting for the data. */
1445:../../../FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 1891              		.loc 1 1445 0
 1892 013e BB6A     		ldr	r3, [r7, #40]
 1893 0140 5B6A     		ldr	r3, [r3, #36]
 1894 0142 002B     		cmp	r3, #0
 1895 0144 0FD0     		beq	.L132
1446:../../../FreeRTOS/Source/queue.c **** 					{
1447:../../../FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 1896              		.loc 1 1447 0
 1897 0146 BB6A     		ldr	r3, [r7, #40]
 1898 0148 2433     		adds	r3, r3, #36
 1899 014a 1846     		mov	r0, r3
 1900 014c FFF7FEFF 		bl	xTaskRemoveFromEventList
 1901 0150 0346     		mov	r3, r0
 1902 0152 002B     		cmp	r3, #0
 1903 0154 07D0     		beq	.L132
1448:../../../FreeRTOS/Source/queue.c **** 						{
1449:../../../FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority than this task. */
1450:../../../FreeRTOS/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
ARM GAS  /tmp/cc99qdVQ.s 			page 64


 1904              		.loc 1 1450 0
 1905 0156 504B     		ldr	r3, .L144
 1906 0158 4FF08052 		mov	r2, #268435456
 1907 015c 1A60     		str	r2, [r3]
 1908              	@ 1450 "../../../FreeRTOS/Source/queue.c" 1
 1909 015e BFF34F8F 		dsb
 1910              	@ 0 "" 2
 1911              	@ 1450 "../../../FreeRTOS/Source/queue.c" 1
 1912 0162 BFF36F8F 		isb
 1913              	@ 0 "" 2
 1914              		.thumb
 1915              	.L132:
1451:../../../FreeRTOS/Source/queue.c **** 						}
1452:../../../FreeRTOS/Source/queue.c **** 						else
1453:../../../FreeRTOS/Source/queue.c **** 						{
1454:../../../FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1455:../../../FreeRTOS/Source/queue.c **** 						}
1456:../../../FreeRTOS/Source/queue.c **** 					}
1457:../../../FreeRTOS/Source/queue.c **** 					else
1458:../../../FreeRTOS/Source/queue.c **** 					{
1459:../../../FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1460:../../../FreeRTOS/Source/queue.c **** 					}
1461:../../../FreeRTOS/Source/queue.c **** 				}
1462:../../../FreeRTOS/Source/queue.c **** 
1463:../../../FreeRTOS/Source/queue.c **** 				taskEXIT_CRITICAL();
 1916              		.loc 1 1463 0
 1917 0166 FFF7FEFF 		bl	vPortExitCritical
1464:../../../FreeRTOS/Source/queue.c **** 				return pdPASS;
 1918              		.loc 1 1464 0
 1919 016a 0123     		movs	r3, #1
 1920 016c 90E0     		b	.L143
 1921              	.L129:
1465:../../../FreeRTOS/Source/queue.c **** 			}
1466:../../../FreeRTOS/Source/queue.c **** 			else
1467:../../../FreeRTOS/Source/queue.c **** 			{
1468:../../../FreeRTOS/Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 1922              		.loc 1 1468 0
 1923 016e 7B68     		ldr	r3, [r7, #4]
 1924 0170 002B     		cmp	r3, #0
 1925 0172 15D1     		bne	.L134
1469:../../../FreeRTOS/Source/queue.c **** 				{
1470:../../../FreeRTOS/Source/queue.c **** 					/* The queue was empty and no block time is specified (or
1471:../../../FreeRTOS/Source/queue.c **** 					the block time has expired) so leave now. */
1472:../../../FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
 1926              		.loc 1 1472 0
 1927 0174 FFF7FEFF 		bl	vPortExitCritical
1473:../../../FreeRTOS/Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
 1928              		.loc 1 1473 0
 1929 0178 BB6A     		ldr	r3, [r7, #40]
 1930 017a 1846     		mov	r0, r3
 1931 017c FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 1932 0180 0546     		mov	r5, r0
 1933 0182 BB68     		ldr	r3, [r7, #8]
 1934 0184 1846     		mov	r0, r3
 1935 0186 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 1936 018a 0246     		mov	r2, r0
 1937 018c 7C68     		ldr	r4, [r7, #4]
ARM GAS  /tmp/cc99qdVQ.s 			page 65


 1938 018e 3B68     		ldr	r3, [r7]
 1939 0190 0093     		str	r3, [sp]
 1940 0192 5C20     		movs	r0, #92
 1941 0194 2946     		mov	r1, r5
 1942 0196 2346     		mov	r3, r4
 1943 0198 FFF7FEFF 		bl	SYSVIEW_RecordU32x4
1474:../../../FreeRTOS/Source/queue.c **** 					return errQUEUE_EMPTY;
 1944              		.loc 1 1474 0
 1945 019c 0023     		movs	r3, #0
 1946 019e 77E0     		b	.L143
 1947              	.L134:
1475:../../../FreeRTOS/Source/queue.c **** 				}
1476:../../../FreeRTOS/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 1948              		.loc 1 1476 0
 1949 01a0 FB6A     		ldr	r3, [r7, #44]
 1950 01a2 002B     		cmp	r3, #0
 1951 01a4 06D1     		bne	.L135
1477:../../../FreeRTOS/Source/queue.c **** 				{
1478:../../../FreeRTOS/Source/queue.c **** 					/* The queue was empty and a block time was specified so
1479:../../../FreeRTOS/Source/queue.c **** 					configure the timeout structure. */
1480:../../../FreeRTOS/Source/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
 1952              		.loc 1 1480 0
 1953 01a6 07F11003 		add	r3, r7, #16
 1954 01aa 1846     		mov	r0, r3
 1955 01ac FFF7FEFF 		bl	vTaskSetTimeOutState
1481:../../../FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 1956              		.loc 1 1481 0
 1957 01b0 0123     		movs	r3, #1
 1958 01b2 FB62     		str	r3, [r7, #44]
 1959              	.L135:
1482:../../../FreeRTOS/Source/queue.c **** 				}
1483:../../../FreeRTOS/Source/queue.c **** 				else
1484:../../../FreeRTOS/Source/queue.c **** 				{
1485:../../../FreeRTOS/Source/queue.c **** 					/* Entry time was already set. */
1486:../../../FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1487:../../../FreeRTOS/Source/queue.c **** 				}
1488:../../../FreeRTOS/Source/queue.c **** 			}
1489:../../../FreeRTOS/Source/queue.c **** 		}
1490:../../../FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
 1960              		.loc 1 1490 0
 1961 01b4 FFF7FEFF 		bl	vPortExitCritical
1491:../../../FreeRTOS/Source/queue.c **** 
1492:../../../FreeRTOS/Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1493:../../../FreeRTOS/Source/queue.c **** 		now the critical section has been exited. */
1494:../../../FreeRTOS/Source/queue.c **** 
1495:../../../FreeRTOS/Source/queue.c **** 		vTaskSuspendAll();
 1962              		.loc 1 1495 0
 1963 01b8 FFF7FEFF 		bl	vTaskSuspendAll
1496:../../../FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 1964              		.loc 1 1496 0
 1965 01bc FFF7FEFF 		bl	vPortEnterCritical
 1966 01c0 BB6A     		ldr	r3, [r7, #40]
 1967 01c2 5B6C     		ldr	r3, [r3, #68]
 1968 01c4 B3F1FF3F 		cmp	r3, #-1
 1969 01c8 02D1     		bne	.L136
 1970              		.loc 1 1496 0 is_stmt 0 discriminator 1
 1971 01ca BB6A     		ldr	r3, [r7, #40]
ARM GAS  /tmp/cc99qdVQ.s 			page 66


 1972 01cc 0022     		movs	r2, #0
 1973 01ce 5A64     		str	r2, [r3, #68]
 1974              	.L136:
 1975              		.loc 1 1496 0 discriminator 3
 1976 01d0 BB6A     		ldr	r3, [r7, #40]
 1977 01d2 9B6C     		ldr	r3, [r3, #72]
 1978 01d4 B3F1FF3F 		cmp	r3, #-1
 1979 01d8 02D1     		bne	.L137
 1980              		.loc 1 1496 0 discriminator 4
 1981 01da BB6A     		ldr	r3, [r7, #40]
 1982 01dc 0022     		movs	r2, #0
 1983 01de 9A64     		str	r2, [r3, #72]
 1984              	.L137:
 1985              		.loc 1 1496 0 discriminator 6
 1986 01e0 FFF7FEFF 		bl	vPortExitCritical
1497:../../../FreeRTOS/Source/queue.c **** 
1498:../../../FreeRTOS/Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1499:../../../FreeRTOS/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 1987              		.loc 1 1499 0 is_stmt 1 discriminator 6
 1988 01e4 07F11002 		add	r2, r7, #16
 1989 01e8 3B1D     		adds	r3, r7, #4
 1990 01ea 1046     		mov	r0, r2
 1991 01ec 1946     		mov	r1, r3
 1992 01ee FFF7FEFF 		bl	xTaskCheckForTimeOut
 1993 01f2 0346     		mov	r3, r0
 1994 01f4 002B     		cmp	r3, #0
 1995 01f6 31D1     		bne	.L138
1500:../../../FreeRTOS/Source/queue.c **** 		{
1501:../../../FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 1996              		.loc 1 1501 0
 1997 01f8 B86A     		ldr	r0, [r7, #40]
 1998 01fa FFF7FEFF 		bl	prvIsQueueEmpty
 1999 01fe 0346     		mov	r3, r0
 2000 0200 002B     		cmp	r3, #0
 2001 0202 25D0     		beq	.L139
1502:../../../FreeRTOS/Source/queue.c **** 			{
1503:../../../FreeRTOS/Source/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1504:../../../FreeRTOS/Source/queue.c **** 
1505:../../../FreeRTOS/Source/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1506:../../../FreeRTOS/Source/queue.c **** 				{
1507:../../../FreeRTOS/Source/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 2002              		.loc 1 1507 0
 2003 0204 BB6A     		ldr	r3, [r7, #40]
 2004 0206 1B68     		ldr	r3, [r3]
 2005 0208 002B     		cmp	r3, #0
 2006 020a 08D1     		bne	.L140
1508:../../../FreeRTOS/Source/queue.c **** 					{
1509:../../../FreeRTOS/Source/queue.c **** 						taskENTER_CRITICAL();
 2007              		.loc 1 1509 0
 2008 020c FFF7FEFF 		bl	vPortEnterCritical
1510:../../../FreeRTOS/Source/queue.c **** 						{
1511:../../../FreeRTOS/Source/queue.c **** 							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 2009              		.loc 1 1511 0
 2010 0210 BB6A     		ldr	r3, [r7, #40]
 2011 0212 5B68     		ldr	r3, [r3, #4]
 2012 0214 1846     		mov	r0, r3
 2013 0216 FFF7FEFF 		bl	vTaskPriorityInherit
ARM GAS  /tmp/cc99qdVQ.s 			page 67


1512:../../../FreeRTOS/Source/queue.c **** 						}
1513:../../../FreeRTOS/Source/queue.c **** 						taskEXIT_CRITICAL();
 2014              		.loc 1 1513 0
 2015 021a FFF7FEFF 		bl	vPortExitCritical
 2016              	.L140:
1514:../../../FreeRTOS/Source/queue.c **** 					}
1515:../../../FreeRTOS/Source/queue.c **** 					else
1516:../../../FreeRTOS/Source/queue.c **** 					{
1517:../../../FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1518:../../../FreeRTOS/Source/queue.c **** 					}
1519:../../../FreeRTOS/Source/queue.c **** 				}
1520:../../../FreeRTOS/Source/queue.c **** 				#endif
1521:../../../FreeRTOS/Source/queue.c **** 
1522:../../../FreeRTOS/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 2017              		.loc 1 1522 0
 2018 021e BB6A     		ldr	r3, [r7, #40]
 2019 0220 03F12402 		add	r2, r3, #36
 2020 0224 7B68     		ldr	r3, [r7, #4]
 2021 0226 1046     		mov	r0, r2
 2022 0228 1946     		mov	r1, r3
 2023 022a FFF7FEFF 		bl	vTaskPlaceOnEventList
1523:../../../FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 2024              		.loc 1 1523 0
 2025 022e B86A     		ldr	r0, [r7, #40]
 2026 0230 FFF7FEFF 		bl	prvUnlockQueue
1524:../../../FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 2027              		.loc 1 1524 0
 2028 0234 FFF7FEFF 		bl	xTaskResumeAll
 2029 0238 0346     		mov	r3, r0
 2030 023a 002B     		cmp	r3, #0
 2031 023c 27D1     		bne	.L142
1525:../../../FreeRTOS/Source/queue.c **** 				{
1526:../../../FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
 2032              		.loc 1 1526 0
 2033 023e 164B     		ldr	r3, .L144
 2034 0240 4FF08052 		mov	r2, #268435456
 2035 0244 1A60     		str	r2, [r3]
 2036              	@ 1526 "../../../FreeRTOS/Source/queue.c" 1
 2037 0246 BFF34F8F 		dsb
 2038              	@ 0 "" 2
 2039              	@ 1526 "../../../FreeRTOS/Source/queue.c" 1
 2040 024a BFF36F8F 		isb
 2041              	@ 0 "" 2
 2042              		.thumb
 2043 024e 1EE0     		b	.L142
 2044              	.L139:
1527:../../../FreeRTOS/Source/queue.c **** 				}
1528:../../../FreeRTOS/Source/queue.c **** 				else
1529:../../../FreeRTOS/Source/queue.c **** 				{
1530:../../../FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1531:../../../FreeRTOS/Source/queue.c **** 				}
1532:../../../FreeRTOS/Source/queue.c **** 			}
1533:../../../FreeRTOS/Source/queue.c **** 			else
1534:../../../FreeRTOS/Source/queue.c **** 			{
1535:../../../FreeRTOS/Source/queue.c **** 				/* Try again. */
1536:../../../FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 2045              		.loc 1 1536 0
ARM GAS  /tmp/cc99qdVQ.s 			page 68


 2046 0250 B86A     		ldr	r0, [r7, #40]
 2047 0252 FFF7FEFF 		bl	prvUnlockQueue
1537:../../../FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 2048              		.loc 1 1537 0
 2049 0256 FFF7FEFF 		bl	xTaskResumeAll
 2050 025a 16E7     		b	.L127
 2051              	.L138:
1538:../../../FreeRTOS/Source/queue.c **** 			}
1539:../../../FreeRTOS/Source/queue.c **** 		}
1540:../../../FreeRTOS/Source/queue.c **** 		else
1541:../../../FreeRTOS/Source/queue.c **** 		{
1542:../../../FreeRTOS/Source/queue.c **** 			prvUnlockQueue( pxQueue );
 2052              		.loc 1 1542 0
 2053 025c B86A     		ldr	r0, [r7, #40]
 2054 025e FFF7FEFF 		bl	prvUnlockQueue
1543:../../../FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 2055              		.loc 1 1543 0
 2056 0262 FFF7FEFF 		bl	xTaskResumeAll
1544:../../../FreeRTOS/Source/queue.c **** 			traceQUEUE_RECEIVE_FAILED( pxQueue );
 2057              		.loc 1 1544 0
 2058 0266 BB6A     		ldr	r3, [r7, #40]
 2059 0268 1846     		mov	r0, r3
 2060 026a FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 2061 026e 0546     		mov	r5, r0
 2062 0270 BB68     		ldr	r3, [r7, #8]
 2063 0272 1846     		mov	r0, r3
 2064 0274 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 2065 0278 0246     		mov	r2, r0
 2066 027a 7C68     		ldr	r4, [r7, #4]
 2067 027c 3B68     		ldr	r3, [r7]
 2068 027e 0093     		str	r3, [sp]
 2069 0280 5C20     		movs	r0, #92
 2070 0282 2946     		mov	r1, r5
 2071 0284 2346     		mov	r3, r4
 2072 0286 FFF7FEFF 		bl	SYSVIEW_RecordU32x4
1545:../../../FreeRTOS/Source/queue.c **** 			return errQUEUE_EMPTY;
 2073              		.loc 1 1545 0
 2074 028a 0023     		movs	r3, #0
 2075 028c 00E0     		b	.L143
 2076              	.L142:
1546:../../../FreeRTOS/Source/queue.c **** 		}
1547:../../../FreeRTOS/Source/queue.c **** 	}
 2077              		.loc 1 1547 0 discriminator 6
 2078 028e FCE6     		b	.L127
 2079              	.L143:
1548:../../../FreeRTOS/Source/queue.c **** }
 2080              		.loc 1 1548 0 discriminator 7
 2081 0290 1846     		mov	r0, r3
 2082 0292 3037     		adds	r7, r7, #48
 2083              	.LCFI48:
 2084              		.cfi_def_cfa_offset 16
 2085 0294 BD46     		mov	sp, r7
 2086              	.LCFI49:
 2087              		.cfi_def_cfa_register 13
 2088              		@ sp needed
 2089 0296 B0BD     		pop	{r4, r5, r7, pc}
 2090              	.L145:
ARM GAS  /tmp/cc99qdVQ.s 			page 69


 2091              		.align	2
 2092              	.L144:
 2093 0298 04ED00E0 		.word	-536810236
 2094              		.cfi_endproc
 2095              	.LFE13:
 2097              		.section	.text.xQueueReceiveFromISR,"ax",%progbits
 2098              		.align	2
 2099              		.global	xQueueReceiveFromISR
 2100              		.thumb
 2101              		.thumb_func
 2103              	xQueueReceiveFromISR:
 2104              	.LFB14:
1549:../../../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1550:../../../FreeRTOS/Source/queue.c **** 
1551:../../../FreeRTOS/Source/queue.c **** BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const px
1552:../../../FreeRTOS/Source/queue.c **** {
 2105              		.loc 1 1552 0
 2106              		.cfi_startproc
 2107              		@ args = 0, pretend = 0, frame = 48
 2108              		@ frame_needed = 1, uses_anonymous_args = 0
 2109 0000 90B5     		push	{r4, r7, lr}
 2110              	.LCFI50:
 2111              		.cfi_def_cfa_offset 12
 2112              		.cfi_offset 4, -12
 2113              		.cfi_offset 7, -8
 2114              		.cfi_offset 14, -4
 2115 0002 8DB0     		sub	sp, sp, #52
 2116              	.LCFI51:
 2117              		.cfi_def_cfa_offset 64
 2118 0004 00AF     		add	r7, sp, #0
 2119              	.LCFI52:
 2120              		.cfi_def_cfa_register 7
 2121 0006 F860     		str	r0, [r7, #12]
 2122 0008 B960     		str	r1, [r7, #8]
 2123 000a 7A60     		str	r2, [r7, #4]
1553:../../../FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1554:../../../FreeRTOS/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1555:../../../FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 2124              		.loc 1 1555 0
 2125 000c FB68     		ldr	r3, [r7, #12]
 2126 000e BB62     		str	r3, [r7, #40]
1556:../../../FreeRTOS/Source/queue.c **** 
1557:../../../FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 2127              		.loc 1 1557 0
 2128 0010 BB6A     		ldr	r3, [r7, #40]
 2129 0012 002B     		cmp	r3, #0
 2130 0014 09D1     		bne	.L147
 2131              	.LBB132:
 2132              	.LBB133:
 215:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2133              		.loc 2 215 0 discriminator 1
 2134              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2135 0016 4FF05003 			mov r3, #80												
 2136 001a 83F31188 		msr basepri, r3											
 2137 001e BFF36F8F 		isb														
 2138 0022 BFF34F8F 		dsb														
 2139              	
ARM GAS  /tmp/cc99qdVQ.s 			page 70


 2140              	@ 0 "" 2
 2141              		.thumb
 2142 0026 3B62     		str	r3, [r7, #32]
 2143              	.L148:
 2144              	.LBE133:
 2145              	.LBE132:
 2146              		.loc 1 1557 0 discriminator 1
 2147 0028 FEE7     		b	.L148
 2148              	.L147:
1558:../../../FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2149              		.loc 1 1558 0
 2150 002a BB68     		ldr	r3, [r7, #8]
 2151 002c 002B     		cmp	r3, #0
 2152 002e 03D1     		bne	.L149
 2153              		.loc 1 1558 0 is_stmt 0 discriminator 2
 2154 0030 BB6A     		ldr	r3, [r7, #40]
 2155 0032 1B6C     		ldr	r3, [r3, #64]
 2156 0034 002B     		cmp	r3, #0
 2157 0036 01D1     		bne	.L150
 2158              	.L149:
 2159              		.loc 1 1558 0 discriminator 3
 2160 0038 0123     		movs	r3, #1
 2161 003a 00E0     		b	.L151
 2162              	.L150:
 2163              		.loc 1 1558 0 discriminator 4
 2164 003c 0023     		movs	r3, #0
 2165              	.L151:
 2166              		.loc 1 1558 0 discriminator 6
 2167 003e 002B     		cmp	r3, #0
 2168 0040 09D1     		bne	.L152
 2169              	.LBB134:
 2170              	.LBB135:
 215:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2171              		.loc 2 215 0 is_stmt 1 discriminator 7
 2172              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2173 0042 4FF05003 			mov r3, #80												
 2174 0046 83F31188 		msr basepri, r3											
 2175 004a BFF36F8F 		isb														
 2176 004e BFF34F8F 		dsb														
 2177              	
 2178              	@ 0 "" 2
 2179              		.thumb
 2180 0052 FB61     		str	r3, [r7, #28]
 2181              	.L153:
 2182              	.LBE135:
 2183              	.LBE134:
 2184              		.loc 1 1558 0 discriminator 2
 2185 0054 FEE7     		b	.L153
 2186              	.L152:
1559:../../../FreeRTOS/Source/queue.c **** 
1560:../../../FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1561:../../../FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1562:../../../FreeRTOS/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1563:../../../FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1564:../../../FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1565:../../../FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1566:../../../FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
ARM GAS  /tmp/cc99qdVQ.s 			page 71


1567:../../../FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1568:../../../FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1569:../../../FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1570:../../../FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1571:../../../FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1572:../../../FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1573:../../../FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1574:../../../FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2187              		.loc 1 1574 0
 2188 0056 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2189              	.LBB136:
 2190              	.LBB137:
 231:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2191              		.loc 2 231 0
 2192              	@ 231 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2193 005a EFF31182 			mrs r2, basepri											
 2194 005e 4FF05003 		mov r3, #80												
 2195 0062 83F31188 		msr basepri, r3											
 2196 0066 BFF36F8F 		isb														
 2197 006a BFF34F8F 		dsb														
 2198              	
 2199              	@ 0 "" 2
 2200              		.thumb
 2201 006e BA61     		str	r2, [r7, #24]
 2202 0070 7B61     		str	r3, [r7, #20]
 243:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 2203              		.loc 2 243 0
 2204 0072 BB69     		ldr	r3, [r7, #24]
 2205              	.LBE137:
 2206              	.LBE136:
1575:../../../FreeRTOS/Source/queue.c **** 
1576:../../../FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 2207              		.loc 1 1576 0
 2208 0074 7B62     		str	r3, [r7, #36]
1577:../../../FreeRTOS/Source/queue.c **** 	{
1578:../../../FreeRTOS/Source/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1579:../../../FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 2209              		.loc 1 1579 0
 2210 0076 BB6A     		ldr	r3, [r7, #40]
 2211 0078 9B6B     		ldr	r3, [r3, #56]
 2212 007a 002B     		cmp	r3, #0
 2213 007c 37D0     		beq	.L155
1580:../../../FreeRTOS/Source/queue.c **** 		{
1581:../../../FreeRTOS/Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 2214              		.loc 1 1581 0
 2215 007e BB6A     		ldr	r3, [r7, #40]
 2216 0080 1846     		mov	r0, r3
 2217 0082 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 2218 0086 0446     		mov	r4, r0
 2219 0088 BB68     		ldr	r3, [r7, #8]
 2220 008a 1846     		mov	r0, r3
 2221 008c FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 2222 0090 0246     		mov	r2, r0
 2223 0092 7B68     		ldr	r3, [r7, #4]
 2224 0094 6220     		movs	r0, #98
 2225 0096 2146     		mov	r1, r4
 2226 0098 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x3
ARM GAS  /tmp/cc99qdVQ.s 			page 72


1582:../../../FreeRTOS/Source/queue.c **** 
1583:../../../FreeRTOS/Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 2227              		.loc 1 1583 0
 2228 009c B86A     		ldr	r0, [r7, #40]
 2229 009e B968     		ldr	r1, [r7, #8]
 2230 00a0 FFF7FEFF 		bl	prvCopyDataFromQueue
1584:../../../FreeRTOS/Source/queue.c **** 			--( pxQueue->uxMessagesWaiting );
 2231              		.loc 1 1584 0
 2232 00a4 BB6A     		ldr	r3, [r7, #40]
 2233 00a6 9B6B     		ldr	r3, [r3, #56]
 2234 00a8 5A1E     		subs	r2, r3, #1
 2235 00aa BB6A     		ldr	r3, [r7, #40]
 2236 00ac 9A63     		str	r2, [r3, #56]
1585:../../../FreeRTOS/Source/queue.c **** 
1586:../../../FreeRTOS/Source/queue.c **** 			/* If the queue is locked the event list will not be modified.
1587:../../../FreeRTOS/Source/queue.c **** 			Instead update the lock count so the task that unlocks the queue
1588:../../../FreeRTOS/Source/queue.c **** 			will know that an ISR has removed data while the queue was
1589:../../../FreeRTOS/Source/queue.c **** 			locked. */
1590:../../../FreeRTOS/Source/queue.c **** 			if( pxQueue->xRxLock == queueUNLOCKED )
 2237              		.loc 1 1590 0
 2238 00ae BB6A     		ldr	r3, [r7, #40]
 2239 00b0 5B6C     		ldr	r3, [r3, #68]
 2240 00b2 B3F1FF3F 		cmp	r3, #-1
 2241 00b6 12D1     		bne	.L156
1591:../../../FreeRTOS/Source/queue.c **** 			{
1592:../../../FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 2242              		.loc 1 1592 0
 2243 00b8 BB6A     		ldr	r3, [r7, #40]
 2244 00ba 1B69     		ldr	r3, [r3, #16]
 2245 00bc 002B     		cmp	r3, #0
 2246 00be 13D0     		beq	.L157
1593:../../../FreeRTOS/Source/queue.c **** 				{
1594:../../../FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 2247              		.loc 1 1594 0
 2248 00c0 BB6A     		ldr	r3, [r7, #40]
 2249 00c2 1033     		adds	r3, r3, #16
 2250 00c4 1846     		mov	r0, r3
 2251 00c6 FFF7FEFF 		bl	xTaskRemoveFromEventList
 2252 00ca 0346     		mov	r3, r0
 2253 00cc 002B     		cmp	r3, #0
 2254 00ce 0BD0     		beq	.L157
1595:../../../FreeRTOS/Source/queue.c **** 					{
1596:../../../FreeRTOS/Source/queue.c **** 						/* The task waiting has a higher priority than us so
1597:../../../FreeRTOS/Source/queue.c **** 						force a context switch. */
1598:../../../FreeRTOS/Source/queue.c **** 						if( pxHigherPriorityTaskWoken != NULL )
 2255              		.loc 1 1598 0
 2256 00d0 7B68     		ldr	r3, [r7, #4]
 2257 00d2 002B     		cmp	r3, #0
 2258 00d4 08D0     		beq	.L157
1599:../../../FreeRTOS/Source/queue.c **** 						{
1600:../../../FreeRTOS/Source/queue.c **** 							*pxHigherPriorityTaskWoken = pdTRUE;
 2259              		.loc 1 1600 0
 2260 00d6 7B68     		ldr	r3, [r7, #4]
 2261 00d8 0122     		movs	r2, #1
 2262 00da 1A60     		str	r2, [r3]
 2263 00dc 04E0     		b	.L157
 2264              	.L156:
ARM GAS  /tmp/cc99qdVQ.s 			page 73


1601:../../../FreeRTOS/Source/queue.c **** 						}
1602:../../../FreeRTOS/Source/queue.c **** 						else
1603:../../../FreeRTOS/Source/queue.c **** 						{
1604:../../../FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1605:../../../FreeRTOS/Source/queue.c **** 						}
1606:../../../FreeRTOS/Source/queue.c **** 					}
1607:../../../FreeRTOS/Source/queue.c **** 					else
1608:../../../FreeRTOS/Source/queue.c **** 					{
1609:../../../FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1610:../../../FreeRTOS/Source/queue.c **** 					}
1611:../../../FreeRTOS/Source/queue.c **** 				}
1612:../../../FreeRTOS/Source/queue.c **** 				else
1613:../../../FreeRTOS/Source/queue.c **** 				{
1614:../../../FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1615:../../../FreeRTOS/Source/queue.c **** 				}
1616:../../../FreeRTOS/Source/queue.c **** 			}
1617:../../../FreeRTOS/Source/queue.c **** 			else
1618:../../../FreeRTOS/Source/queue.c **** 			{
1619:../../../FreeRTOS/Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1620:../../../FreeRTOS/Source/queue.c **** 				knows that data was removed while it was locked. */
1621:../../../FreeRTOS/Source/queue.c **** 				++( pxQueue->xRxLock );
 2265              		.loc 1 1621 0
 2266 00de BB6A     		ldr	r3, [r7, #40]
 2267 00e0 5B6C     		ldr	r3, [r3, #68]
 2268 00e2 5A1C     		adds	r2, r3, #1
 2269 00e4 BB6A     		ldr	r3, [r7, #40]
 2270 00e6 5A64     		str	r2, [r3, #68]
 2271              	.L157:
1622:../../../FreeRTOS/Source/queue.c **** 			}
1623:../../../FreeRTOS/Source/queue.c **** 
1624:../../../FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 2272              		.loc 1 1624 0
 2273 00e8 0123     		movs	r3, #1
 2274 00ea FB62     		str	r3, [r7, #44]
 2275 00ec 10E0     		b	.L158
 2276              	.L155:
1625:../../../FreeRTOS/Source/queue.c **** 		}
1626:../../../FreeRTOS/Source/queue.c **** 		else
1627:../../../FreeRTOS/Source/queue.c **** 		{
1628:../../../FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
 2277              		.loc 1 1628 0
 2278 00ee 0023     		movs	r3, #0
 2279 00f0 FB62     		str	r3, [r7, #44]
1629:../../../FreeRTOS/Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 2280              		.loc 1 1629 0
 2281 00f2 BB6A     		ldr	r3, [r7, #40]
 2282 00f4 1846     		mov	r0, r3
 2283 00f6 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 2284 00fa 0446     		mov	r4, r0
 2285 00fc BB68     		ldr	r3, [r7, #8]
 2286 00fe 1846     		mov	r0, r3
 2287 0100 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 2288 0104 0246     		mov	r2, r0
 2289 0106 7B68     		ldr	r3, [r7, #4]
 2290 0108 6220     		movs	r0, #98
 2291 010a 2146     		mov	r1, r4
 2292 010c FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x3
ARM GAS  /tmp/cc99qdVQ.s 			page 74


 2293              	.L158:
 2294 0110 7B6A     		ldr	r3, [r7, #36]
 2295 0112 3B61     		str	r3, [r7, #16]
 2296              	.LBB138:
 2297              	.LBB139:
 2298              		.loc 2 249 0
 2299 0114 3B69     		ldr	r3, [r7, #16]
 2300              	@ 249 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2301 0116 83F31188 			msr basepri, r3	
 2302              	@ 0 "" 2
 2303              		.thumb
 2304              	.LBE139:
 2305              	.LBE138:
1630:../../../FreeRTOS/Source/queue.c **** 		}
1631:../../../FreeRTOS/Source/queue.c **** 	}
1632:../../../FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1633:../../../FreeRTOS/Source/queue.c **** 
1634:../../../FreeRTOS/Source/queue.c **** 	return xReturn;
 2306              		.loc 1 1634 0
 2307 011a FB6A     		ldr	r3, [r7, #44]
1635:../../../FreeRTOS/Source/queue.c **** }
 2308              		.loc 1 1635 0
 2309 011c 1846     		mov	r0, r3
 2310 011e 3437     		adds	r7, r7, #52
 2311              	.LCFI53:
 2312              		.cfi_def_cfa_offset 12
 2313 0120 BD46     		mov	sp, r7
 2314              	.LCFI54:
 2315              		.cfi_def_cfa_register 13
 2316              		@ sp needed
 2317 0122 90BD     		pop	{r4, r7, pc}
 2318              		.cfi_endproc
 2319              	.LFE14:
 2321              		.section	.text.xQueuePeekFromISR,"ax",%progbits
 2322              		.align	2
 2323              		.global	xQueuePeekFromISR
 2324              		.thumb
 2325              		.thumb_func
 2327              	xQueuePeekFromISR:
 2328              	.LFB15:
1636:../../../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1637:../../../FreeRTOS/Source/queue.c **** 
1638:../../../FreeRTOS/Source/queue.c **** BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
1639:../../../FreeRTOS/Source/queue.c **** {
 2329              		.loc 1 1639 0
 2330              		.cfi_startproc
 2331              		@ args = 0, pretend = 0, frame = 48
 2332              		@ frame_needed = 1, uses_anonymous_args = 0
 2333 0000 90B5     		push	{r4, r7, lr}
 2334              	.LCFI55:
 2335              		.cfi_def_cfa_offset 12
 2336              		.cfi_offset 4, -12
 2337              		.cfi_offset 7, -8
 2338              		.cfi_offset 14, -4
 2339 0002 8DB0     		sub	sp, sp, #52
 2340              	.LCFI56:
 2341              		.cfi_def_cfa_offset 64
ARM GAS  /tmp/cc99qdVQ.s 			page 75


 2342 0004 00AF     		add	r7, sp, #0
 2343              	.LCFI57:
 2344              		.cfi_def_cfa_register 7
 2345 0006 7860     		str	r0, [r7, #4]
 2346 0008 3960     		str	r1, [r7]
1640:../../../FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1641:../../../FreeRTOS/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1642:../../../FreeRTOS/Source/queue.c **** int8_t *pcOriginalReadPosition;
1643:../../../FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 2347              		.loc 1 1643 0
 2348 000a 7B68     		ldr	r3, [r7, #4]
 2349 000c BB62     		str	r3, [r7, #40]
1644:../../../FreeRTOS/Source/queue.c **** 
1645:../../../FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 2350              		.loc 1 1645 0
 2351 000e BB6A     		ldr	r3, [r7, #40]
 2352 0010 002B     		cmp	r3, #0
 2353 0012 09D1     		bne	.L161
 2354              	.LBB140:
 2355              	.LBB141:
 215:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2356              		.loc 2 215 0 discriminator 1
 2357              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2358 0014 4FF05003 			mov r3, #80												
 2359 0018 83F31188 		msr basepri, r3											
 2360 001c BFF36F8F 		isb														
 2361 0020 BFF34F8F 		dsb														
 2362              	
 2363              	@ 0 "" 2
 2364              		.thumb
 2365 0024 FB61     		str	r3, [r7, #28]
 2366              	.L162:
 2367              	.LBE141:
 2368              	.LBE140:
 2369              		.loc 1 1645 0 discriminator 1
 2370 0026 FEE7     		b	.L162
 2371              	.L161:
1646:../../../FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2372              		.loc 1 1646 0
 2373 0028 3B68     		ldr	r3, [r7]
 2374 002a 002B     		cmp	r3, #0
 2375 002c 03D1     		bne	.L163
 2376              		.loc 1 1646 0 is_stmt 0 discriminator 2
 2377 002e BB6A     		ldr	r3, [r7, #40]
 2378 0030 1B6C     		ldr	r3, [r3, #64]
 2379 0032 002B     		cmp	r3, #0
 2380 0034 01D1     		bne	.L164
 2381              	.L163:
 2382              		.loc 1 1646 0 discriminator 3
 2383 0036 0123     		movs	r3, #1
 2384 0038 00E0     		b	.L165
 2385              	.L164:
 2386              		.loc 1 1646 0 discriminator 4
 2387 003a 0023     		movs	r3, #0
 2388              	.L165:
 2389              		.loc 1 1646 0 discriminator 6
 2390 003c 002B     		cmp	r3, #0
ARM GAS  /tmp/cc99qdVQ.s 			page 76


 2391 003e 09D1     		bne	.L166
 2392              	.LBB142:
 2393              	.LBB143:
 215:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2394              		.loc 2 215 0 is_stmt 1 discriminator 7
 2395              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2396 0040 4FF05003 			mov r3, #80												
 2397 0044 83F31188 		msr basepri, r3											
 2398 0048 BFF36F8F 		isb														
 2399 004c BFF34F8F 		dsb														
 2400              	
 2401              	@ 0 "" 2
 2402              		.thumb
 2403 0050 BB61     		str	r3, [r7, #24]
 2404              	.L167:
 2405              	.LBE143:
 2406              	.LBE142:
 2407              		.loc 1 1646 0 discriminator 2
 2408 0052 FEE7     		b	.L167
 2409              	.L166:
1647:../../../FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2410              		.loc 1 1647 0
 2411 0054 BB6A     		ldr	r3, [r7, #40]
 2412 0056 1B6C     		ldr	r3, [r3, #64]
 2413 0058 002B     		cmp	r3, #0
 2414 005a 09D1     		bne	.L168
 2415              	.LBB144:
 2416              	.LBB145:
 215:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2417              		.loc 2 215 0 discriminator 1
 2418              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2419 005c 4FF05003 			mov r3, #80												
 2420 0060 83F31188 		msr basepri, r3											
 2421 0064 BFF36F8F 		isb														
 2422 0068 BFF34F8F 		dsb														
 2423              	
 2424              	@ 0 "" 2
 2425              		.thumb
 2426 006c 7B61     		str	r3, [r7, #20]
 2427              	.L169:
 2428              	.LBE145:
 2429              	.LBE144:
 2430              		.loc 1 1647 0 discriminator 3
 2431 006e FEE7     		b	.L169
 2432              	.L168:
1648:../../../FreeRTOS/Source/queue.c **** 
1649:../../../FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1650:../../../FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1651:../../../FreeRTOS/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1652:../../../FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1653:../../../FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1654:../../../FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1655:../../../FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1656:../../../FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1657:../../../FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1658:../../../FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1659:../../../FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
ARM GAS  /tmp/cc99qdVQ.s 			page 77


1660:../../../FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1661:../../../FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1662:../../../FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1663:../../../FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2433              		.loc 1 1663 0
 2434 0070 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2435              	.LBB146:
 2436              	.LBB147:
 231:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2437              		.loc 2 231 0
 2438              	@ 231 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2439 0074 EFF31182 			mrs r2, basepri											
 2440 0078 4FF05003 		mov r3, #80												
 2441 007c 83F31188 		msr basepri, r3											
 2442 0080 BFF36F8F 		isb														
 2443 0084 BFF34F8F 		dsb														
 2444              	
 2445              	@ 0 "" 2
 2446              		.thumb
 2447 0088 3A61     		str	r2, [r7, #16]
 2448 008a FB60     		str	r3, [r7, #12]
 243:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 2449              		.loc 2 243 0
 2450 008c 3B69     		ldr	r3, [r7, #16]
 2451              	.LBE147:
 2452              	.LBE146:
1664:../../../FreeRTOS/Source/queue.c **** 
1665:../../../FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 2453              		.loc 1 1665 0
 2454 008e 7B62     		str	r3, [r7, #36]
1666:../../../FreeRTOS/Source/queue.c **** 	{
1667:../../../FreeRTOS/Source/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1668:../../../FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 2455              		.loc 1 1668 0
 2456 0090 BB6A     		ldr	r3, [r7, #40]
 2457 0092 9B6B     		ldr	r3, [r3, #56]
 2458 0094 002B     		cmp	r3, #0
 2459 0096 1BD0     		beq	.L171
1669:../../../FreeRTOS/Source/queue.c **** 		{
1670:../../../FreeRTOS/Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR( pxQueue );
 2460              		.loc 1 1670 0
 2461 0098 BB6A     		ldr	r3, [r7, #40]
 2462 009a 1846     		mov	r0, r3
 2463 009c FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 2464 00a0 0446     		mov	r4, r0
 2465 00a2 3B68     		ldr	r3, [r7]
 2466 00a4 1846     		mov	r0, r3
 2467 00a6 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 2468 00aa 0346     		mov	r3, r0
 2469 00ac 5B20     		movs	r0, #91
 2470 00ae 2146     		mov	r1, r4
 2471 00b0 1A46     		mov	r2, r3
 2472 00b2 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x2
1671:../../../FreeRTOS/Source/queue.c **** 
1672:../../../FreeRTOS/Source/queue.c **** 			/* Remember the read position so it can be reset as nothing is
1673:../../../FreeRTOS/Source/queue.c **** 			actually being removed from the queue. */
1674:../../../FreeRTOS/Source/queue.c **** 			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
ARM GAS  /tmp/cc99qdVQ.s 			page 78


 2473              		.loc 1 1674 0
 2474 00b6 BB6A     		ldr	r3, [r7, #40]
 2475 00b8 DB68     		ldr	r3, [r3, #12]
 2476 00ba 3B62     		str	r3, [r7, #32]
1675:../../../FreeRTOS/Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 2477              		.loc 1 1675 0
 2478 00bc B86A     		ldr	r0, [r7, #40]
 2479 00be 3968     		ldr	r1, [r7]
 2480 00c0 FFF7FEFF 		bl	prvCopyDataFromQueue
1676:../../../FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 2481              		.loc 1 1676 0
 2482 00c4 BB6A     		ldr	r3, [r7, #40]
 2483 00c6 3A6A     		ldr	r2, [r7, #32]
 2484 00c8 DA60     		str	r2, [r3, #12]
1677:../../../FreeRTOS/Source/queue.c **** 
1678:../../../FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 2485              		.loc 1 1678 0
 2486 00ca 0123     		movs	r3, #1
 2487 00cc FB62     		str	r3, [r7, #44]
 2488 00ce 10E0     		b	.L172
 2489              	.L171:
1679:../../../FreeRTOS/Source/queue.c **** 		}
1680:../../../FreeRTOS/Source/queue.c **** 		else
1681:../../../FreeRTOS/Source/queue.c **** 		{
1682:../../../FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
 2490              		.loc 1 1682 0
 2491 00d0 0023     		movs	r3, #0
 2492 00d2 FB62     		str	r3, [r7, #44]
1683:../../../FreeRTOS/Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
 2493              		.loc 1 1683 0
 2494 00d4 BB6A     		ldr	r3, [r7, #40]
 2495 00d6 1846     		mov	r0, r3
 2496 00d8 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 2497 00dc 0446     		mov	r4, r0
 2498 00de 3B68     		ldr	r3, [r7]
 2499 00e0 1846     		mov	r0, r3
 2500 00e2 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 2501 00e6 0346     		mov	r3, r0
 2502 00e8 5B20     		movs	r0, #91
 2503 00ea 2146     		mov	r1, r4
 2504 00ec 1A46     		mov	r2, r3
 2505 00ee FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x2
 2506              	.L172:
 2507 00f2 7B6A     		ldr	r3, [r7, #36]
 2508 00f4 BB60     		str	r3, [r7, #8]
 2509              	.LBB148:
 2510              	.LBB149:
 2511              		.loc 2 249 0
 2512 00f6 BB68     		ldr	r3, [r7, #8]
 2513              	@ 249 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2514 00f8 83F31188 			msr basepri, r3	
 2515              	@ 0 "" 2
 2516              		.thumb
 2517              	.LBE149:
 2518              	.LBE148:
1684:../../../FreeRTOS/Source/queue.c **** 		}
1685:../../../FreeRTOS/Source/queue.c **** 	}
ARM GAS  /tmp/cc99qdVQ.s 			page 79


1686:../../../FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1687:../../../FreeRTOS/Source/queue.c **** 
1688:../../../FreeRTOS/Source/queue.c **** 	return xReturn;
 2519              		.loc 1 1688 0
 2520 00fc FB6A     		ldr	r3, [r7, #44]
1689:../../../FreeRTOS/Source/queue.c **** }
 2521              		.loc 1 1689 0
 2522 00fe 1846     		mov	r0, r3
 2523 0100 3437     		adds	r7, r7, #52
 2524              	.LCFI58:
 2525              		.cfi_def_cfa_offset 12
 2526 0102 BD46     		mov	sp, r7
 2527              	.LCFI59:
 2528              		.cfi_def_cfa_register 13
 2529              		@ sp needed
 2530 0104 90BD     		pop	{r4, r7, pc}
 2531              		.cfi_endproc
 2532              	.LFE15:
 2534 0106 00BF     		.section	.text.uxQueueMessagesWaiting,"ax",%progbits
 2535              		.align	2
 2536              		.global	uxQueueMessagesWaiting
 2537              		.thumb
 2538              		.thumb_func
 2540              	uxQueueMessagesWaiting:
 2541              	.LFB16:
1690:../../../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1691:../../../FreeRTOS/Source/queue.c **** 
1692:../../../FreeRTOS/Source/queue.c **** UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
1693:../../../FreeRTOS/Source/queue.c **** {
 2542              		.loc 1 1693 0
 2543              		.cfi_startproc
 2544              		@ args = 0, pretend = 0, frame = 16
 2545              		@ frame_needed = 1, uses_anonymous_args = 0
 2546 0000 80B5     		push	{r7, lr}
 2547              	.LCFI60:
 2548              		.cfi_def_cfa_offset 8
 2549              		.cfi_offset 7, -8
 2550              		.cfi_offset 14, -4
 2551 0002 84B0     		sub	sp, sp, #16
 2552              	.LCFI61:
 2553              		.cfi_def_cfa_offset 24
 2554 0004 00AF     		add	r7, sp, #0
 2555              	.LCFI62:
 2556              		.cfi_def_cfa_register 7
 2557 0006 7860     		str	r0, [r7, #4]
1694:../../../FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
1695:../../../FreeRTOS/Source/queue.c **** 
1696:../../../FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
 2558              		.loc 1 1696 0
 2559 0008 7B68     		ldr	r3, [r7, #4]
 2560 000a 002B     		cmp	r3, #0
 2561 000c 09D1     		bne	.L175
 2562              	.LBB150:
 2563              	.LBB151:
 215:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2564              		.loc 2 215 0 discriminator 1
 2565              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
ARM GAS  /tmp/cc99qdVQ.s 			page 80


 2566 000e 4FF05003 			mov r3, #80												
 2567 0012 83F31188 		msr basepri, r3											
 2568 0016 BFF36F8F 		isb														
 2569 001a BFF34F8F 		dsb														
 2570              	
 2571              	@ 0 "" 2
 2572              		.thumb
 2573 001e BB60     		str	r3, [r7, #8]
 2574              	.L176:
 2575              	.LBE151:
 2576              	.LBE150:
 2577              		.loc 1 1696 0 discriminator 1
 2578 0020 FEE7     		b	.L176
 2579              	.L175:
1697:../../../FreeRTOS/Source/queue.c **** 
1698:../../../FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 2580              		.loc 1 1698 0
 2581 0022 FFF7FEFF 		bl	vPortEnterCritical
1699:../../../FreeRTOS/Source/queue.c **** 	{
1700:../../../FreeRTOS/Source/queue.c **** 		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 2582              		.loc 1 1700 0
 2583 0026 7B68     		ldr	r3, [r7, #4]
 2584 0028 9B6B     		ldr	r3, [r3, #56]
 2585 002a FB60     		str	r3, [r7, #12]
1701:../../../FreeRTOS/Source/queue.c **** 	}
1702:../../../FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 2586              		.loc 1 1702 0
 2587 002c FFF7FEFF 		bl	vPortExitCritical
1703:../../../FreeRTOS/Source/queue.c **** 
1704:../../../FreeRTOS/Source/queue.c **** 	return uxReturn;
 2588              		.loc 1 1704 0
 2589 0030 FB68     		ldr	r3, [r7, #12]
1705:../../../FreeRTOS/Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 2590              		.loc 1 1705 0
 2591 0032 1846     		mov	r0, r3
 2592 0034 1037     		adds	r7, r7, #16
 2593              	.LCFI63:
 2594              		.cfi_def_cfa_offset 8
 2595 0036 BD46     		mov	sp, r7
 2596              	.LCFI64:
 2597              		.cfi_def_cfa_register 13
 2598              		@ sp needed
 2599 0038 80BD     		pop	{r7, pc}
 2600              		.cfi_endproc
 2601              	.LFE16:
 2603 003a 00BF     		.section	.text.uxQueueSpacesAvailable,"ax",%progbits
 2604              		.align	2
 2605              		.global	uxQueueSpacesAvailable
 2606              		.thumb
 2607              		.thumb_func
 2609              	uxQueueSpacesAvailable:
 2610              	.LFB17:
1706:../../../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1707:../../../FreeRTOS/Source/queue.c **** 
1708:../../../FreeRTOS/Source/queue.c **** UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
1709:../../../FreeRTOS/Source/queue.c **** {
 2611              		.loc 1 1709 0
ARM GAS  /tmp/cc99qdVQ.s 			page 81


 2612              		.cfi_startproc
 2613              		@ args = 0, pretend = 0, frame = 24
 2614              		@ frame_needed = 1, uses_anonymous_args = 0
 2615 0000 80B5     		push	{r7, lr}
 2616              	.LCFI65:
 2617              		.cfi_def_cfa_offset 8
 2618              		.cfi_offset 7, -8
 2619              		.cfi_offset 14, -4
 2620 0002 86B0     		sub	sp, sp, #24
 2621              	.LCFI66:
 2622              		.cfi_def_cfa_offset 32
 2623 0004 00AF     		add	r7, sp, #0
 2624              	.LCFI67:
 2625              		.cfi_def_cfa_register 7
 2626 0006 7860     		str	r0, [r7, #4]
1710:../../../FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
1711:../../../FreeRTOS/Source/queue.c **** Queue_t *pxQueue;
1712:../../../FreeRTOS/Source/queue.c **** 
1713:../../../FreeRTOS/Source/queue.c **** 	pxQueue = ( Queue_t * ) xQueue;
 2627              		.loc 1 1713 0
 2628 0008 7B68     		ldr	r3, [r7, #4]
 2629 000a 7B61     		str	r3, [r7, #20]
1714:../../../FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 2630              		.loc 1 1714 0
 2631 000c 7B69     		ldr	r3, [r7, #20]
 2632 000e 002B     		cmp	r3, #0
 2633 0010 09D1     		bne	.L179
 2634              	.LBB152:
 2635              	.LBB153:
 215:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2636              		.loc 2 215 0 discriminator 1
 2637              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2638 0012 4FF05003 			mov r3, #80												
 2639 0016 83F31188 		msr basepri, r3											
 2640 001a BFF36F8F 		isb														
 2641 001e BFF34F8F 		dsb														
 2642              	
 2643              	@ 0 "" 2
 2644              		.thumb
 2645 0022 FB60     		str	r3, [r7, #12]
 2646              	.L180:
 2647              	.LBE153:
 2648              	.LBE152:
 2649              		.loc 1 1714 0 discriminator 1
 2650 0024 FEE7     		b	.L180
 2651              	.L179:
1715:../../../FreeRTOS/Source/queue.c **** 
1716:../../../FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 2652              		.loc 1 1716 0
 2653 0026 FFF7FEFF 		bl	vPortEnterCritical
1717:../../../FreeRTOS/Source/queue.c **** 	{
1718:../../../FreeRTOS/Source/queue.c **** 		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 2654              		.loc 1 1718 0
 2655 002a 7B69     		ldr	r3, [r7, #20]
 2656 002c DA6B     		ldr	r2, [r3, #60]
 2657 002e 7B69     		ldr	r3, [r7, #20]
 2658 0030 9B6B     		ldr	r3, [r3, #56]
ARM GAS  /tmp/cc99qdVQ.s 			page 82


 2659 0032 D31A     		subs	r3, r2, r3
 2660 0034 3B61     		str	r3, [r7, #16]
1719:../../../FreeRTOS/Source/queue.c **** 	}
1720:../../../FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 2661              		.loc 1 1720 0
 2662 0036 FFF7FEFF 		bl	vPortExitCritical
1721:../../../FreeRTOS/Source/queue.c **** 
1722:../../../FreeRTOS/Source/queue.c **** 	return uxReturn;
 2663              		.loc 1 1722 0
 2664 003a 3B69     		ldr	r3, [r7, #16]
1723:../../../FreeRTOS/Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 2665              		.loc 1 1723 0
 2666 003c 1846     		mov	r0, r3
 2667 003e 1837     		adds	r7, r7, #24
 2668              	.LCFI68:
 2669              		.cfi_def_cfa_offset 8
 2670 0040 BD46     		mov	sp, r7
 2671              	.LCFI69:
 2672              		.cfi_def_cfa_register 13
 2673              		@ sp needed
 2674 0042 80BD     		pop	{r7, pc}
 2675              		.cfi_endproc
 2676              	.LFE17:
 2678              		.section	.text.uxQueueMessagesWaitingFromISR,"ax",%progbits
 2679              		.align	2
 2680              		.global	uxQueueMessagesWaitingFromISR
 2681              		.thumb
 2682              		.thumb_func
 2684              	uxQueueMessagesWaitingFromISR:
 2685              	.LFB18:
1724:../../../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1725:../../../FreeRTOS/Source/queue.c **** 
1726:../../../FreeRTOS/Source/queue.c **** UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
1727:../../../FreeRTOS/Source/queue.c **** {
 2686              		.loc 1 1727 0
 2687              		.cfi_startproc
 2688              		@ args = 0, pretend = 0, frame = 16
 2689              		@ frame_needed = 1, uses_anonymous_args = 0
 2690              		@ link register save eliminated.
 2691 0000 80B4     		push	{r7}
 2692              	.LCFI70:
 2693              		.cfi_def_cfa_offset 4
 2694              		.cfi_offset 7, -4
 2695 0002 85B0     		sub	sp, sp, #20
 2696              	.LCFI71:
 2697              		.cfi_def_cfa_offset 24
 2698 0004 00AF     		add	r7, sp, #0
 2699              	.LCFI72:
 2700              		.cfi_def_cfa_register 7
 2701 0006 7860     		str	r0, [r7, #4]
1728:../../../FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
1729:../../../FreeRTOS/Source/queue.c **** 
1730:../../../FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
 2702              		.loc 1 1730 0
 2703 0008 7B68     		ldr	r3, [r7, #4]
 2704 000a 002B     		cmp	r3, #0
 2705 000c 09D1     		bne	.L183
ARM GAS  /tmp/cc99qdVQ.s 			page 83


 2706              	.LBB154:
 2707              	.LBB155:
 215:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2708              		.loc 2 215 0 discriminator 1
 2709              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2710 000e 4FF05003 			mov r3, #80												
 2711 0012 83F31188 		msr basepri, r3											
 2712 0016 BFF36F8F 		isb														
 2713 001a BFF34F8F 		dsb														
 2714              	
 2715              	@ 0 "" 2
 2716              		.thumb
 2717 001e BB60     		str	r3, [r7, #8]
 2718              	.L184:
 2719              	.LBE155:
 2720              	.LBE154:
 2721              		.loc 1 1730 0 discriminator 1
 2722 0020 FEE7     		b	.L184
 2723              	.L183:
1731:../../../FreeRTOS/Source/queue.c **** 
1732:../../../FreeRTOS/Source/queue.c **** 	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 2724              		.loc 1 1732 0
 2725 0022 7B68     		ldr	r3, [r7, #4]
 2726 0024 9B6B     		ldr	r3, [r3, #56]
 2727 0026 FB60     		str	r3, [r7, #12]
1733:../../../FreeRTOS/Source/queue.c **** 
1734:../../../FreeRTOS/Source/queue.c **** 	return uxReturn;
 2728              		.loc 1 1734 0
 2729 0028 FB68     		ldr	r3, [r7, #12]
1735:../../../FreeRTOS/Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 2730              		.loc 1 1735 0
 2731 002a 1846     		mov	r0, r3
 2732 002c 1437     		adds	r7, r7, #20
 2733              	.LCFI73:
 2734              		.cfi_def_cfa_offset 4
 2735 002e BD46     		mov	sp, r7
 2736              	.LCFI74:
 2737              		.cfi_def_cfa_register 13
 2738              		@ sp needed
 2739 0030 5DF8047B 		ldr	r7, [sp], #4
 2740              	.LCFI75:
 2741              		.cfi_restore 7
 2742              		.cfi_def_cfa_offset 0
 2743 0034 7047     		bx	lr
 2744              		.cfi_endproc
 2745              	.LFE18:
 2747 0036 00BF     		.section	.text.vQueueDelete,"ax",%progbits
 2748              		.align	2
 2749              		.global	vQueueDelete
 2750              		.thumb
 2751              		.thumb_func
 2753              	vQueueDelete:
 2754              	.LFB19:
1736:../../../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1737:../../../FreeRTOS/Source/queue.c **** 
1738:../../../FreeRTOS/Source/queue.c **** void vQueueDelete( QueueHandle_t xQueue )
1739:../../../FreeRTOS/Source/queue.c **** {
ARM GAS  /tmp/cc99qdVQ.s 			page 84


 2755              		.loc 1 1739 0
 2756              		.cfi_startproc
 2757              		@ args = 0, pretend = 0, frame = 16
 2758              		@ frame_needed = 1, uses_anonymous_args = 0
 2759 0000 80B5     		push	{r7, lr}
 2760              	.LCFI76:
 2761              		.cfi_def_cfa_offset 8
 2762              		.cfi_offset 7, -8
 2763              		.cfi_offset 14, -4
 2764 0002 84B0     		sub	sp, sp, #16
 2765              	.LCFI77:
 2766              		.cfi_def_cfa_offset 24
 2767 0004 00AF     		add	r7, sp, #0
 2768              	.LCFI78:
 2769              		.cfi_def_cfa_register 7
 2770 0006 7860     		str	r0, [r7, #4]
1740:../../../FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 2771              		.loc 1 1740 0
 2772 0008 7B68     		ldr	r3, [r7, #4]
 2773 000a FB60     		str	r3, [r7, #12]
1741:../../../FreeRTOS/Source/queue.c **** 
1742:../../../FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 2774              		.loc 1 1742 0
 2775 000c FB68     		ldr	r3, [r7, #12]
 2776 000e 002B     		cmp	r3, #0
 2777 0010 09D1     		bne	.L187
 2778              	.LBB156:
 2779              	.LBB157:
 215:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2780              		.loc 2 215 0 discriminator 1
 2781              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2782 0012 4FF05003 			mov r3, #80												
 2783 0016 83F31188 		msr basepri, r3											
 2784 001a BFF36F8F 		isb														
 2785 001e BFF34F8F 		dsb														
 2786              	
 2787              	@ 0 "" 2
 2788              		.thumb
 2789 0022 BB60     		str	r3, [r7, #8]
 2790              	.L188:
 2791              	.LBE157:
 2792              	.LBE156:
 2793              		.loc 1 1742 0 discriminator 1
 2794 0024 FEE7     		b	.L188
 2795              	.L187:
1743:../../../FreeRTOS/Source/queue.c **** 
1744:../../../FreeRTOS/Source/queue.c **** 	traceQUEUE_DELETE( pxQueue );
 2796              		.loc 1 1744 0
 2797 0026 FB68     		ldr	r3, [r7, #12]
 2798 0028 1846     		mov	r0, r3
 2799 002a FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 2800 002e 0346     		mov	r3, r0
 2801 0030 5F20     		movs	r0, #95
 2802 0032 1946     		mov	r1, r3
 2803 0034 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32
1745:../../../FreeRTOS/Source/queue.c **** 	#if ( configQUEUE_REGISTRY_SIZE > 0 )
1746:../../../FreeRTOS/Source/queue.c **** 	{
ARM GAS  /tmp/cc99qdVQ.s 			page 85


1747:../../../FreeRTOS/Source/queue.c **** 		vQueueUnregisterQueue( pxQueue );
 2804              		.loc 1 1747 0
 2805 0038 F868     		ldr	r0, [r7, #12]
 2806 003a FFF7FEFF 		bl	vQueueUnregisterQueue
1748:../../../FreeRTOS/Source/queue.c **** 	}
1749:../../../FreeRTOS/Source/queue.c **** 	#endif
1750:../../../FreeRTOS/Source/queue.c **** 	vPortFree( pxQueue );
 2807              		.loc 1 1750 0
 2808 003e F868     		ldr	r0, [r7, #12]
 2809 0040 FFF7FEFF 		bl	vPortFree
1751:../../../FreeRTOS/Source/queue.c **** }
 2810              		.loc 1 1751 0
 2811 0044 1037     		adds	r7, r7, #16
 2812              	.LCFI79:
 2813              		.cfi_def_cfa_offset 8
 2814 0046 BD46     		mov	sp, r7
 2815              	.LCFI80:
 2816              		.cfi_def_cfa_register 13
 2817              		@ sp needed
 2818 0048 80BD     		pop	{r7, pc}
 2819              		.cfi_endproc
 2820              	.LFE19:
 2822 004a 00BF     		.section	.text.uxQueueGetQueueNumber,"ax",%progbits
 2823              		.align	2
 2824              		.global	uxQueueGetQueueNumber
 2825              		.thumb
 2826              		.thumb_func
 2828              	uxQueueGetQueueNumber:
 2829              	.LFB20:
1752:../../../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1753:../../../FreeRTOS/Source/queue.c **** 
1754:../../../FreeRTOS/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1755:../../../FreeRTOS/Source/queue.c **** 
1756:../../../FreeRTOS/Source/queue.c **** 	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
1757:../../../FreeRTOS/Source/queue.c **** 	{
 2830              		.loc 1 1757 0
 2831              		.cfi_startproc
 2832              		@ args = 0, pretend = 0, frame = 8
 2833              		@ frame_needed = 1, uses_anonymous_args = 0
 2834              		@ link register save eliminated.
 2835 0000 80B4     		push	{r7}
 2836              	.LCFI81:
 2837              		.cfi_def_cfa_offset 4
 2838              		.cfi_offset 7, -4
 2839 0002 83B0     		sub	sp, sp, #12
 2840              	.LCFI82:
 2841              		.cfi_def_cfa_offset 16
 2842 0004 00AF     		add	r7, sp, #0
 2843              	.LCFI83:
 2844              		.cfi_def_cfa_register 7
 2845 0006 7860     		str	r0, [r7, #4]
1758:../../../FreeRTOS/Source/queue.c **** 		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 2846              		.loc 1 1758 0
 2847 0008 7B68     		ldr	r3, [r7, #4]
 2848 000a DB6C     		ldr	r3, [r3, #76]
1759:../../../FreeRTOS/Source/queue.c **** 	}
 2849              		.loc 1 1759 0
ARM GAS  /tmp/cc99qdVQ.s 			page 86


 2850 000c 1846     		mov	r0, r3
 2851 000e 0C37     		adds	r7, r7, #12
 2852              	.LCFI84:
 2853              		.cfi_def_cfa_offset 4
 2854 0010 BD46     		mov	sp, r7
 2855              	.LCFI85:
 2856              		.cfi_def_cfa_register 13
 2857              		@ sp needed
 2858 0012 5DF8047B 		ldr	r7, [sp], #4
 2859              	.LCFI86:
 2860              		.cfi_restore 7
 2861              		.cfi_def_cfa_offset 0
 2862 0016 7047     		bx	lr
 2863              		.cfi_endproc
 2864              	.LFE20:
 2866              		.section	.text.vQueueSetQueueNumber,"ax",%progbits
 2867              		.align	2
 2868              		.global	vQueueSetQueueNumber
 2869              		.thumb
 2870              		.thumb_func
 2872              	vQueueSetQueueNumber:
 2873              	.LFB21:
1760:../../../FreeRTOS/Source/queue.c **** 
1761:../../../FreeRTOS/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1762:../../../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1763:../../../FreeRTOS/Source/queue.c **** 
1764:../../../FreeRTOS/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1765:../../../FreeRTOS/Source/queue.c **** 
1766:../../../FreeRTOS/Source/queue.c **** 	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
1767:../../../FreeRTOS/Source/queue.c **** 	{
 2874              		.loc 1 1767 0
 2875              		.cfi_startproc
 2876              		@ args = 0, pretend = 0, frame = 8
 2877              		@ frame_needed = 1, uses_anonymous_args = 0
 2878              		@ link register save eliminated.
 2879 0000 80B4     		push	{r7}
 2880              	.LCFI87:
 2881              		.cfi_def_cfa_offset 4
 2882              		.cfi_offset 7, -4
 2883 0002 83B0     		sub	sp, sp, #12
 2884              	.LCFI88:
 2885              		.cfi_def_cfa_offset 16
 2886 0004 00AF     		add	r7, sp, #0
 2887              	.LCFI89:
 2888              		.cfi_def_cfa_register 7
 2889 0006 7860     		str	r0, [r7, #4]
 2890 0008 3960     		str	r1, [r7]
1768:../../../FreeRTOS/Source/queue.c **** 		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 2891              		.loc 1 1768 0
 2892 000a 7B68     		ldr	r3, [r7, #4]
 2893 000c 3A68     		ldr	r2, [r7]
 2894 000e DA64     		str	r2, [r3, #76]
1769:../../../FreeRTOS/Source/queue.c **** 	}
 2895              		.loc 1 1769 0
 2896 0010 0C37     		adds	r7, r7, #12
 2897              	.LCFI90:
 2898              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/cc99qdVQ.s 			page 87


 2899 0012 BD46     		mov	sp, r7
 2900              	.LCFI91:
 2901              		.cfi_def_cfa_register 13
 2902              		@ sp needed
 2903 0014 5DF8047B 		ldr	r7, [sp], #4
 2904              	.LCFI92:
 2905              		.cfi_restore 7
 2906              		.cfi_def_cfa_offset 0
 2907 0018 7047     		bx	lr
 2908              		.cfi_endproc
 2909              	.LFE21:
 2911 001a 00BF     		.section	.text.ucQueueGetQueueType,"ax",%progbits
 2912              		.align	2
 2913              		.global	ucQueueGetQueueType
 2914              		.thumb
 2915              		.thumb_func
 2917              	ucQueueGetQueueType:
 2918              	.LFB22:
1770:../../../FreeRTOS/Source/queue.c **** 
1771:../../../FreeRTOS/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1772:../../../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1773:../../../FreeRTOS/Source/queue.c **** 
1774:../../../FreeRTOS/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1775:../../../FreeRTOS/Source/queue.c **** 
1776:../../../FreeRTOS/Source/queue.c **** 	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
1777:../../../FreeRTOS/Source/queue.c **** 	{
 2919              		.loc 1 1777 0
 2920              		.cfi_startproc
 2921              		@ args = 0, pretend = 0, frame = 8
 2922              		@ frame_needed = 1, uses_anonymous_args = 0
 2923              		@ link register save eliminated.
 2924 0000 80B4     		push	{r7}
 2925              	.LCFI93:
 2926              		.cfi_def_cfa_offset 4
 2927              		.cfi_offset 7, -4
 2928 0002 83B0     		sub	sp, sp, #12
 2929              	.LCFI94:
 2930              		.cfi_def_cfa_offset 16
 2931 0004 00AF     		add	r7, sp, #0
 2932              	.LCFI95:
 2933              		.cfi_def_cfa_register 7
 2934 0006 7860     		str	r0, [r7, #4]
1778:../../../FreeRTOS/Source/queue.c **** 		return ( ( Queue_t * ) xQueue )->ucQueueType;
 2935              		.loc 1 1778 0
 2936 0008 7B68     		ldr	r3, [r7, #4]
 2937 000a 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
1779:../../../FreeRTOS/Source/queue.c **** 	}
 2938              		.loc 1 1779 0
 2939 000e 1846     		mov	r0, r3
 2940 0010 0C37     		adds	r7, r7, #12
 2941              	.LCFI96:
 2942              		.cfi_def_cfa_offset 4
 2943 0012 BD46     		mov	sp, r7
 2944              	.LCFI97:
 2945              		.cfi_def_cfa_register 13
 2946              		@ sp needed
 2947 0014 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  /tmp/cc99qdVQ.s 			page 88


 2948              	.LCFI98:
 2949              		.cfi_restore 7
 2950              		.cfi_def_cfa_offset 0
 2951 0018 7047     		bx	lr
 2952              		.cfi_endproc
 2953              	.LFE22:
 2955 001a 00BF     		.section	.text.prvCopyDataToQueue,"ax",%progbits
 2956              		.align	2
 2957              		.thumb
 2958              		.thumb_func
 2960              	prvCopyDataToQueue:
 2961              	.LFB23:
1780:../../../FreeRTOS/Source/queue.c **** 
1781:../../../FreeRTOS/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1782:../../../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1783:../../../FreeRTOS/Source/queue.c **** 
1784:../../../FreeRTOS/Source/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
1785:../../../FreeRTOS/Source/queue.c **** {
 2962              		.loc 1 1785 0
 2963              		.cfi_startproc
 2964              		@ args = 0, pretend = 0, frame = 24
 2965              		@ frame_needed = 1, uses_anonymous_args = 0
 2966 0000 80B5     		push	{r7, lr}
 2967              	.LCFI99:
 2968              		.cfi_def_cfa_offset 8
 2969              		.cfi_offset 7, -8
 2970              		.cfi_offset 14, -4
 2971 0002 86B0     		sub	sp, sp, #24
 2972              	.LCFI100:
 2973              		.cfi_def_cfa_offset 32
 2974 0004 00AF     		add	r7, sp, #0
 2975              	.LCFI101:
 2976              		.cfi_def_cfa_register 7
 2977 0006 F860     		str	r0, [r7, #12]
 2978 0008 B960     		str	r1, [r7, #8]
 2979 000a 7A60     		str	r2, [r7, #4]
1786:../../../FreeRTOS/Source/queue.c **** BaseType_t xReturn = pdFALSE;
 2980              		.loc 1 1786 0
 2981 000c 0023     		movs	r3, #0
 2982 000e 7B61     		str	r3, [r7, #20]
1787:../../../FreeRTOS/Source/queue.c **** 
1788:../../../FreeRTOS/Source/queue.c **** 	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 2983              		.loc 1 1788 0
 2984 0010 FB68     		ldr	r3, [r7, #12]
 2985 0012 1B6C     		ldr	r3, [r3, #64]
 2986 0014 002B     		cmp	r3, #0
 2987 0016 0DD1     		bne	.L195
1789:../../../FreeRTOS/Source/queue.c **** 	{
1790:../../../FreeRTOS/Source/queue.c **** 		#if ( configUSE_MUTEXES == 1 )
1791:../../../FreeRTOS/Source/queue.c **** 		{
1792:../../../FreeRTOS/Source/queue.c **** 			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 2988              		.loc 1 1792 0
 2989 0018 FB68     		ldr	r3, [r7, #12]
 2990 001a 1B68     		ldr	r3, [r3]
 2991 001c 002B     		cmp	r3, #0
 2992 001e 52D1     		bne	.L196
1793:../../../FreeRTOS/Source/queue.c **** 			{
ARM GAS  /tmp/cc99qdVQ.s 			page 89


1794:../../../FreeRTOS/Source/queue.c **** 				/* The mutex is no longer being held. */
1795:../../../FreeRTOS/Source/queue.c **** 				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 2993              		.loc 1 1795 0
 2994 0020 FB68     		ldr	r3, [r7, #12]
 2995 0022 5B68     		ldr	r3, [r3, #4]
 2996 0024 1846     		mov	r0, r3
 2997 0026 FFF7FEFF 		bl	xTaskPriorityDisinherit
 2998 002a 7861     		str	r0, [r7, #20]
1796:../../../FreeRTOS/Source/queue.c **** 				pxQueue->pxMutexHolder = NULL;
 2999              		.loc 1 1796 0
 3000 002c FB68     		ldr	r3, [r7, #12]
 3001 002e 0022     		movs	r2, #0
 3002 0030 5A60     		str	r2, [r3, #4]
 3003 0032 48E0     		b	.L196
 3004              	.L195:
1797:../../../FreeRTOS/Source/queue.c **** 			}
1798:../../../FreeRTOS/Source/queue.c **** 			else
1799:../../../FreeRTOS/Source/queue.c **** 			{
1800:../../../FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1801:../../../FreeRTOS/Source/queue.c **** 			}
1802:../../../FreeRTOS/Source/queue.c **** 		}
1803:../../../FreeRTOS/Source/queue.c **** 		#endif /* configUSE_MUTEXES */
1804:../../../FreeRTOS/Source/queue.c **** 	}
1805:../../../FreeRTOS/Source/queue.c **** 	else if( xPosition == queueSEND_TO_BACK )
 3005              		.loc 1 1805 0
 3006 0034 7B68     		ldr	r3, [r7, #4]
 3007 0036 002B     		cmp	r3, #0
 3008 0038 1AD1     		bne	.L197
1806:../../../FreeRTOS/Source/queue.c **** 	{
1807:../../../FreeRTOS/Source/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); 
 3009              		.loc 1 1807 0
 3010 003a FB68     		ldr	r3, [r7, #12]
 3011 003c 9A68     		ldr	r2, [r3, #8]
 3012 003e FB68     		ldr	r3, [r7, #12]
 3013 0040 1B6C     		ldr	r3, [r3, #64]
 3014 0042 1046     		mov	r0, r2
 3015 0044 B968     		ldr	r1, [r7, #8]
 3016 0046 1A46     		mov	r2, r3
 3017 0048 FFF7FEFF 		bl	memcpy
1808:../../../FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 3018              		.loc 1 1808 0
 3019 004c FB68     		ldr	r3, [r7, #12]
 3020 004e 9A68     		ldr	r2, [r3, #8]
 3021 0050 FB68     		ldr	r3, [r7, #12]
 3022 0052 1B6C     		ldr	r3, [r3, #64]
 3023 0054 1A44     		add	r2, r2, r3
 3024 0056 FB68     		ldr	r3, [r7, #12]
 3025 0058 9A60     		str	r2, [r3, #8]
1809:../../../FreeRTOS/Source/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison 
 3026              		.loc 1 1809 0
 3027 005a FB68     		ldr	r3, [r7, #12]
 3028 005c 9A68     		ldr	r2, [r3, #8]
 3029 005e FB68     		ldr	r3, [r7, #12]
 3030 0060 5B68     		ldr	r3, [r3, #4]
 3031 0062 9A42     		cmp	r2, r3
 3032 0064 2FD3     		bcc	.L196
1810:../../../FreeRTOS/Source/queue.c **** 		{
ARM GAS  /tmp/cc99qdVQ.s 			page 90


1811:../../../FreeRTOS/Source/queue.c **** 			pxQueue->pcWriteTo = pxQueue->pcHead;
 3033              		.loc 1 1811 0
 3034 0066 FB68     		ldr	r3, [r7, #12]
 3035 0068 1A68     		ldr	r2, [r3]
 3036 006a FB68     		ldr	r3, [r7, #12]
 3037 006c 9A60     		str	r2, [r3, #8]
 3038 006e 2AE0     		b	.L196
 3039              	.L197:
1812:../../../FreeRTOS/Source/queue.c **** 		}
1813:../../../FreeRTOS/Source/queue.c **** 		else
1814:../../../FreeRTOS/Source/queue.c **** 		{
1815:../../../FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1816:../../../FreeRTOS/Source/queue.c **** 		}
1817:../../../FreeRTOS/Source/queue.c **** 	}
1818:../../../FreeRTOS/Source/queue.c **** 	else
1819:../../../FreeRTOS/Source/queue.c **** 	{
1820:../../../FreeRTOS/Source/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize 
 3040              		.loc 1 1820 0
 3041 0070 FB68     		ldr	r3, [r7, #12]
 3042 0072 DA68     		ldr	r2, [r3, #12]
 3043 0074 FB68     		ldr	r3, [r7, #12]
 3044 0076 1B6C     		ldr	r3, [r3, #64]
 3045 0078 1046     		mov	r0, r2
 3046 007a B968     		ldr	r1, [r7, #8]
 3047 007c 1A46     		mov	r2, r3
 3048 007e FFF7FEFF 		bl	memcpy
1821:../../../FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 3049              		.loc 1 1821 0
 3050 0082 FB68     		ldr	r3, [r7, #12]
 3051 0084 DA68     		ldr	r2, [r3, #12]
 3052 0086 FB68     		ldr	r3, [r7, #12]
 3053 0088 1B6C     		ldr	r3, [r3, #64]
 3054 008a 5B42     		negs	r3, r3
 3055 008c 1A44     		add	r2, r2, r3
 3056 008e FB68     		ldr	r3, [r7, #12]
 3057 0090 DA60     		str	r2, [r3, #12]
1822:../../../FreeRTOS/Source/queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
 3058              		.loc 1 1822 0
 3059 0092 FB68     		ldr	r3, [r7, #12]
 3060 0094 DA68     		ldr	r2, [r3, #12]
 3061 0096 FB68     		ldr	r3, [r7, #12]
 3062 0098 1B68     		ldr	r3, [r3]
 3063 009a 9A42     		cmp	r2, r3
 3064 009c 07D2     		bcs	.L198
1823:../../../FreeRTOS/Source/queue.c **** 		{
1824:../../../FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 3065              		.loc 1 1824 0
 3066 009e FB68     		ldr	r3, [r7, #12]
 3067 00a0 5A68     		ldr	r2, [r3, #4]
 3068 00a2 FB68     		ldr	r3, [r7, #12]
 3069 00a4 1B6C     		ldr	r3, [r3, #64]
 3070 00a6 5B42     		negs	r3, r3
 3071 00a8 1A44     		add	r2, r2, r3
 3072 00aa FB68     		ldr	r3, [r7, #12]
 3073 00ac DA60     		str	r2, [r3, #12]
 3074              	.L198:
1825:../../../FreeRTOS/Source/queue.c **** 		}
ARM GAS  /tmp/cc99qdVQ.s 			page 91


1826:../../../FreeRTOS/Source/queue.c **** 		else
1827:../../../FreeRTOS/Source/queue.c **** 		{
1828:../../../FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1829:../../../FreeRTOS/Source/queue.c **** 		}
1830:../../../FreeRTOS/Source/queue.c **** 
1831:../../../FreeRTOS/Source/queue.c **** 		if( xPosition == queueOVERWRITE )
 3075              		.loc 1 1831 0
 3076 00ae 7B68     		ldr	r3, [r7, #4]
 3077 00b0 022B     		cmp	r3, #2
 3078 00b2 08D1     		bne	.L196
1832:../../../FreeRTOS/Source/queue.c **** 		{
1833:../../../FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 3079              		.loc 1 1833 0
 3080 00b4 FB68     		ldr	r3, [r7, #12]
 3081 00b6 9B6B     		ldr	r3, [r3, #56]
 3082 00b8 002B     		cmp	r3, #0
 3083 00ba 04D0     		beq	.L196
1834:../../../FreeRTOS/Source/queue.c **** 			{
1835:../../../FreeRTOS/Source/queue.c **** 				/* An item is not being added but overwritten, so subtract
1836:../../../FreeRTOS/Source/queue.c **** 				one from the recorded number of items in the queue so when
1837:../../../FreeRTOS/Source/queue.c **** 				one is added again below the number of recorded items remains
1838:../../../FreeRTOS/Source/queue.c **** 				correct. */
1839:../../../FreeRTOS/Source/queue.c **** 				--( pxQueue->uxMessagesWaiting );
 3084              		.loc 1 1839 0
 3085 00bc FB68     		ldr	r3, [r7, #12]
 3086 00be 9B6B     		ldr	r3, [r3, #56]
 3087 00c0 5A1E     		subs	r2, r3, #1
 3088 00c2 FB68     		ldr	r3, [r7, #12]
 3089 00c4 9A63     		str	r2, [r3, #56]
 3090              	.L196:
1840:../../../FreeRTOS/Source/queue.c **** 			}
1841:../../../FreeRTOS/Source/queue.c **** 			else
1842:../../../FreeRTOS/Source/queue.c **** 			{
1843:../../../FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1844:../../../FreeRTOS/Source/queue.c **** 			}
1845:../../../FreeRTOS/Source/queue.c **** 		}
1846:../../../FreeRTOS/Source/queue.c **** 		else
1847:../../../FreeRTOS/Source/queue.c **** 		{
1848:../../../FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1849:../../../FreeRTOS/Source/queue.c **** 		}
1850:../../../FreeRTOS/Source/queue.c **** 	}
1851:../../../FreeRTOS/Source/queue.c **** 
1852:../../../FreeRTOS/Source/queue.c **** 	++( pxQueue->uxMessagesWaiting );
 3091              		.loc 1 1852 0
 3092 00c6 FB68     		ldr	r3, [r7, #12]
 3093 00c8 9B6B     		ldr	r3, [r3, #56]
 3094 00ca 5A1C     		adds	r2, r3, #1
 3095 00cc FB68     		ldr	r3, [r7, #12]
 3096 00ce 9A63     		str	r2, [r3, #56]
1853:../../../FreeRTOS/Source/queue.c **** 
1854:../../../FreeRTOS/Source/queue.c **** 	return xReturn;
 3097              		.loc 1 1854 0
 3098 00d0 7B69     		ldr	r3, [r7, #20]
1855:../../../FreeRTOS/Source/queue.c **** }
 3099              		.loc 1 1855 0
 3100 00d2 1846     		mov	r0, r3
 3101 00d4 1837     		adds	r7, r7, #24
ARM GAS  /tmp/cc99qdVQ.s 			page 92


 3102              	.LCFI102:
 3103              		.cfi_def_cfa_offset 8
 3104 00d6 BD46     		mov	sp, r7
 3105              	.LCFI103:
 3106              		.cfi_def_cfa_register 13
 3107              		@ sp needed
 3108 00d8 80BD     		pop	{r7, pc}
 3109              		.cfi_endproc
 3110              	.LFE23:
 3112 00da 00BF     		.section	.text.prvCopyDataFromQueue,"ax",%progbits
 3113              		.align	2
 3114              		.thumb
 3115              		.thumb_func
 3117              	prvCopyDataFromQueue:
 3118              	.LFB24:
1856:../../../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1857:../../../FreeRTOS/Source/queue.c **** 
1858:../../../FreeRTOS/Source/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
1859:../../../FreeRTOS/Source/queue.c **** {
 3119              		.loc 1 1859 0
 3120              		.cfi_startproc
 3121              		@ args = 0, pretend = 0, frame = 8
 3122              		@ frame_needed = 1, uses_anonymous_args = 0
 3123 0000 80B5     		push	{r7, lr}
 3124              	.LCFI104:
 3125              		.cfi_def_cfa_offset 8
 3126              		.cfi_offset 7, -8
 3127              		.cfi_offset 14, -4
 3128 0002 82B0     		sub	sp, sp, #8
 3129              	.LCFI105:
 3130              		.cfi_def_cfa_offset 16
 3131 0004 00AF     		add	r7, sp, #0
 3132              	.LCFI106:
 3133              		.cfi_def_cfa_register 7
 3134 0006 7860     		str	r0, [r7, #4]
 3135 0008 3960     		str	r1, [r7]
1860:../../../FreeRTOS/Source/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 3136              		.loc 1 1860 0
 3137 000a 7B68     		ldr	r3, [r7, #4]
 3138 000c 1B6C     		ldr	r3, [r3, #64]
 3139 000e 002B     		cmp	r3, #0
 3140 0010 19D0     		beq	.L200
1861:../../../FreeRTOS/Source/queue.c **** 	{
1862:../../../FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 3141              		.loc 1 1862 0
 3142 0012 7B68     		ldr	r3, [r7, #4]
 3143 0014 DA68     		ldr	r2, [r3, #12]
 3144 0016 7B68     		ldr	r3, [r7, #4]
 3145 0018 1B6C     		ldr	r3, [r3, #64]
 3146 001a 1A44     		add	r2, r2, r3
 3147 001c 7B68     		ldr	r3, [r7, #4]
 3148 001e DA60     		str	r2, [r3, #12]
1863:../../../FreeRTOS/Source/queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
 3149              		.loc 1 1863 0
 3150 0020 7B68     		ldr	r3, [r7, #4]
 3151 0022 DA68     		ldr	r2, [r3, #12]
 3152 0024 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cc99qdVQ.s 			page 93


 3153 0026 5B68     		ldr	r3, [r3, #4]
 3154 0028 9A42     		cmp	r2, r3
 3155 002a 03D3     		bcc	.L202
1864:../../../FreeRTOS/Source/queue.c **** 		{
1865:../../../FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 3156              		.loc 1 1865 0
 3157 002c 7B68     		ldr	r3, [r7, #4]
 3158 002e 1A68     		ldr	r2, [r3]
 3159 0030 7B68     		ldr	r3, [r7, #4]
 3160 0032 DA60     		str	r2, [r3, #12]
 3161              	.L202:
1866:../../../FreeRTOS/Source/queue.c **** 		}
1867:../../../FreeRTOS/Source/queue.c **** 		else
1868:../../../FreeRTOS/Source/queue.c **** 		{
1869:../../../FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1870:../../../FreeRTOS/Source/queue.c **** 		}
1871:../../../FreeRTOS/Source/queue.c **** 		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxIte
 3162              		.loc 1 1871 0
 3163 0034 7B68     		ldr	r3, [r7, #4]
 3164 0036 DA68     		ldr	r2, [r3, #12]
 3165 0038 7B68     		ldr	r3, [r7, #4]
 3166 003a 1B6C     		ldr	r3, [r3, #64]
 3167 003c 3868     		ldr	r0, [r7]
 3168 003e 1146     		mov	r1, r2
 3169 0040 1A46     		mov	r2, r3
 3170 0042 FFF7FEFF 		bl	memcpy
 3171              	.L200:
1872:../../../FreeRTOS/Source/queue.c **** 	}
1873:../../../FreeRTOS/Source/queue.c **** }
 3172              		.loc 1 1873 0
 3173 0046 0837     		adds	r7, r7, #8
 3174              	.LCFI107:
 3175              		.cfi_def_cfa_offset 8
 3176 0048 BD46     		mov	sp, r7
 3177              	.LCFI108:
 3178              		.cfi_def_cfa_register 13
 3179              		@ sp needed
 3180 004a 80BD     		pop	{r7, pc}
 3181              		.cfi_endproc
 3182              	.LFE24:
 3184              		.section	.text.prvUnlockQueue,"ax",%progbits
 3185              		.align	2
 3186              		.thumb
 3187              		.thumb_func
 3189              	prvUnlockQueue:
 3190              	.LFB25:
1874:../../../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1875:../../../FreeRTOS/Source/queue.c **** 
1876:../../../FreeRTOS/Source/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue )
1877:../../../FreeRTOS/Source/queue.c **** {
 3191              		.loc 1 1877 0
 3192              		.cfi_startproc
 3193              		@ args = 0, pretend = 0, frame = 8
 3194              		@ frame_needed = 1, uses_anonymous_args = 0
 3195 0000 80B5     		push	{r7, lr}
 3196              	.LCFI109:
 3197              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cc99qdVQ.s 			page 94


 3198              		.cfi_offset 7, -8
 3199              		.cfi_offset 14, -4
 3200 0002 82B0     		sub	sp, sp, #8
 3201              	.LCFI110:
 3202              		.cfi_def_cfa_offset 16
 3203 0004 00AF     		add	r7, sp, #0
 3204              	.LCFI111:
 3205              		.cfi_def_cfa_register 7
 3206 0006 7860     		str	r0, [r7, #4]
1878:../../../FreeRTOS/Source/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
1879:../../../FreeRTOS/Source/queue.c **** 
1880:../../../FreeRTOS/Source/queue.c **** 	/* The lock counts contains the number of extra data items placed or
1881:../../../FreeRTOS/Source/queue.c **** 	removed from the queue while the queue was locked.  When a queue is
1882:../../../FreeRTOS/Source/queue.c **** 	locked items can be added or removed, but the event lists cannot be
1883:../../../FreeRTOS/Source/queue.c **** 	updated. */
1884:../../../FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 3207              		.loc 1 1884 0
 3208 0008 FFF7FEFF 		bl	vPortEnterCritical
1885:../../../FreeRTOS/Source/queue.c **** 	{
1886:../../../FreeRTOS/Source/queue.c **** 		/* See if data was added to the queue while it was locked. */
1887:../../../FreeRTOS/Source/queue.c **** 		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 3209              		.loc 1 1887 0
 3210 000c 14E0     		b	.L204
 3211              	.L208:
1888:../../../FreeRTOS/Source/queue.c **** 		{
1889:../../../FreeRTOS/Source/queue.c **** 			/* Data was posted while the queue was locked.  Are any tasks
1890:../../../FreeRTOS/Source/queue.c **** 			blocked waiting for data to become available? */
1891:../../../FreeRTOS/Source/queue.c **** 			#if ( configUSE_QUEUE_SETS == 1 )
1892:../../../FreeRTOS/Source/queue.c **** 			{
1893:../../../FreeRTOS/Source/queue.c **** 				if( pxQueue->pxQueueSetContainer != NULL )
1894:../../../FreeRTOS/Source/queue.c **** 				{
1895:../../../FreeRTOS/Source/queue.c **** 					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
1896:../../../FreeRTOS/Source/queue.c **** 					{
1897:../../../FreeRTOS/Source/queue.c **** 						/* The queue is a member of a queue set, and posting to
1898:../../../FreeRTOS/Source/queue.c **** 						the queue set caused a higher priority task to unblock.
1899:../../../FreeRTOS/Source/queue.c **** 						A context switch is required. */
1900:../../../FreeRTOS/Source/queue.c **** 						vTaskMissedYield();
1901:../../../FreeRTOS/Source/queue.c **** 					}
1902:../../../FreeRTOS/Source/queue.c **** 					else
1903:../../../FreeRTOS/Source/queue.c **** 					{
1904:../../../FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1905:../../../FreeRTOS/Source/queue.c **** 					}
1906:../../../FreeRTOS/Source/queue.c **** 				}
1907:../../../FreeRTOS/Source/queue.c **** 				else
1908:../../../FreeRTOS/Source/queue.c **** 				{
1909:../../../FreeRTOS/Source/queue.c **** 					/* Tasks that are removed from the event list will get added to
1910:../../../FreeRTOS/Source/queue.c **** 					the pending ready list as the scheduler is still suspended. */
1911:../../../FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1912:../../../FreeRTOS/Source/queue.c **** 					{
1913:../../../FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1914:../../../FreeRTOS/Source/queue.c **** 						{
1915:../../../FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1916:../../../FreeRTOS/Source/queue.c **** 							context	switch is required. */
1917:../../../FreeRTOS/Source/queue.c **** 							vTaskMissedYield();
1918:../../../FreeRTOS/Source/queue.c **** 						}
1919:../../../FreeRTOS/Source/queue.c **** 						else
1920:../../../FreeRTOS/Source/queue.c **** 						{
ARM GAS  /tmp/cc99qdVQ.s 			page 95


1921:../../../FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1922:../../../FreeRTOS/Source/queue.c **** 						}
1923:../../../FreeRTOS/Source/queue.c **** 					}
1924:../../../FreeRTOS/Source/queue.c **** 					else
1925:../../../FreeRTOS/Source/queue.c **** 					{
1926:../../../FreeRTOS/Source/queue.c **** 						break;
1927:../../../FreeRTOS/Source/queue.c **** 					}
1928:../../../FreeRTOS/Source/queue.c **** 				}
1929:../../../FreeRTOS/Source/queue.c **** 			}
1930:../../../FreeRTOS/Source/queue.c **** 			#else /* configUSE_QUEUE_SETS */
1931:../../../FreeRTOS/Source/queue.c **** 			{
1932:../../../FreeRTOS/Source/queue.c **** 				/* Tasks that are removed from the event list will get added to
1933:../../../FreeRTOS/Source/queue.c **** 				the pending ready list as the scheduler is still suspended. */
1934:../../../FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 3212              		.loc 1 1934 0
 3213 000e 7B68     		ldr	r3, [r7, #4]
 3214 0010 5B6A     		ldr	r3, [r3, #36]
 3215 0012 002B     		cmp	r3, #0
 3216 0014 0AD0     		beq	.L205
1935:../../../FreeRTOS/Source/queue.c **** 				{
1936:../../../FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 3217              		.loc 1 1936 0
 3218 0016 7B68     		ldr	r3, [r7, #4]
 3219 0018 2433     		adds	r3, r3, #36
 3220 001a 1846     		mov	r0, r3
 3221 001c FFF7FEFF 		bl	xTaskRemoveFromEventList
 3222 0020 0346     		mov	r3, r0
 3223 0022 002B     		cmp	r3, #0
 3224 0024 03D0     		beq	.L206
1937:../../../FreeRTOS/Source/queue.c **** 					{
1938:../../../FreeRTOS/Source/queue.c **** 						/* The task waiting has a higher priority so record that a
1939:../../../FreeRTOS/Source/queue.c **** 						context	switch is required. */
1940:../../../FreeRTOS/Source/queue.c **** 						vTaskMissedYield();
 3225              		.loc 1 1940 0
 3226 0026 FFF7FEFF 		bl	vTaskMissedYield
 3227 002a 00E0     		b	.L206
 3228              	.L205:
1941:../../../FreeRTOS/Source/queue.c **** 					}
1942:../../../FreeRTOS/Source/queue.c **** 					else
1943:../../../FreeRTOS/Source/queue.c **** 					{
1944:../../../FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1945:../../../FreeRTOS/Source/queue.c **** 					}
1946:../../../FreeRTOS/Source/queue.c **** 				}
1947:../../../FreeRTOS/Source/queue.c **** 				else
1948:../../../FreeRTOS/Source/queue.c **** 				{
1949:../../../FreeRTOS/Source/queue.c **** 					break;
 3229              		.loc 1 1949 0
 3230 002c 08E0     		b	.L207
 3231              	.L206:
1950:../../../FreeRTOS/Source/queue.c **** 				}
1951:../../../FreeRTOS/Source/queue.c **** 			}
1952:../../../FreeRTOS/Source/queue.c **** 			#endif /* configUSE_QUEUE_SETS */
1953:../../../FreeRTOS/Source/queue.c **** 
1954:../../../FreeRTOS/Source/queue.c **** 			--( pxQueue->xTxLock );
 3232              		.loc 1 1954 0
 3233 002e 7B68     		ldr	r3, [r7, #4]
 3234 0030 9B6C     		ldr	r3, [r3, #72]
ARM GAS  /tmp/cc99qdVQ.s 			page 96


 3235 0032 5A1E     		subs	r2, r3, #1
 3236 0034 7B68     		ldr	r3, [r7, #4]
 3237 0036 9A64     		str	r2, [r3, #72]
 3238              	.L204:
1887:../../../FreeRTOS/Source/queue.c **** 		{
 3239              		.loc 1 1887 0
 3240 0038 7B68     		ldr	r3, [r7, #4]
 3241 003a 9B6C     		ldr	r3, [r3, #72]
 3242 003c 002B     		cmp	r3, #0
 3243 003e E6DC     		bgt	.L208
 3244              	.L207:
1955:../../../FreeRTOS/Source/queue.c **** 		}
1956:../../../FreeRTOS/Source/queue.c **** 
1957:../../../FreeRTOS/Source/queue.c **** 		pxQueue->xTxLock = queueUNLOCKED;
 3245              		.loc 1 1957 0
 3246 0040 7B68     		ldr	r3, [r7, #4]
 3247 0042 4FF0FF32 		mov	r2, #-1
 3248 0046 9A64     		str	r2, [r3, #72]
1958:../../../FreeRTOS/Source/queue.c **** 	}
1959:../../../FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 3249              		.loc 1 1959 0
 3250 0048 FFF7FEFF 		bl	vPortExitCritical
1960:../../../FreeRTOS/Source/queue.c **** 
1961:../../../FreeRTOS/Source/queue.c **** 	/* Do the same for the Rx lock. */
1962:../../../FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 3251              		.loc 1 1962 0
 3252 004c FFF7FEFF 		bl	vPortEnterCritical
1963:../../../FreeRTOS/Source/queue.c **** 	{
1964:../../../FreeRTOS/Source/queue.c **** 		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 3253              		.loc 1 1964 0
 3254 0050 14E0     		b	.L209
 3255              	.L213:
1965:../../../FreeRTOS/Source/queue.c **** 		{
1966:../../../FreeRTOS/Source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 3256              		.loc 1 1966 0
 3257 0052 7B68     		ldr	r3, [r7, #4]
 3258 0054 1B69     		ldr	r3, [r3, #16]
 3259 0056 002B     		cmp	r3, #0
 3260 0058 0FD0     		beq	.L210
1967:../../../FreeRTOS/Source/queue.c **** 			{
1968:../../../FreeRTOS/Source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 3261              		.loc 1 1968 0
 3262 005a 7B68     		ldr	r3, [r7, #4]
 3263 005c 1033     		adds	r3, r3, #16
 3264 005e 1846     		mov	r0, r3
 3265 0060 FFF7FEFF 		bl	xTaskRemoveFromEventList
 3266 0064 0346     		mov	r3, r0
 3267 0066 002B     		cmp	r3, #0
 3268 0068 01D0     		beq	.L211
1969:../../../FreeRTOS/Source/queue.c **** 				{
1970:../../../FreeRTOS/Source/queue.c **** 					vTaskMissedYield();
 3269              		.loc 1 1970 0
 3270 006a FFF7FEFF 		bl	vTaskMissedYield
 3271              	.L211:
1971:../../../FreeRTOS/Source/queue.c **** 				}
1972:../../../FreeRTOS/Source/queue.c **** 				else
1973:../../../FreeRTOS/Source/queue.c **** 				{
ARM GAS  /tmp/cc99qdVQ.s 			page 97


1974:../../../FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1975:../../../FreeRTOS/Source/queue.c **** 				}
1976:../../../FreeRTOS/Source/queue.c **** 
1977:../../../FreeRTOS/Source/queue.c **** 				--( pxQueue->xRxLock );
 3272              		.loc 1 1977 0
 3273 006e 7B68     		ldr	r3, [r7, #4]
 3274 0070 5B6C     		ldr	r3, [r3, #68]
 3275 0072 5A1E     		subs	r2, r3, #1
 3276 0074 7B68     		ldr	r3, [r7, #4]
 3277 0076 5A64     		str	r2, [r3, #68]
 3278 0078 00E0     		b	.L209
 3279              	.L210:
1978:../../../FreeRTOS/Source/queue.c **** 			}
1979:../../../FreeRTOS/Source/queue.c **** 			else
1980:../../../FreeRTOS/Source/queue.c **** 			{
1981:../../../FreeRTOS/Source/queue.c **** 				break;
 3280              		.loc 1 1981 0
 3281 007a 03E0     		b	.L212
 3282              	.L209:
1964:../../../FreeRTOS/Source/queue.c **** 		{
 3283              		.loc 1 1964 0
 3284 007c 7B68     		ldr	r3, [r7, #4]
 3285 007e 5B6C     		ldr	r3, [r3, #68]
 3286 0080 002B     		cmp	r3, #0
 3287 0082 E6DC     		bgt	.L213
 3288              	.L212:
1982:../../../FreeRTOS/Source/queue.c **** 			}
1983:../../../FreeRTOS/Source/queue.c **** 		}
1984:../../../FreeRTOS/Source/queue.c **** 
1985:../../../FreeRTOS/Source/queue.c **** 		pxQueue->xRxLock = queueUNLOCKED;
 3289              		.loc 1 1985 0
 3290 0084 7B68     		ldr	r3, [r7, #4]
 3291 0086 4FF0FF32 		mov	r2, #-1
 3292 008a 5A64     		str	r2, [r3, #68]
1986:../../../FreeRTOS/Source/queue.c **** 	}
1987:../../../FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 3293              		.loc 1 1987 0
 3294 008c FFF7FEFF 		bl	vPortExitCritical
1988:../../../FreeRTOS/Source/queue.c **** }
 3295              		.loc 1 1988 0
 3296 0090 0837     		adds	r7, r7, #8
 3297              	.LCFI112:
 3298              		.cfi_def_cfa_offset 8
 3299 0092 BD46     		mov	sp, r7
 3300              	.LCFI113:
 3301              		.cfi_def_cfa_register 13
 3302              		@ sp needed
 3303 0094 80BD     		pop	{r7, pc}
 3304              		.cfi_endproc
 3305              	.LFE25:
 3307 0096 00BF     		.section	.text.prvIsQueueEmpty,"ax",%progbits
 3308              		.align	2
 3309              		.thumb
 3310              		.thumb_func
 3312              	prvIsQueueEmpty:
 3313              	.LFB26:
1989:../../../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/cc99qdVQ.s 			page 98


1990:../../../FreeRTOS/Source/queue.c **** 
1991:../../../FreeRTOS/Source/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
1992:../../../FreeRTOS/Source/queue.c **** {
 3314              		.loc 1 1992 0
 3315              		.cfi_startproc
 3316              		@ args = 0, pretend = 0, frame = 16
 3317              		@ frame_needed = 1, uses_anonymous_args = 0
 3318 0000 80B5     		push	{r7, lr}
 3319              	.LCFI114:
 3320              		.cfi_def_cfa_offset 8
 3321              		.cfi_offset 7, -8
 3322              		.cfi_offset 14, -4
 3323 0002 84B0     		sub	sp, sp, #16
 3324              	.LCFI115:
 3325              		.cfi_def_cfa_offset 24
 3326 0004 00AF     		add	r7, sp, #0
 3327              	.LCFI116:
 3328              		.cfi_def_cfa_register 7
 3329 0006 7860     		str	r0, [r7, #4]
1993:../../../FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1994:../../../FreeRTOS/Source/queue.c **** 
1995:../../../FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 3330              		.loc 1 1995 0
 3331 0008 FFF7FEFF 		bl	vPortEnterCritical
1996:../../../FreeRTOS/Source/queue.c **** 	{
1997:../../../FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 3332              		.loc 1 1997 0
 3333 000c 7B68     		ldr	r3, [r7, #4]
 3334 000e 9B6B     		ldr	r3, [r3, #56]
 3335 0010 002B     		cmp	r3, #0
 3336 0012 02D1     		bne	.L215
1998:../../../FreeRTOS/Source/queue.c **** 		{
1999:../../../FreeRTOS/Source/queue.c **** 			xReturn = pdTRUE;
 3337              		.loc 1 1999 0
 3338 0014 0123     		movs	r3, #1
 3339 0016 FB60     		str	r3, [r7, #12]
 3340 0018 01E0     		b	.L216
 3341              	.L215:
2000:../../../FreeRTOS/Source/queue.c **** 		}
2001:../../../FreeRTOS/Source/queue.c **** 		else
2002:../../../FreeRTOS/Source/queue.c **** 		{
2003:../../../FreeRTOS/Source/queue.c **** 			xReturn = pdFALSE;
 3342              		.loc 1 2003 0
 3343 001a 0023     		movs	r3, #0
 3344 001c FB60     		str	r3, [r7, #12]
 3345              	.L216:
2004:../../../FreeRTOS/Source/queue.c **** 		}
2005:../../../FreeRTOS/Source/queue.c **** 	}
2006:../../../FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 3346              		.loc 1 2006 0
 3347 001e FFF7FEFF 		bl	vPortExitCritical
2007:../../../FreeRTOS/Source/queue.c **** 
2008:../../../FreeRTOS/Source/queue.c **** 	return xReturn;
 3348              		.loc 1 2008 0
 3349 0022 FB68     		ldr	r3, [r7, #12]
2009:../../../FreeRTOS/Source/queue.c **** }
 3350              		.loc 1 2009 0
ARM GAS  /tmp/cc99qdVQ.s 			page 99


 3351 0024 1846     		mov	r0, r3
 3352 0026 1037     		adds	r7, r7, #16
 3353              	.LCFI117:
 3354              		.cfi_def_cfa_offset 8
 3355 0028 BD46     		mov	sp, r7
 3356              	.LCFI118:
 3357              		.cfi_def_cfa_register 13
 3358              		@ sp needed
 3359 002a 80BD     		pop	{r7, pc}
 3360              		.cfi_endproc
 3361              	.LFE26:
 3363              		.section	.text.xQueueIsQueueEmptyFromISR,"ax",%progbits
 3364              		.align	2
 3365              		.global	xQueueIsQueueEmptyFromISR
 3366              		.thumb
 3367              		.thumb_func
 3369              	xQueueIsQueueEmptyFromISR:
 3370              	.LFB27:
2010:../../../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2011:../../../FreeRTOS/Source/queue.c **** 
2012:../../../FreeRTOS/Source/queue.c **** BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
2013:../../../FreeRTOS/Source/queue.c **** {
 3371              		.loc 1 2013 0
 3372              		.cfi_startproc
 3373              		@ args = 0, pretend = 0, frame = 16
 3374              		@ frame_needed = 1, uses_anonymous_args = 0
 3375              		@ link register save eliminated.
 3376 0000 80B4     		push	{r7}
 3377              	.LCFI119:
 3378              		.cfi_def_cfa_offset 4
 3379              		.cfi_offset 7, -4
 3380 0002 85B0     		sub	sp, sp, #20
 3381              	.LCFI120:
 3382              		.cfi_def_cfa_offset 24
 3383 0004 00AF     		add	r7, sp, #0
 3384              	.LCFI121:
 3385              		.cfi_def_cfa_register 7
 3386 0006 7860     		str	r0, [r7, #4]
2014:../../../FreeRTOS/Source/queue.c **** BaseType_t xReturn;
2015:../../../FreeRTOS/Source/queue.c **** 
2016:../../../FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
 3387              		.loc 1 2016 0
 3388 0008 7B68     		ldr	r3, [r7, #4]
 3389 000a 002B     		cmp	r3, #0
 3390 000c 09D1     		bne	.L219
 3391              	.LBB158:
 3392              	.LBB159:
 215:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3393              		.loc 2 215 0 discriminator 1
 3394              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3395 000e 4FF05003 			mov r3, #80												
 3396 0012 83F31188 		msr basepri, r3											
 3397 0016 BFF36F8F 		isb														
 3398 001a BFF34F8F 		dsb														
 3399              	
 3400              	@ 0 "" 2
 3401              		.thumb
ARM GAS  /tmp/cc99qdVQ.s 			page 100


 3402 001e BB60     		str	r3, [r7, #8]
 3403              	.L220:
 3404              	.LBE159:
 3405              	.LBE158:
 3406              		.loc 1 2016 0 discriminator 1
 3407 0020 FEE7     		b	.L220
 3408              	.L219:
2017:../../../FreeRTOS/Source/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
 3409              		.loc 1 2017 0
 3410 0022 7B68     		ldr	r3, [r7, #4]
 3411 0024 9B6B     		ldr	r3, [r3, #56]
 3412 0026 002B     		cmp	r3, #0
 3413 0028 02D1     		bne	.L221
2018:../../../FreeRTOS/Source/queue.c **** 	{
2019:../../../FreeRTOS/Source/queue.c **** 		xReturn = pdTRUE;
 3414              		.loc 1 2019 0
 3415 002a 0123     		movs	r3, #1
 3416 002c FB60     		str	r3, [r7, #12]
 3417 002e 01E0     		b	.L222
 3418              	.L221:
2020:../../../FreeRTOS/Source/queue.c **** 	}
2021:../../../FreeRTOS/Source/queue.c **** 	else
2022:../../../FreeRTOS/Source/queue.c **** 	{
2023:../../../FreeRTOS/Source/queue.c **** 		xReturn = pdFALSE;
 3419              		.loc 1 2023 0
 3420 0030 0023     		movs	r3, #0
 3421 0032 FB60     		str	r3, [r7, #12]
 3422              	.L222:
2024:../../../FreeRTOS/Source/queue.c **** 	}
2025:../../../FreeRTOS/Source/queue.c **** 
2026:../../../FreeRTOS/Source/queue.c **** 	return xReturn;
 3423              		.loc 1 2026 0
 3424 0034 FB68     		ldr	r3, [r7, #12]
2027:../../../FreeRTOS/Source/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 3425              		.loc 1 2027 0
 3426 0036 1846     		mov	r0, r3
 3427 0038 1437     		adds	r7, r7, #20
 3428              	.LCFI122:
 3429              		.cfi_def_cfa_offset 4
 3430 003a BD46     		mov	sp, r7
 3431              	.LCFI123:
 3432              		.cfi_def_cfa_register 13
 3433              		@ sp needed
 3434 003c 5DF8047B 		ldr	r7, [sp], #4
 3435              	.LCFI124:
 3436              		.cfi_restore 7
 3437              		.cfi_def_cfa_offset 0
 3438 0040 7047     		bx	lr
 3439              		.cfi_endproc
 3440              	.LFE27:
 3442 0042 00BF     		.section	.text.prvIsQueueFull,"ax",%progbits
 3443              		.align	2
 3444              		.thumb
 3445              		.thumb_func
 3447              	prvIsQueueFull:
 3448              	.LFB28:
2028:../../../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/cc99qdVQ.s 			page 101


2029:../../../FreeRTOS/Source/queue.c **** 
2030:../../../FreeRTOS/Source/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
2031:../../../FreeRTOS/Source/queue.c **** {
 3449              		.loc 1 2031 0
 3450              		.cfi_startproc
 3451              		@ args = 0, pretend = 0, frame = 16
 3452              		@ frame_needed = 1, uses_anonymous_args = 0
 3453 0000 80B5     		push	{r7, lr}
 3454              	.LCFI125:
 3455              		.cfi_def_cfa_offset 8
 3456              		.cfi_offset 7, -8
 3457              		.cfi_offset 14, -4
 3458 0002 84B0     		sub	sp, sp, #16
 3459              	.LCFI126:
 3460              		.cfi_def_cfa_offset 24
 3461 0004 00AF     		add	r7, sp, #0
 3462              	.LCFI127:
 3463              		.cfi_def_cfa_register 7
 3464 0006 7860     		str	r0, [r7, #4]
2032:../../../FreeRTOS/Source/queue.c **** BaseType_t xReturn;
2033:../../../FreeRTOS/Source/queue.c **** 
2034:../../../FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 3465              		.loc 1 2034 0
 3466 0008 FFF7FEFF 		bl	vPortEnterCritical
2035:../../../FreeRTOS/Source/queue.c **** 	{
2036:../../../FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 3467              		.loc 1 2036 0
 3468 000c 7B68     		ldr	r3, [r7, #4]
 3469 000e 9A6B     		ldr	r2, [r3, #56]
 3470 0010 7B68     		ldr	r3, [r7, #4]
 3471 0012 DB6B     		ldr	r3, [r3, #60]
 3472 0014 9A42     		cmp	r2, r3
 3473 0016 02D1     		bne	.L225
2037:../../../FreeRTOS/Source/queue.c **** 		{
2038:../../../FreeRTOS/Source/queue.c **** 			xReturn = pdTRUE;
 3474              		.loc 1 2038 0
 3475 0018 0123     		movs	r3, #1
 3476 001a FB60     		str	r3, [r7, #12]
 3477 001c 01E0     		b	.L226
 3478              	.L225:
2039:../../../FreeRTOS/Source/queue.c **** 		}
2040:../../../FreeRTOS/Source/queue.c **** 		else
2041:../../../FreeRTOS/Source/queue.c **** 		{
2042:../../../FreeRTOS/Source/queue.c **** 			xReturn = pdFALSE;
 3479              		.loc 1 2042 0
 3480 001e 0023     		movs	r3, #0
 3481 0020 FB60     		str	r3, [r7, #12]
 3482              	.L226:
2043:../../../FreeRTOS/Source/queue.c **** 		}
2044:../../../FreeRTOS/Source/queue.c **** 	}
2045:../../../FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 3483              		.loc 1 2045 0
 3484 0022 FFF7FEFF 		bl	vPortExitCritical
2046:../../../FreeRTOS/Source/queue.c **** 
2047:../../../FreeRTOS/Source/queue.c **** 	return xReturn;
 3485              		.loc 1 2047 0
 3486 0026 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/cc99qdVQ.s 			page 102


2048:../../../FreeRTOS/Source/queue.c **** }
 3487              		.loc 1 2048 0
 3488 0028 1846     		mov	r0, r3
 3489 002a 1037     		adds	r7, r7, #16
 3490              	.LCFI128:
 3491              		.cfi_def_cfa_offset 8
 3492 002c BD46     		mov	sp, r7
 3493              	.LCFI129:
 3494              		.cfi_def_cfa_register 13
 3495              		@ sp needed
 3496 002e 80BD     		pop	{r7, pc}
 3497              		.cfi_endproc
 3498              	.LFE28:
 3500              		.section	.text.xQueueIsQueueFullFromISR,"ax",%progbits
 3501              		.align	2
 3502              		.global	xQueueIsQueueFullFromISR
 3503              		.thumb
 3504              		.thumb_func
 3506              	xQueueIsQueueFullFromISR:
 3507              	.LFB29:
2049:../../../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2050:../../../FreeRTOS/Source/queue.c **** 
2051:../../../FreeRTOS/Source/queue.c **** BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
2052:../../../FreeRTOS/Source/queue.c **** {
 3508              		.loc 1 2052 0
 3509              		.cfi_startproc
 3510              		@ args = 0, pretend = 0, frame = 16
 3511              		@ frame_needed = 1, uses_anonymous_args = 0
 3512              		@ link register save eliminated.
 3513 0000 80B4     		push	{r7}
 3514              	.LCFI130:
 3515              		.cfi_def_cfa_offset 4
 3516              		.cfi_offset 7, -4
 3517 0002 85B0     		sub	sp, sp, #20
 3518              	.LCFI131:
 3519              		.cfi_def_cfa_offset 24
 3520 0004 00AF     		add	r7, sp, #0
 3521              	.LCFI132:
 3522              		.cfi_def_cfa_register 7
 3523 0006 7860     		str	r0, [r7, #4]
2053:../../../FreeRTOS/Source/queue.c **** BaseType_t xReturn;
2054:../../../FreeRTOS/Source/queue.c **** 
2055:../../../FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
 3524              		.loc 1 2055 0
 3525 0008 7B68     		ldr	r3, [r7, #4]
 3526 000a 002B     		cmp	r3, #0
 3527 000c 09D1     		bne	.L229
 3528              	.LBB160:
 3529              	.LBB161:
 215:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3530              		.loc 2 215 0 discriminator 1
 3531              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3532 000e 4FF05003 			mov r3, #80												
 3533 0012 83F31188 		msr basepri, r3											
 3534 0016 BFF36F8F 		isb														
 3535 001a BFF34F8F 		dsb														
 3536              	
ARM GAS  /tmp/cc99qdVQ.s 			page 103


 3537              	@ 0 "" 2
 3538              		.thumb
 3539 001e BB60     		str	r3, [r7, #8]
 3540              	.L230:
 3541              	.LBE161:
 3542              	.LBE160:
 3543              		.loc 1 2055 0 discriminator 1
 3544 0020 FEE7     		b	.L230
 3545              	.L229:
2056:../../../FreeRTOS/Source/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
 3546              		.loc 1 2056 0
 3547 0022 7B68     		ldr	r3, [r7, #4]
 3548 0024 9A6B     		ldr	r2, [r3, #56]
 3549 0026 7B68     		ldr	r3, [r7, #4]
 3550 0028 DB6B     		ldr	r3, [r3, #60]
 3551 002a 9A42     		cmp	r2, r3
 3552 002c 02D1     		bne	.L231
2057:../../../FreeRTOS/Source/queue.c **** 	{
2058:../../../FreeRTOS/Source/queue.c **** 		xReturn = pdTRUE;
 3553              		.loc 1 2058 0
 3554 002e 0123     		movs	r3, #1
 3555 0030 FB60     		str	r3, [r7, #12]
 3556 0032 01E0     		b	.L232
 3557              	.L231:
2059:../../../FreeRTOS/Source/queue.c **** 	}
2060:../../../FreeRTOS/Source/queue.c **** 	else
2061:../../../FreeRTOS/Source/queue.c **** 	{
2062:../../../FreeRTOS/Source/queue.c **** 		xReturn = pdFALSE;
 3558              		.loc 1 2062 0
 3559 0034 0023     		movs	r3, #0
 3560 0036 FB60     		str	r3, [r7, #12]
 3561              	.L232:
2063:../../../FreeRTOS/Source/queue.c **** 	}
2064:../../../FreeRTOS/Source/queue.c **** 
2065:../../../FreeRTOS/Source/queue.c **** 	return xReturn;
 3562              		.loc 1 2065 0
 3563 0038 FB68     		ldr	r3, [r7, #12]
2066:../../../FreeRTOS/Source/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 3564              		.loc 1 2066 0
 3565 003a 1846     		mov	r0, r3
 3566 003c 1437     		adds	r7, r7, #20
 3567              	.LCFI133:
 3568              		.cfi_def_cfa_offset 4
 3569 003e BD46     		mov	sp, r7
 3570              	.LCFI134:
 3571              		.cfi_def_cfa_register 13
 3572              		@ sp needed
 3573 0040 5DF8047B 		ldr	r7, [sp], #4
 3574              	.LCFI135:
 3575              		.cfi_restore 7
 3576              		.cfi_def_cfa_offset 0
 3577 0044 7047     		bx	lr
 3578              		.cfi_endproc
 3579              	.LFE29:
 3581 0046 00BF     		.section	.text.vQueueAddToRegistry,"ax",%progbits
 3582              		.align	2
 3583              		.global	vQueueAddToRegistry
ARM GAS  /tmp/cc99qdVQ.s 			page 104


 3584              		.thumb
 3585              		.thumb_func
 3587              	vQueueAddToRegistry:
 3588              	.LFB30:
2067:../../../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2068:../../../FreeRTOS/Source/queue.c **** 
2069:../../../FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2070:../../../FreeRTOS/Source/queue.c **** 
2071:../../../FreeRTOS/Source/queue.c **** 	BaseType_t xQueueCRSend( QueueHandle_t xQueue, const void *pvItemToQueue, TickType_t xTicksToWait 
2072:../../../FreeRTOS/Source/queue.c **** 	{
2073:../../../FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
2074:../../../FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2075:../../../FreeRTOS/Source/queue.c **** 
2076:../../../FreeRTOS/Source/queue.c **** 		/* If the queue is already full we may have to block.  A critical section
2077:../../../FreeRTOS/Source/queue.c **** 		is required to prevent an interrupt removing something from the queue
2078:../../../FreeRTOS/Source/queue.c **** 		between the check to see if the queue is full and blocking on the queue. */
2079:../../../FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
2080:../../../FreeRTOS/Source/queue.c **** 		{
2081:../../../FreeRTOS/Source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
2082:../../../FreeRTOS/Source/queue.c **** 			{
2083:../../../FreeRTOS/Source/queue.c **** 				/* The queue is full - do we want to block or just leave without
2084:../../../FreeRTOS/Source/queue.c **** 				posting? */
2085:../../../FreeRTOS/Source/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2086:../../../FreeRTOS/Source/queue.c **** 				{
2087:../../../FreeRTOS/Source/queue.c **** 					/* As this is called from a coroutine we cannot block directly, but
2088:../../../FreeRTOS/Source/queue.c **** 					return indicating that we need to block. */
2089:../../../FreeRTOS/Source/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
2090:../../../FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
2091:../../../FreeRTOS/Source/queue.c **** 					return errQUEUE_BLOCKED;
2092:../../../FreeRTOS/Source/queue.c **** 				}
2093:../../../FreeRTOS/Source/queue.c **** 				else
2094:../../../FreeRTOS/Source/queue.c **** 				{
2095:../../../FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
2096:../../../FreeRTOS/Source/queue.c **** 					return errQUEUE_FULL;
2097:../../../FreeRTOS/Source/queue.c **** 				}
2098:../../../FreeRTOS/Source/queue.c **** 			}
2099:../../../FreeRTOS/Source/queue.c **** 		}
2100:../../../FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
2101:../../../FreeRTOS/Source/queue.c **** 
2102:../../../FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
2103:../../../FreeRTOS/Source/queue.c **** 		{
2104:../../../FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2105:../../../FreeRTOS/Source/queue.c **** 			{
2106:../../../FreeRTOS/Source/queue.c **** 				/* There is room in the queue, copy the data into the queue. */
2107:../../../FreeRTOS/Source/queue.c **** 				prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2108:../../../FreeRTOS/Source/queue.c **** 				xReturn = pdPASS;
2109:../../../FreeRTOS/Source/queue.c **** 
2110:../../../FreeRTOS/Source/queue.c **** 				/* Were any co-routines waiting for data to become available? */
2111:../../../FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2112:../../../FreeRTOS/Source/queue.c **** 				{
2113:../../../FreeRTOS/Source/queue.c **** 					/* In this instance the co-routine could be placed directly
2114:../../../FreeRTOS/Source/queue.c **** 					into the ready list as we are within a critical section.
2115:../../../FreeRTOS/Source/queue.c **** 					Instead the same pending ready list mechanism is used as if
2116:../../../FreeRTOS/Source/queue.c **** 					the event were caused from within an interrupt. */
2117:../../../FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2118:../../../FreeRTOS/Source/queue.c **** 					{
2119:../../../FreeRTOS/Source/queue.c **** 						/* The co-routine waiting has a higher priority so record
ARM GAS  /tmp/cc99qdVQ.s 			page 105


2120:../../../FreeRTOS/Source/queue.c **** 						that a yield might be appropriate. */
2121:../../../FreeRTOS/Source/queue.c **** 						xReturn = errQUEUE_YIELD;
2122:../../../FreeRTOS/Source/queue.c **** 					}
2123:../../../FreeRTOS/Source/queue.c **** 					else
2124:../../../FreeRTOS/Source/queue.c **** 					{
2125:../../../FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2126:../../../FreeRTOS/Source/queue.c **** 					}
2127:../../../FreeRTOS/Source/queue.c **** 				}
2128:../../../FreeRTOS/Source/queue.c **** 				else
2129:../../../FreeRTOS/Source/queue.c **** 				{
2130:../../../FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2131:../../../FreeRTOS/Source/queue.c **** 				}
2132:../../../FreeRTOS/Source/queue.c **** 			}
2133:../../../FreeRTOS/Source/queue.c **** 			else
2134:../../../FreeRTOS/Source/queue.c **** 			{
2135:../../../FreeRTOS/Source/queue.c **** 				xReturn = errQUEUE_FULL;
2136:../../../FreeRTOS/Source/queue.c **** 			}
2137:../../../FreeRTOS/Source/queue.c **** 		}
2138:../../../FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
2139:../../../FreeRTOS/Source/queue.c **** 
2140:../../../FreeRTOS/Source/queue.c **** 		return xReturn;
2141:../../../FreeRTOS/Source/queue.c **** 	}
2142:../../../FreeRTOS/Source/queue.c **** 
2143:../../../FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2144:../../../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2145:../../../FreeRTOS/Source/queue.c **** 
2146:../../../FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2147:../../../FreeRTOS/Source/queue.c **** 
2148:../../../FreeRTOS/Source/queue.c **** 	BaseType_t xQueueCRReceive( QueueHandle_t xQueue, void *pvBuffer, TickType_t xTicksToWait )
2149:../../../FreeRTOS/Source/queue.c **** 	{
2150:../../../FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
2151:../../../FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2152:../../../FreeRTOS/Source/queue.c **** 
2153:../../../FreeRTOS/Source/queue.c **** 		/* If the queue is already empty we may have to block.  A critical section
2154:../../../FreeRTOS/Source/queue.c **** 		is required to prevent an interrupt adding something to the queue
2155:../../../FreeRTOS/Source/queue.c **** 		between the check to see if the queue is empty and blocking on the queue. */
2156:../../../FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
2157:../../../FreeRTOS/Source/queue.c **** 		{
2158:../../../FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2159:../../../FreeRTOS/Source/queue.c **** 			{
2160:../../../FreeRTOS/Source/queue.c **** 				/* There are no messages in the queue, do we want to block or just
2161:../../../FreeRTOS/Source/queue.c **** 				leave with nothing? */
2162:../../../FreeRTOS/Source/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2163:../../../FreeRTOS/Source/queue.c **** 				{
2164:../../../FreeRTOS/Source/queue.c **** 					/* As this is a co-routine we cannot block directly, but return
2165:../../../FreeRTOS/Source/queue.c **** 					indicating that we need to block. */
2166:../../../FreeRTOS/Source/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) );
2167:../../../FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
2168:../../../FreeRTOS/Source/queue.c **** 					return errQUEUE_BLOCKED;
2169:../../../FreeRTOS/Source/queue.c **** 				}
2170:../../../FreeRTOS/Source/queue.c **** 				else
2171:../../../FreeRTOS/Source/queue.c **** 				{
2172:../../../FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
2173:../../../FreeRTOS/Source/queue.c **** 					return errQUEUE_FULL;
2174:../../../FreeRTOS/Source/queue.c **** 				}
2175:../../../FreeRTOS/Source/queue.c **** 			}
2176:../../../FreeRTOS/Source/queue.c **** 			else
ARM GAS  /tmp/cc99qdVQ.s 			page 106


2177:../../../FreeRTOS/Source/queue.c **** 			{
2178:../../../FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2179:../../../FreeRTOS/Source/queue.c **** 			}
2180:../../../FreeRTOS/Source/queue.c **** 		}
2181:../../../FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
2182:../../../FreeRTOS/Source/queue.c **** 
2183:../../../FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
2184:../../../FreeRTOS/Source/queue.c **** 		{
2185:../../../FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2186:../../../FreeRTOS/Source/queue.c **** 			{
2187:../../../FreeRTOS/Source/queue.c **** 				/* Data is available from the queue. */
2188:../../../FreeRTOS/Source/queue.c **** 				pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2189:../../../FreeRTOS/Source/queue.c **** 				if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
2190:../../../FreeRTOS/Source/queue.c **** 				{
2191:../../../FreeRTOS/Source/queue.c **** 					pxQueue->u.pcReadFrom = pxQueue->pcHead;
2192:../../../FreeRTOS/Source/queue.c **** 				}
2193:../../../FreeRTOS/Source/queue.c **** 				else
2194:../../../FreeRTOS/Source/queue.c **** 				{
2195:../../../FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2196:../../../FreeRTOS/Source/queue.c **** 				}
2197:../../../FreeRTOS/Source/queue.c **** 				--( pxQueue->uxMessagesWaiting );
2198:../../../FreeRTOS/Source/queue.c **** 				( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->u
2199:../../../FreeRTOS/Source/queue.c **** 
2200:../../../FreeRTOS/Source/queue.c **** 				xReturn = pdPASS;
2201:../../../FreeRTOS/Source/queue.c **** 
2202:../../../FreeRTOS/Source/queue.c **** 				/* Were any co-routines waiting for space to become available? */
2203:../../../FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2204:../../../FreeRTOS/Source/queue.c **** 				{
2205:../../../FreeRTOS/Source/queue.c **** 					/* In this instance the co-routine could be placed directly
2206:../../../FreeRTOS/Source/queue.c **** 					into the ready list as we are within a critical section.
2207:../../../FreeRTOS/Source/queue.c **** 					Instead the same pending ready list mechanism is used as if
2208:../../../FreeRTOS/Source/queue.c **** 					the event were caused from within an interrupt. */
2209:../../../FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2210:../../../FreeRTOS/Source/queue.c **** 					{
2211:../../../FreeRTOS/Source/queue.c **** 						xReturn = errQUEUE_YIELD;
2212:../../../FreeRTOS/Source/queue.c **** 					}
2213:../../../FreeRTOS/Source/queue.c **** 					else
2214:../../../FreeRTOS/Source/queue.c **** 					{
2215:../../../FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2216:../../../FreeRTOS/Source/queue.c **** 					}
2217:../../../FreeRTOS/Source/queue.c **** 				}
2218:../../../FreeRTOS/Source/queue.c **** 				else
2219:../../../FreeRTOS/Source/queue.c **** 				{
2220:../../../FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2221:../../../FreeRTOS/Source/queue.c **** 				}
2222:../../../FreeRTOS/Source/queue.c **** 			}
2223:../../../FreeRTOS/Source/queue.c **** 			else
2224:../../../FreeRTOS/Source/queue.c **** 			{
2225:../../../FreeRTOS/Source/queue.c **** 				xReturn = pdFAIL;
2226:../../../FreeRTOS/Source/queue.c **** 			}
2227:../../../FreeRTOS/Source/queue.c **** 		}
2228:../../../FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
2229:../../../FreeRTOS/Source/queue.c **** 
2230:../../../FreeRTOS/Source/queue.c **** 		return xReturn;
2231:../../../FreeRTOS/Source/queue.c **** 	}
2232:../../../FreeRTOS/Source/queue.c **** 
2233:../../../FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
ARM GAS  /tmp/cc99qdVQ.s 			page 107


2234:../../../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2235:../../../FreeRTOS/Source/queue.c **** 
2236:../../../FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2237:../../../FreeRTOS/Source/queue.c **** 
2238:../../../FreeRTOS/Source/queue.c **** 	BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue, const void *pvItemToQueue, BaseType_t xCoRou
2239:../../../FreeRTOS/Source/queue.c **** 	{
2240:../../../FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2241:../../../FreeRTOS/Source/queue.c **** 
2242:../../../FreeRTOS/Source/queue.c **** 		/* Cannot block within an ISR so if there is no space on the queue then
2243:../../../FreeRTOS/Source/queue.c **** 		exit without doing anything. */
2244:../../../FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2245:../../../FreeRTOS/Source/queue.c **** 		{
2246:../../../FreeRTOS/Source/queue.c **** 			prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2247:../../../FreeRTOS/Source/queue.c **** 
2248:../../../FreeRTOS/Source/queue.c **** 			/* We only want to wake one co-routine per ISR, so check that a
2249:../../../FreeRTOS/Source/queue.c **** 			co-routine has not already been woken. */
2250:../../../FreeRTOS/Source/queue.c **** 			if( xCoRoutinePreviouslyWoken == pdFALSE )
2251:../../../FreeRTOS/Source/queue.c **** 			{
2252:../../../FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2253:../../../FreeRTOS/Source/queue.c **** 				{
2254:../../../FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2255:../../../FreeRTOS/Source/queue.c **** 					{
2256:../../../FreeRTOS/Source/queue.c **** 						return pdTRUE;
2257:../../../FreeRTOS/Source/queue.c **** 					}
2258:../../../FreeRTOS/Source/queue.c **** 					else
2259:../../../FreeRTOS/Source/queue.c **** 					{
2260:../../../FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2261:../../../FreeRTOS/Source/queue.c **** 					}
2262:../../../FreeRTOS/Source/queue.c **** 				}
2263:../../../FreeRTOS/Source/queue.c **** 				else
2264:../../../FreeRTOS/Source/queue.c **** 				{
2265:../../../FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2266:../../../FreeRTOS/Source/queue.c **** 				}
2267:../../../FreeRTOS/Source/queue.c **** 			}
2268:../../../FreeRTOS/Source/queue.c **** 			else
2269:../../../FreeRTOS/Source/queue.c **** 			{
2270:../../../FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2271:../../../FreeRTOS/Source/queue.c **** 			}
2272:../../../FreeRTOS/Source/queue.c **** 		}
2273:../../../FreeRTOS/Source/queue.c **** 		else
2274:../../../FreeRTOS/Source/queue.c **** 		{
2275:../../../FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2276:../../../FreeRTOS/Source/queue.c **** 		}
2277:../../../FreeRTOS/Source/queue.c **** 
2278:../../../FreeRTOS/Source/queue.c **** 		return xCoRoutinePreviouslyWoken;
2279:../../../FreeRTOS/Source/queue.c **** 	}
2280:../../../FreeRTOS/Source/queue.c **** 
2281:../../../FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2282:../../../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2283:../../../FreeRTOS/Source/queue.c **** 
2284:../../../FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2285:../../../FreeRTOS/Source/queue.c **** 
2286:../../../FreeRTOS/Source/queue.c **** 	BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue, void *pvBuffer, BaseType_t *pxCoRoutineWo
2287:../../../FreeRTOS/Source/queue.c **** 	{
2288:../../../FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
2289:../../../FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2290:../../../FreeRTOS/Source/queue.c **** 
ARM GAS  /tmp/cc99qdVQ.s 			page 108


2291:../../../FreeRTOS/Source/queue.c **** 		/* We cannot block from an ISR, so check there is data available. If
2292:../../../FreeRTOS/Source/queue.c **** 		not then just leave without doing anything. */
2293:../../../FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2294:../../../FreeRTOS/Source/queue.c **** 		{
2295:../../../FreeRTOS/Source/queue.c **** 			/* Copy the data from the queue. */
2296:../../../FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2297:../../../FreeRTOS/Source/queue.c **** 			if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
2298:../../../FreeRTOS/Source/queue.c **** 			{
2299:../../../FreeRTOS/Source/queue.c **** 				pxQueue->u.pcReadFrom = pxQueue->pcHead;
2300:../../../FreeRTOS/Source/queue.c **** 			}
2301:../../../FreeRTOS/Source/queue.c **** 			else
2302:../../../FreeRTOS/Source/queue.c **** 			{
2303:../../../FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2304:../../../FreeRTOS/Source/queue.c **** 			}
2305:../../../FreeRTOS/Source/queue.c **** 			--( pxQueue->uxMessagesWaiting );
2306:../../../FreeRTOS/Source/queue.c **** 			( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->ux
2307:../../../FreeRTOS/Source/queue.c **** 
2308:../../../FreeRTOS/Source/queue.c **** 			if( ( *pxCoRoutineWoken ) == pdFALSE )
2309:../../../FreeRTOS/Source/queue.c **** 			{
2310:../../../FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2311:../../../FreeRTOS/Source/queue.c **** 				{
2312:../../../FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2313:../../../FreeRTOS/Source/queue.c **** 					{
2314:../../../FreeRTOS/Source/queue.c **** 						*pxCoRoutineWoken = pdTRUE;
2315:../../../FreeRTOS/Source/queue.c **** 					}
2316:../../../FreeRTOS/Source/queue.c **** 					else
2317:../../../FreeRTOS/Source/queue.c **** 					{
2318:../../../FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2319:../../../FreeRTOS/Source/queue.c **** 					}
2320:../../../FreeRTOS/Source/queue.c **** 				}
2321:../../../FreeRTOS/Source/queue.c **** 				else
2322:../../../FreeRTOS/Source/queue.c **** 				{
2323:../../../FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2324:../../../FreeRTOS/Source/queue.c **** 				}
2325:../../../FreeRTOS/Source/queue.c **** 			}
2326:../../../FreeRTOS/Source/queue.c **** 			else
2327:../../../FreeRTOS/Source/queue.c **** 			{
2328:../../../FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2329:../../../FreeRTOS/Source/queue.c **** 			}
2330:../../../FreeRTOS/Source/queue.c **** 
2331:../../../FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
2332:../../../FreeRTOS/Source/queue.c **** 		}
2333:../../../FreeRTOS/Source/queue.c **** 		else
2334:../../../FreeRTOS/Source/queue.c **** 		{
2335:../../../FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
2336:../../../FreeRTOS/Source/queue.c **** 		}
2337:../../../FreeRTOS/Source/queue.c **** 
2338:../../../FreeRTOS/Source/queue.c **** 		return xReturn;
2339:../../../FreeRTOS/Source/queue.c **** 	}
2340:../../../FreeRTOS/Source/queue.c **** 
2341:../../../FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2342:../../../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2343:../../../FreeRTOS/Source/queue.c **** 
2344:../../../FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2345:../../../FreeRTOS/Source/queue.c **** 
2346:../../../FreeRTOS/Source/queue.c **** 	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified
2347:../../../FreeRTOS/Source/queue.c **** 	{
ARM GAS  /tmp/cc99qdVQ.s 			page 109


 3589              		.loc 1 2347 0
 3590              		.cfi_startproc
 3591              		@ args = 0, pretend = 0, frame = 16
 3592              		@ frame_needed = 1, uses_anonymous_args = 0
 3593 0000 80B5     		push	{r7, lr}
 3594              	.LCFI136:
 3595              		.cfi_def_cfa_offset 8
 3596              		.cfi_offset 7, -8
 3597              		.cfi_offset 14, -4
 3598 0002 84B0     		sub	sp, sp, #16
 3599              	.LCFI137:
 3600              		.cfi_def_cfa_offset 24
 3601 0004 00AF     		add	r7, sp, #0
 3602              	.LCFI138:
 3603              		.cfi_def_cfa_register 7
 3604 0006 7860     		str	r0, [r7, #4]
 3605 0008 3960     		str	r1, [r7]
2348:../../../FreeRTOS/Source/queue.c **** 	UBaseType_t ux;
2349:../../../FreeRTOS/Source/queue.c **** 
2350:../../../FreeRTOS/Source/queue.c **** 		/* See if there is an empty space in the registry.  A NULL name denotes
2351:../../../FreeRTOS/Source/queue.c **** 		a free slot. */
2352:../../../FreeRTOS/Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 3606              		.loc 1 2352 0
 3607 000a 0023     		movs	r3, #0
 3608 000c FB60     		str	r3, [r7, #12]
 3609 000e 1FE0     		b	.L235
 3610              	.L238:
2353:../../../FreeRTOS/Source/queue.c **** 		{
2354:../../../FreeRTOS/Source/queue.c **** 			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 3611              		.loc 1 2354 0
 3612 0010 124A     		ldr	r2, .L239
 3613 0012 FB68     		ldr	r3, [r7, #12]
 3614 0014 52F83330 		ldr	r3, [r2, r3, lsl #3]
 3615 0018 002B     		cmp	r3, #0
 3616 001a 16D1     		bne	.L236
2355:../../../FreeRTOS/Source/queue.c **** 			{
2356:../../../FreeRTOS/Source/queue.c **** 				/* Store the information on this queue. */
2357:../../../FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 3617              		.loc 1 2357 0
 3618 001c 0F49     		ldr	r1, .L239
 3619 001e FB68     		ldr	r3, [r7, #12]
 3620 0020 3A68     		ldr	r2, [r7]
 3621 0022 41F83320 		str	r2, [r1, r3, lsl #3]
2358:../../../FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].xHandle = xQueue;
 3622              		.loc 1 2358 0
 3623 0026 0D4A     		ldr	r2, .L239
 3624 0028 FB68     		ldr	r3, [r7, #12]
 3625 002a DB00     		lsls	r3, r3, #3
 3626 002c 1344     		add	r3, r3, r2
 3627 002e 7A68     		ldr	r2, [r7, #4]
 3628 0030 5A60     		str	r2, [r3, #4]
2359:../../../FreeRTOS/Source/queue.c **** 
2360:../../../FreeRTOS/Source/queue.c **** 				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 3629              		.loc 1 2360 0
 3630 0032 7B68     		ldr	r3, [r7, #4]
 3631 0034 1846     		mov	r0, r3
 3632 0036 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
ARM GAS  /tmp/cc99qdVQ.s 			page 110


 3633 003a 0246     		mov	r2, r0
 3634 003c 3B68     		ldr	r3, [r7]
 3635 003e 7120     		movs	r0, #113
 3636 0040 1146     		mov	r1, r2
 3637 0042 1A46     		mov	r2, r3
 3638 0044 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x2
2361:../../../FreeRTOS/Source/queue.c **** 				break;
 3639              		.loc 1 2361 0
 3640 0048 05E0     		b	.L234
 3641              	.L236:
2352:../../../FreeRTOS/Source/queue.c **** 		{
 3642              		.loc 1 2352 0 discriminator 2
 3643 004a FB68     		ldr	r3, [r7, #12]
 3644 004c 0133     		adds	r3, r3, #1
 3645 004e FB60     		str	r3, [r7, #12]
 3646              	.L235:
2352:../../../FreeRTOS/Source/queue.c **** 		{
 3647              		.loc 1 2352 0 is_stmt 0 discriminator 1
 3648 0050 FB68     		ldr	r3, [r7, #12]
 3649 0052 072B     		cmp	r3, #7
 3650 0054 DCD9     		bls	.L238
 3651              	.L234:
2362:../../../FreeRTOS/Source/queue.c **** 			}
2363:../../../FreeRTOS/Source/queue.c **** 			else
2364:../../../FreeRTOS/Source/queue.c **** 			{
2365:../../../FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2366:../../../FreeRTOS/Source/queue.c **** 			}
2367:../../../FreeRTOS/Source/queue.c **** 		}
2368:../../../FreeRTOS/Source/queue.c **** 	}
 3652              		.loc 1 2368 0 is_stmt 1
 3653 0056 1037     		adds	r7, r7, #16
 3654              	.LCFI139:
 3655              		.cfi_def_cfa_offset 8
 3656 0058 BD46     		mov	sp, r7
 3657              	.LCFI140:
 3658              		.cfi_def_cfa_register 13
 3659              		@ sp needed
 3660 005a 80BD     		pop	{r7, pc}
 3661              	.L240:
 3662              		.align	2
 3663              	.L239:
 3664 005c 00000000 		.word	xQueueRegistry
 3665              		.cfi_endproc
 3666              	.LFE30:
 3668              		.section	.text.vQueueUnregisterQueue,"ax",%progbits
 3669              		.align	2
 3670              		.global	vQueueUnregisterQueue
 3671              		.thumb
 3672              		.thumb_func
 3674              	vQueueUnregisterQueue:
 3675              	.LFB31:
2369:../../../FreeRTOS/Source/queue.c **** 
2370:../../../FreeRTOS/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2371:../../../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2372:../../../FreeRTOS/Source/queue.c **** 
2373:../../../FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2374:../../../FreeRTOS/Source/queue.c **** 
ARM GAS  /tmp/cc99qdVQ.s 			page 111


2375:../../../FreeRTOS/Source/queue.c **** 	void vQueueUnregisterQueue( QueueHandle_t xQueue )
2376:../../../FreeRTOS/Source/queue.c **** 	{
 3676              		.loc 1 2376 0
 3677              		.cfi_startproc
 3678              		@ args = 0, pretend = 0, frame = 16
 3679              		@ frame_needed = 1, uses_anonymous_args = 0
 3680              		@ link register save eliminated.
 3681 0000 80B4     		push	{r7}
 3682              	.LCFI141:
 3683              		.cfi_def_cfa_offset 4
 3684              		.cfi_offset 7, -4
 3685 0002 85B0     		sub	sp, sp, #20
 3686              	.LCFI142:
 3687              		.cfi_def_cfa_offset 24
 3688 0004 00AF     		add	r7, sp, #0
 3689              	.LCFI143:
 3690              		.cfi_def_cfa_register 7
 3691 0006 7860     		str	r0, [r7, #4]
2377:../../../FreeRTOS/Source/queue.c **** 	UBaseType_t ux;
2378:../../../FreeRTOS/Source/queue.c **** 
2379:../../../FreeRTOS/Source/queue.c **** 		/* See if the handle of the queue being unregistered in actually in the
2380:../../../FreeRTOS/Source/queue.c **** 		registry. */
2381:../../../FreeRTOS/Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 3692              		.loc 1 2381 0
 3693 0008 0023     		movs	r3, #0
 3694 000a FB60     		str	r3, [r7, #12]
 3695 000c 10E0     		b	.L242
 3696              	.L245:
2382:../../../FreeRTOS/Source/queue.c **** 		{
2383:../../../FreeRTOS/Source/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 3697              		.loc 1 2383 0
 3698 000e 0C4A     		ldr	r2, .L246
 3699 0010 FB68     		ldr	r3, [r7, #12]
 3700 0012 DB00     		lsls	r3, r3, #3
 3701 0014 1344     		add	r3, r3, r2
 3702 0016 5A68     		ldr	r2, [r3, #4]
 3703 0018 7B68     		ldr	r3, [r7, #4]
 3704 001a 9A42     		cmp	r2, r3
 3705 001c 05D1     		bne	.L243
2384:../../../FreeRTOS/Source/queue.c **** 			{
2385:../../../FreeRTOS/Source/queue.c **** 				/* Set the name to NULL to show that this slot if free again. */
2386:../../../FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = NULL;
 3706              		.loc 1 2386 0
 3707 001e 084A     		ldr	r2, .L246
 3708 0020 FB68     		ldr	r3, [r7, #12]
 3709 0022 0021     		movs	r1, #0
 3710 0024 42F83310 		str	r1, [r2, r3, lsl #3]
2387:../../../FreeRTOS/Source/queue.c **** 				break;
 3711              		.loc 1 2387 0
 3712 0028 05E0     		b	.L241
 3713              	.L243:
2381:../../../FreeRTOS/Source/queue.c **** 		{
 3714              		.loc 1 2381 0 discriminator 2
 3715 002a FB68     		ldr	r3, [r7, #12]
 3716 002c 0133     		adds	r3, r3, #1
 3717 002e FB60     		str	r3, [r7, #12]
 3718              	.L242:
ARM GAS  /tmp/cc99qdVQ.s 			page 112


2381:../../../FreeRTOS/Source/queue.c **** 		{
 3719              		.loc 1 2381 0 is_stmt 0 discriminator 1
 3720 0030 FB68     		ldr	r3, [r7, #12]
 3721 0032 072B     		cmp	r3, #7
 3722 0034 EBD9     		bls	.L245
 3723              	.L241:
2388:../../../FreeRTOS/Source/queue.c **** 			}
2389:../../../FreeRTOS/Source/queue.c **** 			else
2390:../../../FreeRTOS/Source/queue.c **** 			{
2391:../../../FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2392:../../../FreeRTOS/Source/queue.c **** 			}
2393:../../../FreeRTOS/Source/queue.c **** 		}
2394:../../../FreeRTOS/Source/queue.c **** 
2395:../../../FreeRTOS/Source/queue.c **** 	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 3724              		.loc 1 2395 0 is_stmt 1
 3725 0036 1437     		adds	r7, r7, #20
 3726              	.LCFI144:
 3727              		.cfi_def_cfa_offset 4
 3728 0038 BD46     		mov	sp, r7
 3729              	.LCFI145:
 3730              		.cfi_def_cfa_register 13
 3731              		@ sp needed
 3732 003a 5DF8047B 		ldr	r7, [sp], #4
 3733              	.LCFI146:
 3734              		.cfi_restore 7
 3735              		.cfi_def_cfa_offset 0
 3736 003e 7047     		bx	lr
 3737              	.L247:
 3738              		.align	2
 3739              	.L246:
 3740 0040 00000000 		.word	xQueueRegistry
 3741              		.cfi_endproc
 3742              	.LFE31:
 3744              		.text
 3745              	.Letext0:
 3746              		.file 3 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h"
 3747              		.file 4 "/usr/arm-none-eabi/include/machine/_default_types.h"
 3748              		.file 5 "/usr/arm-none-eabi/include/sys/_stdint.h"
 3749              		.file 6 "../../../FreeRTOS/Source/include/list.h"
 3750              		.file 7 "../../../FreeRTOS/Source/include/task.h"
 3751              		.file 8 "../../../FreeRTOS/Source/include/queue.h"
ARM GAS  /tmp/cc99qdVQ.s 			page 113


DEFINED SYMBOLS
                            *ABS*:0000000000000000 queue.c
                            *COM*:0000000000000040 xQueueRegistry
     /tmp/cc99qdVQ.s:22     .text.xQueueGenericReset:0000000000000000 $t
     /tmp/cc99qdVQ.s:27     .text.xQueueGenericReset:0000000000000000 xQueueGenericReset
     /tmp/cc99qdVQ.s:173    .text.xQueueGenericReset:00000000000000cc $d
     /tmp/cc99qdVQ.s:178    .text.xQueueGenericCreate:0000000000000000 $t
     /tmp/cc99qdVQ.s:183    .text.xQueueGenericCreate:0000000000000000 xQueueGenericCreate
     /tmp/cc99qdVQ.s:335    .text.xQueueCreateMutex:0000000000000000 $t
     /tmp/cc99qdVQ.s:340    .text.xQueueCreateMutex:0000000000000000 xQueueCreateMutex
     /tmp/cc99qdVQ.s:768    .text.xQueueGenericSend:0000000000000000 xQueueGenericSend
     /tmp/cc99qdVQ.s:440    .text.xQueueGiveMutexRecursive:0000000000000000 $t
     /tmp/cc99qdVQ.s:445    .text.xQueueGiveMutexRecursive:0000000000000000 xQueueGiveMutexRecursive
     /tmp/cc99qdVQ.s:539    .text.xQueueTakeMutexRecursive:0000000000000000 $t
     /tmp/cc99qdVQ.s:544    .text.xQueueTakeMutexRecursive:0000000000000000 xQueueTakeMutexRecursive
     /tmp/cc99qdVQ.s:1666   .text.xQueueGenericReceive:0000000000000000 xQueueGenericReceive
     /tmp/cc99qdVQ.s:641    .text.xQueueCreateCountingSemaphore:0000000000000000 $t
     /tmp/cc99qdVQ.s:646    .text.xQueueCreateCountingSemaphore:0000000000000000 xQueueCreateCountingSemaphore
     /tmp/cc99qdVQ.s:763    .text.xQueueGenericSend:0000000000000000 $t
     /tmp/cc99qdVQ.s:2960   .text.prvCopyDataToQueue:0000000000000000 prvCopyDataToQueue
     /tmp/cc99qdVQ.s:3447   .text.prvIsQueueFull:0000000000000000 prvIsQueueFull
     /tmp/cc99qdVQ.s:3189   .text.prvUnlockQueue:0000000000000000 prvUnlockQueue
     /tmp/cc99qdVQ.s:1160   .text.xQueueGenericSend:0000000000000238 $d
     /tmp/cc99qdVQ.s:1165   .text.xQueueGenericSendFromISR:0000000000000000 $t
     /tmp/cc99qdVQ.s:1170   .text.xQueueGenericSendFromISR:0000000000000000 xQueueGenericSendFromISR
     /tmp/cc99qdVQ.s:1423   .text.xQueueGiveFromISR:0000000000000000 $t
     /tmp/cc99qdVQ.s:1428   .text.xQueueGiveFromISR:0000000000000000 xQueueGiveFromISR
     /tmp/cc99qdVQ.s:1661   .text.xQueueGenericReceive:0000000000000000 $t
     /tmp/cc99qdVQ.s:3117   .text.prvCopyDataFromQueue:0000000000000000 prvCopyDataFromQueue
     /tmp/cc99qdVQ.s:3312   .text.prvIsQueueEmpty:0000000000000000 prvIsQueueEmpty
     /tmp/cc99qdVQ.s:2093   .text.xQueueGenericReceive:0000000000000298 $d
     /tmp/cc99qdVQ.s:2098   .text.xQueueReceiveFromISR:0000000000000000 $t
     /tmp/cc99qdVQ.s:2103   .text.xQueueReceiveFromISR:0000000000000000 xQueueReceiveFromISR
     /tmp/cc99qdVQ.s:2322   .text.xQueuePeekFromISR:0000000000000000 $t
     /tmp/cc99qdVQ.s:2327   .text.xQueuePeekFromISR:0000000000000000 xQueuePeekFromISR
     /tmp/cc99qdVQ.s:2535   .text.uxQueueMessagesWaiting:0000000000000000 $t
     /tmp/cc99qdVQ.s:2540   .text.uxQueueMessagesWaiting:0000000000000000 uxQueueMessagesWaiting
     /tmp/cc99qdVQ.s:2604   .text.uxQueueSpacesAvailable:0000000000000000 $t
     /tmp/cc99qdVQ.s:2609   .text.uxQueueSpacesAvailable:0000000000000000 uxQueueSpacesAvailable
     /tmp/cc99qdVQ.s:2679   .text.uxQueueMessagesWaitingFromISR:0000000000000000 $t
     /tmp/cc99qdVQ.s:2684   .text.uxQueueMessagesWaitingFromISR:0000000000000000 uxQueueMessagesWaitingFromISR
     /tmp/cc99qdVQ.s:2748   .text.vQueueDelete:0000000000000000 $t
     /tmp/cc99qdVQ.s:2753   .text.vQueueDelete:0000000000000000 vQueueDelete
     /tmp/cc99qdVQ.s:3674   .text.vQueueUnregisterQueue:0000000000000000 vQueueUnregisterQueue
     /tmp/cc99qdVQ.s:2823   .text.uxQueueGetQueueNumber:0000000000000000 $t
     /tmp/cc99qdVQ.s:2828   .text.uxQueueGetQueueNumber:0000000000000000 uxQueueGetQueueNumber
     /tmp/cc99qdVQ.s:2867   .text.vQueueSetQueueNumber:0000000000000000 $t
     /tmp/cc99qdVQ.s:2872   .text.vQueueSetQueueNumber:0000000000000000 vQueueSetQueueNumber
     /tmp/cc99qdVQ.s:2912   .text.ucQueueGetQueueType:0000000000000000 $t
     /tmp/cc99qdVQ.s:2917   .text.ucQueueGetQueueType:0000000000000000 ucQueueGetQueueType
     /tmp/cc99qdVQ.s:2956   .text.prvCopyDataToQueue:0000000000000000 $t
     /tmp/cc99qdVQ.s:3113   .text.prvCopyDataFromQueue:0000000000000000 $t
     /tmp/cc99qdVQ.s:3185   .text.prvUnlockQueue:0000000000000000 $t
     /tmp/cc99qdVQ.s:3308   .text.prvIsQueueEmpty:0000000000000000 $t
     /tmp/cc99qdVQ.s:3364   .text.xQueueIsQueueEmptyFromISR:0000000000000000 $t
     /tmp/cc99qdVQ.s:3369   .text.xQueueIsQueueEmptyFromISR:0000000000000000 xQueueIsQueueEmptyFromISR
     /tmp/cc99qdVQ.s:3443   .text.prvIsQueueFull:0000000000000000 $t
ARM GAS  /tmp/cc99qdVQ.s 			page 114


     /tmp/cc99qdVQ.s:3501   .text.xQueueIsQueueFullFromISR:0000000000000000 $t
     /tmp/cc99qdVQ.s:3506   .text.xQueueIsQueueFullFromISR:0000000000000000 xQueueIsQueueFullFromISR
     /tmp/cc99qdVQ.s:3582   .text.vQueueAddToRegistry:0000000000000000 $t
     /tmp/cc99qdVQ.s:3587   .text.vQueueAddToRegistry:0000000000000000 vQueueAddToRegistry
     /tmp/cc99qdVQ.s:3664   .text.vQueueAddToRegistry:000000000000005c $d
     /tmp/cc99qdVQ.s:3669   .text.vQueueUnregisterQueue:0000000000000000 $t
     /tmp/cc99qdVQ.s:3740   .text.vQueueUnregisterQueue:0000000000000040 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
vPortEnterCritical
xTaskRemoveFromEventList
vListInitialise
vPortExitCritical
pvPortMalloc
SEGGER_SYSVIEW_RecordU32x3
xTaskGetCurrentTaskHandle
xTaskGetSchedulerState
SEGGER_SYSVIEW_ShrinkId
SYSVIEW_RecordU32x4
vTaskSetTimeOutState
vTaskSuspendAll
xTaskCheckForTimeOut
vTaskPlaceOnEventList
xTaskResumeAll
vPortValidateInterruptPriority
SEGGER_SYSVIEW_RecordU32x2
pvTaskIncrementMutexHeldCount
vTaskPriorityInherit
SEGGER_SYSVIEW_RecordU32
vPortFree
xTaskPriorityDisinherit
memcpy
vTaskMissedYield
