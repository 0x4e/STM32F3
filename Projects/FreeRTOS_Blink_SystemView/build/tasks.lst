ARM GAS  /tmp/cc7uEwzT.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"tasks.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.global	pxCurrentTCB
  21              		.section	.bss.pxCurrentTCB,"aw",%nobits
  22              		.align	2
  25              	pxCurrentTCB:
  26 0000 00000000 		.space	4
  27              		.section	.bss.pxReadyTasksLists,"aw",%nobits
  28              		.align	2
  31              	pxReadyTasksLists:
  32 0000 00000000 		.space	140
  32      00000000 
  32      00000000 
  32      00000000 
  32      00000000 
  33              		.section	.bss.xDelayedTaskList1,"aw",%nobits
  34              		.align	2
  37              	xDelayedTaskList1:
  38 0000 00000000 		.space	20
  38      00000000 
  38      00000000 
  38      00000000 
  38      00000000 
  39              		.section	.bss.xDelayedTaskList2,"aw",%nobits
  40              		.align	2
  43              	xDelayedTaskList2:
  44 0000 00000000 		.space	20
  44      00000000 
  44      00000000 
  44      00000000 
  44      00000000 
  45              		.section	.bss.pxDelayedTaskList,"aw",%nobits
  46              		.align	2
  49              	pxDelayedTaskList:
  50 0000 00000000 		.space	4
  51              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
  52              		.align	2
  55              	pxOverflowDelayedTaskList:
  56 0000 00000000 		.space	4
  57              		.section	.bss.xPendingReadyList,"aw",%nobits
ARM GAS  /tmp/cc7uEwzT.s 			page 2


  58              		.align	2
  61              	xPendingReadyList:
  62 0000 00000000 		.space	20
  62      00000000 
  62      00000000 
  62      00000000 
  62      00000000 
  63              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
  64              		.align	2
  67              	xTasksWaitingTermination:
  68 0000 00000000 		.space	20
  68      00000000 
  68      00000000 
  68      00000000 
  68      00000000 
  69              		.section	.bss.uxTasksDeleted,"aw",%nobits
  70              		.align	2
  73              	uxTasksDeleted:
  74 0000 00000000 		.space	4
  75              		.section	.bss.xSuspendedTaskList,"aw",%nobits
  76              		.align	2
  79              	xSuspendedTaskList:
  80 0000 00000000 		.space	20
  80      00000000 
  80      00000000 
  80      00000000 
  80      00000000 
  81              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
  82              		.align	2
  85              	uxCurrentNumberOfTasks:
  86 0000 00000000 		.space	4
  87              		.section	.bss.xTickCount,"aw",%nobits
  88              		.align	2
  91              	xTickCount:
  92 0000 00000000 		.space	4
  93              		.section	.bss.uxTopReadyPriority,"aw",%nobits
  94              		.align	2
  97              	uxTopReadyPriority:
  98 0000 00000000 		.space	4
  99              		.section	.bss.xSchedulerRunning,"aw",%nobits
 100              		.align	2
 103              	xSchedulerRunning:
 104 0000 00000000 		.space	4
 105              		.section	.bss.uxPendedTicks,"aw",%nobits
 106              		.align	2
 109              	uxPendedTicks:
 110 0000 00000000 		.space	4
 111              		.section	.bss.xYieldPending,"aw",%nobits
 112              		.align	2
 115              	xYieldPending:
 116 0000 00000000 		.space	4
 117              		.section	.bss.xNumOfOverflows,"aw",%nobits
 118              		.align	2
 121              	xNumOfOverflows:
 122 0000 00000000 		.space	4
 123              		.section	.bss.uxTaskNumber,"aw",%nobits
 124              		.align	2
ARM GAS  /tmp/cc7uEwzT.s 			page 3


 127              	uxTaskNumber:
 128 0000 00000000 		.space	4
 129              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 130              		.align	2
 133              	xNextTaskUnblockTime:
 134 0000 00000000 		.space	4
 135              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 136              		.align	2
 139              	uxSchedulerSuspended:
 140 0000 00000000 		.space	4
 141              		.section	.text.xTaskGenericCreate,"ax",%progbits
 142              		.align	2
 143              		.global	xTaskGenericCreate
 144              		.thumb
 145              		.thumb_func
 147              	xTaskGenericCreate:
 148              	.LFB4:
 149              		.file 1 "../../../FreeRTOS/Source/tasks.c"
   1:../../../FreeRTOS/Source/tasks.c **** /*
   2:../../../FreeRTOS/Source/tasks.c ****     FreeRTOS V8.2.3 - Copyright (C) 2015 Real Time Engineers Ltd.
   3:../../../FreeRTOS/Source/tasks.c ****     All rights reserved
   4:../../../FreeRTOS/Source/tasks.c **** 
   5:../../../FreeRTOS/Source/tasks.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../../../FreeRTOS/Source/tasks.c **** 
   7:../../../FreeRTOS/Source/tasks.c ****     This file is part of the FreeRTOS distribution.
   8:../../../FreeRTOS/Source/tasks.c **** 
   9:../../../FreeRTOS/Source/tasks.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../../../FreeRTOS/Source/tasks.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:../../../FreeRTOS/Source/tasks.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../../../FreeRTOS/Source/tasks.c **** 
  13:../../../FreeRTOS/Source/tasks.c ****     ***************************************************************************
  14:../../../FreeRTOS/Source/tasks.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../../../FreeRTOS/Source/tasks.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../../../FreeRTOS/Source/tasks.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../../../FreeRTOS/Source/tasks.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../../../FreeRTOS/Source/tasks.c ****     ***************************************************************************
  19:../../../FreeRTOS/Source/tasks.c **** 
  20:../../../FreeRTOS/Source/tasks.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../../../FreeRTOS/Source/tasks.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../../../FreeRTOS/Source/tasks.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../../../FreeRTOS/Source/tasks.c ****     link: http://www.freertos.org/a00114.html
  24:../../../FreeRTOS/Source/tasks.c **** 
  25:../../../FreeRTOS/Source/tasks.c ****     ***************************************************************************
  26:../../../FreeRTOS/Source/tasks.c ****      *                                                                       *
  27:../../../FreeRTOS/Source/tasks.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../../../FreeRTOS/Source/tasks.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../../../FreeRTOS/Source/tasks.c ****      *    platform software that is more than just the market leader, it     *
  30:../../../FreeRTOS/Source/tasks.c ****      *    is the industry's de facto standard.                               *
  31:../../../FreeRTOS/Source/tasks.c ****      *                                                                       *
  32:../../../FreeRTOS/Source/tasks.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../../../FreeRTOS/Source/tasks.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../../../FreeRTOS/Source/tasks.c ****      *    tutorial book, reference manual, or both:                          *
  35:../../../FreeRTOS/Source/tasks.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../../../FreeRTOS/Source/tasks.c ****      *                                                                       *
  37:../../../FreeRTOS/Source/tasks.c ****     ***************************************************************************
  38:../../../FreeRTOS/Source/tasks.c **** 
  39:../../../FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
ARM GAS  /tmp/cc7uEwzT.s 			page 4


  40:../../../FreeRTOS/Source/tasks.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../../../FreeRTOS/Source/tasks.c ****     defined configASSERT()?
  42:../../../FreeRTOS/Source/tasks.c **** 
  43:../../../FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../../../FreeRTOS/Source/tasks.c ****     embedded software for free we request you assist our global community by
  45:../../../FreeRTOS/Source/tasks.c ****     participating in the support forum.
  46:../../../FreeRTOS/Source/tasks.c **** 
  47:../../../FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../../../FreeRTOS/Source/tasks.c ****     be as productive as possible as early as possible.  Now you can receive
  49:../../../FreeRTOS/Source/tasks.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../../../FreeRTOS/Source/tasks.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../../../FreeRTOS/Source/tasks.c **** 
  52:../../../FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../../../FreeRTOS/Source/tasks.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../../../FreeRTOS/Source/tasks.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../../../FreeRTOS/Source/tasks.c **** 
  56:../../../FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../../../FreeRTOS/Source/tasks.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../../../FreeRTOS/Source/tasks.c **** 
  59:../../../FreeRTOS/Source/tasks.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../../../FreeRTOS/Source/tasks.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../../../FreeRTOS/Source/tasks.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../../../FreeRTOS/Source/tasks.c **** 
  63:../../../FreeRTOS/Source/tasks.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../../../FreeRTOS/Source/tasks.c ****     engineered and independently SIL3 certified version for use in safety and
  65:../../../FreeRTOS/Source/tasks.c ****     mission critical applications that require provable dependability.
  66:../../../FreeRTOS/Source/tasks.c **** 
  67:../../../FreeRTOS/Source/tasks.c ****     1 tab == 4 spaces!
  68:../../../FreeRTOS/Source/tasks.c **** */
  69:../../../FreeRTOS/Source/tasks.c **** 
  70:../../../FreeRTOS/Source/tasks.c **** /* Standard includes. */
  71:../../../FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  72:../../../FreeRTOS/Source/tasks.c **** #include <string.h>
  73:../../../FreeRTOS/Source/tasks.c **** 
  74:../../../FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  75:../../../FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  76:../../../FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  77:../../../FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  78:../../../FreeRTOS/Source/tasks.c **** 
  79:../../../FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  80:../../../FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  81:../../../FreeRTOS/Source/tasks.c **** #include "task.h"
  82:../../../FreeRTOS/Source/tasks.c **** #include "timers.h"
  83:../../../FreeRTOS/Source/tasks.c **** #include "StackMacros.h"
  84:../../../FreeRTOS/Source/tasks.c **** 
  85:../../../FreeRTOS/Source/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  86:../../../FreeRTOS/Source/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  87:../../../FreeRTOS/Source/tasks.c **** header files above, but not in this file, in order to generate the correct
  88:../../../FreeRTOS/Source/tasks.c **** privileged Vs unprivileged linkage and placement. */
  89:../../../FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  90:../../../FreeRTOS/Source/tasks.c **** 
  91:../../../FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  92:../../../FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  93:../../../FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  94:../../../FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  95:../../../FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  96:../../../FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
ARM GAS  /tmp/cc7uEwzT.s 			page 5


  97:../../../FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  98:../../../FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  99:../../../FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
 100:../../../FreeRTOS/Source/tasks.c **** 
 101:../../../FreeRTOS/Source/tasks.c **** /* Sanity check the configuration. */
 102:../../../FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
 103:../../../FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_vTaskSuspend != 1 )
 104:../../../FreeRTOS/Source/tasks.c **** 		#error INCLUDE_vTaskSuspend must be set to 1 if configUSE_TICKLESS_IDLE is not set to 0
 105:../../../FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
 106:../../../FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
 107:../../../FreeRTOS/Source/tasks.c **** 
 108:../../../FreeRTOS/Source/tasks.c **** /*
 109:../../../FreeRTOS/Source/tasks.c ****  * Defines the size, in words, of the stack allocated to the idle task.
 110:../../../FreeRTOS/Source/tasks.c ****  */
 111:../../../FreeRTOS/Source/tasks.c **** #define tskIDLE_STACK_SIZE	configMINIMAL_STACK_SIZE
 112:../../../FreeRTOS/Source/tasks.c **** 
 113:../../../FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
 114:../../../FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 115:../../../FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
 116:../../../FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
 117:../../../FreeRTOS/Source/tasks.c **** #else
 118:../../../FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 119:../../../FreeRTOS/Source/tasks.c **** #endif
 120:../../../FreeRTOS/Source/tasks.c **** 
 121:../../../FreeRTOS/Source/tasks.c **** /* Value that can be assigned to the eNotifyState member of the TCB. */
 122:../../../FreeRTOS/Source/tasks.c **** typedef enum
 123:../../../FreeRTOS/Source/tasks.c **** {
 124:../../../FreeRTOS/Source/tasks.c **** 	eNotWaitingNotification = 0,
 125:../../../FreeRTOS/Source/tasks.c **** 	eWaitingNotification,
 126:../../../FreeRTOS/Source/tasks.c **** 	eNotified
 127:../../../FreeRTOS/Source/tasks.c **** } eNotifyValue;
 128:../../../FreeRTOS/Source/tasks.c **** 
 129:../../../FreeRTOS/Source/tasks.c **** /*
 130:../../../FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 131:../../../FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 132:../../../FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 133:../../../FreeRTOS/Source/tasks.c ****  */
 134:../../../FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock
 135:../../../FreeRTOS/Source/tasks.c **** {
 136:../../../FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 137:../../../FreeRTOS/Source/tasks.c **** 
 138:../../../FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 139:../../../FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 140:../../../FreeRTOS/Source/tasks.c **** 		BaseType_t		xUsingStaticallyAllocatedStack; /* Set to pdTRUE if the stack is a statically allocat
 141:../../../FreeRTOS/Source/tasks.c **** 	#endif
 142:../../../FreeRTOS/Source/tasks.c **** 
 143:../../../FreeRTOS/Source/tasks.c **** 	ListItem_t			xGenericListItem;	/*< The list that the state list item of a task is reference from d
 144:../../../FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 145:../../../FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 146:../../../FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 147:../../../FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 148:../../../FreeRTOS/Source/tasks.c **** 
 149:../../../FreeRTOS/Source/tasks.c **** 	#if ( portSTACK_GROWTH > 0 )
 150:../../../FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the end of the stack on architectures where the stack 
 151:../../../FreeRTOS/Source/tasks.c **** 	#endif
 152:../../../FreeRTOS/Source/tasks.c **** 
 153:../../../FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
ARM GAS  /tmp/cc7uEwzT.s 			page 6


 154:../../../FreeRTOS/Source/tasks.c **** 		UBaseType_t 	uxCriticalNesting; 	/*< Holds the critical section nesting depth for ports that do n
 155:../../../FreeRTOS/Source/tasks.c **** 	#endif
 156:../../../FreeRTOS/Source/tasks.c **** 
 157:../../../FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 158:../../../FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 159:../../../FreeRTOS/Source/tasks.c **** 		UBaseType_t  	uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. 
 160:../../../FreeRTOS/Source/tasks.c **** 	#endif
 161:../../../FreeRTOS/Source/tasks.c **** 
 162:../../../FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 163:../../../FreeRTOS/Source/tasks.c **** 		UBaseType_t 	uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 164:../../../FreeRTOS/Source/tasks.c **** 		UBaseType_t 	uxMutexesHeld;
 165:../../../FreeRTOS/Source/tasks.c **** 	#endif
 166:../../../FreeRTOS/Source/tasks.c **** 
 167:../../../FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 168:../../../FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 169:../../../FreeRTOS/Source/tasks.c **** 	#endif
 170:../../../FreeRTOS/Source/tasks.c **** 
 171:../../../FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 172:../../../FreeRTOS/Source/tasks.c **** 		void *pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 173:../../../FreeRTOS/Source/tasks.c **** 	#endif
 174:../../../FreeRTOS/Source/tasks.c **** 
 175:../../../FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 176:../../../FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 177:../../../FreeRTOS/Source/tasks.c **** 	#endif
 178:../../../FreeRTOS/Source/tasks.c **** 
 179:../../../FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 180:../../../FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 181:../../../FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 182:../../../FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 183:../../../FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 184:../../../FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 185:../../../FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 186:../../../FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 187:../../../FreeRTOS/Source/tasks.c **** 		struct 	_reent xNewLib_reent;
 188:../../../FreeRTOS/Source/tasks.c **** 	#endif
 189:../../../FreeRTOS/Source/tasks.c **** 
 190:../../../FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 191:../../../FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 192:../../../FreeRTOS/Source/tasks.c **** 		volatile eNotifyValue eNotifyState;
 193:../../../FreeRTOS/Source/tasks.c **** 	#endif
 194:../../../FreeRTOS/Source/tasks.c **** 
 195:../../../FreeRTOS/Source/tasks.c **** } tskTCB;
 196:../../../FreeRTOS/Source/tasks.c **** 
 197:../../../FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 198:../../../FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 199:../../../FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 200:../../../FreeRTOS/Source/tasks.c **** 
 201:../../../FreeRTOS/Source/tasks.c **** /*
 202:../../../FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to to
 203:../../../FreeRTOS/Source/tasks.c ****  * be global, rather than file scope.
 204:../../../FreeRTOS/Source/tasks.c ****  */
 205:../../../FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 206:../../../FreeRTOS/Source/tasks.c **** 	#define static
 207:../../../FreeRTOS/Source/tasks.c **** #endif
 208:../../../FreeRTOS/Source/tasks.c **** 
 209:../../../FreeRTOS/Source/tasks.c **** /*lint -e956 A manual analysis and inspection has been used to determine which
 210:../../../FreeRTOS/Source/tasks.c **** static variables must be declared volatile. */
ARM GAS  /tmp/cc7uEwzT.s 			page 7


 211:../../../FreeRTOS/Source/tasks.c **** 
 212:../../../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 213:../../../FreeRTOS/Source/tasks.c **** 
 214:../../../FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 215:../../../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 216:../../../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 217:../../../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 218:../../../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 219:../../../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 220:../../../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 221:../../../FreeRTOS/Source/tasks.c **** 
 222:../../../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 223:../../../FreeRTOS/Source/tasks.c **** 
 224:../../../FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 225:../../../FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxTasksDeleted = ( UBaseType_t ) 0U;
 226:../../../FreeRTOS/Source/tasks.c **** 
 227:../../../FreeRTOS/Source/tasks.c **** #endif
 228:../../../FreeRTOS/Source/tasks.c **** 
 229:../../../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 230:../../../FreeRTOS/Source/tasks.c **** 
 231:../../../FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 232:../../../FreeRTOS/Source/tasks.c **** 
 233:../../../FreeRTOS/Source/tasks.c **** #endif
 234:../../../FreeRTOS/Source/tasks.c **** 
 235:../../../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
 236:../../../FreeRTOS/Source/tasks.c **** 
 237:../../../FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle = NULL;			/*< Holds the handle of the idle tas
 238:../../../FreeRTOS/Source/tasks.c **** 
 239:../../../FreeRTOS/Source/tasks.c **** #endif
 240:../../../FreeRTOS/Source/tasks.c **** 
 241:../../../FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 242:../../../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 243:../../../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) 0U;
 244:../../../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 245:../../../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 246:../../../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 247:../../../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 248:../../../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 249:../../../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 250:../../../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 251:../../../FreeRTOS/Source/tasks.c **** 
 252:../../../FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 253:../../../FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xGenericListItem of a TCB, or any of the
 254:../../../FreeRTOS/Source/tasks.c **** lists the xGenericListItem can be referenced from, if the scheduler is suspended.
 255:../../../FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 256:../../../FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 257:../../../FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 258:../../../FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 259:../../../FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 260:../../../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 261:../../../FreeRTOS/Source/tasks.c **** 
 262:../../../FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 263:../../../FreeRTOS/Source/tasks.c **** 
 264:../../../FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 265:../../../FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 266:../../../FreeRTOS/Source/tasks.c **** 
 267:../../../FreeRTOS/Source/tasks.c **** #endif
ARM GAS  /tmp/cc7uEwzT.s 			page 8


 268:../../../FreeRTOS/Source/tasks.c **** 
 269:../../../FreeRTOS/Source/tasks.c **** /*lint +e956 */
 270:../../../FreeRTOS/Source/tasks.c **** 
 271:../../../FreeRTOS/Source/tasks.c **** /* Debugging and trace facilities private variables and macros. ------------*/
 272:../../../FreeRTOS/Source/tasks.c **** 
 273:../../../FreeRTOS/Source/tasks.c **** /*
 274:../../../FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
 275:../../../FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
 276:../../../FreeRTOS/Source/tasks.c ****  */
 277:../../../FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
 278:../../../FreeRTOS/Source/tasks.c **** 
 279:../../../FreeRTOS/Source/tasks.c **** /*
 280:../../../FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 281:../../../FreeRTOS/Source/tasks.c ****  */
 282:../../../FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 283:../../../FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
 284:../../../FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 285:../../../FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 286:../../../FreeRTOS/Source/tasks.c **** 
 287:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 288:../../../FreeRTOS/Source/tasks.c **** 
 289:../../../FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 290:../../../FreeRTOS/Source/tasks.c **** 
 291:../../../FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 292:../../../FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 293:../../../FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 294:../../../FreeRTOS/Source/tasks.c **** 
 295:../../../FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 296:../../../FreeRTOS/Source/tasks.c **** 	state task. */
 297:../../../FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 298:../../../FreeRTOS/Source/tasks.c **** 	{																									\
 299:../../../FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 300:../../../FreeRTOS/Source/tasks.c **** 		{																								\
 301:../../../FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 302:../../../FreeRTOS/Source/tasks.c **** 		}																								\
 303:../../../FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 304:../../../FreeRTOS/Source/tasks.c **** 
 305:../../../FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 306:../../../FreeRTOS/Source/tasks.c **** 
 307:../../../FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 308:../../../FreeRTOS/Source/tasks.c **** 	{																									\
 309:../../../FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 310:../../../FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )						\
 311:../../../FreeRTOS/Source/tasks.c **** 		{																								\
 312:../../../FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopReadyPriority );															\
 313:../../../FreeRTOS/Source/tasks.c **** 			--uxTopReadyPriority;																		\
 314:../../../FreeRTOS/Source/tasks.c **** 		}																								\
 315:../../../FreeRTOS/Source/tasks.c **** 																										\
 316:../../../FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 317:../../../FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 318:../../../FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );		\
 319:../../../FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 320:../../../FreeRTOS/Source/tasks.c **** 
 321:../../../FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 322:../../../FreeRTOS/Source/tasks.c **** 
 323:../../../FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 324:../../../FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
ARM GAS  /tmp/cc7uEwzT.s 			page 9


 325:../../../FreeRTOS/Source/tasks.c **** 	being used. */
 326:../../../FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 327:../../../FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 328:../../../FreeRTOS/Source/tasks.c **** 
 329:../../../FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 330:../../../FreeRTOS/Source/tasks.c **** 
 331:../../../FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 332:../../../FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 333:../../../FreeRTOS/Source/tasks.c **** 	architecture being used. */
 334:../../../FreeRTOS/Source/tasks.c **** 
 335:../../../FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 336:../../../FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 337:../../../FreeRTOS/Source/tasks.c **** 
 338:../../../FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 339:../../../FreeRTOS/Source/tasks.c **** 
 340:../../../FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 341:../../../FreeRTOS/Source/tasks.c **** 	{																								\
 342:../../../FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 343:../../../FreeRTOS/Source/tasks.c **** 																									\
 344:../../../FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */							\
 345:../../../FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 346:../../../FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 347:../../../FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 348:../../../FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 349:../../../FreeRTOS/Source/tasks.c **** 
 350:../../../FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 351:../../../FreeRTOS/Source/tasks.c **** 
 352:../../../FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 353:../../../FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 354:../../../FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 355:../../../FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 356:../../../FreeRTOS/Source/tasks.c **** 	{																									\
 357:../../../FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 358:../../../FreeRTOS/Source/tasks.c **** 		{																								\
 359:../../../FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 360:../../../FreeRTOS/Source/tasks.c **** 		}																								\
 361:../../../FreeRTOS/Source/tasks.c **** 	}
 362:../../../FreeRTOS/Source/tasks.c **** 
 363:../../../FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 364:../../../FreeRTOS/Source/tasks.c **** 
 365:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 366:../../../FreeRTOS/Source/tasks.c **** 
 367:../../../FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 368:../../../FreeRTOS/Source/tasks.c **** count overflows. */
 369:../../../FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 370:../../../FreeRTOS/Source/tasks.c **** {																									\
 371:../../../FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 372:../../../FreeRTOS/Source/tasks.c **** 																									\
 373:../../../FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 374:../../../FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 375:../../../FreeRTOS/Source/tasks.c **** 																									\
 376:../../../FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 377:../../../FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 378:../../../FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 379:../../../FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 380:../../../FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 381:../../../FreeRTOS/Source/tasks.c **** }
ARM GAS  /tmp/cc7uEwzT.s 			page 10


 382:../../../FreeRTOS/Source/tasks.c **** 
 383:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 384:../../../FreeRTOS/Source/tasks.c **** 
 385:../../../FreeRTOS/Source/tasks.c **** /*
 386:../../../FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 387:../../../FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 388:../../../FreeRTOS/Source/tasks.c ****  */
 389:../../../FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 390:../../../FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 391:../../../FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 392:../../../FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xGenericListItem ) 
 393:../../../FreeRTOS/Source/tasks.c **** 
 394:../../../FreeRTOS/Source/tasks.c **** /*
 395:../../../FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB which has been in a ready list before
 396:../../../FreeRTOS/Source/tasks.c ****  * into the appropriate ready list for the task.
 397:../../../FreeRTOS/Source/tasks.c ****  * It is inserted at the end of the list.
 398:../../../FreeRTOS/Source/tasks.c ****  */
 399:../../../FreeRTOS/Source/tasks.c **** #define prvReaddTaskToReadyList( pxTCB )																\
 400:../../../FreeRTOS/Source/tasks.c **** 	traceREADDED_TASK_TO_READY_STATE( pxTCB );														\
 401:../../../FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 402:../../../FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xGenericListItem ) 
 403:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 404:../../../FreeRTOS/Source/tasks.c **** 
 405:../../../FreeRTOS/Source/tasks.c **** /*
 406:../../../FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 407:../../../FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 408:../../../FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 409:../../../FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 410:../../../FreeRTOS/Source/tasks.c ****  */
 411:../../../FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 412:../../../FreeRTOS/Source/tasks.c **** 
 413:../../../FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 414:../../../FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 415:../../../FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 416:../../../FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 417:../../../FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 418:../../../FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 419:../../../FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 420:../../../FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 421:../../../FreeRTOS/Source/tasks.c **** #if configUSE_16_BIT_TICKS == 1
 422:../../../FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 423:../../../FreeRTOS/Source/tasks.c **** #else
 424:../../../FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 425:../../../FreeRTOS/Source/tasks.c **** #endif
 426:../../../FreeRTOS/Source/tasks.c **** 
 427:../../../FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 428:../../../FreeRTOS/Source/tasks.c **** #if configCHECK_FOR_STACK_OVERFLOW > 0
 429:../../../FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 430:../../../FreeRTOS/Source/tasks.c **** #endif
 431:../../../FreeRTOS/Source/tasks.c **** 
 432:../../../FreeRTOS/Source/tasks.c **** #if configUSE_TICK_HOOK > 0
 433:../../../FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void );
 434:../../../FreeRTOS/Source/tasks.c **** #endif
 435:../../../FreeRTOS/Source/tasks.c **** 
 436:../../../FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 437:../../../FreeRTOS/Source/tasks.c **** 
 438:../../../FreeRTOS/Source/tasks.c **** /*
ARM GAS  /tmp/cc7uEwzT.s 			page 11


 439:../../../FreeRTOS/Source/tasks.c ****  * Utility to ready a TCB for a given task.  Mainly just copies the parameters
 440:../../../FreeRTOS/Source/tasks.c ****  * into the TCB structure.
 441:../../../FreeRTOS/Source/tasks.c ****  */
 442:../../../FreeRTOS/Source/tasks.c **** static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t 
 443:../../../FreeRTOS/Source/tasks.c **** 
 444:../../../FreeRTOS/Source/tasks.c **** /**
 445:../../../FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 446:../../../FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 447:../../../FreeRTOS/Source/tasks.c ****  * is in any other state.
 448:../../../FreeRTOS/Source/tasks.c ****  */
 449:../../../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 450:../../../FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 451:../../../FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 452:../../../FreeRTOS/Source/tasks.c **** 
 453:../../../FreeRTOS/Source/tasks.c **** /*
 454:../../../FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 455:../../../FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 456:../../../FreeRTOS/Source/tasks.c ****  */
 457:../../../FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 458:../../../FreeRTOS/Source/tasks.c **** 
 459:../../../FreeRTOS/Source/tasks.c **** /*
 460:../../../FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 461:../../../FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 462:../../../FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 463:../../../FreeRTOS/Source/tasks.c ****  *
 464:../../../FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 465:../../../FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 466:../../../FreeRTOS/Source/tasks.c ****  *
 467:../../../FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 468:../../../FreeRTOS/Source/tasks.c ****  *
 469:../../../FreeRTOS/Source/tasks.c ****  */
 470:../../../FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 471:../../../FreeRTOS/Source/tasks.c **** 
 472:../../../FreeRTOS/Source/tasks.c **** /*
 473:../../../FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 474:../../../FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 475:../../../FreeRTOS/Source/tasks.c ****  *
 476:../../../FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 477:../../../FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 478:../../../FreeRTOS/Source/tasks.c ****  */
 479:../../../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 480:../../../FreeRTOS/Source/tasks.c **** 
 481:../../../FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 482:../../../FreeRTOS/Source/tasks.c **** 
 483:../../../FreeRTOS/Source/tasks.c **** #endif
 484:../../../FreeRTOS/Source/tasks.c **** 
 485:../../../FreeRTOS/Source/tasks.c **** /*
 486:../../../FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 487:../../../FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 488:../../../FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 489:../../../FreeRTOS/Source/tasks.c ****  */
 490:../../../FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 491:../../../FreeRTOS/Source/tasks.c **** 
 492:../../../FreeRTOS/Source/tasks.c **** /*
 493:../../../FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 494:../../../FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 495:../../../FreeRTOS/Source/tasks.c ****  */
ARM GAS  /tmp/cc7uEwzT.s 			page 12


 496:../../../FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake ) PRIVILEGED_FUNCTION;
 497:../../../FreeRTOS/Source/tasks.c **** 
 498:../../../FreeRTOS/Source/tasks.c **** /*
 499:../../../FreeRTOS/Source/tasks.c ****  * Allocates memory from the heap for a TCB and associated stack.  Checks the
 500:../../../FreeRTOS/Source/tasks.c ****  * allocation was successful.
 501:../../../FreeRTOS/Source/tasks.c ****  */
 502:../../../FreeRTOS/Source/tasks.c **** static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuff
 503:../../../FreeRTOS/Source/tasks.c **** 
 504:../../../FreeRTOS/Source/tasks.c **** /*
 505:../../../FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 506:../../../FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 507:../../../FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 508:../../../FreeRTOS/Source/tasks.c ****  *
 509:../../../FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 510:../../../FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 511:../../../FreeRTOS/Source/tasks.c ****  */
 512:../../../FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 513:../../../FreeRTOS/Source/tasks.c **** 
 514:../../../FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, e
 515:../../../FreeRTOS/Source/tasks.c **** 
 516:../../../FreeRTOS/Source/tasks.c **** #endif
 517:../../../FreeRTOS/Source/tasks.c **** 
 518:../../../FreeRTOS/Source/tasks.c **** /*
 519:../../../FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 520:../../../FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 521:../../../FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 522:../../../FreeRTOS/Source/tasks.c ****  */
 523:../../../FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 524:../../../FreeRTOS/Source/tasks.c **** 
 525:../../../FreeRTOS/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
 526:../../../FreeRTOS/Source/tasks.c **** 
 527:../../../FreeRTOS/Source/tasks.c **** #endif
 528:../../../FreeRTOS/Source/tasks.c **** 
 529:../../../FreeRTOS/Source/tasks.c **** /*
 530:../../../FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 531:../../../FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 532:../../../FreeRTOS/Source/tasks.c ****  *
 533:../../../FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 534:../../../FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 535:../../../FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 536:../../../FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 537:../../../FreeRTOS/Source/tasks.c ****  */
 538:../../../FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 539:../../../FreeRTOS/Source/tasks.c **** 
 540:../../../FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 541:../../../FreeRTOS/Source/tasks.c **** 
 542:../../../FreeRTOS/Source/tasks.c **** #endif
 543:../../../FreeRTOS/Source/tasks.c **** 
 544:../../../FreeRTOS/Source/tasks.c **** /*
 545:../../../FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 546:../../../FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 547:../../../FreeRTOS/Source/tasks.c ****  */
 548:../../../FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 549:../../../FreeRTOS/Source/tasks.c **** 
 550:../../../FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 551:../../../FreeRTOS/Source/tasks.c **** 
 552:../../../FreeRTOS/Source/tasks.c **** 	/*
ARM GAS  /tmp/cc7uEwzT.s 			page 13


 553:../../../FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 554:../../../FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 555:../../../FreeRTOS/Source/tasks.c **** 	 */
 556:../../../FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName );
 557:../../../FreeRTOS/Source/tasks.c **** 
 558:../../../FreeRTOS/Source/tasks.c **** #endif
 559:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 560:../../../FreeRTOS/Source/tasks.c **** 
 561:../../../FreeRTOS/Source/tasks.c **** BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t
 562:../../../FreeRTOS/Source/tasks.c **** {
 150              		.loc 1 562 0
 151              		.cfi_startproc
 152              		@ args = 16, pretend = 0, frame = 40
 153              		@ frame_needed = 1, uses_anonymous_args = 0
 154 0000 B0B5     		push	{r4, r5, r7, lr}
 155              	.LCFI0:
 156              		.cfi_def_cfa_offset 16
 157              		.cfi_offset 4, -16
 158              		.cfi_offset 5, -12
 159              		.cfi_offset 7, -8
 160              		.cfi_offset 14, -4
 161 0002 8CB0     		sub	sp, sp, #48
 162              	.LCFI1:
 163              		.cfi_def_cfa_offset 64
 164 0004 02AF     		add	r7, sp, #8
 165              	.LCFI2:
 166              		.cfi_def_cfa 7, 56
 167 0006 F860     		str	r0, [r7, #12]
 168 0008 B960     		str	r1, [r7, #8]
 169 000a 3B60     		str	r3, [r7]
 170 000c 1346     		mov	r3, r2	@ movhi
 171 000e FB80     		strh	r3, [r7, #6]	@ movhi
 563:../../../FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 564:../../../FreeRTOS/Source/tasks.c **** TCB_t * pxNewTCB;
 565:../../../FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 566:../../../FreeRTOS/Source/tasks.c **** 
 567:../../../FreeRTOS/Source/tasks.c **** 	configASSERT( pxTaskCode );
 172              		.loc 1 567 0
 173 0010 FB68     		ldr	r3, [r7, #12]
 174 0012 002B     		cmp	r3, #0
 175 0014 09D1     		bne	.L2
 176              	.LBB91:
 177              	.LBB92:
 178              		.file 2 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS V8.2.3 - Copyright (C) 2015 Real Time Engineers Ltd.
   3:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     All rights reserved
   4:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   5:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   7:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   9:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  13:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
ARM GAS  /tmp/cc7uEwzT.s 			page 14


  14:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  19:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  20:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  25:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  26:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  27:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  32:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  37:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  38:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  39:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     defined configASSERT()?
  42:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  43:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     embedded software for free we request you assist our global community by
  45:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     participating in the support forum.
  46:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  47:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  52:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  56:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  63:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     mission critical applications that require provable dependability.
  66:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  67:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     1 tab == 4 spaces!
  68:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** */
  69:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  70:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /tmp/cc7uEwzT.s 			page 15


  71:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  72:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  73:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  74:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  75:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  76:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  77:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  79:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  80:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  81:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  83:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  84:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  85:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  86:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  87:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  88:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  89:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  90:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  91:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  92:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  93:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  94:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  96:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  97:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  99:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
 100:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 101:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
 103:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
 105:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
 106:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
 110:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 112:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 113:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 114:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
 115:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 119:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 120:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
 121:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
 122:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
 123:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
 126:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
ARM GAS  /tmp/cc7uEwzT.s 			page 16


 128:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
 130:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 131:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 132:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) { if( xSwitchRequired != pdFALSE ) { traceISR_EXIT
 135:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 137:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
 139:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
 140:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
 141:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 148:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 149:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 153:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 156:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 157:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 158:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 162:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 163:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 164:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 165:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 171:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 172:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 174:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 175:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 176:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 178:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 179:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 180:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 181:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 184:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /tmp/cc7uEwzT.s 			page 17


 185:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31 - ucPort
 192:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 193:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 196:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 197:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 198:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 201:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 202:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 203:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 204:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 206:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 207:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 208:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 209:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 210:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 212:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 213:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 214:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 215:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 179              		.loc 2 215 0 discriminator 1
 180              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 181 0016 4FF05003 			mov r3, #80												
 182 001a 83F31188 		msr basepri, r3											
 183 001e BFF36F8F 		isb														
 184 0022 BFF34F8F 		dsb														
 185              	
 186              	@ 0 "" 2
 187              		.thumb
 188 0026 BB61     		str	r3, [r7, #24]
 189              	.L3:
 190              	.LBE92:
 191              	.LBE91:
 192              		.loc 1 567 0 discriminator 1
 193 0028 FEE7     		b	.L3
 194              	.L2:
 568:../../../FreeRTOS/Source/tasks.c **** 	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMA
 195              		.loc 1 568 0
 196 002a BB6B     		ldr	r3, [r7, #56]
 197 002c 062B     		cmp	r3, #6
 198 002e 09D9     		bls	.L4
 199              	.LBB93:
 200              	.LBB94:
 201              		.loc 2 215 0 discriminator 1
 202              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 203 0030 4FF05003 			mov r3, #80												
ARM GAS  /tmp/cc7uEwzT.s 			page 18


 204 0034 83F31188 		msr basepri, r3											
 205 0038 BFF36F8F 		isb														
 206 003c BFF34F8F 		dsb														
 207              	
 208              	@ 0 "" 2
 209              		.thumb
 210 0040 7B61     		str	r3, [r7, #20]
 211              	.L5:
 212              	.LBE94:
 213              	.LBE93:
 214              		.loc 1 568 0 discriminator 2
 215 0042 FEE7     		b	.L5
 216              	.L4:
 569:../../../FreeRTOS/Source/tasks.c **** 
 570:../../../FreeRTOS/Source/tasks.c **** 	/* Allocate the memory required by the TCB and stack for the new task,
 571:../../../FreeRTOS/Source/tasks.c **** 	checking that the allocation was successful. */
 572:../../../FreeRTOS/Source/tasks.c **** 	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 217              		.loc 1 572 0
 218 0044 FB88     		ldrh	r3, [r7, #6]
 219 0046 1846     		mov	r0, r3
 220 0048 396C     		ldr	r1, [r7, #64]
 221 004a FFF7FEFF 		bl	prvAllocateTCBAndStack
 222 004e 3862     		str	r0, [r7, #32]
 573:../../../FreeRTOS/Source/tasks.c **** 
 574:../../../FreeRTOS/Source/tasks.c **** 	if( pxNewTCB != NULL )
 223              		.loc 1 574 0
 224 0050 3B6A     		ldr	r3, [r7, #32]
 225 0052 002B     		cmp	r3, #0
 226 0054 00F09980 		beq	.L6
 575:../../../FreeRTOS/Source/tasks.c **** 	{
 576:../../../FreeRTOS/Source/tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
 577:../../../FreeRTOS/Source/tasks.c **** 			/* Should the task be created in privileged mode? */
 578:../../../FreeRTOS/Source/tasks.c **** 			BaseType_t xRunPrivileged;
 579:../../../FreeRTOS/Source/tasks.c **** 			if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 580:../../../FreeRTOS/Source/tasks.c **** 			{
 581:../../../FreeRTOS/Source/tasks.c **** 				xRunPrivileged = pdTRUE;
 582:../../../FreeRTOS/Source/tasks.c **** 			}
 583:../../../FreeRTOS/Source/tasks.c **** 			else
 584:../../../FreeRTOS/Source/tasks.c **** 			{
 585:../../../FreeRTOS/Source/tasks.c **** 				xRunPrivileged = pdFALSE;
 586:../../../FreeRTOS/Source/tasks.c **** 			}
 587:../../../FreeRTOS/Source/tasks.c **** 			uxPriority &= ~portPRIVILEGE_BIT;
 588:../../../FreeRTOS/Source/tasks.c **** 
 589:../../../FreeRTOS/Source/tasks.c **** 			if( puxStackBuffer != NULL )
 590:../../../FreeRTOS/Source/tasks.c **** 			{
 591:../../../FreeRTOS/Source/tasks.c **** 				/* The application provided its own stack.  Note this so no
 592:../../../FreeRTOS/Source/tasks.c **** 				attempt is made to delete the stack should that task be
 593:../../../FreeRTOS/Source/tasks.c **** 				deleted. */
 594:../../../FreeRTOS/Source/tasks.c **** 				pxNewTCB->xUsingStaticallyAllocatedStack = pdTRUE;
 595:../../../FreeRTOS/Source/tasks.c **** 			}
 596:../../../FreeRTOS/Source/tasks.c **** 			else
 597:../../../FreeRTOS/Source/tasks.c **** 			{
 598:../../../FreeRTOS/Source/tasks.c **** 				/* The stack was allocated dynamically.  Note this so it can be
 599:../../../FreeRTOS/Source/tasks.c **** 				deleted again if the task is deleted. */
 600:../../../FreeRTOS/Source/tasks.c **** 				pxNewTCB->xUsingStaticallyAllocatedStack = pdFALSE;
 601:../../../FreeRTOS/Source/tasks.c **** 			}
 602:../../../FreeRTOS/Source/tasks.c **** 		#endif /* portUSING_MPU_WRAPPERS == 1 */
ARM GAS  /tmp/cc7uEwzT.s 			page 19


 603:../../../FreeRTOS/Source/tasks.c **** 
 604:../../../FreeRTOS/Source/tasks.c **** 		/* Calculate the top of stack address.  This depends on whether the
 605:../../../FreeRTOS/Source/tasks.c **** 		stack grows from high memory to low (as per the 80x86) or vice versa.
 606:../../../FreeRTOS/Source/tasks.c **** 		portSTACK_GROWTH is used to make the result positive or negative as
 607:../../../FreeRTOS/Source/tasks.c **** 		required by the port. */
 608:../../../FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH < 0 )
 609:../../../FreeRTOS/Source/tasks.c **** 		{
 610:../../../FreeRTOS/Source/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 227              		.loc 1 610 0
 228 0058 3B6A     		ldr	r3, [r7, #32]
 229 005a 1A6B     		ldr	r2, [r3, #48]
 230 005c FB88     		ldrh	r3, [r7, #6]
 231 005e 03F18043 		add	r3, r3, #1073741824
 232 0062 013B     		subs	r3, r3, #1
 233 0064 9B00     		lsls	r3, r3, #2
 234 0066 1344     		add	r3, r3, r2
 235 0068 FB61     		str	r3, [r7, #28]
 611:../../../FreeRTOS/Source/tasks.c **** 			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINT
 236              		.loc 1 611 0
 237 006a FB69     		ldr	r3, [r7, #28]
 238 006c 23F00703 		bic	r3, r3, #7
 239 0070 FB61     		str	r3, [r7, #28]
 612:../../../FreeRTOS/Source/tasks.c **** 
 613:../../../FreeRTOS/Source/tasks.c **** 			/* Check the alignment of the calculated top of stack is correct. */
 614:../../../FreeRTOS/Source/tasks.c **** 			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_AL
 240              		.loc 1 614 0
 241 0072 FB69     		ldr	r3, [r7, #28]
 242 0074 03F00703 		and	r3, r3, #7
 243 0078 002B     		cmp	r3, #0
 244 007a 09D0     		beq	.L7
 245              	.LBB95:
 246              	.LBB96:
 247              		.loc 2 215 0 discriminator 1
 248              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 249 007c 4FF05003 			mov r3, #80												
 250 0080 83F31188 		msr basepri, r3											
 251 0084 BFF36F8F 		isb														
 252 0088 BFF34F8F 		dsb														
 253              	
 254              	@ 0 "" 2
 255              		.thumb
 256 008c 3B61     		str	r3, [r7, #16]
 257              	.L8:
 258              	.LBE96:
 259              	.LBE95:
 260              		.loc 1 614 0 discriminator 3
 261 008e FEE7     		b	.L8
 262              	.L7:
 615:../../../FreeRTOS/Source/tasks.c **** 		}
 616:../../../FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 617:../../../FreeRTOS/Source/tasks.c **** 		{
 618:../../../FreeRTOS/Source/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack;
 619:../../../FreeRTOS/Source/tasks.c **** 
 620:../../../FreeRTOS/Source/tasks.c **** 			/* Check the alignment of the stack buffer is correct. */
 621:../../../FreeRTOS/Source/tasks.c **** 			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBY
 622:../../../FreeRTOS/Source/tasks.c **** 
 623:../../../FreeRTOS/Source/tasks.c **** 			/* If we want to use stack checking on architectures that use
ARM GAS  /tmp/cc7uEwzT.s 			page 20


 624:../../../FreeRTOS/Source/tasks.c **** 			a positive stack growth direction then we also need to store the
 625:../../../FreeRTOS/Source/tasks.c **** 			other extreme of the stack space. */
 626:../../../FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
 627:../../../FreeRTOS/Source/tasks.c **** 		}
 628:../../../FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 629:../../../FreeRTOS/Source/tasks.c **** 
 630:../../../FreeRTOS/Source/tasks.c **** 		/* Setup the newly allocated TCB with the initial state of the task. */
 631:../../../FreeRTOS/Source/tasks.c **** 		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 263              		.loc 1 631 0
 264 0090 FB88     		ldrh	r3, [r7, #6]
 265 0092 0093     		str	r3, [sp]
 266 0094 386A     		ldr	r0, [r7, #32]
 267 0096 B968     		ldr	r1, [r7, #8]
 268 0098 BA6B     		ldr	r2, [r7, #56]
 269 009a 7B6C     		ldr	r3, [r7, #68]
 270 009c FFF7FEFF 		bl	prvInitialiseTCBVariables
 632:../../../FreeRTOS/Source/tasks.c **** 
 633:../../../FreeRTOS/Source/tasks.c **** 		/* Initialize the TCB stack to look as if the task was already running,
 634:../../../FreeRTOS/Source/tasks.c **** 		but had been interrupted by the scheduler.  The return address is set
 635:../../../FreeRTOS/Source/tasks.c **** 		to the start of the task function. Once the stack has been initialised
 636:../../../FreeRTOS/Source/tasks.c **** 		the	top of stack variable is updated. */
 637:../../../FreeRTOS/Source/tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
 638:../../../FreeRTOS/Source/tasks.c **** 		{
 639:../../../FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
 640:../../../FreeRTOS/Source/tasks.c **** 		}
 641:../../../FreeRTOS/Source/tasks.c **** 		#else /* portUSING_MPU_WRAPPERS */
 642:../../../FreeRTOS/Source/tasks.c **** 		{
 643:../../../FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 271              		.loc 1 643 0
 272 00a0 F869     		ldr	r0, [r7, #28]
 273 00a2 F968     		ldr	r1, [r7, #12]
 274 00a4 3A68     		ldr	r2, [r7]
 275 00a6 FFF7FEFF 		bl	pxPortInitialiseStack
 276 00aa 0246     		mov	r2, r0
 277 00ac 3B6A     		ldr	r3, [r7, #32]
 278 00ae 1A60     		str	r2, [r3]
 644:../../../FreeRTOS/Source/tasks.c **** 		}
 645:../../../FreeRTOS/Source/tasks.c **** 		#endif /* portUSING_MPU_WRAPPERS */
 646:../../../FreeRTOS/Source/tasks.c **** 
 647:../../../FreeRTOS/Source/tasks.c **** 		if( ( void * ) pxCreatedTask != NULL )
 279              		.loc 1 647 0
 280 00b0 FB6B     		ldr	r3, [r7, #60]
 281 00b2 002B     		cmp	r3, #0
 282 00b4 02D0     		beq	.L9
 648:../../../FreeRTOS/Source/tasks.c **** 		{
 649:../../../FreeRTOS/Source/tasks.c **** 			/* Pass the TCB out - in an anonymous way.  The calling function/
 650:../../../FreeRTOS/Source/tasks.c **** 			task can use this as a handle to delete the task later if
 651:../../../FreeRTOS/Source/tasks.c **** 			required.*/
 652:../../../FreeRTOS/Source/tasks.c **** 			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 283              		.loc 1 652 0
 284 00b6 FB6B     		ldr	r3, [r7, #60]
 285 00b8 3A6A     		ldr	r2, [r7, #32]
 286 00ba 1A60     		str	r2, [r3]
 287              	.L9:
 653:../../../FreeRTOS/Source/tasks.c **** 		}
 654:../../../FreeRTOS/Source/tasks.c **** 		else
 655:../../../FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/cc7uEwzT.s 			page 21


 656:../../../FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 657:../../../FreeRTOS/Source/tasks.c **** 		}
 658:../../../FreeRTOS/Source/tasks.c **** 
 659:../../../FreeRTOS/Source/tasks.c **** 		/* Ensure interrupts don't access the task lists while they are being
 660:../../../FreeRTOS/Source/tasks.c **** 		updated. */
 661:../../../FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 288              		.loc 1 661 0
 289 00bc FFF7FEFF 		bl	vPortEnterCritical
 662:../../../FreeRTOS/Source/tasks.c **** 		{
 663:../../../FreeRTOS/Source/tasks.c **** 			uxCurrentNumberOfTasks++;
 290              		.loc 1 663 0
 291 00c0 404B     		ldr	r3, .L16
 292 00c2 1B68     		ldr	r3, [r3]
 293 00c4 0133     		adds	r3, r3, #1
 294 00c6 3F4A     		ldr	r2, .L16
 295 00c8 1360     		str	r3, [r2]
 664:../../../FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB == NULL )
 296              		.loc 1 664 0
 297 00ca 3F4B     		ldr	r3, .L16+4
 298 00cc 1B68     		ldr	r3, [r3]
 299 00ce 002B     		cmp	r3, #0
 300 00d0 09D1     		bne	.L10
 665:../../../FreeRTOS/Source/tasks.c **** 			{
 666:../../../FreeRTOS/Source/tasks.c **** 				/* There are no other tasks, or all the other tasks are in
 667:../../../FreeRTOS/Source/tasks.c **** 				the suspended state - make this the current task. */
 668:../../../FreeRTOS/Source/tasks.c **** 				pxCurrentTCB =  pxNewTCB;
 301              		.loc 1 668 0
 302 00d2 3D4A     		ldr	r2, .L16+4
 303 00d4 3B6A     		ldr	r3, [r7, #32]
 304 00d6 1360     		str	r3, [r2]
 669:../../../FreeRTOS/Source/tasks.c **** 
 670:../../../FreeRTOS/Source/tasks.c **** 				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 305              		.loc 1 670 0
 306 00d8 3A4B     		ldr	r3, .L16
 307 00da 1B68     		ldr	r3, [r3]
 308 00dc 012B     		cmp	r3, #1
 309 00de 0FD1     		bne	.L11
 671:../../../FreeRTOS/Source/tasks.c **** 				{
 672:../../../FreeRTOS/Source/tasks.c **** 					/* This is the first task to be created so do the preliminary
 673:../../../FreeRTOS/Source/tasks.c **** 					initialisation required.  We will not recover if this call
 674:../../../FreeRTOS/Source/tasks.c **** 					fails, but we will report the failure. */
 675:../../../FreeRTOS/Source/tasks.c **** 					prvInitialiseTaskLists();
 310              		.loc 1 675 0
 311 00e0 FFF7FEFF 		bl	prvInitialiseTaskLists
 312 00e4 0CE0     		b	.L11
 313              	.L10:
 676:../../../FreeRTOS/Source/tasks.c **** 				}
 677:../../../FreeRTOS/Source/tasks.c **** 				else
 678:../../../FreeRTOS/Source/tasks.c **** 				{
 679:../../../FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 680:../../../FreeRTOS/Source/tasks.c **** 				}
 681:../../../FreeRTOS/Source/tasks.c **** 			}
 682:../../../FreeRTOS/Source/tasks.c **** 			else
 683:../../../FreeRTOS/Source/tasks.c **** 			{
 684:../../../FreeRTOS/Source/tasks.c **** 				/* If the scheduler is not already running, make this task the
 685:../../../FreeRTOS/Source/tasks.c **** 				current task if it is the highest priority task to be created
 686:../../../FreeRTOS/Source/tasks.c **** 				so far. */
ARM GAS  /tmp/cc7uEwzT.s 			page 22


 687:../../../FreeRTOS/Source/tasks.c **** 				if( xSchedulerRunning == pdFALSE )
 314              		.loc 1 687 0
 315 00e6 394B     		ldr	r3, .L16+8
 316 00e8 1B68     		ldr	r3, [r3]
 317 00ea 002B     		cmp	r3, #0
 318 00ec 08D1     		bne	.L11
 688:../../../FreeRTOS/Source/tasks.c **** 				{
 689:../../../FreeRTOS/Source/tasks.c **** 					if( pxCurrentTCB->uxPriority <= uxPriority )
 319              		.loc 1 689 0
 320 00ee 364B     		ldr	r3, .L16+4
 321 00f0 1B68     		ldr	r3, [r3]
 322 00f2 DA6A     		ldr	r2, [r3, #44]
 323 00f4 BB6B     		ldr	r3, [r7, #56]
 324 00f6 9A42     		cmp	r2, r3
 325 00f8 02D8     		bhi	.L11
 690:../../../FreeRTOS/Source/tasks.c **** 					{
 691:../../../FreeRTOS/Source/tasks.c **** 						pxCurrentTCB = pxNewTCB;
 326              		.loc 1 691 0
 327 00fa 334A     		ldr	r2, .L16+4
 328 00fc 3B6A     		ldr	r3, [r7, #32]
 329 00fe 1360     		str	r3, [r2]
 330              	.L11:
 692:../../../FreeRTOS/Source/tasks.c **** 					}
 693:../../../FreeRTOS/Source/tasks.c **** 					else
 694:../../../FreeRTOS/Source/tasks.c **** 					{
 695:../../../FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
 696:../../../FreeRTOS/Source/tasks.c **** 					}
 697:../../../FreeRTOS/Source/tasks.c **** 				}
 698:../../../FreeRTOS/Source/tasks.c **** 				else
 699:../../../FreeRTOS/Source/tasks.c **** 				{
 700:../../../FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 701:../../../FreeRTOS/Source/tasks.c **** 				}
 702:../../../FreeRTOS/Source/tasks.c **** 			}
 703:../../../FreeRTOS/Source/tasks.c **** 
 704:../../../FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
 331              		.loc 1 704 0
 332 0100 334B     		ldr	r3, .L16+12
 333 0102 1B68     		ldr	r3, [r3]
 334 0104 0133     		adds	r3, r3, #1
 335 0106 324A     		ldr	r2, .L16+12
 336 0108 1360     		str	r3, [r2]
 705:../../../FreeRTOS/Source/tasks.c **** 
 706:../../../FreeRTOS/Source/tasks.c **** 			#if ( configUSE_TRACE_FACILITY == 1 )
 707:../../../FreeRTOS/Source/tasks.c **** 			{
 708:../../../FreeRTOS/Source/tasks.c **** 				/* Add a counter into the TCB for tracing only. */
 709:../../../FreeRTOS/Source/tasks.c **** 				pxNewTCB->uxTCBNumber = uxTaskNumber;
 337              		.loc 1 709 0
 338 010a 314B     		ldr	r3, .L16+12
 339 010c 1A68     		ldr	r2, [r3]
 340 010e 3B6A     		ldr	r3, [r7, #32]
 341 0110 5A64     		str	r2, [r3, #68]
 710:../../../FreeRTOS/Source/tasks.c **** 			}
 711:../../../FreeRTOS/Source/tasks.c **** 			#endif /* configUSE_TRACE_FACILITY */
 712:../../../FreeRTOS/Source/tasks.c **** 			traceTASK_CREATE( pxNewTCB );
 342              		.loc 1 712 0
 343 0112 3B6A     		ldr	r3, [r7, #32]
 344 0114 002B     		cmp	r3, #0
ARM GAS  /tmp/cc7uEwzT.s 			page 23


 345 0116 16D0     		beq	.L12
 346              		.loc 1 712 0 is_stmt 0 discriminator 1
 347 0118 3B6A     		ldr	r3, [r7, #32]
 348 011a 1846     		mov	r0, r3
 349 011c FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskCreate
 350 0120 386A     		ldr	r0, [r7, #32]
 351 0122 3B6A     		ldr	r3, [r7, #32]
 352 0124 03F13401 		add	r1, r3, #52
 353 0128 3B6A     		ldr	r3, [r7, #32]
 354 012a DA6A     		ldr	r2, [r3, #44]
 355 012c 3B6A     		ldr	r3, [r7, #32]
 356 012e 1B6B     		ldr	r3, [r3, #48]
 357 0130 1D46     		mov	r5, r3
 358 0132 3B6A     		ldr	r3, [r7, #32]
 359 0134 1B68     		ldr	r3, [r3]
 360 0136 1C46     		mov	r4, r3
 361 0138 3B6A     		ldr	r3, [r7, #32]
 362 013a 1B6B     		ldr	r3, [r3, #48]
 363 013c E31A     		subs	r3, r4, r3
 364 013e 0093     		str	r3, [sp]
 365 0140 2B46     		mov	r3, r5
 366 0142 FFF7FEFF 		bl	SYSVIEW_AddTask
 367              	.L12:
 713:../../../FreeRTOS/Source/tasks.c **** 
 714:../../../FreeRTOS/Source/tasks.c **** 			prvAddTaskToReadyList( pxNewTCB );
 368              		.loc 1 714 0 is_stmt 1
 369 0146 3B6A     		ldr	r3, [r7, #32]
 370 0148 1846     		mov	r0, r3
 371 014a FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStartReady
 372 014e 3B6A     		ldr	r3, [r7, #32]
 373 0150 DB6A     		ldr	r3, [r3, #44]
 374 0152 1A46     		mov	r2, r3
 375 0154 0123     		movs	r3, #1
 376 0156 03FA02F2 		lsl	r2, r3, r2
 377 015a 1E4B     		ldr	r3, .L16+16
 378 015c 1B68     		ldr	r3, [r3]
 379 015e 1343     		orrs	r3, r3, r2
 380 0160 1C4A     		ldr	r2, .L16+16
 381 0162 1360     		str	r3, [r2]
 382 0164 3B6A     		ldr	r3, [r7, #32]
 383 0166 DA6A     		ldr	r2, [r3, #44]
 384 0168 1346     		mov	r3, r2
 385 016a 9B00     		lsls	r3, r3, #2
 386 016c 1344     		add	r3, r3, r2
 387 016e 9B00     		lsls	r3, r3, #2
 388 0170 194A     		ldr	r2, .L16+20
 389 0172 1A44     		add	r2, r2, r3
 390 0174 3B6A     		ldr	r3, [r7, #32]
 391 0176 0433     		adds	r3, r3, #4
 392 0178 1046     		mov	r0, r2
 393 017a 1946     		mov	r1, r3
 394 017c FFF7FEFF 		bl	vListInsertEnd
 715:../../../FreeRTOS/Source/tasks.c **** 
 716:../../../FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 395              		.loc 1 716 0
 396 0180 0123     		movs	r3, #1
 397 0182 7B62     		str	r3, [r7, #36]
ARM GAS  /tmp/cc7uEwzT.s 			page 24


 717:../../../FreeRTOS/Source/tasks.c **** 			portSETUP_TCB( pxNewTCB );
 718:../../../FreeRTOS/Source/tasks.c **** 		}
 719:../../../FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 398              		.loc 1 719 0
 399 0184 FFF7FEFF 		bl	vPortExitCritical
 400 0188 02E0     		b	.L13
 401              	.L6:
 720:../../../FreeRTOS/Source/tasks.c **** 	}
 721:../../../FreeRTOS/Source/tasks.c **** 	else
 722:../../../FreeRTOS/Source/tasks.c **** 	{
 723:../../../FreeRTOS/Source/tasks.c **** 		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 402              		.loc 1 723 0
 403 018a 4FF0FF33 		mov	r3, #-1
 404 018e 7B62     		str	r3, [r7, #36]
 405              	.L13:
 724:../../../FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE_FAILED();
 725:../../../FreeRTOS/Source/tasks.c **** 	}
 726:../../../FreeRTOS/Source/tasks.c **** 
 727:../../../FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
 406              		.loc 1 727 0
 407 0190 7B6A     		ldr	r3, [r7, #36]
 408 0192 012B     		cmp	r3, #1
 409 0194 11D1     		bne	.L14
 728:../../../FreeRTOS/Source/tasks.c **** 	{
 729:../../../FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 410              		.loc 1 729 0
 411 0196 0D4B     		ldr	r3, .L16+8
 412 0198 1B68     		ldr	r3, [r3]
 413 019a 002B     		cmp	r3, #0
 414 019c 0DD0     		beq	.L14
 730:../../../FreeRTOS/Source/tasks.c **** 		{
 731:../../../FreeRTOS/Source/tasks.c **** 			/* If the created task is of a higher priority than the current task
 732:../../../FreeRTOS/Source/tasks.c **** 			then it should run now. */
 733:../../../FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxPriority < uxPriority )
 415              		.loc 1 733 0
 416 019e 0A4B     		ldr	r3, .L16+4
 417 01a0 1B68     		ldr	r3, [r3]
 418 01a2 DA6A     		ldr	r2, [r3, #44]
 419 01a4 BB6B     		ldr	r3, [r7, #56]
 420 01a6 9A42     		cmp	r2, r3
 421 01a8 07D2     		bcs	.L14
 734:../../../FreeRTOS/Source/tasks.c **** 			{
 735:../../../FreeRTOS/Source/tasks.c **** 				taskYIELD_IF_USING_PREEMPTION();
 422              		.loc 1 735 0
 423 01aa 0C4B     		ldr	r3, .L16+24
 424 01ac 4FF08052 		mov	r2, #268435456
 425 01b0 1A60     		str	r2, [r3]
 426              	@ 735 "../../../FreeRTOS/Source/tasks.c" 1
 427 01b2 BFF34F8F 		dsb
 428              	@ 0 "" 2
 429              	@ 735 "../../../FreeRTOS/Source/tasks.c" 1
 430 01b6 BFF36F8F 		isb
 431              	@ 0 "" 2
 432              		.thumb
 433              	.L14:
 736:../../../FreeRTOS/Source/tasks.c **** 			}
 737:../../../FreeRTOS/Source/tasks.c **** 			else
ARM GAS  /tmp/cc7uEwzT.s 			page 25


 738:../../../FreeRTOS/Source/tasks.c **** 			{
 739:../../../FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 740:../../../FreeRTOS/Source/tasks.c **** 			}
 741:../../../FreeRTOS/Source/tasks.c **** 		}
 742:../../../FreeRTOS/Source/tasks.c **** 		else
 743:../../../FreeRTOS/Source/tasks.c **** 		{
 744:../../../FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 745:../../../FreeRTOS/Source/tasks.c **** 		}
 746:../../../FreeRTOS/Source/tasks.c **** 	}
 747:../../../FreeRTOS/Source/tasks.c **** 
 748:../../../FreeRTOS/Source/tasks.c **** 	return xReturn;
 434              		.loc 1 748 0
 435 01ba 7B6A     		ldr	r3, [r7, #36]
 749:../../../FreeRTOS/Source/tasks.c **** }
 436              		.loc 1 749 0
 437 01bc 1846     		mov	r0, r3
 438 01be 2837     		adds	r7, r7, #40
 439              	.LCFI3:
 440              		.cfi_def_cfa_offset 16
 441 01c0 BD46     		mov	sp, r7
 442              	.LCFI4:
 443              		.cfi_def_cfa_register 13
 444              		@ sp needed
 445 01c2 B0BD     		pop	{r4, r5, r7, pc}
 446              	.L17:
 447              		.align	2
 448              	.L16:
 449 01c4 00000000 		.word	uxCurrentNumberOfTasks
 450 01c8 00000000 		.word	pxCurrentTCB
 451 01cc 00000000 		.word	xSchedulerRunning
 452 01d0 00000000 		.word	uxTaskNumber
 453 01d4 00000000 		.word	uxTopReadyPriority
 454 01d8 00000000 		.word	pxReadyTasksLists
 455 01dc 04ED00E0 		.word	-536810236
 456              		.cfi_endproc
 457              	.LFE4:
 459              		.section	.text.vTaskDelete,"ax",%progbits
 460              		.align	2
 461              		.global	vTaskDelete
 462              		.thumb
 463              		.thumb_func
 465              	vTaskDelete:
 466              	.LFB5:
 750:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 751:../../../FreeRTOS/Source/tasks.c **** 
 752:../../../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 753:../../../FreeRTOS/Source/tasks.c **** 
 754:../../../FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
 755:../../../FreeRTOS/Source/tasks.c **** 	{
 467              		.loc 1 755 0
 468              		.cfi_startproc
 469              		@ args = 0, pretend = 0, frame = 16
 470              		@ frame_needed = 1, uses_anonymous_args = 0
 471 0000 80B5     		push	{r7, lr}
 472              	.LCFI5:
 473              		.cfi_def_cfa_offset 8
 474              		.cfi_offset 7, -8
ARM GAS  /tmp/cc7uEwzT.s 			page 26


 475              		.cfi_offset 14, -4
 476 0002 84B0     		sub	sp, sp, #16
 477              	.LCFI6:
 478              		.cfi_def_cfa_offset 24
 479 0004 00AF     		add	r7, sp, #0
 480              	.LCFI7:
 481              		.cfi_def_cfa_register 7
 482 0006 7860     		str	r0, [r7, #4]
 756:../../../FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 757:../../../FreeRTOS/Source/tasks.c **** 
 758:../../../FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 483              		.loc 1 758 0
 484 0008 FFF7FEFF 		bl	vPortEnterCritical
 759:../../../FreeRTOS/Source/tasks.c **** 		{
 760:../../../FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
 761:../../../FreeRTOS/Source/tasks.c **** 			being deleted. */
 762:../../../FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 485              		.loc 1 762 0
 486 000c 7B68     		ldr	r3, [r7, #4]
 487 000e 002B     		cmp	r3, #0
 488 0010 02D1     		bne	.L19
 489              		.loc 1 762 0 is_stmt 0 discriminator 1
 490 0012 384B     		ldr	r3, .L28
 491 0014 1B68     		ldr	r3, [r3]
 492 0016 00E0     		b	.L20
 493              	.L19:
 494              		.loc 1 762 0 discriminator 2
 495 0018 7B68     		ldr	r3, [r7, #4]
 496              	.L20:
 497              		.loc 1 762 0 discriminator 4
 498 001a FB60     		str	r3, [r7, #12]
 763:../../../FreeRTOS/Source/tasks.c **** 
 764:../../../FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready list and place in the	termination list.
 765:../../../FreeRTOS/Source/tasks.c **** 			This will stop the task from be scheduled.  The idle task will check
 766:../../../FreeRTOS/Source/tasks.c **** 			the termination list and free up any memory allocated by the
 767:../../../FreeRTOS/Source/tasks.c **** 			scheduler for the TCB and stack. */
 768:../../../FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 499              		.loc 1 768 0 is_stmt 1 discriminator 4
 500 001c FB68     		ldr	r3, [r7, #12]
 501 001e 0433     		adds	r3, r3, #4
 502 0020 1846     		mov	r0, r3
 503 0022 FFF7FEFF 		bl	uxListRemove
 504 0026 0346     		mov	r3, r0
 505 0028 002B     		cmp	r3, #0
 506 002a 15D1     		bne	.L21
 769:../../../FreeRTOS/Source/tasks.c **** 			{
 770:../../../FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 507              		.loc 1 770 0
 508 002c FB68     		ldr	r3, [r7, #12]
 509 002e DA6A     		ldr	r2, [r3, #44]
 510 0030 3149     		ldr	r1, .L28+4
 511 0032 1346     		mov	r3, r2
 512 0034 9B00     		lsls	r3, r3, #2
 513 0036 1344     		add	r3, r3, r2
 514 0038 9B00     		lsls	r3, r3, #2
 515 003a 0B44     		add	r3, r3, r1
 516 003c 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cc7uEwzT.s 			page 27


 517 003e 002B     		cmp	r3, #0
 518 0040 0AD1     		bne	.L21
 519              		.loc 1 770 0 is_stmt 0 discriminator 1
 520 0042 FB68     		ldr	r3, [r7, #12]
 521 0044 DB6A     		ldr	r3, [r3, #44]
 522 0046 1A46     		mov	r2, r3
 523 0048 0123     		movs	r3, #1
 524 004a 9340     		lsls	r3, r3, r2
 525 004c DA43     		mvns	r2, r3
 526 004e 2B4B     		ldr	r3, .L28+8
 527 0050 1B68     		ldr	r3, [r3]
 528 0052 1340     		ands	r3, r3, r2
 529 0054 294A     		ldr	r2, .L28+8
 530 0056 1360     		str	r3, [r2]
 531              	.L21:
 771:../../../FreeRTOS/Source/tasks.c **** 			}
 772:../../../FreeRTOS/Source/tasks.c **** 			else
 773:../../../FreeRTOS/Source/tasks.c **** 			{
 774:../../../FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 775:../../../FreeRTOS/Source/tasks.c **** 			}
 776:../../../FreeRTOS/Source/tasks.c **** 
 777:../../../FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
 778:../../../FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 532              		.loc 1 778 0 is_stmt 1
 533 0058 FB68     		ldr	r3, [r7, #12]
 534 005a 9B6A     		ldr	r3, [r3, #40]
 535 005c 002B     		cmp	r3, #0
 536 005e 04D0     		beq	.L23
 779:../../../FreeRTOS/Source/tasks.c **** 			{
 780:../../../FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 537              		.loc 1 780 0
 538 0060 FB68     		ldr	r3, [r7, #12]
 539 0062 1833     		adds	r3, r3, #24
 540 0064 1846     		mov	r0, r3
 541 0066 FFF7FEFF 		bl	uxListRemove
 542              	.L23:
 781:../../../FreeRTOS/Source/tasks.c **** 			}
 782:../../../FreeRTOS/Source/tasks.c **** 			else
 783:../../../FreeRTOS/Source/tasks.c **** 			{
 784:../../../FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 785:../../../FreeRTOS/Source/tasks.c **** 			}
 786:../../../FreeRTOS/Source/tasks.c **** 
 787:../../../FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 543              		.loc 1 787 0
 544 006a FB68     		ldr	r3, [r7, #12]
 545 006c 0433     		adds	r3, r3, #4
 546 006e 2448     		ldr	r0, .L28+12
 547 0070 1946     		mov	r1, r3
 548 0072 FFF7FEFF 		bl	vListInsertEnd
 788:../../../FreeRTOS/Source/tasks.c **** 
 789:../../../FreeRTOS/Source/tasks.c **** 			/* Increment the ucTasksDeleted variable so the idle task knows
 790:../../../FreeRTOS/Source/tasks.c **** 			there is a task that has been deleted and that it should therefore
 791:../../../FreeRTOS/Source/tasks.c **** 			check the xTasksWaitingTermination list. */
 792:../../../FreeRTOS/Source/tasks.c **** 			++uxTasksDeleted;
 549              		.loc 1 792 0
 550 0076 234B     		ldr	r3, .L28+16
 551 0078 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cc7uEwzT.s 			page 28


 552 007a 0133     		adds	r3, r3, #1
 553 007c 214A     		ldr	r2, .L28+16
 554 007e 1360     		str	r3, [r2]
 793:../../../FreeRTOS/Source/tasks.c **** 
 794:../../../FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
 795:../../../FreeRTOS/Source/tasks.c **** 			can detect that the task lists need re-generating. */
 796:../../../FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
 555              		.loc 1 796 0
 556 0080 214B     		ldr	r3, .L28+20
 557 0082 1B68     		ldr	r3, [r3]
 558 0084 0133     		adds	r3, r3, #1
 559 0086 204A     		ldr	r2, .L28+20
 560 0088 1360     		str	r3, [r2]
 797:../../../FreeRTOS/Source/tasks.c **** 
 798:../../../FreeRTOS/Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
 561              		.loc 1 798 0
 562 008a FB68     		ldr	r3, [r7, #12]
 563 008c 1846     		mov	r0, r3
 564 008e FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 565 0092 0346     		mov	r3, r0
 566 0094 2220     		movs	r0, #34
 567 0096 1946     		mov	r1, r3
 568 0098 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32
 799:../../../FreeRTOS/Source/tasks.c **** 		}
 800:../../../FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 569              		.loc 1 800 0
 570 009c FFF7FEFF 		bl	vPortExitCritical
 801:../../../FreeRTOS/Source/tasks.c **** 
 802:../../../FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
 803:../../../FreeRTOS/Source/tasks.c **** 		been deleted. */
 804:../../../FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 571              		.loc 1 804 0
 572 00a0 1A4B     		ldr	r3, .L28+24
 573 00a2 1B68     		ldr	r3, [r3]
 574 00a4 002B     		cmp	r3, #0
 575 00a6 21D0     		beq	.L18
 805:../../../FreeRTOS/Source/tasks.c **** 		{
 806:../../../FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 576              		.loc 1 806 0
 577 00a8 124B     		ldr	r3, .L28
 578 00aa 1B68     		ldr	r3, [r3]
 579 00ac FA68     		ldr	r2, [r7, #12]
 580 00ae 9A42     		cmp	r2, r3
 581 00b0 16D1     		bne	.L25
 807:../../../FreeRTOS/Source/tasks.c **** 			{
 808:../../../FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 582              		.loc 1 808 0
 583 00b2 174B     		ldr	r3, .L28+28
 584 00b4 1B68     		ldr	r3, [r3]
 585 00b6 002B     		cmp	r3, #0
 586 00b8 09D0     		beq	.L26
 587              	.LBB97:
 588              	.LBB98:
 589              		.loc 2 215 0 discriminator 1
 590              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 591 00ba 4FF05003 			mov r3, #80												
 592 00be 83F31188 		msr basepri, r3											
ARM GAS  /tmp/cc7uEwzT.s 			page 29


 593 00c2 BFF36F8F 		isb														
 594 00c6 BFF34F8F 		dsb														
 595              	
 596              	@ 0 "" 2
 597              		.thumb
 598 00ca BB60     		str	r3, [r7, #8]
 599              	.L27:
 600              	.LBE98:
 601              	.LBE97:
 602              		.loc 1 808 0 discriminator 1
 603 00cc FEE7     		b	.L27
 604              	.L26:
 809:../../../FreeRTOS/Source/tasks.c **** 
 810:../../../FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
 811:../../../FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
 812:../../../FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
 813:../../../FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
 814:../../../FreeRTOS/Source/tasks.c **** 				required. */
 815:../../../FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
 816:../../../FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 605              		.loc 1 816 0
 606 00ce 114B     		ldr	r3, .L28+32
 607 00d0 4FF08052 		mov	r2, #268435456
 608 00d4 1A60     		str	r2, [r3]
 609              	@ 816 "../../../FreeRTOS/Source/tasks.c" 1
 610 00d6 BFF34F8F 		dsb
 611              	@ 0 "" 2
 612              	@ 816 "../../../FreeRTOS/Source/tasks.c" 1
 613 00da BFF36F8F 		isb
 614              	@ 0 "" 2
 615              		.thumb
 616 00de 05E0     		b	.L18
 617              	.L25:
 817:../../../FreeRTOS/Source/tasks.c **** 			}
 818:../../../FreeRTOS/Source/tasks.c **** 			else
 819:../../../FreeRTOS/Source/tasks.c **** 			{
 820:../../../FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
 821:../../../FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
 822:../../../FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
 618              		.loc 1 822 0
 619 00e0 FFF7FEFF 		bl	vPortEnterCritical
 823:../../../FreeRTOS/Source/tasks.c **** 				{
 824:../../../FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
 620              		.loc 1 824 0
 621 00e4 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 825:../../../FreeRTOS/Source/tasks.c **** 				}
 826:../../../FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
 622              		.loc 1 826 0
 623 00e8 FFF7FEFF 		bl	vPortExitCritical
 624              	.L18:
 827:../../../FreeRTOS/Source/tasks.c **** 			}
 828:../../../FreeRTOS/Source/tasks.c **** 		}
 829:../../../FreeRTOS/Source/tasks.c **** 	}
 625              		.loc 1 829 0
 626 00ec 1037     		adds	r7, r7, #16
 627              	.LCFI8:
 628              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cc7uEwzT.s 			page 30


 629 00ee BD46     		mov	sp, r7
 630              	.LCFI9:
 631              		.cfi_def_cfa_register 13
 632              		@ sp needed
 633 00f0 80BD     		pop	{r7, pc}
 634              	.L29:
 635 00f2 00BF     		.align	2
 636              	.L28:
 637 00f4 00000000 		.word	pxCurrentTCB
 638 00f8 00000000 		.word	pxReadyTasksLists
 639 00fc 00000000 		.word	uxTopReadyPriority
 640 0100 00000000 		.word	xTasksWaitingTermination
 641 0104 00000000 		.word	uxTasksDeleted
 642 0108 00000000 		.word	uxTaskNumber
 643 010c 00000000 		.word	xSchedulerRunning
 644 0110 00000000 		.word	uxSchedulerSuspended
 645 0114 04ED00E0 		.word	-536810236
 646              		.cfi_endproc
 647              	.LFE5:
 649              		.section	.text.vTaskDelay,"ax",%progbits
 650              		.align	2
 651              		.global	vTaskDelay
 652              		.thumb
 653              		.thumb_func
 655              	vTaskDelay:
 656              	.LFB6:
 830:../../../FreeRTOS/Source/tasks.c **** 
 831:../../../FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
 832:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 833:../../../FreeRTOS/Source/tasks.c **** 
 834:../../../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
 835:../../../FreeRTOS/Source/tasks.c **** 
 836:../../../FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
 837:../../../FreeRTOS/Source/tasks.c **** 	{
 838:../../../FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
 839:../../../FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 840:../../../FreeRTOS/Source/tasks.c **** 
 841:../../../FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
 842:../../../FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 843:../../../FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 844:../../../FreeRTOS/Source/tasks.c **** 
 845:../../../FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
 846:../../../FreeRTOS/Source/tasks.c **** 		{
 847:../../../FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
 848:../../../FreeRTOS/Source/tasks.c **** 			block. */
 849:../../../FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
 850:../../../FreeRTOS/Source/tasks.c **** 
 851:../../../FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
 852:../../../FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 853:../../../FreeRTOS/Source/tasks.c **** 
 854:../../../FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
 855:../../../FreeRTOS/Source/tasks.c **** 			{
 856:../../../FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
 857:../../../FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
 858:../../../FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
 859:../../../FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
 860:../../../FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
ARM GAS  /tmp/cc7uEwzT.s 			page 31


 861:../../../FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 862:../../../FreeRTOS/Source/tasks.c **** 				{
 863:../../../FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
 864:../../../FreeRTOS/Source/tasks.c **** 				}
 865:../../../FreeRTOS/Source/tasks.c **** 				else
 866:../../../FreeRTOS/Source/tasks.c **** 				{
 867:../../../FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 868:../../../FreeRTOS/Source/tasks.c **** 				}
 869:../../../FreeRTOS/Source/tasks.c **** 			}
 870:../../../FreeRTOS/Source/tasks.c **** 			else
 871:../../../FreeRTOS/Source/tasks.c **** 			{
 872:../../../FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
 873:../../../FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
 874:../../../FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
 875:../../../FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 876:../../../FreeRTOS/Source/tasks.c **** 				{
 877:../../../FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
 878:../../../FreeRTOS/Source/tasks.c **** 				}
 879:../../../FreeRTOS/Source/tasks.c **** 				else
 880:../../../FreeRTOS/Source/tasks.c **** 				{
 881:../../../FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 882:../../../FreeRTOS/Source/tasks.c **** 				}
 883:../../../FreeRTOS/Source/tasks.c **** 			}
 884:../../../FreeRTOS/Source/tasks.c **** 
 885:../../../FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
 886:../../../FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
 887:../../../FreeRTOS/Source/tasks.c **** 
 888:../../../FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
 889:../../../FreeRTOS/Source/tasks.c **** 			{
 890:../../../FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL();
 891:../../../FreeRTOS/Source/tasks.c **** 
 892:../../../FreeRTOS/Source/tasks.c **** 				/* Remove the task from the ready list before adding it to the
 893:../../../FreeRTOS/Source/tasks.c **** 				blocked list as the same list item is used for both lists. */
 894:../../../FreeRTOS/Source/tasks.c **** 				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 895:../../../FreeRTOS/Source/tasks.c **** 				{
 896:../../../FreeRTOS/Source/tasks.c **** 					/* The current task must be in a ready list, so there is
 897:../../../FreeRTOS/Source/tasks.c **** 					no need to check, and the port reset macro can be called
 898:../../../FreeRTOS/Source/tasks.c **** 					directly. */
 899:../../../FreeRTOS/Source/tasks.c **** 					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 900:../../../FreeRTOS/Source/tasks.c **** 				}
 901:../../../FreeRTOS/Source/tasks.c **** 				else
 902:../../../FreeRTOS/Source/tasks.c **** 				{
 903:../../../FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 904:../../../FreeRTOS/Source/tasks.c **** 				}
 905:../../../FreeRTOS/Source/tasks.c **** 
 906:../../../FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
 907:../../../FreeRTOS/Source/tasks.c **** 			}
 908:../../../FreeRTOS/Source/tasks.c **** 			else
 909:../../../FreeRTOS/Source/tasks.c **** 			{
 910:../../../FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 911:../../../FreeRTOS/Source/tasks.c **** 			}
 912:../../../FreeRTOS/Source/tasks.c **** 		}
 913:../../../FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
 914:../../../FreeRTOS/Source/tasks.c **** 
 915:../../../FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
 916:../../../FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
 917:../../../FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
ARM GAS  /tmp/cc7uEwzT.s 			page 32


 918:../../../FreeRTOS/Source/tasks.c **** 		{
 919:../../../FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 920:../../../FreeRTOS/Source/tasks.c **** 		}
 921:../../../FreeRTOS/Source/tasks.c **** 		else
 922:../../../FreeRTOS/Source/tasks.c **** 		{
 923:../../../FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 924:../../../FreeRTOS/Source/tasks.c **** 		}
 925:../../../FreeRTOS/Source/tasks.c **** 	}
 926:../../../FreeRTOS/Source/tasks.c **** 
 927:../../../FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
 928:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 929:../../../FreeRTOS/Source/tasks.c **** 
 930:../../../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
 931:../../../FreeRTOS/Source/tasks.c **** 
 932:../../../FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
 933:../../../FreeRTOS/Source/tasks.c **** 	{
 657              		.loc 1 933 0
 658              		.cfi_startproc
 659              		@ args = 0, pretend = 0, frame = 24
 660              		@ frame_needed = 1, uses_anonymous_args = 0
 661 0000 80B5     		push	{r7, lr}
 662              	.LCFI10:
 663              		.cfi_def_cfa_offset 8
 664              		.cfi_offset 7, -8
 665              		.cfi_offset 14, -4
 666 0002 86B0     		sub	sp, sp, #24
 667              	.LCFI11:
 668              		.cfi_def_cfa_offset 32
 669 0004 00AF     		add	r7, sp, #0
 670              	.LCFI12:
 671              		.cfi_def_cfa_register 7
 672 0006 7860     		str	r0, [r7, #4]
 934:../../../FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
 935:../../../FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 673              		.loc 1 935 0
 674 0008 0023     		movs	r3, #0
 675 000a 7B61     		str	r3, [r7, #20]
 936:../../../FreeRTOS/Source/tasks.c **** 
 937:../../../FreeRTOS/Source/tasks.c **** 
 938:../../../FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
 939:../../../FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
 676              		.loc 1 939 0
 677 000c 7B68     		ldr	r3, [r7, #4]
 678 000e 002B     		cmp	r3, #0
 679 0010 33D0     		beq	.L31
 940:../../../FreeRTOS/Source/tasks.c **** 		{
 941:../../../FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
 680              		.loc 1 941 0
 681 0012 214B     		ldr	r3, .L36
 682 0014 1B68     		ldr	r3, [r3]
 683 0016 002B     		cmp	r3, #0
 684 0018 09D0     		beq	.L32
 685              	.LBB99:
 686              	.LBB100:
 687              		.loc 2 215 0 discriminator 1
 688              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 689 001a 4FF05003 			mov r3, #80												
ARM GAS  /tmp/cc7uEwzT.s 			page 33


 690 001e 83F31188 		msr basepri, r3											
 691 0022 BFF36F8F 		isb														
 692 0026 BFF34F8F 		dsb														
 693              	
 694              	@ 0 "" 2
 695              		.thumb
 696 002a FB60     		str	r3, [r7, #12]
 697              	.L33:
 698              	.LBE100:
 699              	.LBE99:
 700              		.loc 1 941 0 discriminator 1
 701 002c FEE7     		b	.L33
 702              	.L32:
 942:../../../FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 703              		.loc 1 942 0
 704 002e FFF7FEFF 		bl	vTaskSuspendAll
 943:../../../FreeRTOS/Source/tasks.c **** 			{
 944:../../../FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
 705              		.loc 1 944 0
 706 0032 2320     		movs	r0, #35
 707 0034 7968     		ldr	r1, [r7, #4]
 708 0036 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32
 945:../../../FreeRTOS/Source/tasks.c **** 
 946:../../../FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
 947:../../../FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
 948:../../../FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
 949:../../../FreeRTOS/Source/tasks.c **** 				is resumed.
 950:../../../FreeRTOS/Source/tasks.c **** 
 951:../../../FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
 952:../../../FreeRTOS/Source/tasks.c **** 				executing task. */
 953:../../../FreeRTOS/Source/tasks.c **** 
 954:../../../FreeRTOS/Source/tasks.c **** 				/* Calculate the time to wake - this may overflow but this is
 955:../../../FreeRTOS/Source/tasks.c **** 				not a problem. */
 956:../../../FreeRTOS/Source/tasks.c **** 				xTimeToWake = xTickCount + xTicksToDelay;
 709              		.loc 1 956 0
 710 003a 184B     		ldr	r3, .L36+4
 711 003c 1A68     		ldr	r2, [r3]
 712 003e 7B68     		ldr	r3, [r7, #4]
 713 0040 1344     		add	r3, r3, r2
 714 0042 3B61     		str	r3, [r7, #16]
 957:../../../FreeRTOS/Source/tasks.c **** 
 958:../../../FreeRTOS/Source/tasks.c **** 				/* We must remove ourselves from the ready list before adding
 959:../../../FreeRTOS/Source/tasks.c **** 				ourselves to the blocked list as the same list item is used for
 960:../../../FreeRTOS/Source/tasks.c **** 				both lists. */
 961:../../../FreeRTOS/Source/tasks.c **** 				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 715              		.loc 1 961 0
 716 0044 164B     		ldr	r3, .L36+8
 717 0046 1B68     		ldr	r3, [r3]
 718 0048 0433     		adds	r3, r3, #4
 719 004a 1846     		mov	r0, r3
 720 004c FFF7FEFF 		bl	uxListRemove
 721 0050 0346     		mov	r3, r0
 722 0052 002B     		cmp	r3, #0
 723 0054 0BD1     		bne	.L34
 962:../../../FreeRTOS/Source/tasks.c **** 				{
 963:../../../FreeRTOS/Source/tasks.c **** 					/* The current task must be in a ready list, so there is
 964:../../../FreeRTOS/Source/tasks.c **** 					no need to check, and the port reset macro can be called
ARM GAS  /tmp/cc7uEwzT.s 			page 34


 965:../../../FreeRTOS/Source/tasks.c **** 					directly. */
 966:../../../FreeRTOS/Source/tasks.c **** 					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 724              		.loc 1 966 0
 725 0056 124B     		ldr	r3, .L36+8
 726 0058 1B68     		ldr	r3, [r3]
 727 005a DB6A     		ldr	r3, [r3, #44]
 728 005c 1A46     		mov	r2, r3
 729 005e 0123     		movs	r3, #1
 730 0060 9340     		lsls	r3, r3, r2
 731 0062 DA43     		mvns	r2, r3
 732 0064 0F4B     		ldr	r3, .L36+12
 733 0066 1B68     		ldr	r3, [r3]
 734 0068 1340     		ands	r3, r3, r2
 735 006a 0E4A     		ldr	r2, .L36+12
 736 006c 1360     		str	r3, [r2]
 737              	.L34:
 967:../../../FreeRTOS/Source/tasks.c **** 				}
 968:../../../FreeRTOS/Source/tasks.c **** 				else
 969:../../../FreeRTOS/Source/tasks.c **** 				{
 970:../../../FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 971:../../../FreeRTOS/Source/tasks.c **** 				}
 972:../../../FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
 738              		.loc 1 972 0
 739 006e 3869     		ldr	r0, [r7, #16]
 740 0070 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 973:../../../FreeRTOS/Source/tasks.c **** 			}
 974:../../../FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 741              		.loc 1 974 0
 742 0074 FFF7FEFF 		bl	xTaskResumeAll
 743 0078 7861     		str	r0, [r7, #20]
 744              	.L31:
 975:../../../FreeRTOS/Source/tasks.c **** 		}
 976:../../../FreeRTOS/Source/tasks.c **** 		else
 977:../../../FreeRTOS/Source/tasks.c **** 		{
 978:../../../FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 979:../../../FreeRTOS/Source/tasks.c **** 		}
 980:../../../FreeRTOS/Source/tasks.c **** 
 981:../../../FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
 982:../../../FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
 983:../../../FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 745              		.loc 1 983 0
 746 007a 7B69     		ldr	r3, [r7, #20]
 747 007c 002B     		cmp	r3, #0
 748 007e 07D1     		bne	.L30
 984:../../../FreeRTOS/Source/tasks.c **** 		{
 985:../../../FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 749              		.loc 1 985 0
 750 0080 094B     		ldr	r3, .L36+16
 751 0082 4FF08052 		mov	r2, #268435456
 752 0086 1A60     		str	r2, [r3]
 753              	@ 985 "../../../FreeRTOS/Source/tasks.c" 1
 754 0088 BFF34F8F 		dsb
 755              	@ 0 "" 2
 756              	@ 985 "../../../FreeRTOS/Source/tasks.c" 1
 757 008c BFF36F8F 		isb
 758              	@ 0 "" 2
 759              		.thumb
ARM GAS  /tmp/cc7uEwzT.s 			page 35


 760              	.L30:
 986:../../../FreeRTOS/Source/tasks.c **** 		}
 987:../../../FreeRTOS/Source/tasks.c **** 		else
 988:../../../FreeRTOS/Source/tasks.c **** 		{
 989:../../../FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 990:../../../FreeRTOS/Source/tasks.c **** 		}
 991:../../../FreeRTOS/Source/tasks.c **** 	}
 761              		.loc 1 991 0
 762 0090 1837     		adds	r7, r7, #24
 763              	.LCFI13:
 764              		.cfi_def_cfa_offset 8
 765 0092 BD46     		mov	sp, r7
 766              	.LCFI14:
 767              		.cfi_def_cfa_register 13
 768              		@ sp needed
 769 0094 80BD     		pop	{r7, pc}
 770              	.L37:
 771 0096 00BF     		.align	2
 772              	.L36:
 773 0098 00000000 		.word	uxSchedulerSuspended
 774 009c 00000000 		.word	xTickCount
 775 00a0 00000000 		.word	pxCurrentTCB
 776 00a4 00000000 		.word	uxTopReadyPriority
 777 00a8 04ED00E0 		.word	-536810236
 778              		.cfi_endproc
 779              	.LFE6:
 781              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 782              		.align	2
 783              		.global	uxTaskPriorityGet
 784              		.thumb
 785              		.thumb_func
 787              	uxTaskPriorityGet:
 788              	.LFB7:
 992:../../../FreeRTOS/Source/tasks.c **** 
 993:../../../FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
 994:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 995:../../../FreeRTOS/Source/tasks.c **** 
 996:../../../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_eTaskGetState == 1 )
 997:../../../FreeRTOS/Source/tasks.c **** 
 998:../../../FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
 999:../../../FreeRTOS/Source/tasks.c **** 	{
1000:../../../FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1001:../../../FreeRTOS/Source/tasks.c **** 	List_t *pxStateList;
1002:../../../FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1003:../../../FreeRTOS/Source/tasks.c **** 
1004:../../../FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1005:../../../FreeRTOS/Source/tasks.c **** 
1006:../../../FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1007:../../../FreeRTOS/Source/tasks.c **** 		{
1008:../../../FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1009:../../../FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
1010:../../../FreeRTOS/Source/tasks.c **** 		}
1011:../../../FreeRTOS/Source/tasks.c **** 		else
1012:../../../FreeRTOS/Source/tasks.c **** 		{
1013:../../../FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1014:../../../FreeRTOS/Source/tasks.c **** 			{
1015:../../../FreeRTOS/Source/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xGenericListItem ) );
ARM GAS  /tmp/cc7uEwzT.s 			page 36


1016:../../../FreeRTOS/Source/tasks.c **** 			}
1017:../../../FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1018:../../../FreeRTOS/Source/tasks.c **** 
1019:../../../FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
1020:../../../FreeRTOS/Source/tasks.c **** 			{
1021:../../../FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1022:../../../FreeRTOS/Source/tasks.c **** 				lists. */
1023:../../../FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
1024:../../../FreeRTOS/Source/tasks.c **** 			}
1025:../../../FreeRTOS/Source/tasks.c **** 
1026:../../../FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1027:../../../FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1028:../../../FreeRTOS/Source/tasks.c **** 				{
1029:../../../FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1030:../../../FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it block
1031:../../../FreeRTOS/Source/tasks.c **** 					indefinitely? */
1032:../../../FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1033:../../../FreeRTOS/Source/tasks.c **** 					{
1034:../../../FreeRTOS/Source/tasks.c **** 						eReturn = eSuspended;
1035:../../../FreeRTOS/Source/tasks.c **** 					}
1036:../../../FreeRTOS/Source/tasks.c **** 					else
1037:../../../FreeRTOS/Source/tasks.c **** 					{
1038:../../../FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
1039:../../../FreeRTOS/Source/tasks.c **** 					}
1040:../../../FreeRTOS/Source/tasks.c **** 				}
1041:../../../FreeRTOS/Source/tasks.c **** 			#endif
1042:../../../FreeRTOS/Source/tasks.c **** 
1043:../../../FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1044:../../../FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xTasksWaitingTermination )
1045:../../../FreeRTOS/Source/tasks.c **** 				{
1046:../../../FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1047:../../../FreeRTOS/Source/tasks.c **** 					tasks list. */
1048:../../../FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
1049:../../../FreeRTOS/Source/tasks.c **** 				}
1050:../../../FreeRTOS/Source/tasks.c **** 			#endif
1051:../../../FreeRTOS/Source/tasks.c **** 
1052:../../../FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1053:../../../FreeRTOS/Source/tasks.c **** 			{
1054:../../../FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1055:../../../FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1056:../../../FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
1057:../../../FreeRTOS/Source/tasks.c **** 			}
1058:../../../FreeRTOS/Source/tasks.c **** 		}
1059:../../../FreeRTOS/Source/tasks.c **** 
1060:../../../FreeRTOS/Source/tasks.c **** 		return eReturn;
1061:../../../FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1062:../../../FreeRTOS/Source/tasks.c **** 
1063:../../../FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1064:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1065:../../../FreeRTOS/Source/tasks.c **** 
1066:../../../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1067:../../../FreeRTOS/Source/tasks.c **** 
1068:../../../FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
1069:../../../FreeRTOS/Source/tasks.c **** 	{
 789              		.loc 1 1069 0
 790              		.cfi_startproc
 791              		@ args = 0, pretend = 0, frame = 16
ARM GAS  /tmp/cc7uEwzT.s 			page 37


 792              		@ frame_needed = 1, uses_anonymous_args = 0
 793 0000 80B5     		push	{r7, lr}
 794              	.LCFI15:
 795              		.cfi_def_cfa_offset 8
 796              		.cfi_offset 7, -8
 797              		.cfi_offset 14, -4
 798 0002 84B0     		sub	sp, sp, #16
 799              	.LCFI16:
 800              		.cfi_def_cfa_offset 24
 801 0004 00AF     		add	r7, sp, #0
 802              	.LCFI17:
 803              		.cfi_def_cfa_register 7
 804 0006 7860     		str	r0, [r7, #4]
1070:../../../FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1071:../../../FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1072:../../../FreeRTOS/Source/tasks.c **** 
1073:../../../FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 805              		.loc 1 1073 0
 806 0008 FFF7FEFF 		bl	vPortEnterCritical
1074:../../../FreeRTOS/Source/tasks.c **** 		{
1075:../../../FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1076:../../../FreeRTOS/Source/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1077:../../../FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 807              		.loc 1 1077 0
 808 000c 7B68     		ldr	r3, [r7, #4]
 809 000e 002B     		cmp	r3, #0
 810 0010 02D1     		bne	.L39
 811              		.loc 1 1077 0 is_stmt 0 discriminator 1
 812 0012 074B     		ldr	r3, .L42
 813 0014 1B68     		ldr	r3, [r3]
 814 0016 00E0     		b	.L40
 815              	.L39:
 816              		.loc 1 1077 0 discriminator 2
 817 0018 7B68     		ldr	r3, [r7, #4]
 818              	.L40:
 819              		.loc 1 1077 0 discriminator 4
 820 001a FB60     		str	r3, [r7, #12]
1078:../../../FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 821              		.loc 1 1078 0 is_stmt 1 discriminator 4
 822 001c FB68     		ldr	r3, [r7, #12]
 823 001e DB6A     		ldr	r3, [r3, #44]
 824 0020 BB60     		str	r3, [r7, #8]
1079:../../../FreeRTOS/Source/tasks.c **** 		}
1080:../../../FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 825              		.loc 1 1080 0 discriminator 4
 826 0022 FFF7FEFF 		bl	vPortExitCritical
1081:../../../FreeRTOS/Source/tasks.c **** 
1082:../../../FreeRTOS/Source/tasks.c **** 		return uxReturn;
 827              		.loc 1 1082 0 discriminator 4
 828 0026 BB68     		ldr	r3, [r7, #8]
1083:../../../FreeRTOS/Source/tasks.c **** 	}
 829              		.loc 1 1083 0 discriminator 4
 830 0028 1846     		mov	r0, r3
 831 002a 1037     		adds	r7, r7, #16
 832              	.LCFI18:
 833              		.cfi_def_cfa_offset 8
 834 002c BD46     		mov	sp, r7
ARM GAS  /tmp/cc7uEwzT.s 			page 38


 835              	.LCFI19:
 836              		.cfi_def_cfa_register 13
 837              		@ sp needed
 838 002e 80BD     		pop	{r7, pc}
 839              	.L43:
 840              		.align	2
 841              	.L42:
 842 0030 00000000 		.word	pxCurrentTCB
 843              		.cfi_endproc
 844              	.LFE7:
 846              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 847              		.align	2
 848              		.global	uxTaskPriorityGetFromISR
 849              		.thumb
 850              		.thumb_func
 852              	uxTaskPriorityGetFromISR:
 853              	.LFB8:
1084:../../../FreeRTOS/Source/tasks.c **** 
1085:../../../FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1086:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1087:../../../FreeRTOS/Source/tasks.c **** 
1088:../../../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1089:../../../FreeRTOS/Source/tasks.c **** 
1090:../../../FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1091:../../../FreeRTOS/Source/tasks.c **** 	{
 854              		.loc 1 1091 0
 855              		.cfi_startproc
 856              		@ args = 0, pretend = 0, frame = 32
 857              		@ frame_needed = 1, uses_anonymous_args = 0
 858 0000 80B5     		push	{r7, lr}
 859              	.LCFI20:
 860              		.cfi_def_cfa_offset 8
 861              		.cfi_offset 7, -8
 862              		.cfi_offset 14, -4
 863 0002 88B0     		sub	sp, sp, #32
 864              	.LCFI21:
 865              		.cfi_def_cfa_offset 40
 866 0004 00AF     		add	r7, sp, #0
 867              	.LCFI22:
 868              		.cfi_def_cfa_register 7
 869 0006 7860     		str	r0, [r7, #4]
1092:../../../FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1093:../../../FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1094:../../../FreeRTOS/Source/tasks.c **** 
1095:../../../FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1096:../../../FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1097:../../../FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1098:../../../FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1099:../../../FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1100:../../../FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1101:../../../FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1102:../../../FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1103:../../../FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1104:../../../FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1105:../../../FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1106:../../../FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1107:../../../FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
ARM GAS  /tmp/cc7uEwzT.s 			page 39


1108:../../../FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1109:../../../FreeRTOS/Source/tasks.c **** 		provided on the following link:
1110:../../../FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1111:../../../FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 870              		.loc 1 1111 0
 871 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 872              	.LBB101:
 873              	.LBB102:
 216:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 217:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 218:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 219:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 220:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 221:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 222:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 223:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 224:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 225:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 226:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 228:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 229:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 230:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 231:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 874              		.loc 2 231 0
 875              	@ 231 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 876 000c EFF31182 			mrs r2, basepri											
 877 0010 4FF05003 		mov r3, #80												
 878 0014 83F31188 		msr basepri, r3											
 879 0018 BFF36F8F 		isb														
 880 001c BFF34F8F 		dsb														
 881              	
 882              	@ 0 "" 2
 883              		.thumb
 884 0020 3A61     		str	r2, [r7, #16]
 885 0022 FB60     		str	r3, [r7, #12]
 232:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 233:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 234:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 235:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 236:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 237:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 238:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 239:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 240:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 241:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 242:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 243:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 886              		.loc 2 243 0
 887 0024 3B69     		ldr	r3, [r7, #16]
 888              	.LBE102:
 889              	.LBE101:
1112:../../../FreeRTOS/Source/tasks.c **** 
1113:../../../FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 890              		.loc 1 1113 0
 891 0026 FB61     		str	r3, [r7, #28]
1114:../../../FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/cc7uEwzT.s 			page 40


1115:../../../FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1116:../../../FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1117:../../../FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 892              		.loc 1 1117 0
 893 0028 7B68     		ldr	r3, [r7, #4]
 894 002a 002B     		cmp	r3, #0
 895 002c 02D1     		bne	.L46
 896              		.loc 1 1117 0 is_stmt 0 discriminator 1
 897 002e 094B     		ldr	r3, .L49
 898 0030 1B68     		ldr	r3, [r3]
 899 0032 00E0     		b	.L47
 900              	.L46:
 901              		.loc 1 1117 0 discriminator 2
 902 0034 7B68     		ldr	r3, [r7, #4]
 903              	.L47:
 904              		.loc 1 1117 0 discriminator 4
 905 0036 BB61     		str	r3, [r7, #24]
1118:../../../FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 906              		.loc 1 1118 0 is_stmt 1 discriminator 4
 907 0038 BB69     		ldr	r3, [r7, #24]
 908 003a DB6A     		ldr	r3, [r3, #44]
 909 003c 7B61     		str	r3, [r7, #20]
 910 003e FB69     		ldr	r3, [r7, #28]
 911 0040 BB60     		str	r3, [r7, #8]
 912              	.LBB103:
 913              	.LBB104:
 244:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 245:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 246:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 247:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 248:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 249:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 914              		.loc 2 249 0 discriminator 4
 915 0042 BB68     		ldr	r3, [r7, #8]
 916              	@ 249 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 917 0044 83F31188 			msr basepri, r3	
 918              	@ 0 "" 2
 919              		.thumb
 920              	.LBE104:
 921              	.LBE103:
1119:../../../FreeRTOS/Source/tasks.c **** 		}
1120:../../../FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1121:../../../FreeRTOS/Source/tasks.c **** 
1122:../../../FreeRTOS/Source/tasks.c **** 		return uxReturn;
 922              		.loc 1 1122 0 discriminator 4
 923 0048 7B69     		ldr	r3, [r7, #20]
1123:../../../FreeRTOS/Source/tasks.c **** 	}
 924              		.loc 1 1123 0 discriminator 4
 925 004a 1846     		mov	r0, r3
 926 004c 2037     		adds	r7, r7, #32
 927              	.LCFI23:
 928              		.cfi_def_cfa_offset 8
 929 004e BD46     		mov	sp, r7
 930              	.LCFI24:
 931              		.cfi_def_cfa_register 13
 932              		@ sp needed
 933 0050 80BD     		pop	{r7, pc}
ARM GAS  /tmp/cc7uEwzT.s 			page 41


 934              	.L50:
 935 0052 00BF     		.align	2
 936              	.L49:
 937 0054 00000000 		.word	pxCurrentTCB
 938              		.cfi_endproc
 939              	.LFE8:
 941              		.section	.text.vTaskPrioritySet,"ax",%progbits
 942              		.align	2
 943              		.global	vTaskPrioritySet
 944              		.thumb
 945              		.thumb_func
 947              	vTaskPrioritySet:
 948              	.LFB9:
1124:../../../FreeRTOS/Source/tasks.c **** 
1125:../../../FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1126:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1127:../../../FreeRTOS/Source/tasks.c **** 
1128:../../../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1129:../../../FreeRTOS/Source/tasks.c **** 
1130:../../../FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1131:../../../FreeRTOS/Source/tasks.c **** 	{
 949              		.loc 1 1131 0
 950              		.cfi_startproc
 951              		@ args = 0, pretend = 0, frame = 32
 952              		@ frame_needed = 1, uses_anonymous_args = 0
 953 0000 90B5     		push	{r4, r7, lr}
 954              	.LCFI25:
 955              		.cfi_def_cfa_offset 12
 956              		.cfi_offset 4, -12
 957              		.cfi_offset 7, -8
 958              		.cfi_offset 14, -4
 959 0002 8BB0     		sub	sp, sp, #44
 960              	.LCFI26:
 961              		.cfi_def_cfa_offset 56
 962 0004 02AF     		add	r7, sp, #8
 963              	.LCFI27:
 964              		.cfi_def_cfa 7, 48
 965 0006 7860     		str	r0, [r7, #4]
 966 0008 3960     		str	r1, [r7]
1132:../../../FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1133:../../../FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1134:../../../FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 967              		.loc 1 1134 0
 968 000a 0023     		movs	r3, #0
 969 000c FB61     		str	r3, [r7, #28]
1135:../../../FreeRTOS/Source/tasks.c **** 
1136:../../../FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 970              		.loc 1 1136 0
 971 000e 3B68     		ldr	r3, [r7]
 972 0010 062B     		cmp	r3, #6
 973 0012 09D9     		bls	.L52
 974              	.LBB105:
 975              	.LBB106:
 215:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 976              		.loc 2 215 0 discriminator 1
 977              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 978 0014 4FF05003 			mov r3, #80												
ARM GAS  /tmp/cc7uEwzT.s 			page 42


 979 0018 83F31188 		msr basepri, r3											
 980 001c BFF36F8F 		isb														
 981 0020 BFF34F8F 		dsb														
 982              	
 983              	@ 0 "" 2
 984              		.thumb
 985 0024 FB60     		str	r3, [r7, #12]
 986              	.L53:
 987              	.LBE106:
 988              	.LBE105:
 989              		.loc 1 1136 0 discriminator 1
 990 0026 FEE7     		b	.L53
 991              	.L52:
1137:../../../FreeRTOS/Source/tasks.c **** 
1138:../../../FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1139:../../../FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 992              		.loc 1 1139 0
 993 0028 3B68     		ldr	r3, [r7]
 994 002a 062B     		cmp	r3, #6
 995 002c 01D9     		bls	.L54
1140:../../../FreeRTOS/Source/tasks.c **** 		{
1141:../../../FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 996              		.loc 1 1141 0
 997 002e 0623     		movs	r3, #6
 998 0030 3B60     		str	r3, [r7]
 999              	.L54:
1142:../../../FreeRTOS/Source/tasks.c **** 		}
1143:../../../FreeRTOS/Source/tasks.c **** 		else
1144:../../../FreeRTOS/Source/tasks.c **** 		{
1145:../../../FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1146:../../../FreeRTOS/Source/tasks.c **** 		}
1147:../../../FreeRTOS/Source/tasks.c **** 
1148:../../../FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1000              		.loc 1 1148 0
 1001 0032 FFF7FEFF 		bl	vPortEnterCritical
1149:../../../FreeRTOS/Source/tasks.c **** 		{
1150:../../../FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1151:../../../FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1152:../../../FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1002              		.loc 1 1152 0
 1003 0036 7B68     		ldr	r3, [r7, #4]
 1004 0038 002B     		cmp	r3, #0
 1005 003a 02D1     		bne	.L55
 1006              		.loc 1 1152 0 is_stmt 0 discriminator 1
 1007 003c 504B     		ldr	r3, .L66
 1008 003e 1B68     		ldr	r3, [r3]
 1009 0040 00E0     		b	.L56
 1010              	.L55:
 1011              		.loc 1 1152 0 discriminator 2
 1012 0042 7B68     		ldr	r3, [r7, #4]
 1013              	.L56:
 1014              		.loc 1 1152 0 discriminator 4
 1015 0044 BB61     		str	r3, [r7, #24]
1153:../../../FreeRTOS/Source/tasks.c **** 
1154:../../../FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
 1016              		.loc 1 1154 0 is_stmt 1 discriminator 4
 1017 0046 BB69     		ldr	r3, [r7, #24]
ARM GAS  /tmp/cc7uEwzT.s 			page 43


 1018 0048 1846     		mov	r0, r3
 1019 004a FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 1020 004e 0346     		mov	r3, r0
 1021 0050 2820     		movs	r0, #40
 1022 0052 1946     		mov	r1, r3
 1023 0054 3A68     		ldr	r2, [r7]
 1024 0056 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x2
 1025 005a B969     		ldr	r1, [r7, #24]
 1026 005c BB69     		ldr	r3, [r7, #24]
 1027 005e 03F13402 		add	r2, r3, #52
 1028 0062 BB69     		ldr	r3, [r7, #24]
 1029 0064 1B6B     		ldr	r3, [r3, #48]
 1030 0066 1C46     		mov	r4, r3
 1031 0068 0023     		movs	r3, #0
 1032 006a 0093     		str	r3, [sp]
 1033 006c 0846     		mov	r0, r1
 1034 006e 1146     		mov	r1, r2
 1035 0070 3A68     		ldr	r2, [r7]
 1036 0072 2346     		mov	r3, r4
 1037 0074 FFF7FEFF 		bl	SYSVIEW_UpdateTask
1155:../../../FreeRTOS/Source/tasks.c **** 
1156:../../../FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1157:../../../FreeRTOS/Source/tasks.c **** 			{
1158:../../../FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
 1038              		.loc 1 1158 0 discriminator 4
 1039 0078 BB69     		ldr	r3, [r7, #24]
 1040 007a DB6C     		ldr	r3, [r3, #76]
 1041 007c 7B61     		str	r3, [r7, #20]
1159:../../../FreeRTOS/Source/tasks.c **** 			}
1160:../../../FreeRTOS/Source/tasks.c **** 			#else
1161:../../../FreeRTOS/Source/tasks.c **** 			{
1162:../../../FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1163:../../../FreeRTOS/Source/tasks.c **** 			}
1164:../../../FreeRTOS/Source/tasks.c **** 			#endif
1165:../../../FreeRTOS/Source/tasks.c **** 
1166:../../../FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
 1042              		.loc 1 1166 0 discriminator 4
 1043 007e 7A69     		ldr	r2, [r7, #20]
 1044 0080 3B68     		ldr	r3, [r7]
 1045 0082 9A42     		cmp	r2, r3
 1046 0084 76D0     		beq	.L57
1167:../../../FreeRTOS/Source/tasks.c **** 			{
1168:../../../FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1169:../../../FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1170:../../../FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
 1047              		.loc 1 1170 0
 1048 0086 3A68     		ldr	r2, [r7]
 1049 0088 7B69     		ldr	r3, [r7, #20]
 1050 008a 9A42     		cmp	r2, r3
 1051 008c 0DD9     		bls	.L58
1171:../../../FreeRTOS/Source/tasks.c **** 				{
1172:../../../FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
 1052              		.loc 1 1172 0
 1053 008e 3C4B     		ldr	r3, .L66
 1054 0090 1B68     		ldr	r3, [r3]
 1055 0092 BA69     		ldr	r2, [r7, #24]
 1056 0094 9A42     		cmp	r2, r3
ARM GAS  /tmp/cc7uEwzT.s 			page 44


 1057 0096 0FD0     		beq	.L59
1173:../../../FreeRTOS/Source/tasks.c **** 					{
1174:../../../FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1175:../../../FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1176:../../../FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1177:../../../FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 1058              		.loc 1 1177 0
 1059 0098 394B     		ldr	r3, .L66
 1060 009a 1B68     		ldr	r3, [r3]
 1061 009c DA6A     		ldr	r2, [r3, #44]
 1062 009e 3B68     		ldr	r3, [r7]
 1063 00a0 9A42     		cmp	r2, r3
 1064 00a2 09D8     		bhi	.L59
1178:../../../FreeRTOS/Source/tasks.c **** 						{
1179:../../../FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
 1065              		.loc 1 1179 0
 1066 00a4 0123     		movs	r3, #1
 1067 00a6 FB61     		str	r3, [r7, #28]
 1068 00a8 06E0     		b	.L59
 1069              	.L58:
1180:../../../FreeRTOS/Source/tasks.c **** 						}
1181:../../../FreeRTOS/Source/tasks.c **** 						else
1182:../../../FreeRTOS/Source/tasks.c **** 						{
1183:../../../FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1184:../../../FreeRTOS/Source/tasks.c **** 						}
1185:../../../FreeRTOS/Source/tasks.c **** 					}
1186:../../../FreeRTOS/Source/tasks.c **** 					else
1187:../../../FreeRTOS/Source/tasks.c **** 					{
1188:../../../FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1189:../../../FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1190:../../../FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1191:../../../FreeRTOS/Source/tasks.c **** 					}
1192:../../../FreeRTOS/Source/tasks.c **** 				}
1193:../../../FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
 1070              		.loc 1 1193 0
 1071 00aa 354B     		ldr	r3, .L66
 1072 00ac 1B68     		ldr	r3, [r3]
 1073 00ae BA69     		ldr	r2, [r7, #24]
 1074 00b0 9A42     		cmp	r2, r3
 1075 00b2 01D1     		bne	.L59
1194:../../../FreeRTOS/Source/tasks.c **** 				{
1195:../../../FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1196:../../../FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1197:../../../FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1198:../../../FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
 1076              		.loc 1 1198 0
 1077 00b4 0123     		movs	r3, #1
 1078 00b6 FB61     		str	r3, [r7, #28]
 1079              	.L59:
1199:../../../FreeRTOS/Source/tasks.c **** 				}
1200:../../../FreeRTOS/Source/tasks.c **** 				else
1201:../../../FreeRTOS/Source/tasks.c **** 				{
1202:../../../FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1203:../../../FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1204:../../../FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1205:../../../FreeRTOS/Source/tasks.c **** 				}
1206:../../../FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc7uEwzT.s 			page 45


1207:../../../FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1208:../../../FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1209:../../../FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1210:../../../FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 1080              		.loc 1 1210 0
 1081 00b8 BB69     		ldr	r3, [r7, #24]
 1082 00ba DB6A     		ldr	r3, [r3, #44]
 1083 00bc 3B61     		str	r3, [r7, #16]
1211:../../../FreeRTOS/Source/tasks.c **** 
1212:../../../FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1213:../../../FreeRTOS/Source/tasks.c **** 				{
1214:../../../FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1215:../../../FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1216:../../../FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 1084              		.loc 1 1216 0
 1085 00be BB69     		ldr	r3, [r7, #24]
 1086 00c0 DA6C     		ldr	r2, [r3, #76]
 1087 00c2 BB69     		ldr	r3, [r7, #24]
 1088 00c4 DB6A     		ldr	r3, [r3, #44]
 1089 00c6 9A42     		cmp	r2, r3
 1090 00c8 02D1     		bne	.L60
1217:../../../FreeRTOS/Source/tasks.c **** 					{
1218:../../../FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 1091              		.loc 1 1218 0
 1092 00ca BB69     		ldr	r3, [r7, #24]
 1093 00cc 3A68     		ldr	r2, [r7]
 1094 00ce DA62     		str	r2, [r3, #44]
 1095              	.L60:
1219:../../../FreeRTOS/Source/tasks.c **** 					}
1220:../../../FreeRTOS/Source/tasks.c **** 					else
1221:../../../FreeRTOS/Source/tasks.c **** 					{
1222:../../../FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1223:../../../FreeRTOS/Source/tasks.c **** 					}
1224:../../../FreeRTOS/Source/tasks.c **** 
1225:../../../FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1226:../../../FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
 1096              		.loc 1 1226 0
 1097 00d0 BB69     		ldr	r3, [r7, #24]
 1098 00d2 3A68     		ldr	r2, [r7]
 1099 00d4 DA64     		str	r2, [r3, #76]
1227:../../../FreeRTOS/Source/tasks.c **** 				}
1228:../../../FreeRTOS/Source/tasks.c **** 				#else
1229:../../../FreeRTOS/Source/tasks.c **** 				{
1230:../../../FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1231:../../../FreeRTOS/Source/tasks.c **** 				}
1232:../../../FreeRTOS/Source/tasks.c **** 				#endif
1233:../../../FreeRTOS/Source/tasks.c **** 
1234:../../../FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1235:../../../FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1236:../../../FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 1100              		.loc 1 1236 0
 1101 00d6 BB69     		ldr	r3, [r7, #24]
 1102 00d8 9B69     		ldr	r3, [r3, #24]
 1103 00da 002B     		cmp	r3, #0
 1104 00dc 04DB     		blt	.L61
1237:../../../FreeRTOS/Source/tasks.c **** 				{
1238:../../../FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
ARM GAS  /tmp/cc7uEwzT.s 			page 46


 1105              		.loc 1 1238 0
 1106 00de 3B68     		ldr	r3, [r7]
 1107 00e0 C3F10702 		rsb	r2, r3, #7
 1108 00e4 BB69     		ldr	r3, [r7, #24]
 1109 00e6 9A61     		str	r2, [r3, #24]
 1110              	.L61:
1239:../../../FreeRTOS/Source/tasks.c **** 				}
1240:../../../FreeRTOS/Source/tasks.c **** 				else
1241:../../../FreeRTOS/Source/tasks.c **** 				{
1242:../../../FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1243:../../../FreeRTOS/Source/tasks.c **** 				}
1244:../../../FreeRTOS/Source/tasks.c **** 
1245:../../../FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1246:../../../FreeRTOS/Source/tasks.c **** 				nothing more than change it's priority variable. However, if
1247:../../../FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1248:../../../FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1249:../../../FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGeneri
 1111              		.loc 1 1249 0
 1112 00e8 BB69     		ldr	r3, [r7, #24]
 1113 00ea 5969     		ldr	r1, [r3, #20]
 1114 00ec 3A69     		ldr	r2, [r7, #16]
 1115 00ee 1346     		mov	r3, r2
 1116 00f0 9B00     		lsls	r3, r3, #2
 1117 00f2 1344     		add	r3, r3, r2
 1118 00f4 9B00     		lsls	r3, r3, #2
 1119 00f6 234A     		ldr	r2, .L66+4
 1120 00f8 1344     		add	r3, r3, r2
 1121 00fa 9942     		cmp	r1, r3
 1122 00fc 01D1     		bne	.L62
 1123              		.loc 1 1249 0 is_stmt 0 discriminator 1
 1124 00fe 0123     		movs	r3, #1
 1125 0100 00E0     		b	.L63
 1126              	.L62:
 1127              		.loc 1 1249 0 discriminator 2
 1128 0102 0023     		movs	r3, #0
 1129              	.L63:
 1130              		.loc 1 1249 0 discriminator 4
 1131 0104 002B     		cmp	r3, #0
 1132 0106 2AD0     		beq	.L64
1250:../../../FreeRTOS/Source/tasks.c **** 				{
1251:../../../FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before adding
1252:../../../FreeRTOS/Source/tasks.c **** 					it to it's new ready list.  As we are in a critical section we
1253:../../../FreeRTOS/Source/tasks.c **** 					can do this even if the scheduler is suspended. */
1254:../../../FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 1133              		.loc 1 1254 0 is_stmt 1
 1134 0108 BB69     		ldr	r3, [r7, #24]
 1135 010a 0433     		adds	r3, r3, #4
 1136 010c 1846     		mov	r0, r3
 1137 010e FFF7FEFF 		bl	uxListRemove
 1138 0112 0346     		mov	r3, r0
 1139 0114 002B     		cmp	r3, #0
 1140 0116 09D1     		bne	.L65
1255:../../../FreeRTOS/Source/tasks.c **** 					{
1256:../../../FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1257:../../../FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1258:../../../FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1259:../../../FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
ARM GAS  /tmp/cc7uEwzT.s 			page 47


 1141              		.loc 1 1259 0
 1142 0118 3B69     		ldr	r3, [r7, #16]
 1143 011a 0122     		movs	r2, #1
 1144 011c 02FA03F3 		lsl	r3, r2, r3
 1145 0120 DA43     		mvns	r2, r3
 1146 0122 194B     		ldr	r3, .L66+8
 1147 0124 1B68     		ldr	r3, [r3]
 1148 0126 1340     		ands	r3, r3, r2
 1149 0128 174A     		ldr	r2, .L66+8
 1150 012a 1360     		str	r3, [r2]
 1151              	.L65:
1260:../../../FreeRTOS/Source/tasks.c **** 					}
1261:../../../FreeRTOS/Source/tasks.c **** 					else
1262:../../../FreeRTOS/Source/tasks.c **** 					{
1263:../../../FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1264:../../../FreeRTOS/Source/tasks.c **** 					}
1265:../../../FreeRTOS/Source/tasks.c **** 					prvReaddTaskToReadyList( pxTCB );
 1152              		.loc 1 1265 0
 1153 012c BB69     		ldr	r3, [r7, #24]
 1154 012e DB6A     		ldr	r3, [r3, #44]
 1155 0130 1A46     		mov	r2, r3
 1156 0132 0123     		movs	r3, #1
 1157 0134 03FA02F2 		lsl	r2, r3, r2
 1158 0138 134B     		ldr	r3, .L66+8
 1159 013a 1B68     		ldr	r3, [r3]
 1160 013c 1343     		orrs	r3, r3, r2
 1161 013e 124A     		ldr	r2, .L66+8
 1162 0140 1360     		str	r3, [r2]
 1163 0142 BB69     		ldr	r3, [r7, #24]
 1164 0144 DA6A     		ldr	r2, [r3, #44]
 1165 0146 1346     		mov	r3, r2
 1166 0148 9B00     		lsls	r3, r3, #2
 1167 014a 1344     		add	r3, r3, r2
 1168 014c 9B00     		lsls	r3, r3, #2
 1169 014e 0D4A     		ldr	r2, .L66+4
 1170 0150 1A44     		add	r2, r2, r3
 1171 0152 BB69     		ldr	r3, [r7, #24]
 1172 0154 0433     		adds	r3, r3, #4
 1173 0156 1046     		mov	r0, r2
 1174 0158 1946     		mov	r1, r3
 1175 015a FFF7FEFF 		bl	vListInsertEnd
 1176              	.L64:
1266:../../../FreeRTOS/Source/tasks.c **** 				}
1267:../../../FreeRTOS/Source/tasks.c **** 				else
1268:../../../FreeRTOS/Source/tasks.c **** 				{
1269:../../../FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1270:../../../FreeRTOS/Source/tasks.c **** 				}
1271:../../../FreeRTOS/Source/tasks.c **** 
1272:../../../FreeRTOS/Source/tasks.c **** 				if( xYieldRequired == pdTRUE )
 1177              		.loc 1 1272 0
 1178 015e FB69     		ldr	r3, [r7, #28]
 1179 0160 012B     		cmp	r3, #1
 1180 0162 07D1     		bne	.L57
1273:../../../FreeRTOS/Source/tasks.c **** 				{
1274:../../../FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 1181              		.loc 1 1274 0
 1182 0164 094B     		ldr	r3, .L66+12
ARM GAS  /tmp/cc7uEwzT.s 			page 48


 1183 0166 4FF08052 		mov	r2, #268435456
 1184 016a 1A60     		str	r2, [r3]
 1185              	@ 1274 "../../../FreeRTOS/Source/tasks.c" 1
 1186 016c BFF34F8F 		dsb
 1187              	@ 0 "" 2
 1188              	@ 1274 "../../../FreeRTOS/Source/tasks.c" 1
 1189 0170 BFF36F8F 		isb
 1190              	@ 0 "" 2
 1191              		.thumb
 1192              	.L57:
1275:../../../FreeRTOS/Source/tasks.c **** 				}
1276:../../../FreeRTOS/Source/tasks.c **** 				else
1277:../../../FreeRTOS/Source/tasks.c **** 				{
1278:../../../FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1279:../../../FreeRTOS/Source/tasks.c **** 				}
1280:../../../FreeRTOS/Source/tasks.c **** 
1281:../../../FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1282:../../../FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1283:../../../FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1284:../../../FreeRTOS/Source/tasks.c **** 			}
1285:../../../FreeRTOS/Source/tasks.c **** 		}
1286:../../../FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1193              		.loc 1 1286 0
 1194 0174 FFF7FEFF 		bl	vPortExitCritical
1287:../../../FreeRTOS/Source/tasks.c **** 	}
 1195              		.loc 1 1287 0
 1196 0178 2437     		adds	r7, r7, #36
 1197              	.LCFI28:
 1198              		.cfi_def_cfa_offset 12
 1199 017a BD46     		mov	sp, r7
 1200              	.LCFI29:
 1201              		.cfi_def_cfa_register 13
 1202              		@ sp needed
 1203 017c 90BD     		pop	{r4, r7, pc}
 1204              	.L67:
 1205 017e 00BF     		.align	2
 1206              	.L66:
 1207 0180 00000000 		.word	pxCurrentTCB
 1208 0184 00000000 		.word	pxReadyTasksLists
 1209 0188 00000000 		.word	uxTopReadyPriority
 1210 018c 04ED00E0 		.word	-536810236
 1211              		.cfi_endproc
 1212              	.LFE9:
 1214              		.section	.text.vTaskSuspend,"ax",%progbits
 1215              		.align	2
 1216              		.global	vTaskSuspend
 1217              		.thumb
 1218              		.thumb_func
 1220              	vTaskSuspend:
 1221              	.LFB10:
1288:../../../FreeRTOS/Source/tasks.c **** 
1289:../../../FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1290:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1291:../../../FreeRTOS/Source/tasks.c **** 
1292:../../../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1293:../../../FreeRTOS/Source/tasks.c **** 
1294:../../../FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
ARM GAS  /tmp/cc7uEwzT.s 			page 49


1295:../../../FreeRTOS/Source/tasks.c **** 	{
 1222              		.loc 1 1295 0
 1223              		.cfi_startproc
 1224              		@ args = 0, pretend = 0, frame = 16
 1225              		@ frame_needed = 1, uses_anonymous_args = 0
 1226 0000 80B5     		push	{r7, lr}
 1227              	.LCFI30:
 1228              		.cfi_def_cfa_offset 8
 1229              		.cfi_offset 7, -8
 1230              		.cfi_offset 14, -4
 1231 0002 84B0     		sub	sp, sp, #16
 1232              	.LCFI31:
 1233              		.cfi_def_cfa_offset 24
 1234 0004 00AF     		add	r7, sp, #0
 1235              	.LCFI32:
 1236              		.cfi_def_cfa_register 7
 1237 0006 7860     		str	r0, [r7, #4]
1296:../../../FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1297:../../../FreeRTOS/Source/tasks.c **** 
1298:../../../FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1238              		.loc 1 1298 0
 1239 0008 FFF7FEFF 		bl	vPortEnterCritical
1299:../../../FreeRTOS/Source/tasks.c **** 		{
1300:../../../FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1301:../../../FreeRTOS/Source/tasks.c **** 			being suspended. */
1302:../../../FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1240              		.loc 1 1302 0
 1241 000c 7B68     		ldr	r3, [r7, #4]
 1242 000e 002B     		cmp	r3, #0
 1243 0010 02D1     		bne	.L69
 1244              		.loc 1 1302 0 is_stmt 0 discriminator 1
 1245 0012 3E4B     		ldr	r3, .L81
 1246 0014 1B68     		ldr	r3, [r3]
 1247 0016 00E0     		b	.L70
 1248              	.L69:
 1249              		.loc 1 1302 0 discriminator 2
 1250 0018 7B68     		ldr	r3, [r7, #4]
 1251              	.L70:
 1252              		.loc 1 1302 0 discriminator 4
 1253 001a FB60     		str	r3, [r7, #12]
1303:../../../FreeRTOS/Source/tasks.c **** 
1304:../../../FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
 1254              		.loc 1 1304 0 is_stmt 1 discriminator 4
 1255 001c FB68     		ldr	r3, [r7, #12]
 1256 001e 1846     		mov	r0, r3
 1257 0020 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 1258 0024 0346     		mov	r3, r0
 1259 0026 2920     		movs	r0, #41
 1260 0028 1946     		mov	r1, r3
 1261 002a FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32
1305:../../../FreeRTOS/Source/tasks.c **** 
1306:../../../FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1307:../../../FreeRTOS/Source/tasks.c **** 			suspended list. */
1308:../../../FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 1262              		.loc 1 1308 0 discriminator 4
 1263 002e FB68     		ldr	r3, [r7, #12]
 1264 0030 0433     		adds	r3, r3, #4
ARM GAS  /tmp/cc7uEwzT.s 			page 50


 1265 0032 1846     		mov	r0, r3
 1266 0034 FFF7FEFF 		bl	uxListRemove
 1267 0038 0346     		mov	r3, r0
 1268 003a 002B     		cmp	r3, #0
 1269 003c 15D1     		bne	.L71
1309:../../../FreeRTOS/Source/tasks.c **** 			{
1310:../../../FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 1270              		.loc 1 1310 0
 1271 003e FB68     		ldr	r3, [r7, #12]
 1272 0040 DA6A     		ldr	r2, [r3, #44]
 1273 0042 3349     		ldr	r1, .L81+4
 1274 0044 1346     		mov	r3, r2
 1275 0046 9B00     		lsls	r3, r3, #2
 1276 0048 1344     		add	r3, r3, r2
 1277 004a 9B00     		lsls	r3, r3, #2
 1278 004c 0B44     		add	r3, r3, r1
 1279 004e 1B68     		ldr	r3, [r3]
 1280 0050 002B     		cmp	r3, #0
 1281 0052 0AD1     		bne	.L71
 1282              		.loc 1 1310 0 is_stmt 0 discriminator 1
 1283 0054 FB68     		ldr	r3, [r7, #12]
 1284 0056 DB6A     		ldr	r3, [r3, #44]
 1285 0058 1A46     		mov	r2, r3
 1286 005a 0123     		movs	r3, #1
 1287 005c 9340     		lsls	r3, r3, r2
 1288 005e DA43     		mvns	r2, r3
 1289 0060 2C4B     		ldr	r3, .L81+8
 1290 0062 1B68     		ldr	r3, [r3]
 1291 0064 1340     		ands	r3, r3, r2
 1292 0066 2B4A     		ldr	r2, .L81+8
 1293 0068 1360     		str	r3, [r2]
 1294              	.L71:
1311:../../../FreeRTOS/Source/tasks.c **** 			}
1312:../../../FreeRTOS/Source/tasks.c **** 			else
1313:../../../FreeRTOS/Source/tasks.c **** 			{
1314:../../../FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1315:../../../FreeRTOS/Source/tasks.c **** 			}
1316:../../../FreeRTOS/Source/tasks.c **** 
1317:../../../FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1318:../../../FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1295              		.loc 1 1318 0 is_stmt 1
 1296 006a FB68     		ldr	r3, [r7, #12]
 1297 006c 9B6A     		ldr	r3, [r3, #40]
 1298 006e 002B     		cmp	r3, #0
 1299 0070 04D0     		beq	.L73
1319:../../../FreeRTOS/Source/tasks.c **** 			{
1320:../../../FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1300              		.loc 1 1320 0
 1301 0072 FB68     		ldr	r3, [r7, #12]
 1302 0074 1833     		adds	r3, r3, #24
 1303 0076 1846     		mov	r0, r3
 1304 0078 FFF7FEFF 		bl	uxListRemove
 1305              	.L73:
1321:../../../FreeRTOS/Source/tasks.c **** 			}
1322:../../../FreeRTOS/Source/tasks.c **** 			else
1323:../../../FreeRTOS/Source/tasks.c **** 			{
1324:../../../FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/cc7uEwzT.s 			page 51


1325:../../../FreeRTOS/Source/tasks.c **** 			}
1326:../../../FreeRTOS/Source/tasks.c **** 			traceMOVED_TASK_TO_SUSPENDED_LIST(pxTCB);
 1306              		.loc 1 1326 0
 1307 007c FB68     		ldr	r3, [r7, #12]
 1308 007e 1846     		mov	r0, r3
 1309 0080 1B21     		movs	r1, #27
 1310 0082 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStopReady
1327:../../../FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
 1311              		.loc 1 1327 0
 1312 0086 FB68     		ldr	r3, [r7, #12]
 1313 0088 0433     		adds	r3, r3, #4
 1314 008a 2348     		ldr	r0, .L81+12
 1315 008c 1946     		mov	r1, r3
 1316 008e FFF7FEFF 		bl	vListInsertEnd
1328:../../../FreeRTOS/Source/tasks.c **** 		}
1329:../../../FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1317              		.loc 1 1329 0
 1318 0092 FFF7FEFF 		bl	vPortExitCritical
1330:../../../FreeRTOS/Source/tasks.c **** 
1331:../../../FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 1319              		.loc 1 1331 0
 1320 0096 1D4B     		ldr	r3, .L81
 1321 0098 1B68     		ldr	r3, [r3]
 1322 009a FA68     		ldr	r2, [r7, #12]
 1323 009c 9A42     		cmp	r2, r3
 1324 009e 27D1     		bne	.L74
1332:../../../FreeRTOS/Source/tasks.c **** 		{
1333:../../../FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
 1325              		.loc 1 1333 0
 1326 00a0 1E4B     		ldr	r3, .L81+16
 1327 00a2 1B68     		ldr	r3, [r3]
 1328 00a4 002B     		cmp	r3, #0
 1329 00a6 16D0     		beq	.L75
1334:../../../FreeRTOS/Source/tasks.c **** 			{
1335:../../../FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1336:../../../FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 1330              		.loc 1 1336 0
 1331 00a8 1D4B     		ldr	r3, .L81+20
 1332 00aa 1B68     		ldr	r3, [r3]
 1333 00ac 002B     		cmp	r3, #0
 1334 00ae 09D0     		beq	.L76
 1335              	.LBB107:
 1336              	.LBB108:
 215:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1337              		.loc 2 215 0 discriminator 1
 1338              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1339 00b0 4FF05003 			mov r3, #80												
 1340 00b4 83F31188 		msr basepri, r3											
 1341 00b8 BFF36F8F 		isb														
 1342 00bc BFF34F8F 		dsb														
 1343              	
 1344              	@ 0 "" 2
 1345              		.thumb
 1346 00c0 BB60     		str	r3, [r7, #8]
 1347              	.L77:
 1348              	.LBE108:
 1349              	.LBE107:
ARM GAS  /tmp/cc7uEwzT.s 			page 52


 1350              		.loc 1 1336 0 discriminator 1
 1351 00c2 FEE7     		b	.L77
 1352              	.L76:
1337:../../../FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1353              		.loc 1 1337 0
 1354 00c4 174B     		ldr	r3, .L81+24
 1355 00c6 4FF08052 		mov	r2, #268435456
 1356 00ca 1A60     		str	r2, [r3]
 1357              	@ 1337 "../../../FreeRTOS/Source/tasks.c" 1
 1358 00cc BFF34F8F 		dsb
 1359              	@ 0 "" 2
 1360              	@ 1337 "../../../FreeRTOS/Source/tasks.c" 1
 1361 00d0 BFF36F8F 		isb
 1362              	@ 0 "" 2
 1363              		.thumb
 1364 00d4 16E0     		b	.L68
 1365              	.L75:
1338:../../../FreeRTOS/Source/tasks.c **** 			}
1339:../../../FreeRTOS/Source/tasks.c **** 			else
1340:../../../FreeRTOS/Source/tasks.c **** 			{
1341:../../../FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1342:../../../FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1343:../../../FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1344:../../../FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 1366              		.loc 1 1344 0
 1367 00d6 104B     		ldr	r3, .L81+12
 1368 00d8 1A68     		ldr	r2, [r3]
 1369 00da 134B     		ldr	r3, .L81+28
 1370 00dc 1B68     		ldr	r3, [r3]
 1371 00de 9A42     		cmp	r2, r3
 1372 00e0 03D1     		bne	.L79
1345:../../../FreeRTOS/Source/tasks.c **** 				{
1346:../../../FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1347:../../../FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1348:../../../FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1349:../../../FreeRTOS/Source/tasks.c **** 					is. */
1350:../../../FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
 1373              		.loc 1 1350 0
 1374 00e2 0A4B     		ldr	r3, .L81
 1375 00e4 0022     		movs	r2, #0
 1376 00e6 1A60     		str	r2, [r3]
 1377 00e8 0CE0     		b	.L68
 1378              	.L79:
1351:../../../FreeRTOS/Source/tasks.c **** 				}
1352:../../../FreeRTOS/Source/tasks.c **** 				else
1353:../../../FreeRTOS/Source/tasks.c **** 				{
1354:../../../FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
 1379              		.loc 1 1354 0
 1380 00ea FFF7FEFF 		bl	vTaskSwitchContext
 1381 00ee 09E0     		b	.L68
 1382              	.L74:
1355:../../../FreeRTOS/Source/tasks.c **** 				}
1356:../../../FreeRTOS/Source/tasks.c **** 			}
1357:../../../FreeRTOS/Source/tasks.c **** 		}
1358:../../../FreeRTOS/Source/tasks.c **** 		else
1359:../../../FreeRTOS/Source/tasks.c **** 		{
1360:../../../FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
ARM GAS  /tmp/cc7uEwzT.s 			page 53


 1383              		.loc 1 1360 0
 1384 00f0 0A4B     		ldr	r3, .L81+16
 1385 00f2 1B68     		ldr	r3, [r3]
 1386 00f4 002B     		cmp	r3, #0
 1387 00f6 05D0     		beq	.L68
1361:../../../FreeRTOS/Source/tasks.c **** 			{
1362:../../../FreeRTOS/Source/tasks.c **** 				/* A task other than the currently running task was suspended,
1363:../../../FreeRTOS/Source/tasks.c **** 				reset the next expected unblock time in case it referred to the
1364:../../../FreeRTOS/Source/tasks.c **** 				task that is now in the Suspended state. */
1365:../../../FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
 1388              		.loc 1 1365 0
 1389 00f8 FFF7FEFF 		bl	vPortEnterCritical
1366:../../../FreeRTOS/Source/tasks.c **** 				{
1367:../../../FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
 1390              		.loc 1 1367 0
 1391 00fc FFF7FEFF 		bl	prvResetNextTaskUnblockTime
1368:../../../FreeRTOS/Source/tasks.c **** 				}
1369:../../../FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
 1392              		.loc 1 1369 0
 1393 0100 FFF7FEFF 		bl	vPortExitCritical
 1394              	.L68:
1370:../../../FreeRTOS/Source/tasks.c **** 			}
1371:../../../FreeRTOS/Source/tasks.c **** 			else
1372:../../../FreeRTOS/Source/tasks.c **** 			{
1373:../../../FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1374:../../../FreeRTOS/Source/tasks.c **** 			}
1375:../../../FreeRTOS/Source/tasks.c **** 		}
1376:../../../FreeRTOS/Source/tasks.c **** 	}
 1395              		.loc 1 1376 0
 1396 0104 1037     		adds	r7, r7, #16
 1397              	.LCFI33:
 1398              		.cfi_def_cfa_offset 8
 1399 0106 BD46     		mov	sp, r7
 1400              	.LCFI34:
 1401              		.cfi_def_cfa_register 13
 1402              		@ sp needed
 1403 0108 80BD     		pop	{r7, pc}
 1404              	.L82:
 1405 010a 00BF     		.align	2
 1406              	.L81:
 1407 010c 00000000 		.word	pxCurrentTCB
 1408 0110 00000000 		.word	pxReadyTasksLists
 1409 0114 00000000 		.word	uxTopReadyPriority
 1410 0118 00000000 		.word	xSuspendedTaskList
 1411 011c 00000000 		.word	xSchedulerRunning
 1412 0120 00000000 		.word	uxSchedulerSuspended
 1413 0124 04ED00E0 		.word	-536810236
 1414 0128 00000000 		.word	uxCurrentNumberOfTasks
 1415              		.cfi_endproc
 1416              	.LFE10:
 1418              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
 1419              		.align	2
 1420              		.thumb
 1421              		.thumb_func
 1423              	prvTaskIsTaskSuspended:
 1424              	.LFB11:
1377:../../../FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc7uEwzT.s 			page 54


1378:../../../FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1379:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1380:../../../FreeRTOS/Source/tasks.c **** 
1381:../../../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1382:../../../FreeRTOS/Source/tasks.c **** 
1383:../../../FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1384:../../../FreeRTOS/Source/tasks.c **** 	{
 1425              		.loc 1 1384 0
 1426              		.cfi_startproc
 1427              		@ args = 0, pretend = 0, frame = 24
 1428              		@ frame_needed = 1, uses_anonymous_args = 0
 1429              		@ link register save eliminated.
 1430 0000 80B4     		push	{r7}
 1431              	.LCFI35:
 1432              		.cfi_def_cfa_offset 4
 1433              		.cfi_offset 7, -4
 1434 0002 87B0     		sub	sp, sp, #28
 1435              	.LCFI36:
 1436              		.cfi_def_cfa_offset 32
 1437 0004 00AF     		add	r7, sp, #0
 1438              	.LCFI37:
 1439              		.cfi_def_cfa_register 7
 1440 0006 7860     		str	r0, [r7, #4]
1385:../../../FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 1441              		.loc 1 1385 0
 1442 0008 0023     		movs	r3, #0
 1443 000a 7B61     		str	r3, [r7, #20]
1386:../../../FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 1444              		.loc 1 1386 0
 1445 000c 7B68     		ldr	r3, [r7, #4]
 1446 000e 3B61     		str	r3, [r7, #16]
1387:../../../FreeRTOS/Source/tasks.c **** 
1388:../../../FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1389:../../../FreeRTOS/Source/tasks.c **** 		section. */
1390:../../../FreeRTOS/Source/tasks.c **** 
1391:../../../FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1392:../../../FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
 1447              		.loc 1 1392 0
 1448 0010 7B68     		ldr	r3, [r7, #4]
 1449 0012 002B     		cmp	r3, #0
 1450 0014 09D1     		bne	.L84
 1451              	.LBB109:
 1452              	.LBB110:
 215:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1453              		.loc 2 215 0 discriminator 1
 1454              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1455 0016 4FF05003 			mov r3, #80												
 1456 001a 83F31188 		msr basepri, r3											
 1457 001e BFF36F8F 		isb														
 1458 0022 BFF34F8F 		dsb														
 1459              	
 1460              	@ 0 "" 2
 1461              		.thumb
 1462 0026 FB60     		str	r3, [r7, #12]
 1463              	.L85:
 1464              	.LBE110:
 1465              	.LBE109:
ARM GAS  /tmp/cc7uEwzT.s 			page 55


 1466              		.loc 1 1392 0 discriminator 1
 1467 0028 FEE7     		b	.L85
 1468              	.L84:
1393:../../../FreeRTOS/Source/tasks.c **** 
1394:../../../FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1395:../../../FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
 1469              		.loc 1 1395 0
 1470 002a 3B69     		ldr	r3, [r7, #16]
 1471 002c 5B69     		ldr	r3, [r3, #20]
 1472 002e 0F4A     		ldr	r2, .L92
 1473 0030 9342     		cmp	r3, r2
 1474 0032 01D1     		bne	.L86
 1475              		.loc 1 1395 0 is_stmt 0 discriminator 1
 1476 0034 0123     		movs	r3, #1
 1477 0036 00E0     		b	.L87
 1478              	.L86:
 1479              		.loc 1 1395 0 discriminator 2
 1480 0038 0023     		movs	r3, #0
 1481              	.L87:
 1482              		.loc 1 1395 0 discriminator 4
 1483 003a 002B     		cmp	r3, #0
 1484 003c 0FD0     		beq	.L88
1396:../../../FreeRTOS/Source/tasks.c **** 		{
1397:../../../FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1398:../../../FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 1485              		.loc 1 1398 0 is_stmt 1
 1486 003e 3B69     		ldr	r3, [r7, #16]
 1487 0040 9B6A     		ldr	r3, [r3, #40]
 1488 0042 0B4A     		ldr	r2, .L92+4
 1489 0044 9342     		cmp	r3, r2
 1490 0046 0AD0     		beq	.L88
1399:../../../FreeRTOS/Source/tasks.c **** 			{
1400:../../../FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1401:../../../FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1402:../../../FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 1491              		.loc 1 1402 0
 1492 0048 3B69     		ldr	r3, [r7, #16]
 1493 004a 9B6A     		ldr	r3, [r3, #40]
 1494 004c 002B     		cmp	r3, #0
 1495 004e 01D1     		bne	.L89
 1496              		.loc 1 1402 0 is_stmt 0 discriminator 1
 1497 0050 0123     		movs	r3, #1
 1498 0052 00E0     		b	.L90
 1499              	.L89:
 1500              		.loc 1 1402 0 discriminator 2
 1501 0054 0023     		movs	r3, #0
 1502              	.L90:
 1503              		.loc 1 1402 0 discriminator 4
 1504 0056 002B     		cmp	r3, #0
 1505 0058 01D0     		beq	.L88
1403:../../../FreeRTOS/Source/tasks.c **** 				{
1404:../../../FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 1506              		.loc 1 1404 0 is_stmt 1
 1507 005a 0123     		movs	r3, #1
 1508 005c 7B61     		str	r3, [r7, #20]
 1509              	.L88:
1405:../../../FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/cc7uEwzT.s 			page 56


1406:../../../FreeRTOS/Source/tasks.c **** 				else
1407:../../../FreeRTOS/Source/tasks.c **** 				{
1408:../../../FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1409:../../../FreeRTOS/Source/tasks.c **** 				}
1410:../../../FreeRTOS/Source/tasks.c **** 			}
1411:../../../FreeRTOS/Source/tasks.c **** 			else
1412:../../../FreeRTOS/Source/tasks.c **** 			{
1413:../../../FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1414:../../../FreeRTOS/Source/tasks.c **** 			}
1415:../../../FreeRTOS/Source/tasks.c **** 		}
1416:../../../FreeRTOS/Source/tasks.c **** 		else
1417:../../../FreeRTOS/Source/tasks.c **** 		{
1418:../../../FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1419:../../../FreeRTOS/Source/tasks.c **** 		}
1420:../../../FreeRTOS/Source/tasks.c **** 
1421:../../../FreeRTOS/Source/tasks.c **** 		return xReturn;
 1510              		.loc 1 1421 0
 1511 005e 7B69     		ldr	r3, [r7, #20]
1422:../../../FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1512              		.loc 1 1422 0
 1513 0060 1846     		mov	r0, r3
 1514 0062 1C37     		adds	r7, r7, #28
 1515              	.LCFI38:
 1516              		.cfi_def_cfa_offset 4
 1517 0064 BD46     		mov	sp, r7
 1518              	.LCFI39:
 1519              		.cfi_def_cfa_register 13
 1520              		@ sp needed
 1521 0066 5DF8047B 		ldr	r7, [sp], #4
 1522              	.LCFI40:
 1523              		.cfi_restore 7
 1524              		.cfi_def_cfa_offset 0
 1525 006a 7047     		bx	lr
 1526              	.L93:
 1527              		.align	2
 1528              	.L92:
 1529 006c 00000000 		.word	xSuspendedTaskList
 1530 0070 00000000 		.word	xPendingReadyList
 1531              		.cfi_endproc
 1532              	.LFE11:
 1534              		.section	.text.vTaskResume,"ax",%progbits
 1535              		.align	2
 1536              		.global	vTaskResume
 1537              		.thumb
 1538              		.thumb_func
 1540              	vTaskResume:
 1541              	.LFB12:
1423:../../../FreeRTOS/Source/tasks.c **** 
1424:../../../FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1425:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1426:../../../FreeRTOS/Source/tasks.c **** 
1427:../../../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1428:../../../FreeRTOS/Source/tasks.c **** 
1429:../../../FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1430:../../../FreeRTOS/Source/tasks.c **** 	{
 1542              		.loc 1 1430 0
 1543              		.cfi_startproc
ARM GAS  /tmp/cc7uEwzT.s 			page 57


 1544              		@ args = 0, pretend = 0, frame = 16
 1545              		@ frame_needed = 1, uses_anonymous_args = 0
 1546 0000 80B5     		push	{r7, lr}
 1547              	.LCFI41:
 1548              		.cfi_def_cfa_offset 8
 1549              		.cfi_offset 7, -8
 1550              		.cfi_offset 14, -4
 1551 0002 84B0     		sub	sp, sp, #16
 1552              	.LCFI42:
 1553              		.cfi_def_cfa_offset 24
 1554 0004 00AF     		add	r7, sp, #0
 1555              	.LCFI43:
 1556              		.cfi_def_cfa_register 7
 1557 0006 7860     		str	r0, [r7, #4]
1431:../../../FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1558              		.loc 1 1431 0
 1559 0008 7B68     		ldr	r3, [r7, #4]
 1560 000a FB60     		str	r3, [r7, #12]
1432:../../../FreeRTOS/Source/tasks.c **** 
1433:../../../FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1434:../../../FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
 1561              		.loc 1 1434 0
 1562 000c 7B68     		ldr	r3, [r7, #4]
 1563 000e 002B     		cmp	r3, #0
 1564 0010 09D1     		bne	.L95
 1565              	.LBB111:
 1566              	.LBB112:
 215:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1567              		.loc 2 215 0 discriminator 1
 1568              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1569 0012 4FF05003 			mov r3, #80												
 1570 0016 83F31188 		msr basepri, r3											
 1571 001a BFF36F8F 		isb														
 1572 001e BFF34F8F 		dsb														
 1573              	
 1574              	@ 0 "" 2
 1575              		.thumb
 1576 0022 BB60     		str	r3, [r7, #8]
 1577              	.L96:
 1578              	.LBE112:
 1579              	.LBE111:
 1580              		.loc 1 1434 0 discriminator 1
 1581 0024 FEE7     		b	.L96
 1582              	.L95:
1435:../../../FreeRTOS/Source/tasks.c **** 
1436:../../../FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1437:../../../FreeRTOS/Source/tasks.c **** 		currently executing task. */
1438:../../../FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 1583              		.loc 1 1438 0
 1584 0026 FB68     		ldr	r3, [r7, #12]
 1585 0028 002B     		cmp	r3, #0
 1586 002a 48D0     		beq	.L94
 1587              		.loc 1 1438 0 is_stmt 0 discriminator 1
 1588 002c 254B     		ldr	r3, .L99
 1589 002e 1B68     		ldr	r3, [r3]
 1590 0030 FA68     		ldr	r2, [r7, #12]
 1591 0032 9A42     		cmp	r2, r3
ARM GAS  /tmp/cc7uEwzT.s 			page 58


 1592 0034 43D0     		beq	.L94
1439:../../../FreeRTOS/Source/tasks.c **** 		{
1440:../../../FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 1593              		.loc 1 1440 0 is_stmt 1
 1594 0036 FFF7FEFF 		bl	vPortEnterCritical
1441:../../../FreeRTOS/Source/tasks.c **** 			{
1442:../../../FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 1595              		.loc 1 1442 0
 1596 003a F868     		ldr	r0, [r7, #12]
 1597 003c FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1598 0040 0346     		mov	r3, r0
 1599 0042 012B     		cmp	r3, #1
 1600 0044 39D1     		bne	.L98
1443:../../../FreeRTOS/Source/tasks.c **** 				{
1444:../../../FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
 1601              		.loc 1 1444 0
 1602 0046 FB68     		ldr	r3, [r7, #12]
 1603 0048 1846     		mov	r0, r3
 1604 004a FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 1605 004e 0346     		mov	r3, r0
 1606 0050 2A20     		movs	r0, #42
 1607 0052 1946     		mov	r1, r3
 1608 0054 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32
1445:../../../FreeRTOS/Source/tasks.c **** 
1446:../../../FreeRTOS/Source/tasks.c **** 					/* As we are in a critical section we can access the ready
1447:../../../FreeRTOS/Source/tasks.c **** 					lists even if the scheduler is suspended. */
1448:../../../FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
 1609              		.loc 1 1448 0
 1610 0058 FB68     		ldr	r3, [r7, #12]
 1611 005a 0433     		adds	r3, r3, #4
 1612 005c 1846     		mov	r0, r3
 1613 005e FFF7FEFF 		bl	uxListRemove
1449:../../../FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1614              		.loc 1 1449 0
 1615 0062 FB68     		ldr	r3, [r7, #12]
 1616 0064 1846     		mov	r0, r3
 1617 0066 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStartReady
 1618 006a FB68     		ldr	r3, [r7, #12]
 1619 006c DB6A     		ldr	r3, [r3, #44]
 1620 006e 1A46     		mov	r2, r3
 1621 0070 0123     		movs	r3, #1
 1622 0072 03FA02F2 		lsl	r2, r3, r2
 1623 0076 144B     		ldr	r3, .L99+4
 1624 0078 1B68     		ldr	r3, [r3]
 1625 007a 1343     		orrs	r3, r3, r2
 1626 007c 124A     		ldr	r2, .L99+4
 1627 007e 1360     		str	r3, [r2]
 1628 0080 FB68     		ldr	r3, [r7, #12]
 1629 0082 DA6A     		ldr	r2, [r3, #44]
 1630 0084 1346     		mov	r3, r2
 1631 0086 9B00     		lsls	r3, r3, #2
 1632 0088 1344     		add	r3, r3, r2
 1633 008a 9B00     		lsls	r3, r3, #2
 1634 008c 0F4A     		ldr	r2, .L99+8
 1635 008e 1A44     		add	r2, r2, r3
 1636 0090 FB68     		ldr	r3, [r7, #12]
 1637 0092 0433     		adds	r3, r3, #4
ARM GAS  /tmp/cc7uEwzT.s 			page 59


 1638 0094 1046     		mov	r0, r2
 1639 0096 1946     		mov	r1, r3
 1640 0098 FFF7FEFF 		bl	vListInsertEnd
1450:../../../FreeRTOS/Source/tasks.c **** 
1451:../../../FreeRTOS/Source/tasks.c **** 					/* We may have just resumed a higher priority task. */
1452:../../../FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1641              		.loc 1 1452 0
 1642 009c FB68     		ldr	r3, [r7, #12]
 1643 009e DA6A     		ldr	r2, [r3, #44]
 1644 00a0 084B     		ldr	r3, .L99
 1645 00a2 1B68     		ldr	r3, [r3]
 1646 00a4 DB6A     		ldr	r3, [r3, #44]
 1647 00a6 9A42     		cmp	r2, r3
 1648 00a8 07D3     		bcc	.L98
1453:../../../FreeRTOS/Source/tasks.c **** 					{
1454:../../../FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1455:../../../FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1456:../../../FreeRTOS/Source/tasks.c **** 						next yield. */
1457:../../../FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
 1649              		.loc 1 1457 0
 1650 00aa 094B     		ldr	r3, .L99+12
 1651 00ac 4FF08052 		mov	r2, #268435456
 1652 00b0 1A60     		str	r2, [r3]
 1653              	@ 1457 "../../../FreeRTOS/Source/tasks.c" 1
 1654 00b2 BFF34F8F 		dsb
 1655              	@ 0 "" 2
 1656              	@ 1457 "../../../FreeRTOS/Source/tasks.c" 1
 1657 00b6 BFF36F8F 		isb
 1658              	@ 0 "" 2
 1659              		.thumb
 1660              	.L98:
1458:../../../FreeRTOS/Source/tasks.c **** 					}
1459:../../../FreeRTOS/Source/tasks.c **** 					else
1460:../../../FreeRTOS/Source/tasks.c **** 					{
1461:../../../FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1462:../../../FreeRTOS/Source/tasks.c **** 					}
1463:../../../FreeRTOS/Source/tasks.c **** 				}
1464:../../../FreeRTOS/Source/tasks.c **** 				else
1465:../../../FreeRTOS/Source/tasks.c **** 				{
1466:../../../FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1467:../../../FreeRTOS/Source/tasks.c **** 				}
1468:../../../FreeRTOS/Source/tasks.c **** 			}
1469:../../../FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 1661              		.loc 1 1469 0
 1662 00ba FFF7FEFF 		bl	vPortExitCritical
 1663              	.L94:
1470:../../../FreeRTOS/Source/tasks.c **** 		}
1471:../../../FreeRTOS/Source/tasks.c **** 		else
1472:../../../FreeRTOS/Source/tasks.c **** 		{
1473:../../../FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1474:../../../FreeRTOS/Source/tasks.c **** 		}
1475:../../../FreeRTOS/Source/tasks.c **** 	}
 1664              		.loc 1 1475 0
 1665 00be 1037     		adds	r7, r7, #16
 1666              	.LCFI44:
 1667              		.cfi_def_cfa_offset 8
 1668 00c0 BD46     		mov	sp, r7
ARM GAS  /tmp/cc7uEwzT.s 			page 60


 1669              	.LCFI45:
 1670              		.cfi_def_cfa_register 13
 1671              		@ sp needed
 1672 00c2 80BD     		pop	{r7, pc}
 1673              	.L100:
 1674              		.align	2
 1675              	.L99:
 1676 00c4 00000000 		.word	pxCurrentTCB
 1677 00c8 00000000 		.word	uxTopReadyPriority
 1678 00cc 00000000 		.word	pxReadyTasksLists
 1679 00d0 04ED00E0 		.word	-536810236
 1680              		.cfi_endproc
 1681              	.LFE12:
 1683              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1684              		.align	2
 1685              		.global	xTaskResumeFromISR
 1686              		.thumb
 1687              		.thumb_func
 1689              	xTaskResumeFromISR:
 1690              	.LFB13:
1476:../../../FreeRTOS/Source/tasks.c **** 
1477:../../../FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1478:../../../FreeRTOS/Source/tasks.c **** 
1479:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1480:../../../FreeRTOS/Source/tasks.c **** 
1481:../../../FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1482:../../../FreeRTOS/Source/tasks.c **** 
1483:../../../FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1484:../../../FreeRTOS/Source/tasks.c **** 	{
 1691              		.loc 1 1484 0
 1692              		.cfi_startproc
 1693              		@ args = 0, pretend = 0, frame = 40
 1694              		@ frame_needed = 1, uses_anonymous_args = 0
 1695 0000 80B5     		push	{r7, lr}
 1696              	.LCFI46:
 1697              		.cfi_def_cfa_offset 8
 1698              		.cfi_offset 7, -8
 1699              		.cfi_offset 14, -4
 1700 0002 8AB0     		sub	sp, sp, #40
 1701              	.LCFI47:
 1702              		.cfi_def_cfa_offset 48
 1703 0004 00AF     		add	r7, sp, #0
 1704              	.LCFI48:
 1705              		.cfi_def_cfa_register 7
 1706 0006 7860     		str	r0, [r7, #4]
1485:../../../FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1707              		.loc 1 1485 0
 1708 0008 0023     		movs	r3, #0
 1709 000a 7B62     		str	r3, [r7, #36]
1486:../../../FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1710              		.loc 1 1486 0
 1711 000c 7B68     		ldr	r3, [r7, #4]
 1712 000e 3B62     		str	r3, [r7, #32]
1487:../../../FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1488:../../../FreeRTOS/Source/tasks.c **** 
1489:../../../FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
 1713              		.loc 1 1489 0
ARM GAS  /tmp/cc7uEwzT.s 			page 61


 1714 0010 7B68     		ldr	r3, [r7, #4]
 1715 0012 002B     		cmp	r3, #0
 1716 0014 09D1     		bne	.L102
 1717              	.LBB113:
 1718              	.LBB114:
 215:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1719              		.loc 2 215 0 discriminator 1
 1720              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1721 0016 4FF05003 			mov r3, #80												
 1722 001a 83F31188 		msr basepri, r3											
 1723 001e BFF36F8F 		isb														
 1724 0022 BFF34F8F 		dsb														
 1725              	
 1726              	@ 0 "" 2
 1727              		.thumb
 1728 0026 BB61     		str	r3, [r7, #24]
 1729              	.L103:
 1730              	.LBE114:
 1731              	.LBE113:
 1732              		.loc 1 1489 0 discriminator 1
 1733 0028 FEE7     		b	.L103
 1734              	.L102:
1490:../../../FreeRTOS/Source/tasks.c **** 
1491:../../../FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1492:../../../FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1493:../../../FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1494:../../../FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1495:../../../FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1496:../../../FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1497:../../../FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1498:../../../FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1499:../../../FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1500:../../../FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1501:../../../FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1502:../../../FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1503:../../../FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1504:../../../FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1505:../../../FreeRTOS/Source/tasks.c **** 		provided on the following link:
1506:../../../FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1507:../../../FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1735              		.loc 1 1507 0
 1736 002a FFF7FEFF 		bl	vPortValidateInterruptPriority
 1737              	.LBB115:
 1738              	.LBB116:
 231:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1739              		.loc 2 231 0
 1740              	@ 231 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1741 002e EFF31182 			mrs r2, basepri											
 1742 0032 4FF05003 		mov r3, #80												
 1743 0036 83F31188 		msr basepri, r3											
 1744 003a BFF36F8F 		isb														
 1745 003e BFF34F8F 		dsb														
 1746              	
 1747              	@ 0 "" 2
 1748              		.thumb
 1749 0042 7A61     		str	r2, [r7, #20]
 1750 0044 3B61     		str	r3, [r7, #16]
ARM GAS  /tmp/cc7uEwzT.s 			page 62


 243:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 1751              		.loc 2 243 0
 1752 0046 7B69     		ldr	r3, [r7, #20]
 1753              	.LBE116:
 1754              	.LBE115:
1508:../../../FreeRTOS/Source/tasks.c **** 
1509:../../../FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1755              		.loc 1 1509 0
 1756 0048 FB61     		str	r3, [r7, #28]
1510:../../../FreeRTOS/Source/tasks.c **** 		{
1511:../../../FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 1757              		.loc 1 1511 0
 1758 004a 386A     		ldr	r0, [r7, #32]
 1759 004c FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1760 0050 0346     		mov	r3, r0
 1761 0052 012B     		cmp	r3, #1
 1762 0054 3ED1     		bne	.L105
1512:../../../FreeRTOS/Source/tasks.c **** 			{
1513:../../../FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
 1763              		.loc 1 1513 0
 1764 0056 3B6A     		ldr	r3, [r7, #32]
 1765 0058 1846     		mov	r0, r3
 1766 005a FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 1767 005e 0346     		mov	r3, r0
 1768 0060 2B20     		movs	r0, #43
 1769 0062 1946     		mov	r1, r3
 1770 0064 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32
1514:../../../FreeRTOS/Source/tasks.c **** 
1515:../../../FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1516:../../../FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 1771              		.loc 1 1516 0
 1772 0068 1F4B     		ldr	r3, .L110
 1773 006a 1B68     		ldr	r3, [r3]
 1774 006c 002B     		cmp	r3, #0
 1775 006e 2BD1     		bne	.L106
1517:../../../FreeRTOS/Source/tasks.c **** 				{
1518:../../../FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1519:../../../FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1520:../../../FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1776              		.loc 1 1520 0
 1777 0070 3B6A     		ldr	r3, [r7, #32]
 1778 0072 DA6A     		ldr	r2, [r3, #44]
 1779 0074 1D4B     		ldr	r3, .L110+4
 1780 0076 1B68     		ldr	r3, [r3]
 1781 0078 DB6A     		ldr	r3, [r3, #44]
 1782 007a 9A42     		cmp	r2, r3
 1783 007c 01D3     		bcc	.L107
1521:../../../FreeRTOS/Source/tasks.c **** 					{
1522:../../../FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
 1784              		.loc 1 1522 0
 1785 007e 0123     		movs	r3, #1
 1786 0080 7B62     		str	r3, [r7, #36]
 1787              	.L107:
1523:../../../FreeRTOS/Source/tasks.c **** 					}
1524:../../../FreeRTOS/Source/tasks.c **** 					else
1525:../../../FreeRTOS/Source/tasks.c **** 					{
1526:../../../FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/cc7uEwzT.s 			page 63


1527:../../../FreeRTOS/Source/tasks.c **** 					}
1528:../../../FreeRTOS/Source/tasks.c **** 
1529:../../../FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
 1788              		.loc 1 1529 0
 1789 0082 3B6A     		ldr	r3, [r7, #32]
 1790 0084 0433     		adds	r3, r3, #4
 1791 0086 1846     		mov	r0, r3
 1792 0088 FFF7FEFF 		bl	uxListRemove
1530:../../../FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1793              		.loc 1 1530 0
 1794 008c 3B6A     		ldr	r3, [r7, #32]
 1795 008e 1846     		mov	r0, r3
 1796 0090 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStartReady
 1797 0094 3B6A     		ldr	r3, [r7, #32]
 1798 0096 DB6A     		ldr	r3, [r3, #44]
 1799 0098 1A46     		mov	r2, r3
 1800 009a 0123     		movs	r3, #1
 1801 009c 03FA02F2 		lsl	r2, r3, r2
 1802 00a0 134B     		ldr	r3, .L110+8
 1803 00a2 1B68     		ldr	r3, [r3]
 1804 00a4 1343     		orrs	r3, r3, r2
 1805 00a6 124A     		ldr	r2, .L110+8
 1806 00a8 1360     		str	r3, [r2]
 1807 00aa 3B6A     		ldr	r3, [r7, #32]
 1808 00ac DA6A     		ldr	r2, [r3, #44]
 1809 00ae 1346     		mov	r3, r2
 1810 00b0 9B00     		lsls	r3, r3, #2
 1811 00b2 1344     		add	r3, r3, r2
 1812 00b4 9B00     		lsls	r3, r3, #2
 1813 00b6 0F4A     		ldr	r2, .L110+12
 1814 00b8 1A44     		add	r2, r2, r3
 1815 00ba 3B6A     		ldr	r3, [r7, #32]
 1816 00bc 0433     		adds	r3, r3, #4
 1817 00be 1046     		mov	r0, r2
 1818 00c0 1946     		mov	r1, r3
 1819 00c2 FFF7FEFF 		bl	vListInsertEnd
 1820 00c6 05E0     		b	.L105
 1821              	.L106:
1531:../../../FreeRTOS/Source/tasks.c **** 				}
1532:../../../FreeRTOS/Source/tasks.c **** 				else
1533:../../../FreeRTOS/Source/tasks.c **** 				{
1534:../../../FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1535:../../../FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1536:../../../FreeRTOS/Source/tasks.c **** 					unsuspended. */
1537:../../../FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 1822              		.loc 1 1537 0
 1823 00c8 3B6A     		ldr	r3, [r7, #32]
 1824 00ca 1833     		adds	r3, r3, #24
 1825 00cc 0A48     		ldr	r0, .L110+16
 1826 00ce 1946     		mov	r1, r3
 1827 00d0 FFF7FEFF 		bl	vListInsertEnd
 1828              	.L105:
 1829 00d4 FB69     		ldr	r3, [r7, #28]
 1830 00d6 FB60     		str	r3, [r7, #12]
 1831              	.LBB117:
 1832              	.LBB118:
 1833              		.loc 2 249 0
ARM GAS  /tmp/cc7uEwzT.s 			page 64


 1834 00d8 FB68     		ldr	r3, [r7, #12]
 1835              	@ 249 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1836 00da 83F31188 			msr basepri, r3	
 1837              	@ 0 "" 2
 1838              		.thumb
 1839              	.LBE118:
 1840              	.LBE117:
1538:../../../FreeRTOS/Source/tasks.c **** 				}
1539:../../../FreeRTOS/Source/tasks.c **** 			}
1540:../../../FreeRTOS/Source/tasks.c **** 			else
1541:../../../FreeRTOS/Source/tasks.c **** 			{
1542:../../../FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1543:../../../FreeRTOS/Source/tasks.c **** 			}
1544:../../../FreeRTOS/Source/tasks.c **** 		}
1545:../../../FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1546:../../../FreeRTOS/Source/tasks.c **** 
1547:../../../FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
 1841              		.loc 1 1547 0
 1842 00de 7B6A     		ldr	r3, [r7, #36]
1548:../../../FreeRTOS/Source/tasks.c **** 	}
 1843              		.loc 1 1548 0
 1844 00e0 1846     		mov	r0, r3
 1845 00e2 2837     		adds	r7, r7, #40
 1846              	.LCFI49:
 1847              		.cfi_def_cfa_offset 8
 1848 00e4 BD46     		mov	sp, r7
 1849              	.LCFI50:
 1850              		.cfi_def_cfa_register 13
 1851              		@ sp needed
 1852 00e6 80BD     		pop	{r7, pc}
 1853              	.L111:
 1854              		.align	2
 1855              	.L110:
 1856 00e8 00000000 		.word	uxSchedulerSuspended
 1857 00ec 00000000 		.word	pxCurrentTCB
 1858 00f0 00000000 		.word	uxTopReadyPriority
 1859 00f4 00000000 		.word	pxReadyTasksLists
 1860 00f8 00000000 		.word	xPendingReadyList
 1861              		.cfi_endproc
 1862              	.LFE13:
 1864              		.section	.rodata
 1865              		.align	2
 1866              	.LC0:
 1867 0000 49444C45 		.ascii	"IDLE\000"
 1867      00
 1868              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1869              		.align	2
 1870              		.global	vTaskStartScheduler
 1871              		.thumb
 1872              		.thumb_func
 1874              	vTaskStartScheduler:
 1875              	.LFB14:
1549:../../../FreeRTOS/Source/tasks.c **** 
1550:../../../FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1551:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1552:../../../FreeRTOS/Source/tasks.c **** 
1553:../../../FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
ARM GAS  /tmp/cc7uEwzT.s 			page 65


1554:../../../FreeRTOS/Source/tasks.c **** {
 1876              		.loc 1 1554 0
 1877              		.cfi_startproc
 1878              		@ args = 0, pretend = 0, frame = 16
 1879              		@ frame_needed = 1, uses_anonymous_args = 0
 1880 0000 80B5     		push	{r7, lr}
 1881              	.LCFI51:
 1882              		.cfi_def_cfa_offset 8
 1883              		.cfi_offset 7, -8
 1884              		.cfi_offset 14, -4
 1885 0002 88B0     		sub	sp, sp, #32
 1886              	.LCFI52:
 1887              		.cfi_def_cfa_offset 40
 1888 0004 04AF     		add	r7, sp, #16
 1889              	.LCFI53:
 1890              		.cfi_def_cfa 7, 24
1555:../../../FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1556:../../../FreeRTOS/Source/tasks.c **** 
1557:../../../FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1558:../../../FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
1559:../../../FreeRTOS/Source/tasks.c **** 	{
1560:../../../FreeRTOS/Source/tasks.c **** 		/* Create the idle task, storing its handle in xIdleTaskHandle so it can
1561:../../../FreeRTOS/Source/tasks.c **** 		be returned by the xTaskGetIdleTaskHandle() function. */
1562:../../../FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORI
1563:../../../FreeRTOS/Source/tasks.c **** 	}
1564:../../../FreeRTOS/Source/tasks.c **** 	#else
1565:../../../FreeRTOS/Source/tasks.c **** 	{
1566:../../../FreeRTOS/Source/tasks.c **** 		/* Create the idle task without storing its handle. */
1567:../../../FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORI
 1891              		.loc 1 1567 0
 1892 0006 0023     		movs	r3, #0
 1893 0008 0093     		str	r3, [sp]
 1894 000a 0023     		movs	r3, #0
 1895 000c 0193     		str	r3, [sp, #4]
 1896 000e 0023     		movs	r3, #0
 1897 0010 0293     		str	r3, [sp, #8]
 1898 0012 0023     		movs	r3, #0
 1899 0014 0393     		str	r3, [sp, #12]
 1900 0016 1848     		ldr	r0, .L116
 1901 0018 1849     		ldr	r1, .L116+4
 1902 001a 8022     		movs	r2, #128
 1903 001c 0023     		movs	r3, #0
 1904 001e FFF7FEFF 		bl	xTaskGenericCreate
 1905 0022 F860     		str	r0, [r7, #12]
1568:../../../FreeRTOS/Source/tasks.c **** 	}
1569:../../../FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_xTaskGetIdleTaskHandle */
1570:../../../FreeRTOS/Source/tasks.c **** 
1571:../../../FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1572:../../../FreeRTOS/Source/tasks.c **** 	{
1573:../../../FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
1574:../../../FreeRTOS/Source/tasks.c **** 		{
1575:../../../FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1576:../../../FreeRTOS/Source/tasks.c **** 		}
1577:../../../FreeRTOS/Source/tasks.c **** 		else
1578:../../../FreeRTOS/Source/tasks.c **** 		{
1579:../../../FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1580:../../../FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/cc7uEwzT.s 			page 66


1581:../../../FreeRTOS/Source/tasks.c **** 	}
1582:../../../FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
1583:../../../FreeRTOS/Source/tasks.c **** 
1584:../../../FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
 1906              		.loc 1 1584 0
 1907 0024 FB68     		ldr	r3, [r7, #12]
 1908 0026 012B     		cmp	r3, #1
 1909 0028 15D1     		bne	.L113
 1910              	.LBB119:
 1911              	.LBB120:
 215:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1912              		.loc 2 215 0
 1913              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1914 002a 4FF05003 			mov r3, #80												
 1915 002e 83F31188 		msr basepri, r3											
 1916 0032 BFF36F8F 		isb														
 1917 0036 BFF34F8F 		dsb														
 1918              	
 1919              	@ 0 "" 2
 1920              		.thumb
 1921 003a BB60     		str	r3, [r7, #8]
 1922              	.LBE120:
 1923              	.LBE119:
1585:../../../FreeRTOS/Source/tasks.c **** 	{
1586:../../../FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1587:../../../FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1588:../../../FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1589:../../../FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1590:../../../FreeRTOS/Source/tasks.c **** 		starts to run. */
1591:../../../FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
1592:../../../FreeRTOS/Source/tasks.c **** 
1593:../../../FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1594:../../../FreeRTOS/Source/tasks.c **** 		{
1595:../../../FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1596:../../../FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first. */
1597:../../../FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1598:../../../FreeRTOS/Source/tasks.c **** 		}
1599:../../../FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1600:../../../FreeRTOS/Source/tasks.c **** 
1601:../../../FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 1924              		.loc 1 1601 0
 1925 003c 104B     		ldr	r3, .L116+8
 1926 003e 4FF0FF32 		mov	r2, #-1
 1927 0042 1A60     		str	r2, [r3]
1602:../../../FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1928              		.loc 1 1602 0
 1929 0044 0F4B     		ldr	r3, .L116+12
 1930 0046 0122     		movs	r2, #1
 1931 0048 1A60     		str	r2, [r3]
1603:../../../FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 1932              		.loc 1 1603 0
 1933 004a 0F4B     		ldr	r3, .L116+16
 1934 004c 0022     		movs	r2, #0
 1935 004e 1A60     		str	r2, [r3]
1604:../../../FreeRTOS/Source/tasks.c **** 
1605:../../../FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1606:../../../FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
ARM GAS  /tmp/cc7uEwzT.s 			page 67


1607:../../../FreeRTOS/Source/tasks.c **** 		the run time counter time base. */
1608:../../../FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1609:../../../FreeRTOS/Source/tasks.c **** 
1610:../../../FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1611:../../../FreeRTOS/Source/tasks.c **** 		portable interface. */
1612:../../../FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
 1936              		.loc 1 1612 0
 1937 0050 FFF7FEFF 		bl	xPortStartScheduler
 1938 0054 0CE0     		b	.L112
 1939              	.L113:
1613:../../../FreeRTOS/Source/tasks.c **** 		{
1614:../../../FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1615:../../../FreeRTOS/Source/tasks.c **** 			function will not return. */
1616:../../../FreeRTOS/Source/tasks.c **** 		}
1617:../../../FreeRTOS/Source/tasks.c **** 		else
1618:../../../FreeRTOS/Source/tasks.c **** 		{
1619:../../../FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1620:../../../FreeRTOS/Source/tasks.c **** 		}
1621:../../../FreeRTOS/Source/tasks.c **** 	}
1622:../../../FreeRTOS/Source/tasks.c **** 	else
1623:../../../FreeRTOS/Source/tasks.c **** 	{
1624:../../../FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
1625:../../../FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
1626:../../../FreeRTOS/Source/tasks.c **** 		or the timer task. */
1627:../../../FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn );
 1940              		.loc 1 1627 0
 1941 0056 FB68     		ldr	r3, [r7, #12]
 1942 0058 002B     		cmp	r3, #0
 1943 005a 09D1     		bne	.L112
 1944              	.LBB121:
 1945              	.LBB122:
 215:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1946              		.loc 2 215 0 discriminator 1
 1947              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1948 005c 4FF05003 			mov r3, #80												
 1949 0060 83F31188 		msr basepri, r3											
 1950 0064 BFF36F8F 		isb														
 1951 0068 BFF34F8F 		dsb														
 1952              	
 1953              	@ 0 "" 2
 1954              		.thumb
 1955 006c 7B60     		str	r3, [r7, #4]
 1956              	.L115:
 1957              	.LBE122:
 1958              	.LBE121:
 1959              		.loc 1 1627 0 discriminator 2
 1960 006e FEE7     		b	.L115
 1961              	.L112:
1628:../../../FreeRTOS/Source/tasks.c **** 	}
1629:../../../FreeRTOS/Source/tasks.c **** }
 1962              		.loc 1 1629 0
 1963 0070 1037     		adds	r7, r7, #16
 1964              	.LCFI54:
 1965              		.cfi_def_cfa_offset 8
 1966 0072 BD46     		mov	sp, r7
 1967              	.LCFI55:
 1968              		.cfi_def_cfa_register 13
ARM GAS  /tmp/cc7uEwzT.s 			page 68


 1969              		@ sp needed
 1970 0074 80BD     		pop	{r7, pc}
 1971              	.L117:
 1972 0076 00BF     		.align	2
 1973              	.L116:
 1974 0078 00000000 		.word	prvIdleTask
 1975 007c 00000000 		.word	.LC0
 1976 0080 00000000 		.word	xNextTaskUnblockTime
 1977 0084 00000000 		.word	xSchedulerRunning
 1978 0088 00000000 		.word	xTickCount
 1979              		.cfi_endproc
 1980              	.LFE14:
 1982              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1983              		.align	2
 1984              		.global	vTaskEndScheduler
 1985              		.thumb
 1986              		.thumb_func
 1988              	vTaskEndScheduler:
 1989              	.LFB15:
1630:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1631:../../../FreeRTOS/Source/tasks.c **** 
1632:../../../FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
1633:../../../FreeRTOS/Source/tasks.c **** {
 1990              		.loc 1 1633 0
 1991              		.cfi_startproc
 1992              		@ args = 0, pretend = 0, frame = 8
 1993              		@ frame_needed = 1, uses_anonymous_args = 0
 1994 0000 80B5     		push	{r7, lr}
 1995              	.LCFI56:
 1996              		.cfi_def_cfa_offset 8
 1997              		.cfi_offset 7, -8
 1998              		.cfi_offset 14, -4
 1999 0002 82B0     		sub	sp, sp, #8
 2000              	.LCFI57:
 2001              		.cfi_def_cfa_offset 16
 2002 0004 00AF     		add	r7, sp, #0
 2003              	.LCFI58:
 2004              		.cfi_def_cfa_register 7
 2005              	.LBB123:
 2006              	.LBB124:
 215:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2007              		.loc 2 215 0
 2008              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2009 0006 4FF05003 			mov r3, #80												
 2010 000a 83F31188 		msr basepri, r3											
 2011 000e BFF36F8F 		isb														
 2012 0012 BFF34F8F 		dsb														
 2013              	
 2014              	@ 0 "" 2
 2015              		.thumb
 2016 0016 7B60     		str	r3, [r7, #4]
 2017              	.LBE124:
 2018              	.LBE123:
1634:../../../FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
1635:../../../FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
1636:../../../FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
1637:../../../FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
ARM GAS  /tmp/cc7uEwzT.s 			page 69


1638:../../../FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
 2019              		.loc 1 1638 0
 2020 0018 034B     		ldr	r3, .L119
 2021 001a 0022     		movs	r2, #0
 2022 001c 1A60     		str	r2, [r3]
1639:../../../FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 2023              		.loc 1 1639 0
 2024 001e FFF7FEFF 		bl	vPortEndScheduler
1640:../../../FreeRTOS/Source/tasks.c **** }
 2025              		.loc 1 1640 0
 2026 0022 0837     		adds	r7, r7, #8
 2027              	.LCFI59:
 2028              		.cfi_def_cfa_offset 8
 2029 0024 BD46     		mov	sp, r7
 2030              	.LCFI60:
 2031              		.cfi_def_cfa_register 13
 2032              		@ sp needed
 2033 0026 80BD     		pop	{r7, pc}
 2034              	.L120:
 2035              		.align	2
 2036              	.L119:
 2037 0028 00000000 		.word	xSchedulerRunning
 2038              		.cfi_endproc
 2039              	.LFE15:
 2041              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2042              		.align	2
 2043              		.global	vTaskSuspendAll
 2044              		.thumb
 2045              		.thumb_func
 2047              	vTaskSuspendAll:
 2048              	.LFB16:
1641:../../../FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1642:../../../FreeRTOS/Source/tasks.c **** 
1643:../../../FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
1644:../../../FreeRTOS/Source/tasks.c **** {
 2049              		.loc 1 1644 0
 2050              		.cfi_startproc
 2051              		@ args = 0, pretend = 0, frame = 0
 2052              		@ frame_needed = 1, uses_anonymous_args = 0
 2053              		@ link register save eliminated.
 2054 0000 80B4     		push	{r7}
 2055              	.LCFI61:
 2056              		.cfi_def_cfa_offset 4
 2057              		.cfi_offset 7, -4
 2058 0002 00AF     		add	r7, sp, #0
 2059              	.LCFI62:
 2060              		.cfi_def_cfa_register 7
1645:../../../FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
1646:../../../FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
1647:../../../FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
1648:../../../FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
1649:../../../FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
 2061              		.loc 1 1649 0
 2062 0004 044B     		ldr	r3, .L122
 2063 0006 1B68     		ldr	r3, [r3]
 2064 0008 0133     		adds	r3, r3, #1
 2065 000a 034A     		ldr	r2, .L122
ARM GAS  /tmp/cc7uEwzT.s 			page 70


 2066 000c 1360     		str	r3, [r2]
1650:../../../FreeRTOS/Source/tasks.c **** }
 2067              		.loc 1 1650 0
 2068 000e BD46     		mov	sp, r7
 2069              	.LCFI63:
 2070              		.cfi_def_cfa_register 13
 2071              		@ sp needed
 2072 0010 5DF8047B 		ldr	r7, [sp], #4
 2073              	.LCFI64:
 2074              		.cfi_restore 7
 2075              		.cfi_def_cfa_offset 0
 2076 0014 7047     		bx	lr
 2077              	.L123:
 2078 0016 00BF     		.align	2
 2079              	.L122:
 2080 0018 00000000 		.word	uxSchedulerSuspended
 2081              		.cfi_endproc
 2082              	.LFE16:
 2084              		.section	.text.xTaskResumeAll,"ax",%progbits
 2085              		.align	2
 2086              		.global	xTaskResumeAll
 2087              		.thumb
 2088              		.thumb_func
 2090              	xTaskResumeAll:
 2091              	.LFB17:
1651:../../../FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1652:../../../FreeRTOS/Source/tasks.c **** 
1653:../../../FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1654:../../../FreeRTOS/Source/tasks.c **** 
1655:../../../FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
1656:../../../FreeRTOS/Source/tasks.c **** 	{
1657:../../../FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
1658:../../../FreeRTOS/Source/tasks.c **** 
1659:../../../FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
1660:../../../FreeRTOS/Source/tasks.c **** 		{
1661:../../../FreeRTOS/Source/tasks.c **** 			xReturn = 0;
1662:../../../FreeRTOS/Source/tasks.c **** 		}
1663:../../../FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
1664:../../../FreeRTOS/Source/tasks.c **** 		{
1665:../../../FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
1666:../../../FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
1667:../../../FreeRTOS/Source/tasks.c **** 			processed. */
1668:../../../FreeRTOS/Source/tasks.c **** 			xReturn = 0;
1669:../../../FreeRTOS/Source/tasks.c **** 		}
1670:../../../FreeRTOS/Source/tasks.c **** 		else
1671:../../../FreeRTOS/Source/tasks.c **** 		{
1672:../../../FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
1673:../../../FreeRTOS/Source/tasks.c **** 		}
1674:../../../FreeRTOS/Source/tasks.c **** 
1675:../../../FreeRTOS/Source/tasks.c **** 		return xReturn;
1676:../../../FreeRTOS/Source/tasks.c **** 	}
1677:../../../FreeRTOS/Source/tasks.c **** 
1678:../../../FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
1679:../../../FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1680:../../../FreeRTOS/Source/tasks.c **** 
1681:../../../FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
1682:../../../FreeRTOS/Source/tasks.c **** {
ARM GAS  /tmp/cc7uEwzT.s 			page 71


 2092              		.loc 1 1682 0
 2093              		.cfi_startproc
 2094              		@ args = 0, pretend = 0, frame = 16
 2095              		@ frame_needed = 1, uses_anonymous_args = 0
 2096 0000 80B5     		push	{r7, lr}
 2097              	.LCFI65:
 2098              		.cfi_def_cfa_offset 8
 2099              		.cfi_offset 7, -8
 2100              		.cfi_offset 14, -4
 2101 0002 84B0     		sub	sp, sp, #16
 2102              	.LCFI66:
 2103              		.cfi_def_cfa_offset 24
 2104 0004 00AF     		add	r7, sp, #0
 2105              	.LCFI67:
 2106              		.cfi_def_cfa_register 7
1683:../../../FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
1684:../../../FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2107              		.loc 1 1684 0
 2108 0006 0023     		movs	r3, #0
 2109 0008 FB60     		str	r3, [r7, #12]
1685:../../../FreeRTOS/Source/tasks.c **** 
1686:../../../FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
1687:../../../FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
1688:../../../FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
 2110              		.loc 1 1688 0
 2111 000a 414B     		ldr	r3, .L135
 2112 000c 1B68     		ldr	r3, [r3]
 2113 000e 002B     		cmp	r3, #0
 2114 0010 09D1     		bne	.L125
 2115              	.LBB125:
 2116              	.LBB126:
 215:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2117              		.loc 2 215 0 discriminator 1
 2118              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2119 0012 4FF05003 			mov r3, #80												
 2120 0016 83F31188 		msr basepri, r3											
 2121 001a BFF36F8F 		isb														
 2122 001e BFF34F8F 		dsb														
 2123              	
 2124              	@ 0 "" 2
 2125              		.thumb
 2126 0022 7B60     		str	r3, [r7, #4]
 2127              	.L126:
 2128              	.LBE126:
 2129              	.LBE125:
 2130              		.loc 1 1688 0 discriminator 1
 2131 0024 FEE7     		b	.L126
 2132              	.L125:
1689:../../../FreeRTOS/Source/tasks.c **** 
1690:../../../FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
1691:../../../FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
1692:../../../FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
1693:../../../FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
1694:../../../FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
1695:../../../FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 2133              		.loc 1 1695 0
 2134 0026 FFF7FEFF 		bl	vPortEnterCritical
ARM GAS  /tmp/cc7uEwzT.s 			page 72


1696:../../../FreeRTOS/Source/tasks.c **** 	{
1697:../../../FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
 2135              		.loc 1 1697 0
 2136 002a 394B     		ldr	r3, .L135
 2137 002c 1B68     		ldr	r3, [r3]
 2138 002e 013B     		subs	r3, r3, #1
 2139 0030 374A     		ldr	r2, .L135
 2140 0032 1360     		str	r3, [r2]
1698:../../../FreeRTOS/Source/tasks.c **** 
1699:../../../FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2141              		.loc 1 1699 0
 2142 0034 364B     		ldr	r3, .L135
 2143 0036 1B68     		ldr	r3, [r3]
 2144 0038 002B     		cmp	r3, #0
 2145 003a 61D1     		bne	.L127
1700:../../../FreeRTOS/Source/tasks.c **** 		{
1701:../../../FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 2146              		.loc 1 1701 0
 2147 003c 354B     		ldr	r3, .L135+4
 2148 003e 1B68     		ldr	r3, [r3]
 2149 0040 002B     		cmp	r3, #0
 2150 0042 5DD0     		beq	.L127
1702:../../../FreeRTOS/Source/tasks.c **** 			{
1703:../../../FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
1704:../../../FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
1705:../../../FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 2151              		.loc 1 1705 0
 2152 0044 34E0     		b	.L128
 2153              	.L129:
1706:../../../FreeRTOS/Source/tasks.c **** 				{
1707:../../../FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 2154              		.loc 1 1707 0
 2155 0046 344B     		ldr	r3, .L135+8
 2156 0048 DB68     		ldr	r3, [r3, #12]
 2157 004a DB68     		ldr	r3, [r3, #12]
 2158 004c BB60     		str	r3, [r7, #8]
1708:../../../FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2159              		.loc 1 1708 0
 2160 004e BB68     		ldr	r3, [r7, #8]
 2161 0050 1833     		adds	r3, r3, #24
 2162 0052 1846     		mov	r0, r3
 2163 0054 FFF7FEFF 		bl	uxListRemove
1709:../../../FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 2164              		.loc 1 1709 0
 2165 0058 BB68     		ldr	r3, [r7, #8]
 2166 005a 0433     		adds	r3, r3, #4
 2167 005c 1846     		mov	r0, r3
 2168 005e FFF7FEFF 		bl	uxListRemove
1710:../../../FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2169              		.loc 1 1710 0
 2170 0062 BB68     		ldr	r3, [r7, #8]
 2171 0064 1846     		mov	r0, r3
 2172 0066 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStartReady
 2173 006a BB68     		ldr	r3, [r7, #8]
 2174 006c DB6A     		ldr	r3, [r3, #44]
 2175 006e 1A46     		mov	r2, r3
 2176 0070 0123     		movs	r3, #1
ARM GAS  /tmp/cc7uEwzT.s 			page 73


 2177 0072 03FA02F2 		lsl	r2, r3, r2
 2178 0076 294B     		ldr	r3, .L135+12
 2179 0078 1B68     		ldr	r3, [r3]
 2180 007a 1343     		orrs	r3, r3, r2
 2181 007c 274A     		ldr	r2, .L135+12
 2182 007e 1360     		str	r3, [r2]
 2183 0080 BB68     		ldr	r3, [r7, #8]
 2184 0082 DA6A     		ldr	r2, [r3, #44]
 2185 0084 1346     		mov	r3, r2
 2186 0086 9B00     		lsls	r3, r3, #2
 2187 0088 1344     		add	r3, r3, r2
 2188 008a 9B00     		lsls	r3, r3, #2
 2189 008c 244A     		ldr	r2, .L135+16
 2190 008e 1A44     		add	r2, r2, r3
 2191 0090 BB68     		ldr	r3, [r7, #8]
 2192 0092 0433     		adds	r3, r3, #4
 2193 0094 1046     		mov	r0, r2
 2194 0096 1946     		mov	r1, r3
 2195 0098 FFF7FEFF 		bl	vListInsertEnd
1711:../../../FreeRTOS/Source/tasks.c **** 
1712:../../../FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
1713:../../../FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
1714:../../../FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2196              		.loc 1 1714 0
 2197 009c BB68     		ldr	r3, [r7, #8]
 2198 009e DA6A     		ldr	r2, [r3, #44]
 2199 00a0 204B     		ldr	r3, .L135+20
 2200 00a2 1B68     		ldr	r3, [r3]
 2201 00a4 DB6A     		ldr	r3, [r3, #44]
 2202 00a6 9A42     		cmp	r2, r3
 2203 00a8 02D3     		bcc	.L128
1715:../../../FreeRTOS/Source/tasks.c **** 					{
1716:../../../FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
 2204              		.loc 1 1716 0
 2205 00aa 1F4B     		ldr	r3, .L135+24
 2206 00ac 0122     		movs	r2, #1
 2207 00ae 1A60     		str	r2, [r3]
 2208              	.L128:
1705:../../../FreeRTOS/Source/tasks.c **** 				{
 2209              		.loc 1 1705 0
 2210 00b0 194B     		ldr	r3, .L135+8
 2211 00b2 1B68     		ldr	r3, [r3]
 2212 00b4 002B     		cmp	r3, #0
 2213 00b6 C6D1     		bne	.L129
1717:../../../FreeRTOS/Source/tasks.c **** 					}
1718:../../../FreeRTOS/Source/tasks.c **** 					else
1719:../../../FreeRTOS/Source/tasks.c **** 					{
1720:../../../FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1721:../../../FreeRTOS/Source/tasks.c **** 					}
1722:../../../FreeRTOS/Source/tasks.c **** 				}
1723:../../../FreeRTOS/Source/tasks.c **** 
1724:../../../FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
1725:../../../FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
1726:../../../FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
1727:../../../FreeRTOS/Source/tasks.c **** 				time. */
1728:../../../FreeRTOS/Source/tasks.c **** 				if( uxPendedTicks > ( UBaseType_t ) 0U )
 2214              		.loc 1 1728 0
ARM GAS  /tmp/cc7uEwzT.s 			page 74


 2215 00b8 1C4B     		ldr	r3, .L135+28
 2216 00ba 1B68     		ldr	r3, [r3]
 2217 00bc 002B     		cmp	r3, #0
 2218 00be 11D0     		beq	.L130
1729:../../../FreeRTOS/Source/tasks.c **** 				{
1730:../../../FreeRTOS/Source/tasks.c **** 					while( uxPendedTicks > ( UBaseType_t ) 0U )
 2219              		.loc 1 1730 0
 2220 00c0 0CE0     		b	.L131
 2221              	.L133:
1731:../../../FreeRTOS/Source/tasks.c **** 					{
1732:../../../FreeRTOS/Source/tasks.c **** 						if( xTaskIncrementTick() != pdFALSE )
 2222              		.loc 1 1732 0
 2223 00c2 FFF7FEFF 		bl	xTaskIncrementTick
 2224 00c6 0346     		mov	r3, r0
 2225 00c8 002B     		cmp	r3, #0
 2226 00ca 02D0     		beq	.L132
1733:../../../FreeRTOS/Source/tasks.c **** 						{
1734:../../../FreeRTOS/Source/tasks.c **** 							xYieldPending = pdTRUE;
 2227              		.loc 1 1734 0
 2228 00cc 164B     		ldr	r3, .L135+24
 2229 00ce 0122     		movs	r2, #1
 2230 00d0 1A60     		str	r2, [r3]
 2231              	.L132:
1735:../../../FreeRTOS/Source/tasks.c **** 						}
1736:../../../FreeRTOS/Source/tasks.c **** 						else
1737:../../../FreeRTOS/Source/tasks.c **** 						{
1738:../../../FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1739:../../../FreeRTOS/Source/tasks.c **** 						}
1740:../../../FreeRTOS/Source/tasks.c **** 						--uxPendedTicks;
 2232              		.loc 1 1740 0
 2233 00d2 164B     		ldr	r3, .L135+28
 2234 00d4 1B68     		ldr	r3, [r3]
 2235 00d6 013B     		subs	r3, r3, #1
 2236 00d8 144A     		ldr	r2, .L135+28
 2237 00da 1360     		str	r3, [r2]
 2238              	.L131:
1730:../../../FreeRTOS/Source/tasks.c **** 					{
 2239              		.loc 1 1730 0
 2240 00dc 134B     		ldr	r3, .L135+28
 2241 00de 1B68     		ldr	r3, [r3]
 2242 00e0 002B     		cmp	r3, #0
 2243 00e2 EED1     		bne	.L133
 2244              	.L130:
1741:../../../FreeRTOS/Source/tasks.c **** 					}
1742:../../../FreeRTOS/Source/tasks.c **** 				}
1743:../../../FreeRTOS/Source/tasks.c **** 				else
1744:../../../FreeRTOS/Source/tasks.c **** 				{
1745:../../../FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1746:../../../FreeRTOS/Source/tasks.c **** 				}
1747:../../../FreeRTOS/Source/tasks.c **** 
1748:../../../FreeRTOS/Source/tasks.c **** 				if( xYieldPending == pdTRUE )
 2245              		.loc 1 1748 0
 2246 00e4 104B     		ldr	r3, .L135+24
 2247 00e6 1B68     		ldr	r3, [r3]
 2248 00e8 012B     		cmp	r3, #1
 2249 00ea 09D1     		bne	.L127
1749:../../../FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/cc7uEwzT.s 			page 75


1750:../../../FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
1751:../../../FreeRTOS/Source/tasks.c **** 					{
1752:../../../FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
 2250              		.loc 1 1752 0
 2251 00ec 0123     		movs	r3, #1
 2252 00ee FB60     		str	r3, [r7, #12]
1753:../../../FreeRTOS/Source/tasks.c **** 					}
1754:../../../FreeRTOS/Source/tasks.c **** 					#endif
1755:../../../FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 2253              		.loc 1 1755 0
 2254 00f0 0F4B     		ldr	r3, .L135+32
 2255 00f2 4FF08052 		mov	r2, #268435456
 2256 00f6 1A60     		str	r2, [r3]
 2257              	@ 1755 "../../../FreeRTOS/Source/tasks.c" 1
 2258 00f8 BFF34F8F 		dsb
 2259              	@ 0 "" 2
 2260              	@ 1755 "../../../FreeRTOS/Source/tasks.c" 1
 2261 00fc BFF36F8F 		isb
 2262              	@ 0 "" 2
 2263              		.thumb
 2264              	.L127:
1756:../../../FreeRTOS/Source/tasks.c **** 				}
1757:../../../FreeRTOS/Source/tasks.c **** 				else
1758:../../../FreeRTOS/Source/tasks.c **** 				{
1759:../../../FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1760:../../../FreeRTOS/Source/tasks.c **** 				}
1761:../../../FreeRTOS/Source/tasks.c **** 			}
1762:../../../FreeRTOS/Source/tasks.c **** 		}
1763:../../../FreeRTOS/Source/tasks.c **** 		else
1764:../../../FreeRTOS/Source/tasks.c **** 		{
1765:../../../FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1766:../../../FreeRTOS/Source/tasks.c **** 		}
1767:../../../FreeRTOS/Source/tasks.c **** 	}
1768:../../../FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 2265              		.loc 1 1768 0
 2266 0100 FFF7FEFF 		bl	vPortExitCritical
1769:../../../FreeRTOS/Source/tasks.c **** 
1770:../../../FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
 2267              		.loc 1 1770 0
 2268 0104 FB68     		ldr	r3, [r7, #12]
1771:../../../FreeRTOS/Source/tasks.c **** }
 2269              		.loc 1 1771 0
 2270 0106 1846     		mov	r0, r3
 2271 0108 1037     		adds	r7, r7, #16
 2272              	.LCFI68:
 2273              		.cfi_def_cfa_offset 8
 2274 010a BD46     		mov	sp, r7
 2275              	.LCFI69:
 2276              		.cfi_def_cfa_register 13
 2277              		@ sp needed
 2278 010c 80BD     		pop	{r7, pc}
 2279              	.L136:
 2280 010e 00BF     		.align	2
 2281              	.L135:
 2282 0110 00000000 		.word	uxSchedulerSuspended
 2283 0114 00000000 		.word	uxCurrentNumberOfTasks
 2284 0118 00000000 		.word	xPendingReadyList
ARM GAS  /tmp/cc7uEwzT.s 			page 76


 2285 011c 00000000 		.word	uxTopReadyPriority
 2286 0120 00000000 		.word	pxReadyTasksLists
 2287 0124 00000000 		.word	pxCurrentTCB
 2288 0128 00000000 		.word	xYieldPending
 2289 012c 00000000 		.word	uxPendedTicks
 2290 0130 04ED00E0 		.word	-536810236
 2291              		.cfi_endproc
 2292              	.LFE17:
 2294              		.section	.text.xTaskGetTickCount,"ax",%progbits
 2295              		.align	2
 2296              		.global	xTaskGetTickCount
 2297              		.thumb
 2298              		.thumb_func
 2300              	xTaskGetTickCount:
 2301              	.LFB18:
1772:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1773:../../../FreeRTOS/Source/tasks.c **** 
1774:../../../FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
1775:../../../FreeRTOS/Source/tasks.c **** {
 2302              		.loc 1 1775 0
 2303              		.cfi_startproc
 2304              		@ args = 0, pretend = 0, frame = 8
 2305              		@ frame_needed = 1, uses_anonymous_args = 0
 2306              		@ link register save eliminated.
 2307 0000 80B4     		push	{r7}
 2308              	.LCFI70:
 2309              		.cfi_def_cfa_offset 4
 2310              		.cfi_offset 7, -4
 2311 0002 83B0     		sub	sp, sp, #12
 2312              	.LCFI71:
 2313              		.cfi_def_cfa_offset 16
 2314 0004 00AF     		add	r7, sp, #0
 2315              	.LCFI72:
 2316              		.cfi_def_cfa_register 7
1776:../../../FreeRTOS/Source/tasks.c **** TickType_t xTicks;
1777:../../../FreeRTOS/Source/tasks.c **** 
1778:../../../FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
1779:../../../FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
1780:../../../FreeRTOS/Source/tasks.c **** 	{
1781:../../../FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
 2317              		.loc 1 1781 0
 2318 0006 054B     		ldr	r3, .L139
 2319 0008 1B68     		ldr	r3, [r3]
 2320 000a 7B60     		str	r3, [r7, #4]
1782:../../../FreeRTOS/Source/tasks.c **** 	}
1783:../../../FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
1784:../../../FreeRTOS/Source/tasks.c **** 
1785:../../../FreeRTOS/Source/tasks.c **** 	return xTicks;
 2321              		.loc 1 1785 0
 2322 000c 7B68     		ldr	r3, [r7, #4]
1786:../../../FreeRTOS/Source/tasks.c **** }
 2323              		.loc 1 1786 0
 2324 000e 1846     		mov	r0, r3
 2325 0010 0C37     		adds	r7, r7, #12
 2326              	.LCFI73:
 2327              		.cfi_def_cfa_offset 4
 2328 0012 BD46     		mov	sp, r7
ARM GAS  /tmp/cc7uEwzT.s 			page 77


 2329              	.LCFI74:
 2330              		.cfi_def_cfa_register 13
 2331              		@ sp needed
 2332 0014 5DF8047B 		ldr	r7, [sp], #4
 2333              	.LCFI75:
 2334              		.cfi_restore 7
 2335              		.cfi_def_cfa_offset 0
 2336 0018 7047     		bx	lr
 2337              	.L140:
 2338 001a 00BF     		.align	2
 2339              	.L139:
 2340 001c 00000000 		.word	xTickCount
 2341              		.cfi_endproc
 2342              	.LFE18:
 2344              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2345              		.align	2
 2346              		.global	xTaskGetTickCountFromISR
 2347              		.thumb
 2348              		.thumb_func
 2350              	xTaskGetTickCountFromISR:
 2351              	.LFB19:
1787:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1788:../../../FreeRTOS/Source/tasks.c **** 
1789:../../../FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
1790:../../../FreeRTOS/Source/tasks.c **** {
 2352              		.loc 1 1790 0
 2353              		.cfi_startproc
 2354              		@ args = 0, pretend = 0, frame = 8
 2355              		@ frame_needed = 1, uses_anonymous_args = 0
 2356 0000 80B5     		push	{r7, lr}
 2357              	.LCFI76:
 2358              		.cfi_def_cfa_offset 8
 2359              		.cfi_offset 7, -8
 2360              		.cfi_offset 14, -4
 2361 0002 82B0     		sub	sp, sp, #8
 2362              	.LCFI77:
 2363              		.cfi_def_cfa_offset 16
 2364 0004 00AF     		add	r7, sp, #0
 2365              	.LCFI78:
 2366              		.cfi_def_cfa_register 7
1791:../../../FreeRTOS/Source/tasks.c **** TickType_t xReturn;
1792:../../../FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
1793:../../../FreeRTOS/Source/tasks.c **** 
1794:../../../FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1795:../../../FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1796:../../../FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
1797:../../../FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1798:../../../FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1799:../../../FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1800:../../../FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1801:../../../FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
1802:../../../FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1803:../../../FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
1804:../../../FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1805:../../../FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1806:../../../FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
1807:../../../FreeRTOS/Source/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
ARM GAS  /tmp/cc7uEwzT.s 			page 78


1808:../../../FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2367              		.loc 1 1808 0
 2368 0006 FFF7FEFF 		bl	vPortValidateInterruptPriority
1809:../../../FreeRTOS/Source/tasks.c **** 
1810:../../../FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 2369              		.loc 1 1810 0
 2370 000a 0023     		movs	r3, #0
 2371 000c 7B60     		str	r3, [r7, #4]
1811:../../../FreeRTOS/Source/tasks.c **** 	{
1812:../../../FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
 2372              		.loc 1 1812 0
 2373 000e 044B     		ldr	r3, .L143
 2374 0010 1B68     		ldr	r3, [r3]
 2375 0012 3B60     		str	r3, [r7]
1813:../../../FreeRTOS/Source/tasks.c **** 	}
1814:../../../FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1815:../../../FreeRTOS/Source/tasks.c **** 
1816:../../../FreeRTOS/Source/tasks.c **** 	return xReturn;
 2376              		.loc 1 1816 0
 2377 0014 3B68     		ldr	r3, [r7]
1817:../../../FreeRTOS/Source/tasks.c **** }
 2378              		.loc 1 1817 0
 2379 0016 1846     		mov	r0, r3
 2380 0018 0837     		adds	r7, r7, #8
 2381              	.LCFI79:
 2382              		.cfi_def_cfa_offset 8
 2383 001a BD46     		mov	sp, r7
 2384              	.LCFI80:
 2385              		.cfi_def_cfa_register 13
 2386              		@ sp needed
 2387 001c 80BD     		pop	{r7, pc}
 2388              	.L144:
 2389 001e 00BF     		.align	2
 2390              	.L143:
 2391 0020 00000000 		.word	xTickCount
 2392              		.cfi_endproc
 2393              	.LFE19:
 2395              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2396              		.align	2
 2397              		.global	uxTaskGetNumberOfTasks
 2398              		.thumb
 2399              		.thumb_func
 2401              	uxTaskGetNumberOfTasks:
 2402              	.LFB20:
1818:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1819:../../../FreeRTOS/Source/tasks.c **** 
1820:../../../FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
1821:../../../FreeRTOS/Source/tasks.c **** {
 2403              		.loc 1 1821 0
 2404              		.cfi_startproc
 2405              		@ args = 0, pretend = 0, frame = 0
 2406              		@ frame_needed = 1, uses_anonymous_args = 0
 2407              		@ link register save eliminated.
 2408 0000 80B4     		push	{r7}
 2409              	.LCFI81:
 2410              		.cfi_def_cfa_offset 4
 2411              		.cfi_offset 7, -4
ARM GAS  /tmp/cc7uEwzT.s 			page 79


 2412 0002 00AF     		add	r7, sp, #0
 2413              	.LCFI82:
 2414              		.cfi_def_cfa_register 7
1822:../../../FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
1823:../../../FreeRTOS/Source/tasks.c **** 	BaseType_t. */
1824:../../../FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
 2415              		.loc 1 1824 0
 2416 0004 034B     		ldr	r3, .L147
 2417 0006 1B68     		ldr	r3, [r3]
1825:../../../FreeRTOS/Source/tasks.c **** }
 2418              		.loc 1 1825 0
 2419 0008 1846     		mov	r0, r3
 2420 000a BD46     		mov	sp, r7
 2421              	.LCFI83:
 2422              		.cfi_def_cfa_register 13
 2423              		@ sp needed
 2424 000c 5DF8047B 		ldr	r7, [sp], #4
 2425              	.LCFI84:
 2426              		.cfi_restore 7
 2427              		.cfi_def_cfa_offset 0
 2428 0010 7047     		bx	lr
 2429              	.L148:
 2430 0012 00BF     		.align	2
 2431              	.L147:
 2432 0014 00000000 		.word	uxCurrentNumberOfTasks
 2433              		.cfi_endproc
 2434              	.LFE20:
 2436              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 2437              		.align	2
 2438              		.global	uxTaskGetSystemState
 2439              		.thumb
 2440              		.thumb_func
 2442              	uxTaskGetSystemState:
 2443              	.LFB21:
1826:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1827:../../../FreeRTOS/Source/tasks.c **** 
1828:../../../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_pcTaskGetTaskName == 1 )
1829:../../../FreeRTOS/Source/tasks.c **** 
1830:../../../FreeRTOS/Source/tasks.c **** 	char *pcTaskGetTaskName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allow
1831:../../../FreeRTOS/Source/tasks.c **** 	{
1832:../../../FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1833:../../../FreeRTOS/Source/tasks.c **** 
1834:../../../FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then the name of the calling task is being queried. */
1835:../../../FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToQuery );
1836:../../../FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1837:../../../FreeRTOS/Source/tasks.c **** 		return &( pxTCB->pcTaskName[ 0 ] );
1838:../../../FreeRTOS/Source/tasks.c **** 	}
1839:../../../FreeRTOS/Source/tasks.c **** 
1840:../../../FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_pcTaskGetTaskName */
1841:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1842:../../../FreeRTOS/Source/tasks.c **** 
1843:../../../FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1844:../../../FreeRTOS/Source/tasks.c **** 
1845:../../../FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
1846:../../../FreeRTOS/Source/tasks.c **** 	{
 2444              		.loc 1 1846 0
 2445              		.cfi_startproc
ARM GAS  /tmp/cc7uEwzT.s 			page 80


 2446              		@ args = 0, pretend = 0, frame = 24
 2447              		@ frame_needed = 1, uses_anonymous_args = 0
 2448 0000 80B5     		push	{r7, lr}
 2449              	.LCFI85:
 2450              		.cfi_def_cfa_offset 8
 2451              		.cfi_offset 7, -8
 2452              		.cfi_offset 14, -4
 2453 0002 86B0     		sub	sp, sp, #24
 2454              	.LCFI86:
 2455              		.cfi_def_cfa_offset 32
 2456 0004 00AF     		add	r7, sp, #0
 2457              	.LCFI87:
 2458              		.cfi_def_cfa_register 7
 2459 0006 F860     		str	r0, [r7, #12]
 2460 0008 B960     		str	r1, [r7, #8]
 2461 000a 7A60     		str	r2, [r7, #4]
1847:../../../FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 2462              		.loc 1 1847 0
 2463 000c 0023     		movs	r3, #0
 2464 000e 7B61     		str	r3, [r7, #20]
 2465 0010 0723     		movs	r3, #7
 2466 0012 3B61     		str	r3, [r7, #16]
1848:../../../FreeRTOS/Source/tasks.c **** 
1849:../../../FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
 2467              		.loc 1 1849 0
 2468 0014 FFF7FEFF 		bl	vTaskSuspendAll
1850:../../../FreeRTOS/Source/tasks.c **** 		{
1851:../../../FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
1852:../../../FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
 2469              		.loc 1 1852 0
 2470 0018 314B     		ldr	r3, .L154
 2471 001a 1B68     		ldr	r3, [r3]
 2472 001c BA68     		ldr	r2, [r7, #8]
 2473 001e 9A42     		cmp	r2, r3
 2474 0020 57D3     		bcc	.L150
 2475              	.L151:
1853:../../../FreeRTOS/Source/tasks.c **** 			{
1854:../../../FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
1855:../../../FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
1856:../../../FreeRTOS/Source/tasks.c **** 				do
1857:../../../FreeRTOS/Source/tasks.c **** 				{
1858:../../../FreeRTOS/Source/tasks.c **** 					uxQueue--;
 2476              		.loc 1 1858 0 discriminator 1
 2477 0022 3B69     		ldr	r3, [r7, #16]
 2478 0024 013B     		subs	r3, r3, #1
 2479 0026 3B61     		str	r3, [r7, #16]
1859:../../../FreeRTOS/Source/tasks.c **** 					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[
 2480              		.loc 1 1859 0 discriminator 1
 2481 0028 7B69     		ldr	r3, [r7, #20]
 2482 002a 5B01     		lsls	r3, r3, #5
 2483 002c FA68     		ldr	r2, [r7, #12]
 2484 002e D118     		adds	r1, r2, r3
 2485 0030 3A69     		ldr	r2, [r7, #16]
 2486 0032 1346     		mov	r3, r2
 2487 0034 9B00     		lsls	r3, r3, #2
 2488 0036 1344     		add	r3, r3, r2
 2489 0038 9B00     		lsls	r3, r3, #2
ARM GAS  /tmp/cc7uEwzT.s 			page 81


 2490 003a 2A4A     		ldr	r2, .L154+4
 2491 003c 1344     		add	r3, r3, r2
 2492 003e 0846     		mov	r0, r1
 2493 0040 1946     		mov	r1, r3
 2494 0042 0122     		movs	r2, #1
 2495 0044 FFF7FEFF 		bl	prvListTaskWithinSingleList
 2496 0048 0246     		mov	r2, r0
 2497 004a 7B69     		ldr	r3, [r7, #20]
 2498 004c 1344     		add	r3, r3, r2
 2499 004e 7B61     		str	r3, [r7, #20]
1860:../../../FreeRTOS/Source/tasks.c **** 
1861:../../../FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
 2500              		.loc 1 1861 0 discriminator 1
 2501 0050 3B69     		ldr	r3, [r7, #16]
 2502 0052 002B     		cmp	r3, #0
 2503 0054 E5D1     		bne	.L151
1862:../../../FreeRTOS/Source/tasks.c **** 
1863:../../../FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
1864:../../../FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
1865:../../../FreeRTOS/Source/tasks.c **** 				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayed
 2504              		.loc 1 1865 0
 2505 0056 7B69     		ldr	r3, [r7, #20]
 2506 0058 5B01     		lsls	r3, r3, #5
 2507 005a FA68     		ldr	r2, [r7, #12]
 2508 005c 1A44     		add	r2, r2, r3
 2509 005e 224B     		ldr	r3, .L154+8
 2510 0060 1B68     		ldr	r3, [r3]
 2511 0062 1046     		mov	r0, r2
 2512 0064 1946     		mov	r1, r3
 2513 0066 0222     		movs	r2, #2
 2514 0068 FFF7FEFF 		bl	prvListTaskWithinSingleList
 2515 006c 0246     		mov	r2, r0
 2516 006e 7B69     		ldr	r3, [r7, #20]
 2517 0070 1344     		add	r3, r3, r2
 2518 0072 7B61     		str	r3, [r7, #20]
1866:../../../FreeRTOS/Source/tasks.c **** 				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflo
 2519              		.loc 1 1866 0
 2520 0074 7B69     		ldr	r3, [r7, #20]
 2521 0076 5B01     		lsls	r3, r3, #5
 2522 0078 FA68     		ldr	r2, [r7, #12]
 2523 007a 1A44     		add	r2, r2, r3
 2524 007c 1B4B     		ldr	r3, .L154+12
 2525 007e 1B68     		ldr	r3, [r3]
 2526 0080 1046     		mov	r0, r2
 2527 0082 1946     		mov	r1, r3
 2528 0084 0222     		movs	r2, #2
 2529 0086 FFF7FEFF 		bl	prvListTaskWithinSingleList
 2530 008a 0246     		mov	r2, r0
 2531 008c 7B69     		ldr	r3, [r7, #20]
 2532 008e 1344     		add	r3, r3, r2
 2533 0090 7B61     		str	r3, [r7, #20]
1867:../../../FreeRTOS/Source/tasks.c **** 
1868:../../../FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
1869:../../../FreeRTOS/Source/tasks.c **** 				{
1870:../../../FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
1871:../../../FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
1872:../../../FreeRTOS/Source/tasks.c **** 					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermina
ARM GAS  /tmp/cc7uEwzT.s 			page 82


 2534              		.loc 1 1872 0
 2535 0092 7B69     		ldr	r3, [r7, #20]
 2536 0094 5B01     		lsls	r3, r3, #5
 2537 0096 FA68     		ldr	r2, [r7, #12]
 2538 0098 1344     		add	r3, r3, r2
 2539 009a 1846     		mov	r0, r3
 2540 009c 1449     		ldr	r1, .L154+16
 2541 009e 0422     		movs	r2, #4
 2542 00a0 FFF7FEFF 		bl	prvListTaskWithinSingleList
 2543 00a4 0246     		mov	r2, r0
 2544 00a6 7B69     		ldr	r3, [r7, #20]
 2545 00a8 1344     		add	r3, r3, r2
 2546 00aa 7B61     		str	r3, [r7, #20]
1873:../../../FreeRTOS/Source/tasks.c **** 				}
1874:../../../FreeRTOS/Source/tasks.c **** 				#endif
1875:../../../FreeRTOS/Source/tasks.c **** 
1876:../../../FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
1877:../../../FreeRTOS/Source/tasks.c **** 				{
1878:../../../FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
1879:../../../FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
1880:../../../FreeRTOS/Source/tasks.c **** 					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, 
 2547              		.loc 1 1880 0
 2548 00ac 7B69     		ldr	r3, [r7, #20]
 2549 00ae 5B01     		lsls	r3, r3, #5
 2550 00b0 FA68     		ldr	r2, [r7, #12]
 2551 00b2 1344     		add	r3, r3, r2
 2552 00b4 1846     		mov	r0, r3
 2553 00b6 0F49     		ldr	r1, .L154+20
 2554 00b8 0322     		movs	r2, #3
 2555 00ba FFF7FEFF 		bl	prvListTaskWithinSingleList
 2556 00be 0246     		mov	r2, r0
 2557 00c0 7B69     		ldr	r3, [r7, #20]
 2558 00c2 1344     		add	r3, r3, r2
 2559 00c4 7B61     		str	r3, [r7, #20]
1881:../../../FreeRTOS/Source/tasks.c **** 				}
1882:../../../FreeRTOS/Source/tasks.c **** 				#endif
1883:../../../FreeRTOS/Source/tasks.c **** 
1884:../../../FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
1885:../../../FreeRTOS/Source/tasks.c **** 				{
1886:../../../FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
1887:../../../FreeRTOS/Source/tasks.c **** 					{
1888:../../../FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
1889:../../../FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
1890:../../../FreeRTOS/Source/tasks.c **** 						#else
1891:../../../FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
1892:../../../FreeRTOS/Source/tasks.c **** 						#endif
1893:../../../FreeRTOS/Source/tasks.c **** 					}
1894:../../../FreeRTOS/Source/tasks.c **** 				}
1895:../../../FreeRTOS/Source/tasks.c **** 				#else
1896:../../../FreeRTOS/Source/tasks.c **** 				{
1897:../../../FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
 2560              		.loc 1 1897 0
 2561 00c6 7B68     		ldr	r3, [r7, #4]
 2562 00c8 002B     		cmp	r3, #0
 2563 00ca 02D0     		beq	.L150
1898:../../../FreeRTOS/Source/tasks.c **** 					{
1899:../../../FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
ARM GAS  /tmp/cc7uEwzT.s 			page 83


 2564              		.loc 1 1899 0
 2565 00cc 7B68     		ldr	r3, [r7, #4]
 2566 00ce 0022     		movs	r2, #0
 2567 00d0 1A60     		str	r2, [r3]
 2568              	.L150:
1900:../../../FreeRTOS/Source/tasks.c **** 					}
1901:../../../FreeRTOS/Source/tasks.c **** 				}
1902:../../../FreeRTOS/Source/tasks.c **** 				#endif
1903:../../../FreeRTOS/Source/tasks.c **** 			}
1904:../../../FreeRTOS/Source/tasks.c **** 			else
1905:../../../FreeRTOS/Source/tasks.c **** 			{
1906:../../../FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1907:../../../FreeRTOS/Source/tasks.c **** 			}
1908:../../../FreeRTOS/Source/tasks.c **** 		}
1909:../../../FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
 2569              		.loc 1 1909 0
 2570 00d2 FFF7FEFF 		bl	xTaskResumeAll
1910:../../../FreeRTOS/Source/tasks.c **** 
1911:../../../FreeRTOS/Source/tasks.c **** 		return uxTask;
 2571              		.loc 1 1911 0
 2572 00d6 7B69     		ldr	r3, [r7, #20]
1912:../../../FreeRTOS/Source/tasks.c **** 	}
 2573              		.loc 1 1912 0
 2574 00d8 1846     		mov	r0, r3
 2575 00da 1837     		adds	r7, r7, #24
 2576              	.LCFI88:
 2577              		.cfi_def_cfa_offset 8
 2578 00dc BD46     		mov	sp, r7
 2579              	.LCFI89:
 2580              		.cfi_def_cfa_register 13
 2581              		@ sp needed
 2582 00de 80BD     		pop	{r7, pc}
 2583              	.L155:
 2584              		.align	2
 2585              	.L154:
 2586 00e0 00000000 		.word	uxCurrentNumberOfTasks
 2587 00e4 00000000 		.word	pxReadyTasksLists
 2588 00e8 00000000 		.word	pxDelayedTaskList
 2589 00ec 00000000 		.word	pxOverflowDelayedTaskList
 2590 00f0 00000000 		.word	xTasksWaitingTermination
 2591 00f4 00000000 		.word	xSuspendedTaskList
 2592              		.cfi_endproc
 2593              	.LFE21:
 2595              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2596              		.align	2
 2597              		.global	xTaskIncrementTick
 2598              		.thumb
 2599              		.thumb_func
 2601              	xTaskIncrementTick:
 2602              	.LFB22:
1913:../../../FreeRTOS/Source/tasks.c **** 
1914:../../../FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
1915:../../../FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1916:../../../FreeRTOS/Source/tasks.c **** 
1917:../../../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
1918:../../../FreeRTOS/Source/tasks.c **** 
1919:../../../FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
ARM GAS  /tmp/cc7uEwzT.s 			page 84


1920:../../../FreeRTOS/Source/tasks.c **** 	{
1921:../../../FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
1922:../../../FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
1923:../../../FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
1924:../../../FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
1925:../../../FreeRTOS/Source/tasks.c **** 	}
1926:../../../FreeRTOS/Source/tasks.c **** 
1927:../../../FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
1928:../../../FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1929:../../../FreeRTOS/Source/tasks.c **** 
1930:../../../FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
1931:../../../FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
1932:../../../FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1933:../../../FreeRTOS/Source/tasks.c **** 1. */
1934:../../../FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1935:../../../FreeRTOS/Source/tasks.c **** 
1936:../../../FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
1937:../../../FreeRTOS/Source/tasks.c **** 	{
1938:../../../FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
1939:../../../FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
1940:../../../FreeRTOS/Source/tasks.c **** 		each stepped tick. */
1941:../../../FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
1942:../../../FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
1943:../../../FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
1944:../../../FreeRTOS/Source/tasks.c **** 	}
1945:../../../FreeRTOS/Source/tasks.c **** 
1946:../../../FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
1947:../../../FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1948:../../../FreeRTOS/Source/tasks.c **** 
1949:../../../FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
1950:../../../FreeRTOS/Source/tasks.c **** {
 2603              		.loc 1 1950 0
 2604              		.cfi_startproc
 2605              		@ args = 0, pretend = 0, frame = 24
 2606              		@ frame_needed = 1, uses_anonymous_args = 0
 2607 0000 80B5     		push	{r7, lr}
 2608              	.LCFI90:
 2609              		.cfi_def_cfa_offset 8
 2610              		.cfi_offset 7, -8
 2611              		.cfi_offset 14, -4
 2612 0002 86B0     		sub	sp, sp, #24
 2613              	.LCFI91:
 2614              		.cfi_def_cfa_offset 32
 2615 0004 00AF     		add	r7, sp, #0
 2616              	.LCFI92:
 2617              		.cfi_def_cfa_register 7
1951:../../../FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
1952:../../../FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
1953:../../../FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
 2618              		.loc 1 1953 0
 2619 0006 0023     		movs	r3, #0
 2620 0008 7B61     		str	r3, [r7, #20]
1954:../../../FreeRTOS/Source/tasks.c **** 
1955:../../../FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
1956:../../../FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
1957:../../../FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
1958:../../../FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
ARM GAS  /tmp/cc7uEwzT.s 			page 85


1959:../../../FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2621              		.loc 1 1959 0
 2622 000a 544B     		ldr	r3, .L172
 2623 000c 1B68     		ldr	r3, [r3]
 2624 000e 002B     		cmp	r3, #0
 2625 0010 40F09380 		bne	.L157
1960:../../../FreeRTOS/Source/tasks.c **** 	{
1961:../../../FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
1962:../../../FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
1963:../../../FreeRTOS/Source/tasks.c **** 		++xTickCount;
 2626              		.loc 1 1963 0
 2627 0014 524B     		ldr	r3, .L172+4
 2628 0016 1B68     		ldr	r3, [r3]
 2629 0018 0133     		adds	r3, r3, #1
 2630 001a 514A     		ldr	r2, .L172+4
 2631 001c 1360     		str	r3, [r2]
 2632              	.LBB127:
1964:../../../FreeRTOS/Source/tasks.c **** 
1965:../../../FreeRTOS/Source/tasks.c **** 		{
1966:../../../FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1967:../../../FreeRTOS/Source/tasks.c **** 			block. */
1968:../../../FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
 2633              		.loc 1 1968 0
 2634 001e 504B     		ldr	r3, .L172+4
 2635 0020 1B68     		ldr	r3, [r3]
 2636 0022 3B61     		str	r3, [r7, #16]
1969:../../../FreeRTOS/Source/tasks.c **** 
1970:../../../FreeRTOS/Source/tasks.c **** 			if( xConstTickCount == ( TickType_t ) 0U )
 2637              		.loc 1 1970 0
 2638 0024 3B69     		ldr	r3, [r7, #16]
 2639 0026 002B     		cmp	r3, #0
 2640 0028 1FD1     		bne	.L158
 2641              	.LBB128:
1971:../../../FreeRTOS/Source/tasks.c **** 			{
1972:../../../FreeRTOS/Source/tasks.c **** 				taskSWITCH_DELAYED_LISTS();
 2642              		.loc 1 1972 0
 2643 002a 4E4B     		ldr	r3, .L172+8
 2644 002c 1B68     		ldr	r3, [r3]
 2645 002e 1B68     		ldr	r3, [r3]
 2646 0030 002B     		cmp	r3, #0
 2647 0032 09D0     		beq	.L159
 2648              	.LBB129:
 2649              	.LBB130:
 215:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2650              		.loc 2 215 0 discriminator 1
 2651              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2652 0034 4FF05003 			mov r3, #80												
 2653 0038 83F31188 		msr basepri, r3											
 2654 003c BFF36F8F 		isb														
 2655 0040 BFF34F8F 		dsb														
 2656              	
 2657              	@ 0 "" 2
 2658              		.thumb
 2659 0044 3B60     		str	r3, [r7]
 2660              	.L160:
 2661              	.LBE130:
 2662              	.LBE129:
ARM GAS  /tmp/cc7uEwzT.s 			page 86


 2663              		.loc 1 1972 0 discriminator 1
 2664 0046 FEE7     		b	.L160
 2665              	.L159:
 2666              		.loc 1 1972 0 is_stmt 0 discriminator 2
 2667 0048 464B     		ldr	r3, .L172+8
 2668 004a 1B68     		ldr	r3, [r3]
 2669 004c FB60     		str	r3, [r7, #12]
 2670 004e 464B     		ldr	r3, .L172+12
 2671 0050 1B68     		ldr	r3, [r3]
 2672 0052 444A     		ldr	r2, .L172+8
 2673 0054 1360     		str	r3, [r2]
 2674 0056 444A     		ldr	r2, .L172+12
 2675 0058 FB68     		ldr	r3, [r7, #12]
 2676 005a 1360     		str	r3, [r2]
 2677 005c 434B     		ldr	r3, .L172+16
 2678 005e 1B68     		ldr	r3, [r3]
 2679 0060 0133     		adds	r3, r3, #1
 2680 0062 424A     		ldr	r2, .L172+16
 2681 0064 1360     		str	r3, [r2]
 2682 0066 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2683              	.L158:
 2684              	.LBE128:
1973:../../../FreeRTOS/Source/tasks.c **** 			}
1974:../../../FreeRTOS/Source/tasks.c **** 			else
1975:../../../FreeRTOS/Source/tasks.c **** 			{
1976:../../../FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1977:../../../FreeRTOS/Source/tasks.c **** 			}
1978:../../../FreeRTOS/Source/tasks.c **** 
1979:../../../FreeRTOS/Source/tasks.c **** 			/* See if this tick has made a timeout expire.  Tasks are stored in
1980:../../../FreeRTOS/Source/tasks.c **** 			the	queue in the order of their wake time - meaning once one task
1981:../../../FreeRTOS/Source/tasks.c **** 			has been found whose block time has not expired there is no need to
1982:../../../FreeRTOS/Source/tasks.c **** 			look any further down the list. */
1983:../../../FreeRTOS/Source/tasks.c **** 			if( xConstTickCount >= xNextTaskUnblockTime )
 2685              		.loc 1 1983 0 is_stmt 1
 2686 006a 414B     		ldr	r3, .L172+20
 2687 006c 1B68     		ldr	r3, [r3]
 2688 006e 3A69     		ldr	r2, [r7, #16]
 2689 0070 9A42     		cmp	r2, r3
 2690 0072 53D3     		bcc	.L161
 2691              	.L168:
1984:../../../FreeRTOS/Source/tasks.c **** 			{
1985:../../../FreeRTOS/Source/tasks.c **** 				for( ;; )
1986:../../../FreeRTOS/Source/tasks.c **** 				{
1987:../../../FreeRTOS/Source/tasks.c **** 					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 2692              		.loc 1 1987 0
 2693 0074 3B4B     		ldr	r3, .L172+8
 2694 0076 1B68     		ldr	r3, [r3]
 2695 0078 1B68     		ldr	r3, [r3]
 2696 007a 002B     		cmp	r3, #0
 2697 007c 01D1     		bne	.L162
 2698              		.loc 1 1987 0 is_stmt 0 discriminator 1
 2699 007e 0123     		movs	r3, #1
 2700 0080 00E0     		b	.L163
 2701              	.L162:
 2702              		.loc 1 1987 0 discriminator 2
 2703 0082 0023     		movs	r3, #0
 2704              	.L163:
ARM GAS  /tmp/cc7uEwzT.s 			page 87


 2705              		.loc 1 1987 0 discriminator 4
 2706 0084 002B     		cmp	r3, #0
 2707 0086 04D0     		beq	.L164
1988:../../../FreeRTOS/Source/tasks.c **** 					{
1989:../../../FreeRTOS/Source/tasks.c **** 						/* The delayed list is empty.  Set xNextTaskUnblockTime
1990:../../../FreeRTOS/Source/tasks.c **** 						to the maximum possible value so it is extremely
1991:../../../FreeRTOS/Source/tasks.c **** 						unlikely that the
1992:../../../FreeRTOS/Source/tasks.c **** 						if( xTickCount >= xNextTaskUnblockTime ) test will pass
1993:../../../FreeRTOS/Source/tasks.c **** 						next time through. */
1994:../../../FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = portMAX_DELAY;
 2708              		.loc 1 1994 0 is_stmt 1
 2709 0088 394B     		ldr	r3, .L172+20
 2710 008a 4FF0FF32 		mov	r2, #-1
 2711 008e 1A60     		str	r2, [r3]
1995:../../../FreeRTOS/Source/tasks.c **** 						break;
 2712              		.loc 1 1995 0
 2713 0090 44E0     		b	.L161
 2714              	.L164:
1996:../../../FreeRTOS/Source/tasks.c **** 					}
1997:../../../FreeRTOS/Source/tasks.c **** 					else
1998:../../../FreeRTOS/Source/tasks.c **** 					{
1999:../../../FreeRTOS/Source/tasks.c **** 						/* The delayed list is not empty, get the value of the
2000:../../../FreeRTOS/Source/tasks.c **** 						item at the head of the delayed list.  This is the time
2001:../../../FreeRTOS/Source/tasks.c **** 						at which the task at the head of the delayed list must
2002:../../../FreeRTOS/Source/tasks.c **** 						be removed from the Blocked state. */
2003:../../../FreeRTOS/Source/tasks.c **** 						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 2715              		.loc 1 2003 0
 2716 0092 344B     		ldr	r3, .L172+8
 2717 0094 1B68     		ldr	r3, [r3]
 2718 0096 DB68     		ldr	r3, [r3, #12]
 2719 0098 DB68     		ldr	r3, [r3, #12]
 2720 009a BB60     		str	r3, [r7, #8]
2004:../../../FreeRTOS/Source/tasks.c **** 						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 2721              		.loc 1 2004 0
 2722 009c BB68     		ldr	r3, [r7, #8]
 2723 009e 5B68     		ldr	r3, [r3, #4]
 2724 00a0 7B60     		str	r3, [r7, #4]
2005:../../../FreeRTOS/Source/tasks.c **** 
2006:../../../FreeRTOS/Source/tasks.c **** 						if( xConstTickCount < xItemValue )
 2725              		.loc 1 2006 0
 2726 00a2 3A69     		ldr	r2, [r7, #16]
 2727 00a4 7B68     		ldr	r3, [r7, #4]
 2728 00a6 9A42     		cmp	r2, r3
 2729 00a8 03D2     		bcs	.L165
2007:../../../FreeRTOS/Source/tasks.c **** 						{
2008:../../../FreeRTOS/Source/tasks.c **** 							/* It is not time to unblock this item yet, but the
2009:../../../FreeRTOS/Source/tasks.c **** 							item value is the time at which the task at the head
2010:../../../FreeRTOS/Source/tasks.c **** 							of the blocked list must be removed from the Blocked
2011:../../../FreeRTOS/Source/tasks.c **** 							state -	so record the item value in
2012:../../../FreeRTOS/Source/tasks.c **** 							xNextTaskUnblockTime. */
2013:../../../FreeRTOS/Source/tasks.c **** 							xNextTaskUnblockTime = xItemValue;
 2730              		.loc 1 2013 0
 2731 00aa 314A     		ldr	r2, .L172+20
 2732 00ac 7B68     		ldr	r3, [r7, #4]
 2733 00ae 1360     		str	r3, [r2]
2014:../../../FreeRTOS/Source/tasks.c **** 							break;
 2734              		.loc 1 2014 0
ARM GAS  /tmp/cc7uEwzT.s 			page 88


 2735 00b0 34E0     		b	.L161
 2736              	.L165:
2015:../../../FreeRTOS/Source/tasks.c **** 						}
2016:../../../FreeRTOS/Source/tasks.c **** 						else
2017:../../../FreeRTOS/Source/tasks.c **** 						{
2018:../../../FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2019:../../../FreeRTOS/Source/tasks.c **** 						}
2020:../../../FreeRTOS/Source/tasks.c **** 
2021:../../../FreeRTOS/Source/tasks.c **** 						/* It is time to remove the item from the Blocked state. */
2022:../../../FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 2737              		.loc 1 2022 0
 2738 00b2 BB68     		ldr	r3, [r7, #8]
 2739 00b4 0433     		adds	r3, r3, #4
 2740 00b6 1846     		mov	r0, r3
 2741 00b8 FFF7FEFF 		bl	uxListRemove
2023:../../../FreeRTOS/Source/tasks.c **** 
2024:../../../FreeRTOS/Source/tasks.c **** 						/* Is the task waiting on an event also?  If so remove
2025:../../../FreeRTOS/Source/tasks.c **** 						it from the event list. */
2026:../../../FreeRTOS/Source/tasks.c **** 						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 2742              		.loc 1 2026 0
 2743 00bc BB68     		ldr	r3, [r7, #8]
 2744 00be 9B6A     		ldr	r3, [r3, #40]
 2745 00c0 002B     		cmp	r3, #0
 2746 00c2 04D0     		beq	.L166
2027:../../../FreeRTOS/Source/tasks.c **** 						{
2028:../../../FreeRTOS/Source/tasks.c **** 							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2747              		.loc 1 2028 0
 2748 00c4 BB68     		ldr	r3, [r7, #8]
 2749 00c6 1833     		adds	r3, r3, #24
 2750 00c8 1846     		mov	r0, r3
 2751 00ca FFF7FEFF 		bl	uxListRemove
 2752              	.L166:
2029:../../../FreeRTOS/Source/tasks.c **** 						}
2030:../../../FreeRTOS/Source/tasks.c **** 						else
2031:../../../FreeRTOS/Source/tasks.c **** 						{
2032:../../../FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2033:../../../FreeRTOS/Source/tasks.c **** 						}
2034:../../../FreeRTOS/Source/tasks.c **** 
2035:../../../FreeRTOS/Source/tasks.c **** 						/* Place the unblocked task into the appropriate ready
2036:../../../FreeRTOS/Source/tasks.c **** 						list. */
2037:../../../FreeRTOS/Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
 2753              		.loc 1 2037 0
 2754 00ce BB68     		ldr	r3, [r7, #8]
 2755 00d0 1846     		mov	r0, r3
 2756 00d2 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStartReady
 2757 00d6 BB68     		ldr	r3, [r7, #8]
 2758 00d8 DB6A     		ldr	r3, [r3, #44]
 2759 00da 1A46     		mov	r2, r3
 2760 00dc 0123     		movs	r3, #1
 2761 00de 03FA02F2 		lsl	r2, r3, r2
 2762 00e2 244B     		ldr	r3, .L172+24
 2763 00e4 1B68     		ldr	r3, [r3]
 2764 00e6 1343     		orrs	r3, r3, r2
 2765 00e8 224A     		ldr	r2, .L172+24
 2766 00ea 1360     		str	r3, [r2]
 2767 00ec BB68     		ldr	r3, [r7, #8]
 2768 00ee DA6A     		ldr	r2, [r3, #44]
ARM GAS  /tmp/cc7uEwzT.s 			page 89


 2769 00f0 1346     		mov	r3, r2
 2770 00f2 9B00     		lsls	r3, r3, #2
 2771 00f4 1344     		add	r3, r3, r2
 2772 00f6 9B00     		lsls	r3, r3, #2
 2773 00f8 1F4A     		ldr	r2, .L172+28
 2774 00fa 1A44     		add	r2, r2, r3
 2775 00fc BB68     		ldr	r3, [r7, #8]
 2776 00fe 0433     		adds	r3, r3, #4
 2777 0100 1046     		mov	r0, r2
 2778 0102 1946     		mov	r1, r3
 2779 0104 FFF7FEFF 		bl	vListInsertEnd
2038:../../../FreeRTOS/Source/tasks.c **** 
2039:../../../FreeRTOS/Source/tasks.c **** 						/* A task being unblocked cannot cause an immediate
2040:../../../FreeRTOS/Source/tasks.c **** 						context switch if preemption is turned off. */
2041:../../../FreeRTOS/Source/tasks.c **** 						#if (  configUSE_PREEMPTION == 1 )
2042:../../../FreeRTOS/Source/tasks.c **** 						{
2043:../../../FreeRTOS/Source/tasks.c **** 							/* Preemption is on, but a context switch should
2044:../../../FreeRTOS/Source/tasks.c **** 							only be performed if the unblocked task has a
2045:../../../FreeRTOS/Source/tasks.c **** 							priority that is equal to or higher than the
2046:../../../FreeRTOS/Source/tasks.c **** 							currently executing task. */
2047:../../../FreeRTOS/Source/tasks.c **** 							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2780              		.loc 1 2047 0
 2781 0108 BB68     		ldr	r3, [r7, #8]
 2782 010a DA6A     		ldr	r2, [r3, #44]
 2783 010c 1B4B     		ldr	r3, .L172+32
 2784 010e 1B68     		ldr	r3, [r3]
 2785 0110 DB6A     		ldr	r3, [r3, #44]
 2786 0112 9A42     		cmp	r2, r3
 2787 0114 01D3     		bcc	.L167
2048:../../../FreeRTOS/Source/tasks.c **** 							{
2049:../../../FreeRTOS/Source/tasks.c **** 								xSwitchRequired = pdTRUE;
 2788              		.loc 1 2049 0
 2789 0116 0123     		movs	r3, #1
 2790 0118 7B61     		str	r3, [r7, #20]
 2791              	.L167:
2050:../../../FreeRTOS/Source/tasks.c **** 							}
2051:../../../FreeRTOS/Source/tasks.c **** 							else
2052:../../../FreeRTOS/Source/tasks.c **** 							{
2053:../../../FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2054:../../../FreeRTOS/Source/tasks.c **** 							}
2055:../../../FreeRTOS/Source/tasks.c **** 						}
2056:../../../FreeRTOS/Source/tasks.c **** 						#endif /* configUSE_PREEMPTION */
2057:../../../FreeRTOS/Source/tasks.c **** 					}
2058:../../../FreeRTOS/Source/tasks.c **** 				}
 2792              		.loc 1 2058 0
 2793 011a ABE7     		b	.L168
 2794              	.L161:
 2795              	.LBE127:
2059:../../../FreeRTOS/Source/tasks.c **** 			}
2060:../../../FreeRTOS/Source/tasks.c **** 		}
2061:../../../FreeRTOS/Source/tasks.c **** 
2062:../../../FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2063:../../../FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2064:../../../FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2065:../../../FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2066:../../../FreeRTOS/Source/tasks.c **** 		{
2067:../../../FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
ARM GAS  /tmp/cc7uEwzT.s 			page 90


 2796              		.loc 1 2067 0
 2797 011c 174B     		ldr	r3, .L172+32
 2798 011e 1B68     		ldr	r3, [r3]
 2799 0120 DA6A     		ldr	r2, [r3, #44]
 2800 0122 1549     		ldr	r1, .L172+28
 2801 0124 1346     		mov	r3, r2
 2802 0126 9B00     		lsls	r3, r3, #2
 2803 0128 1344     		add	r3, r3, r2
 2804 012a 9B00     		lsls	r3, r3, #2
 2805 012c 0B44     		add	r3, r3, r1
 2806 012e 1B68     		ldr	r3, [r3]
 2807 0130 012B     		cmp	r3, #1
 2808 0132 07D9     		bls	.L169
2068:../../../FreeRTOS/Source/tasks.c **** 			{
2069:../../../FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
 2809              		.loc 1 2069 0
 2810 0134 0123     		movs	r3, #1
 2811 0136 7B61     		str	r3, [r7, #20]
 2812 0138 04E0     		b	.L169
 2813              	.L157:
2070:../../../FreeRTOS/Source/tasks.c **** 			}
2071:../../../FreeRTOS/Source/tasks.c **** 			else
2072:../../../FreeRTOS/Source/tasks.c **** 			{
2073:../../../FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2074:../../../FreeRTOS/Source/tasks.c **** 			}
2075:../../../FreeRTOS/Source/tasks.c **** 		}
2076:../../../FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2077:../../../FreeRTOS/Source/tasks.c **** 
2078:../../../FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2079:../../../FreeRTOS/Source/tasks.c **** 		{
2080:../../../FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2081:../../../FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2082:../../../FreeRTOS/Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2083:../../../FreeRTOS/Source/tasks.c **** 			{
2084:../../../FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2085:../../../FreeRTOS/Source/tasks.c **** 			}
2086:../../../FreeRTOS/Source/tasks.c **** 			else
2087:../../../FreeRTOS/Source/tasks.c **** 			{
2088:../../../FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2089:../../../FreeRTOS/Source/tasks.c **** 			}
2090:../../../FreeRTOS/Source/tasks.c **** 		}
2091:../../../FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2092:../../../FreeRTOS/Source/tasks.c **** 	}
2093:../../../FreeRTOS/Source/tasks.c **** 	else
2094:../../../FreeRTOS/Source/tasks.c **** 	{
2095:../../../FreeRTOS/Source/tasks.c **** 		++uxPendedTicks;
 2814              		.loc 1 2095 0
 2815 013a 114B     		ldr	r3, .L172+36
 2816 013c 1B68     		ldr	r3, [r3]
 2817 013e 0133     		adds	r3, r3, #1
 2818 0140 0F4A     		ldr	r2, .L172+36
 2819 0142 1360     		str	r3, [r2]
 2820              	.L169:
2096:../../../FreeRTOS/Source/tasks.c **** 
2097:../../../FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2098:../../../FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2099:../../../FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
ARM GAS  /tmp/cc7uEwzT.s 			page 91


2100:../../../FreeRTOS/Source/tasks.c **** 		{
2101:../../../FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2102:../../../FreeRTOS/Source/tasks.c **** 		}
2103:../../../FreeRTOS/Source/tasks.c **** 		#endif
2104:../../../FreeRTOS/Source/tasks.c **** 	}
2105:../../../FreeRTOS/Source/tasks.c **** 
2106:../../../FreeRTOS/Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2107:../../../FreeRTOS/Source/tasks.c **** 	{
2108:../../../FreeRTOS/Source/tasks.c **** 		if( xYieldPending != pdFALSE )
 2821              		.loc 1 2108 0
 2822 0144 0F4B     		ldr	r3, .L172+40
 2823 0146 1B68     		ldr	r3, [r3]
 2824 0148 002B     		cmp	r3, #0
 2825 014a 01D0     		beq	.L170
2109:../../../FreeRTOS/Source/tasks.c **** 		{
2110:../../../FreeRTOS/Source/tasks.c **** 			xSwitchRequired = pdTRUE;
 2826              		.loc 1 2110 0
 2827 014c 0123     		movs	r3, #1
 2828 014e 7B61     		str	r3, [r7, #20]
 2829              	.L170:
2111:../../../FreeRTOS/Source/tasks.c **** 		}
2112:../../../FreeRTOS/Source/tasks.c **** 		else
2113:../../../FreeRTOS/Source/tasks.c **** 		{
2114:../../../FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2115:../../../FreeRTOS/Source/tasks.c **** 		}
2116:../../../FreeRTOS/Source/tasks.c **** 	}
2117:../../../FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2118:../../../FreeRTOS/Source/tasks.c **** 
2119:../../../FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
 2830              		.loc 1 2119 0
 2831 0150 7B69     		ldr	r3, [r7, #20]
2120:../../../FreeRTOS/Source/tasks.c **** }
 2832              		.loc 1 2120 0
 2833 0152 1846     		mov	r0, r3
 2834 0154 1837     		adds	r7, r7, #24
 2835              	.LCFI93:
 2836              		.cfi_def_cfa_offset 8
 2837 0156 BD46     		mov	sp, r7
 2838              	.LCFI94:
 2839              		.cfi_def_cfa_register 13
 2840              		@ sp needed
 2841 0158 80BD     		pop	{r7, pc}
 2842              	.L173:
 2843 015a 00BF     		.align	2
 2844              	.L172:
 2845 015c 00000000 		.word	uxSchedulerSuspended
 2846 0160 00000000 		.word	xTickCount
 2847 0164 00000000 		.word	pxDelayedTaskList
 2848 0168 00000000 		.word	pxOverflowDelayedTaskList
 2849 016c 00000000 		.word	xNumOfOverflows
 2850 0170 00000000 		.word	xNextTaskUnblockTime
 2851 0174 00000000 		.word	uxTopReadyPriority
 2852 0178 00000000 		.word	pxReadyTasksLists
 2853 017c 00000000 		.word	pxCurrentTCB
 2854 0180 00000000 		.word	uxPendedTicks
 2855 0184 00000000 		.word	xYieldPending
 2856              		.cfi_endproc
ARM GAS  /tmp/cc7uEwzT.s 			page 92


 2857              	.LFE22:
 2859              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2860              		.align	2
 2861              		.global	vTaskSwitchContext
 2862              		.thumb
 2863              		.thumb_func
 2865              	vTaskSwitchContext:
 2866              	.LFB23:
2121:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2122:../../../FreeRTOS/Source/tasks.c **** 
2123:../../../FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2124:../../../FreeRTOS/Source/tasks.c **** 
2125:../../../FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2126:../../../FreeRTOS/Source/tasks.c **** 	{
2127:../../../FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2128:../../../FreeRTOS/Source/tasks.c **** 
2129:../../../FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2130:../../../FreeRTOS/Source/tasks.c **** 		getting set. */
2131:../../../FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2132:../../../FreeRTOS/Source/tasks.c **** 		{
2133:../../../FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2134:../../../FreeRTOS/Source/tasks.c **** 		}
2135:../../../FreeRTOS/Source/tasks.c **** 		else
2136:../../../FreeRTOS/Source/tasks.c **** 		{
2137:../../../FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2138:../../../FreeRTOS/Source/tasks.c **** 		}
2139:../../../FreeRTOS/Source/tasks.c **** 
2140:../../../FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2141:../../../FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2142:../../../FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2143:../../../FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2144:../../../FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2145:../../../FreeRTOS/Source/tasks.c **** 	}
2146:../../../FreeRTOS/Source/tasks.c **** 
2147:../../../FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2148:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2149:../../../FreeRTOS/Source/tasks.c **** 
2150:../../../FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2151:../../../FreeRTOS/Source/tasks.c **** 
2152:../../../FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2153:../../../FreeRTOS/Source/tasks.c **** 	{
2154:../../../FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2155:../../../FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2156:../../../FreeRTOS/Source/tasks.c **** 
2157:../../../FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2158:../../../FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2159:../../../FreeRTOS/Source/tasks.c **** 		{
2160:../../../FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2161:../../../FreeRTOS/Source/tasks.c **** 		}
2162:../../../FreeRTOS/Source/tasks.c **** 		else
2163:../../../FreeRTOS/Source/tasks.c **** 		{
2164:../../../FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2165:../../../FreeRTOS/Source/tasks.c **** 		}
2166:../../../FreeRTOS/Source/tasks.c **** 
2167:../../../FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2168:../../../FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2169:../../../FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
ARM GAS  /tmp/cc7uEwzT.s 			page 93


2170:../../../FreeRTOS/Source/tasks.c **** 		{
2171:../../../FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2172:../../../FreeRTOS/Source/tasks.c **** 		}
2173:../../../FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2174:../../../FreeRTOS/Source/tasks.c **** 
2175:../../../FreeRTOS/Source/tasks.c **** 		return xReturn;
2176:../../../FreeRTOS/Source/tasks.c **** 	}
2177:../../../FreeRTOS/Source/tasks.c **** 
2178:../../../FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2179:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2180:../../../FreeRTOS/Source/tasks.c **** 
2181:../../../FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2182:../../../FreeRTOS/Source/tasks.c **** 
2183:../../../FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2184:../../../FreeRTOS/Source/tasks.c **** 	{
2185:../../../FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2186:../../../FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2187:../../../FreeRTOS/Source/tasks.c **** 
2188:../../../FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2189:../../../FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2190:../../../FreeRTOS/Source/tasks.c **** 		{
2191:../../../FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2192:../../../FreeRTOS/Source/tasks.c **** 		}
2193:../../../FreeRTOS/Source/tasks.c **** 		else
2194:../../../FreeRTOS/Source/tasks.c **** 		{
2195:../../../FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2196:../../../FreeRTOS/Source/tasks.c **** 		}
2197:../../../FreeRTOS/Source/tasks.c **** 
2198:../../../FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2199:../../../FreeRTOS/Source/tasks.c **** 		{
2200:../../../FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2201:../../../FreeRTOS/Source/tasks.c **** 		}
2202:../../../FreeRTOS/Source/tasks.c **** 		else
2203:../../../FreeRTOS/Source/tasks.c **** 		{
2204:../../../FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2205:../../../FreeRTOS/Source/tasks.c **** 		}
2206:../../../FreeRTOS/Source/tasks.c **** 
2207:../../../FreeRTOS/Source/tasks.c **** 		return xReturn;
2208:../../../FreeRTOS/Source/tasks.c **** 	}
2209:../../../FreeRTOS/Source/tasks.c **** 
2210:../../../FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2211:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2212:../../../FreeRTOS/Source/tasks.c **** 
2213:../../../FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2214:../../../FreeRTOS/Source/tasks.c **** {
 2867              		.loc 1 2214 0
 2868              		.cfi_startproc
 2869              		@ args = 0, pretend = 0, frame = 24
 2870              		@ frame_needed = 1, uses_anonymous_args = 0
 2871 0000 80B5     		push	{r7, lr}
 2872              	.LCFI95:
 2873              		.cfi_def_cfa_offset 8
 2874              		.cfi_offset 7, -8
 2875              		.cfi_offset 14, -4
 2876 0002 86B0     		sub	sp, sp, #24
 2877              	.LCFI96:
 2878              		.cfi_def_cfa_offset 32
ARM GAS  /tmp/cc7uEwzT.s 			page 94


 2879 0004 00AF     		add	r7, sp, #0
 2880              	.LCFI97:
 2881              		.cfi_def_cfa_register 7
2215:../../../FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2882              		.loc 1 2215 0
 2883 0006 2E4B     		ldr	r3, .L182
 2884 0008 1B68     		ldr	r3, [r3]
 2885 000a 002B     		cmp	r3, #0
 2886 000c 03D0     		beq	.L175
2216:../../../FreeRTOS/Source/tasks.c **** 	{
2217:../../../FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2218:../../../FreeRTOS/Source/tasks.c **** 		switch. */
2219:../../../FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 2887              		.loc 1 2219 0
 2888 000e 2D4B     		ldr	r3, .L182+4
 2889 0010 0122     		movs	r2, #1
 2890 0012 1A60     		str	r2, [r3]
 2891 0014 51E0     		b	.L174
 2892              	.L175:
2220:../../../FreeRTOS/Source/tasks.c **** 	}
2221:../../../FreeRTOS/Source/tasks.c **** 	else
2222:../../../FreeRTOS/Source/tasks.c **** 	{
2223:../../../FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
 2893              		.loc 1 2223 0
 2894 0016 2B4B     		ldr	r3, .L182+4
 2895 0018 0022     		movs	r2, #0
 2896 001a 1A60     		str	r2, [r3]
 2897              	.LBB131:
2224:../../../FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2225:../../../FreeRTOS/Source/tasks.c **** 
2226:../../../FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2227:../../../FreeRTOS/Source/tasks.c **** 		{
2228:../../../FreeRTOS/Source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2229:../../../FreeRTOS/Source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2230:../../../FreeRTOS/Source/tasks.c **** 				#else
2231:../../../FreeRTOS/Source/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2232:../../../FreeRTOS/Source/tasks.c **** 				#endif
2233:../../../FreeRTOS/Source/tasks.c **** 
2234:../../../FreeRTOS/Source/tasks.c **** 				/* Add the amount of time the task has been running to the
2235:../../../FreeRTOS/Source/tasks.c **** 				accumulated	time so far.  The time the task started running was
2236:../../../FreeRTOS/Source/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2237:../../../FreeRTOS/Source/tasks.c **** 				protection here	so count values are only valid until the timer
2238:../../../FreeRTOS/Source/tasks.c **** 				overflows.  The guard against negative values is to protect
2239:../../../FreeRTOS/Source/tasks.c **** 				against suspect run time stat counter implementations - which
2240:../../../FreeRTOS/Source/tasks.c **** 				are provided by the application, not the kernel. */
2241:../../../FreeRTOS/Source/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2242:../../../FreeRTOS/Source/tasks.c **** 				{
2243:../../../FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2244:../../../FreeRTOS/Source/tasks.c **** 				}
2245:../../../FreeRTOS/Source/tasks.c **** 				else
2246:../../../FreeRTOS/Source/tasks.c **** 				{
2247:../../../FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2248:../../../FreeRTOS/Source/tasks.c **** 				}
2249:../../../FreeRTOS/Source/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2250:../../../FreeRTOS/Source/tasks.c **** 		}
2251:../../../FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2252:../../../FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc7uEwzT.s 			page 95


2253:../../../FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2254:../../../FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2255:../../../FreeRTOS/Source/tasks.c **** 
2256:../../../FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2257:../../../FreeRTOS/Source/tasks.c **** 		optimised asm code. */
2258:../../../FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
 2898              		.loc 1 2258 0
 2899 001c 2A4B     		ldr	r3, .L182+8
 2900 001e 1B68     		ldr	r3, [r3]
 2901 0020 FB60     		str	r3, [r7, #12]
 2902              	.LBB132:
 2903              	.LBB133:
 176:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 2904              		.loc 2 176 0
 2905 0022 FB68     		ldr	r3, [r7, #12]
 2906              	@ 176 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2907 0024 B3FA83F3 		clz r3, r3
 2908              	@ 0 "" 2
 2909              		.thumb
 2910 0028 FB72     		strb	r3, [r7, #11]
 177:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 2911              		.loc 2 177 0
 2912 002a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 2913              	.LBE133:
 2914              	.LBE132:
 2915              		.loc 1 2258 0
 2916 002c C3F11F03 		rsb	r3, r3, #31
 2917 0030 7B61     		str	r3, [r7, #20]
 2918 0032 2649     		ldr	r1, .L182+12
 2919 0034 7A69     		ldr	r2, [r7, #20]
 2920 0036 1346     		mov	r3, r2
 2921 0038 9B00     		lsls	r3, r3, #2
 2922 003a 1344     		add	r3, r3, r2
 2923 003c 9B00     		lsls	r3, r3, #2
 2924 003e 0B44     		add	r3, r3, r1
 2925 0040 1B68     		ldr	r3, [r3]
 2926 0042 002B     		cmp	r3, #0
 2927 0044 09D1     		bne	.L178
 2928              	.LBB134:
 2929              	.LBB135:
 215:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2930              		.loc 2 215 0 discriminator 1
 2931              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2932 0046 4FF05003 			mov r3, #80												
 2933 004a 83F31188 		msr basepri, r3											
 2934 004e BFF36F8F 		isb														
 2935 0052 BFF34F8F 		dsb														
 2936              	
 2937              	@ 0 "" 2
 2938              		.thumb
 2939 0056 7B60     		str	r3, [r7, #4]
 2940              	.L179:
 2941              	.LBE135:
 2942              	.LBE134:
 2943              		.loc 1 2258 0 discriminator 1
 2944 0058 FEE7     		b	.L179
 2945              	.L178:
ARM GAS  /tmp/cc7uEwzT.s 			page 96


 2946              	.LBB136:
 2947              		.loc 1 2258 0 is_stmt 0 discriminator 2
 2948 005a 7A69     		ldr	r2, [r7, #20]
 2949 005c 1346     		mov	r3, r2
 2950 005e 9B00     		lsls	r3, r3, #2
 2951 0060 1344     		add	r3, r3, r2
 2952 0062 9B00     		lsls	r3, r3, #2
 2953 0064 194A     		ldr	r2, .L182+12
 2954 0066 1344     		add	r3, r3, r2
 2955 0068 3B61     		str	r3, [r7, #16]
 2956 006a 3B69     		ldr	r3, [r7, #16]
 2957 006c 5B68     		ldr	r3, [r3, #4]
 2958 006e 5A68     		ldr	r2, [r3, #4]
 2959 0070 3B69     		ldr	r3, [r7, #16]
 2960 0072 5A60     		str	r2, [r3, #4]
 2961 0074 3B69     		ldr	r3, [r7, #16]
 2962 0076 5A68     		ldr	r2, [r3, #4]
 2963 0078 3B69     		ldr	r3, [r7, #16]
 2964 007a 0833     		adds	r3, r3, #8
 2965 007c 9A42     		cmp	r2, r3
 2966 007e 04D1     		bne	.L180
 2967              		.loc 1 2258 0 discriminator 3
 2968 0080 3B69     		ldr	r3, [r7, #16]
 2969 0082 5B68     		ldr	r3, [r3, #4]
 2970 0084 5A68     		ldr	r2, [r3, #4]
 2971 0086 3B69     		ldr	r3, [r7, #16]
 2972 0088 5A60     		str	r2, [r3, #4]
 2973              	.L180:
 2974              		.loc 1 2258 0 discriminator 5
 2975 008a 3B69     		ldr	r3, [r7, #16]
 2976 008c 5B68     		ldr	r3, [r3, #4]
 2977 008e DB68     		ldr	r3, [r3, #12]
 2978 0090 0F4A     		ldr	r2, .L182+16
 2979 0092 1360     		str	r3, [r2]
 2980              	.LBE136:
 2981              	.LBE131:
2259:../../../FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2982              		.loc 1 2259 0 is_stmt 1 discriminator 5
 2983 0094 0E4B     		ldr	r3, .L182+16
 2984 0096 1B68     		ldr	r3, [r3]
 2985 0098 3433     		adds	r3, r3, #52
 2986 009a 1846     		mov	r0, r3
 2987 009c 0D49     		ldr	r1, .L182+20
 2988 009e 0522     		movs	r2, #5
 2989 00a0 FFF7FEFF 		bl	memcmp
 2990 00a4 0346     		mov	r3, r0
 2991 00a6 002B     		cmp	r3, #0
 2992 00a8 05D0     		beq	.L181
 2993              		.loc 1 2259 0 is_stmt 0 discriminator 1
 2994 00aa 094B     		ldr	r3, .L182+16
 2995 00ac 1B68     		ldr	r3, [r3]
 2996 00ae 1846     		mov	r0, r3
 2997 00b0 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStartExec
 2998 00b4 01E0     		b	.L174
 2999              	.L181:
 3000              		.loc 1 2259 0 discriminator 2
 3001 00b6 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnIdle
ARM GAS  /tmp/cc7uEwzT.s 			page 97


 3002              	.L174:
2260:../../../FreeRTOS/Source/tasks.c **** 
2261:../../../FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2262:../../../FreeRTOS/Source/tasks.c **** 		{
2263:../../../FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2264:../../../FreeRTOS/Source/tasks.c **** 			structure specific to this task. */
2265:../../../FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2266:../../../FreeRTOS/Source/tasks.c **** 		}
2267:../../../FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2268:../../../FreeRTOS/Source/tasks.c **** 	}
2269:../../../FreeRTOS/Source/tasks.c **** }
 3003              		.loc 1 2269 0 is_stmt 1
 3004 00ba 1837     		adds	r7, r7, #24
 3005              	.LCFI98:
 3006              		.cfi_def_cfa_offset 8
 3007 00bc BD46     		mov	sp, r7
 3008              	.LCFI99:
 3009              		.cfi_def_cfa_register 13
 3010              		@ sp needed
 3011 00be 80BD     		pop	{r7, pc}
 3012              	.L183:
 3013              		.align	2
 3014              	.L182:
 3015 00c0 00000000 		.word	uxSchedulerSuspended
 3016 00c4 00000000 		.word	xYieldPending
 3017 00c8 00000000 		.word	uxTopReadyPriority
 3018 00cc 00000000 		.word	pxReadyTasksLists
 3019 00d0 00000000 		.word	pxCurrentTCB
 3020 00d4 00000000 		.word	.LC0
 3021              		.cfi_endproc
 3022              	.LFE23:
 3024              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 3025              		.align	2
 3026              		.global	vTaskPlaceOnEventList
 3027              		.thumb
 3028              		.thumb_func
 3030              	vTaskPlaceOnEventList:
 3031              	.LFB24:
2270:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2271:../../../FreeRTOS/Source/tasks.c **** 
2272:../../../FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2273:../../../FreeRTOS/Source/tasks.c **** {
 3032              		.loc 1 2273 0
 3033              		.cfi_startproc
 3034              		@ args = 0, pretend = 0, frame = 16
 3035              		@ frame_needed = 1, uses_anonymous_args = 0
 3036 0000 80B5     		push	{r7, lr}
 3037              	.LCFI100:
 3038              		.cfi_def_cfa_offset 8
 3039              		.cfi_offset 7, -8
 3040              		.cfi_offset 14, -4
 3041 0002 84B0     		sub	sp, sp, #16
 3042              	.LCFI101:
 3043              		.cfi_def_cfa_offset 24
 3044 0004 00AF     		add	r7, sp, #0
 3045              	.LCFI102:
 3046              		.cfi_def_cfa_register 7
ARM GAS  /tmp/cc7uEwzT.s 			page 98


 3047 0006 7860     		str	r0, [r7, #4]
 3048 0008 3960     		str	r1, [r7]
2274:../../../FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
2275:../../../FreeRTOS/Source/tasks.c **** 
2276:../../../FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3049              		.loc 1 2276 0
 3050 000a 7B68     		ldr	r3, [r7, #4]
 3051 000c 002B     		cmp	r3, #0
 3052 000e 09D1     		bne	.L185
 3053              	.LBB137:
 3054              	.LBB138:
 215:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3055              		.loc 2 215 0 discriminator 1
 3056              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3057 0010 4FF05003 			mov r3, #80												
 3058 0014 83F31188 		msr basepri, r3											
 3059 0018 BFF36F8F 		isb														
 3060 001c BFF34F8F 		dsb														
 3061              	
 3062              	@ 0 "" 2
 3063              		.thumb
 3064 0020 BB60     		str	r3, [r7, #8]
 3065              	.L186:
 3066              	.LBE138:
 3067              	.LBE137:
 3068              		.loc 1 2276 0 discriminator 1
 3069 0022 FEE7     		b	.L186
 3070              	.L185:
2277:../../../FreeRTOS/Source/tasks.c **** 
2278:../../../FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2279:../../../FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2280:../../../FreeRTOS/Source/tasks.c **** 
2281:../../../FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2282:../../../FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2283:../../../FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2284:../../../FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2285:../../../FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 3071              		.loc 1 2285 0
 3072 0024 1C4B     		ldr	r3, .L190
 3073 0026 1B68     		ldr	r3, [r3]
 3074 0028 1833     		adds	r3, r3, #24
 3075 002a 7868     		ldr	r0, [r7, #4]
 3076 002c 1946     		mov	r1, r3
 3077 002e FFF7FEFF 		bl	vListInsert
2286:../../../FreeRTOS/Source/tasks.c **** 
2287:../../../FreeRTOS/Source/tasks.c **** 	/* The task must be removed from from the ready list before it is added to
2288:../../../FreeRTOS/Source/tasks.c **** 	the blocked list as the same list item is used for both lists.  Exclusive
2289:../../../FreeRTOS/Source/tasks.c **** 	access to the ready lists guaranteed because the scheduler is locked. */
2290:../../../FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 3078              		.loc 1 2290 0
 3079 0032 194B     		ldr	r3, .L190
 3080 0034 1B68     		ldr	r3, [r3]
 3081 0036 0433     		adds	r3, r3, #4
 3082 0038 1846     		mov	r0, r3
 3083 003a FFF7FEFF 		bl	uxListRemove
 3084 003e 0346     		mov	r3, r0
 3085 0040 002B     		cmp	r3, #0
ARM GAS  /tmp/cc7uEwzT.s 			page 99


 3086 0042 0BD1     		bne	.L187
2291:../../../FreeRTOS/Source/tasks.c **** 	{
2292:../../../FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
2293:../../../FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
2294:../../../FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 3087              		.loc 1 2294 0
 3088 0044 144B     		ldr	r3, .L190
 3089 0046 1B68     		ldr	r3, [r3]
 3090 0048 DB6A     		ldr	r3, [r3, #44]
 3091 004a 1A46     		mov	r2, r3
 3092 004c 0123     		movs	r3, #1
 3093 004e 9340     		lsls	r3, r3, r2
 3094 0050 DA43     		mvns	r2, r3
 3095 0052 124B     		ldr	r3, .L190+4
 3096 0054 1B68     		ldr	r3, [r3]
 3097 0056 1340     		ands	r3, r3, r2
 3098 0058 104A     		ldr	r2, .L190+4
 3099 005a 1360     		str	r3, [r2]
 3100              	.L187:
2295:../../../FreeRTOS/Source/tasks.c **** 	}
2296:../../../FreeRTOS/Source/tasks.c **** 	else
2297:../../../FreeRTOS/Source/tasks.c **** 	{
2298:../../../FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
2299:../../../FreeRTOS/Source/tasks.c **** 	}
2300:../../../FreeRTOS/Source/tasks.c **** 
2301:../../../FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
2302:../../../FreeRTOS/Source/tasks.c **** 	{
2303:../../../FreeRTOS/Source/tasks.c **** 		if( xTicksToWait == portMAX_DELAY )
 3101              		.loc 1 2303 0
 3102 005c 3B68     		ldr	r3, [r7]
 3103 005e B3F1FF3F 		cmp	r3, #-1
 3104 0062 0DD1     		bne	.L188
2304:../../../FreeRTOS/Source/tasks.c **** 		{
2305:../../../FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
2306:../../../FreeRTOS/Source/tasks.c **** 			list to ensure the task is not woken by a timing event.  It will
2307:../../../FreeRTOS/Source/tasks.c **** 			block indefinitely. */
2308:../../../FreeRTOS/Source/tasks.c **** 			traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 3105              		.loc 1 2308 0
 3106 0064 0C4B     		ldr	r3, .L190
 3107 0066 1B68     		ldr	r3, [r3]
 3108 0068 1846     		mov	r0, r3
 3109 006a 1B21     		movs	r1, #27
 3110 006c FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStopReady
2309:../../../FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 3111              		.loc 1 2309 0
 3112 0070 094B     		ldr	r3, .L190
 3113 0072 1B68     		ldr	r3, [r3]
 3114 0074 0433     		adds	r3, r3, #4
 3115 0076 0A48     		ldr	r0, .L190+8
 3116 0078 1946     		mov	r1, r3
 3117 007a FFF7FEFF 		bl	vListInsertEnd
 3118 007e 07E0     		b	.L184
 3119              	.L188:
2310:../../../FreeRTOS/Source/tasks.c **** 		}
2311:../../../FreeRTOS/Source/tasks.c **** 		else
2312:../../../FreeRTOS/Source/tasks.c **** 		{
2313:../../../FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
ARM GAS  /tmp/cc7uEwzT.s 			page 100


2314:../../../FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
2315:../../../FreeRTOS/Source/tasks.c **** 			scheduler will handle it. */
2316:../../../FreeRTOS/Source/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
 3120              		.loc 1 2316 0
 3121 0080 084B     		ldr	r3, .L190+12
 3122 0082 1A68     		ldr	r2, [r3]
 3123 0084 3B68     		ldr	r3, [r7]
 3124 0086 1344     		add	r3, r3, r2
 3125 0088 FB60     		str	r3, [r7, #12]
2317:../../../FreeRTOS/Source/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
 3126              		.loc 1 2317 0
 3127 008a F868     		ldr	r0, [r7, #12]
 3128 008c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3129              	.L184:
2318:../../../FreeRTOS/Source/tasks.c **** 		}
2319:../../../FreeRTOS/Source/tasks.c **** 	}
2320:../../../FreeRTOS/Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
2321:../../../FreeRTOS/Source/tasks.c **** 	{
2322:../../../FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event does
2323:../../../FreeRTOS/Source/tasks.c **** 			not occur.  This may overflow but this doesn't matter, the scheduler
2324:../../../FreeRTOS/Source/tasks.c **** 			will handle it. */
2325:../../../FreeRTOS/Source/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
2326:../../../FreeRTOS/Source/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
2327:../../../FreeRTOS/Source/tasks.c **** 	}
2328:../../../FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
2329:../../../FreeRTOS/Source/tasks.c **** }
 3130              		.loc 1 2329 0
 3131 0090 1037     		adds	r7, r7, #16
 3132              	.LCFI103:
 3133              		.cfi_def_cfa_offset 8
 3134 0092 BD46     		mov	sp, r7
 3135              	.LCFI104:
 3136              		.cfi_def_cfa_register 13
 3137              		@ sp needed
 3138 0094 80BD     		pop	{r7, pc}
 3139              	.L191:
 3140 0096 00BF     		.align	2
 3141              	.L190:
 3142 0098 00000000 		.word	pxCurrentTCB
 3143 009c 00000000 		.word	uxTopReadyPriority
 3144 00a0 00000000 		.word	xSuspendedTaskList
 3145 00a4 00000000 		.word	xTickCount
 3146              		.cfi_endproc
 3147              	.LFE24:
 3149              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3150              		.align	2
 3151              		.global	vTaskPlaceOnUnorderedEventList
 3152              		.thumb
 3153              		.thumb_func
 3155              	vTaskPlaceOnUnorderedEventList:
 3156              	.LFB25:
2330:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2331:../../../FreeRTOS/Source/tasks.c **** 
2332:../../../FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2333:../../../FreeRTOS/Source/tasks.c **** {
 3157              		.loc 1 2333 0
 3158              		.cfi_startproc
ARM GAS  /tmp/cc7uEwzT.s 			page 101


 3159              		@ args = 0, pretend = 0, frame = 32
 3160              		@ frame_needed = 1, uses_anonymous_args = 0
 3161 0000 80B5     		push	{r7, lr}
 3162              	.LCFI105:
 3163              		.cfi_def_cfa_offset 8
 3164              		.cfi_offset 7, -8
 3165              		.cfi_offset 14, -4
 3166 0002 88B0     		sub	sp, sp, #32
 3167              	.LCFI106:
 3168              		.cfi_def_cfa_offset 40
 3169 0004 00AF     		add	r7, sp, #0
 3170              	.LCFI107:
 3171              		.cfi_def_cfa_register 7
 3172 0006 F860     		str	r0, [r7, #12]
 3173 0008 B960     		str	r1, [r7, #8]
 3174 000a 7A60     		str	r2, [r7, #4]
2334:../../../FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
2335:../../../FreeRTOS/Source/tasks.c **** 
2336:../../../FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3175              		.loc 1 2336 0
 3176 000c FB68     		ldr	r3, [r7, #12]
 3177 000e 002B     		cmp	r3, #0
 3178 0010 09D1     		bne	.L193
 3179              	.LBB139:
 3180              	.LBB140:
 215:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3181              		.loc 2 215 0 discriminator 1
 3182              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3183 0012 4FF05003 			mov r3, #80												
 3184 0016 83F31188 		msr basepri, r3											
 3185 001a BFF36F8F 		isb														
 3186 001e BFF34F8F 		dsb														
 3187              	
 3188              	@ 0 "" 2
 3189              		.thumb
 3190 0022 BB61     		str	r3, [r7, #24]
 3191              	.L194:
 3192              	.LBE140:
 3193              	.LBE139:
 3194              		.loc 1 2336 0 discriminator 1
 3195 0024 FEE7     		b	.L194
 3196              	.L193:
2337:../../../FreeRTOS/Source/tasks.c **** 
2338:../../../FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2339:../../../FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
2340:../../../FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
 3197              		.loc 1 2340 0
 3198 0026 264B     		ldr	r3, .L200
 3199 0028 1B68     		ldr	r3, [r3]
 3200 002a 002B     		cmp	r3, #0
 3201 002c 09D1     		bne	.L195
 3202              	.LBB141:
 3203              	.LBB142:
 215:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3204              		.loc 2 215 0 discriminator 1
 3205              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3206 002e 4FF05003 			mov r3, #80												
ARM GAS  /tmp/cc7uEwzT.s 			page 102


 3207 0032 83F31188 		msr basepri, r3											
 3208 0036 BFF36F8F 		isb														
 3209 003a BFF34F8F 		dsb														
 3210              	
 3211              	@ 0 "" 2
 3212              		.thumb
 3213 003e 7B61     		str	r3, [r7, #20]
 3214              	.L196:
 3215              	.LBE142:
 3216              	.LBE141:
 3217              		.loc 1 2340 0 discriminator 2
 3218 0040 FEE7     		b	.L196
 3219              	.L195:
2341:../../../FreeRTOS/Source/tasks.c **** 
2342:../../../FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2343:../../../FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2344:../../../FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
2345:../../../FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
 3220              		.loc 1 2345 0
 3221 0042 204B     		ldr	r3, .L200+4
 3222 0044 1B68     		ldr	r3, [r3]
 3223 0046 BA68     		ldr	r2, [r7, #8]
 3224 0048 42F00042 		orr	r2, r2, #-2147483648
 3225 004c 9A61     		str	r2, [r3, #24]
2346:../../../FreeRTOS/Source/tasks.c **** 
2347:../../../FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2348:../../../FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2349:../../../FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
2350:../../../FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2351:../../../FreeRTOS/Source/tasks.c **** 	the task level). */
2352:../../../FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 3226              		.loc 1 2352 0
 3227 004e 1D4B     		ldr	r3, .L200+4
 3228 0050 1B68     		ldr	r3, [r3]
 3229 0052 1833     		adds	r3, r3, #24
 3230 0054 F868     		ldr	r0, [r7, #12]
 3231 0056 1946     		mov	r1, r3
 3232 0058 FFF7FEFF 		bl	vListInsertEnd
2353:../../../FreeRTOS/Source/tasks.c **** 
2354:../../../FreeRTOS/Source/tasks.c **** 	/* The task must be removed from the ready list before it is added to the
2355:../../../FreeRTOS/Source/tasks.c **** 	blocked list.  Exclusive access can be assured to the ready list as the
2356:../../../FreeRTOS/Source/tasks.c **** 	scheduler is locked. */
2357:../../../FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 3233              		.loc 1 2357 0
 3234 005c 194B     		ldr	r3, .L200+4
 3235 005e 1B68     		ldr	r3, [r3]
 3236 0060 0433     		adds	r3, r3, #4
 3237 0062 1846     		mov	r0, r3
 3238 0064 FFF7FEFF 		bl	uxListRemove
 3239 0068 0346     		mov	r3, r0
 3240 006a 002B     		cmp	r3, #0
 3241 006c 0BD1     		bne	.L197
2358:../../../FreeRTOS/Source/tasks.c **** 	{
2359:../../../FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
2360:../../../FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
2361:../../../FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 3242              		.loc 1 2361 0
ARM GAS  /tmp/cc7uEwzT.s 			page 103


 3243 006e 154B     		ldr	r3, .L200+4
 3244 0070 1B68     		ldr	r3, [r3]
 3245 0072 DB6A     		ldr	r3, [r3, #44]
 3246 0074 1A46     		mov	r2, r3
 3247 0076 0123     		movs	r3, #1
 3248 0078 9340     		lsls	r3, r3, r2
 3249 007a DA43     		mvns	r2, r3
 3250 007c 124B     		ldr	r3, .L200+8
 3251 007e 1B68     		ldr	r3, [r3]
 3252 0080 1340     		ands	r3, r3, r2
 3253 0082 114A     		ldr	r2, .L200+8
 3254 0084 1360     		str	r3, [r2]
 3255              	.L197:
2362:../../../FreeRTOS/Source/tasks.c **** 	}
2363:../../../FreeRTOS/Source/tasks.c **** 	else
2364:../../../FreeRTOS/Source/tasks.c **** 	{
2365:../../../FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
2366:../../../FreeRTOS/Source/tasks.c **** 	}
2367:../../../FreeRTOS/Source/tasks.c **** 
2368:../../../FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
2369:../../../FreeRTOS/Source/tasks.c **** 	{
2370:../../../FreeRTOS/Source/tasks.c **** 		if( xTicksToWait == portMAX_DELAY )
 3256              		.loc 1 2370 0
 3257 0086 7B68     		ldr	r3, [r7, #4]
 3258 0088 B3F1FF3F 		cmp	r3, #-1
 3259 008c 0DD1     		bne	.L198
2371:../../../FreeRTOS/Source/tasks.c **** 		{
2372:../../../FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
2373:../../../FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
2374:../../../FreeRTOS/Source/tasks.c **** 			indefinitely. */
2375:../../../FreeRTOS/Source/tasks.c **** 			traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 3260              		.loc 1 2375 0
 3261 008e 0D4B     		ldr	r3, .L200+4
 3262 0090 1B68     		ldr	r3, [r3]
 3263 0092 1846     		mov	r0, r3
 3264 0094 1B21     		movs	r1, #27
 3265 0096 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStopReady
2376:../../../FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 3266              		.loc 1 2376 0
 3267 009a 0A4B     		ldr	r3, .L200+4
 3268 009c 1B68     		ldr	r3, [r3]
 3269 009e 0433     		adds	r3, r3, #4
 3270 00a0 0A48     		ldr	r0, .L200+12
 3271 00a2 1946     		mov	r1, r3
 3272 00a4 FFF7FEFF 		bl	vListInsertEnd
 3273 00a8 07E0     		b	.L192
 3274              	.L198:
2377:../../../FreeRTOS/Source/tasks.c **** 		}
2378:../../../FreeRTOS/Source/tasks.c **** 		else
2379:../../../FreeRTOS/Source/tasks.c **** 		{
2380:../../../FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
2381:../../../FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
2382:../../../FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
2383:../../../FreeRTOS/Source/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
 3275              		.loc 1 2383 0
 3276 00aa 094B     		ldr	r3, .L200+16
 3277 00ac 1A68     		ldr	r2, [r3]
ARM GAS  /tmp/cc7uEwzT.s 			page 104


 3278 00ae 7B68     		ldr	r3, [r7, #4]
 3279 00b0 1344     		add	r3, r3, r2
 3280 00b2 FB61     		str	r3, [r7, #28]
2384:../../../FreeRTOS/Source/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
 3281              		.loc 1 2384 0
 3282 00b4 F869     		ldr	r0, [r7, #28]
 3283 00b6 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3284              	.L192:
2385:../../../FreeRTOS/Source/tasks.c **** 		}
2386:../../../FreeRTOS/Source/tasks.c **** 	}
2387:../../../FreeRTOS/Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
2388:../../../FreeRTOS/Source/tasks.c **** 	{
2389:../../../FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event does
2390:../../../FreeRTOS/Source/tasks.c **** 			not occur.  This may overflow but this doesn't matter, the kernel
2391:../../../FreeRTOS/Source/tasks.c **** 			will manage it correctly. */
2392:../../../FreeRTOS/Source/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
2393:../../../FreeRTOS/Source/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
2394:../../../FreeRTOS/Source/tasks.c **** 	}
2395:../../../FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
2396:../../../FreeRTOS/Source/tasks.c **** }
 3285              		.loc 1 2396 0
 3286 00ba 2037     		adds	r7, r7, #32
 3287              	.LCFI108:
 3288              		.cfi_def_cfa_offset 8
 3289 00bc BD46     		mov	sp, r7
 3290              	.LCFI109:
 3291              		.cfi_def_cfa_register 13
 3292              		@ sp needed
 3293 00be 80BD     		pop	{r7, pc}
 3294              	.L201:
 3295              		.align	2
 3296              	.L200:
 3297 00c0 00000000 		.word	uxSchedulerSuspended
 3298 00c4 00000000 		.word	pxCurrentTCB
 3299 00c8 00000000 		.word	uxTopReadyPriority
 3300 00cc 00000000 		.word	xSuspendedTaskList
 3301 00d0 00000000 		.word	xTickCount
 3302              		.cfi_endproc
 3303              	.LFE25:
 3305              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3306              		.align	2
 3307              		.global	xTaskRemoveFromEventList
 3308              		.thumb
 3309              		.thumb_func
 3311              	xTaskRemoveFromEventList:
 3312              	.LFB26:
2397:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2398:../../../FreeRTOS/Source/tasks.c **** 
2399:../../../FreeRTOS/Source/tasks.c **** #if configUSE_TIMERS == 1
2400:../../../FreeRTOS/Source/tasks.c **** 
2401:../../../FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait, c
2402:../../../FreeRTOS/Source/tasks.c **** 	{
2403:../../../FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
2404:../../../FreeRTOS/Source/tasks.c **** 
2405:../../../FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
2406:../../../FreeRTOS/Source/tasks.c **** 
2407:../../../FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
ARM GAS  /tmp/cc7uEwzT.s 			page 105


2408:../../../FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2409:../../../FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2410:../../../FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
2411:../../../FreeRTOS/Source/tasks.c **** 
2412:../../../FreeRTOS/Source/tasks.c **** 
2413:../../../FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2414:../../../FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
2415:../../../FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2416:../../../FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
2417:../../../FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2418:../../../FreeRTOS/Source/tasks.c **** 
2419:../../../FreeRTOS/Source/tasks.c **** 		/* We must remove this task from the ready list before adding it to the
2420:../../../FreeRTOS/Source/tasks.c **** 		blocked list as the same list item is used for both lists.  This
2421:../../../FreeRTOS/Source/tasks.c **** 		function is called with the scheduler locked so interrupts will not
2422:../../../FreeRTOS/Source/tasks.c **** 		access the lists at the same time. */
2423:../../../FreeRTOS/Source/tasks.c **** 		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
2424:../../../FreeRTOS/Source/tasks.c **** 		{
2425:../../../FreeRTOS/Source/tasks.c **** 			/* The current task must be in a ready list, so there is no need to
2426:../../../FreeRTOS/Source/tasks.c **** 			check, and the port reset macro can be called directly. */
2427:../../../FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
2428:../../../FreeRTOS/Source/tasks.c **** 		}
2429:../../../FreeRTOS/Source/tasks.c **** 		else
2430:../../../FreeRTOS/Source/tasks.c **** 		{
2431:../../../FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2432:../../../FreeRTOS/Source/tasks.c **** 		}
2433:../../../FreeRTOS/Source/tasks.c **** 
2434:../../../FreeRTOS/Source/tasks.c **** 		/* If vTaskSuspend() is available then the suspended task list is also
2435:../../../FreeRTOS/Source/tasks.c **** 		available and a task that is blocking indefinitely can enter the
2436:../../../FreeRTOS/Source/tasks.c **** 		suspended state (it is not really suspended as it will re-enter the
2437:../../../FreeRTOS/Source/tasks.c **** 		Ready state when the event it is waiting indefinitely for occurs).
2438:../../../FreeRTOS/Source/tasks.c **** 		Blocking indefinitely is useful when using tickless idle mode as when
2439:../../../FreeRTOS/Source/tasks.c **** 		all tasks are blocked indefinitely all timers can be turned off. */
2440:../../../FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_vTaskSuspend == 1 )
2441:../../../FreeRTOS/Source/tasks.c **** 		{
2442:../../../FreeRTOS/Source/tasks.c **** 			if( xWaitIndefinitely == pdTRUE )
2443:../../../FreeRTOS/Source/tasks.c **** 			{
2444:../../../FreeRTOS/Source/tasks.c **** 				/* Add the task to the suspended task list instead of a delayed
2445:../../../FreeRTOS/Source/tasks.c **** 				task list to ensure the task is not woken by a timing event.  It
2446:../../../FreeRTOS/Source/tasks.c **** 				will block indefinitely. */
2447:../../../FreeRTOS/Source/tasks.c **** 				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
2448:../../../FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
2449:../../../FreeRTOS/Source/tasks.c **** 			}
2450:../../../FreeRTOS/Source/tasks.c **** 			else
2451:../../../FreeRTOS/Source/tasks.c **** 			{
2452:../../../FreeRTOS/Source/tasks.c **** 				/* Calculate the time at which the task should be woken if the
2453:../../../FreeRTOS/Source/tasks.c **** 				event does not occur.  This may overflow but this doesn't
2454:../../../FreeRTOS/Source/tasks.c **** 				matter. */
2455:../../../FreeRTOS/Source/tasks.c **** 				xTimeToWake = xTickCount + xTicksToWait;
2456:../../../FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL();
2457:../../../FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
2458:../../../FreeRTOS/Source/tasks.c **** 			}
2459:../../../FreeRTOS/Source/tasks.c **** 		}
2460:../../../FreeRTOS/Source/tasks.c **** 		#else
2461:../../../FreeRTOS/Source/tasks.c **** 		{
2462:../../../FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
2463:../../../FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter. */
2464:../../../FreeRTOS/Source/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
ARM GAS  /tmp/cc7uEwzT.s 			page 106


2465:../../../FreeRTOS/Source/tasks.c **** 			traceTASK_DELAY_UNTIL();
2466:../../../FreeRTOS/Source/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
2467:../../../FreeRTOS/Source/tasks.c **** 
2468:../../../FreeRTOS/Source/tasks.c **** 			/* Remove compiler warnings when INCLUDE_vTaskSuspend() is not
2469:../../../FreeRTOS/Source/tasks.c **** 			defined. */
2470:../../../FreeRTOS/Source/tasks.c **** 			( void ) xWaitIndefinitely;
2471:../../../FreeRTOS/Source/tasks.c **** 		}
2472:../../../FreeRTOS/Source/tasks.c **** 		#endif
2473:../../../FreeRTOS/Source/tasks.c **** 	}
2474:../../../FreeRTOS/Source/tasks.c **** 
2475:../../../FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
2476:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2477:../../../FreeRTOS/Source/tasks.c **** 
2478:../../../FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2479:../../../FreeRTOS/Source/tasks.c **** {
 3313              		.loc 1 2479 0
 3314              		.cfi_startproc
 3315              		@ args = 0, pretend = 0, frame = 24
 3316              		@ frame_needed = 1, uses_anonymous_args = 0
 3317 0000 80B5     		push	{r7, lr}
 3318              	.LCFI110:
 3319              		.cfi_def_cfa_offset 8
 3320              		.cfi_offset 7, -8
 3321              		.cfi_offset 14, -4
 3322 0002 86B0     		sub	sp, sp, #24
 3323              	.LCFI111:
 3324              		.cfi_def_cfa_offset 32
 3325 0004 00AF     		add	r7, sp, #0
 3326              	.LCFI112:
 3327              		.cfi_def_cfa_register 7
 3328 0006 7860     		str	r0, [r7, #4]
2480:../../../FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
2481:../../../FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
2482:../../../FreeRTOS/Source/tasks.c **** 
2483:../../../FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2484:../../../FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
2485:../../../FreeRTOS/Source/tasks.c **** 
2486:../../../FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2487:../../../FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2488:../../../FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
2489:../../../FreeRTOS/Source/tasks.c **** 
2490:../../../FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
2491:../../../FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2492:../../../FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2493:../../../FreeRTOS/Source/tasks.c **** 
2494:../../../FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
2495:../../../FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
2496:../../../FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 3329              		.loc 1 2496 0
 3330 0008 7B68     		ldr	r3, [r7, #4]
 3331 000a DB68     		ldr	r3, [r3, #12]
 3332 000c DB68     		ldr	r3, [r3, #12]
 3333 000e 3B61     		str	r3, [r7, #16]
2497:../../../FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3334              		.loc 1 2497 0
 3335 0010 3B69     		ldr	r3, [r7, #16]
 3336 0012 002B     		cmp	r3, #0
ARM GAS  /tmp/cc7uEwzT.s 			page 107


 3337 0014 09D1     		bne	.L203
 3338              	.LBB143:
 3339              	.LBB144:
 215:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3340              		.loc 2 215 0 discriminator 1
 3341              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3342 0016 4FF05003 			mov r3, #80												
 3343 001a 83F31188 		msr basepri, r3											
 3344 001e BFF36F8F 		isb														
 3345 0022 BFF34F8F 		dsb														
 3346              	
 3347              	@ 0 "" 2
 3348              		.thumb
 3349 0026 FB60     		str	r3, [r7, #12]
 3350              	.L204:
 3351              	.LBE144:
 3352              	.LBE143:
 3353              		.loc 1 2497 0 discriminator 1
 3354 0028 FEE7     		b	.L204
 3355              	.L203:
2498:../../../FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3356              		.loc 1 2498 0
 3357 002a 3B69     		ldr	r3, [r7, #16]
 3358 002c 1833     		adds	r3, r3, #24
 3359 002e 1846     		mov	r0, r3
 3360 0030 FFF7FEFF 		bl	uxListRemove
2499:../../../FreeRTOS/Source/tasks.c **** 
2500:../../../FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3361              		.loc 1 2500 0
 3362 0034 204B     		ldr	r3, .L210
 3363 0036 1B68     		ldr	r3, [r3]
 3364 0038 002B     		cmp	r3, #0
 3365 003a 22D1     		bne	.L205
2501:../../../FreeRTOS/Source/tasks.c **** 	{
2502:../../../FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 3366              		.loc 1 2502 0
 3367 003c 3B69     		ldr	r3, [r7, #16]
 3368 003e 0433     		adds	r3, r3, #4
 3369 0040 1846     		mov	r0, r3
 3370 0042 FFF7FEFF 		bl	uxListRemove
2503:../../../FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3371              		.loc 1 2503 0
 3372 0046 3B69     		ldr	r3, [r7, #16]
 3373 0048 1846     		mov	r0, r3
 3374 004a FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStartReady
 3375 004e 3B69     		ldr	r3, [r7, #16]
 3376 0050 DB6A     		ldr	r3, [r3, #44]
 3377 0052 1A46     		mov	r2, r3
 3378 0054 0123     		movs	r3, #1
 3379 0056 03FA02F2 		lsl	r2, r3, r2
 3380 005a 184B     		ldr	r3, .L210+4
 3381 005c 1B68     		ldr	r3, [r3]
 3382 005e 1343     		orrs	r3, r3, r2
 3383 0060 164A     		ldr	r2, .L210+4
 3384 0062 1360     		str	r3, [r2]
 3385 0064 3B69     		ldr	r3, [r7, #16]
 3386 0066 DA6A     		ldr	r2, [r3, #44]
ARM GAS  /tmp/cc7uEwzT.s 			page 108


 3387 0068 1346     		mov	r3, r2
 3388 006a 9B00     		lsls	r3, r3, #2
 3389 006c 1344     		add	r3, r3, r2
 3390 006e 9B00     		lsls	r3, r3, #2
 3391 0070 134A     		ldr	r2, .L210+8
 3392 0072 1A44     		add	r2, r2, r3
 3393 0074 3B69     		ldr	r3, [r7, #16]
 3394 0076 0433     		adds	r3, r3, #4
 3395 0078 1046     		mov	r0, r2
 3396 007a 1946     		mov	r1, r3
 3397 007c FFF7FEFF 		bl	vListInsertEnd
 3398 0080 05E0     		b	.L206
 3399              	.L205:
2504:../../../FreeRTOS/Source/tasks.c **** 	}
2505:../../../FreeRTOS/Source/tasks.c **** 	else
2506:../../../FreeRTOS/Source/tasks.c **** 	{
2507:../../../FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
2508:../../../FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
2509:../../../FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 3400              		.loc 1 2509 0
 3401 0082 3B69     		ldr	r3, [r7, #16]
 3402 0084 1833     		adds	r3, r3, #24
 3403 0086 0F48     		ldr	r0, .L210+12
 3404 0088 1946     		mov	r1, r3
 3405 008a FFF7FEFF 		bl	vListInsertEnd
 3406              	.L206:
2510:../../../FreeRTOS/Source/tasks.c **** 	}
2511:../../../FreeRTOS/Source/tasks.c **** 
2512:../../../FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 3407              		.loc 1 2512 0
 3408 008e 3B69     		ldr	r3, [r7, #16]
 3409 0090 DA6A     		ldr	r2, [r3, #44]
 3410 0092 0D4B     		ldr	r3, .L210+16
 3411 0094 1B68     		ldr	r3, [r3]
 3412 0096 DB6A     		ldr	r3, [r3, #44]
 3413 0098 9A42     		cmp	r2, r3
 3414 009a 05D9     		bls	.L207
2513:../../../FreeRTOS/Source/tasks.c **** 	{
2514:../../../FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
2515:../../../FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
2516:../../../FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
2517:../../../FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
 3415              		.loc 1 2517 0
 3416 009c 0123     		movs	r3, #1
 3417 009e 7B61     		str	r3, [r7, #20]
2518:../../../FreeRTOS/Source/tasks.c **** 
2519:../../../FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2520:../../../FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2521:../../../FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 3418              		.loc 1 2521 0
 3419 00a0 0A4B     		ldr	r3, .L210+20
 3420 00a2 0122     		movs	r2, #1
 3421 00a4 1A60     		str	r2, [r3]
 3422 00a6 01E0     		b	.L208
 3423              	.L207:
2522:../../../FreeRTOS/Source/tasks.c **** 	}
2523:../../../FreeRTOS/Source/tasks.c **** 	else
ARM GAS  /tmp/cc7uEwzT.s 			page 109


2524:../../../FreeRTOS/Source/tasks.c **** 	{
2525:../../../FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
 3424              		.loc 1 2525 0
 3425 00a8 0023     		movs	r3, #0
 3426 00aa 7B61     		str	r3, [r7, #20]
 3427              	.L208:
2526:../../../FreeRTOS/Source/tasks.c **** 	}
2527:../../../FreeRTOS/Source/tasks.c **** 
2528:../../../FreeRTOS/Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
2529:../../../FreeRTOS/Source/tasks.c **** 	{
2530:../../../FreeRTOS/Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
2531:../../../FreeRTOS/Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
2532:../../../FreeRTOS/Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
2533:../../../FreeRTOS/Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
2534:../../../FreeRTOS/Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
2535:../../../FreeRTOS/Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
2536:../../../FreeRTOS/Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
2537:../../../FreeRTOS/Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
2538:../../../FreeRTOS/Source/tasks.c **** 		prvResetNextTaskUnblockTime();
2539:../../../FreeRTOS/Source/tasks.c **** 	}
2540:../../../FreeRTOS/Source/tasks.c **** 	#endif
2541:../../../FreeRTOS/Source/tasks.c **** 
2542:../../../FreeRTOS/Source/tasks.c **** 	return xReturn;
 3428              		.loc 1 2542 0
 3429 00ac 7B69     		ldr	r3, [r7, #20]
2543:../../../FreeRTOS/Source/tasks.c **** }
 3430              		.loc 1 2543 0
 3431 00ae 1846     		mov	r0, r3
 3432 00b0 1837     		adds	r7, r7, #24
 3433              	.LCFI113:
 3434              		.cfi_def_cfa_offset 8
 3435 00b2 BD46     		mov	sp, r7
 3436              	.LCFI114:
 3437              		.cfi_def_cfa_register 13
 3438              		@ sp needed
 3439 00b4 80BD     		pop	{r7, pc}
 3440              	.L211:
 3441 00b6 00BF     		.align	2
 3442              	.L210:
 3443 00b8 00000000 		.word	uxSchedulerSuspended
 3444 00bc 00000000 		.word	uxTopReadyPriority
 3445 00c0 00000000 		.word	pxReadyTasksLists
 3446 00c4 00000000 		.word	xPendingReadyList
 3447 00c8 00000000 		.word	pxCurrentTCB
 3448 00cc 00000000 		.word	xYieldPending
 3449              		.cfi_endproc
 3450              	.LFE26:
 3452              		.section	.text.xTaskRemoveFromUnorderedEventList,"ax",%progbits
 3453              		.align	2
 3454              		.global	xTaskRemoveFromUnorderedEventList
 3455              		.thumb
 3456              		.thumb_func
 3458              	xTaskRemoveFromUnorderedEventList:
 3459              	.LFB27:
2544:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2545:../../../FreeRTOS/Source/tasks.c **** 
2546:../../../FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemV
ARM GAS  /tmp/cc7uEwzT.s 			page 110


2547:../../../FreeRTOS/Source/tasks.c **** {
 3460              		.loc 1 2547 0
 3461              		.cfi_startproc
 3462              		@ args = 0, pretend = 0, frame = 24
 3463              		@ frame_needed = 1, uses_anonymous_args = 0
 3464 0000 80B5     		push	{r7, lr}
 3465              	.LCFI115:
 3466              		.cfi_def_cfa_offset 8
 3467              		.cfi_offset 7, -8
 3468              		.cfi_offset 14, -4
 3469 0002 86B0     		sub	sp, sp, #24
 3470              	.LCFI116:
 3471              		.cfi_def_cfa_offset 32
 3472 0004 00AF     		add	r7, sp, #0
 3473              	.LCFI117:
 3474              		.cfi_def_cfa_register 7
 3475 0006 7860     		str	r0, [r7, #4]
 3476 0008 3960     		str	r1, [r7]
2548:../../../FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
2549:../../../FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
2550:../../../FreeRTOS/Source/tasks.c **** 
2551:../../../FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2552:../../../FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
2553:../../../FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
 3477              		.loc 1 2553 0
 3478 000a 2E4B     		ldr	r3, .L220
 3479 000c 1B68     		ldr	r3, [r3]
 3480 000e 002B     		cmp	r3, #0
 3481 0010 09D1     		bne	.L213
 3482              	.LBB145:
 3483              	.LBB146:
 215:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3484              		.loc 2 215 0 discriminator 1
 3485              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3486 0012 4FF05003 			mov r3, #80												
 3487 0016 83F31188 		msr basepri, r3											
 3488 001a BFF36F8F 		isb														
 3489 001e BFF34F8F 		dsb														
 3490              	
 3491              	@ 0 "" 2
 3492              		.thumb
 3493 0022 FB60     		str	r3, [r7, #12]
 3494              	.L214:
 3495              	.LBE146:
 3496              	.LBE145:
 3497              		.loc 1 2553 0 discriminator 1
 3498 0024 FEE7     		b	.L214
 3499              	.L213:
2554:../../../FreeRTOS/Source/tasks.c **** 
2555:../../../FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
2556:../../../FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 3500              		.loc 1 2556 0
 3501 0026 3B68     		ldr	r3, [r7]
 3502 0028 43F00042 		orr	r2, r3, #-2147483648
 3503 002c 7B68     		ldr	r3, [r7, #4]
 3504 002e 1A60     		str	r2, [r3]
2557:../../../FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc7uEwzT.s 			page 111


2558:../../../FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
2559:../../../FreeRTOS/Source/tasks.c **** 	event flags. */
2560:../../../FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 3505              		.loc 1 2560 0
 3506 0030 7B68     		ldr	r3, [r7, #4]
 3507 0032 DB68     		ldr	r3, [r3, #12]
 3508 0034 3B61     		str	r3, [r7, #16]
2561:../../../FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3509              		.loc 1 2561 0
 3510 0036 3B69     		ldr	r3, [r7, #16]
 3511 0038 002B     		cmp	r3, #0
 3512 003a 09D1     		bne	.L215
 3513              	.LBB147:
 3514              	.LBB148:
 215:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3515              		.loc 2 215 0 discriminator 1
 3516              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3517 003c 4FF05003 			mov r3, #80												
 3518 0040 83F31188 		msr basepri, r3											
 3519 0044 BFF36F8F 		isb														
 3520 0048 BFF34F8F 		dsb														
 3521              	
 3522              	@ 0 "" 2
 3523              		.thumb
 3524 004c BB60     		str	r3, [r7, #8]
 3525              	.L216:
 3526              	.LBE148:
 3527              	.LBE147:
 3528              		.loc 1 2561 0 discriminator 2
 3529 004e FEE7     		b	.L216
 3530              	.L215:
2562:../../../FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3531              		.loc 1 2562 0
 3532 0050 7868     		ldr	r0, [r7, #4]
 3533 0052 FFF7FEFF 		bl	uxListRemove
2563:../../../FreeRTOS/Source/tasks.c **** 
2564:../../../FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
2565:../../../FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
2566:../../../FreeRTOS/Source/tasks.c **** 	lists. */
2567:../../../FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 3534              		.loc 1 2567 0
 3535 0056 3B69     		ldr	r3, [r7, #16]
 3536 0058 0433     		adds	r3, r3, #4
 3537 005a 1846     		mov	r0, r3
 3538 005c FFF7FEFF 		bl	uxListRemove
2568:../../../FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3539              		.loc 1 2568 0
 3540 0060 3B69     		ldr	r3, [r7, #16]
 3541 0062 1846     		mov	r0, r3
 3542 0064 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStartReady
 3543 0068 3B69     		ldr	r3, [r7, #16]
 3544 006a DB6A     		ldr	r3, [r3, #44]
 3545 006c 1A46     		mov	r2, r3
 3546 006e 0123     		movs	r3, #1
 3547 0070 03FA02F2 		lsl	r2, r3, r2
 3548 0074 144B     		ldr	r3, .L220+4
 3549 0076 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cc7uEwzT.s 			page 112


 3550 0078 1343     		orrs	r3, r3, r2
 3551 007a 134A     		ldr	r2, .L220+4
 3552 007c 1360     		str	r3, [r2]
 3553 007e 3B69     		ldr	r3, [r7, #16]
 3554 0080 DA6A     		ldr	r2, [r3, #44]
 3555 0082 1346     		mov	r3, r2
 3556 0084 9B00     		lsls	r3, r3, #2
 3557 0086 1344     		add	r3, r3, r2
 3558 0088 9B00     		lsls	r3, r3, #2
 3559 008a 104A     		ldr	r2, .L220+8
 3560 008c 1A44     		add	r2, r2, r3
 3561 008e 3B69     		ldr	r3, [r7, #16]
 3562 0090 0433     		adds	r3, r3, #4
 3563 0092 1046     		mov	r0, r2
 3564 0094 1946     		mov	r1, r3
 3565 0096 FFF7FEFF 		bl	vListInsertEnd
2569:../../../FreeRTOS/Source/tasks.c **** 
2570:../../../FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 3566              		.loc 1 2570 0
 3567 009a 3B69     		ldr	r3, [r7, #16]
 3568 009c DA6A     		ldr	r2, [r3, #44]
 3569 009e 0C4B     		ldr	r3, .L220+12
 3570 00a0 1B68     		ldr	r3, [r3]
 3571 00a2 DB6A     		ldr	r3, [r3, #44]
 3572 00a4 9A42     		cmp	r2, r3
 3573 00a6 05D9     		bls	.L217
2571:../../../FreeRTOS/Source/tasks.c **** 	{
2572:../../../FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has
2573:../../../FreeRTOS/Source/tasks.c **** 		a higher priority than the calling task.  This allows
2574:../../../FreeRTOS/Source/tasks.c **** 		the calling task to know if it should force a context
2575:../../../FreeRTOS/Source/tasks.c **** 		switch now. */
2576:../../../FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
 3574              		.loc 1 2576 0
 3575 00a8 0123     		movs	r3, #1
 3576 00aa 7B61     		str	r3, [r7, #20]
2577:../../../FreeRTOS/Source/tasks.c **** 
2578:../../../FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2579:../../../FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2580:../../../FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 3577              		.loc 1 2580 0
 3578 00ac 094B     		ldr	r3, .L220+16
 3579 00ae 0122     		movs	r2, #1
 3580 00b0 1A60     		str	r2, [r3]
 3581 00b2 01E0     		b	.L218
 3582              	.L217:
2581:../../../FreeRTOS/Source/tasks.c **** 	}
2582:../../../FreeRTOS/Source/tasks.c **** 	else
2583:../../../FreeRTOS/Source/tasks.c **** 	{
2584:../../../FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
 3583              		.loc 1 2584 0
 3584 00b4 0023     		movs	r3, #0
 3585 00b6 7B61     		str	r3, [r7, #20]
 3586              	.L218:
2585:../../../FreeRTOS/Source/tasks.c **** 	}
2586:../../../FreeRTOS/Source/tasks.c **** 
2587:../../../FreeRTOS/Source/tasks.c **** 	return xReturn;
 3587              		.loc 1 2587 0
ARM GAS  /tmp/cc7uEwzT.s 			page 113


 3588 00b8 7B69     		ldr	r3, [r7, #20]
2588:../../../FreeRTOS/Source/tasks.c **** }
 3589              		.loc 1 2588 0
 3590 00ba 1846     		mov	r0, r3
 3591 00bc 1837     		adds	r7, r7, #24
 3592              	.LCFI118:
 3593              		.cfi_def_cfa_offset 8
 3594 00be BD46     		mov	sp, r7
 3595              	.LCFI119:
 3596              		.cfi_def_cfa_register 13
 3597              		@ sp needed
 3598 00c0 80BD     		pop	{r7, pc}
 3599              	.L221:
 3600 00c2 00BF     		.align	2
 3601              	.L220:
 3602 00c4 00000000 		.word	uxSchedulerSuspended
 3603 00c8 00000000 		.word	uxTopReadyPriority
 3604 00cc 00000000 		.word	pxReadyTasksLists
 3605 00d0 00000000 		.word	pxCurrentTCB
 3606 00d4 00000000 		.word	xYieldPending
 3607              		.cfi_endproc
 3608              	.LFE27:
 3610              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3611              		.align	2
 3612              		.global	vTaskSetTimeOutState
 3613              		.thumb
 3614              		.thumb_func
 3616              	vTaskSetTimeOutState:
 3617              	.LFB28:
2589:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2590:../../../FreeRTOS/Source/tasks.c **** 
2591:../../../FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
2592:../../../FreeRTOS/Source/tasks.c **** {
 3618              		.loc 1 2592 0
 3619              		.cfi_startproc
 3620              		@ args = 0, pretend = 0, frame = 16
 3621              		@ frame_needed = 1, uses_anonymous_args = 0
 3622              		@ link register save eliminated.
 3623 0000 80B4     		push	{r7}
 3624              	.LCFI120:
 3625              		.cfi_def_cfa_offset 4
 3626              		.cfi_offset 7, -4
 3627 0002 85B0     		sub	sp, sp, #20
 3628              	.LCFI121:
 3629              		.cfi_def_cfa_offset 24
 3630 0004 00AF     		add	r7, sp, #0
 3631              	.LCFI122:
 3632              		.cfi_def_cfa_register 7
 3633 0006 7860     		str	r0, [r7, #4]
2593:../../../FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3634              		.loc 1 2593 0
 3635 0008 7B68     		ldr	r3, [r7, #4]
 3636 000a 002B     		cmp	r3, #0
 3637 000c 09D1     		bne	.L223
 3638              	.LBB149:
 3639              	.LBB150:
 215:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
ARM GAS  /tmp/cc7uEwzT.s 			page 114


 3640              		.loc 2 215 0 discriminator 1
 3641              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3642 000e 4FF05003 			mov r3, #80												
 3643 0012 83F31188 		msr basepri, r3											
 3644 0016 BFF36F8F 		isb														
 3645 001a BFF34F8F 		dsb														
 3646              	
 3647              	@ 0 "" 2
 3648              		.thumb
 3649 001e FB60     		str	r3, [r7, #12]
 3650              	.L224:
 3651              	.LBE150:
 3652              	.LBE149:
 3653              		.loc 1 2593 0 discriminator 1
 3654 0020 FEE7     		b	.L224
 3655              	.L223:
2594:../../../FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 3656              		.loc 1 2594 0
 3657 0022 064B     		ldr	r3, .L225
 3658 0024 1A68     		ldr	r2, [r3]
 3659 0026 7B68     		ldr	r3, [r7, #4]
 3660 0028 1A60     		str	r2, [r3]
2595:../../../FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3661              		.loc 1 2595 0
 3662 002a 054B     		ldr	r3, .L225+4
 3663 002c 1A68     		ldr	r2, [r3]
 3664 002e 7B68     		ldr	r3, [r7, #4]
 3665 0030 5A60     		str	r2, [r3, #4]
2596:../../../FreeRTOS/Source/tasks.c **** }
 3666              		.loc 1 2596 0
 3667 0032 1437     		adds	r7, r7, #20
 3668              	.LCFI123:
 3669              		.cfi_def_cfa_offset 4
 3670 0034 BD46     		mov	sp, r7
 3671              	.LCFI124:
 3672              		.cfi_def_cfa_register 13
 3673              		@ sp needed
 3674 0036 5DF8047B 		ldr	r7, [sp], #4
 3675              	.LCFI125:
 3676              		.cfi_restore 7
 3677              		.cfi_def_cfa_offset 0
 3678 003a 7047     		bx	lr
 3679              	.L226:
 3680              		.align	2
 3681              	.L225:
 3682 003c 00000000 		.word	xNumOfOverflows
 3683 0040 00000000 		.word	xTickCount
 3684              		.cfi_endproc
 3685              	.LFE28:
 3687              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3688              		.align	2
 3689              		.global	xTaskCheckForTimeOut
 3690              		.thumb
 3691              		.thumb_func
 3693              	xTaskCheckForTimeOut:
 3694              	.LFB29:
2597:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/cc7uEwzT.s 			page 115


2598:../../../FreeRTOS/Source/tasks.c **** 
2599:../../../FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
2600:../../../FreeRTOS/Source/tasks.c **** {
 3695              		.loc 1 2600 0
 3696              		.cfi_startproc
 3697              		@ args = 0, pretend = 0, frame = 24
 3698              		@ frame_needed = 1, uses_anonymous_args = 0
 3699 0000 80B5     		push	{r7, lr}
 3700              	.LCFI126:
 3701              		.cfi_def_cfa_offset 8
 3702              		.cfi_offset 7, -8
 3703              		.cfi_offset 14, -4
 3704 0002 86B0     		sub	sp, sp, #24
 3705              	.LCFI127:
 3706              		.cfi_def_cfa_offset 32
 3707 0004 00AF     		add	r7, sp, #0
 3708              	.LCFI128:
 3709              		.cfi_def_cfa_register 7
 3710 0006 7860     		str	r0, [r7, #4]
 3711 0008 3960     		str	r1, [r7]
2601:../../../FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
2602:../../../FreeRTOS/Source/tasks.c **** 
2603:../../../FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3712              		.loc 1 2603 0
 3713 000a 7B68     		ldr	r3, [r7, #4]
 3714 000c 002B     		cmp	r3, #0
 3715 000e 09D1     		bne	.L228
 3716              	.LBB151:
 3717              	.LBB152:
 215:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3718              		.loc 2 215 0 discriminator 1
 3719              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3720 0010 4FF05003 			mov r3, #80												
 3721 0014 83F31188 		msr basepri, r3											
 3722 0018 BFF36F8F 		isb														
 3723 001c BFF34F8F 		dsb														
 3724              	
 3725              	@ 0 "" 2
 3726              		.thumb
 3727 0020 FB60     		str	r3, [r7, #12]
 3728              	.L229:
 3729              	.LBE152:
 3730              	.LBE151:
 3731              		.loc 1 2603 0 discriminator 1
 3732 0022 FEE7     		b	.L229
 3733              	.L228:
2604:../../../FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 3734              		.loc 1 2604 0
 3735 0024 3B68     		ldr	r3, [r7]
 3736 0026 002B     		cmp	r3, #0
 3737 0028 09D1     		bne	.L230
 3738              	.LBB153:
 3739              	.LBB154:
 215:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3740              		.loc 2 215 0 discriminator 1
 3741              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3742 002a 4FF05003 			mov r3, #80												
ARM GAS  /tmp/cc7uEwzT.s 			page 116


 3743 002e 83F31188 		msr basepri, r3											
 3744 0032 BFF36F8F 		isb														
 3745 0036 BFF34F8F 		dsb														
 3746              	
 3747              	@ 0 "" 2
 3748              		.thumb
 3749 003a BB60     		str	r3, [r7, #8]
 3750              	.L231:
 3751              	.LBE154:
 3752              	.LBE153:
 3753              		.loc 1 2604 0 discriminator 2
 3754 003c FEE7     		b	.L231
 3755              	.L230:
2605:../../../FreeRTOS/Source/tasks.c **** 
2606:../../../FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 3756              		.loc 1 2606 0
 3757 003e FFF7FEFF 		bl	vPortEnterCritical
 3758              	.LBB155:
2607:../../../FreeRTOS/Source/tasks.c **** 	{
2608:../../../FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
2609:../../../FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
 3759              		.loc 1 2609 0
 3760 0042 1C4B     		ldr	r3, .L237
 3761 0044 1B68     		ldr	r3, [r3]
 3762 0046 3B61     		str	r3, [r7, #16]
2610:../../../FreeRTOS/Source/tasks.c **** 
2611:../../../FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
2612:../../../FreeRTOS/Source/tasks.c **** 			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
2613:../../../FreeRTOS/Source/tasks.c **** 			the maximum block time then the task should block indefinitely, and
2614:../../../FreeRTOS/Source/tasks.c **** 			therefore never time out. */
2615:../../../FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
 3763              		.loc 1 2615 0
 3764 0048 3B68     		ldr	r3, [r7]
 3765 004a 1B68     		ldr	r3, [r3]
 3766 004c B3F1FF3F 		cmp	r3, #-1
 3767 0050 02D1     		bne	.L232
2616:../../../FreeRTOS/Source/tasks.c **** 			{
2617:../../../FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
 3768              		.loc 1 2617 0
 3769 0052 0023     		movs	r3, #0
 3770 0054 7B61     		str	r3, [r7, #20]
 3771 0056 26E0     		b	.L233
 3772              	.L232:
2618:../../../FreeRTOS/Source/tasks.c **** 			}
2619:../../../FreeRTOS/Source/tasks.c **** 			else /* We are not blocking indefinitely, perform the checks below. */
2620:../../../FreeRTOS/Source/tasks.c **** 		#endif
2621:../../../FreeRTOS/Source/tasks.c **** 
2622:../../../FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
 3773              		.loc 1 2622 0
 3774 0058 7B68     		ldr	r3, [r7, #4]
 3775 005a 1A68     		ldr	r2, [r3]
 3776 005c 164B     		ldr	r3, .L237+4
 3777 005e 1B68     		ldr	r3, [r3]
 3778 0060 9A42     		cmp	r2, r3
 3779 0062 07D0     		beq	.L234
 3780              		.loc 1 2622 0 is_stmt 0 discriminator 1
 3781 0064 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cc7uEwzT.s 			page 117


 3782 0066 5A68     		ldr	r2, [r3, #4]
 3783 0068 3B69     		ldr	r3, [r7, #16]
 3784 006a 9A42     		cmp	r2, r3
 3785 006c 02D8     		bhi	.L234
2623:../../../FreeRTOS/Source/tasks.c **** 		{
2624:../../../FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which vTaskSetTimeout()
2625:../../../FreeRTOS/Source/tasks.c **** 			was called, but has also overflowed since vTaskSetTimeOut() was called.
2626:../../../FreeRTOS/Source/tasks.c **** 			It must have wrapped all the way around and gone past us again. This
2627:../../../FreeRTOS/Source/tasks.c **** 			passed since vTaskSetTimeout() was called. */
2628:../../../FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 3786              		.loc 1 2628 0 is_stmt 1
 3787 006e 0123     		movs	r3, #1
 3788 0070 7B61     		str	r3, [r7, #20]
 3789 0072 18E0     		b	.L233
 3790              	.L234:
2629:../../../FreeRTOS/Source/tasks.c **** 		}
2630:../../../FreeRTOS/Source/tasks.c **** 		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 3791              		.loc 1 2630 0
 3792 0074 7B68     		ldr	r3, [r7, #4]
 3793 0076 5B68     		ldr	r3, [r3, #4]
 3794 0078 3A69     		ldr	r2, [r7, #16]
 3795 007a D21A     		subs	r2, r2, r3
 3796 007c 3B68     		ldr	r3, [r7]
 3797 007e 1B68     		ldr	r3, [r3]
 3798 0080 9A42     		cmp	r2, r3
 3799 0082 0ED2     		bcs	.L235
2631:../../../FreeRTOS/Source/tasks.c **** 		{
2632:../../../FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
2633:../../../FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 3800              		.loc 1 2633 0
 3801 0084 3B68     		ldr	r3, [r7]
 3802 0086 1A68     		ldr	r2, [r3]
 3803 0088 7B68     		ldr	r3, [r7, #4]
 3804 008a 5968     		ldr	r1, [r3, #4]
 3805 008c 3B69     		ldr	r3, [r7, #16]
 3806 008e CB1A     		subs	r3, r1, r3
 3807 0090 1A44     		add	r2, r2, r3
 3808 0092 3B68     		ldr	r3, [r7]
 3809 0094 1A60     		str	r2, [r3]
2634:../../../FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 3810              		.loc 1 2634 0
 3811 0096 7868     		ldr	r0, [r7, #4]
 3812 0098 FFF7FEFF 		bl	vTaskSetTimeOutState
2635:../../../FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 3813              		.loc 1 2635 0
 3814 009c 0023     		movs	r3, #0
 3815 009e 7B61     		str	r3, [r7, #20]
 3816 00a0 01E0     		b	.L233
 3817              	.L235:
2636:../../../FreeRTOS/Source/tasks.c **** 		}
2637:../../../FreeRTOS/Source/tasks.c **** 		else
2638:../../../FreeRTOS/Source/tasks.c **** 		{
2639:../../../FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 3818              		.loc 1 2639 0
 3819 00a2 0123     		movs	r3, #1
 3820 00a4 7B61     		str	r3, [r7, #20]
 3821              	.L233:
ARM GAS  /tmp/cc7uEwzT.s 			page 118


 3822              	.LBE155:
2640:../../../FreeRTOS/Source/tasks.c **** 		}
2641:../../../FreeRTOS/Source/tasks.c **** 	}
2642:../../../FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 3823              		.loc 1 2642 0
 3824 00a6 FFF7FEFF 		bl	vPortExitCritical
2643:../../../FreeRTOS/Source/tasks.c **** 
2644:../../../FreeRTOS/Source/tasks.c **** 	return xReturn;
 3825              		.loc 1 2644 0
 3826 00aa 7B69     		ldr	r3, [r7, #20]
2645:../../../FreeRTOS/Source/tasks.c **** }
 3827              		.loc 1 2645 0
 3828 00ac 1846     		mov	r0, r3
 3829 00ae 1837     		adds	r7, r7, #24
 3830              	.LCFI129:
 3831              		.cfi_def_cfa_offset 8
 3832 00b0 BD46     		mov	sp, r7
 3833              	.LCFI130:
 3834              		.cfi_def_cfa_register 13
 3835              		@ sp needed
 3836 00b2 80BD     		pop	{r7, pc}
 3837              	.L238:
 3838              		.align	2
 3839              	.L237:
 3840 00b4 00000000 		.word	xTickCount
 3841 00b8 00000000 		.word	xNumOfOverflows
 3842              		.cfi_endproc
 3843              	.LFE29:
 3845              		.section	.text.vTaskMissedYield,"ax",%progbits
 3846              		.align	2
 3847              		.global	vTaskMissedYield
 3848              		.thumb
 3849              		.thumb_func
 3851              	vTaskMissedYield:
 3852              	.LFB30:
2646:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2647:../../../FreeRTOS/Source/tasks.c **** 
2648:../../../FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
2649:../../../FreeRTOS/Source/tasks.c **** {
 3853              		.loc 1 2649 0
 3854              		.cfi_startproc
 3855              		@ args = 0, pretend = 0, frame = 0
 3856              		@ frame_needed = 1, uses_anonymous_args = 0
 3857              		@ link register save eliminated.
 3858 0000 80B4     		push	{r7}
 3859              	.LCFI131:
 3860              		.cfi_def_cfa_offset 4
 3861              		.cfi_offset 7, -4
 3862 0002 00AF     		add	r7, sp, #0
 3863              	.LCFI132:
 3864              		.cfi_def_cfa_register 7
2650:../../../FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 3865              		.loc 1 2650 0
 3866 0004 034B     		ldr	r3, .L240
 3867 0006 0122     		movs	r2, #1
 3868 0008 1A60     		str	r2, [r3]
2651:../../../FreeRTOS/Source/tasks.c **** }
ARM GAS  /tmp/cc7uEwzT.s 			page 119


 3869              		.loc 1 2651 0
 3870 000a BD46     		mov	sp, r7
 3871              	.LCFI133:
 3872              		.cfi_def_cfa_register 13
 3873              		@ sp needed
 3874 000c 5DF8047B 		ldr	r7, [sp], #4
 3875              	.LCFI134:
 3876              		.cfi_restore 7
 3877              		.cfi_def_cfa_offset 0
 3878 0010 7047     		bx	lr
 3879              	.L241:
 3880 0012 00BF     		.align	2
 3881              	.L240:
 3882 0014 00000000 		.word	xYieldPending
 3883              		.cfi_endproc
 3884              	.LFE30:
 3886              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 3887              		.align	2
 3888              		.global	uxTaskGetTaskNumber
 3889              		.thumb
 3890              		.thumb_func
 3892              	uxTaskGetTaskNumber:
 3893              	.LFB31:
2652:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2653:../../../FreeRTOS/Source/tasks.c **** 
2654:../../../FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2655:../../../FreeRTOS/Source/tasks.c **** 
2656:../../../FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
2657:../../../FreeRTOS/Source/tasks.c **** 	{
 3894              		.loc 1 2657 0
 3895              		.cfi_startproc
 3896              		@ args = 0, pretend = 0, frame = 16
 3897              		@ frame_needed = 1, uses_anonymous_args = 0
 3898              		@ link register save eliminated.
 3899 0000 80B4     		push	{r7}
 3900              	.LCFI135:
 3901              		.cfi_def_cfa_offset 4
 3902              		.cfi_offset 7, -4
 3903 0002 85B0     		sub	sp, sp, #20
 3904              	.LCFI136:
 3905              		.cfi_def_cfa_offset 24
 3906 0004 00AF     		add	r7, sp, #0
 3907              	.LCFI137:
 3908              		.cfi_def_cfa_register 7
 3909 0006 7860     		str	r0, [r7, #4]
2658:../../../FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
2659:../../../FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2660:../../../FreeRTOS/Source/tasks.c **** 
2661:../../../FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
 3910              		.loc 1 2661 0
 3911 0008 7B68     		ldr	r3, [r7, #4]
 3912 000a 002B     		cmp	r3, #0
 3913 000c 05D0     		beq	.L243
2662:../../../FreeRTOS/Source/tasks.c **** 		{
2663:../../../FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
 3914              		.loc 1 2663 0
 3915 000e 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cc7uEwzT.s 			page 120


 3916 0010 BB60     		str	r3, [r7, #8]
2664:../../../FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
 3917              		.loc 1 2664 0
 3918 0012 BB68     		ldr	r3, [r7, #8]
 3919 0014 9B6C     		ldr	r3, [r3, #72]
 3920 0016 FB60     		str	r3, [r7, #12]
 3921 0018 01E0     		b	.L244
 3922              	.L243:
2665:../../../FreeRTOS/Source/tasks.c **** 		}
2666:../../../FreeRTOS/Source/tasks.c **** 		else
2667:../../../FreeRTOS/Source/tasks.c **** 		{
2668:../../../FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
 3923              		.loc 1 2668 0
 3924 001a 0023     		movs	r3, #0
 3925 001c FB60     		str	r3, [r7, #12]
 3926              	.L244:
2669:../../../FreeRTOS/Source/tasks.c **** 		}
2670:../../../FreeRTOS/Source/tasks.c **** 
2671:../../../FreeRTOS/Source/tasks.c **** 		return uxReturn;
 3927              		.loc 1 2671 0
 3928 001e FB68     		ldr	r3, [r7, #12]
2672:../../../FreeRTOS/Source/tasks.c **** 	}
 3929              		.loc 1 2672 0
 3930 0020 1846     		mov	r0, r3
 3931 0022 1437     		adds	r7, r7, #20
 3932              	.LCFI138:
 3933              		.cfi_def_cfa_offset 4
 3934 0024 BD46     		mov	sp, r7
 3935              	.LCFI139:
 3936              		.cfi_def_cfa_register 13
 3937              		@ sp needed
 3938 0026 5DF8047B 		ldr	r7, [sp], #4
 3939              	.LCFI140:
 3940              		.cfi_restore 7
 3941              		.cfi_def_cfa_offset 0
 3942 002a 7047     		bx	lr
 3943              		.cfi_endproc
 3944              	.LFE31:
 3946              		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 3947              		.align	2
 3948              		.global	vTaskSetTaskNumber
 3949              		.thumb
 3950              		.thumb_func
 3952              	vTaskSetTaskNumber:
 3953              	.LFB32:
2673:../../../FreeRTOS/Source/tasks.c **** 
2674:../../../FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2675:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2676:../../../FreeRTOS/Source/tasks.c **** 
2677:../../../FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2678:../../../FreeRTOS/Source/tasks.c **** 
2679:../../../FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
2680:../../../FreeRTOS/Source/tasks.c **** 	{
 3954              		.loc 1 2680 0
 3955              		.cfi_startproc
 3956              		@ args = 0, pretend = 0, frame = 16
 3957              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/cc7uEwzT.s 			page 121


 3958              		@ link register save eliminated.
 3959 0000 80B4     		push	{r7}
 3960              	.LCFI141:
 3961              		.cfi_def_cfa_offset 4
 3962              		.cfi_offset 7, -4
 3963 0002 85B0     		sub	sp, sp, #20
 3964              	.LCFI142:
 3965              		.cfi_def_cfa_offset 24
 3966 0004 00AF     		add	r7, sp, #0
 3967              	.LCFI143:
 3968              		.cfi_def_cfa_register 7
 3969 0006 7860     		str	r0, [r7, #4]
 3970 0008 3960     		str	r1, [r7]
2681:../../../FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2682:../../../FreeRTOS/Source/tasks.c **** 
2683:../../../FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
 3971              		.loc 1 2683 0
 3972 000a 7B68     		ldr	r3, [r7, #4]
 3973 000c 002B     		cmp	r3, #0
 3974 000e 04D0     		beq	.L246
2684:../../../FreeRTOS/Source/tasks.c **** 		{
2685:../../../FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
 3975              		.loc 1 2685 0
 3976 0010 7B68     		ldr	r3, [r7, #4]
 3977 0012 FB60     		str	r3, [r7, #12]
2686:../../../FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
 3978              		.loc 1 2686 0
 3979 0014 FB68     		ldr	r3, [r7, #12]
 3980 0016 3A68     		ldr	r2, [r7]
 3981 0018 9A64     		str	r2, [r3, #72]
 3982              	.L246:
2687:../../../FreeRTOS/Source/tasks.c **** 		}
2688:../../../FreeRTOS/Source/tasks.c **** 	}
 3983              		.loc 1 2688 0
 3984 001a 1437     		adds	r7, r7, #20
 3985              	.LCFI144:
 3986              		.cfi_def_cfa_offset 4
 3987 001c BD46     		mov	sp, r7
 3988              	.LCFI145:
 3989              		.cfi_def_cfa_register 13
 3990              		@ sp needed
 3991 001e 5DF8047B 		ldr	r7, [sp], #4
 3992              	.LCFI146:
 3993              		.cfi_restore 7
 3994              		.cfi_def_cfa_offset 0
 3995 0022 7047     		bx	lr
 3996              		.cfi_endproc
 3997              	.LFE32:
 3999              		.section	.text.prvIdleTask,"ax",%progbits
 4000              		.align	2
 4001              		.thumb
 4002              		.thumb_func
 4004              	prvIdleTask:
 4005              	.LFB33:
2689:../../../FreeRTOS/Source/tasks.c **** 
2690:../../../FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2691:../../../FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc7uEwzT.s 			page 122


2692:../../../FreeRTOS/Source/tasks.c **** /*
2693:../../../FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
2694:../../../FreeRTOS/Source/tasks.c ****  * The Idle task.
2695:../../../FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
2696:../../../FreeRTOS/Source/tasks.c ****  *
2697:../../../FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
2698:../../../FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
2699:../../../FreeRTOS/Source/tasks.c ****  *
2700:../../../FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
2701:../../../FreeRTOS/Source/tasks.c ****  *
2702:../../../FreeRTOS/Source/tasks.c ****  */
2703:../../../FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
2704:../../../FreeRTOS/Source/tasks.c **** {
 4006              		.loc 1 2704 0
 4007              		.cfi_startproc
 4008              		@ args = 0, pretend = 0, frame = 8
 4009              		@ frame_needed = 1, uses_anonymous_args = 0
 4010 0000 80B5     		push	{r7, lr}
 4011              	.LCFI147:
 4012              		.cfi_def_cfa_offset 8
 4013              		.cfi_offset 7, -8
 4014              		.cfi_offset 14, -4
 4015 0002 82B0     		sub	sp, sp, #8
 4016              	.LCFI148:
 4017              		.cfi_def_cfa_offset 16
 4018 0004 00AF     		add	r7, sp, #0
 4019              	.LCFI149:
 4020              		.cfi_def_cfa_register 7
 4021 0006 7860     		str	r0, [r7, #4]
 4022              	.L250:
2705:../../../FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
2706:../../../FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
2707:../../../FreeRTOS/Source/tasks.c **** 
2708:../../../FreeRTOS/Source/tasks.c **** 	for( ;; )
2709:../../../FreeRTOS/Source/tasks.c **** 	{
2710:../../../FreeRTOS/Source/tasks.c **** 		/* See if any tasks have been deleted. */
2711:../../../FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
 4023              		.loc 1 2711 0
 4024 0008 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
2712:../../../FreeRTOS/Source/tasks.c **** 
2713:../../../FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
2714:../../../FreeRTOS/Source/tasks.c **** 		{
2715:../../../FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
2716:../../../FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
2717:../../../FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
2718:../../../FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
2719:../../../FreeRTOS/Source/tasks.c **** 			taskYIELD();
2720:../../../FreeRTOS/Source/tasks.c **** 		}
2721:../../../FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
2722:../../../FreeRTOS/Source/tasks.c **** 
2723:../../../FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
2724:../../../FreeRTOS/Source/tasks.c **** 		{
2725:../../../FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
2726:../../../FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
2727:../../../FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
2728:../../../FreeRTOS/Source/tasks.c **** 			timeslice.
2729:../../../FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc7uEwzT.s 			page 123


2730:../../../FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
2731:../../../FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
2732:../../../FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
2733:../../../FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
2734:../../../FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 4025              		.loc 1 2734 0
 4026 000c 064B     		ldr	r3, .L251
 4027 000e 1B68     		ldr	r3, [r3]
 4028 0010 012B     		cmp	r3, #1
 4029 0012 07D9     		bls	.L249
2735:../../../FreeRTOS/Source/tasks.c **** 			{
2736:../../../FreeRTOS/Source/tasks.c **** 				taskYIELD();
 4030              		.loc 1 2736 0
 4031 0014 054B     		ldr	r3, .L251+4
 4032 0016 4FF08052 		mov	r2, #268435456
 4033 001a 1A60     		str	r2, [r3]
 4034              	@ 2736 "../../../FreeRTOS/Source/tasks.c" 1
 4035 001c BFF34F8F 		dsb
 4036              	@ 0 "" 2
 4037              	@ 2736 "../../../FreeRTOS/Source/tasks.c" 1
 4038 0020 BFF36F8F 		isb
 4039              	@ 0 "" 2
 4040              		.thumb
 4041              	.L249:
2737:../../../FreeRTOS/Source/tasks.c **** 			}
2738:../../../FreeRTOS/Source/tasks.c **** 			else
2739:../../../FreeRTOS/Source/tasks.c **** 			{
2740:../../../FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2741:../../../FreeRTOS/Source/tasks.c **** 			}
2742:../../../FreeRTOS/Source/tasks.c **** 		}
2743:../../../FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
2744:../../../FreeRTOS/Source/tasks.c **** 
2745:../../../FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
2746:../../../FreeRTOS/Source/tasks.c **** 		{
2747:../../../FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
2748:../../../FreeRTOS/Source/tasks.c **** 
2749:../../../FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
2750:../../../FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
2751:../../../FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
2752:../../../FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
2753:../../../FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
2754:../../../FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
2755:../../../FreeRTOS/Source/tasks.c **** 		}
2756:../../../FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
2757:../../../FreeRTOS/Source/tasks.c **** 
2758:../../../FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
2759:../../../FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
2760:../../../FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
2761:../../../FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
2762:../../../FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
2763:../../../FreeRTOS/Source/tasks.c **** 		{
2764:../../../FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
2765:../../../FreeRTOS/Source/tasks.c **** 
2766:../../../FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
2767:../../../FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
2768:../../../FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
2769:../../../FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
ARM GAS  /tmp/cc7uEwzT.s 			page 124


2770:../../../FreeRTOS/Source/tasks.c **** 			valid. */
2771:../../../FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
2772:../../../FreeRTOS/Source/tasks.c **** 
2773:../../../FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
2774:../../../FreeRTOS/Source/tasks.c **** 			{
2775:../../../FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
2776:../../../FreeRTOS/Source/tasks.c **** 				{
2777:../../../FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
2778:../../../FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
2779:../../../FreeRTOS/Source/tasks.c **** 					be used. */
2780:../../../FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
2781:../../../FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
2782:../../../FreeRTOS/Source/tasks.c **** 
2783:../../../FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
2784:../../../FreeRTOS/Source/tasks.c **** 					{
2785:../../../FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
2786:../../../FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
2787:../../../FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
2788:../../../FreeRTOS/Source/tasks.c **** 					}
2789:../../../FreeRTOS/Source/tasks.c **** 					else
2790:../../../FreeRTOS/Source/tasks.c **** 					{
2791:../../../FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2792:../../../FreeRTOS/Source/tasks.c **** 					}
2793:../../../FreeRTOS/Source/tasks.c **** 				}
2794:../../../FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
2795:../../../FreeRTOS/Source/tasks.c **** 			}
2796:../../../FreeRTOS/Source/tasks.c **** 			else
2797:../../../FreeRTOS/Source/tasks.c **** 			{
2798:../../../FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2799:../../../FreeRTOS/Source/tasks.c **** 			}
2800:../../../FreeRTOS/Source/tasks.c **** 		}
2801:../../../FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
2802:../../../FreeRTOS/Source/tasks.c **** 	}
 4042              		.loc 1 2802 0
 4043 0024 F0E7     		b	.L250
 4044              	.L252:
 4045 0026 00BF     		.align	2
 4046              	.L251:
 4047 0028 00000000 		.word	pxReadyTasksLists
 4048 002c 04ED00E0 		.word	-536810236
 4049              		.cfi_endproc
 4050              	.LFE33:
 4052              		.section	.text.prvInitialiseTCBVariables,"ax",%progbits
 4053              		.align	2
 4054              		.thumb
 4055              		.thumb_func
 4057              	prvInitialiseTCBVariables:
 4058              	.LFB34:
2803:../../../FreeRTOS/Source/tasks.c **** }
2804:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2805:../../../FreeRTOS/Source/tasks.c **** 
2806:../../../FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
2807:../../../FreeRTOS/Source/tasks.c **** 
2808:../../../FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
2809:../../../FreeRTOS/Source/tasks.c **** 	{
2810:../../../FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
2811:../../../FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
ARM GAS  /tmp/cc7uEwzT.s 			page 125


2812:../../../FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
2813:../../../FreeRTOS/Source/tasks.c **** 
2814:../../../FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
2815:../../../FreeRTOS/Source/tasks.c **** 		{
2816:../../../FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
2817:../../../FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
2818:../../../FreeRTOS/Source/tasks.c **** 		}
2819:../../../FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
2820:../../../FreeRTOS/Source/tasks.c **** 		{
2821:../../../FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
2822:../../../FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
2823:../../../FreeRTOS/Source/tasks.c **** 		}
2824:../../../FreeRTOS/Source/tasks.c **** 		else
2825:../../../FreeRTOS/Source/tasks.c **** 		{
2826:../../../FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
2827:../../../FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
2828:../../../FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
2829:../../../FreeRTOS/Source/tasks.c **** 			interrupts. */
2830:../../../FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
2831:../../../FreeRTOS/Source/tasks.c **** 			{
2832:../../../FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
2833:../../../FreeRTOS/Source/tasks.c **** 			}
2834:../../../FreeRTOS/Source/tasks.c **** 			else
2835:../../../FreeRTOS/Source/tasks.c **** 			{
2836:../../../FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2837:../../../FreeRTOS/Source/tasks.c **** 			}
2838:../../../FreeRTOS/Source/tasks.c **** 		}
2839:../../../FreeRTOS/Source/tasks.c **** 
2840:../../../FreeRTOS/Source/tasks.c **** 		return eReturn;
2841:../../../FreeRTOS/Source/tasks.c **** 	}
2842:../../../FreeRTOS/Source/tasks.c **** 
2843:../../../FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2844:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2845:../../../FreeRTOS/Source/tasks.c **** 
2846:../../../FreeRTOS/Source/tasks.c **** static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t 
2847:../../../FreeRTOS/Source/tasks.c **** {
 4059              		.loc 1 2847 0
 4060              		.cfi_startproc
 4061              		@ args = 4, pretend = 0, frame = 24
 4062              		@ frame_needed = 1, uses_anonymous_args = 0
 4063 0000 80B5     		push	{r7, lr}
 4064              	.LCFI150:
 4065              		.cfi_def_cfa_offset 8
 4066              		.cfi_offset 7, -8
 4067              		.cfi_offset 14, -4
 4068 0002 86B0     		sub	sp, sp, #24
 4069              	.LCFI151:
 4070              		.cfi_def_cfa_offset 32
 4071 0004 00AF     		add	r7, sp, #0
 4072              	.LCFI152:
 4073              		.cfi_def_cfa_register 7
 4074 0006 F860     		str	r0, [r7, #12]
 4075 0008 B960     		str	r1, [r7, #8]
 4076 000a 7A60     		str	r2, [r7, #4]
 4077 000c 3B60     		str	r3, [r7]
2848:../../../FreeRTOS/Source/tasks.c **** UBaseType_t x;
2849:../../../FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc7uEwzT.s 			page 126


2850:../../../FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
2851:../../../FreeRTOS/Source/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 4078              		.loc 1 2851 0
 4079 000e 0023     		movs	r3, #0
 4080 0010 7B61     		str	r3, [r7, #20]
 4081 0012 13E0     		b	.L254
 4082              	.L257:
2852:../../../FreeRTOS/Source/tasks.c **** 	{
2853:../../../FreeRTOS/Source/tasks.c **** 		pxTCB->pcTaskName[ x ] = pcName[ x ];
 4083              		.loc 1 2853 0
 4084 0014 BA68     		ldr	r2, [r7, #8]
 4085 0016 7B69     		ldr	r3, [r7, #20]
 4086 0018 1344     		add	r3, r3, r2
 4087 001a 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 4088 001c FA68     		ldr	r2, [r7, #12]
 4089 001e 7B69     		ldr	r3, [r7, #20]
 4090 0020 1344     		add	r3, r3, r2
 4091 0022 3033     		adds	r3, r3, #48
 4092 0024 0A46     		mov	r2, r1
 4093 0026 1A71     		strb	r2, [r3, #4]
2854:../../../FreeRTOS/Source/tasks.c **** 
2855:../../../FreeRTOS/Source/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
2856:../../../FreeRTOS/Source/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
2857:../../../FreeRTOS/Source/tasks.c **** 		string is not accessible (extremely unlikely). */
2858:../../../FreeRTOS/Source/tasks.c **** 		if( pcName[ x ] == 0x00 )
 4094              		.loc 1 2858 0
 4095 0028 BA68     		ldr	r2, [r7, #8]
 4096 002a 7B69     		ldr	r3, [r7, #20]
 4097 002c 1344     		add	r3, r3, r2
 4098 002e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4099 0030 002B     		cmp	r3, #0
 4100 0032 00D1     		bne	.L255
2859:../../../FreeRTOS/Source/tasks.c **** 		{
2860:../../../FreeRTOS/Source/tasks.c **** 			break;
 4101              		.loc 1 2860 0
 4102 0034 05E0     		b	.L256
 4103              	.L255:
2851:../../../FreeRTOS/Source/tasks.c **** 	{
 4104              		.loc 1 2851 0 discriminator 2
 4105 0036 7B69     		ldr	r3, [r7, #20]
 4106 0038 0133     		adds	r3, r3, #1
 4107 003a 7B61     		str	r3, [r7, #20]
 4108              	.L254:
2851:../../../FreeRTOS/Source/tasks.c **** 	{
 4109              		.loc 1 2851 0 is_stmt 0 discriminator 1
 4110 003c 7B69     		ldr	r3, [r7, #20]
 4111 003e 0F2B     		cmp	r3, #15
 4112 0040 E8D9     		bls	.L257
 4113              	.L256:
2861:../../../FreeRTOS/Source/tasks.c **** 		}
2862:../../../FreeRTOS/Source/tasks.c **** 		else
2863:../../../FreeRTOS/Source/tasks.c **** 		{
2864:../../../FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2865:../../../FreeRTOS/Source/tasks.c **** 		}
2866:../../../FreeRTOS/Source/tasks.c **** 	}
2867:../../../FreeRTOS/Source/tasks.c **** 
2868:../../../FreeRTOS/Source/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
ARM GAS  /tmp/cc7uEwzT.s 			page 127


2869:../../../FreeRTOS/Source/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
2870:../../../FreeRTOS/Source/tasks.c **** 	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 4114              		.loc 1 2870 0 is_stmt 1
 4115 0042 FB68     		ldr	r3, [r7, #12]
 4116 0044 0022     		movs	r2, #0
 4117 0046 83F84320 		strb	r2, [r3, #67]
2871:../../../FreeRTOS/Source/tasks.c **** 
2872:../../../FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
2873:../../../FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
2874:../../../FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 4118              		.loc 1 2874 0
 4119 004a 7B68     		ldr	r3, [r7, #4]
 4120 004c 062B     		cmp	r3, #6
 4121 004e 01D9     		bls	.L258
2875:../../../FreeRTOS/Source/tasks.c **** 	{
2876:../../../FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 4122              		.loc 1 2876 0
 4123 0050 0623     		movs	r3, #6
 4124 0052 7B60     		str	r3, [r7, #4]
 4125              	.L258:
2877:../../../FreeRTOS/Source/tasks.c **** 	}
2878:../../../FreeRTOS/Source/tasks.c **** 	else
2879:../../../FreeRTOS/Source/tasks.c **** 	{
2880:../../../FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
2881:../../../FreeRTOS/Source/tasks.c **** 	}
2882:../../../FreeRTOS/Source/tasks.c **** 
2883:../../../FreeRTOS/Source/tasks.c **** 	pxTCB->uxPriority = uxPriority;
 4126              		.loc 1 2883 0
 4127 0054 FB68     		ldr	r3, [r7, #12]
 4128 0056 7A68     		ldr	r2, [r7, #4]
 4129 0058 DA62     		str	r2, [r3, #44]
2884:../../../FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
2885:../../../FreeRTOS/Source/tasks.c **** 	{
2886:../../../FreeRTOS/Source/tasks.c **** 		pxTCB->uxBasePriority = uxPriority;
 4130              		.loc 1 2886 0
 4131 005a FB68     		ldr	r3, [r7, #12]
 4132 005c 7A68     		ldr	r2, [r7, #4]
 4133 005e DA64     		str	r2, [r3, #76]
2887:../../../FreeRTOS/Source/tasks.c **** 		pxTCB->uxMutexesHeld = 0;
 4134              		.loc 1 2887 0
 4135 0060 FB68     		ldr	r3, [r7, #12]
 4136 0062 0022     		movs	r2, #0
 4137 0064 1A65     		str	r2, [r3, #80]
2888:../../../FreeRTOS/Source/tasks.c **** 	}
2889:../../../FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
2890:../../../FreeRTOS/Source/tasks.c **** 
2891:../../../FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 4138              		.loc 1 2891 0
 4139 0066 FB68     		ldr	r3, [r7, #12]
 4140 0068 0433     		adds	r3, r3, #4
 4141 006a 1846     		mov	r0, r3
 4142 006c FFF7FEFF 		bl	vListInitialiseItem
2892:../../../FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 4143              		.loc 1 2892 0
 4144 0070 FB68     		ldr	r3, [r7, #12]
 4145 0072 1833     		adds	r3, r3, #24
 4146 0074 1846     		mov	r0, r3
ARM GAS  /tmp/cc7uEwzT.s 			page 128


 4147 0076 FFF7FEFF 		bl	vListInitialiseItem
2893:../../../FreeRTOS/Source/tasks.c **** 
2894:../../../FreeRTOS/Source/tasks.c **** 	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
2895:../../../FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
2896:../../../FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 4148              		.loc 1 2896 0
 4149 007a FB68     		ldr	r3, [r7, #12]
 4150 007c FA68     		ldr	r2, [r7, #12]
 4151 007e 1A61     		str	r2, [r3, #16]
2897:../../../FreeRTOS/Source/tasks.c **** 
2898:../../../FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
2899:../../../FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickT
 4152              		.loc 1 2899 0
 4153 0080 7B68     		ldr	r3, [r7, #4]
 4154 0082 C3F10702 		rsb	r2, r3, #7
 4155 0086 FB68     		ldr	r3, [r7, #12]
 4156 0088 9A61     		str	r2, [r3, #24]
2900:../../../FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 4157              		.loc 1 2900 0
 4158 008a FB68     		ldr	r3, [r7, #12]
 4159 008c FA68     		ldr	r2, [r7, #12]
 4160 008e 5A62     		str	r2, [r3, #36]
2901:../../../FreeRTOS/Source/tasks.c **** 
2902:../../../FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
2903:../../../FreeRTOS/Source/tasks.c **** 	{
2904:../../../FreeRTOS/Source/tasks.c **** 		pxTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
2905:../../../FreeRTOS/Source/tasks.c **** 	}
2906:../../../FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
2907:../../../FreeRTOS/Source/tasks.c **** 
2908:../../../FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
2909:../../../FreeRTOS/Source/tasks.c **** 	{
2910:../../../FreeRTOS/Source/tasks.c **** 		pxTCB->pxTaskTag = NULL;
2911:../../../FreeRTOS/Source/tasks.c **** 	}
2912:../../../FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
2913:../../../FreeRTOS/Source/tasks.c **** 
2914:../../../FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
2915:../../../FreeRTOS/Source/tasks.c **** 	{
2916:../../../FreeRTOS/Source/tasks.c **** 		pxTCB->ulRunTimeCounter = 0UL;
2917:../../../FreeRTOS/Source/tasks.c **** 	}
2918:../../../FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
2919:../../../FreeRTOS/Source/tasks.c **** 
2920:../../../FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
2921:../../../FreeRTOS/Source/tasks.c **** 	{
2922:../../../FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, pxTCB->pxStack, usStackDepth );
2923:../../../FreeRTOS/Source/tasks.c **** 	}
2924:../../../FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
2925:../../../FreeRTOS/Source/tasks.c **** 	{
2926:../../../FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
2927:../../../FreeRTOS/Source/tasks.c **** 		( void ) usStackDepth;
2928:../../../FreeRTOS/Source/tasks.c **** 	}
2929:../../../FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
2930:../../../FreeRTOS/Source/tasks.c **** 
2931:../../../FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
2932:../../../FreeRTOS/Source/tasks.c **** 	{
2933:../../../FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
2934:../../../FreeRTOS/Source/tasks.c **** 		{
2935:../../../FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ x ] = NULL;
ARM GAS  /tmp/cc7uEwzT.s 			page 129


2936:../../../FreeRTOS/Source/tasks.c **** 		}
2937:../../../FreeRTOS/Source/tasks.c **** 	}
2938:../../../FreeRTOS/Source/tasks.c **** 	#endif
2939:../../../FreeRTOS/Source/tasks.c **** 
2940:../../../FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
2941:../../../FreeRTOS/Source/tasks.c **** 	{
2942:../../../FreeRTOS/Source/tasks.c **** 		pxTCB->ulNotifiedValue = 0;
 4161              		.loc 1 2942 0
 4162 0090 FB68     		ldr	r3, [r7, #12]
 4163 0092 0022     		movs	r2, #0
 4164 0094 5A65     		str	r2, [r3, #84]
2943:../../../FreeRTOS/Source/tasks.c **** 		pxTCB->eNotifyState = eNotWaitingNotification;
 4165              		.loc 1 2943 0
 4166 0096 FB68     		ldr	r3, [r7, #12]
 4167 0098 0022     		movs	r2, #0
 4168 009a 83F85820 		strb	r2, [r3, #88]
2944:../../../FreeRTOS/Source/tasks.c **** 	}
2945:../../../FreeRTOS/Source/tasks.c **** 	#endif
2946:../../../FreeRTOS/Source/tasks.c **** 
2947:../../../FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
2948:../../../FreeRTOS/Source/tasks.c **** 	{
2949:../../../FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
2950:../../../FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
2951:../../../FreeRTOS/Source/tasks.c **** 	}
2952:../../../FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_NEWLIB_REENTRANT */
2953:../../../FreeRTOS/Source/tasks.c **** }
 4169              		.loc 1 2953 0
 4170 009e 1837     		adds	r7, r7, #24
 4171              	.LCFI153:
 4172              		.cfi_def_cfa_offset 8
 4173 00a0 BD46     		mov	sp, r7
 4174              	.LCFI154:
 4175              		.cfi_def_cfa_register 13
 4176              		@ sp needed
 4177 00a2 80BD     		pop	{r7, pc}
 4178              		.cfi_endproc
 4179              	.LFE34:
 4181              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 4182              		.align	2
 4183              		.thumb
 4184              		.thumb_func
 4186              	prvInitialiseTaskLists:
 4187              	.LFB35:
2954:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2955:../../../FreeRTOS/Source/tasks.c **** 
2956:../../../FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
2957:../../../FreeRTOS/Source/tasks.c **** 
2958:../../../FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
2959:../../../FreeRTOS/Source/tasks.c **** 	{
2960:../../../FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2961:../../../FreeRTOS/Source/tasks.c **** 
2962:../../../FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
2963:../../../FreeRTOS/Source/tasks.c **** 		{
2964:../../../FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
2965:../../../FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
2966:../../../FreeRTOS/Source/tasks.c **** 		}
2967:../../../FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/cc7uEwzT.s 			page 130


2968:../../../FreeRTOS/Source/tasks.c **** 
2969:../../../FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
2970:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2971:../../../FreeRTOS/Source/tasks.c **** 
2972:../../../FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
2973:../../../FreeRTOS/Source/tasks.c **** 
2974:../../../FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
2975:../../../FreeRTOS/Source/tasks.c **** 	{
2976:../../../FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
2977:../../../FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2978:../../../FreeRTOS/Source/tasks.c **** 
2979:../../../FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
2980:../../../FreeRTOS/Source/tasks.c **** 		{
2981:../../../FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2982:../../../FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
2983:../../../FreeRTOS/Source/tasks.c **** 		}
2984:../../../FreeRTOS/Source/tasks.c **** 		else
2985:../../../FreeRTOS/Source/tasks.c **** 		{
2986:../../../FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
2987:../../../FreeRTOS/Source/tasks.c **** 		}
2988:../../../FreeRTOS/Source/tasks.c **** 
2989:../../../FreeRTOS/Source/tasks.c **** 		return pvReturn;
2990:../../../FreeRTOS/Source/tasks.c **** 	}
2991:../../../FreeRTOS/Source/tasks.c **** 
2992:../../../FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
2993:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2994:../../../FreeRTOS/Source/tasks.c **** 
2995:../../../FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
2996:../../../FreeRTOS/Source/tasks.c **** 
2997:../../../FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
2998:../../../FreeRTOS/Source/tasks.c **** 	{
2999:../../../FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3000:../../../FreeRTOS/Source/tasks.c **** 
3001:../../../FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3002:../../../FreeRTOS/Source/tasks.c **** 		the calling task. */
3003:../../../FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3004:../../../FreeRTOS/Source/tasks.c **** 
3005:../../../FreeRTOS/Source/tasks.c ****         vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3006:../../../FreeRTOS/Source/tasks.c **** 	}
3007:../../../FreeRTOS/Source/tasks.c **** 
3008:../../../FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3009:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3010:../../../FreeRTOS/Source/tasks.c **** 
3011:../../../FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3012:../../../FreeRTOS/Source/tasks.c **** {
 4188              		.loc 1 3012 0
 4189              		.cfi_startproc
 4190              		@ args = 0, pretend = 0, frame = 8
 4191              		@ frame_needed = 1, uses_anonymous_args = 0
 4192 0000 80B5     		push	{r7, lr}
 4193              	.LCFI155:
 4194              		.cfi_def_cfa_offset 8
 4195              		.cfi_offset 7, -8
 4196              		.cfi_offset 14, -4
 4197 0002 82B0     		sub	sp, sp, #8
 4198              	.LCFI156:
 4199              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/cc7uEwzT.s 			page 131


 4200 0004 00AF     		add	r7, sp, #0
 4201              	.LCFI157:
 4202              		.cfi_def_cfa_register 7
3013:../../../FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3014:../../../FreeRTOS/Source/tasks.c **** 
3015:../../../FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
 4203              		.loc 1 3015 0
 4204 0006 0023     		movs	r3, #0
 4205 0008 7B60     		str	r3, [r7, #4]
 4206 000a 0CE0     		b	.L260
 4207              	.L261:
3016:../../../FreeRTOS/Source/tasks.c **** 	{
3017:../../../FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 4208              		.loc 1 3017 0 discriminator 3
 4209 000c 7A68     		ldr	r2, [r7, #4]
 4210 000e 1346     		mov	r3, r2
 4211 0010 9B00     		lsls	r3, r3, #2
 4212 0012 1344     		add	r3, r3, r2
 4213 0014 9B00     		lsls	r3, r3, #2
 4214 0016 114A     		ldr	r2, .L262
 4215 0018 1344     		add	r3, r3, r2
 4216 001a 1846     		mov	r0, r3
 4217 001c FFF7FEFF 		bl	vListInitialise
3015:../../../FreeRTOS/Source/tasks.c **** 	{
 4218              		.loc 1 3015 0 discriminator 3
 4219 0020 7B68     		ldr	r3, [r7, #4]
 4220 0022 0133     		adds	r3, r3, #1
 4221 0024 7B60     		str	r3, [r7, #4]
 4222              	.L260:
3015:../../../FreeRTOS/Source/tasks.c **** 	{
 4223              		.loc 1 3015 0 is_stmt 0 discriminator 1
 4224 0026 7B68     		ldr	r3, [r7, #4]
 4225 0028 062B     		cmp	r3, #6
 4226 002a EFD9     		bls	.L261
3018:../../../FreeRTOS/Source/tasks.c **** 	}
3019:../../../FreeRTOS/Source/tasks.c **** 
3020:../../../FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
 4227              		.loc 1 3020 0 is_stmt 1
 4228 002c 0C48     		ldr	r0, .L262+4
 4229 002e FFF7FEFF 		bl	vListInitialise
3021:../../../FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 4230              		.loc 1 3021 0
 4231 0032 0C48     		ldr	r0, .L262+8
 4232 0034 FFF7FEFF 		bl	vListInitialise
3022:../../../FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 4233              		.loc 1 3022 0
 4234 0038 0B48     		ldr	r0, .L262+12
 4235 003a FFF7FEFF 		bl	vListInitialise
3023:../../../FreeRTOS/Source/tasks.c **** 
3024:../../../FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3025:../../../FreeRTOS/Source/tasks.c **** 	{
3026:../../../FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
 4236              		.loc 1 3026 0
 4237 003e 0B48     		ldr	r0, .L262+16
 4238 0040 FFF7FEFF 		bl	vListInitialise
3027:../../../FreeRTOS/Source/tasks.c **** 	}
3028:../../../FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
ARM GAS  /tmp/cc7uEwzT.s 			page 132


3029:../../../FreeRTOS/Source/tasks.c **** 
3030:../../../FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3031:../../../FreeRTOS/Source/tasks.c **** 	{
3032:../../../FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
 4239              		.loc 1 3032 0
 4240 0044 0A48     		ldr	r0, .L262+20
 4241 0046 FFF7FEFF 		bl	vListInitialise
3033:../../../FreeRTOS/Source/tasks.c **** 	}
3034:../../../FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3035:../../../FreeRTOS/Source/tasks.c **** 
3036:../../../FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3037:../../../FreeRTOS/Source/tasks.c **** 	using list2. */
3038:../../../FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
 4242              		.loc 1 3038 0
 4243 004a 0A4B     		ldr	r3, .L262+24
 4244 004c 044A     		ldr	r2, .L262+4
 4245 004e 1A60     		str	r2, [r3]
3039:../../../FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 4246              		.loc 1 3039 0
 4247 0050 094B     		ldr	r3, .L262+28
 4248 0052 044A     		ldr	r2, .L262+8
 4249 0054 1A60     		str	r2, [r3]
3040:../../../FreeRTOS/Source/tasks.c **** }
 4250              		.loc 1 3040 0
 4251 0056 0837     		adds	r7, r7, #8
 4252              	.LCFI158:
 4253              		.cfi_def_cfa_offset 8
 4254 0058 BD46     		mov	sp, r7
 4255              	.LCFI159:
 4256              		.cfi_def_cfa_register 13
 4257              		@ sp needed
 4258 005a 80BD     		pop	{r7, pc}
 4259              	.L263:
 4260              		.align	2
 4261              	.L262:
 4262 005c 00000000 		.word	pxReadyTasksLists
 4263 0060 00000000 		.word	xDelayedTaskList1
 4264 0064 00000000 		.word	xDelayedTaskList2
 4265 0068 00000000 		.word	xPendingReadyList
 4266 006c 00000000 		.word	xTasksWaitingTermination
 4267 0070 00000000 		.word	xSuspendedTaskList
 4268 0074 00000000 		.word	pxDelayedTaskList
 4269 0078 00000000 		.word	pxOverflowDelayedTaskList
 4270              		.cfi_endproc
 4271              	.LFE35:
 4273              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 4274              		.align	2
 4275              		.thumb
 4276              		.thumb_func
 4278              	prvCheckTasksWaitingTermination:
 4279              	.LFB36:
3041:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3042:../../../FreeRTOS/Source/tasks.c **** 
3043:../../../FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3044:../../../FreeRTOS/Source/tasks.c **** {
 4280              		.loc 1 3044 0
 4281              		.cfi_startproc
ARM GAS  /tmp/cc7uEwzT.s 			page 133


 4282              		@ args = 0, pretend = 0, frame = 8
 4283              		@ frame_needed = 1, uses_anonymous_args = 0
 4284 0000 80B5     		push	{r7, lr}
 4285              	.LCFI160:
 4286              		.cfi_def_cfa_offset 8
 4287              		.cfi_offset 7, -8
 4288              		.cfi_offset 14, -4
 4289 0002 82B0     		sub	sp, sp, #8
 4290              	.LCFI161:
 4291              		.cfi_def_cfa_offset 16
 4292 0004 00AF     		add	r7, sp, #0
 4293              	.LCFI162:
 4294              		.cfi_def_cfa_register 7
 4295              	.LBB156:
3045:../../../FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3046:../../../FreeRTOS/Source/tasks.c **** 	{
3047:../../../FreeRTOS/Source/tasks.c **** 		BaseType_t xListIsEmpty;
3048:../../../FreeRTOS/Source/tasks.c **** 
3049:../../../FreeRTOS/Source/tasks.c **** 		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
3050:../../../FreeRTOS/Source/tasks.c **** 		too often in the idle task. */
3051:../../../FreeRTOS/Source/tasks.c **** 		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 4296              		.loc 1 3051 0
 4297 0006 28E0     		b	.L265
 4298              	.L266:
3052:../../../FreeRTOS/Source/tasks.c **** 		{
3053:../../../FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 4299              		.loc 1 3053 0
 4300 0008 FFF7FEFF 		bl	vTaskSuspendAll
3054:../../../FreeRTOS/Source/tasks.c **** 			{
3055:../../../FreeRTOS/Source/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 4301              		.loc 1 3055 0
 4302 000c 164B     		ldr	r3, .L267
 4303 000e 1B68     		ldr	r3, [r3]
 4304 0010 002B     		cmp	r3, #0
 4305 0012 0CBF     		ite	eq
 4306 0014 0123     		moveq	r3, #1
 4307 0016 0023     		movne	r3, #0
 4308 0018 DBB2     		uxtb	r3, r3
 4309 001a 7B60     		str	r3, [r7, #4]
3056:../../../FreeRTOS/Source/tasks.c **** 			}
3057:../../../FreeRTOS/Source/tasks.c **** 			( void ) xTaskResumeAll();
 4310              		.loc 1 3057 0
 4311 001c FFF7FEFF 		bl	xTaskResumeAll
3058:../../../FreeRTOS/Source/tasks.c **** 
3059:../../../FreeRTOS/Source/tasks.c **** 			if( xListIsEmpty == pdFALSE )
 4312              		.loc 1 3059 0
 4313 0020 7B68     		ldr	r3, [r7, #4]
 4314 0022 002B     		cmp	r3, #0
 4315 0024 19D1     		bne	.L265
 4316              	.LBB157:
3060:../../../FreeRTOS/Source/tasks.c **** 			{
3061:../../../FreeRTOS/Source/tasks.c **** 				TCB_t *pxTCB;
3062:../../../FreeRTOS/Source/tasks.c **** 
3063:../../../FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
 4317              		.loc 1 3063 0
 4318 0026 FFF7FEFF 		bl	vPortEnterCritical
3064:../../../FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/cc7uEwzT.s 			page 134


3065:../../../FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 4319              		.loc 1 3065 0
 4320 002a 0F4B     		ldr	r3, .L267
 4321 002c DB68     		ldr	r3, [r3, #12]
 4322 002e DB68     		ldr	r3, [r3, #12]
 4323 0030 3B60     		str	r3, [r7]
3066:../../../FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 4324              		.loc 1 3066 0
 4325 0032 3B68     		ldr	r3, [r7]
 4326 0034 0433     		adds	r3, r3, #4
 4327 0036 1846     		mov	r0, r3
 4328 0038 FFF7FEFF 		bl	uxListRemove
3067:../../../FreeRTOS/Source/tasks.c **** 					--uxCurrentNumberOfTasks;
 4329              		.loc 1 3067 0
 4330 003c 0B4B     		ldr	r3, .L267+4
 4331 003e 1B68     		ldr	r3, [r3]
 4332 0040 013B     		subs	r3, r3, #1
 4333 0042 0A4A     		ldr	r2, .L267+4
 4334 0044 1360     		str	r3, [r2]
3068:../../../FreeRTOS/Source/tasks.c **** 					--uxTasksDeleted;
 4335              		.loc 1 3068 0
 4336 0046 0A4B     		ldr	r3, .L267+8
 4337 0048 1B68     		ldr	r3, [r3]
 4338 004a 013B     		subs	r3, r3, #1
 4339 004c 084A     		ldr	r2, .L267+8
 4340 004e 1360     		str	r3, [r2]
3069:../../../FreeRTOS/Source/tasks.c **** 				}
3070:../../../FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
 4341              		.loc 1 3070 0
 4342 0050 FFF7FEFF 		bl	vPortExitCritical
3071:../../../FreeRTOS/Source/tasks.c **** 
3072:../../../FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 4343              		.loc 1 3072 0
 4344 0054 3868     		ldr	r0, [r7]
 4345 0056 FFF7FEFF 		bl	prvDeleteTCB
 4346              	.L265:
 4347              	.LBE157:
3051:../../../FreeRTOS/Source/tasks.c **** 		{
 4348              		.loc 1 3051 0
 4349 005a 054B     		ldr	r3, .L267+8
 4350 005c 1B68     		ldr	r3, [r3]
 4351 005e 002B     		cmp	r3, #0
 4352 0060 D2D1     		bne	.L266
 4353              	.LBE156:
3073:../../../FreeRTOS/Source/tasks.c **** 			}
3074:../../../FreeRTOS/Source/tasks.c **** 			else
3075:../../../FreeRTOS/Source/tasks.c **** 			{
3076:../../../FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3077:../../../FreeRTOS/Source/tasks.c **** 			}
3078:../../../FreeRTOS/Source/tasks.c **** 		}
3079:../../../FreeRTOS/Source/tasks.c **** 	}
3080:../../../FreeRTOS/Source/tasks.c **** 	#endif /* vTaskDelete */
3081:../../../FreeRTOS/Source/tasks.c **** }
 4354              		.loc 1 3081 0
 4355 0062 0837     		adds	r7, r7, #8
 4356              	.LCFI163:
 4357              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cc7uEwzT.s 			page 135


 4358 0064 BD46     		mov	sp, r7
 4359              	.LCFI164:
 4360              		.cfi_def_cfa_register 13
 4361              		@ sp needed
 4362 0066 80BD     		pop	{r7, pc}
 4363              	.L268:
 4364              		.align	2
 4365              	.L267:
 4366 0068 00000000 		.word	xTasksWaitingTermination
 4367 006c 00000000 		.word	uxCurrentNumberOfTasks
 4368 0070 00000000 		.word	uxTasksDeleted
 4369              		.cfi_endproc
 4370              	.LFE36:
 4372              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 4373              		.align	2
 4374              		.thumb
 4375              		.thumb_func
 4377              	prvAddCurrentTaskToDelayedList:
 4378              	.LFB37:
3082:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3083:../../../FreeRTOS/Source/tasks.c **** 
3084:../../../FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
3085:../../../FreeRTOS/Source/tasks.c **** {
 4379              		.loc 1 3085 0
 4380              		.cfi_startproc
 4381              		@ args = 0, pretend = 0, frame = 8
 4382              		@ frame_needed = 1, uses_anonymous_args = 0
 4383 0000 80B5     		push	{r7, lr}
 4384              	.LCFI165:
 4385              		.cfi_def_cfa_offset 8
 4386              		.cfi_offset 7, -8
 4387              		.cfi_offset 14, -4
 4388 0002 82B0     		sub	sp, sp, #8
 4389              	.LCFI166:
 4390              		.cfi_def_cfa_offset 16
 4391 0004 00AF     		add	r7, sp, #0
 4392              	.LCFI167:
 4393              		.cfi_def_cfa_register 7
 4394 0006 7860     		str	r0, [r7, #4]
3086:../../../FreeRTOS/Source/tasks.c **** 	/* The list item will be inserted in wake time order. */
3087:../../../FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 4395              		.loc 1 3087 0
 4396 0008 194B     		ldr	r3, .L272
 4397 000a 1B68     		ldr	r3, [r3]
 4398 000c 7A68     		ldr	r2, [r7, #4]
 4399 000e 5A60     		str	r2, [r3, #4]
3088:../../../FreeRTOS/Source/tasks.c **** 
3089:../../../FreeRTOS/Source/tasks.c **** 	if( xTimeToWake < xTickCount )
 4400              		.loc 1 3089 0
 4401 0010 184B     		ldr	r3, .L272+4
 4402 0012 1B68     		ldr	r3, [r3]
 4403 0014 7A68     		ldr	r2, [r7, #4]
 4404 0016 9A42     		cmp	r2, r3
 4405 0018 0FD2     		bcs	.L270
3090:../../../FreeRTOS/Source/tasks.c **** 	{
3091:../../../FreeRTOS/Source/tasks.c **** 		traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 4406              		.loc 1 3091 0
ARM GAS  /tmp/cc7uEwzT.s 			page 136


 4407 001a 154B     		ldr	r3, .L272
 4408 001c 1B68     		ldr	r3, [r3]
 4409 001e 1846     		mov	r0, r3
 4410 0020 0421     		movs	r1, #4
 4411 0022 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStopReady
3092:../../../FreeRTOS/Source/tasks.c **** 		/* Wake time has overflowed.  Place this item in the overflow list. */
3093:../../../FreeRTOS/Source/tasks.c **** 		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 4412              		.loc 1 3093 0
 4413 0026 144B     		ldr	r3, .L272+8
 4414 0028 1A68     		ldr	r2, [r3]
 4415 002a 114B     		ldr	r3, .L272
 4416 002c 1B68     		ldr	r3, [r3]
 4417 002e 0433     		adds	r3, r3, #4
 4418 0030 1046     		mov	r0, r2
 4419 0032 1946     		mov	r1, r3
 4420 0034 FFF7FEFF 		bl	vListInsert
 4421 0038 16E0     		b	.L269
 4422              	.L270:
3094:../../../FreeRTOS/Source/tasks.c **** 	}
3095:../../../FreeRTOS/Source/tasks.c **** 	else
3096:../../../FreeRTOS/Source/tasks.c **** 	{
3097:../../../FreeRTOS/Source/tasks.c **** 		traceMOVED_TASK_TO_DELAYED_LIST();
 4423              		.loc 1 3097 0
 4424 003a 0D4B     		ldr	r3, .L272
 4425 003c 1B68     		ldr	r3, [r3]
 4426 003e 1846     		mov	r0, r3
 4427 0040 0421     		movs	r1, #4
 4428 0042 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStopReady
3098:../../../FreeRTOS/Source/tasks.c **** 		/* The wake time has not overflowed, so the current block list is used. */
3099:../../../FreeRTOS/Source/tasks.c **** 		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 4429              		.loc 1 3099 0
 4430 0046 0D4B     		ldr	r3, .L272+12
 4431 0048 1A68     		ldr	r2, [r3]
 4432 004a 094B     		ldr	r3, .L272
 4433 004c 1B68     		ldr	r3, [r3]
 4434 004e 0433     		adds	r3, r3, #4
 4435 0050 1046     		mov	r0, r2
 4436 0052 1946     		mov	r1, r3
 4437 0054 FFF7FEFF 		bl	vListInsert
3100:../../../FreeRTOS/Source/tasks.c **** 
3101:../../../FreeRTOS/Source/tasks.c **** 		/* If the task entering the blocked state was placed at the head of the
3102:../../../FreeRTOS/Source/tasks.c **** 		list of blocked tasks then xNextTaskUnblockTime needs to be updated
3103:../../../FreeRTOS/Source/tasks.c **** 		too. */
3104:../../../FreeRTOS/Source/tasks.c **** 		if( xTimeToWake < xNextTaskUnblockTime )
 4438              		.loc 1 3104 0
 4439 0058 094B     		ldr	r3, .L272+16
 4440 005a 1B68     		ldr	r3, [r3]
 4441 005c 7A68     		ldr	r2, [r7, #4]
 4442 005e 9A42     		cmp	r2, r3
 4443 0060 02D2     		bcs	.L269
3105:../../../FreeRTOS/Source/tasks.c **** 		{
3106:../../../FreeRTOS/Source/tasks.c **** 			xNextTaskUnblockTime = xTimeToWake;
 4444              		.loc 1 3106 0
 4445 0062 074A     		ldr	r2, .L272+16
 4446 0064 7B68     		ldr	r3, [r7, #4]
 4447 0066 1360     		str	r3, [r2]
 4448              	.L269:
ARM GAS  /tmp/cc7uEwzT.s 			page 137


3107:../../../FreeRTOS/Source/tasks.c **** 		}
3108:../../../FreeRTOS/Source/tasks.c **** 		else
3109:../../../FreeRTOS/Source/tasks.c **** 		{
3110:../../../FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3111:../../../FreeRTOS/Source/tasks.c **** 		}
3112:../../../FreeRTOS/Source/tasks.c **** 	}
3113:../../../FreeRTOS/Source/tasks.c **** }
 4449              		.loc 1 3113 0
 4450 0068 0837     		adds	r7, r7, #8
 4451              	.LCFI168:
 4452              		.cfi_def_cfa_offset 8
 4453 006a BD46     		mov	sp, r7
 4454              	.LCFI169:
 4455              		.cfi_def_cfa_register 13
 4456              		@ sp needed
 4457 006c 80BD     		pop	{r7, pc}
 4458              	.L273:
 4459 006e 00BF     		.align	2
 4460              	.L272:
 4461 0070 00000000 		.word	pxCurrentTCB
 4462 0074 00000000 		.word	xTickCount
 4463 0078 00000000 		.word	pxOverflowDelayedTaskList
 4464 007c 00000000 		.word	pxDelayedTaskList
 4465 0080 00000000 		.word	xNextTaskUnblockTime
 4466              		.cfi_endproc
 4467              	.LFE37:
 4469              		.section	.text.prvAllocateTCBAndStack,"ax",%progbits
 4470              		.align	2
 4471              		.thumb
 4472              		.thumb_func
 4474              	prvAllocateTCBAndStack:
 4475              	.LFB38:
3114:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3115:../../../FreeRTOS/Source/tasks.c **** 
3116:../../../FreeRTOS/Source/tasks.c **** static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuff
3117:../../../FreeRTOS/Source/tasks.c **** {
 4476              		.loc 1 3117 0
 4477              		.cfi_startproc
 4478              		@ args = 0, pretend = 0, frame = 16
 4479              		@ frame_needed = 1, uses_anonymous_args = 0
 4480 0000 80B5     		push	{r7, lr}
 4481              	.LCFI170:
 4482              		.cfi_def_cfa_offset 8
 4483              		.cfi_offset 7, -8
 4484              		.cfi_offset 14, -4
 4485 0002 84B0     		sub	sp, sp, #16
 4486              	.LCFI171:
 4487              		.cfi_def_cfa_offset 24
 4488 0004 00AF     		add	r7, sp, #0
 4489              	.LCFI172:
 4490              		.cfi_def_cfa_register 7
 4491 0006 0346     		mov	r3, r0
 4492 0008 3960     		str	r1, [r7]
 4493 000a FB80     		strh	r3, [r7, #6]	@ movhi
 4494              	.LBB158:
3118:../../../FreeRTOS/Source/tasks.c **** TCB_t *pxNewTCB;
3119:../../../FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc7uEwzT.s 			page 138


3120:../../../FreeRTOS/Source/tasks.c **** 	/* If the stack grows down then allocate the stack then the TCB so the stack
3121:../../../FreeRTOS/Source/tasks.c **** 	does not grow into the TCB.  Likewise if the stack grows up then allocate
3122:../../../FreeRTOS/Source/tasks.c **** 	the TCB then the stack. */
3123:../../../FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH > 0 )
3124:../../../FreeRTOS/Source/tasks.c **** 	{
3125:../../../FreeRTOS/Source/tasks.c **** 		/* Allocate space for the TCB.  Where the memory comes from depends on
3126:../../../FreeRTOS/Source/tasks.c **** 		the implementation of the port malloc function. */
3127:../../../FreeRTOS/Source/tasks.c **** 		pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
3128:../../../FreeRTOS/Source/tasks.c **** 
3129:../../../FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
3130:../../../FreeRTOS/Source/tasks.c **** 		{
3131:../../../FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created.
3132:../../../FreeRTOS/Source/tasks.c **** 			The base of the stack memory stored in the TCB so the task can
3133:../../../FreeRTOS/Source/tasks.c **** 			be deleted later if required. */
3134:../../../FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeo
3135:../../../FreeRTOS/Source/tasks.c **** 
3136:../../../FreeRTOS/Source/tasks.c **** 			if( pxNewTCB->pxStack == NULL )
3137:../../../FreeRTOS/Source/tasks.c **** 			{
3138:../../../FreeRTOS/Source/tasks.c **** 				/* Could not allocate the stack.  Delete the allocated TCB. */
3139:../../../FreeRTOS/Source/tasks.c **** 				vPortFree( pxNewTCB );
3140:../../../FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
3141:../../../FreeRTOS/Source/tasks.c **** 			}
3142:../../../FreeRTOS/Source/tasks.c **** 		}
3143:../../../FreeRTOS/Source/tasks.c **** 	}
3144:../../../FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
3145:../../../FreeRTOS/Source/tasks.c **** 	{
3146:../../../FreeRTOS/Source/tasks.c **** 	StackType_t *pxStack;
3147:../../../FreeRTOS/Source/tasks.c **** 
3148:../../../FreeRTOS/Source/tasks.c **** 		/* Allocate space for the stack used by the task being created. */
3149:../../../FreeRTOS/Source/tasks.c **** 		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackTyp
 4495              		.loc 1 3149 0
 4496 000c 3B68     		ldr	r3, [r7]
 4497 000e 002B     		cmp	r3, #0
 4498 0010 06D1     		bne	.L275
 4499              		.loc 1 3149 0 is_stmt 0 discriminator 1
 4500 0012 FB88     		ldrh	r3, [r7, #6]
 4501 0014 9B00     		lsls	r3, r3, #2
 4502 0016 1846     		mov	r0, r3
 4503 0018 FFF7FEFF 		bl	pvPortMalloc
 4504 001c 0346     		mov	r3, r0
 4505 001e 00E0     		b	.L276
 4506              	.L275:
 4507              		.loc 1 3149 0 discriminator 2
 4508 0020 3B68     		ldr	r3, [r7]
 4509              	.L276:
 4510              		.loc 1 3149 0 discriminator 4
 4511 0022 BB60     		str	r3, [r7, #8]
3150:../../../FreeRTOS/Source/tasks.c **** 
3151:../../../FreeRTOS/Source/tasks.c **** 		if( pxStack != NULL )
 4512              		.loc 1 3151 0 is_stmt 1 discriminator 4
 4513 0024 BB68     		ldr	r3, [r7, #8]
 4514 0026 002B     		cmp	r3, #0
 4515 0028 0ED0     		beq	.L277
3152:../../../FreeRTOS/Source/tasks.c **** 		{
3153:../../../FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
3154:../../../FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function. */
3155:../../../FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
ARM GAS  /tmp/cc7uEwzT.s 			page 139


 4516              		.loc 1 3155 0
 4517 002a 5C20     		movs	r0, #92
 4518 002c FFF7FEFF 		bl	pvPortMalloc
 4519 0030 F860     		str	r0, [r7, #12]
3156:../../../FreeRTOS/Source/tasks.c **** 
3157:../../../FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 4520              		.loc 1 3157 0
 4521 0032 FB68     		ldr	r3, [r7, #12]
 4522 0034 002B     		cmp	r3, #0
 4523 0036 03D0     		beq	.L278
3158:../../../FreeRTOS/Source/tasks.c **** 			{
3159:../../../FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
3160:../../../FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxStack;
 4524              		.loc 1 3160 0
 4525 0038 FB68     		ldr	r3, [r7, #12]
 4526 003a BA68     		ldr	r2, [r7, #8]
 4527 003c 1A63     		str	r2, [r3, #48]
 4528 003e 05E0     		b	.L280
 4529              	.L278:
3161:../../../FreeRTOS/Source/tasks.c **** 			}
3162:../../../FreeRTOS/Source/tasks.c **** 			else
3163:../../../FreeRTOS/Source/tasks.c **** 			{
3164:../../../FreeRTOS/Source/tasks.c **** 				/* The stack cannot be used as the TCB was not created.  Free it
3165:../../../FreeRTOS/Source/tasks.c **** 				again. */
3166:../../../FreeRTOS/Source/tasks.c **** 				vPortFree( pxStack );
 4530              		.loc 1 3166 0
 4531 0040 B868     		ldr	r0, [r7, #8]
 4532 0042 FFF7FEFF 		bl	vPortFree
 4533 0046 01E0     		b	.L280
 4534              	.L277:
3167:../../../FreeRTOS/Source/tasks.c **** 			}
3168:../../../FreeRTOS/Source/tasks.c **** 		}
3169:../../../FreeRTOS/Source/tasks.c **** 		else
3170:../../../FreeRTOS/Source/tasks.c **** 		{
3171:../../../FreeRTOS/Source/tasks.c **** 			pxNewTCB = NULL;
 4535              		.loc 1 3171 0
 4536 0048 0023     		movs	r3, #0
 4537 004a FB60     		str	r3, [r7, #12]
 4538              	.L280:
 4539              	.LBE158:
3172:../../../FreeRTOS/Source/tasks.c **** 		}
3173:../../../FreeRTOS/Source/tasks.c **** 	}
3174:../../../FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
3175:../../../FreeRTOS/Source/tasks.c **** 
3176:../../../FreeRTOS/Source/tasks.c **** 	if( pxNewTCB != NULL )
 4540              		.loc 1 3176 0
 4541 004c FB68     		ldr	r3, [r7, #12]
 4542 004e 002B     		cmp	r3, #0
 4543 0050 08D0     		beq	.L281
3177:../../../FreeRTOS/Source/tasks.c **** 	{
3178:../../../FreeRTOS/Source/tasks.c **** 		/* Avoid dependency on memset() if it is not required. */
3179:../../../FreeRTOS/Source/tasks.c **** 		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxT
3180:../../../FreeRTOS/Source/tasks.c **** 		{
3181:../../../FreeRTOS/Source/tasks.c **** 			/* Just to help debugging. */
3182:../../../FreeRTOS/Source/tasks.c **** 			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof
 4544              		.loc 1 3182 0
 4545 0052 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/cc7uEwzT.s 			page 140


 4546 0054 1A6B     		ldr	r2, [r3, #48]
 4547 0056 FB88     		ldrh	r3, [r7, #6]
 4548 0058 9B00     		lsls	r3, r3, #2
 4549 005a 1046     		mov	r0, r2
 4550 005c A521     		movs	r1, #165
 4551 005e 1A46     		mov	r2, r3
 4552 0060 FFF7FEFF 		bl	memset
 4553              	.L281:
3183:../../../FreeRTOS/Source/tasks.c **** 		}
3184:../../../FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( IN
3185:../../../FreeRTOS/Source/tasks.c **** 	}
3186:../../../FreeRTOS/Source/tasks.c **** 
3187:../../../FreeRTOS/Source/tasks.c **** 	return pxNewTCB;
 4554              		.loc 1 3187 0
 4555 0064 FB68     		ldr	r3, [r7, #12]
3188:../../../FreeRTOS/Source/tasks.c **** }
 4556              		.loc 1 3188 0
 4557 0066 1846     		mov	r0, r3
 4558 0068 1037     		adds	r7, r7, #16
 4559              	.LCFI173:
 4560              		.cfi_def_cfa_offset 8
 4561 006a BD46     		mov	sp, r7
 4562              	.LCFI174:
 4563              		.cfi_def_cfa_register 13
 4564              		@ sp needed
 4565 006c 80BD     		pop	{r7, pc}
 4566              		.cfi_endproc
 4567              	.LFE38:
 4569 006e 00BF     		.section	.text.prvListTaskWithinSingleList,"ax",%progbits
 4570              		.align	2
 4571              		.thumb
 4572              		.thumb_func
 4574              	prvListTaskWithinSingleList:
 4575              	.LFB39:
3189:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3190:../../../FreeRTOS/Source/tasks.c **** 
3191:../../../FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3192:../../../FreeRTOS/Source/tasks.c **** 
3193:../../../FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, e
3194:../../../FreeRTOS/Source/tasks.c **** 	{
 4576              		.loc 1 3194 0
 4577              		.cfi_startproc
 4578              		@ args = 0, pretend = 0, frame = 40
 4579              		@ frame_needed = 1, uses_anonymous_args = 0
 4580 0000 90B5     		push	{r4, r7, lr}
 4581              	.LCFI175:
 4582              		.cfi_def_cfa_offset 12
 4583              		.cfi_offset 4, -12
 4584              		.cfi_offset 7, -8
 4585              		.cfi_offset 14, -4
 4586 0002 8BB0     		sub	sp, sp, #44
 4587              	.LCFI176:
 4588              		.cfi_def_cfa_offset 56
 4589 0004 00AF     		add	r7, sp, #0
 4590              	.LCFI177:
 4591              		.cfi_def_cfa_register 7
 4592 0006 F860     		str	r0, [r7, #12]
ARM GAS  /tmp/cc7uEwzT.s 			page 141


 4593 0008 B960     		str	r1, [r7, #8]
 4594 000a 1346     		mov	r3, r2
 4595 000c FB71     		strb	r3, [r7, #7]
3195:../../../FreeRTOS/Source/tasks.c **** 	volatile TCB_t *pxNextTCB, *pxFirstTCB;
3196:../../../FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
 4596              		.loc 1 3196 0
 4597 000e 0023     		movs	r3, #0
 4598 0010 7B62     		str	r3, [r7, #36]
3197:../../../FreeRTOS/Source/tasks.c **** 
3198:../../../FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 4599              		.loc 1 3198 0
 4600 0012 BB68     		ldr	r3, [r7, #8]
 4601 0014 1B68     		ldr	r3, [r3]
 4602 0016 002B     		cmp	r3, #0
 4603 0018 78D0     		beq	.L284
 4604              	.LBB159:
3199:../../../FreeRTOS/Source/tasks.c **** 		{
3200:../../../FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 4605              		.loc 1 3200 0
 4606 001a BB68     		ldr	r3, [r7, #8]
 4607 001c 3B62     		str	r3, [r7, #32]
 4608 001e 3B6A     		ldr	r3, [r7, #32]
 4609 0020 5B68     		ldr	r3, [r3, #4]
 4610 0022 5A68     		ldr	r2, [r3, #4]
 4611 0024 3B6A     		ldr	r3, [r7, #32]
 4612 0026 5A60     		str	r2, [r3, #4]
 4613 0028 3B6A     		ldr	r3, [r7, #32]
 4614 002a 5A68     		ldr	r2, [r3, #4]
 4615 002c 3B6A     		ldr	r3, [r7, #32]
 4616 002e 0833     		adds	r3, r3, #8
 4617 0030 9A42     		cmp	r2, r3
 4618 0032 04D1     		bne	.L285
 4619              		.loc 1 3200 0 is_stmt 0 discriminator 1
 4620 0034 3B6A     		ldr	r3, [r7, #32]
 4621 0036 5B68     		ldr	r3, [r3, #4]
 4622 0038 5A68     		ldr	r2, [r3, #4]
 4623 003a 3B6A     		ldr	r3, [r7, #32]
 4624 003c 5A60     		str	r2, [r3, #4]
 4625              	.L285:
 4626              		.loc 1 3200 0 discriminator 3
 4627 003e 3B6A     		ldr	r3, [r7, #32]
 4628 0040 5B68     		ldr	r3, [r3, #4]
 4629 0042 DB68     		ldr	r3, [r3, #12]
 4630 0044 FB61     		str	r3, [r7, #28]
 4631              	.L288:
 4632              	.LBE159:
 4633              	.LBB160:
3201:../../../FreeRTOS/Source/tasks.c **** 
3202:../../../FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3203:../../../FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3204:../../../FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3205:../../../FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3206:../../../FreeRTOS/Source/tasks.c **** 			do
3207:../../../FreeRTOS/Source/tasks.c **** 			{
3208:../../../FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 4634              		.loc 1 3208 0 is_stmt 1
 4635 0046 BB68     		ldr	r3, [r7, #8]
ARM GAS  /tmp/cc7uEwzT.s 			page 142


 4636 0048 BB61     		str	r3, [r7, #24]
 4637 004a BB69     		ldr	r3, [r7, #24]
 4638 004c 5B68     		ldr	r3, [r3, #4]
 4639 004e 5A68     		ldr	r2, [r3, #4]
 4640 0050 BB69     		ldr	r3, [r7, #24]
 4641 0052 5A60     		str	r2, [r3, #4]
 4642 0054 BB69     		ldr	r3, [r7, #24]
 4643 0056 5A68     		ldr	r2, [r3, #4]
 4644 0058 BB69     		ldr	r3, [r7, #24]
 4645 005a 0833     		adds	r3, r3, #8
 4646 005c 9A42     		cmp	r2, r3
 4647 005e 04D1     		bne	.L286
 4648              		.loc 1 3208 0 is_stmt 0 discriminator 1
 4649 0060 BB69     		ldr	r3, [r7, #24]
 4650 0062 5B68     		ldr	r3, [r3, #4]
 4651 0064 5A68     		ldr	r2, [r3, #4]
 4652 0066 BB69     		ldr	r3, [r7, #24]
 4653 0068 5A60     		str	r2, [r3, #4]
 4654              	.L286:
 4655              		.loc 1 3208 0 discriminator 3
 4656 006a BB69     		ldr	r3, [r7, #24]
 4657 006c 5B68     		ldr	r3, [r3, #4]
 4658 006e DB68     		ldr	r3, [r3, #12]
 4659 0070 7B61     		str	r3, [r7, #20]
 4660              	.LBE160:
3209:../../../FreeRTOS/Source/tasks.c **** 
3210:../../../FreeRTOS/Source/tasks.c **** 				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 4661              		.loc 1 3210 0 is_stmt 1 discriminator 3
 4662 0072 7B6A     		ldr	r3, [r7, #36]
 4663 0074 5B01     		lsls	r3, r3, #5
 4664 0076 FA68     		ldr	r2, [r7, #12]
 4665 0078 1344     		add	r3, r3, r2
 4666 007a 7A69     		ldr	r2, [r7, #20]
 4667 007c 1A60     		str	r2, [r3]
3211:../../../FreeRTOS/Source/tasks.c **** 				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 4668              		.loc 1 3211 0 discriminator 3
 4669 007e 7B6A     		ldr	r3, [r7, #36]
 4670 0080 5B01     		lsls	r3, r3, #5
 4671 0082 FA68     		ldr	r2, [r7, #12]
 4672 0084 1344     		add	r3, r3, r2
 4673 0086 7A69     		ldr	r2, [r7, #20]
 4674 0088 3432     		adds	r2, r2, #52
 4675 008a 5A60     		str	r2, [r3, #4]
3212:../../../FreeRTOS/Source/tasks.c **** 				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 4676              		.loc 1 3212 0 discriminator 3
 4677 008c 7B6A     		ldr	r3, [r7, #36]
 4678 008e 5B01     		lsls	r3, r3, #5
 4679 0090 FA68     		ldr	r2, [r7, #12]
 4680 0092 1344     		add	r3, r3, r2
 4681 0094 7A69     		ldr	r2, [r7, #20]
 4682 0096 526C     		ldr	r2, [r2, #68]
 4683 0098 9A60     		str	r2, [r3, #8]
3213:../../../FreeRTOS/Source/tasks.c **** 				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 4684              		.loc 1 3213 0 discriminator 3
 4685 009a 7B6A     		ldr	r3, [r7, #36]
 4686 009c 5B01     		lsls	r3, r3, #5
 4687 009e FA68     		ldr	r2, [r7, #12]
ARM GAS  /tmp/cc7uEwzT.s 			page 143


 4688 00a0 1344     		add	r3, r3, r2
 4689 00a2 FA79     		ldrb	r2, [r7, #7]
 4690 00a4 1A73     		strb	r2, [r3, #12]
3214:../../../FreeRTOS/Source/tasks.c **** 				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 4691              		.loc 1 3214 0 discriminator 3
 4692 00a6 7B6A     		ldr	r3, [r7, #36]
 4693 00a8 5B01     		lsls	r3, r3, #5
 4694 00aa FA68     		ldr	r2, [r7, #12]
 4695 00ac 1344     		add	r3, r3, r2
 4696 00ae 7A69     		ldr	r2, [r7, #20]
 4697 00b0 D26A     		ldr	r2, [r2, #44]
 4698 00b2 1A61     		str	r2, [r3, #16]
3215:../../../FreeRTOS/Source/tasks.c **** 
3216:../../../FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3217:../../../FreeRTOS/Source/tasks.c **** 				{
3218:../../../FreeRTOS/Source/tasks.c **** 					/* If the task is in the suspended list then there is a chance
3219:../../../FreeRTOS/Source/tasks.c **** 					it is actually just blocked indefinitely - so really it should
3220:../../../FreeRTOS/Source/tasks.c **** 					be reported as being in the Blocked state. */
3221:../../../FreeRTOS/Source/tasks.c **** 					if( eState == eSuspended )
 4699              		.loc 1 3221 0 discriminator 3
 4700 00b4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4701 00b6 032B     		cmp	r3, #3
 4702 00b8 09D1     		bne	.L287
3222:../../../FreeRTOS/Source/tasks.c **** 					{
3223:../../../FreeRTOS/Source/tasks.c **** 						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 4703              		.loc 1 3223 0
 4704 00ba 7B69     		ldr	r3, [r7, #20]
 4705 00bc 9B6A     		ldr	r3, [r3, #40]
 4706 00be 002B     		cmp	r3, #0
 4707 00c0 05D0     		beq	.L287
3224:../../../FreeRTOS/Source/tasks.c **** 						{
3225:../../../FreeRTOS/Source/tasks.c **** 							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 4708              		.loc 1 3225 0
 4709 00c2 7B6A     		ldr	r3, [r7, #36]
 4710 00c4 5B01     		lsls	r3, r3, #5
 4711 00c6 FA68     		ldr	r2, [r7, #12]
 4712 00c8 1344     		add	r3, r3, r2
 4713 00ca 0222     		movs	r2, #2
 4714 00cc 1A73     		strb	r2, [r3, #12]
 4715              	.L287:
3226:../../../FreeRTOS/Source/tasks.c **** 						}
3227:../../../FreeRTOS/Source/tasks.c **** 					}
3228:../../../FreeRTOS/Source/tasks.c **** 				}
3229:../../../FreeRTOS/Source/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3230:../../../FreeRTOS/Source/tasks.c **** 
3231:../../../FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
3232:../../../FreeRTOS/Source/tasks.c **** 				{
3233:../../../FreeRTOS/Source/tasks.c **** 					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 4716              		.loc 1 3233 0
 4717 00ce 7B6A     		ldr	r3, [r7, #36]
 4718 00d0 5B01     		lsls	r3, r3, #5
 4719 00d2 FA68     		ldr	r2, [r7, #12]
 4720 00d4 1344     		add	r3, r3, r2
 4721 00d6 7A69     		ldr	r2, [r7, #20]
 4722 00d8 D26C     		ldr	r2, [r2, #76]
 4723 00da 5A61     		str	r2, [r3, #20]
3234:../../../FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/cc7uEwzT.s 			page 144


3235:../../../FreeRTOS/Source/tasks.c **** 				#else
3236:../../../FreeRTOS/Source/tasks.c **** 				{
3237:../../../FreeRTOS/Source/tasks.c **** 					pxTaskStatusArray[ uxTask ].uxBasePriority = 0;
3238:../../../FreeRTOS/Source/tasks.c **** 				}
3239:../../../FreeRTOS/Source/tasks.c **** 				#endif
3240:../../../FreeRTOS/Source/tasks.c **** 
3241:../../../FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1 )
3242:../../../FreeRTOS/Source/tasks.c **** 				{
3243:../../../FreeRTOS/Source/tasks.c **** 					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
3244:../../../FreeRTOS/Source/tasks.c **** 				}
3245:../../../FreeRTOS/Source/tasks.c **** 				#else
3246:../../../FreeRTOS/Source/tasks.c **** 				{
3247:../../../FreeRTOS/Source/tasks.c **** 					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = 0;
 4724              		.loc 1 3247 0
 4725 00dc 7B6A     		ldr	r3, [r7, #36]
 4726 00de 5B01     		lsls	r3, r3, #5
 4727 00e0 FA68     		ldr	r2, [r7, #12]
 4728 00e2 1344     		add	r3, r3, r2
 4729 00e4 0022     		movs	r2, #0
 4730 00e6 9A61     		str	r2, [r3, #24]
3248:../../../FreeRTOS/Source/tasks.c **** 				}
3249:../../../FreeRTOS/Source/tasks.c **** 				#endif
3250:../../../FreeRTOS/Source/tasks.c **** 
3251:../../../FreeRTOS/Source/tasks.c **** 				#if ( portSTACK_GROWTH > 0 )
3252:../../../FreeRTOS/Source/tasks.c **** 				{
3253:../../../FreeRTOS/Source/tasks.c **** 					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) p
3254:../../../FreeRTOS/Source/tasks.c **** 				}
3255:../../../FreeRTOS/Source/tasks.c **** 				#else
3256:../../../FreeRTOS/Source/tasks.c **** 				{
3257:../../../FreeRTOS/Source/tasks.c **** 					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) p
 4731              		.loc 1 3257 0
 4732 00e8 7B6A     		ldr	r3, [r7, #36]
 4733 00ea 5B01     		lsls	r3, r3, #5
 4734 00ec FA68     		ldr	r2, [r7, #12]
 4735 00ee D418     		adds	r4, r2, r3
 4736 00f0 7B69     		ldr	r3, [r7, #20]
 4737 00f2 1B6B     		ldr	r3, [r3, #48]
 4738 00f4 1846     		mov	r0, r3
 4739 00f6 FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 4740 00fa 0346     		mov	r3, r0
 4741 00fc A383     		strh	r3, [r4, #28]	@ movhi
3258:../../../FreeRTOS/Source/tasks.c **** 				}
3259:../../../FreeRTOS/Source/tasks.c **** 				#endif
3260:../../../FreeRTOS/Source/tasks.c **** 
3261:../../../FreeRTOS/Source/tasks.c **** 				uxTask++;
 4742              		.loc 1 3261 0
 4743 00fe 7B6A     		ldr	r3, [r7, #36]
 4744 0100 0133     		adds	r3, r3, #1
 4745 0102 7B62     		str	r3, [r7, #36]
3262:../../../FreeRTOS/Source/tasks.c **** 
3263:../../../FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 4746              		.loc 1 3263 0
 4747 0104 7A69     		ldr	r2, [r7, #20]
 4748 0106 FB69     		ldr	r3, [r7, #28]
 4749 0108 9A42     		cmp	r2, r3
 4750 010a 9CD1     		bne	.L288
 4751              	.L284:
ARM GAS  /tmp/cc7uEwzT.s 			page 145


3264:../../../FreeRTOS/Source/tasks.c **** 		}
3265:../../../FreeRTOS/Source/tasks.c **** 		else
3266:../../../FreeRTOS/Source/tasks.c **** 		{
3267:../../../FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3268:../../../FreeRTOS/Source/tasks.c **** 		}
3269:../../../FreeRTOS/Source/tasks.c **** 
3270:../../../FreeRTOS/Source/tasks.c **** 		return uxTask;
 4752              		.loc 1 3270 0
 4753 010c 7B6A     		ldr	r3, [r7, #36]
3271:../../../FreeRTOS/Source/tasks.c **** 	}
 4754              		.loc 1 3271 0
 4755 010e 1846     		mov	r0, r3
 4756 0110 2C37     		adds	r7, r7, #44
 4757              	.LCFI178:
 4758              		.cfi_def_cfa_offset 12
 4759 0112 BD46     		mov	sp, r7
 4760              	.LCFI179:
 4761              		.cfi_def_cfa_register 13
 4762              		@ sp needed
 4763 0114 90BD     		pop	{r4, r7, pc}
 4764              		.cfi_endproc
 4765              	.LFE39:
 4767 0116 00BF     		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
 4768              		.align	2
 4769              		.thumb
 4770              		.thumb_func
 4772              	prvTaskCheckFreeStackSpace:
 4773              	.LFB40:
3272:../../../FreeRTOS/Source/tasks.c **** 
3273:../../../FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3274:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3275:../../../FreeRTOS/Source/tasks.c **** 
3276:../../../FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3277:../../../FreeRTOS/Source/tasks.c **** 
3278:../../../FreeRTOS/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3279:../../../FreeRTOS/Source/tasks.c **** 	{
 4774              		.loc 1 3279 0
 4775              		.cfi_startproc
 4776              		@ args = 0, pretend = 0, frame = 16
 4777              		@ frame_needed = 1, uses_anonymous_args = 0
 4778              		@ link register save eliminated.
 4779 0000 80B4     		push	{r7}
 4780              	.LCFI180:
 4781              		.cfi_def_cfa_offset 4
 4782              		.cfi_offset 7, -4
 4783 0002 85B0     		sub	sp, sp, #20
 4784              	.LCFI181:
 4785              		.cfi_def_cfa_offset 24
 4786 0004 00AF     		add	r7, sp, #0
 4787              	.LCFI182:
 4788              		.cfi_def_cfa_register 7
 4789 0006 7860     		str	r0, [r7, #4]
3280:../../../FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
 4790              		.loc 1 3280 0
 4791 0008 0023     		movs	r3, #0
 4792 000a FB60     		str	r3, [r7, #12]
3281:../../../FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc7uEwzT.s 			page 146


3282:../../../FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 4793              		.loc 1 3282 0
 4794 000c 05E0     		b	.L291
 4795              	.L292:
3283:../../../FreeRTOS/Source/tasks.c **** 		{
3284:../../../FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 4796              		.loc 1 3284 0
 4797 000e 7B68     		ldr	r3, [r7, #4]
 4798 0010 0133     		adds	r3, r3, #1
 4799 0012 7B60     		str	r3, [r7, #4]
3285:../../../FreeRTOS/Source/tasks.c **** 			ulCount++;
 4800              		.loc 1 3285 0
 4801 0014 FB68     		ldr	r3, [r7, #12]
 4802 0016 0133     		adds	r3, r3, #1
 4803 0018 FB60     		str	r3, [r7, #12]
 4804              	.L291:
3282:../../../FreeRTOS/Source/tasks.c **** 		{
 4805              		.loc 1 3282 0
 4806 001a 7B68     		ldr	r3, [r7, #4]
 4807 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4808 001e A52B     		cmp	r3, #165
 4809 0020 F5D0     		beq	.L292
3286:../../../FreeRTOS/Source/tasks.c **** 		}
3287:../../../FreeRTOS/Source/tasks.c **** 
3288:../../../FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
 4810              		.loc 1 3288 0
 4811 0022 FB68     		ldr	r3, [r7, #12]
 4812 0024 9B08     		lsrs	r3, r3, #2
 4813 0026 FB60     		str	r3, [r7, #12]
3289:../../../FreeRTOS/Source/tasks.c **** 
3290:../../../FreeRTOS/Source/tasks.c **** 		return ( uint16_t ) ulCount;
 4814              		.loc 1 3290 0
 4815 0028 FB68     		ldr	r3, [r7, #12]
 4816 002a 9BB2     		uxth	r3, r3
3291:../../../FreeRTOS/Source/tasks.c **** 	}
 4817              		.loc 1 3291 0
 4818 002c 1846     		mov	r0, r3
 4819 002e 1437     		adds	r7, r7, #20
 4820              	.LCFI183:
 4821              		.cfi_def_cfa_offset 4
 4822 0030 BD46     		mov	sp, r7
 4823              	.LCFI184:
 4824              		.cfi_def_cfa_register 13
 4825              		@ sp needed
 4826 0032 5DF8047B 		ldr	r7, [sp], #4
 4827              	.LCFI185:
 4828              		.cfi_restore 7
 4829              		.cfi_def_cfa_offset 0
 4830 0036 7047     		bx	lr
 4831              		.cfi_endproc
 4832              	.LFE40:
 4834              		.section	.text.prvDeleteTCB,"ax",%progbits
 4835              		.align	2
 4836              		.thumb
 4837              		.thumb_func
 4839              	prvDeleteTCB:
 4840              	.LFB41:
ARM GAS  /tmp/cc7uEwzT.s 			page 147


3292:../../../FreeRTOS/Source/tasks.c **** 
3293:../../../FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3294:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3295:../../../FreeRTOS/Source/tasks.c **** 
3296:../../../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3297:../../../FreeRTOS/Source/tasks.c **** 
3298:../../../FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3299:../../../FreeRTOS/Source/tasks.c **** 	{
3300:../../../FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3301:../../../FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3302:../../../FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3303:../../../FreeRTOS/Source/tasks.c **** 
3304:../../../FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3305:../../../FreeRTOS/Source/tasks.c **** 
3306:../../../FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3307:../../../FreeRTOS/Source/tasks.c **** 		{
3308:../../../FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3309:../../../FreeRTOS/Source/tasks.c **** 		}
3310:../../../FreeRTOS/Source/tasks.c **** 		#else
3311:../../../FreeRTOS/Source/tasks.c **** 		{
3312:../../../FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3313:../../../FreeRTOS/Source/tasks.c **** 		}
3314:../../../FreeRTOS/Source/tasks.c **** 		#endif
3315:../../../FreeRTOS/Source/tasks.c **** 
3316:../../../FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3317:../../../FreeRTOS/Source/tasks.c **** 
3318:../../../FreeRTOS/Source/tasks.c **** 		return uxReturn;
3319:../../../FreeRTOS/Source/tasks.c **** 	}
3320:../../../FreeRTOS/Source/tasks.c **** 
3321:../../../FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3322:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3323:../../../FreeRTOS/Source/tasks.c **** 
3324:../../../FreeRTOS/Source/tasks.c **** #if (INCLUDE_pxTaskGetStackStart == 1)
3325:../../../FreeRTOS/Source/tasks.c **** 	uint8_t* pxTaskGetStackStart( TaskHandle_t xTask)
3326:../../../FreeRTOS/Source/tasks.c **** 	{
3327:../../../FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3328:../../../FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3329:../../../FreeRTOS/Source/tasks.c **** 
3330:../../../FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3331:../../../FreeRTOS/Source/tasks.c **** 		return ( uint8_t * ) pxTCB->pxStack;
3332:../../../FreeRTOS/Source/tasks.c **** 	}
3333:../../../FreeRTOS/Source/tasks.c **** 
3334:../../../FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_pxTaskGetStackStart */
3335:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3336:../../../FreeRTOS/Source/tasks.c **** 
3337:../../../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3338:../../../FreeRTOS/Source/tasks.c **** 
3339:../../../FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3340:../../../FreeRTOS/Source/tasks.c **** 	{
 4841              		.loc 1 3340 0
 4842              		.cfi_startproc
 4843              		@ args = 0, pretend = 0, frame = 8
 4844              		@ frame_needed = 1, uses_anonymous_args = 0
 4845 0000 80B5     		push	{r7, lr}
 4846              	.LCFI186:
 4847              		.cfi_def_cfa_offset 8
 4848              		.cfi_offset 7, -8
ARM GAS  /tmp/cc7uEwzT.s 			page 148


 4849              		.cfi_offset 14, -4
 4850 0002 82B0     		sub	sp, sp, #8
 4851              	.LCFI187:
 4852              		.cfi_def_cfa_offset 16
 4853 0004 00AF     		add	r7, sp, #0
 4854              	.LCFI188:
 4855              		.cfi_def_cfa_register 7
 4856 0006 7860     		str	r0, [r7, #4]
3341:../../../FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3342:../../../FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3343:../../../FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3344:../../../FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3345:../../../FreeRTOS/Source/tasks.c **** 
3346:../../../FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3347:../../../FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3348:../../../FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3349:../../../FreeRTOS/Source/tasks.c **** 		{
3350:../../../FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3351:../../../FreeRTOS/Source/tasks.c **** 		}
3352:../../../FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3353:../../../FreeRTOS/Source/tasks.c **** 
3354:../../../FreeRTOS/Source/tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
3355:../../../FreeRTOS/Source/tasks.c **** 		{
3356:../../../FreeRTOS/Source/tasks.c **** 			/* Only free the stack if it was allocated dynamically in the first
3357:../../../FreeRTOS/Source/tasks.c **** 			place. */
3358:../../../FreeRTOS/Source/tasks.c **** 			if( pxTCB->xUsingStaticallyAllocatedStack == pdFALSE )
3359:../../../FreeRTOS/Source/tasks.c **** 			{
3360:../../../FreeRTOS/Source/tasks.c **** 				vPortFreeAligned( pxTCB->pxStack );
3361:../../../FreeRTOS/Source/tasks.c **** 			}
3362:../../../FreeRTOS/Source/tasks.c **** 		}
3363:../../../FreeRTOS/Source/tasks.c **** 		#else
3364:../../../FreeRTOS/Source/tasks.c **** 		{
3365:../../../FreeRTOS/Source/tasks.c **** 			vPortFreeAligned( pxTCB->pxStack );
 4857              		.loc 1 3365 0
 4858 0008 7B68     		ldr	r3, [r7, #4]
 4859 000a 1B6B     		ldr	r3, [r3, #48]
 4860 000c 1846     		mov	r0, r3
 4861 000e FFF7FEFF 		bl	vPortFree
3366:../../../FreeRTOS/Source/tasks.c **** 		}
3367:../../../FreeRTOS/Source/tasks.c **** 		#endif
3368:../../../FreeRTOS/Source/tasks.c **** 
3369:../../../FreeRTOS/Source/tasks.c **** 		vPortFree( pxTCB );
 4862              		.loc 1 3369 0
 4863 0012 7868     		ldr	r0, [r7, #4]
 4864 0014 FFF7FEFF 		bl	vPortFree
3370:../../../FreeRTOS/Source/tasks.c **** 	}
 4865              		.loc 1 3370 0
 4866 0018 0837     		adds	r7, r7, #8
 4867              	.LCFI189:
 4868              		.cfi_def_cfa_offset 8
 4869 001a BD46     		mov	sp, r7
 4870              	.LCFI190:
 4871              		.cfi_def_cfa_register 13
 4872              		@ sp needed
 4873 001c 80BD     		pop	{r7, pc}
 4874              		.cfi_endproc
 4875              	.LFE41:
ARM GAS  /tmp/cc7uEwzT.s 			page 149


 4877 001e 00BF     		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 4878              		.align	2
 4879              		.thumb
 4880              		.thumb_func
 4882              	prvResetNextTaskUnblockTime:
 4883              	.LFB42:
3371:../../../FreeRTOS/Source/tasks.c **** 
3372:../../../FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3373:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3374:../../../FreeRTOS/Source/tasks.c **** 
3375:../../../FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3376:../../../FreeRTOS/Source/tasks.c **** {
 4884              		.loc 1 3376 0
 4885              		.cfi_startproc
 4886              		@ args = 0, pretend = 0, frame = 8
 4887              		@ frame_needed = 1, uses_anonymous_args = 0
 4888              		@ link register save eliminated.
 4889 0000 80B4     		push	{r7}
 4890              	.LCFI191:
 4891              		.cfi_def_cfa_offset 4
 4892              		.cfi_offset 7, -4
 4893 0002 83B0     		sub	sp, sp, #12
 4894              	.LCFI192:
 4895              		.cfi_def_cfa_offset 16
 4896 0004 00AF     		add	r7, sp, #0
 4897              	.LCFI193:
 4898              		.cfi_def_cfa_register 7
3377:../../../FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3378:../../../FreeRTOS/Source/tasks.c **** 
3379:../../../FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 4899              		.loc 1 3379 0
 4900 0006 0E4B     		ldr	r3, .L300
 4901 0008 1B68     		ldr	r3, [r3]
 4902 000a 1B68     		ldr	r3, [r3]
 4903 000c 002B     		cmp	r3, #0
 4904 000e 01D1     		bne	.L296
 4905              		.loc 1 3379 0 is_stmt 0 discriminator 1
 4906 0010 0123     		movs	r3, #1
 4907 0012 00E0     		b	.L297
 4908              	.L296:
 4909              		.loc 1 3379 0 discriminator 2
 4910 0014 0023     		movs	r3, #0
 4911              	.L297:
 4912              		.loc 1 3379 0 discriminator 4
 4913 0016 002B     		cmp	r3, #0
 4914 0018 04D0     		beq	.L298
3380:../../../FreeRTOS/Source/tasks.c **** 	{
3381:../../../FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3382:../../../FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3383:../../../FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3384:../../../FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3385:../../../FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 4915              		.loc 1 3385 0 is_stmt 1
 4916 001a 0A4B     		ldr	r3, .L300+4
 4917 001c 4FF0FF32 		mov	r2, #-1
 4918 0020 1A60     		str	r2, [r3]
 4919 0022 08E0     		b	.L295
ARM GAS  /tmp/cc7uEwzT.s 			page 150


 4920              	.L298:
3386:../../../FreeRTOS/Source/tasks.c **** 	}
3387:../../../FreeRTOS/Source/tasks.c **** 	else
3388:../../../FreeRTOS/Source/tasks.c **** 	{
3389:../../../FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3390:../../../FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3391:../../../FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3392:../../../FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3393:../../../FreeRTOS/Source/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 4921              		.loc 1 3393 0
 4922 0024 064B     		ldr	r3, .L300
 4923 0026 1B68     		ldr	r3, [r3]
 4924 0028 DB68     		ldr	r3, [r3, #12]
 4925 002a DB68     		ldr	r3, [r3, #12]
 4926 002c 7B60     		str	r3, [r7, #4]
3394:../../../FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 4927              		.loc 1 3394 0
 4928 002e 7B68     		ldr	r3, [r7, #4]
 4929 0030 5B68     		ldr	r3, [r3, #4]
 4930 0032 044A     		ldr	r2, .L300+4
 4931 0034 1360     		str	r3, [r2]
 4932              	.L295:
3395:../../../FreeRTOS/Source/tasks.c **** 	}
3396:../../../FreeRTOS/Source/tasks.c **** }
 4933              		.loc 1 3396 0
 4934 0036 0C37     		adds	r7, r7, #12
 4935              	.LCFI194:
 4936              		.cfi_def_cfa_offset 4
 4937 0038 BD46     		mov	sp, r7
 4938              	.LCFI195:
 4939              		.cfi_def_cfa_register 13
 4940              		@ sp needed
 4941 003a 5DF8047B 		ldr	r7, [sp], #4
 4942              	.LCFI196:
 4943              		.cfi_restore 7
 4944              		.cfi_def_cfa_offset 0
 4945 003e 7047     		bx	lr
 4946              	.L301:
 4947              		.align	2
 4948              	.L300:
 4949 0040 00000000 		.word	pxDelayedTaskList
 4950 0044 00000000 		.word	xNextTaskUnblockTime
 4951              		.cfi_endproc
 4952              	.LFE42:
 4954              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 4955              		.align	2
 4956              		.global	xTaskGetCurrentTaskHandle
 4957              		.thumb
 4958              		.thumb_func
 4960              	xTaskGetCurrentTaskHandle:
 4961              	.LFB43:
3397:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3398:../../../FreeRTOS/Source/tasks.c **** 
3399:../../../FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3400:../../../FreeRTOS/Source/tasks.c **** 
3401:../../../FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3402:../../../FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/cc7uEwzT.s 			page 151


 4962              		.loc 1 3402 0
 4963              		.cfi_startproc
 4964              		@ args = 0, pretend = 0, frame = 8
 4965              		@ frame_needed = 1, uses_anonymous_args = 0
 4966              		@ link register save eliminated.
 4967 0000 80B4     		push	{r7}
 4968              	.LCFI197:
 4969              		.cfi_def_cfa_offset 4
 4970              		.cfi_offset 7, -4
 4971 0002 83B0     		sub	sp, sp, #12
 4972              	.LCFI198:
 4973              		.cfi_def_cfa_offset 16
 4974 0004 00AF     		add	r7, sp, #0
 4975              	.LCFI199:
 4976              		.cfi_def_cfa_register 7
3403:../../../FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3404:../../../FreeRTOS/Source/tasks.c **** 
3405:../../../FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3406:../../../FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3407:../../../FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3408:../../../FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
 4977              		.loc 1 3408 0
 4978 0006 054B     		ldr	r3, .L304
 4979 0008 1B68     		ldr	r3, [r3]
 4980 000a 7B60     		str	r3, [r7, #4]
3409:../../../FreeRTOS/Source/tasks.c **** 
3410:../../../FreeRTOS/Source/tasks.c **** 		return xReturn;
 4981              		.loc 1 3410 0
 4982 000c 7B68     		ldr	r3, [r7, #4]
3411:../../../FreeRTOS/Source/tasks.c **** 	}
 4983              		.loc 1 3411 0
 4984 000e 1846     		mov	r0, r3
 4985 0010 0C37     		adds	r7, r7, #12
 4986              	.LCFI200:
 4987              		.cfi_def_cfa_offset 4
 4988 0012 BD46     		mov	sp, r7
 4989              	.LCFI201:
 4990              		.cfi_def_cfa_register 13
 4991              		@ sp needed
 4992 0014 5DF8047B 		ldr	r7, [sp], #4
 4993              	.LCFI202:
 4994              		.cfi_restore 7
 4995              		.cfi_def_cfa_offset 0
 4996 0018 7047     		bx	lr
 4997              	.L305:
 4998 001a 00BF     		.align	2
 4999              	.L304:
 5000 001c 00000000 		.word	pxCurrentTCB
 5001              		.cfi_endproc
 5002              	.LFE43:
 5004              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 5005              		.align	2
 5006              		.global	xTaskGetSchedulerState
 5007              		.thumb
 5008              		.thumb_func
 5010              	xTaskGetSchedulerState:
 5011              	.LFB44:
ARM GAS  /tmp/cc7uEwzT.s 			page 152


3412:../../../FreeRTOS/Source/tasks.c **** 
3413:../../../FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3414:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3415:../../../FreeRTOS/Source/tasks.c **** 
3416:../../../FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3417:../../../FreeRTOS/Source/tasks.c **** 
3418:../../../FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3419:../../../FreeRTOS/Source/tasks.c **** 	{
 5012              		.loc 1 3419 0
 5013              		.cfi_startproc
 5014              		@ args = 0, pretend = 0, frame = 8
 5015              		@ frame_needed = 1, uses_anonymous_args = 0
 5016              		@ link register save eliminated.
 5017 0000 80B4     		push	{r7}
 5018              	.LCFI203:
 5019              		.cfi_def_cfa_offset 4
 5020              		.cfi_offset 7, -4
 5021 0002 83B0     		sub	sp, sp, #12
 5022              	.LCFI204:
 5023              		.cfi_def_cfa_offset 16
 5024 0004 00AF     		add	r7, sp, #0
 5025              	.LCFI205:
 5026              		.cfi_def_cfa_register 7
3420:../../../FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3421:../../../FreeRTOS/Source/tasks.c **** 
3422:../../../FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
 5027              		.loc 1 3422 0
 5028 0006 0B4B     		ldr	r3, .L311
 5029 0008 1B68     		ldr	r3, [r3]
 5030 000a 002B     		cmp	r3, #0
 5031 000c 02D1     		bne	.L307
3423:../../../FreeRTOS/Source/tasks.c **** 		{
3424:../../../FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
 5032              		.loc 1 3424 0
 5033 000e 0123     		movs	r3, #1
 5034 0010 7B60     		str	r3, [r7, #4]
 5035 0012 08E0     		b	.L308
 5036              	.L307:
3425:../../../FreeRTOS/Source/tasks.c **** 		}
3426:../../../FreeRTOS/Source/tasks.c **** 		else
3427:../../../FreeRTOS/Source/tasks.c **** 		{
3428:../../../FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 5037              		.loc 1 3428 0
 5038 0014 084B     		ldr	r3, .L311+4
 5039 0016 1B68     		ldr	r3, [r3]
 5040 0018 002B     		cmp	r3, #0
 5041 001a 02D1     		bne	.L309
3429:../../../FreeRTOS/Source/tasks.c **** 			{
3430:../../../FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
 5042              		.loc 1 3430 0
 5043 001c 0223     		movs	r3, #2
 5044 001e 7B60     		str	r3, [r7, #4]
 5045 0020 01E0     		b	.L308
 5046              	.L309:
3431:../../../FreeRTOS/Source/tasks.c **** 			}
3432:../../../FreeRTOS/Source/tasks.c **** 			else
3433:../../../FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/cc7uEwzT.s 			page 153


3434:../../../FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
 5047              		.loc 1 3434 0
 5048 0022 0023     		movs	r3, #0
 5049 0024 7B60     		str	r3, [r7, #4]
 5050              	.L308:
3435:../../../FreeRTOS/Source/tasks.c **** 			}
3436:../../../FreeRTOS/Source/tasks.c **** 		}
3437:../../../FreeRTOS/Source/tasks.c **** 
3438:../../../FreeRTOS/Source/tasks.c **** 		return xReturn;
 5051              		.loc 1 3438 0
 5052 0026 7B68     		ldr	r3, [r7, #4]
3439:../../../FreeRTOS/Source/tasks.c **** 	}
 5053              		.loc 1 3439 0
 5054 0028 1846     		mov	r0, r3
 5055 002a 0C37     		adds	r7, r7, #12
 5056              	.LCFI206:
 5057              		.cfi_def_cfa_offset 4
 5058 002c BD46     		mov	sp, r7
 5059              	.LCFI207:
 5060              		.cfi_def_cfa_register 13
 5061              		@ sp needed
 5062 002e 5DF8047B 		ldr	r7, [sp], #4
 5063              	.LCFI208:
 5064              		.cfi_restore 7
 5065              		.cfi_def_cfa_offset 0
 5066 0032 7047     		bx	lr
 5067              	.L312:
 5068              		.align	2
 5069              	.L311:
 5070 0034 00000000 		.word	xSchedulerRunning
 5071 0038 00000000 		.word	uxSchedulerSuspended
 5072              		.cfi_endproc
 5073              	.LFE44:
 5075              		.section	.text.vTaskPriorityInherit,"ax",%progbits
 5076              		.align	2
 5077              		.global	vTaskPriorityInherit
 5078              		.thumb
 5079              		.thumb_func
 5081              	vTaskPriorityInherit:
 5082              	.LFB45:
3440:../../../FreeRTOS/Source/tasks.c **** 
3441:../../../FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3442:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3443:../../../FreeRTOS/Source/tasks.c **** 
3444:../../../FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3445:../../../FreeRTOS/Source/tasks.c **** 
3446:../../../FreeRTOS/Source/tasks.c **** 	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3447:../../../FreeRTOS/Source/tasks.c **** 	{
 5083              		.loc 1 3447 0
 5084              		.cfi_startproc
 5085              		@ args = 0, pretend = 0, frame = 16
 5086              		@ frame_needed = 1, uses_anonymous_args = 0
 5087 0000 80B5     		push	{r7, lr}
 5088              	.LCFI209:
 5089              		.cfi_def_cfa_offset 8
 5090              		.cfi_offset 7, -8
 5091              		.cfi_offset 14, -4
ARM GAS  /tmp/cc7uEwzT.s 			page 154


 5092 0002 84B0     		sub	sp, sp, #16
 5093              	.LCFI210:
 5094              		.cfi_def_cfa_offset 24
 5095 0004 00AF     		add	r7, sp, #0
 5096              	.LCFI211:
 5097              		.cfi_def_cfa_register 7
 5098 0006 7860     		str	r0, [r7, #4]
3448:../../../FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 5099              		.loc 1 3448 0
 5100 0008 7B68     		ldr	r3, [r7, #4]
 5101 000a FB60     		str	r3, [r7, #12]
3449:../../../FreeRTOS/Source/tasks.c **** 
3450:../../../FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3451:../../../FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL. */
3452:../../../FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 5102              		.loc 1 3452 0
 5103 000c 7B68     		ldr	r3, [r7, #4]
 5104 000e 002B     		cmp	r3, #0
 5105 0010 69D0     		beq	.L313
3453:../../../FreeRTOS/Source/tasks.c **** 		{
3454:../../../FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3455:../../../FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3456:../../../FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3457:../../../FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 5106              		.loc 1 3457 0
 5107 0012 FB68     		ldr	r3, [r7, #12]
 5108 0014 DA6A     		ldr	r2, [r3, #44]
 5109 0016 354B     		ldr	r3, .L322
 5110 0018 1B68     		ldr	r3, [r3]
 5111 001a DB6A     		ldr	r3, [r3, #44]
 5112 001c 9A42     		cmp	r2, r3
 5113 001e 62D2     		bcs	.L313
3458:../../../FreeRTOS/Source/tasks.c **** 			{
3459:../../../FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3460:../../../FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3461:../../../FreeRTOS/Source/tasks.c **** 				not	being used for anything else. */
3462:../../../FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 5114              		.loc 1 3462 0
 5115 0020 FB68     		ldr	r3, [r7, #12]
 5116 0022 9B69     		ldr	r3, [r3, #24]
 5117 0024 002B     		cmp	r3, #0
 5118 0026 06DB     		blt	.L315
3463:../../../FreeRTOS/Source/tasks.c **** 				{
3464:../../../FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
 5119              		.loc 1 3464 0
 5120 0028 304B     		ldr	r3, .L322
 5121 002a 1B68     		ldr	r3, [r3]
 5122 002c DB6A     		ldr	r3, [r3, #44]
 5123 002e C3F10702 		rsb	r2, r3, #7
 5124 0032 FB68     		ldr	r3, [r7, #12]
 5125 0034 9A61     		str	r2, [r3, #24]
 5126              	.L315:
3465:../../../FreeRTOS/Source/tasks.c **** 				}
3466:../../../FreeRTOS/Source/tasks.c **** 				else
3467:../../../FreeRTOS/Source/tasks.c **** 				{
3468:../../../FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3469:../../../FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/cc7uEwzT.s 			page 155


3470:../../../FreeRTOS/Source/tasks.c **** 
3471:../../../FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3472:../../../FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
3473:../../../FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericLis
 5127              		.loc 1 3473 0
 5128 0036 FB68     		ldr	r3, [r7, #12]
 5129 0038 5969     		ldr	r1, [r3, #20]
 5130 003a FB68     		ldr	r3, [r7, #12]
 5131 003c DA6A     		ldr	r2, [r3, #44]
 5132 003e 1346     		mov	r3, r2
 5133 0040 9B00     		lsls	r3, r3, #2
 5134 0042 1344     		add	r3, r3, r2
 5135 0044 9B00     		lsls	r3, r3, #2
 5136 0046 2A4A     		ldr	r2, .L322+4
 5137 0048 1344     		add	r3, r3, r2
 5138 004a 9942     		cmp	r1, r3
 5139 004c 01D1     		bne	.L316
 5140              		.loc 1 3473 0 is_stmt 0 discriminator 1
 5141 004e 0123     		movs	r3, #1
 5142 0050 00E0     		b	.L317
 5143              	.L316:
 5144              		.loc 1 3473 0 discriminator 2
 5145 0052 0023     		movs	r3, #0
 5146              	.L317:
 5147              		.loc 1 3473 0 discriminator 4
 5148 0054 002B     		cmp	r3, #0
 5149 0056 3CD0     		beq	.L318
3474:../../../FreeRTOS/Source/tasks.c **** 				{
3475:../../../FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 5150              		.loc 1 3475 0 is_stmt 1
 5151 0058 FB68     		ldr	r3, [r7, #12]
 5152 005a 0433     		adds	r3, r3, #4
 5153 005c 1846     		mov	r0, r3
 5154 005e FFF7FEFF 		bl	uxListRemove
 5155 0062 0346     		mov	r3, r0
 5156 0064 002B     		cmp	r3, #0
 5157 0066 15D1     		bne	.L319
3476:../../../FreeRTOS/Source/tasks.c **** 					{
3477:../../../FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 5158              		.loc 1 3477 0
 5159 0068 FB68     		ldr	r3, [r7, #12]
 5160 006a DA6A     		ldr	r2, [r3, #44]
 5161 006c 2049     		ldr	r1, .L322+4
 5162 006e 1346     		mov	r3, r2
 5163 0070 9B00     		lsls	r3, r3, #2
 5164 0072 1344     		add	r3, r3, r2
 5165 0074 9B00     		lsls	r3, r3, #2
 5166 0076 0B44     		add	r3, r3, r1
 5167 0078 1B68     		ldr	r3, [r3]
 5168 007a 002B     		cmp	r3, #0
 5169 007c 0AD1     		bne	.L319
 5170              		.loc 1 3477 0 is_stmt 0 discriminator 1
 5171 007e FB68     		ldr	r3, [r7, #12]
 5172 0080 DB6A     		ldr	r3, [r3, #44]
 5173 0082 1A46     		mov	r2, r3
 5174 0084 0123     		movs	r3, #1
 5175 0086 9340     		lsls	r3, r3, r2
ARM GAS  /tmp/cc7uEwzT.s 			page 156


 5176 0088 DA43     		mvns	r2, r3
 5177 008a 1A4B     		ldr	r3, .L322+8
 5178 008c 1B68     		ldr	r3, [r3]
 5179 008e 1340     		ands	r3, r3, r2
 5180 0090 184A     		ldr	r2, .L322+8
 5181 0092 1360     		str	r3, [r2]
 5182              	.L319:
3478:../../../FreeRTOS/Source/tasks.c **** 					}
3479:../../../FreeRTOS/Source/tasks.c **** 					else
3480:../../../FreeRTOS/Source/tasks.c **** 					{
3481:../../../FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3482:../../../FreeRTOS/Source/tasks.c **** 					}
3483:../../../FreeRTOS/Source/tasks.c **** 
3484:../../../FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3485:../../../FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 5183              		.loc 1 3485 0 is_stmt 1
 5184 0094 154B     		ldr	r3, .L322
 5185 0096 1B68     		ldr	r3, [r3]
 5186 0098 DA6A     		ldr	r2, [r3, #44]
 5187 009a FB68     		ldr	r3, [r7, #12]
 5188 009c DA62     		str	r2, [r3, #44]
3486:../../../FreeRTOS/Source/tasks.c **** 					prvReaddTaskToReadyList( pxTCB );
 5189              		.loc 1 3486 0
 5190 009e FB68     		ldr	r3, [r7, #12]
 5191 00a0 DB6A     		ldr	r3, [r3, #44]
 5192 00a2 1A46     		mov	r2, r3
 5193 00a4 0123     		movs	r3, #1
 5194 00a6 03FA02F2 		lsl	r2, r3, r2
 5195 00aa 124B     		ldr	r3, .L322+8
 5196 00ac 1B68     		ldr	r3, [r3]
 5197 00ae 1343     		orrs	r3, r3, r2
 5198 00b0 104A     		ldr	r2, .L322+8
 5199 00b2 1360     		str	r3, [r2]
 5200 00b4 FB68     		ldr	r3, [r7, #12]
 5201 00b6 DA6A     		ldr	r2, [r3, #44]
 5202 00b8 1346     		mov	r3, r2
 5203 00ba 9B00     		lsls	r3, r3, #2
 5204 00bc 1344     		add	r3, r3, r2
 5205 00be 9B00     		lsls	r3, r3, #2
 5206 00c0 0B4A     		ldr	r2, .L322+4
 5207 00c2 1A44     		add	r2, r2, r3
 5208 00c4 FB68     		ldr	r3, [r7, #12]
 5209 00c6 0433     		adds	r3, r3, #4
 5210 00c8 1046     		mov	r0, r2
 5211 00ca 1946     		mov	r1, r3
 5212 00cc FFF7FEFF 		bl	vListInsertEnd
 5213 00d0 04E0     		b	.L321
 5214              	.L318:
3487:../../../FreeRTOS/Source/tasks.c **** 				}
3488:../../../FreeRTOS/Source/tasks.c **** 				else
3489:../../../FreeRTOS/Source/tasks.c **** 				{
3490:../../../FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
3491:../../../FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 5215              		.loc 1 3491 0
 5216 00d2 064B     		ldr	r3, .L322
 5217 00d4 1B68     		ldr	r3, [r3]
 5218 00d6 DA6A     		ldr	r2, [r3, #44]
ARM GAS  /tmp/cc7uEwzT.s 			page 157


 5219 00d8 FB68     		ldr	r3, [r7, #12]
 5220 00da DA62     		str	r2, [r3, #44]
 5221              	.L321:
3492:../../../FreeRTOS/Source/tasks.c **** 				}
3493:../../../FreeRTOS/Source/tasks.c **** 
3494:../../../FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
 5222              		.loc 1 3494 0
 5223 00dc 7B68     		ldr	r3, [r7, #4]
 5224 00de 4920     		movs	r0, #73
 5225 00e0 1946     		mov	r1, r3
 5226 00e2 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32
 5227              	.L313:
3495:../../../FreeRTOS/Source/tasks.c **** 			}
3496:../../../FreeRTOS/Source/tasks.c **** 			else
3497:../../../FreeRTOS/Source/tasks.c **** 			{
3498:../../../FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3499:../../../FreeRTOS/Source/tasks.c **** 			}
3500:../../../FreeRTOS/Source/tasks.c **** 		}
3501:../../../FreeRTOS/Source/tasks.c **** 		else
3502:../../../FreeRTOS/Source/tasks.c **** 		{
3503:../../../FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3504:../../../FreeRTOS/Source/tasks.c **** 		}
3505:../../../FreeRTOS/Source/tasks.c **** 	}
 5228              		.loc 1 3505 0
 5229 00e6 1037     		adds	r7, r7, #16
 5230              	.LCFI212:
 5231              		.cfi_def_cfa_offset 8
 5232 00e8 BD46     		mov	sp, r7
 5233              	.LCFI213:
 5234              		.cfi_def_cfa_register 13
 5235              		@ sp needed
 5236 00ea 80BD     		pop	{r7, pc}
 5237              	.L323:
 5238              		.align	2
 5239              	.L322:
 5240 00ec 00000000 		.word	pxCurrentTCB
 5241 00f0 00000000 		.word	pxReadyTasksLists
 5242 00f4 00000000 		.word	uxTopReadyPriority
 5243              		.cfi_endproc
 5244              	.LFE45:
 5246              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 5247              		.align	2
 5248              		.global	xTaskPriorityDisinherit
 5249              		.thumb
 5250              		.thumb_func
 5252              	xTaskPriorityDisinherit:
 5253              	.LFB46:
3506:../../../FreeRTOS/Source/tasks.c **** 
3507:../../../FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3508:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3509:../../../FreeRTOS/Source/tasks.c **** 
3510:../../../FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3511:../../../FreeRTOS/Source/tasks.c **** 
3512:../../../FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3513:../../../FreeRTOS/Source/tasks.c **** 	{
 5254              		.loc 1 3513 0
 5255              		.cfi_startproc
ARM GAS  /tmp/cc7uEwzT.s 			page 158


 5256              		@ args = 0, pretend = 0, frame = 24
 5257              		@ frame_needed = 1, uses_anonymous_args = 0
 5258 0000 80B5     		push	{r7, lr}
 5259              	.LCFI214:
 5260              		.cfi_def_cfa_offset 8
 5261              		.cfi_offset 7, -8
 5262              		.cfi_offset 14, -4
 5263 0002 86B0     		sub	sp, sp, #24
 5264              	.LCFI215:
 5265              		.cfi_def_cfa_offset 32
 5266 0004 00AF     		add	r7, sp, #0
 5267              	.LCFI216:
 5268              		.cfi_def_cfa_register 7
 5269 0006 7860     		str	r0, [r7, #4]
3514:../../../FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 5270              		.loc 1 3514 0
 5271 0008 7B68     		ldr	r3, [r7, #4]
 5272 000a 3B61     		str	r3, [r7, #16]
3515:../../../FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 5273              		.loc 1 3515 0
 5274 000c 0023     		movs	r3, #0
 5275 000e 7B61     		str	r3, [r7, #20]
3516:../../../FreeRTOS/Source/tasks.c **** 
3517:../../../FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 5276              		.loc 1 3517 0
 5277 0010 7B68     		ldr	r3, [r7, #4]
 5278 0012 002B     		cmp	r3, #0
 5279 0014 73D0     		beq	.L325
3518:../../../FreeRTOS/Source/tasks.c **** 		{
3519:../../../FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3520:../../../FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3521:../../../FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3522:../../../FreeRTOS/Source/tasks.c **** 			be the running state task. */
3523:../../../FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
 5280              		.loc 1 3523 0
 5281 0016 3C4B     		ldr	r3, .L333
 5282 0018 1B68     		ldr	r3, [r3]
 5283 001a 3A69     		ldr	r2, [r7, #16]
 5284 001c 9A42     		cmp	r2, r3
 5285 001e 09D0     		beq	.L326
 5286              	.LBB161:
 5287              	.LBB162:
 215:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5288              		.loc 2 215 0 discriminator 1
 5289              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5290 0020 4FF05003 			mov r3, #80												
 5291 0024 83F31188 		msr basepri, r3											
 5292 0028 BFF36F8F 		isb														
 5293 002c BFF34F8F 		dsb														
 5294              	
 5295              	@ 0 "" 2
 5296              		.thumb
 5297 0030 FB60     		str	r3, [r7, #12]
 5298              	.L327:
 5299              	.LBE162:
 5300              	.LBE161:
 5301              		.loc 1 3523 0 discriminator 1
ARM GAS  /tmp/cc7uEwzT.s 			page 159


 5302 0032 FEE7     		b	.L327
 5303              	.L326:
3524:../../../FreeRTOS/Source/tasks.c **** 
3525:../../../FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 5304              		.loc 1 3525 0
 5305 0034 3B69     		ldr	r3, [r7, #16]
 5306 0036 1B6D     		ldr	r3, [r3, #80]
 5307 0038 002B     		cmp	r3, #0
 5308 003a 09D1     		bne	.L328
 5309              	.LBB163:
 5310              	.LBB164:
 215:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5311              		.loc 2 215 0 discriminator 1
 5312              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5313 003c 4FF05003 			mov r3, #80												
 5314 0040 83F31188 		msr basepri, r3											
 5315 0044 BFF36F8F 		isb														
 5316 0048 BFF34F8F 		dsb														
 5317              	
 5318              	@ 0 "" 2
 5319              		.thumb
 5320 004c BB60     		str	r3, [r7, #8]
 5321              	.L329:
 5322              	.LBE164:
 5323              	.LBE163:
 5324              		.loc 1 3525 0 discriminator 2
 5325 004e FEE7     		b	.L329
 5326              	.L328:
3526:../../../FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 5327              		.loc 1 3526 0
 5328 0050 3B69     		ldr	r3, [r7, #16]
 5329 0052 1B6D     		ldr	r3, [r3, #80]
 5330 0054 5A1E     		subs	r2, r3, #1
 5331 0056 3B69     		ldr	r3, [r7, #16]
 5332 0058 1A65     		str	r2, [r3, #80]
3527:../../../FreeRTOS/Source/tasks.c **** 
3528:../../../FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3529:../../../FreeRTOS/Source/tasks.c **** 			task? */
3530:../../../FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 5333              		.loc 1 3530 0
 5334 005a 3B69     		ldr	r3, [r7, #16]
 5335 005c DA6A     		ldr	r2, [r3, #44]
 5336 005e 3B69     		ldr	r3, [r7, #16]
 5337 0060 DB6C     		ldr	r3, [r3, #76]
 5338 0062 9A42     		cmp	r2, r3
 5339 0064 4BD0     		beq	.L325
3531:../../../FreeRTOS/Source/tasks.c **** 			{
3532:../../../FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3533:../../../FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 5340              		.loc 1 3533 0
 5341 0066 3B69     		ldr	r3, [r7, #16]
 5342 0068 1B6D     		ldr	r3, [r3, #80]
 5343 006a 002B     		cmp	r3, #0
 5344 006c 47D1     		bne	.L325
3534:../../../FreeRTOS/Source/tasks.c **** 				{
3535:../../../FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
3536:../../../FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
ARM GAS  /tmp/cc7uEwzT.s 			page 160


3537:../../../FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3538:../../../FreeRTOS/Source/tasks.c **** 					holding	task then it must be the running state task.  Remove
3539:../../../FreeRTOS/Source/tasks.c **** 					the	holding task from the ready	list. */
3540:../../../FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 5345              		.loc 1 3540 0
 5346 006e 3B69     		ldr	r3, [r7, #16]
 5347 0070 0433     		adds	r3, r3, #4
 5348 0072 1846     		mov	r0, r3
 5349 0074 FFF7FEFF 		bl	uxListRemove
 5350 0078 0346     		mov	r3, r0
 5351 007a 002B     		cmp	r3, #0
 5352 007c 15D1     		bne	.L330
3541:../../../FreeRTOS/Source/tasks.c **** 					{
3542:../../../FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 5353              		.loc 1 3542 0
 5354 007e 3B69     		ldr	r3, [r7, #16]
 5355 0080 DA6A     		ldr	r2, [r3, #44]
 5356 0082 2249     		ldr	r1, .L333+4
 5357 0084 1346     		mov	r3, r2
 5358 0086 9B00     		lsls	r3, r3, #2
 5359 0088 1344     		add	r3, r3, r2
 5360 008a 9B00     		lsls	r3, r3, #2
 5361 008c 0B44     		add	r3, r3, r1
 5362 008e 1B68     		ldr	r3, [r3]
 5363 0090 002B     		cmp	r3, #0
 5364 0092 0AD1     		bne	.L330
 5365              		.loc 1 3542 0 is_stmt 0 discriminator 1
 5366 0094 3B69     		ldr	r3, [r7, #16]
 5367 0096 DB6A     		ldr	r3, [r3, #44]
 5368 0098 1A46     		mov	r2, r3
 5369 009a 0123     		movs	r3, #1
 5370 009c 9340     		lsls	r3, r3, r2
 5371 009e DA43     		mvns	r2, r3
 5372 00a0 1B4B     		ldr	r3, .L333+8
 5373 00a2 1B68     		ldr	r3, [r3]
 5374 00a4 1340     		ands	r3, r3, r2
 5375 00a6 1A4A     		ldr	r2, .L333+8
 5376 00a8 1360     		str	r3, [r2]
 5377              	.L330:
3543:../../../FreeRTOS/Source/tasks.c **** 					}
3544:../../../FreeRTOS/Source/tasks.c **** 					else
3545:../../../FreeRTOS/Source/tasks.c **** 					{
3546:../../../FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3547:../../../FreeRTOS/Source/tasks.c **** 					}
3548:../../../FreeRTOS/Source/tasks.c **** 
3549:../../../FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
3550:../../../FreeRTOS/Source/tasks.c **** 					new	ready list. */
3551:../../../FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 5378              		.loc 1 3551 0 is_stmt 1
 5379 00aa 7B68     		ldr	r3, [r7, #4]
 5380 00ac 4A20     		movs	r0, #74
 5381 00ae 1946     		mov	r1, r3
 5382 00b0 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32
3552:../../../FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
 5383              		.loc 1 3552 0
 5384 00b4 3B69     		ldr	r3, [r7, #16]
 5385 00b6 DA6C     		ldr	r2, [r3, #76]
ARM GAS  /tmp/cc7uEwzT.s 			page 161


 5386 00b8 3B69     		ldr	r3, [r7, #16]
 5387 00ba DA62     		str	r2, [r3, #44]
3553:../../../FreeRTOS/Source/tasks.c **** 
3554:../../../FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3555:../../../FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
3556:../../../FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
3557:../../../FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
 5388              		.loc 1 3557 0
 5389 00bc 3B69     		ldr	r3, [r7, #16]
 5390 00be DB6A     		ldr	r3, [r3, #44]
 5391 00c0 C3F10702 		rsb	r2, r3, #7
 5392 00c4 3B69     		ldr	r3, [r7, #16]
 5393 00c6 9A61     		str	r2, [r3, #24]
3558:../../../FreeRTOS/Source/tasks.c **** 					prvReaddTaskToReadyList( pxTCB );
 5394              		.loc 1 3558 0
 5395 00c8 3B69     		ldr	r3, [r7, #16]
 5396 00ca DB6A     		ldr	r3, [r3, #44]
 5397 00cc 1A46     		mov	r2, r3
 5398 00ce 0123     		movs	r3, #1
 5399 00d0 03FA02F2 		lsl	r2, r3, r2
 5400 00d4 0E4B     		ldr	r3, .L333+8
 5401 00d6 1B68     		ldr	r3, [r3]
 5402 00d8 1343     		orrs	r3, r3, r2
 5403 00da 0D4A     		ldr	r2, .L333+8
 5404 00dc 1360     		str	r3, [r2]
 5405 00de 3B69     		ldr	r3, [r7, #16]
 5406 00e0 DA6A     		ldr	r2, [r3, #44]
 5407 00e2 1346     		mov	r3, r2
 5408 00e4 9B00     		lsls	r3, r3, #2
 5409 00e6 1344     		add	r3, r3, r2
 5410 00e8 9B00     		lsls	r3, r3, #2
 5411 00ea 084A     		ldr	r2, .L333+4
 5412 00ec 1A44     		add	r2, r2, r3
 5413 00ee 3B69     		ldr	r3, [r7, #16]
 5414 00f0 0433     		adds	r3, r3, #4
 5415 00f2 1046     		mov	r0, r2
 5416 00f4 1946     		mov	r1, r3
 5417 00f6 FFF7FEFF 		bl	vListInsertEnd
3559:../../../FreeRTOS/Source/tasks.c **** 
3560:../../../FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
3561:../../../FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
3562:../../../FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3563:../../../FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
3564:../../../FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
3565:../../../FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
3566:../../../FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
3567:../../../FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
3568:../../../FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 5418              		.loc 1 3568 0
 5419 00fa 0123     		movs	r3, #1
 5420 00fc 7B61     		str	r3, [r7, #20]
 5421              	.L325:
3569:../../../FreeRTOS/Source/tasks.c **** 				}
3570:../../../FreeRTOS/Source/tasks.c **** 				else
3571:../../../FreeRTOS/Source/tasks.c **** 				{
3572:../../../FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3573:../../../FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/cc7uEwzT.s 			page 162


3574:../../../FreeRTOS/Source/tasks.c **** 			}
3575:../../../FreeRTOS/Source/tasks.c **** 			else
3576:../../../FreeRTOS/Source/tasks.c **** 			{
3577:../../../FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3578:../../../FreeRTOS/Source/tasks.c **** 			}
3579:../../../FreeRTOS/Source/tasks.c **** 		}
3580:../../../FreeRTOS/Source/tasks.c **** 		else
3581:../../../FreeRTOS/Source/tasks.c **** 		{
3582:../../../FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3583:../../../FreeRTOS/Source/tasks.c **** 		}
3584:../../../FreeRTOS/Source/tasks.c **** 
3585:../../../FreeRTOS/Source/tasks.c **** 		return xReturn;
 5422              		.loc 1 3585 0
 5423 00fe 7B69     		ldr	r3, [r7, #20]
3586:../../../FreeRTOS/Source/tasks.c **** 	}
 5424              		.loc 1 3586 0
 5425 0100 1846     		mov	r0, r3
 5426 0102 1837     		adds	r7, r7, #24
 5427              	.LCFI217:
 5428              		.cfi_def_cfa_offset 8
 5429 0104 BD46     		mov	sp, r7
 5430              	.LCFI218:
 5431              		.cfi_def_cfa_register 13
 5432              		@ sp needed
 5433 0106 80BD     		pop	{r7, pc}
 5434              	.L334:
 5435              		.align	2
 5436              	.L333:
 5437 0108 00000000 		.word	pxCurrentTCB
 5438 010c 00000000 		.word	pxReadyTasksLists
 5439 0110 00000000 		.word	uxTopReadyPriority
 5440              		.cfi_endproc
 5441              	.LFE46:
 5443              		.section	.text.prvWriteNameToBuffer,"ax",%progbits
 5444              		.align	2
 5445              		.thumb
 5446              		.thumb_func
 5448              	prvWriteNameToBuffer:
 5449              	.LFB47:
3587:../../../FreeRTOS/Source/tasks.c **** 
3588:../../../FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3589:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3590:../../../FreeRTOS/Source/tasks.c **** 
3591:../../../FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3592:../../../FreeRTOS/Source/tasks.c **** 
3593:../../../FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
3594:../../../FreeRTOS/Source/tasks.c **** 	{
3595:../../../FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
3596:../../../FreeRTOS/Source/tasks.c **** 
3597:../../../FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3598:../../../FreeRTOS/Source/tasks.c **** 		{
3599:../../../FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
3600:../../../FreeRTOS/Source/tasks.c **** 
3601:../../../FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
3602:../../../FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
3603:../../../FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
3604:../../../FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
ARM GAS  /tmp/cc7uEwzT.s 			page 163


3605:../../../FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
3606:../../../FreeRTOS/Source/tasks.c **** 			critical section. */
3607:../../../FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
3608:../../../FreeRTOS/Source/tasks.c **** 			{
3609:../../../FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
3610:../../../FreeRTOS/Source/tasks.c **** 			}
3611:../../../FreeRTOS/Source/tasks.c **** 		}
3612:../../../FreeRTOS/Source/tasks.c **** 		else
3613:../../../FreeRTOS/Source/tasks.c **** 		{
3614:../../../FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3615:../../../FreeRTOS/Source/tasks.c **** 		}
3616:../../../FreeRTOS/Source/tasks.c **** 	}
3617:../../../FreeRTOS/Source/tasks.c **** 
3618:../../../FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3619:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3620:../../../FreeRTOS/Source/tasks.c **** 
3621:../../../FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3622:../../../FreeRTOS/Source/tasks.c **** 
3623:../../../FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
3624:../../../FreeRTOS/Source/tasks.c **** 	{
3625:../../../FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3626:../../../FreeRTOS/Source/tasks.c **** 		{
3627:../../../FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
3628:../../../FreeRTOS/Source/tasks.c **** 			{
3629:../../../FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
3630:../../../FreeRTOS/Source/tasks.c **** 
3631:../../../FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
3632:../../../FreeRTOS/Source/tasks.c **** 				{
3633:../../../FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
3634:../../../FreeRTOS/Source/tasks.c **** 				}
3635:../../../FreeRTOS/Source/tasks.c **** 				else
3636:../../../FreeRTOS/Source/tasks.c **** 				{
3637:../../../FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3638:../../../FreeRTOS/Source/tasks.c **** 				}
3639:../../../FreeRTOS/Source/tasks.c **** 			}
3640:../../../FreeRTOS/Source/tasks.c **** 			else
3641:../../../FreeRTOS/Source/tasks.c **** 			{
3642:../../../FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3643:../../../FreeRTOS/Source/tasks.c **** 			}
3644:../../../FreeRTOS/Source/tasks.c **** 		}
3645:../../../FreeRTOS/Source/tasks.c **** 		else
3646:../../../FreeRTOS/Source/tasks.c **** 		{
3647:../../../FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3648:../../../FreeRTOS/Source/tasks.c **** 		}
3649:../../../FreeRTOS/Source/tasks.c **** 	}
3650:../../../FreeRTOS/Source/tasks.c **** 
3651:../../../FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3652:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3653:../../../FreeRTOS/Source/tasks.c **** 
3654:../../../FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3655:../../../FreeRTOS/Source/tasks.c **** 
3656:../../../FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
3657:../../../FreeRTOS/Source/tasks.c **** 	{
 5450              		.loc 1 3657 0
 5451              		.cfi_startproc
 5452              		@ args = 0, pretend = 0, frame = 16
 5453              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/cc7uEwzT.s 			page 164


 5454 0000 80B5     		push	{r7, lr}
 5455              	.LCFI219:
 5456              		.cfi_def_cfa_offset 8
 5457              		.cfi_offset 7, -8
 5458              		.cfi_offset 14, -4
 5459 0002 84B0     		sub	sp, sp, #16
 5460              	.LCFI220:
 5461              		.cfi_def_cfa_offset 24
 5462 0004 00AF     		add	r7, sp, #0
 5463              	.LCFI221:
 5464              		.cfi_def_cfa_register 7
 5465 0006 7860     		str	r0, [r7, #4]
 5466 0008 3960     		str	r1, [r7]
3658:../../../FreeRTOS/Source/tasks.c **** 	size_t x;
3659:../../../FreeRTOS/Source/tasks.c **** 
3660:../../../FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
3661:../../../FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
 5467              		.loc 1 3661 0
 5468 000a 7868     		ldr	r0, [r7, #4]
 5469 000c 3968     		ldr	r1, [r7]
 5470 000e FFF7FEFF 		bl	strcpy
3662:../../../FreeRTOS/Source/tasks.c **** 
3663:../../../FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
3664:../../../FreeRTOS/Source/tasks.c **** 		printed out. */
3665:../../../FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 5471              		.loc 1 3665 0
 5472 0012 7868     		ldr	r0, [r7, #4]
 5473 0014 FFF7FEFF 		bl	strlen
 5474 0018 F860     		str	r0, [r7, #12]
 5475 001a 07E0     		b	.L336
 5476              	.L337:
3666:../../../FreeRTOS/Source/tasks.c **** 		{
3667:../../../FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
 5477              		.loc 1 3667 0 discriminator 3
 5478 001c 7A68     		ldr	r2, [r7, #4]
 5479 001e FB68     		ldr	r3, [r7, #12]
 5480 0020 1344     		add	r3, r3, r2
 5481 0022 2022     		movs	r2, #32
 5482 0024 1A70     		strb	r2, [r3]
3665:../../../FreeRTOS/Source/tasks.c **** 		{
 5483              		.loc 1 3665 0 discriminator 3
 5484 0026 FB68     		ldr	r3, [r7, #12]
 5485 0028 0133     		adds	r3, r3, #1
 5486 002a FB60     		str	r3, [r7, #12]
 5487              	.L336:
3665:../../../FreeRTOS/Source/tasks.c **** 		{
 5488              		.loc 1 3665 0 is_stmt 0 discriminator 1
 5489 002c FB68     		ldr	r3, [r7, #12]
 5490 002e 0E2B     		cmp	r3, #14
 5491 0030 F4D9     		bls	.L337
3668:../../../FreeRTOS/Source/tasks.c **** 		}
3669:../../../FreeRTOS/Source/tasks.c **** 
3670:../../../FreeRTOS/Source/tasks.c **** 		/* Terminate. */
3671:../../../FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = 0x00;
 5492              		.loc 1 3671 0 is_stmt 1
 5493 0032 7A68     		ldr	r2, [r7, #4]
 5494 0034 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/cc7uEwzT.s 			page 165


 5495 0036 1344     		add	r3, r3, r2
 5496 0038 0022     		movs	r2, #0
 5497 003a 1A70     		strb	r2, [r3]
3672:../../../FreeRTOS/Source/tasks.c **** 
3673:../../../FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
3674:../../../FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
 5498              		.loc 1 3674 0
 5499 003c 7A68     		ldr	r2, [r7, #4]
 5500 003e FB68     		ldr	r3, [r7, #12]
 5501 0040 1344     		add	r3, r3, r2
3675:../../../FreeRTOS/Source/tasks.c **** 	}
 5502              		.loc 1 3675 0
 5503 0042 1846     		mov	r0, r3
 5504 0044 1037     		adds	r7, r7, #16
 5505              	.LCFI222:
 5506              		.cfi_def_cfa_offset 8
 5507 0046 BD46     		mov	sp, r7
 5508              	.LCFI223:
 5509              		.cfi_def_cfa_register 13
 5510              		@ sp needed
 5511 0048 80BD     		pop	{r7, pc}
 5512              		.cfi_endproc
 5513              	.LFE47:
 5515 004a 00BF     		.section	.rodata
 5516 0005 000000   		.align	2
 5517              	.LC1:
 5518 0008 09256309 		.ascii	"\011%c\011%u\011%u\011%u\015\012\000"
 5518      25750925 
 5518      75092575 
 5518      0D0A00
 5519              		.section	.text.vTaskList,"ax",%progbits
 5520              		.align	2
 5521              		.global	vTaskList
 5522              		.thumb
 5523              		.thumb_func
 5525              	vTaskList:
 5526              	.LFB48:
3676:../../../FreeRTOS/Source/tasks.c **** 
3677:../../../FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
3678:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3679:../../../FreeRTOS/Source/tasks.c **** 
3680:../../../FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3681:../../../FreeRTOS/Source/tasks.c **** 
3682:../../../FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
3683:../../../FreeRTOS/Source/tasks.c **** 	{
 5527              		.loc 1 3683 0
 5528              		.cfi_startproc
 5529              		@ args = 0, pretend = 0, frame = 24
 5530              		@ frame_needed = 1, uses_anonymous_args = 0
 5531 0000 B0B5     		push	{r4, r5, r7, lr}
 5532              	.LCFI224:
 5533              		.cfi_def_cfa_offset 16
 5534              		.cfi_offset 4, -16
 5535              		.cfi_offset 5, -12
 5536              		.cfi_offset 7, -8
 5537              		.cfi_offset 14, -4
 5538 0002 88B0     		sub	sp, sp, #32
ARM GAS  /tmp/cc7uEwzT.s 			page 166


 5539              	.LCFI225:
 5540              		.cfi_def_cfa_offset 48
 5541 0004 02AF     		add	r7, sp, #8
 5542              	.LCFI226:
 5543              		.cfi_def_cfa 7, 40
 5544 0006 7860     		str	r0, [r7, #4]
3684:../../../FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
3685:../../../FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
3686:../../../FreeRTOS/Source/tasks.c **** 	char cStatus;
3687:../../../FreeRTOS/Source/tasks.c **** 
3688:../../../FreeRTOS/Source/tasks.c **** 		/*
3689:../../../FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
3690:../../../FreeRTOS/Source/tasks.c **** 		 *
3691:../../../FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
3692:../../../FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
3693:../../../FreeRTOS/Source/tasks.c **** 		 * scheduler.
3694:../../../FreeRTOS/Source/tasks.c **** 		 *
3695:../../../FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
3696:../../../FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
3697:../../../FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
3698:../../../FreeRTOS/Source/tasks.c **** 		 *
3699:../../../FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
3700:../../../FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
3701:../../../FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
3702:../../../FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
3703:../../../FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
3704:../../../FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
3705:../../../FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
3706:../../../FreeRTOS/Source/tasks.c **** 		 *
3707:../../../FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
3708:../../../FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
3709:../../../FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
3710:../../../FreeRTOS/Source/tasks.c **** 		 */
3711:../../../FreeRTOS/Source/tasks.c **** 
3712:../../../FreeRTOS/Source/tasks.c **** 
3713:../../../FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
3714:../../../FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
 5545              		.loc 1 3714 0
 5546 0008 7B68     		ldr	r3, [r7, #4]
 5547 000a 0022     		movs	r2, #0
 5548 000c 1A70     		strb	r2, [r3]
3715:../../../FreeRTOS/Source/tasks.c **** 
3716:../../../FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
3717:../../../FreeRTOS/Source/tasks.c **** 		function is executing. */
3718:../../../FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
 5549              		.loc 1 3718 0
 5550 000e 384B     		ldr	r3, .L350
 5551 0010 1B68     		ldr	r3, [r3]
 5552 0012 FB60     		str	r3, [r7, #12]
3719:../../../FreeRTOS/Source/tasks.c **** 
3720:../../../FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task. */
3721:../../../FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 5553              		.loc 1 3721 0
 5554 0014 364B     		ldr	r3, .L350
 5555 0016 1B68     		ldr	r3, [r3]
 5556 0018 5B01     		lsls	r3, r3, #5
 5557 001a 1846     		mov	r0, r3
ARM GAS  /tmp/cc7uEwzT.s 			page 167


 5558 001c FFF7FEFF 		bl	pvPortMalloc
 5559 0020 3861     		str	r0, [r7, #16]
3722:../../../FreeRTOS/Source/tasks.c **** 
3723:../../../FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
 5560              		.loc 1 3723 0
 5561 0022 3B69     		ldr	r3, [r7, #16]
 5562 0024 002B     		cmp	r3, #0
 5563 0026 60D0     		beq	.L339
3724:../../../FreeRTOS/Source/tasks.c **** 		{
3725:../../../FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
3726:../../../FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 5564              		.loc 1 3726 0
 5565 0028 FB68     		ldr	r3, [r7, #12]
 5566 002a 3869     		ldr	r0, [r7, #16]
 5567 002c 1946     		mov	r1, r3
 5568 002e 0022     		movs	r2, #0
 5569 0030 FFF7FEFF 		bl	uxTaskGetSystemState
 5570 0034 0346     		mov	r3, r0
 5571 0036 FB60     		str	r3, [r7, #12]
3727:../../../FreeRTOS/Source/tasks.c **** 
3728:../../../FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
3729:../../../FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
 5572              		.loc 1 3729 0
 5573 0038 0023     		movs	r3, #0
 5574 003a BB60     		str	r3, [r7, #8]
 5575 003c 4EE0     		b	.L341
 5576              	.L349:
3730:../../../FreeRTOS/Source/tasks.c **** 			{
3731:../../../FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
 5577              		.loc 1 3731 0
 5578 003e BB68     		ldr	r3, [r7, #8]
 5579 0040 5B01     		lsls	r3, r3, #5
 5580 0042 3A69     		ldr	r2, [r7, #16]
 5581 0044 1344     		add	r3, r3, r2
 5582 0046 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 5583 0048 013B     		subs	r3, r3, #1
 5584 004a 032B     		cmp	r3, #3
 5585 004c 16D8     		bhi	.L342
 5586 004e 01A2     		adr	r2, .L344
 5587 0050 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 5588              		.p2align 2
 5589              	.L344:
 5590 0054 65000000 		.word	.L343+1
 5591 0058 6B000000 		.word	.L345+1
 5592 005c 71000000 		.word	.L346+1
 5593 0060 77000000 		.word	.L347+1
 5594              		.p2align 1
 5595              	.L343:
3732:../../../FreeRTOS/Source/tasks.c **** 				{
3733:../../../FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
 5596              		.loc 1 3733 0
 5597 0064 5223     		movs	r3, #82
 5598 0066 FB75     		strb	r3, [r7, #23]
3734:../../../FreeRTOS/Source/tasks.c **** 										break;
 5599              		.loc 1 3734 0
 5600 0068 0BE0     		b	.L348
 5601              	.L345:
ARM GAS  /tmp/cc7uEwzT.s 			page 168


3735:../../../FreeRTOS/Source/tasks.c **** 
3736:../../../FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 5602              		.loc 1 3736 0
 5603 006a 4223     		movs	r3, #66
 5604 006c FB75     		strb	r3, [r7, #23]
3737:../../../FreeRTOS/Source/tasks.c **** 										break;
 5605              		.loc 1 3737 0
 5606 006e 08E0     		b	.L348
 5607              	.L346:
3738:../../../FreeRTOS/Source/tasks.c **** 
3739:../../../FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 5608              		.loc 1 3739 0
 5609 0070 5323     		movs	r3, #83
 5610 0072 FB75     		strb	r3, [r7, #23]
3740:../../../FreeRTOS/Source/tasks.c **** 										break;
 5611              		.loc 1 3740 0
 5612 0074 05E0     		b	.L348
 5613              	.L347:
3741:../../../FreeRTOS/Source/tasks.c **** 
3742:../../../FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
 5614              		.loc 1 3742 0
 5615 0076 4423     		movs	r3, #68
 5616 0078 FB75     		strb	r3, [r7, #23]
3743:../../../FreeRTOS/Source/tasks.c **** 										break;
 5617              		.loc 1 3743 0
 5618 007a 02E0     		b	.L348
 5619              	.L342:
3744:../../../FreeRTOS/Source/tasks.c **** 
3745:../../../FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
3746:../../../FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
3747:../../../FreeRTOS/Source/tasks.c **** 										cStatus = 0x00;
 5620              		.loc 1 3747 0
 5621 007c 0023     		movs	r3, #0
 5622 007e FB75     		strb	r3, [r7, #23]
3748:../../../FreeRTOS/Source/tasks.c **** 										break;
 5623              		.loc 1 3748 0
 5624 0080 00BF     		nop
 5625              	.L348:
3749:../../../FreeRTOS/Source/tasks.c **** 				}
3750:../../../FreeRTOS/Source/tasks.c **** 
3751:../../../FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
3752:../../../FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
3753:../../../FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 5626              		.loc 1 3753 0 discriminator 2
 5627 0082 BB68     		ldr	r3, [r7, #8]
 5628 0084 5B01     		lsls	r3, r3, #5
 5629 0086 3A69     		ldr	r2, [r7, #16]
 5630 0088 1344     		add	r3, r3, r2
 5631 008a 5B68     		ldr	r3, [r3, #4]
 5632 008c 7868     		ldr	r0, [r7, #4]
 5633 008e 1946     		mov	r1, r3
 5634 0090 FFF7FEFF 		bl	prvWriteNameToBuffer
 5635 0094 7860     		str	r0, [r7, #4]
3754:../../../FreeRTOS/Source/tasks.c **** 
3755:../../../FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
3756:../../../FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
 5636              		.loc 1 3756 0 discriminator 2
ARM GAS  /tmp/cc7uEwzT.s 			page 169


 5637 0096 FD7D     		ldrb	r5, [r7, #23]	@ zero_extendqisi2
 5638 0098 BB68     		ldr	r3, [r7, #8]
 5639 009a 5B01     		lsls	r3, r3, #5
 5640 009c 3A69     		ldr	r2, [r7, #16]
 5641 009e 1344     		add	r3, r3, r2
 5642 00a0 1C69     		ldr	r4, [r3, #16]
 5643 00a2 BB68     		ldr	r3, [r7, #8]
 5644 00a4 5B01     		lsls	r3, r3, #5
 5645 00a6 3A69     		ldr	r2, [r7, #16]
 5646 00a8 1344     		add	r3, r3, r2
 5647 00aa 9B8B     		ldrh	r3, [r3, #28]
 5648 00ac 1946     		mov	r1, r3
 5649 00ae BB68     		ldr	r3, [r7, #8]
 5650 00b0 5B01     		lsls	r3, r3, #5
 5651 00b2 3A69     		ldr	r2, [r7, #16]
 5652 00b4 1344     		add	r3, r3, r2
 5653 00b6 9B68     		ldr	r3, [r3, #8]
 5654 00b8 0091     		str	r1, [sp]
 5655 00ba 0193     		str	r3, [sp, #4]
 5656 00bc 7868     		ldr	r0, [r7, #4]
 5657 00be 0D49     		ldr	r1, .L350+4
 5658 00c0 2A46     		mov	r2, r5
 5659 00c2 2346     		mov	r3, r4
 5660 00c4 FFF7FEFF 		bl	sprintf
3757:../../../FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
 5661              		.loc 1 3757 0 discriminator 2
 5662 00c8 7868     		ldr	r0, [r7, #4]
 5663 00ca FFF7FEFF 		bl	strlen
 5664 00ce 0246     		mov	r2, r0
 5665 00d0 7B68     		ldr	r3, [r7, #4]
 5666 00d2 1344     		add	r3, r3, r2
 5667 00d4 7B60     		str	r3, [r7, #4]
3729:../../../FreeRTOS/Source/tasks.c **** 			{
 5668              		.loc 1 3729 0 discriminator 2
 5669 00d6 BB68     		ldr	r3, [r7, #8]
 5670 00d8 0133     		adds	r3, r3, #1
 5671 00da BB60     		str	r3, [r7, #8]
 5672              	.L341:
3729:../../../FreeRTOS/Source/tasks.c **** 			{
 5673              		.loc 1 3729 0 is_stmt 0 discriminator 1
 5674 00dc BA68     		ldr	r2, [r7, #8]
 5675 00de FB68     		ldr	r3, [r7, #12]
 5676 00e0 9A42     		cmp	r2, r3
 5677 00e2 ACD3     		bcc	.L349
3758:../../../FreeRTOS/Source/tasks.c **** 			}
3759:../../../FreeRTOS/Source/tasks.c **** 
3760:../../../FreeRTOS/Source/tasks.c **** 			/* Free the array again. */
3761:../../../FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
 5678              		.loc 1 3761 0 is_stmt 1
 5679 00e4 3869     		ldr	r0, [r7, #16]
 5680 00e6 FFF7FEFF 		bl	vPortFree
 5681              	.L339:
3762:../../../FreeRTOS/Source/tasks.c **** 		}
3763:../../../FreeRTOS/Source/tasks.c **** 		else
3764:../../../FreeRTOS/Source/tasks.c **** 		{
3765:../../../FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3766:../../../FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/cc7uEwzT.s 			page 170


3767:../../../FreeRTOS/Source/tasks.c **** 	}
 5682              		.loc 1 3767 0
 5683 00ea 1837     		adds	r7, r7, #24
 5684              	.LCFI227:
 5685              		.cfi_def_cfa_offset 16
 5686 00ec BD46     		mov	sp, r7
 5687              	.LCFI228:
 5688              		.cfi_def_cfa_register 13
 5689              		@ sp needed
 5690 00ee B0BD     		pop	{r4, r5, r7, pc}
 5691              	.L351:
 5692              		.align	2
 5693              	.L350:
 5694 00f0 00000000 		.word	uxCurrentNumberOfTasks
 5695 00f4 08000000 		.word	.LC1
 5696              		.cfi_endproc
 5697              	.LFE48:
 5699              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 5700              		.align	2
 5701              		.global	uxTaskResetEventItemValue
 5702              		.thumb
 5703              		.thumb_func
 5705              	uxTaskResetEventItemValue:
 5706              	.LFB49:
3768:../../../FreeRTOS/Source/tasks.c **** 
3769:../../../FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
3770:../../../FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
3771:../../../FreeRTOS/Source/tasks.c **** 
3772:../../../FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3773:../../../FreeRTOS/Source/tasks.c **** 
3774:../../../FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
3775:../../../FreeRTOS/Source/tasks.c **** 	{
3776:../../../FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
3777:../../../FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
3778:../../../FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
3779:../../../FreeRTOS/Source/tasks.c **** 
3780:../../../FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
3781:../../../FreeRTOS/Source/tasks.c **** 		{
3782:../../../FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
3783:../../../FreeRTOS/Source/tasks.c **** 		}
3784:../../../FreeRTOS/Source/tasks.c **** 		#endif
3785:../../../FreeRTOS/Source/tasks.c **** 
3786:../../../FreeRTOS/Source/tasks.c **** 		/*
3787:../../../FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
3788:../../../FreeRTOS/Source/tasks.c **** 		 *
3789:../../../FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
3790:../../../FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
3791:../../../FreeRTOS/Source/tasks.c **** 		 * scheduler.
3792:../../../FreeRTOS/Source/tasks.c **** 		 *
3793:../../../FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
3794:../../../FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
3795:../../../FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
3796:../../../FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
3797:../../../FreeRTOS/Source/tasks.c **** 		 *
3798:../../../FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
3799:../../../FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
3800:../../../FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
ARM GAS  /tmp/cc7uEwzT.s 			page 171


3801:../../../FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
3802:../../../FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
3803:../../../FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
3804:../../../FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
3805:../../../FreeRTOS/Source/tasks.c **** 		 *
3806:../../../FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
3807:../../../FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
3808:../../../FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
3809:../../../FreeRTOS/Source/tasks.c **** 		 */
3810:../../../FreeRTOS/Source/tasks.c **** 
3811:../../../FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
3812:../../../FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
3813:../../../FreeRTOS/Source/tasks.c **** 
3814:../../../FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
3815:../../../FreeRTOS/Source/tasks.c **** 		function is executing. */
3816:../../../FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
3817:../../../FreeRTOS/Source/tasks.c **** 
3818:../../../FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task. */
3819:../../../FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
3820:../../../FreeRTOS/Source/tasks.c **** 
3821:../../../FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
3822:../../../FreeRTOS/Source/tasks.c **** 		{
3823:../../../FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
3824:../../../FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
3825:../../../FreeRTOS/Source/tasks.c **** 
3826:../../../FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
3827:../../../FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
3828:../../../FreeRTOS/Source/tasks.c **** 
3829:../../../FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
3830:../../../FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0 )
3831:../../../FreeRTOS/Source/tasks.c **** 			{
3832:../../../FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
3833:../../../FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
3834:../../../FreeRTOS/Source/tasks.c **** 				{
3835:../../../FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
3836:../../../FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
3837:../../../FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
3838:../../../FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
3839:../../../FreeRTOS/Source/tasks.c **** 
3840:../../../FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
3841:../../../FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
3842:../../../FreeRTOS/Source/tasks.c **** 					easily. */
3843:../../../FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
3844:../../../FreeRTOS/Source/tasks.c **** 
3845:../../../FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
3846:../../../FreeRTOS/Source/tasks.c **** 					{
3847:../../../FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
3848:../../../FreeRTOS/Source/tasks.c **** 						{
3849:../../../FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
3850:../../../FreeRTOS/Source/tasks.c **** 						}
3851:../../../FreeRTOS/Source/tasks.c **** 						#else
3852:../../../FreeRTOS/Source/tasks.c **** 						{
3853:../../../FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
3854:../../../FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
3855:../../../FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
3856:../../../FreeRTOS/Source/tasks.c **** 						}
3857:../../../FreeRTOS/Source/tasks.c **** 						#endif
ARM GAS  /tmp/cc7uEwzT.s 			page 172


3858:../../../FreeRTOS/Source/tasks.c **** 					}
3859:../../../FreeRTOS/Source/tasks.c **** 					else
3860:../../../FreeRTOS/Source/tasks.c **** 					{
3861:../../../FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
3862:../../../FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
3863:../../../FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
3864:../../../FreeRTOS/Source/tasks.c **** 						{
3865:../../../FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
3866:../../../FreeRTOS/Source/tasks.c **** 						}
3867:../../../FreeRTOS/Source/tasks.c **** 						#else
3868:../../../FreeRTOS/Source/tasks.c **** 						{
3869:../../../FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
3870:../../../FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
3871:../../../FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
3872:../../../FreeRTOS/Source/tasks.c **** 						}
3873:../../../FreeRTOS/Source/tasks.c **** 						#endif
3874:../../../FreeRTOS/Source/tasks.c **** 					}
3875:../../../FreeRTOS/Source/tasks.c **** 
3876:../../../FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
3877:../../../FreeRTOS/Source/tasks.c **** 				}
3878:../../../FreeRTOS/Source/tasks.c **** 			}
3879:../../../FreeRTOS/Source/tasks.c **** 			else
3880:../../../FreeRTOS/Source/tasks.c **** 			{
3881:../../../FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3882:../../../FreeRTOS/Source/tasks.c **** 			}
3883:../../../FreeRTOS/Source/tasks.c **** 
3884:../../../FreeRTOS/Source/tasks.c **** 			/* Free the array again. */
3885:../../../FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
3886:../../../FreeRTOS/Source/tasks.c **** 		}
3887:../../../FreeRTOS/Source/tasks.c **** 		else
3888:../../../FreeRTOS/Source/tasks.c **** 		{
3889:../../../FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3890:../../../FreeRTOS/Source/tasks.c **** 		}
3891:../../../FreeRTOS/Source/tasks.c **** 	}
3892:../../../FreeRTOS/Source/tasks.c **** 
3893:../../../FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
3894:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3895:../../../FreeRTOS/Source/tasks.c **** 
3896:../../../FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
3897:../../../FreeRTOS/Source/tasks.c **** {
 5707              		.loc 1 3897 0
 5708              		.cfi_startproc
 5709              		@ args = 0, pretend = 0, frame = 8
 5710              		@ frame_needed = 1, uses_anonymous_args = 0
 5711              		@ link register save eliminated.
 5712 0000 80B4     		push	{r7}
 5713              	.LCFI229:
 5714              		.cfi_def_cfa_offset 4
 5715              		.cfi_offset 7, -4
 5716 0002 83B0     		sub	sp, sp, #12
 5717              	.LCFI230:
 5718              		.cfi_def_cfa_offset 16
 5719 0004 00AF     		add	r7, sp, #0
 5720              	.LCFI231:
 5721              		.cfi_def_cfa_register 7
3898:../../../FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
3899:../../../FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc7uEwzT.s 			page 173


3900:../../../FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 5722              		.loc 1 3900 0
 5723 0006 094B     		ldr	r3, .L354
 5724 0008 1B68     		ldr	r3, [r3]
 5725 000a 9B69     		ldr	r3, [r3, #24]
 5726 000c 7B60     		str	r3, [r7, #4]
3901:../../../FreeRTOS/Source/tasks.c **** 
3902:../../../FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
3903:../../../FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
3904:../../../FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
 5727              		.loc 1 3904 0
 5728 000e 074B     		ldr	r3, .L354
 5729 0010 1B68     		ldr	r3, [r3]
 5730 0012 064A     		ldr	r2, .L354
 5731 0014 1268     		ldr	r2, [r2]
 5732 0016 D26A     		ldr	r2, [r2, #44]
 5733 0018 C2F10702 		rsb	r2, r2, #7
 5734 001c 9A61     		str	r2, [r3, #24]
3905:../../../FreeRTOS/Source/tasks.c **** 
3906:../../../FreeRTOS/Source/tasks.c **** 	return uxReturn;
 5735              		.loc 1 3906 0
 5736 001e 7B68     		ldr	r3, [r7, #4]
3907:../../../FreeRTOS/Source/tasks.c **** }
 5737              		.loc 1 3907 0
 5738 0020 1846     		mov	r0, r3
 5739 0022 0C37     		adds	r7, r7, #12
 5740              	.LCFI232:
 5741              		.cfi_def_cfa_offset 4
 5742 0024 BD46     		mov	sp, r7
 5743              	.LCFI233:
 5744              		.cfi_def_cfa_register 13
 5745              		@ sp needed
 5746 0026 5DF8047B 		ldr	r7, [sp], #4
 5747              	.LCFI234:
 5748              		.cfi_restore 7
 5749              		.cfi_def_cfa_offset 0
 5750 002a 7047     		bx	lr
 5751              	.L355:
 5752              		.align	2
 5753              	.L354:
 5754 002c 00000000 		.word	pxCurrentTCB
 5755              		.cfi_endproc
 5756              	.LFE49:
 5758              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 5759              		.align	2
 5760              		.global	pvTaskIncrementMutexHeldCount
 5761              		.thumb
 5762              		.thumb_func
 5764              	pvTaskIncrementMutexHeldCount:
 5765              	.LFB50:
3908:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3909:../../../FreeRTOS/Source/tasks.c **** 
3910:../../../FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3911:../../../FreeRTOS/Source/tasks.c **** 
3912:../../../FreeRTOS/Source/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
3913:../../../FreeRTOS/Source/tasks.c **** 	{
 5766              		.loc 1 3913 0
ARM GAS  /tmp/cc7uEwzT.s 			page 174


 5767              		.cfi_startproc
 5768              		@ args = 0, pretend = 0, frame = 0
 5769              		@ frame_needed = 1, uses_anonymous_args = 0
 5770              		@ link register save eliminated.
 5771 0000 80B4     		push	{r7}
 5772              	.LCFI235:
 5773              		.cfi_def_cfa_offset 4
 5774              		.cfi_offset 7, -4
 5775 0002 00AF     		add	r7, sp, #0
 5776              	.LCFI236:
 5777              		.cfi_def_cfa_register 7
3914:../../../FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
3915:../../../FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
3916:../../../FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
 5778              		.loc 1 3916 0
 5779 0004 074B     		ldr	r3, .L359
 5780 0006 1B68     		ldr	r3, [r3]
 5781 0008 002B     		cmp	r3, #0
 5782 000a 04D0     		beq	.L357
3917:../../../FreeRTOS/Source/tasks.c **** 		{
3918:../../../FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
 5783              		.loc 1 3918 0
 5784 000c 054B     		ldr	r3, .L359
 5785 000e 1B68     		ldr	r3, [r3]
 5786 0010 1A6D     		ldr	r2, [r3, #80]
 5787 0012 0132     		adds	r2, r2, #1
 5788 0014 1A65     		str	r2, [r3, #80]
 5789              	.L357:
3919:../../../FreeRTOS/Source/tasks.c **** 		}
3920:../../../FreeRTOS/Source/tasks.c **** 
3921:../../../FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
 5790              		.loc 1 3921 0
 5791 0016 034B     		ldr	r3, .L359
 5792 0018 1B68     		ldr	r3, [r3]
3922:../../../FreeRTOS/Source/tasks.c **** 	}
 5793              		.loc 1 3922 0
 5794 001a 1846     		mov	r0, r3
 5795 001c BD46     		mov	sp, r7
 5796              	.LCFI237:
 5797              		.cfi_def_cfa_register 13
 5798              		@ sp needed
 5799 001e 5DF8047B 		ldr	r7, [sp], #4
 5800              	.LCFI238:
 5801              		.cfi_restore 7
 5802              		.cfi_def_cfa_offset 0
 5803 0022 7047     		bx	lr
 5804              	.L360:
 5805              		.align	2
 5806              	.L359:
 5807 0024 00000000 		.word	pxCurrentTCB
 5808              		.cfi_endproc
 5809              	.LFE50:
 5811              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 5812              		.align	2
 5813              		.global	ulTaskNotifyTake
 5814              		.thumb
 5815              		.thumb_func
ARM GAS  /tmp/cc7uEwzT.s 			page 175


 5817              	ulTaskNotifyTake:
 5818              	.LFB51:
3923:../../../FreeRTOS/Source/tasks.c **** 
3924:../../../FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3925:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3926:../../../FreeRTOS/Source/tasks.c **** 
3927:../../../FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
3928:../../../FreeRTOS/Source/tasks.c **** 
3929:../../../FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
3930:../../../FreeRTOS/Source/tasks.c **** 	{
 5819              		.loc 1 3930 0
 5820              		.cfi_startproc
 5821              		@ args = 0, pretend = 0, frame = 16
 5822              		@ frame_needed = 1, uses_anonymous_args = 0
 5823 0000 80B5     		push	{r7, lr}
 5824              	.LCFI239:
 5825              		.cfi_def_cfa_offset 8
 5826              		.cfi_offset 7, -8
 5827              		.cfi_offset 14, -4
 5828 0002 84B0     		sub	sp, sp, #16
 5829              	.LCFI240:
 5830              		.cfi_def_cfa_offset 24
 5831 0004 00AF     		add	r7, sp, #0
 5832              	.LCFI241:
 5833              		.cfi_def_cfa_register 7
 5834 0006 7860     		str	r0, [r7, #4]
 5835 0008 3960     		str	r1, [r7]
3931:../../../FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
3932:../../../FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
3933:../../../FreeRTOS/Source/tasks.c **** 
3934:../../../FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 5836              		.loc 1 3934 0
 5837 000a FFF7FEFF 		bl	vPortEnterCritical
3935:../../../FreeRTOS/Source/tasks.c **** 		{
3936:../../../FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
3937:../../../FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 5838              		.loc 1 3937 0
 5839 000e 374B     		ldr	r3, .L370
 5840 0010 1B68     		ldr	r3, [r3]
 5841 0012 5B6D     		ldr	r3, [r3, #84]
 5842 0014 002B     		cmp	r3, #0
 5843 0016 3ED1     		bne	.L362
3938:../../../FreeRTOS/Source/tasks.c **** 			{
3939:../../../FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
3940:../../../FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->eNotifyState = eWaitingNotification;
 5844              		.loc 1 3940 0
 5845 0018 344B     		ldr	r3, .L370
 5846 001a 1B68     		ldr	r3, [r3]
 5847 001c 0122     		movs	r2, #1
 5848 001e 83F85820 		strb	r2, [r3, #88]
3941:../../../FreeRTOS/Source/tasks.c **** 
3942:../../../FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 5849              		.loc 1 3942 0
 5850 0022 3B68     		ldr	r3, [r7]
 5851 0024 002B     		cmp	r3, #0
 5852 0026 36D0     		beq	.L362
3943:../../../FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/cc7uEwzT.s 			page 176


3944:../../../FreeRTOS/Source/tasks.c **** 					/* The task is going to block.  First it must be removed
3945:../../../FreeRTOS/Source/tasks.c **** 					from the ready list. */
3946:../../../FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 5853              		.loc 1 3946 0
 5854 0028 304B     		ldr	r3, .L370
 5855 002a 1B68     		ldr	r3, [r3]
 5856 002c 0433     		adds	r3, r3, #4
 5857 002e 1846     		mov	r0, r3
 5858 0030 FFF7FEFF 		bl	uxListRemove
 5859 0034 0346     		mov	r3, r0
 5860 0036 002B     		cmp	r3, #0
 5861 0038 0BD1     		bne	.L363
3947:../../../FreeRTOS/Source/tasks.c **** 					{
3948:../../../FreeRTOS/Source/tasks.c **** 						/* The current task must be in a ready list, so there is
3949:../../../FreeRTOS/Source/tasks.c **** 						no need to check, and the port reset macro can be called
3950:../../../FreeRTOS/Source/tasks.c **** 						directly. */
3951:../../../FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 5862              		.loc 1 3951 0
 5863 003a 2C4B     		ldr	r3, .L370
 5864 003c 1B68     		ldr	r3, [r3]
 5865 003e DB6A     		ldr	r3, [r3, #44]
 5866 0040 1A46     		mov	r2, r3
 5867 0042 0123     		movs	r3, #1
 5868 0044 9340     		lsls	r3, r3, r2
 5869 0046 DA43     		mvns	r2, r3
 5870 0048 294B     		ldr	r3, .L370+4
 5871 004a 1B68     		ldr	r3, [r3]
 5872 004c 1340     		ands	r3, r3, r2
 5873 004e 284A     		ldr	r2, .L370+4
 5874 0050 1360     		str	r3, [r2]
 5875              	.L363:
3952:../../../FreeRTOS/Source/tasks.c **** 					}
3953:../../../FreeRTOS/Source/tasks.c **** 					else
3954:../../../FreeRTOS/Source/tasks.c **** 					{
3955:../../../FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3956:../../../FreeRTOS/Source/tasks.c **** 					}
3957:../../../FreeRTOS/Source/tasks.c **** 
3958:../../../FreeRTOS/Source/tasks.c **** 					#if ( INCLUDE_vTaskSuspend == 1 )
3959:../../../FreeRTOS/Source/tasks.c **** 					{
3960:../../../FreeRTOS/Source/tasks.c **** 						if( xTicksToWait == portMAX_DELAY )
 5876              		.loc 1 3960 0
 5877 0052 3B68     		ldr	r3, [r7]
 5878 0054 B3F1FF3F 		cmp	r3, #-1
 5879 0058 0DD1     		bne	.L364
3961:../../../FreeRTOS/Source/tasks.c **** 						{
3962:../../../FreeRTOS/Source/tasks.c **** 							/* Add the task to the suspended task list instead
3963:../../../FreeRTOS/Source/tasks.c **** 							of a delayed task list to ensure the task is not
3964:../../../FreeRTOS/Source/tasks.c **** 							woken by a timing event.  It will block
3965:../../../FreeRTOS/Source/tasks.c **** 							indefinitely. */
3966:../../../FreeRTOS/Source/tasks.c **** 							traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 5880              		.loc 1 3966 0
 5881 005a 244B     		ldr	r3, .L370
 5882 005c 1B68     		ldr	r3, [r3]
 5883 005e 1846     		mov	r0, r3
 5884 0060 1B21     		movs	r1, #27
 5885 0062 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStopReady
3967:../../../FreeRTOS/Source/tasks.c **** 							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
ARM GAS  /tmp/cc7uEwzT.s 			page 177


 5886              		.loc 1 3967 0
 5887 0066 214B     		ldr	r3, .L370
 5888 0068 1B68     		ldr	r3, [r3]
 5889 006a 0433     		adds	r3, r3, #4
 5890 006c 2148     		ldr	r0, .L370+8
 5891 006e 1946     		mov	r1, r3
 5892 0070 FFF7FEFF 		bl	vListInsertEnd
 5893 0074 07E0     		b	.L365
 5894              	.L364:
3968:../../../FreeRTOS/Source/tasks.c **** 						}
3969:../../../FreeRTOS/Source/tasks.c **** 						else
3970:../../../FreeRTOS/Source/tasks.c **** 						{
3971:../../../FreeRTOS/Source/tasks.c **** 							/* Calculate the time at which the task should be
3972:../../../FreeRTOS/Source/tasks.c **** 							woken if no notification events occur.  This may
3973:../../../FreeRTOS/Source/tasks.c **** 							overflow but this doesn't matter, the scheduler will
3974:../../../FreeRTOS/Source/tasks.c **** 							handle it. */
3975:../../../FreeRTOS/Source/tasks.c **** 							xTimeToWake = xTickCount + xTicksToWait;
 5895              		.loc 1 3975 0
 5896 0076 204B     		ldr	r3, .L370+12
 5897 0078 1A68     		ldr	r2, [r3]
 5898 007a 3B68     		ldr	r3, [r7]
 5899 007c 1344     		add	r3, r3, r2
 5900 007e FB60     		str	r3, [r7, #12]
3976:../../../FreeRTOS/Source/tasks.c **** 							prvAddCurrentTaskToDelayedList( xTimeToWake );
 5901              		.loc 1 3976 0
 5902 0080 F868     		ldr	r0, [r7, #12]
 5903 0082 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 5904              	.L365:
3977:../../../FreeRTOS/Source/tasks.c **** 						}
3978:../../../FreeRTOS/Source/tasks.c **** 					}
3979:../../../FreeRTOS/Source/tasks.c **** 					#else /* INCLUDE_vTaskSuspend */
3980:../../../FreeRTOS/Source/tasks.c **** 					{
3981:../../../FreeRTOS/Source/tasks.c **** 							/* Calculate the time at which the task should be
3982:../../../FreeRTOS/Source/tasks.c **** 							woken if the event does not occur.  This may
3983:../../../FreeRTOS/Source/tasks.c **** 							overflow but this doesn't matter, the scheduler will
3984:../../../FreeRTOS/Source/tasks.c **** 							handle it. */
3985:../../../FreeRTOS/Source/tasks.c **** 							xTimeToWake = xTickCount + xTicksToWait;
3986:../../../FreeRTOS/Source/tasks.c **** 							prvAddCurrentTaskToDelayedList( xTimeToWake );
3987:../../../FreeRTOS/Source/tasks.c **** 					}
3988:../../../FreeRTOS/Source/tasks.c **** 					#endif /* INCLUDE_vTaskSuspend */
3989:../../../FreeRTOS/Source/tasks.c **** 
3990:../../../FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
3991:../../../FreeRTOS/Source/tasks.c **** 
3992:../../../FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
3993:../../../FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
3994:../../../FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
3995:../../../FreeRTOS/Source/tasks.c **** 					application code should ever do. */
3996:../../../FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 5905              		.loc 1 3996 0
 5906 0086 1D4B     		ldr	r3, .L370+16
 5907 0088 4FF08052 		mov	r2, #268435456
 5908 008c 1A60     		str	r2, [r3]
 5909              	@ 3996 "../../../FreeRTOS/Source/tasks.c" 1
 5910 008e BFF34F8F 		dsb
 5911              	@ 0 "" 2
 5912              	@ 3996 "../../../FreeRTOS/Source/tasks.c" 1
 5913 0092 BFF36F8F 		isb
ARM GAS  /tmp/cc7uEwzT.s 			page 178


 5914              	@ 0 "" 2
 5915              		.thumb
 5916              	.L362:
3997:../../../FreeRTOS/Source/tasks.c **** 				}
3998:../../../FreeRTOS/Source/tasks.c **** 				else
3999:../../../FreeRTOS/Source/tasks.c **** 				{
4000:../../../FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4001:../../../FreeRTOS/Source/tasks.c **** 				}
4002:../../../FreeRTOS/Source/tasks.c **** 			}
4003:../../../FreeRTOS/Source/tasks.c **** 			else
4004:../../../FreeRTOS/Source/tasks.c **** 			{
4005:../../../FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4006:../../../FreeRTOS/Source/tasks.c **** 			}
4007:../../../FreeRTOS/Source/tasks.c **** 		}
4008:../../../FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 5917              		.loc 1 4008 0
 5918 0096 FFF7FEFF 		bl	vPortExitCritical
4009:../../../FreeRTOS/Source/tasks.c **** 
4010:../../../FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 5919              		.loc 1 4010 0
 5920 009a FFF7FEFF 		bl	vPortEnterCritical
4011:../../../FreeRTOS/Source/tasks.c **** 		{
4012:../../../FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
 5921              		.loc 1 4012 0
 5922 009e 7B68     		ldr	r3, [r7, #4]
 5923 00a0 4220     		movs	r0, #66
 5924 00a2 1946     		mov	r1, r3
 5925 00a4 3A68     		ldr	r2, [r7]
 5926 00a6 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x2
4013:../../../FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 5927              		.loc 1 4013 0
 5928 00aa 104B     		ldr	r3, .L370
 5929 00ac 1B68     		ldr	r3, [r3]
 5930 00ae 5B6D     		ldr	r3, [r3, #84]
 5931 00b0 BB60     		str	r3, [r7, #8]
4014:../../../FreeRTOS/Source/tasks.c **** 
4015:../../../FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
 5932              		.loc 1 4015 0
 5933 00b2 BB68     		ldr	r3, [r7, #8]
 5934 00b4 002B     		cmp	r3, #0
 5935 00b6 0CD0     		beq	.L366
4016:../../../FreeRTOS/Source/tasks.c **** 			{
4017:../../../FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
 5936              		.loc 1 4017 0
 5937 00b8 7B68     		ldr	r3, [r7, #4]
 5938 00ba 002B     		cmp	r3, #0
 5939 00bc 04D0     		beq	.L367
4018:../../../FreeRTOS/Source/tasks.c **** 				{
4019:../../../FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
 5940              		.loc 1 4019 0
 5941 00be 0B4B     		ldr	r3, .L370
 5942 00c0 1B68     		ldr	r3, [r3]
 5943 00c2 0022     		movs	r2, #0
 5944 00c4 5A65     		str	r2, [r3, #84]
 5945 00c6 04E0     		b	.L366
 5946              	.L367:
4020:../../../FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/cc7uEwzT.s 			page 179


4021:../../../FreeRTOS/Source/tasks.c **** 				else
4022:../../../FreeRTOS/Source/tasks.c **** 				{
4023:../../../FreeRTOS/Source/tasks.c **** 					( pxCurrentTCB->ulNotifiedValue )--;
 5947              		.loc 1 4023 0
 5948 00c8 084B     		ldr	r3, .L370
 5949 00ca 1B68     		ldr	r3, [r3]
 5950 00cc 5A6D     		ldr	r2, [r3, #84]
 5951 00ce 013A     		subs	r2, r2, #1
 5952 00d0 5A65     		str	r2, [r3, #84]
 5953              	.L366:
4024:../../../FreeRTOS/Source/tasks.c **** 				}
4025:../../../FreeRTOS/Source/tasks.c **** 			}
4026:../../../FreeRTOS/Source/tasks.c **** 			else
4027:../../../FreeRTOS/Source/tasks.c **** 			{
4028:../../../FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4029:../../../FreeRTOS/Source/tasks.c **** 			}
4030:../../../FreeRTOS/Source/tasks.c **** 
4031:../../../FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 5954              		.loc 1 4031 0
 5955 00d2 064B     		ldr	r3, .L370
 5956 00d4 1B68     		ldr	r3, [r3]
 5957 00d6 0022     		movs	r2, #0
 5958 00d8 83F85820 		strb	r2, [r3, #88]
4032:../../../FreeRTOS/Source/tasks.c **** 		}
4033:../../../FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 5959              		.loc 1 4033 0
 5960 00dc FFF7FEFF 		bl	vPortExitCritical
4034:../../../FreeRTOS/Source/tasks.c **** 
4035:../../../FreeRTOS/Source/tasks.c **** 		return ulReturn;
 5961              		.loc 1 4035 0
 5962 00e0 BB68     		ldr	r3, [r7, #8]
4036:../../../FreeRTOS/Source/tasks.c **** 	}
 5963              		.loc 1 4036 0
 5964 00e2 1846     		mov	r0, r3
 5965 00e4 1037     		adds	r7, r7, #16
 5966              	.LCFI242:
 5967              		.cfi_def_cfa_offset 8
 5968 00e6 BD46     		mov	sp, r7
 5969              	.LCFI243:
 5970              		.cfi_def_cfa_register 13
 5971              		@ sp needed
 5972 00e8 80BD     		pop	{r7, pc}
 5973              	.L371:
 5974 00ea 00BF     		.align	2
 5975              	.L370:
 5976 00ec 00000000 		.word	pxCurrentTCB
 5977 00f0 00000000 		.word	uxTopReadyPriority
 5978 00f4 00000000 		.word	xSuspendedTaskList
 5979 00f8 00000000 		.word	xTickCount
 5980 00fc 04ED00E0 		.word	-536810236
 5981              		.cfi_endproc
 5982              	.LFE51:
 5984              		.section	.text.xTaskNotifyWait,"ax",%progbits
 5985              		.align	2
 5986              		.global	xTaskNotifyWait
 5987              		.thumb
 5988              		.thumb_func
ARM GAS  /tmp/cc7uEwzT.s 			page 180


 5990              	xTaskNotifyWait:
 5991              	.LFB52:
4037:../../../FreeRTOS/Source/tasks.c **** 
4038:../../../FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4039:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4040:../../../FreeRTOS/Source/tasks.c **** 
4041:../../../FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4042:../../../FreeRTOS/Source/tasks.c **** 
4043:../../../FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4044:../../../FreeRTOS/Source/tasks.c **** 	{
 5992              		.loc 1 4044 0
 5993              		.cfi_startproc
 5994              		@ args = 0, pretend = 0, frame = 24
 5995              		@ frame_needed = 1, uses_anonymous_args = 0
 5996 0000 90B5     		push	{r4, r7, lr}
 5997              	.LCFI244:
 5998              		.cfi_def_cfa_offset 12
 5999              		.cfi_offset 4, -12
 6000              		.cfi_offset 7, -8
 6001              		.cfi_offset 14, -4
 6002 0002 89B0     		sub	sp, sp, #36
 6003              	.LCFI245:
 6004              		.cfi_def_cfa_offset 48
 6005 0004 02AF     		add	r7, sp, #8
 6006              	.LCFI246:
 6007              		.cfi_def_cfa 7, 40
 6008 0006 F860     		str	r0, [r7, #12]
 6009 0008 B960     		str	r1, [r7, #8]
 6010 000a 7A60     		str	r2, [r7, #4]
 6011 000c 3B60     		str	r3, [r7]
4045:../../../FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
4046:../../../FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4047:../../../FreeRTOS/Source/tasks.c **** 
4048:../../../FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 6012              		.loc 1 4048 0
 6013 000e FFF7FEFF 		bl	vPortEnterCritical
4049:../../../FreeRTOS/Source/tasks.c **** 		{
4050:../../../FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4051:../../../FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->eNotifyState != eNotified )
 6014              		.loc 1 4051 0
 6015 0012 404B     		ldr	r3, .L381
 6016 0014 1B68     		ldr	r3, [r3]
 6017 0016 93F85830 		ldrb	r3, [r3, #88]
 6018 001a DBB2     		uxtb	r3, r3
 6019 001c 022B     		cmp	r3, #2
 6020 001e 45D0     		beq	.L373
4052:../../../FreeRTOS/Source/tasks.c **** 			{
4053:../../../FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4054:../../../FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4055:../../../FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4056:../../../FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 6021              		.loc 1 4056 0
 6022 0020 3C4B     		ldr	r3, .L381
 6023 0022 1B68     		ldr	r3, [r3]
 6024 0024 596D     		ldr	r1, [r3, #84]
 6025 0026 FA68     		ldr	r2, [r7, #12]
 6026 0028 D243     		mvns	r2, r2
ARM GAS  /tmp/cc7uEwzT.s 			page 181


 6027 002a 0A40     		ands	r2, r2, r1
 6028 002c 5A65     		str	r2, [r3, #84]
4057:../../../FreeRTOS/Source/tasks.c **** 
4058:../../../FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4059:../../../FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->eNotifyState = eWaitingNotification;
 6029              		.loc 1 4059 0
 6030 002e 394B     		ldr	r3, .L381
 6031 0030 1B68     		ldr	r3, [r3]
 6032 0032 0122     		movs	r2, #1
 6033 0034 83F85820 		strb	r2, [r3, #88]
4060:../../../FreeRTOS/Source/tasks.c **** 
4061:../../../FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 6034              		.loc 1 4061 0
 6035 0038 3B68     		ldr	r3, [r7]
 6036 003a 002B     		cmp	r3, #0
 6037 003c 36D0     		beq	.L373
4062:../../../FreeRTOS/Source/tasks.c **** 				{
4063:../../../FreeRTOS/Source/tasks.c **** 					/* The task is going to block.  First it must be removed
4064:../../../FreeRTOS/Source/tasks.c **** 					from the	ready list. */
4065:../../../FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 6038              		.loc 1 4065 0
 6039 003e 354B     		ldr	r3, .L381
 6040 0040 1B68     		ldr	r3, [r3]
 6041 0042 0433     		adds	r3, r3, #4
 6042 0044 1846     		mov	r0, r3
 6043 0046 FFF7FEFF 		bl	uxListRemove
 6044 004a 0346     		mov	r3, r0
 6045 004c 002B     		cmp	r3, #0
 6046 004e 0BD1     		bne	.L374
4066:../../../FreeRTOS/Source/tasks.c **** 					{
4067:../../../FreeRTOS/Source/tasks.c **** 						/* The current task must be in a ready list, so there is
4068:../../../FreeRTOS/Source/tasks.c **** 						no need to check, and the port reset macro can be called
4069:../../../FreeRTOS/Source/tasks.c **** 						directly. */
4070:../../../FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 6047              		.loc 1 4070 0
 6048 0050 304B     		ldr	r3, .L381
 6049 0052 1B68     		ldr	r3, [r3]
 6050 0054 DB6A     		ldr	r3, [r3, #44]
 6051 0056 1A46     		mov	r2, r3
 6052 0058 0123     		movs	r3, #1
 6053 005a 9340     		lsls	r3, r3, r2
 6054 005c DA43     		mvns	r2, r3
 6055 005e 2E4B     		ldr	r3, .L381+4
 6056 0060 1B68     		ldr	r3, [r3]
 6057 0062 1340     		ands	r3, r3, r2
 6058 0064 2C4A     		ldr	r2, .L381+4
 6059 0066 1360     		str	r3, [r2]
 6060              	.L374:
4071:../../../FreeRTOS/Source/tasks.c **** 					}
4072:../../../FreeRTOS/Source/tasks.c **** 					else
4073:../../../FreeRTOS/Source/tasks.c **** 					{
4074:../../../FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4075:../../../FreeRTOS/Source/tasks.c **** 					}
4076:../../../FreeRTOS/Source/tasks.c **** 
4077:../../../FreeRTOS/Source/tasks.c **** 					#if ( INCLUDE_vTaskSuspend == 1 )
4078:../../../FreeRTOS/Source/tasks.c **** 					{
4079:../../../FreeRTOS/Source/tasks.c **** 						if( xTicksToWait == portMAX_DELAY )
ARM GAS  /tmp/cc7uEwzT.s 			page 182


 6061              		.loc 1 4079 0
 6062 0068 3B68     		ldr	r3, [r7]
 6063 006a B3F1FF3F 		cmp	r3, #-1
 6064 006e 0DD1     		bne	.L375
4080:../../../FreeRTOS/Source/tasks.c **** 						{
4081:../../../FreeRTOS/Source/tasks.c **** 							/* Add the task to the suspended task list instead
4082:../../../FreeRTOS/Source/tasks.c **** 							of a delayed task list to ensure the task is not
4083:../../../FreeRTOS/Source/tasks.c **** 							woken by a timing event.  It will block
4084:../../../FreeRTOS/Source/tasks.c **** 							indefinitely. */
4085:../../../FreeRTOS/Source/tasks.c **** 							traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 6065              		.loc 1 4085 0
 6066 0070 284B     		ldr	r3, .L381
 6067 0072 1B68     		ldr	r3, [r3]
 6068 0074 1846     		mov	r0, r3
 6069 0076 1B21     		movs	r1, #27
 6070 0078 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStopReady
4086:../../../FreeRTOS/Source/tasks.c **** 							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 6071              		.loc 1 4086 0
 6072 007c 254B     		ldr	r3, .L381
 6073 007e 1B68     		ldr	r3, [r3]
 6074 0080 0433     		adds	r3, r3, #4
 6075 0082 2648     		ldr	r0, .L381+8
 6076 0084 1946     		mov	r1, r3
 6077 0086 FFF7FEFF 		bl	vListInsertEnd
 6078 008a 07E0     		b	.L376
 6079              	.L375:
4087:../../../FreeRTOS/Source/tasks.c **** 						}
4088:../../../FreeRTOS/Source/tasks.c **** 						else
4089:../../../FreeRTOS/Source/tasks.c **** 						{
4090:../../../FreeRTOS/Source/tasks.c **** 							/* Calculate the time at which the task should be
4091:../../../FreeRTOS/Source/tasks.c **** 							woken if no notification events occur.  This may
4092:../../../FreeRTOS/Source/tasks.c **** 							overflow but this doesn't matter, the scheduler will
4093:../../../FreeRTOS/Source/tasks.c **** 							handle it. */
4094:../../../FreeRTOS/Source/tasks.c **** 							xTimeToWake = xTickCount + xTicksToWait;
 6080              		.loc 1 4094 0
 6081 008c 244B     		ldr	r3, .L381+12
 6082 008e 1A68     		ldr	r2, [r3]
 6083 0090 3B68     		ldr	r3, [r7]
 6084 0092 1344     		add	r3, r3, r2
 6085 0094 3B61     		str	r3, [r7, #16]
4095:../../../FreeRTOS/Source/tasks.c **** 							prvAddCurrentTaskToDelayedList( xTimeToWake );
 6086              		.loc 1 4095 0
 6087 0096 3869     		ldr	r0, [r7, #16]
 6088 0098 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 6089              	.L376:
4096:../../../FreeRTOS/Source/tasks.c **** 						}
4097:../../../FreeRTOS/Source/tasks.c **** 					}
4098:../../../FreeRTOS/Source/tasks.c **** 					#else /* INCLUDE_vTaskSuspend */
4099:../../../FreeRTOS/Source/tasks.c **** 					{
4100:../../../FreeRTOS/Source/tasks.c **** 							/* Calculate the time at which the task should be
4101:../../../FreeRTOS/Source/tasks.c **** 							woken if the event does not occur.  This may
4102:../../../FreeRTOS/Source/tasks.c **** 							overflow but this doesn't matter, the scheduler will
4103:../../../FreeRTOS/Source/tasks.c **** 							handle it. */
4104:../../../FreeRTOS/Source/tasks.c **** 							xTimeToWake = xTickCount + xTicksToWait;
4105:../../../FreeRTOS/Source/tasks.c **** 							prvAddCurrentTaskToDelayedList( xTimeToWake );
4106:../../../FreeRTOS/Source/tasks.c **** 					}
4107:../../../FreeRTOS/Source/tasks.c **** 					#endif /* INCLUDE_vTaskSuspend */
ARM GAS  /tmp/cc7uEwzT.s 			page 183


4108:../../../FreeRTOS/Source/tasks.c **** 
4109:../../../FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4110:../../../FreeRTOS/Source/tasks.c **** 
4111:../../../FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4112:../../../FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4113:../../../FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4114:../../../FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4115:../../../FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 6090              		.loc 1 4115 0
 6091 009c 214B     		ldr	r3, .L381+16
 6092 009e 4FF08052 		mov	r2, #268435456
 6093 00a2 1A60     		str	r2, [r3]
 6094              	@ 4115 "../../../FreeRTOS/Source/tasks.c" 1
 6095 00a4 BFF34F8F 		dsb
 6096              	@ 0 "" 2
 6097              	@ 4115 "../../../FreeRTOS/Source/tasks.c" 1
 6098 00a8 BFF36F8F 		isb
 6099              	@ 0 "" 2
 6100              		.thumb
 6101              	.L373:
4116:../../../FreeRTOS/Source/tasks.c **** 				}
4117:../../../FreeRTOS/Source/tasks.c **** 				else
4118:../../../FreeRTOS/Source/tasks.c **** 				{
4119:../../../FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4120:../../../FreeRTOS/Source/tasks.c **** 				}
4121:../../../FreeRTOS/Source/tasks.c **** 			}
4122:../../../FreeRTOS/Source/tasks.c **** 			else
4123:../../../FreeRTOS/Source/tasks.c **** 			{
4124:../../../FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4125:../../../FreeRTOS/Source/tasks.c **** 			}
4126:../../../FreeRTOS/Source/tasks.c **** 		}
4127:../../../FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 6102              		.loc 1 4127 0
 6103 00ac FFF7FEFF 		bl	vPortExitCritical
4128:../../../FreeRTOS/Source/tasks.c **** 
4129:../../../FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 6104              		.loc 1 4129 0
 6105 00b0 FFF7FEFF 		bl	vPortEnterCritical
4130:../../../FreeRTOS/Source/tasks.c **** 		{
4131:../../../FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
 6106              		.loc 1 4131 0
 6107 00b4 7C68     		ldr	r4, [r7, #4]
 6108 00b6 3B68     		ldr	r3, [r7]
 6109 00b8 0093     		str	r3, [sp]
 6110 00ba 4020     		movs	r0, #64
 6111 00bc F968     		ldr	r1, [r7, #12]
 6112 00be BA68     		ldr	r2, [r7, #8]
 6113 00c0 2346     		mov	r3, r4
 6114 00c2 FFF7FEFF 		bl	SYSVIEW_RecordU32x4
4132:../../../FreeRTOS/Source/tasks.c **** 
4133:../../../FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
 6115              		.loc 1 4133 0
 6116 00c6 7B68     		ldr	r3, [r7, #4]
 6117 00c8 002B     		cmp	r3, #0
 6118 00ca 04D0     		beq	.L377
4134:../../../FreeRTOS/Source/tasks.c **** 			{
4135:../../../FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
ARM GAS  /tmp/cc7uEwzT.s 			page 184


4136:../../../FreeRTOS/Source/tasks.c **** 				have changed. */
4137:../../../FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 6119              		.loc 1 4137 0
 6120 00cc 114B     		ldr	r3, .L381
 6121 00ce 1B68     		ldr	r3, [r3]
 6122 00d0 5A6D     		ldr	r2, [r3, #84]
 6123 00d2 7B68     		ldr	r3, [r7, #4]
 6124 00d4 1A60     		str	r2, [r3]
 6125              	.L377:
4138:../../../FreeRTOS/Source/tasks.c **** 			}
4139:../../../FreeRTOS/Source/tasks.c **** 
4140:../../../FreeRTOS/Source/tasks.c **** 			/* If eNotifyValue is set then either the task never entered the
4141:../../../FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4142:../../../FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4143:../../../FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4144:../../../FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->eNotifyState == eWaitingNotification )
 6126              		.loc 1 4144 0
 6127 00d6 0F4B     		ldr	r3, .L381
 6128 00d8 1B68     		ldr	r3, [r3]
 6129 00da 93F85830 		ldrb	r3, [r3, #88]
 6130 00de DBB2     		uxtb	r3, r3
 6131 00e0 012B     		cmp	r3, #1
 6132 00e2 02D1     		bne	.L378
4145:../../../FreeRTOS/Source/tasks.c **** 			{
4146:../../../FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4147:../../../FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
 6133              		.loc 1 4147 0
 6134 00e4 0023     		movs	r3, #0
 6135 00e6 7B61     		str	r3, [r7, #20]
 6136 00e8 08E0     		b	.L379
 6137              	.L378:
4148:../../../FreeRTOS/Source/tasks.c **** 			}
4149:../../../FreeRTOS/Source/tasks.c **** 			else
4150:../../../FreeRTOS/Source/tasks.c **** 			{
4151:../../../FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4152:../../../FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4153:../../../FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 6138              		.loc 1 4153 0
 6139 00ea 0A4B     		ldr	r3, .L381
 6140 00ec 1B68     		ldr	r3, [r3]
 6141 00ee 596D     		ldr	r1, [r3, #84]
 6142 00f0 BA68     		ldr	r2, [r7, #8]
 6143 00f2 D243     		mvns	r2, r2
 6144 00f4 0A40     		ands	r2, r2, r1
 6145 00f6 5A65     		str	r2, [r3, #84]
4154:../../../FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 6146              		.loc 1 4154 0
 6147 00f8 0123     		movs	r3, #1
 6148 00fa 7B61     		str	r3, [r7, #20]
 6149              	.L379:
4155:../../../FreeRTOS/Source/tasks.c **** 			}
4156:../../../FreeRTOS/Source/tasks.c **** 
4157:../../../FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 6150              		.loc 1 4157 0
 6151 00fc 054B     		ldr	r3, .L381
 6152 00fe 1B68     		ldr	r3, [r3]
 6153 0100 0022     		movs	r2, #0
ARM GAS  /tmp/cc7uEwzT.s 			page 185


 6154 0102 83F85820 		strb	r2, [r3, #88]
4158:../../../FreeRTOS/Source/tasks.c **** 		}
4159:../../../FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 6155              		.loc 1 4159 0
 6156 0106 FFF7FEFF 		bl	vPortExitCritical
4160:../../../FreeRTOS/Source/tasks.c **** 
4161:../../../FreeRTOS/Source/tasks.c **** 		return xReturn;
 6157              		.loc 1 4161 0
 6158 010a 7B69     		ldr	r3, [r7, #20]
4162:../../../FreeRTOS/Source/tasks.c **** 	}
 6159              		.loc 1 4162 0
 6160 010c 1846     		mov	r0, r3
 6161 010e 1C37     		adds	r7, r7, #28
 6162              	.LCFI247:
 6163              		.cfi_def_cfa_offset 12
 6164 0110 BD46     		mov	sp, r7
 6165              	.LCFI248:
 6166              		.cfi_def_cfa_register 13
 6167              		@ sp needed
 6168 0112 90BD     		pop	{r4, r7, pc}
 6169              	.L382:
 6170              		.align	2
 6171              	.L381:
 6172 0114 00000000 		.word	pxCurrentTCB
 6173 0118 00000000 		.word	uxTopReadyPriority
 6174 011c 00000000 		.word	xSuspendedTaskList
 6175 0120 00000000 		.word	xTickCount
 6176 0124 04ED00E0 		.word	-536810236
 6177              		.cfi_endproc
 6178              	.LFE52:
 6180              		.section	.text.xTaskGenericNotify,"ax",%progbits
 6181              		.align	2
 6182              		.global	xTaskGenericNotify
 6183              		.thumb
 6184              		.thumb_func
 6186              	xTaskGenericNotify:
 6187              	.LFB53:
4163:../../../FreeRTOS/Source/tasks.c **** 
4164:../../../FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4165:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4166:../../../FreeRTOS/Source/tasks.c **** 
4167:../../../FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4168:../../../FreeRTOS/Source/tasks.c **** 
4169:../../../FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4170:../../../FreeRTOS/Source/tasks.c **** 	{
 6188              		.loc 1 4170 0
 6189              		.cfi_startproc
 6190              		@ args = 0, pretend = 0, frame = 40
 6191              		@ frame_needed = 1, uses_anonymous_args = 0
 6192 0000 90B5     		push	{r4, r7, lr}
 6193              	.LCFI249:
 6194              		.cfi_def_cfa_offset 12
 6195              		.cfi_offset 4, -12
 6196              		.cfi_offset 7, -8
 6197              		.cfi_offset 14, -4
 6198 0002 8DB0     		sub	sp, sp, #52
 6199              	.LCFI250:
ARM GAS  /tmp/cc7uEwzT.s 			page 186


 6200              		.cfi_def_cfa_offset 64
 6201 0004 02AF     		add	r7, sp, #8
 6202              	.LCFI251:
 6203              		.cfi_def_cfa 7, 56
 6204 0006 F860     		str	r0, [r7, #12]
 6205 0008 B960     		str	r1, [r7, #8]
 6206 000a 3B60     		str	r3, [r7]
 6207 000c 1346     		mov	r3, r2
 6208 000e FB71     		strb	r3, [r7, #7]
4171:../../../FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4172:../../../FreeRTOS/Source/tasks.c **** 	eNotifyValue eOriginalNotifyState;
4173:../../../FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 6209              		.loc 1 4173 0
 6210 0010 0123     		movs	r3, #1
 6211 0012 7B62     		str	r3, [r7, #36]
4174:../../../FreeRTOS/Source/tasks.c **** 
4175:../../../FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 6212              		.loc 1 4175 0
 6213 0014 FB68     		ldr	r3, [r7, #12]
 6214 0016 002B     		cmp	r3, #0
 6215 0018 09D1     		bne	.L384
 6216              	.LBB165:
 6217              	.LBB166:
 215:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6218              		.loc 2 215 0 discriminator 1
 6219              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6220 001a 4FF05003 			mov r3, #80												
 6221 001e 83F31188 		msr basepri, r3											
 6222 0022 BFF36F8F 		isb														
 6223 0026 BFF34F8F 		dsb														
 6224              	
 6225              	@ 0 "" 2
 6226              		.thumb
 6227 002a BB61     		str	r3, [r7, #24]
 6228              	.L385:
 6229              	.LBE166:
 6230              	.LBE165:
 6231              		.loc 1 4175 0 discriminator 1
 6232 002c FEE7     		b	.L385
 6233              	.L384:
4176:../../../FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 6234              		.loc 1 4176 0
 6235 002e FB68     		ldr	r3, [r7, #12]
 6236 0030 3B62     		str	r3, [r7, #32]
4177:../../../FreeRTOS/Source/tasks.c **** 
4178:../../../FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 6237              		.loc 1 4178 0
 6238 0032 FFF7FEFF 		bl	vPortEnterCritical
4179:../../../FreeRTOS/Source/tasks.c **** 		{
4180:../../../FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 6239              		.loc 1 4180 0
 6240 0036 3B68     		ldr	r3, [r7]
 6241 0038 002B     		cmp	r3, #0
 6242 003a 03D0     		beq	.L386
4181:../../../FreeRTOS/Source/tasks.c **** 			{
4182:../../../FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 6243              		.loc 1 4182 0
ARM GAS  /tmp/cc7uEwzT.s 			page 187


 6244 003c 3B6A     		ldr	r3, [r7, #32]
 6245 003e 5A6D     		ldr	r2, [r3, #84]
 6246 0040 3B68     		ldr	r3, [r7]
 6247 0042 1A60     		str	r2, [r3]
 6248              	.L386:
4183:../../../FreeRTOS/Source/tasks.c **** 			}
4184:../../../FreeRTOS/Source/tasks.c **** 
4185:../../../FreeRTOS/Source/tasks.c **** 			eOriginalNotifyState = pxTCB->eNotifyState;
 6249              		.loc 1 4185 0
 6250 0044 3B6A     		ldr	r3, [r7, #32]
 6251 0046 93F85830 		ldrb	r3, [r3, #88]
 6252 004a FB77     		strb	r3, [r7, #31]
4186:../../../FreeRTOS/Source/tasks.c **** 
4187:../../../FreeRTOS/Source/tasks.c **** 			pxTCB->eNotifyState = eNotified;
 6253              		.loc 1 4187 0
 6254 004c 3B6A     		ldr	r3, [r7, #32]
 6255 004e 0222     		movs	r2, #2
 6256 0050 83F85820 		strb	r2, [r3, #88]
4188:../../../FreeRTOS/Source/tasks.c **** 
4189:../../../FreeRTOS/Source/tasks.c **** 			switch( eAction )
 6257              		.loc 1 4189 0
 6258 0054 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6259 0056 042B     		cmp	r3, #4
 6260 0058 27D8     		bhi	.L387
 6261 005a 01A2     		adr	r2, .L389
 6262 005c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 6263              		.p2align 2
 6264              	.L389:
 6265 0060 AB000000 		.word	.L387+1
 6266 0064 75000000 		.word	.L390+1
 6267 0068 83000000 		.word	.L391+1
 6268 006c 8F000000 		.word	.L392+1
 6269 0070 97000000 		.word	.L393+1
 6270              		.p2align 1
 6271              	.L390:
4190:../../../FreeRTOS/Source/tasks.c **** 			{
4191:../../../FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4192:../../../FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 6272              		.loc 1 4192 0
 6273 0074 3B6A     		ldr	r3, [r7, #32]
 6274 0076 5A6D     		ldr	r2, [r3, #84]
 6275 0078 BB68     		ldr	r3, [r7, #8]
 6276 007a 1A43     		orrs	r2, r2, r3
 6277 007c 3B6A     		ldr	r3, [r7, #32]
 6278 007e 5A65     		str	r2, [r3, #84]
4193:../../../FreeRTOS/Source/tasks.c **** 					break;
 6279              		.loc 1 4193 0
 6280 0080 13E0     		b	.L387
 6281              	.L391:
4194:../../../FreeRTOS/Source/tasks.c **** 
4195:../../../FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4196:../../../FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 6282              		.loc 1 4196 0
 6283 0082 3B6A     		ldr	r3, [r7, #32]
 6284 0084 5B6D     		ldr	r3, [r3, #84]
 6285 0086 5A1C     		adds	r2, r3, #1
 6286 0088 3B6A     		ldr	r3, [r7, #32]
ARM GAS  /tmp/cc7uEwzT.s 			page 188


 6287 008a 5A65     		str	r2, [r3, #84]
4197:../../../FreeRTOS/Source/tasks.c **** 					break;
 6288              		.loc 1 4197 0
 6289 008c 0DE0     		b	.L387
 6290              	.L392:
4198:../../../FreeRTOS/Source/tasks.c **** 
4199:../../../FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4200:../../../FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 6291              		.loc 1 4200 0
 6292 008e 3B6A     		ldr	r3, [r7, #32]
 6293 0090 BA68     		ldr	r2, [r7, #8]
 6294 0092 5A65     		str	r2, [r3, #84]
4201:../../../FreeRTOS/Source/tasks.c **** 					break;
 6295              		.loc 1 4201 0
 6296 0094 09E0     		b	.L387
 6297              	.L393:
4202:../../../FreeRTOS/Source/tasks.c **** 
4203:../../../FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4204:../../../FreeRTOS/Source/tasks.c **** 					if( eOriginalNotifyState != eNotified )
 6298              		.loc 1 4204 0
 6299 0096 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 6300 0098 022B     		cmp	r3, #2
 6301 009a 03D0     		beq	.L394
4205:../../../FreeRTOS/Source/tasks.c **** 					{
4206:../../../FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 6302              		.loc 1 4206 0
 6303 009c 3B6A     		ldr	r3, [r7, #32]
 6304 009e BA68     		ldr	r2, [r7, #8]
 6305 00a0 5A65     		str	r2, [r3, #84]
4207:../../../FreeRTOS/Source/tasks.c **** 					}
4208:../../../FreeRTOS/Source/tasks.c **** 					else
4209:../../../FreeRTOS/Source/tasks.c **** 					{
4210:../../../FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4211:../../../FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4212:../../../FreeRTOS/Source/tasks.c **** 					}
4213:../../../FreeRTOS/Source/tasks.c **** 					break;
 6306              		.loc 1 4213 0
 6307 00a2 01E0     		b	.L400
 6308              	.L394:
4211:../../../FreeRTOS/Source/tasks.c **** 					}
 6309              		.loc 1 4211 0
 6310 00a4 0023     		movs	r3, #0
 6311 00a6 7B62     		str	r3, [r7, #36]
 6312              	.L400:
 6313              		.loc 1 4213 0
 6314 00a8 00BF     		nop
 6315              	.L387:
4214:../../../FreeRTOS/Source/tasks.c **** 
4215:../../../FreeRTOS/Source/tasks.c **** 				case eNoAction:
4216:../../../FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4217:../../../FreeRTOS/Source/tasks.c **** 					updated. */
4218:../../../FreeRTOS/Source/tasks.c **** 					break;
4219:../../../FreeRTOS/Source/tasks.c **** 			}
4220:../../../FreeRTOS/Source/tasks.c **** 
4221:../../../FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
 6316              		.loc 1 4221 0
 6317 00aa 3B6A     		ldr	r3, [r7, #32]
ARM GAS  /tmp/cc7uEwzT.s 			page 189


 6318 00ac 1846     		mov	r0, r3
 6319 00ae FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 6320 00b2 0246     		mov	r2, r0
 6321 00b4 FC79     		ldrb	r4, [r7, #7]	@ zero_extendqisi2
 6322 00b6 3B68     		ldr	r3, [r7]
 6323 00b8 0093     		str	r3, [sp]
 6324 00ba 3E20     		movs	r0, #62
 6325 00bc 1146     		mov	r1, r2
 6326 00be BA68     		ldr	r2, [r7, #8]
 6327 00c0 2346     		mov	r3, r4
 6328 00c2 FFF7FEFF 		bl	SYSVIEW_RecordU32x4
4222:../../../FreeRTOS/Source/tasks.c **** 
4223:../../../FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4224:../../../FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4225:../../../FreeRTOS/Source/tasks.c **** 			if( eOriginalNotifyState == eWaitingNotification )
 6329              		.loc 1 4225 0
 6330 00c6 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 6331 00c8 012B     		cmp	r3, #1
 6332 00ca 3ED1     		bne	.L396
4226:../../../FreeRTOS/Source/tasks.c **** 			{
4227:../../../FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 6333              		.loc 1 4227 0
 6334 00cc 3B6A     		ldr	r3, [r7, #32]
 6335 00ce 0433     		adds	r3, r3, #4
 6336 00d0 1846     		mov	r0, r3
 6337 00d2 FFF7FEFF 		bl	uxListRemove
4228:../../../FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 6338              		.loc 1 4228 0
 6339 00d6 3B6A     		ldr	r3, [r7, #32]
 6340 00d8 1846     		mov	r0, r3
 6341 00da FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStartReady
 6342 00de 3B6A     		ldr	r3, [r7, #32]
 6343 00e0 DB6A     		ldr	r3, [r3, #44]
 6344 00e2 1A46     		mov	r2, r3
 6345 00e4 0123     		movs	r3, #1
 6346 00e6 03FA02F2 		lsl	r2, r3, r2
 6347 00ea 1B4B     		ldr	r3, .L401
 6348 00ec 1B68     		ldr	r3, [r3]
 6349 00ee 1343     		orrs	r3, r3, r2
 6350 00f0 194A     		ldr	r2, .L401
 6351 00f2 1360     		str	r3, [r2]
 6352 00f4 3B6A     		ldr	r3, [r7, #32]
 6353 00f6 DA6A     		ldr	r2, [r3, #44]
 6354 00f8 1346     		mov	r3, r2
 6355 00fa 9B00     		lsls	r3, r3, #2
 6356 00fc 1344     		add	r3, r3, r2
 6357 00fe 9B00     		lsls	r3, r3, #2
 6358 0100 164A     		ldr	r2, .L401+4
 6359 0102 1A44     		add	r2, r2, r3
 6360 0104 3B6A     		ldr	r3, [r7, #32]
 6361 0106 0433     		adds	r3, r3, #4
 6362 0108 1046     		mov	r0, r2
 6363 010a 1946     		mov	r1, r3
 6364 010c FFF7FEFF 		bl	vListInsertEnd
4229:../../../FreeRTOS/Source/tasks.c **** 
4230:../../../FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4231:../../../FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
ARM GAS  /tmp/cc7uEwzT.s 			page 190


 6365              		.loc 1 4231 0
 6366 0110 3B6A     		ldr	r3, [r7, #32]
 6367 0112 9B6A     		ldr	r3, [r3, #40]
 6368 0114 002B     		cmp	r3, #0
 6369 0116 09D0     		beq	.L397
 6370              	.LBB167:
 6371              	.LBB168:
 215:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6372              		.loc 2 215 0 discriminator 1
 6373              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6374 0118 4FF05003 			mov r3, #80												
 6375 011c 83F31188 		msr basepri, r3											
 6376 0120 BFF36F8F 		isb														
 6377 0124 BFF34F8F 		dsb														
 6378              	
 6379              	@ 0 "" 2
 6380              		.thumb
 6381 0128 7B61     		str	r3, [r7, #20]
 6382              	.L398:
 6383              	.LBE168:
 6384              	.LBE167:
 6385              		.loc 1 4231 0 discriminator 2
 6386 012a FEE7     		b	.L398
 6387              	.L397:
4232:../../../FreeRTOS/Source/tasks.c **** 
4233:../../../FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4234:../../../FreeRTOS/Source/tasks.c **** 				{
4235:../../../FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4236:../../../FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4237:../../../FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4238:../../../FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4239:../../../FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4240:../../../FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4241:../../../FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4242:../../../FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4243:../../../FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4244:../../../FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4245:../../../FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4246:../../../FreeRTOS/Source/tasks.c **** 				}
4247:../../../FreeRTOS/Source/tasks.c **** 				#endif
4248:../../../FreeRTOS/Source/tasks.c **** 
4249:../../../FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 6388              		.loc 1 4249 0
 6389 012c 3B6A     		ldr	r3, [r7, #32]
 6390 012e DA6A     		ldr	r2, [r3, #44]
 6391 0130 0B4B     		ldr	r3, .L401+8
 6392 0132 1B68     		ldr	r3, [r3]
 6393 0134 DB6A     		ldr	r3, [r3, #44]
 6394 0136 9A42     		cmp	r2, r3
 6395 0138 07D9     		bls	.L396
4250:../../../FreeRTOS/Source/tasks.c **** 				{
4251:../../../FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4252:../../../FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4253:../../../FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 6396              		.loc 1 4253 0
 6397 013a 0A4B     		ldr	r3, .L401+12
 6398 013c 4FF08052 		mov	r2, #268435456
ARM GAS  /tmp/cc7uEwzT.s 			page 191


 6399 0140 1A60     		str	r2, [r3]
 6400              	@ 4253 "../../../FreeRTOS/Source/tasks.c" 1
 6401 0142 BFF34F8F 		dsb
 6402              	@ 0 "" 2
 6403              	@ 4253 "../../../FreeRTOS/Source/tasks.c" 1
 6404 0146 BFF36F8F 		isb
 6405              	@ 0 "" 2
 6406              		.thumb
 6407              	.L396:
4254:../../../FreeRTOS/Source/tasks.c **** 				}
4255:../../../FreeRTOS/Source/tasks.c **** 				else
4256:../../../FreeRTOS/Source/tasks.c **** 				{
4257:../../../FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4258:../../../FreeRTOS/Source/tasks.c **** 				}
4259:../../../FreeRTOS/Source/tasks.c **** 			}
4260:../../../FreeRTOS/Source/tasks.c **** 			else
4261:../../../FreeRTOS/Source/tasks.c **** 			{
4262:../../../FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4263:../../../FreeRTOS/Source/tasks.c **** 			}
4264:../../../FreeRTOS/Source/tasks.c **** 		}
4265:../../../FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 6408              		.loc 1 4265 0
 6409 014a FFF7FEFF 		bl	vPortExitCritical
4266:../../../FreeRTOS/Source/tasks.c **** 
4267:../../../FreeRTOS/Source/tasks.c **** 		return xReturn;
 6410              		.loc 1 4267 0
 6411 014e 7B6A     		ldr	r3, [r7, #36]
4268:../../../FreeRTOS/Source/tasks.c **** 	}
 6412              		.loc 1 4268 0
 6413 0150 1846     		mov	r0, r3
 6414 0152 2C37     		adds	r7, r7, #44
 6415              	.LCFI252:
 6416              		.cfi_def_cfa_offset 12
 6417 0154 BD46     		mov	sp, r7
 6418              	.LCFI253:
 6419              		.cfi_def_cfa_register 13
 6420              		@ sp needed
 6421 0156 90BD     		pop	{r4, r7, pc}
 6422              	.L402:
 6423              		.align	2
 6424              	.L401:
 6425 0158 00000000 		.word	uxTopReadyPriority
 6426 015c 00000000 		.word	pxReadyTasksLists
 6427 0160 00000000 		.word	pxCurrentTCB
 6428 0164 04ED00E0 		.word	-536810236
 6429              		.cfi_endproc
 6430              	.LFE53:
 6432              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 6433              		.align	2
 6434              		.global	xTaskGenericNotifyFromISR
 6435              		.thumb
 6436              		.thumb_func
 6438              	xTaskGenericNotifyFromISR:
 6439              	.LFB54:
4269:../../../FreeRTOS/Source/tasks.c **** 
4270:../../../FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4271:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/cc7uEwzT.s 			page 192


4272:../../../FreeRTOS/Source/tasks.c **** 
4273:../../../FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4274:../../../FreeRTOS/Source/tasks.c **** 
4275:../../../FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4276:../../../FreeRTOS/Source/tasks.c **** 	{
 6440              		.loc 1 4276 0
 6441              		.cfi_startproc
 6442              		@ args = 4, pretend = 0, frame = 56
 6443              		@ frame_needed = 1, uses_anonymous_args = 0
 6444 0000 90B5     		push	{r4, r7, lr}
 6445              	.LCFI254:
 6446              		.cfi_def_cfa_offset 12
 6447              		.cfi_offset 4, -12
 6448              		.cfi_offset 7, -8
 6449              		.cfi_offset 14, -4
 6450 0002 91B0     		sub	sp, sp, #68
 6451              	.LCFI255:
 6452              		.cfi_def_cfa_offset 80
 6453 0004 02AF     		add	r7, sp, #8
 6454              	.LCFI256:
 6455              		.cfi_def_cfa 7, 72
 6456 0006 F860     		str	r0, [r7, #12]
 6457 0008 B960     		str	r1, [r7, #8]
 6458 000a 3B60     		str	r3, [r7]
 6459 000c 1346     		mov	r3, r2
 6460 000e FB71     		strb	r3, [r7, #7]
4277:../../../FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4278:../../../FreeRTOS/Source/tasks.c **** 	eNotifyValue eOriginalNotifyState;
4279:../../../FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 6461              		.loc 1 4279 0
 6462 0010 0123     		movs	r3, #1
 6463 0012 7B63     		str	r3, [r7, #52]
4280:../../../FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4281:../../../FreeRTOS/Source/tasks.c **** 
4282:../../../FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 6464              		.loc 1 4282 0
 6465 0014 FB68     		ldr	r3, [r7, #12]
 6466 0016 002B     		cmp	r3, #0
 6467 0018 09D1     		bne	.L404
 6468              	.LBB169:
 6469              	.LBB170:
 215:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6470              		.loc 2 215 0 discriminator 1
 6471              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6472 001a 4FF05003 			mov r3, #80												
 6473 001e 83F31188 		msr basepri, r3											
 6474 0022 BFF36F8F 		isb														
 6475 0026 BFF34F8F 		dsb														
 6476              	
 6477              	@ 0 "" 2
 6478              		.thumb
 6479 002a 7B62     		str	r3, [r7, #36]
 6480              	.L405:
 6481              	.LBE170:
 6482              	.LBE169:
 6483              		.loc 1 4282 0 discriminator 1
 6484 002c FEE7     		b	.L405
ARM GAS  /tmp/cc7uEwzT.s 			page 193


 6485              	.L404:
4283:../../../FreeRTOS/Source/tasks.c **** 
4284:../../../FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4285:../../../FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4286:../../../FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4287:../../../FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4288:../../../FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4289:../../../FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4290:../../../FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4291:../../../FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4292:../../../FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4293:../../../FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4294:../../../FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4295:../../../FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4296:../../../FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4297:../../../FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4298:../../../FreeRTOS/Source/tasks.c **** 		provided on the following link:
4299:../../../FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4300:../../../FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 6486              		.loc 1 4300 0
 6487 002e FFF7FEFF 		bl	vPortValidateInterruptPriority
4301:../../../FreeRTOS/Source/tasks.c **** 
4302:../../../FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 6488              		.loc 1 4302 0
 6489 0032 FB68     		ldr	r3, [r7, #12]
 6490 0034 3B63     		str	r3, [r7, #48]
 6491              	.LBB171:
 6492              	.LBB172:
 231:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6493              		.loc 2 231 0
 6494              	@ 231 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6495 0036 EFF31182 			mrs r2, basepri											
 6496 003a 4FF05003 		mov r3, #80												
 6497 003e 83F31188 		msr basepri, r3											
 6498 0042 BFF36F8F 		isb														
 6499 0046 BFF34F8F 		dsb														
 6500              	
 6501              	@ 0 "" 2
 6502              		.thumb
 6503 004a 3A62     		str	r2, [r7, #32]
 6504 004c FB61     		str	r3, [r7, #28]
 243:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 6505              		.loc 2 243 0
 6506 004e 3B6A     		ldr	r3, [r7, #32]
 6507              	.LBE172:
 6508              	.LBE171:
4303:../../../FreeRTOS/Source/tasks.c **** 
4304:../../../FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 6509              		.loc 1 4304 0
 6510 0050 FB62     		str	r3, [r7, #44]
4305:../../../FreeRTOS/Source/tasks.c **** 		{
4306:../../../FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 6511              		.loc 1 4306 0
 6512 0052 3B68     		ldr	r3, [r7]
 6513 0054 002B     		cmp	r3, #0
 6514 0056 03D0     		beq	.L407
4307:../../../FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/cc7uEwzT.s 			page 194


4308:../../../FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 6515              		.loc 1 4308 0
 6516 0058 3B6B     		ldr	r3, [r7, #48]
 6517 005a 5A6D     		ldr	r2, [r3, #84]
 6518 005c 3B68     		ldr	r3, [r7]
 6519 005e 1A60     		str	r2, [r3]
 6520              	.L407:
4309:../../../FreeRTOS/Source/tasks.c **** 			}
4310:../../../FreeRTOS/Source/tasks.c **** 
4311:../../../FreeRTOS/Source/tasks.c **** 			eOriginalNotifyState = pxTCB->eNotifyState;
 6521              		.loc 1 4311 0
 6522 0060 3B6B     		ldr	r3, [r7, #48]
 6523 0062 93F85830 		ldrb	r3, [r3, #88]
 6524 0066 87F82B30 		strb	r3, [r7, #43]
4312:../../../FreeRTOS/Source/tasks.c **** 			pxTCB->eNotifyState = eNotified;
 6525              		.loc 1 4312 0
 6526 006a 3B6B     		ldr	r3, [r7, #48]
 6527 006c 0222     		movs	r2, #2
 6528 006e 83F85820 		strb	r2, [r3, #88]
4313:../../../FreeRTOS/Source/tasks.c **** 
4314:../../../FreeRTOS/Source/tasks.c **** 			switch( eAction )
 6529              		.loc 1 4314 0
 6530 0072 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6531 0074 042B     		cmp	r3, #4
 6532 0076 29D8     		bhi	.L408
 6533 0078 01A2     		adr	r2, .L410
 6534 007a 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 6535 007e 00BF     		.p2align 2
 6536              	.L410:
 6537 0080 CD000000 		.word	.L408+1
 6538 0084 95000000 		.word	.L411+1
 6539 0088 A3000000 		.word	.L412+1
 6540 008c AF000000 		.word	.L413+1
 6541 0090 B7000000 		.word	.L414+1
 6542              		.p2align 1
 6543              	.L411:
4315:../../../FreeRTOS/Source/tasks.c **** 			{
4316:../../../FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4317:../../../FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 6544              		.loc 1 4317 0
 6545 0094 3B6B     		ldr	r3, [r7, #48]
 6546 0096 5A6D     		ldr	r2, [r3, #84]
 6547 0098 BB68     		ldr	r3, [r7, #8]
 6548 009a 1A43     		orrs	r2, r2, r3
 6549 009c 3B6B     		ldr	r3, [r7, #48]
 6550 009e 5A65     		str	r2, [r3, #84]
4318:../../../FreeRTOS/Source/tasks.c **** 					break;
 6551              		.loc 1 4318 0
 6552 00a0 14E0     		b	.L408
 6553              	.L412:
4319:../../../FreeRTOS/Source/tasks.c **** 
4320:../../../FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4321:../../../FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 6554              		.loc 1 4321 0
 6555 00a2 3B6B     		ldr	r3, [r7, #48]
 6556 00a4 5B6D     		ldr	r3, [r3, #84]
 6557 00a6 5A1C     		adds	r2, r3, #1
ARM GAS  /tmp/cc7uEwzT.s 			page 195


 6558 00a8 3B6B     		ldr	r3, [r7, #48]
 6559 00aa 5A65     		str	r2, [r3, #84]
4322:../../../FreeRTOS/Source/tasks.c **** 					break;
 6560              		.loc 1 4322 0
 6561 00ac 0EE0     		b	.L408
 6562              	.L413:
4323:../../../FreeRTOS/Source/tasks.c **** 
4324:../../../FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4325:../../../FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 6563              		.loc 1 4325 0
 6564 00ae 3B6B     		ldr	r3, [r7, #48]
 6565 00b0 BA68     		ldr	r2, [r7, #8]
 6566 00b2 5A65     		str	r2, [r3, #84]
4326:../../../FreeRTOS/Source/tasks.c **** 					break;
 6567              		.loc 1 4326 0
 6568 00b4 0AE0     		b	.L408
 6569              	.L414:
4327:../../../FreeRTOS/Source/tasks.c **** 
4328:../../../FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4329:../../../FreeRTOS/Source/tasks.c **** 					if( eOriginalNotifyState != eNotified )
 6570              		.loc 1 4329 0
 6571 00b6 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 6572 00ba 022B     		cmp	r3, #2
 6573 00bc 03D0     		beq	.L415
4330:../../../FreeRTOS/Source/tasks.c **** 					{
4331:../../../FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 6574              		.loc 1 4331 0
 6575 00be 3B6B     		ldr	r3, [r7, #48]
 6576 00c0 BA68     		ldr	r2, [r7, #8]
 6577 00c2 5A65     		str	r2, [r3, #84]
4332:../../../FreeRTOS/Source/tasks.c **** 					}
4333:../../../FreeRTOS/Source/tasks.c **** 					else
4334:../../../FreeRTOS/Source/tasks.c **** 					{
4335:../../../FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4336:../../../FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4337:../../../FreeRTOS/Source/tasks.c **** 					}
4338:../../../FreeRTOS/Source/tasks.c **** 					break;
 6578              		.loc 1 4338 0
 6579 00c4 01E0     		b	.L424
 6580              	.L415:
4336:../../../FreeRTOS/Source/tasks.c **** 					}
 6581              		.loc 1 4336 0
 6582 00c6 0023     		movs	r3, #0
 6583 00c8 7B63     		str	r3, [r7, #52]
 6584              	.L424:
 6585              		.loc 1 4338 0
 6586 00ca 00BF     		nop
 6587              	.L408:
4339:../../../FreeRTOS/Source/tasks.c **** 
4340:../../../FreeRTOS/Source/tasks.c **** 				case eNoAction :
4341:../../../FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4342:../../../FreeRTOS/Source/tasks.c **** 					updated. */
4343:../../../FreeRTOS/Source/tasks.c **** 					break;
4344:../../../FreeRTOS/Source/tasks.c **** 			}
4345:../../../FreeRTOS/Source/tasks.c **** 
4346:../../../FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
 6588              		.loc 1 4346 0
ARM GAS  /tmp/cc7uEwzT.s 			page 196


 6589 00cc 3B6B     		ldr	r3, [r7, #48]
 6590 00ce 1846     		mov	r0, r3
 6591 00d0 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 6592 00d4 0146     		mov	r1, r0
 6593 00d6 FC79     		ldrb	r4, [r7, #7]	@ zero_extendqisi2
 6594 00d8 3A68     		ldr	r2, [r7]
 6595 00da BB6C     		ldr	r3, [r7, #72]
 6596 00dc 0092     		str	r2, [sp]
 6597 00de 0193     		str	r3, [sp, #4]
 6598 00e0 3F20     		movs	r0, #63
 6599 00e2 BA68     		ldr	r2, [r7, #8]
 6600 00e4 2346     		mov	r3, r4
 6601 00e6 FFF7FEFF 		bl	SYSVIEW_RecordU32x5
4347:../../../FreeRTOS/Source/tasks.c **** 
4348:../../../FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4349:../../../FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4350:../../../FreeRTOS/Source/tasks.c **** 			if( eOriginalNotifyState == eWaitingNotification )
 6602              		.loc 1 4350 0
 6603 00ea 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 6604 00ee 012B     		cmp	r3, #1
 6605 00f0 47D1     		bne	.L417
4351:../../../FreeRTOS/Source/tasks.c **** 			{
4352:../../../FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4353:../../../FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 6606              		.loc 1 4353 0
 6607 00f2 3B6B     		ldr	r3, [r7, #48]
 6608 00f4 9B6A     		ldr	r3, [r3, #40]
 6609 00f6 002B     		cmp	r3, #0
 6610 00f8 09D0     		beq	.L418
 6611              	.LBB173:
 6612              	.LBB174:
 215:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6613              		.loc 2 215 0 discriminator 1
 6614              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6615 00fa 4FF05003 			mov r3, #80												
 6616 00fe 83F31188 		msr basepri, r3											
 6617 0102 BFF36F8F 		isb														
 6618 0106 BFF34F8F 		dsb														
 6619              	
 6620              	@ 0 "" 2
 6621              		.thumb
 6622 010a BB61     		str	r3, [r7, #24]
 6623              	.L419:
 6624              	.LBE174:
 6625              	.LBE173:
 6626              		.loc 1 4353 0 discriminator 2
 6627 010c FEE7     		b	.L419
 6628              	.L418:
4354:../../../FreeRTOS/Source/tasks.c **** 
4355:../../../FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 6629              		.loc 1 4355 0
 6630 010e 224B     		ldr	r3, .L425
 6631 0110 1B68     		ldr	r3, [r3]
 6632 0112 002B     		cmp	r3, #0
 6633 0114 22D1     		bne	.L420
4356:../../../FreeRTOS/Source/tasks.c **** 				{
4357:../../../FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
ARM GAS  /tmp/cc7uEwzT.s 			page 197


 6634              		.loc 1 4357 0
 6635 0116 3B6B     		ldr	r3, [r7, #48]
 6636 0118 0433     		adds	r3, r3, #4
 6637 011a 1846     		mov	r0, r3
 6638 011c FFF7FEFF 		bl	uxListRemove
4358:../../../FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6639              		.loc 1 4358 0
 6640 0120 3B6B     		ldr	r3, [r7, #48]
 6641 0122 1846     		mov	r0, r3
 6642 0124 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStartReady
 6643 0128 3B6B     		ldr	r3, [r7, #48]
 6644 012a DB6A     		ldr	r3, [r3, #44]
 6645 012c 1A46     		mov	r2, r3
 6646 012e 0123     		movs	r3, #1
 6647 0130 03FA02F2 		lsl	r2, r3, r2
 6648 0134 194B     		ldr	r3, .L425+4
 6649 0136 1B68     		ldr	r3, [r3]
 6650 0138 1343     		orrs	r3, r3, r2
 6651 013a 184A     		ldr	r2, .L425+4
 6652 013c 1360     		str	r3, [r2]
 6653 013e 3B6B     		ldr	r3, [r7, #48]
 6654 0140 DA6A     		ldr	r2, [r3, #44]
 6655 0142 1346     		mov	r3, r2
 6656 0144 9B00     		lsls	r3, r3, #2
 6657 0146 1344     		add	r3, r3, r2
 6658 0148 9B00     		lsls	r3, r3, #2
 6659 014a 154A     		ldr	r2, .L425+8
 6660 014c 1A44     		add	r2, r2, r3
 6661 014e 3B6B     		ldr	r3, [r7, #48]
 6662 0150 0433     		adds	r3, r3, #4
 6663 0152 1046     		mov	r0, r2
 6664 0154 1946     		mov	r1, r3
 6665 0156 FFF7FEFF 		bl	vListInsertEnd
 6666 015a 05E0     		b	.L421
 6667              	.L420:
4359:../../../FreeRTOS/Source/tasks.c **** 				}
4360:../../../FreeRTOS/Source/tasks.c **** 				else
4361:../../../FreeRTOS/Source/tasks.c **** 				{
4362:../../../FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4363:../../../FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4364:../../../FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 6668              		.loc 1 4364 0
 6669 015c 3B6B     		ldr	r3, [r7, #48]
 6670 015e 1833     		adds	r3, r3, #24
 6671 0160 1048     		ldr	r0, .L425+12
 6672 0162 1946     		mov	r1, r3
 6673 0164 FFF7FEFF 		bl	vListInsertEnd
 6674              	.L421:
4365:../../../FreeRTOS/Source/tasks.c **** 				}
4366:../../../FreeRTOS/Source/tasks.c **** 
4367:../../../FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 6675              		.loc 1 4367 0
 6676 0168 3B6B     		ldr	r3, [r7, #48]
 6677 016a DA6A     		ldr	r2, [r3, #44]
 6678 016c 0E4B     		ldr	r3, .L425+16
 6679 016e 1B68     		ldr	r3, [r3]
 6680 0170 DB6A     		ldr	r3, [r3, #44]
ARM GAS  /tmp/cc7uEwzT.s 			page 198


 6681 0172 9A42     		cmp	r2, r3
 6682 0174 05D9     		bls	.L417
4368:../../../FreeRTOS/Source/tasks.c **** 				{
4369:../../../FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4370:../../../FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4371:../../../FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 6683              		.loc 1 4371 0
 6684 0176 BB6C     		ldr	r3, [r7, #72]
 6685 0178 002B     		cmp	r3, #0
 6686 017a 02D0     		beq	.L417
4372:../../../FreeRTOS/Source/tasks.c **** 					{
4373:../../../FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 6687              		.loc 1 4373 0
 6688 017c BB6C     		ldr	r3, [r7, #72]
 6689 017e 0122     		movs	r2, #1
 6690 0180 1A60     		str	r2, [r3]
 6691              	.L417:
 6692 0182 FB6A     		ldr	r3, [r7, #44]
 6693 0184 7B61     		str	r3, [r7, #20]
 6694              	.LBB175:
 6695              	.LBB176:
 6696              		.loc 2 249 0
 6697 0186 7B69     		ldr	r3, [r7, #20]
 6698              	@ 249 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6699 0188 83F31188 			msr basepri, r3	
 6700              	@ 0 "" 2
 6701              		.thumb
 6702              	.LBE176:
 6703              	.LBE175:
4374:../../../FreeRTOS/Source/tasks.c **** 					}
4375:../../../FreeRTOS/Source/tasks.c **** 				}
4376:../../../FreeRTOS/Source/tasks.c **** 				else
4377:../../../FreeRTOS/Source/tasks.c **** 				{
4378:../../../FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4379:../../../FreeRTOS/Source/tasks.c **** 				}
4380:../../../FreeRTOS/Source/tasks.c **** 			}
4381:../../../FreeRTOS/Source/tasks.c **** 		}
4382:../../../FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4383:../../../FreeRTOS/Source/tasks.c **** 
4384:../../../FreeRTOS/Source/tasks.c **** 		return xReturn;
 6704              		.loc 1 4384 0
 6705 018c 7B6B     		ldr	r3, [r7, #52]
4385:../../../FreeRTOS/Source/tasks.c **** 	}
 6706              		.loc 1 4385 0
 6707 018e 1846     		mov	r0, r3
 6708 0190 3C37     		adds	r7, r7, #60
 6709              	.LCFI257:
 6710              		.cfi_def_cfa_offset 12
 6711 0192 BD46     		mov	sp, r7
 6712              	.LCFI258:
 6713              		.cfi_def_cfa_register 13
 6714              		@ sp needed
 6715 0194 90BD     		pop	{r4, r7, pc}
 6716              	.L426:
 6717 0196 00BF     		.align	2
 6718              	.L425:
 6719 0198 00000000 		.word	uxSchedulerSuspended
ARM GAS  /tmp/cc7uEwzT.s 			page 199


 6720 019c 00000000 		.word	uxTopReadyPriority
 6721 01a0 00000000 		.word	pxReadyTasksLists
 6722 01a4 00000000 		.word	xPendingReadyList
 6723 01a8 00000000 		.word	pxCurrentTCB
 6724              		.cfi_endproc
 6725              	.LFE54:
 6727              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 6728              		.align	2
 6729              		.global	vTaskNotifyGiveFromISR
 6730              		.thumb
 6731              		.thumb_func
 6733              	vTaskNotifyGiveFromISR:
 6734              	.LFB55:
4386:../../../FreeRTOS/Source/tasks.c **** 
4387:../../../FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4388:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4389:../../../FreeRTOS/Source/tasks.c **** 
4390:../../../FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4391:../../../FreeRTOS/Source/tasks.c **** 
4392:../../../FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4393:../../../FreeRTOS/Source/tasks.c **** 	{
 6735              		.loc 1 4393 0
 6736              		.cfi_startproc
 6737              		@ args = 0, pretend = 0, frame = 40
 6738              		@ frame_needed = 1, uses_anonymous_args = 0
 6739 0000 80B5     		push	{r7, lr}
 6740              	.LCFI259:
 6741              		.cfi_def_cfa_offset 8
 6742              		.cfi_offset 7, -8
 6743              		.cfi_offset 14, -4
 6744 0002 8AB0     		sub	sp, sp, #40
 6745              	.LCFI260:
 6746              		.cfi_def_cfa_offset 48
 6747 0004 00AF     		add	r7, sp, #0
 6748              	.LCFI261:
 6749              		.cfi_def_cfa_register 7
 6750 0006 7860     		str	r0, [r7, #4]
 6751 0008 3960     		str	r1, [r7]
4394:../../../FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4395:../../../FreeRTOS/Source/tasks.c **** 	eNotifyValue eOriginalNotifyState;
4396:../../../FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4397:../../../FreeRTOS/Source/tasks.c **** 
4398:../../../FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 6752              		.loc 1 4398 0
 6753 000a 7B68     		ldr	r3, [r7, #4]
 6754 000c 002B     		cmp	r3, #0
 6755 000e 09D1     		bne	.L428
 6756              	.LBB177:
 6757              	.LBB178:
 215:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6758              		.loc 2 215 0 discriminator 1
 6759              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6760 0010 4FF05003 			mov r3, #80												
 6761 0014 83F31188 		msr basepri, r3											
 6762 0018 BFF36F8F 		isb														
 6763 001c BFF34F8F 		dsb														
 6764              	
ARM GAS  /tmp/cc7uEwzT.s 			page 200


 6765              	@ 0 "" 2
 6766              		.thumb
 6767 0020 BB61     		str	r3, [r7, #24]
 6768              	.L429:
 6769              	.LBE178:
 6770              	.LBE177:
 6771              		.loc 1 4398 0 discriminator 1
 6772 0022 FEE7     		b	.L429
 6773              	.L428:
4399:../../../FreeRTOS/Source/tasks.c **** 
4400:../../../FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4401:../../../FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4402:../../../FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4403:../../../FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4404:../../../FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4405:../../../FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4406:../../../FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4407:../../../FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4408:../../../FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4409:../../../FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4410:../../../FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4411:../../../FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4412:../../../FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4413:../../../FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4414:../../../FreeRTOS/Source/tasks.c **** 		provided on the following link:
4415:../../../FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4416:../../../FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 6774              		.loc 1 4416 0
 6775 0024 FFF7FEFF 		bl	vPortValidateInterruptPriority
4417:../../../FreeRTOS/Source/tasks.c **** 
4418:../../../FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 6776              		.loc 1 4418 0
 6777 0028 7B68     		ldr	r3, [r7, #4]
 6778 002a 7B62     		str	r3, [r7, #36]
 6779              	.LBB179:
 6780              	.LBB180:
 231:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6781              		.loc 2 231 0
 6782              	@ 231 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6783 002c EFF31182 			mrs r2, basepri											
 6784 0030 4FF05003 		mov r3, #80												
 6785 0034 83F31188 		msr basepri, r3											
 6786 0038 BFF36F8F 		isb														
 6787 003c BFF34F8F 		dsb														
 6788              	
 6789              	@ 0 "" 2
 6790              		.thumb
 6791 0040 7A61     		str	r2, [r7, #20]
 6792 0042 3B61     		str	r3, [r7, #16]
 243:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 6793              		.loc 2 243 0
 6794 0044 7B69     		ldr	r3, [r7, #20]
 6795              	.LBE180:
 6796              	.LBE179:
4419:../../../FreeRTOS/Source/tasks.c **** 
4420:../../../FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 6797              		.loc 1 4420 0
ARM GAS  /tmp/cc7uEwzT.s 			page 201


 6798 0046 3B62     		str	r3, [r7, #32]
4421:../../../FreeRTOS/Source/tasks.c **** 		{
4422:../../../FreeRTOS/Source/tasks.c **** 			eOriginalNotifyState = pxTCB->eNotifyState;
 6799              		.loc 1 4422 0
 6800 0048 7B6A     		ldr	r3, [r7, #36]
 6801 004a 93F85830 		ldrb	r3, [r3, #88]
 6802 004e FB77     		strb	r3, [r7, #31]
4423:../../../FreeRTOS/Source/tasks.c **** 			pxTCB->eNotifyState = eNotified;
 6803              		.loc 1 4423 0
 6804 0050 7B6A     		ldr	r3, [r7, #36]
 6805 0052 0222     		movs	r2, #2
 6806 0054 83F85820 		strb	r2, [r3, #88]
4424:../../../FreeRTOS/Source/tasks.c **** 
4425:../../../FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4426:../../../FreeRTOS/Source/tasks.c **** 			semaphore. */
4427:../../../FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
 6807              		.loc 1 4427 0
 6808 0058 7B6A     		ldr	r3, [r7, #36]
 6809 005a 5B6D     		ldr	r3, [r3, #84]
 6810 005c 5A1C     		adds	r2, r3, #1
 6811 005e 7B6A     		ldr	r3, [r7, #36]
 6812 0060 5A65     		str	r2, [r3, #84]
4428:../../../FreeRTOS/Source/tasks.c **** 
4429:../../../FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
 6813              		.loc 1 4429 0
 6814 0062 7B6A     		ldr	r3, [r7, #36]
 6815 0064 1846     		mov	r0, r3
 6816 0066 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 6817 006a 0246     		mov	r2, r0
 6818 006c 3B68     		ldr	r3, [r7]
 6819 006e 4120     		movs	r0, #65
 6820 0070 1146     		mov	r1, r2
 6821 0072 1A46     		mov	r2, r3
 6822 0074 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x2
4430:../../../FreeRTOS/Source/tasks.c **** 
4431:../../../FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4432:../../../FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4433:../../../FreeRTOS/Source/tasks.c **** 			if( eOriginalNotifyState == eWaitingNotification )
 6823              		.loc 1 4433 0
 6824 0078 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 6825 007a 012B     		cmp	r3, #1
 6826 007c 47D1     		bne	.L431
4434:../../../FreeRTOS/Source/tasks.c **** 			{
4435:../../../FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4436:../../../FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 6827              		.loc 1 4436 0
 6828 007e 7B6A     		ldr	r3, [r7, #36]
 6829 0080 9B6A     		ldr	r3, [r3, #40]
 6830 0082 002B     		cmp	r3, #0
 6831 0084 09D0     		beq	.L432
 6832              	.LBB181:
 6833              	.LBB182:
 215:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6834              		.loc 2 215 0 discriminator 1
 6835              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6836 0086 4FF05003 			mov r3, #80												
 6837 008a 83F31188 		msr basepri, r3											
ARM GAS  /tmp/cc7uEwzT.s 			page 202


 6838 008e BFF36F8F 		isb														
 6839 0092 BFF34F8F 		dsb														
 6840              	
 6841              	@ 0 "" 2
 6842              		.thumb
 6843 0096 FB60     		str	r3, [r7, #12]
 6844              	.L433:
 6845              	.LBE182:
 6846              	.LBE181:
 6847              		.loc 1 4436 0 discriminator 2
 6848 0098 FEE7     		b	.L433
 6849              	.L432:
4437:../../../FreeRTOS/Source/tasks.c **** 
4438:../../../FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 6850              		.loc 1 4438 0
 6851 009a 214B     		ldr	r3, .L437
 6852 009c 1B68     		ldr	r3, [r3]
 6853 009e 002B     		cmp	r3, #0
 6854 00a0 22D1     		bne	.L434
4439:../../../FreeRTOS/Source/tasks.c **** 				{
4440:../../../FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 6855              		.loc 1 4440 0
 6856 00a2 7B6A     		ldr	r3, [r7, #36]
 6857 00a4 0433     		adds	r3, r3, #4
 6858 00a6 1846     		mov	r0, r3
 6859 00a8 FFF7FEFF 		bl	uxListRemove
4441:../../../FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6860              		.loc 1 4441 0
 6861 00ac 7B6A     		ldr	r3, [r7, #36]
 6862 00ae 1846     		mov	r0, r3
 6863 00b0 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStartReady
 6864 00b4 7B6A     		ldr	r3, [r7, #36]
 6865 00b6 DB6A     		ldr	r3, [r3, #44]
 6866 00b8 1A46     		mov	r2, r3
 6867 00ba 0123     		movs	r3, #1
 6868 00bc 03FA02F2 		lsl	r2, r3, r2
 6869 00c0 184B     		ldr	r3, .L437+4
 6870 00c2 1B68     		ldr	r3, [r3]
 6871 00c4 1343     		orrs	r3, r3, r2
 6872 00c6 174A     		ldr	r2, .L437+4
 6873 00c8 1360     		str	r3, [r2]
 6874 00ca 7B6A     		ldr	r3, [r7, #36]
 6875 00cc DA6A     		ldr	r2, [r3, #44]
 6876 00ce 1346     		mov	r3, r2
 6877 00d0 9B00     		lsls	r3, r3, #2
 6878 00d2 1344     		add	r3, r3, r2
 6879 00d4 9B00     		lsls	r3, r3, #2
 6880 00d6 144A     		ldr	r2, .L437+8
 6881 00d8 1A44     		add	r2, r2, r3
 6882 00da 7B6A     		ldr	r3, [r7, #36]
 6883 00dc 0433     		adds	r3, r3, #4
 6884 00de 1046     		mov	r0, r2
 6885 00e0 1946     		mov	r1, r3
 6886 00e2 FFF7FEFF 		bl	vListInsertEnd
 6887 00e6 05E0     		b	.L435
 6888              	.L434:
4442:../../../FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/cc7uEwzT.s 			page 203


4443:../../../FreeRTOS/Source/tasks.c **** 				else
4444:../../../FreeRTOS/Source/tasks.c **** 				{
4445:../../../FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4446:../../../FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4447:../../../FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 6889              		.loc 1 4447 0
 6890 00e8 7B6A     		ldr	r3, [r7, #36]
 6891 00ea 1833     		adds	r3, r3, #24
 6892 00ec 0F48     		ldr	r0, .L437+12
 6893 00ee 1946     		mov	r1, r3
 6894 00f0 FFF7FEFF 		bl	vListInsertEnd
 6895              	.L435:
4448:../../../FreeRTOS/Source/tasks.c **** 				}
4449:../../../FreeRTOS/Source/tasks.c **** 
4450:../../../FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 6896              		.loc 1 4450 0
 6897 00f4 7B6A     		ldr	r3, [r7, #36]
 6898 00f6 DA6A     		ldr	r2, [r3, #44]
 6899 00f8 0D4B     		ldr	r3, .L437+16
 6900 00fa 1B68     		ldr	r3, [r3]
 6901 00fc DB6A     		ldr	r3, [r3, #44]
 6902 00fe 9A42     		cmp	r2, r3
 6903 0100 05D9     		bls	.L431
4451:../../../FreeRTOS/Source/tasks.c **** 				{
4452:../../../FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4453:../../../FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4454:../../../FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 6904              		.loc 1 4454 0
 6905 0102 3B68     		ldr	r3, [r7]
 6906 0104 002B     		cmp	r3, #0
 6907 0106 02D0     		beq	.L431
4455:../../../FreeRTOS/Source/tasks.c **** 					{
4456:../../../FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 6908              		.loc 1 4456 0
 6909 0108 3B68     		ldr	r3, [r7]
 6910 010a 0122     		movs	r2, #1
 6911 010c 1A60     		str	r2, [r3]
 6912              	.L431:
 6913 010e 3B6A     		ldr	r3, [r7, #32]
 6914 0110 BB60     		str	r3, [r7, #8]
 6915              	.LBB183:
 6916              	.LBB184:
 6917              		.loc 2 249 0
 6918 0112 BB68     		ldr	r3, [r7, #8]
 6919              	@ 249 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6920 0114 83F31188 			msr basepri, r3	
 6921              	@ 0 "" 2
 6922              		.thumb
 6923              	.LBE184:
 6924              	.LBE183:
4457:../../../FreeRTOS/Source/tasks.c **** 					}
4458:../../../FreeRTOS/Source/tasks.c **** 				}
4459:../../../FreeRTOS/Source/tasks.c **** 				else
4460:../../../FreeRTOS/Source/tasks.c **** 				{
4461:../../../FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4462:../../../FreeRTOS/Source/tasks.c **** 				}
4463:../../../FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/cc7uEwzT.s 			page 204


4464:../../../FreeRTOS/Source/tasks.c **** 		}
4465:../../../FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4466:../../../FreeRTOS/Source/tasks.c **** 	}
 6925              		.loc 1 4466 0
 6926 0118 2837     		adds	r7, r7, #40
 6927              	.LCFI262:
 6928              		.cfi_def_cfa_offset 8
 6929 011a BD46     		mov	sp, r7
 6930              	.LCFI263:
 6931              		.cfi_def_cfa_register 13
 6932              		@ sp needed
 6933 011c 80BD     		pop	{r7, pc}
 6934              	.L438:
 6935 011e 00BF     		.align	2
 6936              	.L437:
 6937 0120 00000000 		.word	uxSchedulerSuspended
 6938 0124 00000000 		.word	uxTopReadyPriority
 6939 0128 00000000 		.word	pxReadyTasksLists
 6940 012c 00000000 		.word	xPendingReadyList
 6941 0130 00000000 		.word	pxCurrentTCB
 6942              		.cfi_endproc
 6943              	.LFE55:
 6945              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 6946              		.align	2
 6947              		.global	xTaskNotifyStateClear
 6948              		.thumb
 6949              		.thumb_func
 6951              	xTaskNotifyStateClear:
 6952              	.LFB56:
4467:../../../FreeRTOS/Source/tasks.c **** 
4468:../../../FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4469:../../../FreeRTOS/Source/tasks.c **** 
4470:../../../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4471:../../../FreeRTOS/Source/tasks.c **** 
4472:../../../FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4473:../../../FreeRTOS/Source/tasks.c **** 
4474:../../../FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4475:../../../FreeRTOS/Source/tasks.c **** 	{
 6953              		.loc 1 4475 0
 6954              		.cfi_startproc
 6955              		@ args = 0, pretend = 0, frame = 16
 6956              		@ frame_needed = 1, uses_anonymous_args = 0
 6957 0000 80B5     		push	{r7, lr}
 6958              	.LCFI264:
 6959              		.cfi_def_cfa_offset 8
 6960              		.cfi_offset 7, -8
 6961              		.cfi_offset 14, -4
 6962 0002 84B0     		sub	sp, sp, #16
 6963              	.LCFI265:
 6964              		.cfi_def_cfa_offset 24
 6965 0004 00AF     		add	r7, sp, #0
 6966              	.LCFI266:
 6967              		.cfi_def_cfa_register 7
 6968 0006 7860     		str	r0, [r7, #4]
4476:../../../FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
4477:../../../FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4478:../../../FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc7uEwzT.s 			page 205


4479:../../../FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTask;
 6969              		.loc 1 4479 0
 6970 0008 7B68     		ldr	r3, [r7, #4]
 6971 000a BB60     		str	r3, [r7, #8]
4480:../../../FreeRTOS/Source/tasks.c **** 
4481:../../../FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4482:../../../FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
4483:../../../FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( pxTCB );
 6972              		.loc 1 4483 0
 6973 000c BB68     		ldr	r3, [r7, #8]
 6974 000e 002B     		cmp	r3, #0
 6975 0010 02D1     		bne	.L440
 6976              		.loc 1 4483 0 is_stmt 0 discriminator 1
 6977 0012 0E4B     		ldr	r3, .L445
 6978 0014 1B68     		ldr	r3, [r3]
 6979 0016 00E0     		b	.L441
 6980              	.L440:
 6981              		.loc 1 4483 0 discriminator 2
 6982 0018 BB68     		ldr	r3, [r7, #8]
 6983              	.L441:
 6984              		.loc 1 4483 0 discriminator 4
 6985 001a BB60     		str	r3, [r7, #8]
4484:../../../FreeRTOS/Source/tasks.c **** 
4485:../../../FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 6986              		.loc 1 4485 0 is_stmt 1 discriminator 4
 6987 001c FFF7FEFF 		bl	vPortEnterCritical
4486:../../../FreeRTOS/Source/tasks.c **** 		{
4487:../../../FreeRTOS/Source/tasks.c **** 			if( pxTCB->eNotifyState == eNotified )
 6988              		.loc 1 4487 0 discriminator 4
 6989 0020 BB68     		ldr	r3, [r7, #8]
 6990 0022 93F85830 		ldrb	r3, [r3, #88]
 6991 0026 DBB2     		uxtb	r3, r3
 6992 0028 022B     		cmp	r3, #2
 6993 002a 06D1     		bne	.L442
4488:../../../FreeRTOS/Source/tasks.c **** 			{
4489:../../../FreeRTOS/Source/tasks.c **** 				pxTCB->eNotifyState = eNotWaitingNotification;
 6994              		.loc 1 4489 0
 6995 002c BB68     		ldr	r3, [r7, #8]
 6996 002e 0022     		movs	r2, #0
 6997 0030 83F85820 		strb	r2, [r3, #88]
4490:../../../FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 6998              		.loc 1 4490 0
 6999 0034 0123     		movs	r3, #1
 7000 0036 FB60     		str	r3, [r7, #12]
 7001 0038 01E0     		b	.L443
 7002              	.L442:
4491:../../../FreeRTOS/Source/tasks.c **** 			}
4492:../../../FreeRTOS/Source/tasks.c **** 			else
4493:../../../FreeRTOS/Source/tasks.c **** 			{
4494:../../../FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
 7003              		.loc 1 4494 0
 7004 003a 0023     		movs	r3, #0
 7005 003c FB60     		str	r3, [r7, #12]
 7006              	.L443:
4495:../../../FreeRTOS/Source/tasks.c **** 			}
4496:../../../FreeRTOS/Source/tasks.c **** 		}
4497:../../../FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
ARM GAS  /tmp/cc7uEwzT.s 			page 206


 7007              		.loc 1 4497 0
 7008 003e FFF7FEFF 		bl	vPortExitCritical
4498:../../../FreeRTOS/Source/tasks.c **** 
4499:../../../FreeRTOS/Source/tasks.c **** 		return xReturn;
 7009              		.loc 1 4499 0
 7010 0042 FB68     		ldr	r3, [r7, #12]
4500:../../../FreeRTOS/Source/tasks.c **** 	}
 7011              		.loc 1 4500 0
 7012 0044 1846     		mov	r0, r3
 7013 0046 1037     		adds	r7, r7, #16
 7014              	.LCFI267:
 7015              		.cfi_def_cfa_offset 8
 7016 0048 BD46     		mov	sp, r7
 7017              	.LCFI268:
 7018              		.cfi_def_cfa_register 13
 7019              		@ sp needed
 7020 004a 80BD     		pop	{r7, pc}
 7021              	.L446:
 7022              		.align	2
 7023              	.L445:
 7024 004c 00000000 		.word	pxCurrentTCB
 7025              		.cfi_endproc
 7026              	.LFE56:
 7028              		.text
 7029              	.Letext0:
 7030              		.file 3 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h"
 7031              		.file 4 "/usr/arm-none-eabi/include/machine/_default_types.h"
 7032              		.file 5 "/usr/arm-none-eabi/include/sys/_stdint.h"
 7033              		.file 6 "../../../FreeRTOS/Source/include/projdefs.h"
 7034              		.file 7 "../../../FreeRTOS/Source/include/list.h"
 7035              		.file 8 "../../../FreeRTOS/Source/include/task.h"
ARM GAS  /tmp/cc7uEwzT.s 			page 207


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tasks.c
     /tmp/cc7uEwzT.s:25     .bss.pxCurrentTCB:0000000000000000 pxCurrentTCB
     /tmp/cc7uEwzT.s:22     .bss.pxCurrentTCB:0000000000000000 $d
     /tmp/cc7uEwzT.s:28     .bss.pxReadyTasksLists:0000000000000000 $d
     /tmp/cc7uEwzT.s:31     .bss.pxReadyTasksLists:0000000000000000 pxReadyTasksLists
     /tmp/cc7uEwzT.s:34     .bss.xDelayedTaskList1:0000000000000000 $d
     /tmp/cc7uEwzT.s:37     .bss.xDelayedTaskList1:0000000000000000 xDelayedTaskList1
     /tmp/cc7uEwzT.s:40     .bss.xDelayedTaskList2:0000000000000000 $d
     /tmp/cc7uEwzT.s:43     .bss.xDelayedTaskList2:0000000000000000 xDelayedTaskList2
     /tmp/cc7uEwzT.s:46     .bss.pxDelayedTaskList:0000000000000000 $d
     /tmp/cc7uEwzT.s:49     .bss.pxDelayedTaskList:0000000000000000 pxDelayedTaskList
     /tmp/cc7uEwzT.s:52     .bss.pxOverflowDelayedTaskList:0000000000000000 $d
     /tmp/cc7uEwzT.s:55     .bss.pxOverflowDelayedTaskList:0000000000000000 pxOverflowDelayedTaskList
     /tmp/cc7uEwzT.s:58     .bss.xPendingReadyList:0000000000000000 $d
     /tmp/cc7uEwzT.s:61     .bss.xPendingReadyList:0000000000000000 xPendingReadyList
     /tmp/cc7uEwzT.s:64     .bss.xTasksWaitingTermination:0000000000000000 $d
     /tmp/cc7uEwzT.s:67     .bss.xTasksWaitingTermination:0000000000000000 xTasksWaitingTermination
     /tmp/cc7uEwzT.s:70     .bss.uxTasksDeleted:0000000000000000 $d
     /tmp/cc7uEwzT.s:73     .bss.uxTasksDeleted:0000000000000000 uxTasksDeleted
     /tmp/cc7uEwzT.s:76     .bss.xSuspendedTaskList:0000000000000000 $d
     /tmp/cc7uEwzT.s:79     .bss.xSuspendedTaskList:0000000000000000 xSuspendedTaskList
     /tmp/cc7uEwzT.s:82     .bss.uxCurrentNumberOfTasks:0000000000000000 $d
     /tmp/cc7uEwzT.s:85     .bss.uxCurrentNumberOfTasks:0000000000000000 uxCurrentNumberOfTasks
     /tmp/cc7uEwzT.s:88     .bss.xTickCount:0000000000000000 $d
     /tmp/cc7uEwzT.s:91     .bss.xTickCount:0000000000000000 xTickCount
     /tmp/cc7uEwzT.s:94     .bss.uxTopReadyPriority:0000000000000000 $d
     /tmp/cc7uEwzT.s:97     .bss.uxTopReadyPriority:0000000000000000 uxTopReadyPriority
     /tmp/cc7uEwzT.s:100    .bss.xSchedulerRunning:0000000000000000 $d
     /tmp/cc7uEwzT.s:103    .bss.xSchedulerRunning:0000000000000000 xSchedulerRunning
     /tmp/cc7uEwzT.s:106    .bss.uxPendedTicks:0000000000000000 $d
     /tmp/cc7uEwzT.s:109    .bss.uxPendedTicks:0000000000000000 uxPendedTicks
     /tmp/cc7uEwzT.s:112    .bss.xYieldPending:0000000000000000 $d
     /tmp/cc7uEwzT.s:115    .bss.xYieldPending:0000000000000000 xYieldPending
     /tmp/cc7uEwzT.s:118    .bss.xNumOfOverflows:0000000000000000 $d
     /tmp/cc7uEwzT.s:121    .bss.xNumOfOverflows:0000000000000000 xNumOfOverflows
     /tmp/cc7uEwzT.s:124    .bss.uxTaskNumber:0000000000000000 $d
     /tmp/cc7uEwzT.s:127    .bss.uxTaskNumber:0000000000000000 uxTaskNumber
     /tmp/cc7uEwzT.s:130    .bss.xNextTaskUnblockTime:0000000000000000 $d
     /tmp/cc7uEwzT.s:133    .bss.xNextTaskUnblockTime:0000000000000000 xNextTaskUnblockTime
     /tmp/cc7uEwzT.s:136    .bss.uxSchedulerSuspended:0000000000000000 $d
     /tmp/cc7uEwzT.s:139    .bss.uxSchedulerSuspended:0000000000000000 uxSchedulerSuspended
     /tmp/cc7uEwzT.s:142    .text.xTaskGenericCreate:0000000000000000 $t
     /tmp/cc7uEwzT.s:147    .text.xTaskGenericCreate:0000000000000000 xTaskGenericCreate
     /tmp/cc7uEwzT.s:4474   .text.prvAllocateTCBAndStack:0000000000000000 prvAllocateTCBAndStack
     /tmp/cc7uEwzT.s:4057   .text.prvInitialiseTCBVariables:0000000000000000 prvInitialiseTCBVariables
     /tmp/cc7uEwzT.s:4186   .text.prvInitialiseTaskLists:0000000000000000 prvInitialiseTaskLists
     /tmp/cc7uEwzT.s:449    .text.xTaskGenericCreate:00000000000001c4 $d
     /tmp/cc7uEwzT.s:460    .text.vTaskDelete:0000000000000000 $t
     /tmp/cc7uEwzT.s:465    .text.vTaskDelete:0000000000000000 vTaskDelete
     /tmp/cc7uEwzT.s:4882   .text.prvResetNextTaskUnblockTime:0000000000000000 prvResetNextTaskUnblockTime
     /tmp/cc7uEwzT.s:637    .text.vTaskDelete:00000000000000f4 $d
     /tmp/cc7uEwzT.s:650    .text.vTaskDelay:0000000000000000 $t
     /tmp/cc7uEwzT.s:655    .text.vTaskDelay:0000000000000000 vTaskDelay
     /tmp/cc7uEwzT.s:2047   .text.vTaskSuspendAll:0000000000000000 vTaskSuspendAll
     /tmp/cc7uEwzT.s:4377   .text.prvAddCurrentTaskToDelayedList:0000000000000000 prvAddCurrentTaskToDelayedList
     /tmp/cc7uEwzT.s:2090   .text.xTaskResumeAll:0000000000000000 xTaskResumeAll
ARM GAS  /tmp/cc7uEwzT.s 			page 208


     /tmp/cc7uEwzT.s:773    .text.vTaskDelay:0000000000000098 $d
     /tmp/cc7uEwzT.s:782    .text.uxTaskPriorityGet:0000000000000000 $t
     /tmp/cc7uEwzT.s:787    .text.uxTaskPriorityGet:0000000000000000 uxTaskPriorityGet
     /tmp/cc7uEwzT.s:842    .text.uxTaskPriorityGet:0000000000000030 $d
     /tmp/cc7uEwzT.s:847    .text.uxTaskPriorityGetFromISR:0000000000000000 $t
     /tmp/cc7uEwzT.s:852    .text.uxTaskPriorityGetFromISR:0000000000000000 uxTaskPriorityGetFromISR
     /tmp/cc7uEwzT.s:937    .text.uxTaskPriorityGetFromISR:0000000000000054 $d
     /tmp/cc7uEwzT.s:942    .text.vTaskPrioritySet:0000000000000000 $t
     /tmp/cc7uEwzT.s:947    .text.vTaskPrioritySet:0000000000000000 vTaskPrioritySet
     /tmp/cc7uEwzT.s:1207   .text.vTaskPrioritySet:0000000000000180 $d
     /tmp/cc7uEwzT.s:1215   .text.vTaskSuspend:0000000000000000 $t
     /tmp/cc7uEwzT.s:1220   .text.vTaskSuspend:0000000000000000 vTaskSuspend
     /tmp/cc7uEwzT.s:2865   .text.vTaskSwitchContext:0000000000000000 vTaskSwitchContext
     /tmp/cc7uEwzT.s:1407   .text.vTaskSuspend:000000000000010c $d
     /tmp/cc7uEwzT.s:1419   .text.prvTaskIsTaskSuspended:0000000000000000 $t
     /tmp/cc7uEwzT.s:1423   .text.prvTaskIsTaskSuspended:0000000000000000 prvTaskIsTaskSuspended
     /tmp/cc7uEwzT.s:1529   .text.prvTaskIsTaskSuspended:000000000000006c $d
     /tmp/cc7uEwzT.s:1535   .text.vTaskResume:0000000000000000 $t
     /tmp/cc7uEwzT.s:1540   .text.vTaskResume:0000000000000000 vTaskResume
     /tmp/cc7uEwzT.s:1676   .text.vTaskResume:00000000000000c4 $d
     /tmp/cc7uEwzT.s:1684   .text.xTaskResumeFromISR:0000000000000000 $t
     /tmp/cc7uEwzT.s:1689   .text.xTaskResumeFromISR:0000000000000000 xTaskResumeFromISR
     /tmp/cc7uEwzT.s:1856   .text.xTaskResumeFromISR:00000000000000e8 $d
     /tmp/cc7uEwzT.s:1865   .rodata:0000000000000000 $d
     /tmp/cc7uEwzT.s:1869   .text.vTaskStartScheduler:0000000000000000 $t
     /tmp/cc7uEwzT.s:1874   .text.vTaskStartScheduler:0000000000000000 vTaskStartScheduler
     /tmp/cc7uEwzT.s:1974   .text.vTaskStartScheduler:0000000000000078 $d
     /tmp/cc7uEwzT.s:4004   .text.prvIdleTask:0000000000000000 prvIdleTask
     /tmp/cc7uEwzT.s:1983   .text.vTaskEndScheduler:0000000000000000 $t
     /tmp/cc7uEwzT.s:1988   .text.vTaskEndScheduler:0000000000000000 vTaskEndScheduler
     /tmp/cc7uEwzT.s:2037   .text.vTaskEndScheduler:0000000000000028 $d
     /tmp/cc7uEwzT.s:2042   .text.vTaskSuspendAll:0000000000000000 $t
     /tmp/cc7uEwzT.s:2080   .text.vTaskSuspendAll:0000000000000018 $d
     /tmp/cc7uEwzT.s:2085   .text.xTaskResumeAll:0000000000000000 $t
     /tmp/cc7uEwzT.s:2601   .text.xTaskIncrementTick:0000000000000000 xTaskIncrementTick
     /tmp/cc7uEwzT.s:2282   .text.xTaskResumeAll:0000000000000110 $d
     /tmp/cc7uEwzT.s:2295   .text.xTaskGetTickCount:0000000000000000 $t
     /tmp/cc7uEwzT.s:2300   .text.xTaskGetTickCount:0000000000000000 xTaskGetTickCount
     /tmp/cc7uEwzT.s:2340   .text.xTaskGetTickCount:000000000000001c $d
     /tmp/cc7uEwzT.s:2345   .text.xTaskGetTickCountFromISR:0000000000000000 $t
     /tmp/cc7uEwzT.s:2350   .text.xTaskGetTickCountFromISR:0000000000000000 xTaskGetTickCountFromISR
     /tmp/cc7uEwzT.s:2391   .text.xTaskGetTickCountFromISR:0000000000000020 $d
     /tmp/cc7uEwzT.s:2396   .text.uxTaskGetNumberOfTasks:0000000000000000 $t
     /tmp/cc7uEwzT.s:2401   .text.uxTaskGetNumberOfTasks:0000000000000000 uxTaskGetNumberOfTasks
     /tmp/cc7uEwzT.s:2432   .text.uxTaskGetNumberOfTasks:0000000000000014 $d
     /tmp/cc7uEwzT.s:2437   .text.uxTaskGetSystemState:0000000000000000 $t
     /tmp/cc7uEwzT.s:2442   .text.uxTaskGetSystemState:0000000000000000 uxTaskGetSystemState
     /tmp/cc7uEwzT.s:4574   .text.prvListTaskWithinSingleList:0000000000000000 prvListTaskWithinSingleList
     /tmp/cc7uEwzT.s:2586   .text.uxTaskGetSystemState:00000000000000e0 $d
     /tmp/cc7uEwzT.s:2596   .text.xTaskIncrementTick:0000000000000000 $t
     /tmp/cc7uEwzT.s:2845   .text.xTaskIncrementTick:000000000000015c $d
     /tmp/cc7uEwzT.s:2860   .text.vTaskSwitchContext:0000000000000000 $t
     /tmp/cc7uEwzT.s:3015   .text.vTaskSwitchContext:00000000000000c0 $d
     /tmp/cc7uEwzT.s:3025   .text.vTaskPlaceOnEventList:0000000000000000 $t
     /tmp/cc7uEwzT.s:3030   .text.vTaskPlaceOnEventList:0000000000000000 vTaskPlaceOnEventList
     /tmp/cc7uEwzT.s:3142   .text.vTaskPlaceOnEventList:0000000000000098 $d
     /tmp/cc7uEwzT.s:3150   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 $t
ARM GAS  /tmp/cc7uEwzT.s 			page 209


     /tmp/cc7uEwzT.s:3155   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 vTaskPlaceOnUnorderedEventList
     /tmp/cc7uEwzT.s:3297   .text.vTaskPlaceOnUnorderedEventList:00000000000000c0 $d
     /tmp/cc7uEwzT.s:3306   .text.xTaskRemoveFromEventList:0000000000000000 $t
     /tmp/cc7uEwzT.s:3311   .text.xTaskRemoveFromEventList:0000000000000000 xTaskRemoveFromEventList
     /tmp/cc7uEwzT.s:3443   .text.xTaskRemoveFromEventList:00000000000000b8 $d
     /tmp/cc7uEwzT.s:3453   .text.xTaskRemoveFromUnorderedEventList:0000000000000000 $t
     /tmp/cc7uEwzT.s:3458   .text.xTaskRemoveFromUnorderedEventList:0000000000000000 xTaskRemoveFromUnorderedEventList
     /tmp/cc7uEwzT.s:3602   .text.xTaskRemoveFromUnorderedEventList:00000000000000c4 $d
     /tmp/cc7uEwzT.s:3611   .text.vTaskSetTimeOutState:0000000000000000 $t
     /tmp/cc7uEwzT.s:3616   .text.vTaskSetTimeOutState:0000000000000000 vTaskSetTimeOutState
     /tmp/cc7uEwzT.s:3682   .text.vTaskSetTimeOutState:000000000000003c $d
     /tmp/cc7uEwzT.s:3688   .text.xTaskCheckForTimeOut:0000000000000000 $t
     /tmp/cc7uEwzT.s:3693   .text.xTaskCheckForTimeOut:0000000000000000 xTaskCheckForTimeOut
     /tmp/cc7uEwzT.s:3840   .text.xTaskCheckForTimeOut:00000000000000b4 $d
     /tmp/cc7uEwzT.s:3846   .text.vTaskMissedYield:0000000000000000 $t
     /tmp/cc7uEwzT.s:3851   .text.vTaskMissedYield:0000000000000000 vTaskMissedYield
     /tmp/cc7uEwzT.s:3882   .text.vTaskMissedYield:0000000000000014 $d
     /tmp/cc7uEwzT.s:3887   .text.uxTaskGetTaskNumber:0000000000000000 $t
     /tmp/cc7uEwzT.s:3892   .text.uxTaskGetTaskNumber:0000000000000000 uxTaskGetTaskNumber
     /tmp/cc7uEwzT.s:3947   .text.vTaskSetTaskNumber:0000000000000000 $t
     /tmp/cc7uEwzT.s:3952   .text.vTaskSetTaskNumber:0000000000000000 vTaskSetTaskNumber
     /tmp/cc7uEwzT.s:4000   .text.prvIdleTask:0000000000000000 $t
     /tmp/cc7uEwzT.s:4278   .text.prvCheckTasksWaitingTermination:0000000000000000 prvCheckTasksWaitingTermination
     /tmp/cc7uEwzT.s:4047   .text.prvIdleTask:0000000000000028 $d
     /tmp/cc7uEwzT.s:4053   .text.prvInitialiseTCBVariables:0000000000000000 $t
     /tmp/cc7uEwzT.s:4182   .text.prvInitialiseTaskLists:0000000000000000 $t
     /tmp/cc7uEwzT.s:4262   .text.prvInitialiseTaskLists:000000000000005c $d
     /tmp/cc7uEwzT.s:4274   .text.prvCheckTasksWaitingTermination:0000000000000000 $t
     /tmp/cc7uEwzT.s:4839   .text.prvDeleteTCB:0000000000000000 prvDeleteTCB
     /tmp/cc7uEwzT.s:4366   .text.prvCheckTasksWaitingTermination:0000000000000068 $d
     /tmp/cc7uEwzT.s:4373   .text.prvAddCurrentTaskToDelayedList:0000000000000000 $t
     /tmp/cc7uEwzT.s:4461   .text.prvAddCurrentTaskToDelayedList:0000000000000070 $d
     /tmp/cc7uEwzT.s:4470   .text.prvAllocateTCBAndStack:0000000000000000 $t
     /tmp/cc7uEwzT.s:4570   .text.prvListTaskWithinSingleList:0000000000000000 $t
     /tmp/cc7uEwzT.s:4772   .text.prvTaskCheckFreeStackSpace:0000000000000000 prvTaskCheckFreeStackSpace
     /tmp/cc7uEwzT.s:4768   .text.prvTaskCheckFreeStackSpace:0000000000000000 $t
     /tmp/cc7uEwzT.s:4835   .text.prvDeleteTCB:0000000000000000 $t
     /tmp/cc7uEwzT.s:4878   .text.prvResetNextTaskUnblockTime:0000000000000000 $t
     /tmp/cc7uEwzT.s:4949   .text.prvResetNextTaskUnblockTime:0000000000000040 $d
     /tmp/cc7uEwzT.s:4955   .text.xTaskGetCurrentTaskHandle:0000000000000000 $t
     /tmp/cc7uEwzT.s:4960   .text.xTaskGetCurrentTaskHandle:0000000000000000 xTaskGetCurrentTaskHandle
     /tmp/cc7uEwzT.s:5000   .text.xTaskGetCurrentTaskHandle:000000000000001c $d
     /tmp/cc7uEwzT.s:5005   .text.xTaskGetSchedulerState:0000000000000000 $t
     /tmp/cc7uEwzT.s:5010   .text.xTaskGetSchedulerState:0000000000000000 xTaskGetSchedulerState
     /tmp/cc7uEwzT.s:5070   .text.xTaskGetSchedulerState:0000000000000034 $d
     /tmp/cc7uEwzT.s:5076   .text.vTaskPriorityInherit:0000000000000000 $t
     /tmp/cc7uEwzT.s:5081   .text.vTaskPriorityInherit:0000000000000000 vTaskPriorityInherit
     /tmp/cc7uEwzT.s:5240   .text.vTaskPriorityInherit:00000000000000ec $d
     /tmp/cc7uEwzT.s:5247   .text.xTaskPriorityDisinherit:0000000000000000 $t
     /tmp/cc7uEwzT.s:5252   .text.xTaskPriorityDisinherit:0000000000000000 xTaskPriorityDisinherit
     /tmp/cc7uEwzT.s:5437   .text.xTaskPriorityDisinherit:0000000000000108 $d
     /tmp/cc7uEwzT.s:5444   .text.prvWriteNameToBuffer:0000000000000000 $t
     /tmp/cc7uEwzT.s:5448   .text.prvWriteNameToBuffer:0000000000000000 prvWriteNameToBuffer
     /tmp/cc7uEwzT.s:5520   .text.vTaskList:0000000000000000 $t
     /tmp/cc7uEwzT.s:5525   .text.vTaskList:0000000000000000 vTaskList
     /tmp/cc7uEwzT.s:5590   .text.vTaskList:0000000000000054 $d
     /tmp/cc7uEwzT.s:5594   .text.vTaskList:0000000000000064 $t
ARM GAS  /tmp/cc7uEwzT.s 			page 210


     /tmp/cc7uEwzT.s:5694   .text.vTaskList:00000000000000f0 $d
     /tmp/cc7uEwzT.s:5700   .text.uxTaskResetEventItemValue:0000000000000000 $t
     /tmp/cc7uEwzT.s:5705   .text.uxTaskResetEventItemValue:0000000000000000 uxTaskResetEventItemValue
     /tmp/cc7uEwzT.s:5754   .text.uxTaskResetEventItemValue:000000000000002c $d
     /tmp/cc7uEwzT.s:5759   .text.pvTaskIncrementMutexHeldCount:0000000000000000 $t
     /tmp/cc7uEwzT.s:5764   .text.pvTaskIncrementMutexHeldCount:0000000000000000 pvTaskIncrementMutexHeldCount
     /tmp/cc7uEwzT.s:5807   .text.pvTaskIncrementMutexHeldCount:0000000000000024 $d
     /tmp/cc7uEwzT.s:5812   .text.ulTaskNotifyTake:0000000000000000 $t
     /tmp/cc7uEwzT.s:5817   .text.ulTaskNotifyTake:0000000000000000 ulTaskNotifyTake
     /tmp/cc7uEwzT.s:5976   .text.ulTaskNotifyTake:00000000000000ec $d
     /tmp/cc7uEwzT.s:5985   .text.xTaskNotifyWait:0000000000000000 $t
     /tmp/cc7uEwzT.s:5990   .text.xTaskNotifyWait:0000000000000000 xTaskNotifyWait
     /tmp/cc7uEwzT.s:6172   .text.xTaskNotifyWait:0000000000000114 $d
     /tmp/cc7uEwzT.s:6181   .text.xTaskGenericNotify:0000000000000000 $t
     /tmp/cc7uEwzT.s:6186   .text.xTaskGenericNotify:0000000000000000 xTaskGenericNotify
     /tmp/cc7uEwzT.s:6265   .text.xTaskGenericNotify:0000000000000060 $d
     /tmp/cc7uEwzT.s:6270   .text.xTaskGenericNotify:0000000000000074 $t
     /tmp/cc7uEwzT.s:6425   .text.xTaskGenericNotify:0000000000000158 $d
     /tmp/cc7uEwzT.s:6433   .text.xTaskGenericNotifyFromISR:0000000000000000 $t
     /tmp/cc7uEwzT.s:6438   .text.xTaskGenericNotifyFromISR:0000000000000000 xTaskGenericNotifyFromISR
     /tmp/cc7uEwzT.s:6537   .text.xTaskGenericNotifyFromISR:0000000000000080 $d
     /tmp/cc7uEwzT.s:6542   .text.xTaskGenericNotifyFromISR:0000000000000094 $t
     /tmp/cc7uEwzT.s:6719   .text.xTaskGenericNotifyFromISR:0000000000000198 $d
     /tmp/cc7uEwzT.s:6728   .text.vTaskNotifyGiveFromISR:0000000000000000 $t
     /tmp/cc7uEwzT.s:6733   .text.vTaskNotifyGiveFromISR:0000000000000000 vTaskNotifyGiveFromISR
     /tmp/cc7uEwzT.s:6937   .text.vTaskNotifyGiveFromISR:0000000000000120 $d
     /tmp/cc7uEwzT.s:6946   .text.xTaskNotifyStateClear:0000000000000000 $t
     /tmp/cc7uEwzT.s:6951   .text.xTaskNotifyStateClear:0000000000000000 xTaskNotifyStateClear
     /tmp/cc7uEwzT.s:7024   .text.xTaskNotifyStateClear:000000000000004c $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
pxPortInitialiseStack
vPortEnterCritical
SEGGER_SYSVIEW_OnTaskCreate
SYSVIEW_AddTask
SEGGER_SYSVIEW_OnTaskStartReady
vListInsertEnd
vPortExitCritical
uxListRemove
SEGGER_SYSVIEW_ShrinkId
SEGGER_SYSVIEW_RecordU32
vPortValidateInterruptPriority
SEGGER_SYSVIEW_RecordU32x2
SYSVIEW_UpdateTask
SEGGER_SYSVIEW_OnTaskStopReady
xPortStartScheduler
vPortEndScheduler
memcmp
SEGGER_SYSVIEW_OnTaskStartExec
SEGGER_SYSVIEW_OnIdle
vListInsert
vListInitialiseItem
vListInitialise
pvPortMalloc
vPortFree
memset
ARM GAS  /tmp/cc7uEwzT.s 			page 211


strcpy
strlen
sprintf
SYSVIEW_RecordU32x4
SYSVIEW_RecordU32x5
