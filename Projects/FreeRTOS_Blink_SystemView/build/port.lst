ARM GAS  /tmp/cc6cfuTD.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"port.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.data.uxCriticalNesting,"aw",%progbits
  21              		.align	2
  24              	uxCriticalNesting:
  25 0000 AAAAAAAA 		.word	-1431655766
  26              		.section	.bss.ucMaxSysCallPriority,"aw",%nobits
  29              	ucMaxSysCallPriority:
  30 0000 00       		.space	1
  31              		.section	.bss.ulMaxPRIGROUPValue,"aw",%nobits
  32              		.align	2
  35              	ulMaxPRIGROUPValue:
  36 0000 00000000 		.space	4
  37              		.section	.rodata.pcInterruptPriorityRegisters,"a",%progbits
  38              		.align	2
  41              	pcInterruptPriorityRegisters:
  42 0000 F0E300E0 		.word	-536812560
  43              		.section	.text.pxPortInitialiseStack,"ax",%progbits
  44              		.align	2
  45              		.global	pxPortInitialiseStack
  46              		.thumb
  47              		.thumb_func
  49              	pxPortInitialiseStack:
  50              	.LFB4:
  51              		.file 1 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c"
   1:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
   2:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     FreeRTOS V8.2.3 - Copyright (C) 2015 Real Time Engineers Ltd.
   3:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     All rights reserved
   4:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
   5:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
   7:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     This file is part of the FreeRTOS distribution.
   8:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
   9:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  13:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     ***************************************************************************
  14:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
ARM GAS  /tmp/cc6cfuTD.s 			page 2


  16:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     ***************************************************************************
  19:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  20:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     link: http://www.freertos.org/a00114.html
  24:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  25:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     ***************************************************************************
  26:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  27:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    platform software that is more than just the market leader, it     *
  30:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    is the industry's de facto standard.                               *
  31:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  32:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    tutorial book, reference manual, or both:                          *
  35:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  37:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     ***************************************************************************
  38:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  39:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     defined configASSERT()?
  42:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  43:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     embedded software for free we request you assist our global community by
  45:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     participating in the support forum.
  46:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  47:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     be as productive as possible as early as possible.  Now you can receive
  49:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  52:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  56:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  59:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  63:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     engineered and independently SIL3 certified version for use in safety and
  65:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     mission critical applications that require provable dependability.
  66:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  67:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     1 tab == 4 spaces!
  68:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** */
  69:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  70:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------
  71:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Implementation of functions defined in portable.h for the ARM CM4F port.
  72:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  *----------------------------------------------------------*/
ARM GAS  /tmp/cc6cfuTD.s 			page 3


  73:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  74:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Scheduler includes. */
  75:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #include "FreeRTOS.h"
  76:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #include "task.h"
  77:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  78:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #ifndef __VFP_FP__
  79:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#error This port can only be used when the project options are configured to enable hardware float
  80:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #endif
  81:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  82:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #ifndef configSYSTICK_CLOCK_HZ
  83:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#define configSYSTICK_CLOCK_HZ configCPU_CLOCK_HZ
  84:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Ensure the SysTick is clocked at the same frequency as the core. */
  85:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#define portNVIC_SYSTICK_CLK_BIT	( 1UL << 2UL )
  86:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #else
  87:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* The way the SysTick is clocked is not modified in case it is not the same
  88:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	as the core. */
  89:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#define portNVIC_SYSTICK_CLK_BIT	( 0 )
  90:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #endif
  91:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  92:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Constants required to manipulate the core.  Registers first... */
  93:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_CTRL_REG			( * ( ( volatile uint32_t * ) 0xe000e010 ) )
  94:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_LOAD_REG			( * ( ( volatile uint32_t * ) 0xe000e014 ) )
  95:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_CURRENT_VALUE_REG	( * ( ( volatile uint32_t * ) 0xe000e018 ) )
  96:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSPRI2_REG				( * ( ( volatile uint32_t * ) 0xe000ed20 ) )
  97:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* ...then bits in the registers. */
  98:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_INT_BIT			( 1UL << 1UL )
  99:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_ENABLE_BIT			( 1UL << 0UL )
 100:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_COUNT_FLAG_BIT		( 1UL << 16UL )
 101:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_PENDSVCLEAR_BIT 			( 1UL << 27UL )
 102:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_PEND_SYSTICK_CLEAR_BIT		( 1UL << 25UL )
 103:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 104:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Constants used to detect a Cortex-M7 r0p1 core, which should use the ARM_CM7
 105:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** r0p1 port. */
 106:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portCPUID							( * ( ( volatile uint32_t * ) 0xE000ed00 ) )
 107:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portCORTEX_M7_r0p1_ID				( 0x410FC271UL )
 108:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portCORTEX_M7_r0p0_ID				( 0x410FC270UL )
 109:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 110:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_PENDSV_PRI					( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) << 16UL )
 111:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_PRI				( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) << 24UL )
 112:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 113:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Constants required to check the validity of an interrupt priority. */
 114:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portFIRST_USER_INTERRUPT_NUMBER		( 16 )
 115:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_IP_REGISTERS_OFFSET_16 	( 0xE000E3F0 )
 116:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portAIRCR_REG						( * ( ( volatile uint32_t * ) 0xE000ED0C ) )
 117:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portMAX_8_BIT_VALUE					( ( uint8_t ) 0xff )
 118:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portTOP_BIT_OF_BYTE					( ( uint8_t ) 0x80 )
 119:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portMAX_PRIGROUP_BITS				( ( uint8_t ) 7 )
 120:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portPRIORITY_GROUP_MASK				( 0x07UL << 8UL )
 121:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portPRIGROUP_SHIFT					( 8UL )
 122:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 123:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Masks off all bits but the VECTACTIVE bits in the ICSR register. */
 124:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portVECTACTIVE_MASK					( 0xFFUL )
 125:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 126:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Constants required to manipulate the VFP. */
 127:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portFPCCR							( ( volatile uint32_t * ) 0xe000ef34 ) /* Floating point context control re
 128:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portASPEN_AND_LSPEN_BITS			( 0x3UL << 30UL )
 129:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
ARM GAS  /tmp/cc6cfuTD.s 			page 4


 130:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Constants required to set up the initial stack. */
 131:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portINITIAL_XPSR					( 0x01000000 )
 132:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portINITIAL_EXEC_RETURN				( 0xfffffffd )
 133:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 134:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* The systick is a 24-bit counter. */
 135:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portMAX_24_BIT_NUMBER				( 0xffffffUL )
 136:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 137:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* A fiddle factor to estimate the number of SysTick counts that would have
 138:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** occurred while the SysTick counter is stopped during tickless idle
 139:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** calculations. */
 140:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portMISSED_COUNTS_FACTOR			( 45UL )
 141:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 142:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Let the user override the pre-loading of the initial LR with the address of
 143:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** prvTaskExitError() in case it messes up unwinding of the stack in the
 144:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** debugger. */
 145:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #ifdef configTASK_RETURN_ADDRESS
 146:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#define portTASK_RETURN_ADDRESS	configTASK_RETURN_ADDRESS
 147:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #else
 148:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#define portTASK_RETURN_ADDRESS	prvTaskExitError
 149:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #endif
 150:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 151:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Each task maintains its own interrupt status in the critical nesting
 152:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** variable. */
 153:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** static UBaseType_t uxCriticalNesting = 0xaaaaaaaa;
 154:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 155:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 156:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Setup the timer to generate the tick interrupts.  The implementation in this
 157:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * file is weak to allow application writers to change the timer used to
 158:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * generate the tick interrupt.
 159:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 160:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortSetupTimerInterrupt( void );
 161:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 162:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 163:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Exception handlers.
 164:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 165:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void xPortPendSVHandler( void ) __attribute__ (( naked ));
 166:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void xPortSysTickHandler( void );
 167:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortSVCHandler( void ) __attribute__ (( naked ));
 168:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 169:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 170:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Start first task is a separate function so it can be tested in isolation.
 171:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 172:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** static void prvPortStartFirstTask( void ) __attribute__ (( naked ));
 173:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 174:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 175:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Function to enable the VFP.
 176:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 177:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  static void vPortEnableVFP( void ) __attribute__ (( naked ));
 178:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 179:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 180:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Used to catch tasks that attempt to return from their implementing function.
 181:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 182:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** static void prvTaskExitError( void );
 183:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 184:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 185:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 186:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
ARM GAS  /tmp/cc6cfuTD.s 			page 5


 187:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * The number of SysTick increments that make up one tick period.
 188:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 189:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #if configUSE_TICKLESS_IDLE == 1
 190:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	static uint32_t ulTimerCountsForOneTick = 0;
 191:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 192:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 193:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 194:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * The maximum number of tick periods that can be suppressed is limited by the
 195:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * 24 bit resolution of the SysTick timer.
 196:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 197:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #if configUSE_TICKLESS_IDLE == 1
 198:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	static uint32_t xMaximumPossibleSuppressedTicks = 0;
 199:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 200:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 201:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 202:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Compensate for the CPU cycles that pass while the SysTick is stopped (low
 203:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * power functionality only.
 204:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 205:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #if configUSE_TICKLESS_IDLE == 1
 206:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	static uint32_t ulStoppedTimerCompensation = 0;
 207:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 208:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 209:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 210:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Used by the portASSERT_IF_INTERRUPT_PRIORITY_INVALID() macro to ensure
 211:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * FreeRTOS API functions are not called from interrupts that have been assigned
 212:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * a priority above configMAX_SYSCALL_INTERRUPT_PRIORITY.
 213:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 214:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #if ( configASSERT_DEFINED == 1 )
 215:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	 static uint8_t ucMaxSysCallPriority = 0;
 216:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	 static uint32_t ulMaxPRIGROUPValue = 0;
 217:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	 static const volatile uint8_t * const pcInterruptPriorityRegisters = ( const volatile uint8_t * c
 218:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #endif /* configASSERT_DEFINED */
 219:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 220:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 221:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 222:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 223:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * See header file for description.
 224:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 225:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParam
 226:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
  52              		.loc 1 226 0
  53              		.cfi_startproc
  54              		@ args = 0, pretend = 0, frame = 16
  55              		@ frame_needed = 1, uses_anonymous_args = 0
  56              		@ link register save eliminated.
  57 0000 80B4     		push	{r7}
  58              	.LCFI0:
  59              		.cfi_def_cfa_offset 4
  60              		.cfi_offset 7, -4
  61 0002 85B0     		sub	sp, sp, #20
  62              	.LCFI1:
  63              		.cfi_def_cfa_offset 24
  64 0004 00AF     		add	r7, sp, #0
  65              	.LCFI2:
  66              		.cfi_def_cfa_register 7
  67 0006 F860     		str	r0, [r7, #12]
  68 0008 B960     		str	r1, [r7, #8]
ARM GAS  /tmp/cc6cfuTD.s 			page 6


  69 000a 7A60     		str	r2, [r7, #4]
 227:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
 228:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	interrupt. */
 229:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 230:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Offset added to account for the way the MCU uses the stack on entry/exit
 231:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	of interrupts, and to ensure alignment. */
 232:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
  70              		.loc 1 232 0
  71 000c FB68     		ldr	r3, [r7, #12]
  72 000e 043B     		subs	r3, r3, #4
  73 0010 FB60     		str	r3, [r7, #12]
 233:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 234:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  74              		.loc 1 234 0
  75 0012 FB68     		ldr	r3, [r7, #12]
  76 0014 4FF08072 		mov	r2, #16777216
  77 0018 1A60     		str	r2, [r3]
 235:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
  78              		.loc 1 235 0
  79 001a FB68     		ldr	r3, [r7, #12]
  80 001c 043B     		subs	r3, r3, #4
  81 001e FB60     		str	r3, [r7, #12]
 236:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  82              		.loc 1 236 0
  83 0020 BA68     		ldr	r2, [r7, #8]
  84 0022 FB68     		ldr	r3, [r7, #12]
  85 0024 1A60     		str	r2, [r3]
 237:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
  86              		.loc 1 237 0
  87 0026 FB68     		ldr	r3, [r7, #12]
  88 0028 043B     		subs	r3, r3, #4
  89 002a FB60     		str	r3, [r7, #12]
 238:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  90              		.loc 1 238 0
  91 002c 0C4A     		ldr	r2, .L3
  92 002e FB68     		ldr	r3, [r7, #12]
  93 0030 1A60     		str	r2, [r3]
 239:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 240:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Save code space by skipping register initialisation. */
 241:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
  94              		.loc 1 241 0
  95 0032 FB68     		ldr	r3, [r7, #12]
  96 0034 143B     		subs	r3, r3, #20
  97 0036 FB60     		str	r3, [r7, #12]
 242:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  98              		.loc 1 242 0
  99 0038 7A68     		ldr	r2, [r7, #4]
 100 003a FB68     		ldr	r3, [r7, #12]
 101 003c 1A60     		str	r2, [r3]
 243:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 244:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* A save method is being used that requires each task to maintain its
 245:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	own exec return value. */
 246:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
 102              		.loc 1 246 0
 103 003e FB68     		ldr	r3, [r7, #12]
 104 0040 043B     		subs	r3, r3, #4
 105 0042 FB60     		str	r3, [r7, #12]
ARM GAS  /tmp/cc6cfuTD.s 			page 7


 247:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 106              		.loc 1 247 0
 107 0044 FB68     		ldr	r3, [r7, #12]
 108 0046 6FF00202 		mvn	r2, #2
 109 004a 1A60     		str	r2, [r3]
 248:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 249:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 110              		.loc 1 249 0
 111 004c FB68     		ldr	r3, [r7, #12]
 112 004e 203B     		subs	r3, r3, #32
 113 0050 FB60     		str	r3, [r7, #12]
 250:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 251:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	return pxTopOfStack;
 114              		.loc 1 251 0
 115 0052 FB68     		ldr	r3, [r7, #12]
 252:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 116              		.loc 1 252 0
 117 0054 1846     		mov	r0, r3
 118 0056 1437     		adds	r7, r7, #20
 119              	.LCFI3:
 120              		.cfi_def_cfa_offset 4
 121 0058 BD46     		mov	sp, r7
 122              	.LCFI4:
 123              		.cfi_def_cfa_register 13
 124              		@ sp needed
 125 005a 5DF8047B 		ldr	r7, [sp], #4
 126              	.LCFI5:
 127              		.cfi_restore 7
 128              		.cfi_def_cfa_offset 0
 129 005e 7047     		bx	lr
 130              	.L4:
 131              		.align	2
 132              	.L3:
 133 0060 00000000 		.word	prvTaskExitError
 134              		.cfi_endproc
 135              	.LFE4:
 137              		.section	.text.prvTaskExitError,"ax",%progbits
 138              		.align	2
 139              		.thumb
 140              		.thumb_func
 142              	prvTaskExitError:
 143              	.LFB5:
 253:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 254:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 255:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** static void prvTaskExitError( void )
 256:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 144              		.loc 1 256 0
 145              		.cfi_startproc
 146              		@ args = 0, pretend = 0, frame = 8
 147              		@ frame_needed = 1, uses_anonymous_args = 0
 148              		@ link register save eliminated.
 149 0000 80B4     		push	{r7}
 150              	.LCFI6:
 151              		.cfi_def_cfa_offset 4
 152              		.cfi_offset 7, -4
 153 0002 83B0     		sub	sp, sp, #12
 154              	.LCFI7:
ARM GAS  /tmp/cc6cfuTD.s 			page 8


 155              		.cfi_def_cfa_offset 16
 156 0004 00AF     		add	r7, sp, #0
 157              	.LCFI8:
 158              		.cfi_def_cfa_register 7
 257:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* A function that implements a task must not exit or attempt to return to
 258:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	its caller as there is nothing to return to.  If a task wants to exit it
 259:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	should instead call vTaskDelete( NULL ).
 260:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 261:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	Artificially force an assert() to be triggered if configASSERT() is
 262:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	defined, then stop here so application writers can catch the error. */
 263:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	configASSERT( uxCriticalNesting == ~0UL );
 159              		.loc 1 263 0
 160 0006 0C4B     		ldr	r3, .L9
 161 0008 1B68     		ldr	r3, [r3]
 162 000a B3F1FF3F 		cmp	r3, #-1
 163 000e 09D0     		beq	.L6
 164              	.LBB29:
 165              	.LBB30:
 166              		.file 2 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS V8.2.3 - Copyright (C) 2015 Real Time Engineers Ltd.
   3:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     All rights reserved
   4:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   5:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   7:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   9:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  13:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  14:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  19:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  20:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  25:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  26:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  27:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  32:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  37:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  38:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /tmp/cc6cfuTD.s 			page 9


  39:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     defined configASSERT()?
  42:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  43:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     embedded software for free we request you assist our global community by
  45:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     participating in the support forum.
  46:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  47:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  52:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  56:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  63:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     mission critical applications that require provable dependability.
  66:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  67:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     1 tab == 4 spaces!
  68:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** */
  69:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  70:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  71:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  72:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  73:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  74:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  75:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  76:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  77:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  79:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  80:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  81:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  83:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  84:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  85:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  86:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  87:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  88:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  89:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  90:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  91:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  92:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  93:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  94:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
ARM GAS  /tmp/cc6cfuTD.s 			page 10


  96:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  97:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  99:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
 100:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 101:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
 103:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
 105:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
 106:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
 110:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 112:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 113:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 114:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
 115:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 119:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 120:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
 121:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
 122:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
 123:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
 126:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
 130:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 131:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 132:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) { if( xSwitchRequired != pdFALSE ) { traceISR_EXIT
 135:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 137:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
 139:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
 140:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
 141:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 148:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 149:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
ARM GAS  /tmp/cc6cfuTD.s 			page 11


 153:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 156:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 157:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 158:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 162:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 163:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 164:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 165:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 171:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 172:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 174:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 175:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 176:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 178:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 179:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 180:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 181:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 184:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 185:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31 - ucPort
 192:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 193:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 196:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 197:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 198:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 201:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 202:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 203:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 204:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 206:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 207:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 208:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 209:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/cc6cfuTD.s 			page 12


 210:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 212:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 213:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 214:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 215:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 167              		.loc 2 215 0 discriminator 1
 168              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 169 0010 4FF05003 			mov r3, #80												
 170 0014 83F31188 		msr basepri, r3											
 171 0018 BFF36F8F 		isb														
 172 001c BFF34F8F 		dsb														
 173              	
 174              	@ 0 "" 2
 175              		.thumb
 176 0020 7B60     		str	r3, [r7, #4]
 177              	.L7:
 178              	.LBE30:
 179              	.LBE29:
 180              		.loc 1 263 0 discriminator 1
 181 0022 FEE7     		b	.L7
 182              	.L6:
 183              	.LBB31:
 184              	.LBB32:
 185              		.loc 2 215 0
 186              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 187 0024 4FF05003 			mov r3, #80												
 188 0028 83F31188 		msr basepri, r3											
 189 002c BFF36F8F 		isb														
 190 0030 BFF34F8F 		dsb														
 191              	
 192              	@ 0 "" 2
 193              		.thumb
 194 0034 3B60     		str	r3, [r7]
 195              	.L8:
 196              	.LBE32:
 197              	.LBE31:
 264:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	portDISABLE_INTERRUPTS();
 265:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	for( ;; );
 198              		.loc 1 265 0 discriminator 2
 199 0036 FEE7     		b	.L8
 200              	.L10:
 201              		.align	2
 202              	.L9:
 203 0038 00000000 		.word	uxCriticalNesting
 204              		.cfi_endproc
 205              	.LFE5:
 207              		.section	.text.SVC_Handler,"ax",%progbits
 208              		.align	2
 209              		.global	SVC_Handler
 210              		.thumb
 211              		.thumb_func
 213              	SVC_Handler:
 214              	.LFB6:
 266:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 267:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 268:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
ARM GAS  /tmp/cc6cfuTD.s 			page 13


 269:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortSVCHandler( void )
 270:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 215              		.loc 1 270 0
 216              		.cfi_startproc
 217              		@ Naked Function: prologue and epilogue provided by programmer.
 218              		@ args = 0, pretend = 0, frame = 0
 219              		@ frame_needed = 1, uses_anonymous_args = 0
 271:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile (
 220              		.loc 1 271 0
 221              	@ 271 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 222 0000 064B     			ldr	r3, pxCurrentTCBConst2		
 223 0002 1968     		ldr r1, [r3]					
 224 0004 0868     		ldr r0, [r1]					
 225 0006 B0E8F04F 		ldmia r0!, {r4-r11, r14}		
 226 000a 80F30988 		msr psp, r0						
 227 000e BFF36F8F 		isb								
 228 0012 4FF00000 		mov r0, #0 						
 229 0016 80F31188 		msr	basepri, r0					
 230 001a 7047     		bx r14							
 231              										
 232              		.align 2						
 233 001c 00000000 	pxCurrentTCBConst2: .word pxCurrentTCB				
 234              	
 235              	@ 0 "" 2
 272:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 273:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldr r1, [r3]					\n" /* Use pxCurrentTCBConst to get the pxCurrentTCB address. */
 274:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldr r0, [r1]					\n" /* The first item in pxCurrentTCB is the task top of stack. */
 275:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldmia r0!, {r4-r11, r14}		\n" /* Pop the registers that are not automatically saved on excep
 276:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	msr psp, r0						\n" /* Restore the task stack pointer. */
 277:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	isb								\n"
 278:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	mov r0, #0 						\n"
 279:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	msr	basepri, r0					\n"
 280:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	bx r14							\n"
 281:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"									\n"
 282:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	.align 2						\n"
 283:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
 284:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				);
 285:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 236              		.loc 1 285 0
 237              		.thumb
 238              		.cfi_endproc
 239              	.LFE6:
 241              		.section	.text.prvPortStartFirstTask,"ax",%progbits
 242              		.align	2
 243              		.thumb
 244              		.thumb_func
 246              	prvPortStartFirstTask:
 247              	.LFB7:
 286:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 287:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 288:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** static void prvPortStartFirstTask( void )
 289:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 248              		.loc 1 289 0
 249              		.cfi_startproc
 250              		@ Naked Function: prologue and epilogue provided by programmer.
 251              		@ args = 0, pretend = 0, frame = 0
 252              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/cc6cfuTD.s 			page 14


 290:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile(
 253              		.loc 1 290 0
 254              	@ 290 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 255 0000 0648     		 ldr r0, =0xE000ED08 	
 256 0002 0068     	 ldr r0, [r0] 			
 257 0004 0068     	 ldr r0, [r0] 			
 258 0006 80F30888 	 msr msp, r0			
 259 000a 62B6     	 cpsie i				
 260 000c 61B6     	 cpsie f				
 261 000e BFF34F8F 	 dsb					
 262 0012 BFF36F8F 	 isb					
 263 0016 00DF     	 svc 0					
 264 0018 00BF     	 nop					
 265              	
 266              	@ 0 "" 2
 291:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
 292:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" ldr r0, [r0] 			\n"
 293:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" ldr r0, [r0] 			\n"
 294:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" msr msp, r0			\n" /* Set the msp back to the start of the stack. */
 295:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" cpsie i				\n" /* Globally enable interrupts. */
 296:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" cpsie f				\n"
 297:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" dsb					\n"
 298:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" isb					\n"
 299:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" svc 0					\n" /* System call to start first task. */
 300:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" nop					\n"
 301:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				);
 302:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 267              		.loc 1 302 0
 268              		.thumb
 269              		.cfi_endproc
 270              	.LFE7:
 272 001a 0000     		.section	.text.xPortStartScheduler,"ax",%progbits
 273              		.align	2
 274              		.global	xPortStartScheduler
 275              		.thumb
 276              		.thumb_func
 278              	xPortStartScheduler:
 279              	.LFB8:
 303:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 304:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 305:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 306:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * See header file for description.
 307:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 308:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** BaseType_t xPortStartScheduler( void )
 309:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 280              		.loc 1 309 0
 281              		.cfi_startproc
 282              		@ args = 0, pretend = 0, frame = 24
 283              		@ frame_needed = 1, uses_anonymous_args = 0
 284 0000 80B5     		push	{r7, lr}
 285              	.LCFI9:
 286              		.cfi_def_cfa_offset 8
 287              		.cfi_offset 7, -8
 288              		.cfi_offset 14, -4
 289 0002 86B0     		sub	sp, sp, #24
 290              	.LCFI10:
 291              		.cfi_def_cfa_offset 32
ARM GAS  /tmp/cc6cfuTD.s 			page 15


 292 0004 00AF     		add	r7, sp, #0
 293              	.LCFI11:
 294              		.cfi_def_cfa_register 7
 310:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 311:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
 312:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );
 313:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 314:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* This port can be used on all revisions of the Cortex-M7 core other than
 315:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	the r0p1 parts.  r0p1 parts should use the port from the
 316:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/source/portable/GCC/ARM_CM7/r0p1 directory. */
 317:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 295              		.loc 1 317 0
 296 0006 3B4B     		ldr	r3, .L21
 297 0008 1B68     		ldr	r3, [r3]
 298 000a 3B4A     		ldr	r2, .L21+4
 299 000c 9342     		cmp	r3, r2
 300 000e 09D1     		bne	.L14
 301              	.LBB33:
 302              	.LBB34:
 303              		.loc 2 215 0 discriminator 1
 304              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 305 0010 4FF05003 			mov r3, #80												
 306 0014 83F31188 		msr basepri, r3											
 307 0018 BFF36F8F 		isb														
 308 001c BFF34F8F 		dsb														
 309              	
 310              	@ 0 "" 2
 311              		.thumb
 312 0020 3B61     		str	r3, [r7, #16]
 313              	.L15:
 314              	.LBE34:
 315              	.LBE33:
 316              		.loc 1 317 0 discriminator 2
 317 0022 FEE7     		b	.L15
 318              	.L14:
 318:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 319              		.loc 1 318 0
 320 0024 334B     		ldr	r3, .L21
 321 0026 1B68     		ldr	r3, [r3]
 322 0028 344A     		ldr	r2, .L21+8
 323 002a 9342     		cmp	r3, r2
 324 002c 09D1     		bne	.L16
 325              	.LBB35:
 326              	.LBB36:
 327              		.loc 2 215 0 discriminator 1
 328              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 329 002e 4FF05003 			mov r3, #80												
 330 0032 83F31188 		msr basepri, r3											
 331 0036 BFF36F8F 		isb														
 332 003a BFF34F8F 		dsb														
 333              	
 334              	@ 0 "" 2
 335              		.thumb
 336 003e FB60     		str	r3, [r7, #12]
 337              	.L17:
 338              	.LBE36:
 339              	.LBE35:
ARM GAS  /tmp/cc6cfuTD.s 			page 16


 340              		.loc 1 318 0 discriminator 3
 341 0040 FEE7     		b	.L17
 342              	.L16:
 343              	.LBB37:
 319:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 320:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#if( configASSERT_DEFINED == 1 )
 321:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	{
 322:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		volatile uint32_t ulOriginalPriority;
 323:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_I
 344              		.loc 1 323 0
 345 0042 2F4B     		ldr	r3, .L21+12
 346 0044 7B61     		str	r3, [r7, #20]
 324:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		volatile uint8_t ucMaxPriorityValue;
 325:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 326:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Determine the maximum priority from which ISR safe FreeRTOS API
 327:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		functions can be called.  ISR safe functions are those that end in
 328:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
 329:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		ensure interrupt entry is as fast and simple as possible.
 330:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 331:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		Save the interrupt priority value that is about to be clobbered. */
 332:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		ulOriginalPriority = *pucFirstUserPriorityRegister;
 347              		.loc 1 332 0
 348 0046 7B69     		ldr	r3, [r7, #20]
 349 0048 1B78     		ldrb	r3, [r3]
 350 004a DBB2     		uxtb	r3, r3
 351 004c BB60     		str	r3, [r7, #8]
 333:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 334:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Determine the number of priority bits available.  First write to all
 335:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		possible bits. */
 336:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 352              		.loc 1 336 0
 353 004e 7B69     		ldr	r3, [r7, #20]
 354 0050 FF22     		movs	r2, #255
 355 0052 1A70     		strb	r2, [r3]
 337:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 338:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Read the value back to see how many bits stuck. */
 339:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 356              		.loc 1 339 0
 357 0054 7B69     		ldr	r3, [r7, #20]
 358 0056 1B78     		ldrb	r3, [r3]
 359 0058 DBB2     		uxtb	r3, r3
 360 005a FB71     		strb	r3, [r7, #7]
 340:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 341:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Use the same mask on the maximum system call priority. */
 342:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 361              		.loc 1 342 0
 362 005c FB79     		ldrb	r3, [r7, #7]
 363 005e DBB2     		uxtb	r3, r3
 364 0060 03F05003 		and	r3, r3, #80
 365 0064 DAB2     		uxtb	r2, r3
 366 0066 274B     		ldr	r3, .L21+16
 367 0068 1A70     		strb	r2, [r3]
 343:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 344:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Calculate the maximum acceptable priority group value for the number
 345:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		of bits read back. */
 346:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 368              		.loc 1 346 0
ARM GAS  /tmp/cc6cfuTD.s 			page 17


 369 006a 274B     		ldr	r3, .L21+20
 370 006c 0722     		movs	r2, #7
 371 006e 1A60     		str	r2, [r3]
 347:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 372              		.loc 1 347 0
 373 0070 09E0     		b	.L18
 374              	.L19:
 348:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		{
 349:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			ulMaxPRIGROUPValue--;
 375              		.loc 1 349 0
 376 0072 254B     		ldr	r3, .L21+20
 377 0074 1B68     		ldr	r3, [r3]
 378 0076 013B     		subs	r3, r3, #1
 379 0078 234A     		ldr	r2, .L21+20
 380 007a 1360     		str	r3, [r2]
 350:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 381              		.loc 1 350 0
 382 007c FB79     		ldrb	r3, [r7, #7]
 383 007e DBB2     		uxtb	r3, r3
 384 0080 5B00     		lsls	r3, r3, #1
 385 0082 DBB2     		uxtb	r3, r3
 386 0084 FB71     		strb	r3, [r7, #7]
 387              	.L18:
 347:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 388              		.loc 1 347 0
 389 0086 FB79     		ldrb	r3, [r7, #7]
 390 0088 DBB2     		uxtb	r3, r3
 391 008a DBB2     		uxtb	r3, r3
 392 008c 5BB2     		sxtb	r3, r3
 393 008e 002B     		cmp	r3, #0
 394 0090 EFDB     		blt	.L19
 351:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		}
 352:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 353:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Shift the priority group value back to its position within the AIRCR
 354:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		register. */
 355:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 395              		.loc 1 355 0
 396 0092 1D4B     		ldr	r3, .L21+20
 397 0094 1B68     		ldr	r3, [r3]
 398 0096 1B02     		lsls	r3, r3, #8
 399 0098 1B4A     		ldr	r2, .L21+20
 400 009a 1360     		str	r3, [r2]
 356:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 401              		.loc 1 356 0
 402 009c 1A4B     		ldr	r3, .L21+20
 403 009e 1B68     		ldr	r3, [r3]
 404 00a0 03F4E063 		and	r3, r3, #1792
 405 00a4 184A     		ldr	r2, .L21+20
 406 00a6 1360     		str	r3, [r2]
 357:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 358:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Restore the clobbered interrupt priority register to its original
 359:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		value. */
 360:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		*pucFirstUserPriorityRegister = ulOriginalPriority;
 407              		.loc 1 360 0
 408 00a8 BB68     		ldr	r3, [r7, #8]
 409 00aa DAB2     		uxtb	r2, r3
 410 00ac 7B69     		ldr	r3, [r7, #20]
ARM GAS  /tmp/cc6cfuTD.s 			page 18


 411 00ae 1A70     		strb	r2, [r3]
 412              	.LBE37:
 361:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	}
 362:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#endif /* conifgASSERT_DEFINED */
 363:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 364:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Make PendSV and SysTick the lowest priority interrupts. */
 365:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 413              		.loc 1 365 0
 414 00b0 164A     		ldr	r2, .L21+24
 415 00b2 164B     		ldr	r3, .L21+24
 416 00b4 1B68     		ldr	r3, [r3]
 417 00b6 43F47003 		orr	r3, r3, #15728640
 418 00ba 1360     		str	r3, [r2]
 366:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 419              		.loc 1 366 0
 420 00bc 134A     		ldr	r2, .L21+24
 421 00be 134B     		ldr	r3, .L21+24
 422 00c0 1B68     		ldr	r3, [r3]
 423 00c2 43F07043 		orr	r3, r3, #-268435456
 424 00c6 1360     		str	r3, [r2]
 367:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 368:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Start the timer that generates the tick ISR.  Interrupts are disabled
 369:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	here already. */
 370:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	vPortSetupTimerInterrupt();
 425              		.loc 1 370 0
 426 00c8 FFF7FEFF 		bl	vPortSetupTimerInterrupt
 371:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 372:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Initialise the critical nesting count ready for the first task. */
 373:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting = 0;
 427              		.loc 1 373 0
 428 00cc 104B     		ldr	r3, .L21+28
 429 00ce 0022     		movs	r2, #0
 430 00d0 1A60     		str	r2, [r3]
 374:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 375:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Ensure the VFP is enabled - it should be anyway. */
 376:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	vPortEnableVFP();
 431              		.loc 1 376 0
 432 00d2 FFF7FEFF 		bl	vPortEnableVFP
 377:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 378:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Lazy save always. */
 379:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 433              		.loc 1 379 0
 434 00d6 0F4A     		ldr	r2, .L21+32
 435 00d8 0E4B     		ldr	r3, .L21+32
 436 00da 1B68     		ldr	r3, [r3]
 437 00dc 43F04043 		orr	r3, r3, #-1073741824
 438 00e0 1360     		str	r3, [r2]
 380:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 381:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Start the first task. */
 382:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	prvPortStartFirstTask();
 439              		.loc 1 382 0
 440 00e2 FFF7FEFF 		bl	prvPortStartFirstTask
 383:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 384:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Should never get here as the tasks will now be executing!  Call the task
 385:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	exit error function to prevent compiler warnings about a static function
 386:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	not being called in the case that the application writer overrides this
 387:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	functionality by defining configTASK_RETURN_ADDRESS. */
ARM GAS  /tmp/cc6cfuTD.s 			page 19


 388:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	prvTaskExitError();
 441              		.loc 1 388 0
 442 00e6 FFF7FEFF 		bl	prvTaskExitError
 389:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 390:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Should not get here! */
 391:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	return 0;
 443              		.loc 1 391 0
 444 00ea 0023     		movs	r3, #0
 392:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 445              		.loc 1 392 0
 446 00ec 1846     		mov	r0, r3
 447 00ee 1837     		adds	r7, r7, #24
 448              	.LCFI12:
 449              		.cfi_def_cfa_offset 8
 450 00f0 BD46     		mov	sp, r7
 451              	.LCFI13:
 452              		.cfi_def_cfa_register 13
 453              		@ sp needed
 454 00f2 80BD     		pop	{r7, pc}
 455              	.L22:
 456              		.align	2
 457              	.L21:
 458 00f4 00ED00E0 		.word	-536810240
 459 00f8 71C20F41 		.word	1091551857
 460 00fc 70C20F41 		.word	1091551856
 461 0100 00E400E0 		.word	-536812544
 462 0104 00000000 		.word	ucMaxSysCallPriority
 463 0108 00000000 		.word	ulMaxPRIGROUPValue
 464 010c 20ED00E0 		.word	-536810208
 465 0110 00000000 		.word	uxCriticalNesting
 466 0114 34EF00E0 		.word	-536809676
 467              		.cfi_endproc
 468              	.LFE8:
 470              		.section	.text.vPortEndScheduler,"ax",%progbits
 471              		.align	2
 472              		.global	vPortEndScheduler
 473              		.thumb
 474              		.thumb_func
 476              	vPortEndScheduler:
 477              	.LFB9:
 393:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 394:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 395:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortEndScheduler( void )
 396:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 478              		.loc 1 396 0
 479              		.cfi_startproc
 480              		@ args = 0, pretend = 0, frame = 8
 481              		@ frame_needed = 1, uses_anonymous_args = 0
 482              		@ link register save eliminated.
 483 0000 80B4     		push	{r7}
 484              	.LCFI14:
 485              		.cfi_def_cfa_offset 4
 486              		.cfi_offset 7, -4
 487 0002 83B0     		sub	sp, sp, #12
 488              	.LCFI15:
 489              		.cfi_def_cfa_offset 16
 490 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/cc6cfuTD.s 			page 20


 491              	.LCFI16:
 492              		.cfi_def_cfa_register 7
 397:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Not implemented in ports where there is nothing to return to.
 398:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	Artificially force an assert. */
 399:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	configASSERT( uxCriticalNesting == 1000UL );
 493              		.loc 1 399 0
 494 0006 0A4B     		ldr	r3, .L26
 495 0008 1B68     		ldr	r3, [r3]
 496 000a B3F57A7F 		cmp	r3, #1000
 497 000e 09D0     		beq	.L23
 498              	.LBB38:
 499              	.LBB39:
 500              		.loc 2 215 0 discriminator 1
 501              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 502 0010 4FF05003 			mov r3, #80												
 503 0014 83F31188 		msr basepri, r3											
 504 0018 BFF36F8F 		isb														
 505 001c BFF34F8F 		dsb														
 506              	
 507              	@ 0 "" 2
 508              		.thumb
 509 0020 7B60     		str	r3, [r7, #4]
 510              	.L25:
 511              	.LBE39:
 512              	.LBE38:
 513              		.loc 1 399 0 discriminator 1
 514 0022 FEE7     		b	.L25
 515              	.L23:
 400:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 516              		.loc 1 400 0
 517 0024 0C37     		adds	r7, r7, #12
 518              	.LCFI17:
 519              		.cfi_def_cfa_offset 4
 520 0026 BD46     		mov	sp, r7
 521              	.LCFI18:
 522              		.cfi_def_cfa_register 13
 523              		@ sp needed
 524 0028 5DF8047B 		ldr	r7, [sp], #4
 525              	.LCFI19:
 526              		.cfi_restore 7
 527              		.cfi_def_cfa_offset 0
 528 002c 7047     		bx	lr
 529              	.L27:
 530 002e 00BF     		.align	2
 531              	.L26:
 532 0030 00000000 		.word	uxCriticalNesting
 533              		.cfi_endproc
 534              	.LFE9:
 536              		.section	.text.vPortEnterCritical,"ax",%progbits
 537              		.align	2
 538              		.global	vPortEnterCritical
 539              		.thumb
 540              		.thumb_func
 542              	vPortEnterCritical:
 543              	.LFB10:
 401:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 402:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
ARM GAS  /tmp/cc6cfuTD.s 			page 21


 403:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortEnterCritical( void )
 404:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 544              		.loc 1 404 0
 545              		.cfi_startproc
 546              		@ args = 0, pretend = 0, frame = 8
 547              		@ frame_needed = 1, uses_anonymous_args = 0
 548              		@ link register save eliminated.
 549 0000 80B4     		push	{r7}
 550              	.LCFI20:
 551              		.cfi_def_cfa_offset 4
 552              		.cfi_offset 7, -4
 553 0002 83B0     		sub	sp, sp, #12
 554              	.LCFI21:
 555              		.cfi_def_cfa_offset 16
 556 0004 00AF     		add	r7, sp, #0
 557              	.LCFI22:
 558              		.cfi_def_cfa_register 7
 559              	.LBB40:
 560              	.LBB41:
 561              		.loc 2 215 0
 562              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 563 0006 4FF05003 			mov r3, #80												
 564 000a 83F31188 		msr basepri, r3											
 565 000e BFF36F8F 		isb														
 566 0012 BFF34F8F 		dsb														
 567              	
 568              	@ 0 "" 2
 569              		.thumb
 570 0016 7B60     		str	r3, [r7, #4]
 571              	.LBE41:
 572              	.LBE40:
 405:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	portDISABLE_INTERRUPTS();
 406:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting++;
 573              		.loc 1 406 0
 574 0018 0E4B     		ldr	r3, .L31
 575 001a 1B68     		ldr	r3, [r3]
 576 001c 0133     		adds	r3, r3, #1
 577 001e 0D4A     		ldr	r2, .L31
 578 0020 1360     		str	r3, [r2]
 407:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 408:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* This is not the interrupt safe version of the enter critical function so
 409:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	assert() if it is being called from an interrupt context.  Only API
 410:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	functions that end in "FromISR" can be used in an interrupt.  Only assert if
 411:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	the critical nesting count is 1 to protect against recursive calls if the
 412:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	assert function also uses a critical section. */
 413:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	if( uxCriticalNesting == 1 )
 579              		.loc 1 413 0
 580 0022 0C4B     		ldr	r3, .L31
 581 0024 1B68     		ldr	r3, [r3]
 582 0026 012B     		cmp	r3, #1
 583 0028 0ED1     		bne	.L28
 414:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	{
 415:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 584              		.loc 1 415 0
 585 002a 0B4B     		ldr	r3, .L31+4
 586 002c 1B68     		ldr	r3, [r3]
 587 002e DBB2     		uxtb	r3, r3
ARM GAS  /tmp/cc6cfuTD.s 			page 22


 588 0030 002B     		cmp	r3, #0
 589 0032 09D0     		beq	.L28
 590              	.LBB42:
 591              	.LBB43:
 592              		.loc 2 215 0 discriminator 1
 593              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 594 0034 4FF05003 			mov r3, #80												
 595 0038 83F31188 		msr basepri, r3											
 596 003c BFF36F8F 		isb														
 597 0040 BFF34F8F 		dsb														
 598              	
 599              	@ 0 "" 2
 600              		.thumb
 601 0044 3B60     		str	r3, [r7]
 602              	.L30:
 603              	.LBE43:
 604              	.LBE42:
 605              		.loc 1 415 0 discriminator 1
 606 0046 FEE7     		b	.L30
 607              	.L28:
 416:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	}
 417:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 608              		.loc 1 417 0
 609 0048 0C37     		adds	r7, r7, #12
 610              	.LCFI23:
 611              		.cfi_def_cfa_offset 4
 612 004a BD46     		mov	sp, r7
 613              	.LCFI24:
 614              		.cfi_def_cfa_register 13
 615              		@ sp needed
 616 004c 5DF8047B 		ldr	r7, [sp], #4
 617              	.LCFI25:
 618              		.cfi_restore 7
 619              		.cfi_def_cfa_offset 0
 620 0050 7047     		bx	lr
 621              	.L32:
 622 0052 00BF     		.align	2
 623              	.L31:
 624 0054 00000000 		.word	uxCriticalNesting
 625 0058 04ED00E0 		.word	-536810236
 626              		.cfi_endproc
 627              	.LFE10:
 629              		.section	.text.vPortExitCritical,"ax",%progbits
 630              		.align	2
 631              		.global	vPortExitCritical
 632              		.thumb
 633              		.thumb_func
 635              	vPortExitCritical:
 636              	.LFB11:
 418:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 419:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 420:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortExitCritical( void )
 421:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 637              		.loc 1 421 0
 638              		.cfi_startproc
 639              		@ args = 0, pretend = 0, frame = 8
 640              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/cc6cfuTD.s 			page 23


 641              		@ link register save eliminated.
 642 0000 80B4     		push	{r7}
 643              	.LCFI26:
 644              		.cfi_def_cfa_offset 4
 645              		.cfi_offset 7, -4
 646 0002 83B0     		sub	sp, sp, #12
 647              	.LCFI27:
 648              		.cfi_def_cfa_offset 16
 649 0004 00AF     		add	r7, sp, #0
 650              	.LCFI28:
 651              		.cfi_def_cfa_register 7
 422:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	configASSERT( uxCriticalNesting );
 652              		.loc 1 422 0
 653 0006 104B     		ldr	r3, .L37
 654 0008 1B68     		ldr	r3, [r3]
 655 000a 002B     		cmp	r3, #0
 656 000c 09D1     		bne	.L34
 657              	.LBB44:
 658              	.LBB45:
 659              		.loc 2 215 0 discriminator 1
 660              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 661 000e 4FF05003 			mov r3, #80												
 662 0012 83F31188 		msr basepri, r3											
 663 0016 BFF36F8F 		isb														
 664 001a BFF34F8F 		dsb														
 665              	
 666              	@ 0 "" 2
 667              		.thumb
 668 001e 7B60     		str	r3, [r7, #4]
 669              	.L35:
 670              	.LBE45:
 671              	.LBE44:
 672              		.loc 1 422 0 discriminator 1
 673 0020 FEE7     		b	.L35
 674              	.L34:
 423:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting--;
 675              		.loc 1 423 0
 676 0022 094B     		ldr	r3, .L37
 677 0024 1B68     		ldr	r3, [r3]
 678 0026 013B     		subs	r3, r3, #1
 679 0028 074A     		ldr	r2, .L37
 680 002a 1360     		str	r3, [r2]
 424:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	if( uxCriticalNesting == 0 )
 681              		.loc 1 424 0
 682 002c 064B     		ldr	r3, .L37
 683 002e 1B68     		ldr	r3, [r3]
 684 0030 002B     		cmp	r3, #0
 685 0032 04D1     		bne	.L33
 686 0034 0023     		movs	r3, #0
 687 0036 3B60     		str	r3, [r7]
 688              	.LBB46:
 689              	.LBB47:
 216:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 217:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 218:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 219:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 220:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
ARM GAS  /tmp/cc6cfuTD.s 			page 24


 221:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 222:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 223:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 224:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 225:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 226:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 228:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 229:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 230:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 231:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 232:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 233:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 234:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 235:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 236:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 237:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 238:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 239:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 240:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 241:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 242:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 243:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 244:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 245:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 246:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 247:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 248:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 249:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 690              		.loc 2 249 0
 691 0038 3B68     		ldr	r3, [r7]
 692              	@ 249 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 693 003a 83F31188 			msr basepri, r3	
 694              	@ 0 "" 2
 695              		.thumb
 696              	.L33:
 697              	.LBE47:
 698              	.LBE46:
 425:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	{
 426:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		portENABLE_INTERRUPTS();
 427:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	}
 428:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 699              		.loc 1 428 0
 700 003e 0C37     		adds	r7, r7, #12
 701              	.LCFI29:
 702              		.cfi_def_cfa_offset 4
 703 0040 BD46     		mov	sp, r7
 704              	.LCFI30:
 705              		.cfi_def_cfa_register 13
 706              		@ sp needed
 707 0042 5DF8047B 		ldr	r7, [sp], #4
 708              	.LCFI31:
 709              		.cfi_restore 7
 710              		.cfi_def_cfa_offset 0
 711 0046 7047     		bx	lr
 712              	.L38:
 713              		.align	2
ARM GAS  /tmp/cc6cfuTD.s 			page 25


 714              	.L37:
 715 0048 00000000 		.word	uxCriticalNesting
 716              		.cfi_endproc
 717              	.LFE11:
 719              		.section	.text.PendSV_Handler,"ax",%progbits
 720              		.align	2
 721              		.global	PendSV_Handler
 722              		.thumb
 723              		.thumb_func
 725              	PendSV_Handler:
 726              	.LFB12:
 429:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 430:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 431:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void xPortPendSVHandler( void )
 432:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 727              		.loc 1 432 0
 728              		.cfi_startproc
 729              		@ Naked Function: prologue and epilogue provided by programmer.
 730              		@ args = 0, pretend = 0, frame = 0
 731              		@ frame_needed = 1, uses_anonymous_args = 0
 433:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* This is a naked function. */
 434:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 435:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile
 732              		.loc 1 435 0
 733              	@ 435 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 734 0000 EFF30980 			mrs r0, psp							
 735 0004 BFF36F8F 		isb									
 736              											
 737 0008 144B     		ldr	r3, pxCurrentTCBConst			
 738 000a 1A68     		ldr	r2, [r3]						
 739              											
 740 000c 1EF0100F 		tst r14, #0x10						
 741 0010 08BF     		it eq								
 742 0012 20ED108A 		vstmdbeq r0!, {s16-s31}				
 743              											
 744 0016 20E9F04F 		stmdb r0!, {r4-r11, r14}			
 745              											
 746 001a 1060     		str r0, [r2]						
 747              											
 748 001c 4DF8043D 		stmdb sp!, {r3}						
 749 0020 4FF05000 		mov r0, #80 							
 750 0024 80F31188 		msr basepri, r0						
 751 0028 BFF34F8F 		dsb									
 752 002c BFF36F8F 	   isb									
 753 0030 FFF7FEFF 		bl vTaskSwitchContext				
 754 0034 4FF00000 		mov r0, #0							
 755 0038 80F31188 		msr basepri, r0						
 756 003c 08BC     		ldmia sp!, {r3}						
 757              											
 758 003e 1968     		ldr r1, [r3]						
 759 0040 0868     		ldr r0, [r1]						
 760              											
 761 0042 B0E8F04F 		ldmia r0!, {r4-r11, r14}			
 762              											
 763 0046 1EF0100F 		tst r14, #0x10						
 764 004a 08BF     		it eq								
 765 004c B0EC108A 		vldmiaeq r0!, {s16-s31}				
ARM GAS  /tmp/cc6cfuTD.s 			page 26


 766              											
 767 0050 80F30988 		msr psp, r0							
 768 0054 BFF36F8F 		isb									
 769              											
 770              											
 771 0058 7047     		bx r14								
 772              											
 773 005a 00BF     		.align 2							
 774 005c 00000000 	pxCurrentTCBConst: .word pxCurrentTCB	
 775              	
 776              	@ 0 "" 2
 436:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	(
 437:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	mrs r0, psp							\n"
 438:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	isb									\n"
 439:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 440:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldr	r3, pxCurrentTCBConst			\n" /* Get the location of the current TCB. */
 441:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldr	r2, [r3]						\n"
 442:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 443:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	tst r14, #0x10						\n" /* Is the task using the FPU context?  If so, push high vfp registers. *
 444:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	it eq								\n"
 445:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	vstmdbeq r0!, {s16-s31}				\n"
 446:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 447:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	stmdb r0!, {r4-r11, r14}			\n" /* Save the core registers. */
 448:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 449:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	str r0, [r2]						\n" /* Save the new top of stack into the first member of the TCB. */
 450:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 451:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	stmdb sp!, {r3}						\n"
 452:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	mov r0, %0 							\n"
 453:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	msr basepri, r0						\n"
 454:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	dsb									\n"
 455:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"   isb									\n"
 456:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	bl vTaskSwitchContext				\n"
 457:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	mov r0, #0							\n"
 458:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	msr basepri, r0						\n"
 459:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldmia sp!, {r3}						\n"
 460:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 461:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldr r1, [r3]						\n" /* The first item in pxCurrentTCB is the task top of stack. */
 462:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldr r0, [r1]						\n"
 463:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 464:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldmia r0!, {r4-r11, r14}			\n" /* Pop the core registers. */
 465:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 466:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	tst r14, #0x10						\n" /* Is the task using the FPU context?  If so, pop the high vfp registers
 467:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	it eq								\n"
 468:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	vldmiaeq r0!, {s16-s31}				\n"
 469:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 470:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	msr psp, r0							\n"
 471:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	isb									\n"
 472:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 473:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#ifdef WORKAROUND_PMU_CM001 /* XMC4000 specific errata workaround. */
 474:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		#if WORKAROUND_PMU_CM001 == 1
 475:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"			push { r14 }				\n"
 476:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"			pop { pc }					\n"
 477:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		#endif
 478:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#endif
 479:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 480:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	bx r14								\n"
 481:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
ARM GAS  /tmp/cc6cfuTD.s 			page 27


 482:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	.align 2							\n"
 483:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
 484:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
 485:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	);
 486:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 777              		.loc 1 486 0
 778              		.thumb
 779              		.cfi_endproc
 780              	.LFE12:
 782              		.section	.text.xPortSysTickHandler,"ax",%progbits
 783              		.align	2
 784              		.global	xPortSysTickHandler
 785              		.thumb
 786              		.thumb_func
 788              	xPortSysTickHandler:
 789              	.LFB13:
 487:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 488:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 489:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void xPortSysTickHandler( void )
 490:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 790              		.loc 1 490 0
 791              		.cfi_startproc
 792              		@ args = 0, pretend = 0, frame = 16
 793              		@ frame_needed = 1, uses_anonymous_args = 0
 794 0000 80B5     		push	{r7, lr}
 795              	.LCFI32:
 796              		.cfi_def_cfa_offset 8
 797              		.cfi_offset 7, -8
 798              		.cfi_offset 14, -4
 799 0002 84B0     		sub	sp, sp, #16
 800              	.LCFI33:
 801              		.cfi_def_cfa_offset 24
 802 0004 00AF     		add	r7, sp, #0
 803              	.LCFI34:
 804              		.cfi_def_cfa_register 7
 805              	.LBB48:
 806              	.LBB49:
 231:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 807              		.loc 2 231 0
 808              	@ 231 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 809 0006 EFF31182 			mrs r2, basepri											
 810 000a 4FF05003 		mov r3, #80												
 811 000e 83F31188 		msr basepri, r3											
 812 0012 BFF36F8F 		isb														
 813 0016 BFF34F8F 		dsb														
 814              	
 815              	@ 0 "" 2
 816              		.thumb
 817 001a FA60     		str	r2, [r7, #12]
 818 001c BB60     		str	r3, [r7, #8]
 819              	.LBE49:
 820              	.LBE48:
 491:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
 492:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	executes all interrupts must be unmasked.  There is therefore no need to
 493:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	save and then restore the interrupt mask value as its value is already
 494:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	known. */
 495:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
ARM GAS  /tmp/cc6cfuTD.s 			page 28


 496:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	traceISR_ENTER();
 821              		.loc 1 496 0
 822 001e FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordEnterISR
 497:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	{
 498:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Increment the RTOS tick. */
 499:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		if( xTaskIncrementTick() != pdFALSE )
 823              		.loc 1 499 0
 824 0022 FFF7FEFF 		bl	xTaskIncrementTick
 825 0026 0346     		mov	r3, r0
 826 0028 002B     		cmp	r3, #0
 827 002a 06D0     		beq	.L42
 500:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		{
 501:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			traceISR_EXIT_TO_SCHEDULER();
 828              		.loc 1 501 0
 829 002c FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordExitISRToScheduler
 502:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			/* A context switch is required.  Context switching is performed in
 503:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			the PendSV interrupt.  Pend the PendSV interrupt. */
 504:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 830              		.loc 1 504 0
 831 0030 074B     		ldr	r3, .L44
 832 0032 4FF08052 		mov	r2, #268435456
 833 0036 1A60     		str	r2, [r3]
 834 0038 01E0     		b	.L43
 835              	.L42:
 505:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		}
 506:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		else
 507:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		{
 508:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			traceISR_EXIT();
 836              		.loc 1 508 0
 837 003a FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordExitISR
 838              	.L43:
 839 003e 0023     		movs	r3, #0
 840 0040 7B60     		str	r3, [r7, #4]
 841              	.LBB50:
 842              	.LBB51:
 843              		.loc 2 249 0
 844 0042 7B68     		ldr	r3, [r7, #4]
 845              	@ 249 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 846 0044 83F31188 			msr basepri, r3	
 847              	@ 0 "" 2
 848              		.thumb
 849              	.LBE51:
 850              	.LBE50:
 509:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		}
 510:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	}
 511:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 512:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 851              		.loc 1 512 0
 852 0048 1037     		adds	r7, r7, #16
 853              	.LCFI35:
 854              		.cfi_def_cfa_offset 8
 855 004a BD46     		mov	sp, r7
 856              	.LCFI36:
 857              		.cfi_def_cfa_register 13
 858              		@ sp needed
 859 004c 80BD     		pop	{r7, pc}
 860              	.L45:
ARM GAS  /tmp/cc6cfuTD.s 			page 29


 861 004e 00BF     		.align	2
 862              	.L44:
 863 0050 04ED00E0 		.word	-536810236
 864              		.cfi_endproc
 865              	.LFE13:
 867              		.section	.text.vPortSetupTimerInterrupt,"ax",%progbits
 868              		.align	2
 869              		.weak	vPortSetupTimerInterrupt
 870              		.thumb
 871              		.thumb_func
 873              	vPortSetupTimerInterrupt:
 874              	.LFB14:
 513:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 514:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 515:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #if configUSE_TICKLESS_IDLE == 1
 516:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 517:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
 518:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	{
 519:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements, ulSysTickCTRL;
 520:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	TickType_t xModifiableIdleTime;
 521:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 522:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Make sure the SysTick reload value does not overflow the counter. */
 523:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 524:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		{
 525:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 526:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		}
 527:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 528:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
 529:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		is accounted for as best it can be, but using the tickless mode will
 530:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		inevitably result in some tiny drift of the time maintained by the
 531:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		kernel with respect to calendar time. */
 532:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 533:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 534:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Calculate the reload value required to wait xExpectedIdleTime
 535:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		tick periods.  -1 is used because this code will execute part way
 536:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		through one of the tick periods. */
 537:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleT
 538:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		if( ulReloadValue > ulStoppedTimerCompensation )
 539:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		{
 540:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			ulReloadValue -= ulStoppedTimerCompensation;
 541:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		}
 542:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 543:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Enter a critical section but don't use the taskENTER_CRITICAL()
 544:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		method as that will mask interrupts that should exit sleep mode. */
 545:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		__asm volatile( "cpsid i" );
 546:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 547:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		/* If a context switch is pending or a task is waiting for the scheduler
 548:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		to be unsuspended then abandon the low power entry. */
 549:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 550:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		{
 551:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Restart from whatever is left in the count register to complete
 552:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			this tick period. */
 553:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 554:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 555:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Restart SysTick. */
 556:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 557:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
ARM GAS  /tmp/cc6cfuTD.s 			page 30


 558:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Reset the reload register to the value required for normal tick
 559:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			periods. */
 560:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 561:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 562:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Re-enable interrupts - see comments above the cpsid instruction()
 563:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			above. */
 564:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			__asm volatile( "cpsie i" );
 565:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		}
 566:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		else
 567:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		{
 568:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Set the new reload value. */
 569:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 570:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 571:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Clear the SysTick count flag and set the count value back to
 572:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			zero. */
 573:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 574:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 575:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Restart SysTick. */
 576:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 577:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 578:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Sleep until something happens.  configPRE_SLEEP_PROCESSING() can
 579:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			set its parameter to 0 to indicate that its implementation contains
 580:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			its own wait for interrupt or wait for event instruction, and so wfi
 581:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			should not be executed again.  However, the original expected idle
 582:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			time variable must remain unmodified, so a copy is taken. */
 583:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			xModifiableIdleTime = xExpectedIdleTime;
 584:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 585:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			if( xModifiableIdleTime > 0 )
 586:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			{
 587:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				__asm volatile( "dsb" );
 588:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				__asm volatile( "wfi" );
 589:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				__asm volatile( "isb" );
 590:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			}
 591:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 592:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 593:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Stop SysTick.  Again, the time the SysTick is stopped for is
 594:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			accounted for as best it can be, but using the tickless mode will
 595:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			inevitably result in some tiny drift of the time maintained by the
 596:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			kernel with respect to calendar time. */
 597:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			ulSysTickCTRL = portNVIC_SYSTICK_CTRL_REG;
 598:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_CTRL_REG = ( ulSysTickCTRL & ~portNVIC_SYSTICK_ENABLE_BIT );
 599:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 600:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Re-enable interrupts - see comments above the cpsid instruction()
 601:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			above. */
 602:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			__asm volatile( "cpsie i" );
 603:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 604:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			if( ( ulSysTickCTRL & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 605:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			{
 606:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				uint32_t ulCalculatedLoadValue;
 607:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 608:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				/* The tick interrupt has already executed, and the SysTick
 609:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				count reloaded with ulReloadValue.  Reset the
 610:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				portNVIC_SYSTICK_LOAD_REG with whatever remains of this tick
 611:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				period. */
 612:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_
 613:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 614:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				/* Don't allow a tiny value, or values that have somehow
ARM GAS  /tmp/cc6cfuTD.s 			page 31


 615:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				underflowed because the post sleep hook did something
 616:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				that took too long. */
 617:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimer
 618:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				{
 619:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 620:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				}
 621:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 622:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 623:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 624:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				/* The tick interrupt handler will already have pended the tick
 625:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				processing in the kernel.  As the pending tick will be
 626:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				processed as soon as this function exits, the tick value
 627:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				maintained by the tick is stepped forward by one less than the
 628:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				time spent waiting. */
 629:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 630:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			}
 631:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			else
 632:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			{
 633:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				/* Something other than the tick interrupt ended the sleep.
 634:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				Work out how long the sleep lasted rounded to complete tick
 635:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				periods (not the ulReload value which accounted for part
 636:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				ticks). */
 637:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTI
 638:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 639:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				/* How many complete tick periods passed while the processor
 640:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				was waiting? */
 641:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 642:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 643:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				/* The reload value is set to whatever fraction of a single tick
 644:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				period remains. */
 645:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1 ) * ulTimerCountsForOneTick ) - ulCom
 646:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			}
 647:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 648:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Restart SysTick so it runs from portNVIC_SYSTICK_LOAD_REG
 649:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			again, then set portNVIC_SYSTICK_LOAD_REG back to its standard
 650:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			value.  The critical section is used to ensure the tick interrupt
 651:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			can only execute once in the case that the reload register is near
 652:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			zero. */
 653:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 654:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			portENTER_CRITICAL();
 655:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			{
 656:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 657:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				vTaskStepTick( ulCompleteTickPeriods );
 658:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 659:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			}
 660:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			portEXIT_CRITICAL();
 661:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		}
 662:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	}
 663:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 664:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #endif /* #if configUSE_TICKLESS_IDLE */
 665:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 666:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 667:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 668:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Setup the systick timer to generate the tick interrupts at the required
 669:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * frequency.
 670:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 671:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** __attribute__(( weak )) void vPortSetupTimerInterrupt( void )
ARM GAS  /tmp/cc6cfuTD.s 			page 32


 672:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 875              		.loc 1 672 0
 876              		.cfi_startproc
 877              		@ args = 0, pretend = 0, frame = 0
 878              		@ frame_needed = 1, uses_anonymous_args = 0
 879              		@ link register save eliminated.
 880 0000 80B4     		push	{r7}
 881              	.LCFI37:
 882              		.cfi_def_cfa_offset 4
 883              		.cfi_offset 7, -4
 884 0002 00AF     		add	r7, sp, #0
 885              	.LCFI38:
 886              		.cfi_def_cfa_register 7
 673:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Calculate the constants required to configure the tick interrupt. */
 674:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#if configUSE_TICKLESS_IDLE == 1
 675:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	{
 676:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 677:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 678:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOC
 679:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	}
 680:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#endif /* configUSE_TICKLESS_IDLE */
 681:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 682:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Configure SysTick to interrupt at the requested rate. */
 683:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 887              		.loc 1 683 0
 888 0004 074A     		ldr	r2, .L47
 889 0006 084B     		ldr	r3, .L47+4
 890 0008 1B68     		ldr	r3, [r3]
 891 000a 0849     		ldr	r1, .L47+8
 892 000c A1FB0313 		umull	r1, r3, r1, r3
 893 0010 9B09     		lsrs	r3, r3, #6
 894 0012 013B     		subs	r3, r3, #1
 895 0014 1360     		str	r3, [r2]
 684:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTI
 896              		.loc 1 684 0
 897 0016 064B     		ldr	r3, .L47+12
 898 0018 0722     		movs	r2, #7
 899 001a 1A60     		str	r2, [r3]
 685:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 900              		.loc 1 685 0
 901 001c BD46     		mov	sp, r7
 902              	.LCFI39:
 903              		.cfi_def_cfa_register 13
 904              		@ sp needed
 905 001e 5DF8047B 		ldr	r7, [sp], #4
 906              	.LCFI40:
 907              		.cfi_restore 7
 908              		.cfi_def_cfa_offset 0
 909 0022 7047     		bx	lr
 910              	.L48:
 911              		.align	2
 912              	.L47:
 913 0024 14E000E0 		.word	-536813548
 914 0028 00000000 		.word	SystemCoreClock
 915 002c D34D6210 		.word	274877907
 916 0030 10E000E0 		.word	-536813552
 917              		.cfi_endproc
ARM GAS  /tmp/cc6cfuTD.s 			page 33


 918              	.LFE14:
 920              		.section	.text.vPortEnableVFP,"ax",%progbits
 921              		.align	2
 922              		.thumb
 923              		.thumb_func
 925              	vPortEnableVFP:
 926              	.LFB15:
 686:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 687:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 688:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* This is a naked function. */
 689:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** static void vPortEnableVFP( void )
 690:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 927              		.loc 1 690 0
 928              		.cfi_startproc
 929              		@ Naked Function: prologue and epilogue provided by programmer.
 930              		@ args = 0, pretend = 0, frame = 0
 931              		@ frame_needed = 1, uses_anonymous_args = 0
 691:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile
 932              		.loc 1 691 0
 933              	@ 691 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 934 0000 DFF80C00 			ldr.w r0, =0xE000ED88		
 935 0004 0168     		ldr r1, [r0]				
 936              									
 937 0006 41F47001 		orr r1, r1, #( 0xf << 20 )	
 938 000a 0160     		str r1, [r0]				
 939 000c 7047     		bx r14						
 940              	@ 0 "" 2
 692:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	(
 693:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		"	ldr.w r0, =0xE000ED88		\n" /* The FPU enable bits are in the CPACR. */
 694:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		"	ldr r1, [r0]				\n"
 695:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		"								\n"
 696:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
 697:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		"	str r1, [r0]				\n"
 698:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		"	bx r14						"
 699:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	);
 700:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 941              		.loc 1 700 0
 942              		.thumb
 943              		.cfi_endproc
 944              	.LFE15:
 946 000e 0000     		.section	.text.vPortValidateInterruptPriority,"ax",%progbits
 947              		.align	2
 948              		.global	vPortValidateInterruptPriority
 949              		.thumb
 950              		.thumb_func
 952              	vPortValidateInterruptPriority:
 953              	.LFB16:
 701:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 702:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 703:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #if( configASSERT_DEFINED == 1 )
 704:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 705:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	void vPortValidateInterruptPriority( void )
 706:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	{
 954              		.loc 1 706 0
 955              		.cfi_startproc
 956              		@ args = 0, pretend = 0, frame = 16
 957              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/cc6cfuTD.s 			page 34


 958              		@ link register save eliminated.
 959 0000 80B4     		push	{r7}
 960              	.LCFI41:
 961              		.cfi_def_cfa_offset 4
 962              		.cfi_offset 7, -4
 963 0002 85B0     		sub	sp, sp, #20
 964              	.LCFI42:
 965              		.cfi_def_cfa_offset 24
 966 0004 00AF     		add	r7, sp, #0
 967              	.LCFI43:
 968              		.cfi_def_cfa_register 7
 707:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	uint32_t ulCurrentInterrupt;
 708:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	uint8_t ucCurrentPriority;
 709:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 710:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Obtain the number of the currently executing interrupt. */
 711:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 969              		.loc 1 711 0
 970              	@ 711 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 971 0006 EFF30583 		mrs r3, ipsr
 972              	@ 0 "" 2
 973              		.thumb
 974 000a FB60     		str	r3, [r7, #12]
 712:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 713:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Is the interrupt number a user defined interrupt? */
 714:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 975              		.loc 1 714 0
 976 000c FB68     		ldr	r3, [r7, #12]
 977 000e 0F2B     		cmp	r3, #15
 978 0010 13D9     		bls	.L51
 715:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		{
 716:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Look up the interrupt's priority. */
 717:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 979              		.loc 1 717 0
 980 0012 154A     		ldr	r2, .L55
 981 0014 FB68     		ldr	r3, [r7, #12]
 982 0016 1344     		add	r3, r3, r2
 983 0018 1B78     		ldrb	r3, [r3]
 984 001a FB72     		strb	r3, [r7, #11]
 718:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 719:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			/* The following assertion will fail if a service routine (ISR) for
 720:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			an interrupt that has been assigned a priority above
 721:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			configMAX_SYSCALL_INTERRUPT_PRIORITY calls an ISR safe FreeRTOS API
 722:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			function.  ISR safe FreeRTOS API functions must *only* be called
 723:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			from interrupts that have been assigned a priority at or below
 724:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			configMAX_SYSCALL_INTERRUPT_PRIORITY.
 725:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 726:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			Numerically low interrupt priority numbers represent logically high
 727:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			interrupt priorities, therefore the priority of the interrupt must
 728:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			be set to a value equal to or numerically *higher* than
 729:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			configMAX_SYSCALL_INTERRUPT_PRIORITY.
 730:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 731:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			Interrupts that	use the FreeRTOS API must not be left at their
 732:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			default priority of	zero as that is the highest possible priority,
 733:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			which is guaranteed to be above configMAX_SYSCALL_INTERRUPT_PRIORITY,
 734:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			and	therefore also guaranteed to be invalid.
 735:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 736:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			FreeRTOS maintains separate thread and ISR API functions to ensure
ARM GAS  /tmp/cc6cfuTD.s 			page 35


 737:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			interrupt entry is as fast and simple as possible.
 738:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 739:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			The following links provide detailed information:
 740:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			http://www.freertos.org/RTOS-Cortex-M3-M4.html
 741:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			http://www.freertos.org/FAQHelp.html */
 742:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 985              		.loc 1 742 0
 986 001c 134B     		ldr	r3, .L55+4
 987 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 988 0020 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 989 0022 9A42     		cmp	r2, r3
 990 0024 09D2     		bcs	.L51
 991              	.LBB52:
 992              	.LBB53:
 215:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 993              		.loc 2 215 0 discriminator 1
 994              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 995 0026 4FF05003 			mov r3, #80												
 996 002a 83F31188 		msr basepri, r3											
 997 002e BFF36F8F 		isb														
 998 0032 BFF34F8F 		dsb														
 999              	
 1000              	@ 0 "" 2
 1001              		.thumb
 1002 0036 7B60     		str	r3, [r7, #4]
 1003              	.L52:
 1004              	.LBE53:
 1005              	.LBE52:
 1006              		.loc 1 742 0 discriminator 1
 1007 0038 FEE7     		b	.L52
 1008              	.L51:
 743:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		}
 744:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 745:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Priority grouping:  The interrupt controller (NVIC) allows the bits
 746:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		that define each interrupt's priority to be split between bits that
 747:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		define the interrupt's pre-emption priority bits and bits that define
 748:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		the interrupt's sub-priority.  For simplicity all bits must be defined
 749:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		to be pre-emption priority bits.  The following assertion will fail if
 750:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		this is not the case (if some bits represent a sub-priority).
 751:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 752:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		If the application only uses CMSIS libraries for interrupt
 753:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		configuration then the correct setting can be achieved on all Cortex-M
 754:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
 755:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		scheduler.  Note however that some vendor specific peripheral libraries
 756:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		assume a non-zero priority group setting, in which cases using a value
 757:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		of zero will result in unpredicable behaviour. */
 758:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 1009              		.loc 1 758 0
 1010 003a 0D4B     		ldr	r3, .L55+8
 1011 003c 1B68     		ldr	r3, [r3]
 1012 003e 03F4E062 		and	r2, r3, #1792
 1013 0042 0C4B     		ldr	r3, .L55+12
 1014 0044 1B68     		ldr	r3, [r3]
 1015 0046 9A42     		cmp	r2, r3
 1016 0048 09D9     		bls	.L50
 1017              	.LBB54:
 1018              	.LBB55:
ARM GAS  /tmp/cc6cfuTD.s 			page 36


 215:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1019              		.loc 2 215 0 discriminator 1
 1020              	@ 215 "../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1021 004a 4FF05003 			mov r3, #80												
 1022 004e 83F31188 		msr basepri, r3											
 1023 0052 BFF36F8F 		isb														
 1024 0056 BFF34F8F 		dsb														
 1025              	
 1026              	@ 0 "" 2
 1027              		.thumb
 1028 005a 3B60     		str	r3, [r7]
 1029              	.L54:
 1030              	.LBE55:
 1031              	.LBE54:
 1032              		.loc 1 758 0 discriminator 2
 1033 005c FEE7     		b	.L54
 1034              	.L50:
 759:../../../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	}
 1035              		.loc 1 759 0
 1036 005e 1437     		adds	r7, r7, #20
 1037              	.LCFI44:
 1038              		.cfi_def_cfa_offset 4
 1039 0060 BD46     		mov	sp, r7
 1040              	.LCFI45:
 1041              		.cfi_def_cfa_register 13
 1042              		@ sp needed
 1043 0062 5DF8047B 		ldr	r7, [sp], #4
 1044              	.LCFI46:
 1045              		.cfi_restore 7
 1046              		.cfi_def_cfa_offset 0
 1047 0066 7047     		bx	lr
 1048              	.L56:
 1049              		.align	2
 1050              	.L55:
 1051 0068 F0E300E0 		.word	-536812560
 1052 006c 00000000 		.word	ucMaxSysCallPriority
 1053 0070 0CED00E0 		.word	-536810228
 1054 0074 00000000 		.word	ulMaxPRIGROUPValue
 1055              		.cfi_endproc
 1056              	.LFE16:
 1058              		.text
 1059              	.Letext0:
 1060              		.file 3 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1061              		.file 4 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1062              		.file 5 "../../../FreeRTOS/Source/include/projdefs.h"
 1063              		.file 6 "Inc/FreeRTOSConfig.h"
ARM GAS  /tmp/cc6cfuTD.s 			page 37


DEFINED SYMBOLS
                            *ABS*:0000000000000000 port.c
     /tmp/cc6cfuTD.s:21     .data.uxCriticalNesting:0000000000000000 $d
     /tmp/cc6cfuTD.s:24     .data.uxCriticalNesting:0000000000000000 uxCriticalNesting
     /tmp/cc6cfuTD.s:29     .bss.ucMaxSysCallPriority:0000000000000000 ucMaxSysCallPriority
     /tmp/cc6cfuTD.s:30     .bss.ucMaxSysCallPriority:0000000000000000 $d
     /tmp/cc6cfuTD.s:32     .bss.ulMaxPRIGROUPValue:0000000000000000 $d
     /tmp/cc6cfuTD.s:35     .bss.ulMaxPRIGROUPValue:0000000000000000 ulMaxPRIGROUPValue
     /tmp/cc6cfuTD.s:38     .rodata.pcInterruptPriorityRegisters:0000000000000000 $d
     /tmp/cc6cfuTD.s:41     .rodata.pcInterruptPriorityRegisters:0000000000000000 pcInterruptPriorityRegisters
     /tmp/cc6cfuTD.s:44     .text.pxPortInitialiseStack:0000000000000000 $t
     /tmp/cc6cfuTD.s:49     .text.pxPortInitialiseStack:0000000000000000 pxPortInitialiseStack
     /tmp/cc6cfuTD.s:133    .text.pxPortInitialiseStack:0000000000000060 $d
     /tmp/cc6cfuTD.s:142    .text.prvTaskExitError:0000000000000000 prvTaskExitError
     /tmp/cc6cfuTD.s:138    .text.prvTaskExitError:0000000000000000 $t
     /tmp/cc6cfuTD.s:203    .text.prvTaskExitError:0000000000000038 $d
     /tmp/cc6cfuTD.s:208    .text.SVC_Handler:0000000000000000 $t
     /tmp/cc6cfuTD.s:213    .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/cc6cfuTD.s:233    .text.SVC_Handler:000000000000001c pxCurrentTCBConst2
     /tmp/cc6cfuTD.s:233    .text.SVC_Handler:000000000000001c $d
     /tmp/cc6cfuTD.s:242    .text.prvPortStartFirstTask:0000000000000000 $t
     /tmp/cc6cfuTD.s:246    .text.prvPortStartFirstTask:0000000000000000 prvPortStartFirstTask
     /tmp/cc6cfuTD.s:273    .text.xPortStartScheduler:0000000000000000 $t
     /tmp/cc6cfuTD.s:278    .text.xPortStartScheduler:0000000000000000 xPortStartScheduler
     /tmp/cc6cfuTD.s:873    .text.vPortSetupTimerInterrupt:0000000000000000 vPortSetupTimerInterrupt
     /tmp/cc6cfuTD.s:925    .text.vPortEnableVFP:0000000000000000 vPortEnableVFP
     /tmp/cc6cfuTD.s:458    .text.xPortStartScheduler:00000000000000f4 $d
     /tmp/cc6cfuTD.s:471    .text.vPortEndScheduler:0000000000000000 $t
     /tmp/cc6cfuTD.s:476    .text.vPortEndScheduler:0000000000000000 vPortEndScheduler
     /tmp/cc6cfuTD.s:532    .text.vPortEndScheduler:0000000000000030 $d
     /tmp/cc6cfuTD.s:537    .text.vPortEnterCritical:0000000000000000 $t
     /tmp/cc6cfuTD.s:542    .text.vPortEnterCritical:0000000000000000 vPortEnterCritical
     /tmp/cc6cfuTD.s:624    .text.vPortEnterCritical:0000000000000054 $d
     /tmp/cc6cfuTD.s:630    .text.vPortExitCritical:0000000000000000 $t
     /tmp/cc6cfuTD.s:635    .text.vPortExitCritical:0000000000000000 vPortExitCritical
     /tmp/cc6cfuTD.s:715    .text.vPortExitCritical:0000000000000048 $d
     /tmp/cc6cfuTD.s:720    .text.PendSV_Handler:0000000000000000 $t
     /tmp/cc6cfuTD.s:725    .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/cc6cfuTD.s:774    .text.PendSV_Handler:000000000000005c pxCurrentTCBConst
     /tmp/cc6cfuTD.s:774    .text.PendSV_Handler:000000000000005c $d
     /tmp/cc6cfuTD.s:783    .text.xPortSysTickHandler:0000000000000000 $t
     /tmp/cc6cfuTD.s:788    .text.xPortSysTickHandler:0000000000000000 xPortSysTickHandler
     /tmp/cc6cfuTD.s:863    .text.xPortSysTickHandler:0000000000000050 $d
     /tmp/cc6cfuTD.s:868    .text.vPortSetupTimerInterrupt:0000000000000000 $t
     /tmp/cc6cfuTD.s:913    .text.vPortSetupTimerInterrupt:0000000000000024 $d
     /tmp/cc6cfuTD.s:921    .text.vPortEnableVFP:0000000000000000 $t
     /tmp/cc6cfuTD.s:947    .text.vPortValidateInterruptPriority:0000000000000000 $t
     /tmp/cc6cfuTD.s:952    .text.vPortValidateInterruptPriority:0000000000000000 vPortValidateInterruptPriority
     /tmp/cc6cfuTD.s:1051   .text.vPortValidateInterruptPriority:0000000000000068 $d
     /tmp/cc6cfuTD.s:946    .text.vPortEnableVFP:000000000000000e $d
     /tmp/cc6cfuTD.s:272    .text.prvPortStartFirstTask:000000000000001a $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
pxCurrentTCB
vTaskSwitchContext
SEGGER_SYSVIEW_RecordEnterISR
ARM GAS  /tmp/cc6cfuTD.s 			page 38


xTaskIncrementTick
SEGGER_SYSVIEW_RecordExitISRToScheduler
SEGGER_SYSVIEW_RecordExitISR
SystemCoreClock
