ARM GAS  /tmp/ccIgarPJ.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"tasks.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.global	pxCurrentTCB
  21              		.section	.bss.pxCurrentTCB,"aw",%nobits
  22              		.align	2
  25              	pxCurrentTCB:
  26 0000 00000000 		.space	4
  27              		.section	.bss.pxReadyTasksLists,"aw",%nobits
  28              		.align	2
  31              	pxReadyTasksLists:
  32 0000 00000000 		.space	140
  32      00000000 
  32      00000000 
  32      00000000 
  32      00000000 
  33              		.section	.bss.xDelayedTaskList1,"aw",%nobits
  34              		.align	2
  37              	xDelayedTaskList1:
  38 0000 00000000 		.space	20
  38      00000000 
  38      00000000 
  38      00000000 
  38      00000000 
  39              		.section	.bss.xDelayedTaskList2,"aw",%nobits
  40              		.align	2
  43              	xDelayedTaskList2:
  44 0000 00000000 		.space	20
  44      00000000 
  44      00000000 
  44      00000000 
  44      00000000 
  45              		.section	.bss.pxDelayedTaskList,"aw",%nobits
  46              		.align	2
  49              	pxDelayedTaskList:
  50 0000 00000000 		.space	4
  51              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
  52              		.align	2
  55              	pxOverflowDelayedTaskList:
  56 0000 00000000 		.space	4
  57              		.section	.bss.xPendingReadyList,"aw",%nobits
ARM GAS  /tmp/ccIgarPJ.s 			page 2


  58              		.align	2
  61              	xPendingReadyList:
  62 0000 00000000 		.space	20
  62      00000000 
  62      00000000 
  62      00000000 
  62      00000000 
  63              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
  64              		.align	2
  67              	xTasksWaitingTermination:
  68 0000 00000000 		.space	20
  68      00000000 
  68      00000000 
  68      00000000 
  68      00000000 
  69              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
  70              		.align	2
  73              	uxDeletedTasksWaitingCleanUp:
  74 0000 00000000 		.space	4
  75              		.section	.bss.xSuspendedTaskList,"aw",%nobits
  76              		.align	2
  79              	xSuspendedTaskList:
  80 0000 00000000 		.space	20
  80      00000000 
  80      00000000 
  80      00000000 
  80      00000000 
  81              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
  82              		.align	2
  85              	uxCurrentNumberOfTasks:
  86 0000 00000000 		.space	4
  87              		.section	.bss.xTickCount,"aw",%nobits
  88              		.align	2
  91              	xTickCount:
  92 0000 00000000 		.space	4
  93              		.section	.bss.uxTopReadyPriority,"aw",%nobits
  94              		.align	2
  97              	uxTopReadyPriority:
  98 0000 00000000 		.space	4
  99              		.section	.bss.xSchedulerRunning,"aw",%nobits
 100              		.align	2
 103              	xSchedulerRunning:
 104 0000 00000000 		.space	4
 105              		.section	.bss.uxPendedTicks,"aw",%nobits
 106              		.align	2
 109              	uxPendedTicks:
 110 0000 00000000 		.space	4
 111              		.section	.bss.xYieldPending,"aw",%nobits
 112              		.align	2
 115              	xYieldPending:
 116 0000 00000000 		.space	4
 117              		.section	.bss.xNumOfOverflows,"aw",%nobits
 118              		.align	2
 121              	xNumOfOverflows:
 122 0000 00000000 		.space	4
 123              		.section	.bss.uxTaskNumber,"aw",%nobits
 124              		.align	2
ARM GAS  /tmp/ccIgarPJ.s 			page 3


 127              	uxTaskNumber:
 128 0000 00000000 		.space	4
 129              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 130              		.align	2
 133              	xNextTaskUnblockTime:
 134 0000 00000000 		.space	4
 135              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 136              		.align	2
 139              	xIdleTaskHandle:
 140 0000 00000000 		.space	4
 141              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 142              		.align	2
 145              	uxSchedulerSuspended:
 146 0000 00000000 		.space	4
 147              		.section	.text.xTaskCreate,"ax",%progbits
 148              		.align	2
 149              		.global	xTaskCreate
 150              		.thumb
 151              		.thumb_func
 153              	xTaskCreate:
 154              	.LFB5:
 155              		.file 1 "../../../FreeRTOS_9_0/Source/tasks.c"
   1:../../../FreeRTOS_9_0/Source/tasks.c **** /*
   2:../../../FreeRTOS_9_0/Source/tasks.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:../../../FreeRTOS_9_0/Source/tasks.c ****     All rights reserved
   4:../../../FreeRTOS_9_0/Source/tasks.c **** 
   5:../../../FreeRTOS_9_0/Source/tasks.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../../../FreeRTOS_9_0/Source/tasks.c **** 
   7:../../../FreeRTOS_9_0/Source/tasks.c ****     This file is part of the FreeRTOS distribution.
   8:../../../FreeRTOS_9_0/Source/tasks.c **** 
   9:../../../FreeRTOS_9_0/Source/tasks.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../../../FreeRTOS_9_0/Source/tasks.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:../../../FreeRTOS_9_0/Source/tasks.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../../../FreeRTOS_9_0/Source/tasks.c **** 
  13:../../../FreeRTOS_9_0/Source/tasks.c ****     ***************************************************************************
  14:../../../FreeRTOS_9_0/Source/tasks.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../../../FreeRTOS_9_0/Source/tasks.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../../../FreeRTOS_9_0/Source/tasks.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../../../FreeRTOS_9_0/Source/tasks.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../../../FreeRTOS_9_0/Source/tasks.c ****     ***************************************************************************
  19:../../../FreeRTOS_9_0/Source/tasks.c **** 
  20:../../../FreeRTOS_9_0/Source/tasks.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../../../FreeRTOS_9_0/Source/tasks.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../../../FreeRTOS_9_0/Source/tasks.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../../../FreeRTOS_9_0/Source/tasks.c ****     link: http://www.freertos.org/a00114.html
  24:../../../FreeRTOS_9_0/Source/tasks.c **** 
  25:../../../FreeRTOS_9_0/Source/tasks.c ****     ***************************************************************************
  26:../../../FreeRTOS_9_0/Source/tasks.c ****      *                                                                       *
  27:../../../FreeRTOS_9_0/Source/tasks.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../../../FreeRTOS_9_0/Source/tasks.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../../../FreeRTOS_9_0/Source/tasks.c ****      *    platform software that is more than just the market leader, it     *
  30:../../../FreeRTOS_9_0/Source/tasks.c ****      *    is the industry's de facto standard.                               *
  31:../../../FreeRTOS_9_0/Source/tasks.c ****      *                                                                       *
  32:../../../FreeRTOS_9_0/Source/tasks.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../../../FreeRTOS_9_0/Source/tasks.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../../../FreeRTOS_9_0/Source/tasks.c ****      *    tutorial book, reference manual, or both:                          *
  35:../../../FreeRTOS_9_0/Source/tasks.c ****      *    http://www.FreeRTOS.org/Documentation                              *
ARM GAS  /tmp/ccIgarPJ.s 			page 4


  36:../../../FreeRTOS_9_0/Source/tasks.c ****      *                                                                       *
  37:../../../FreeRTOS_9_0/Source/tasks.c ****     ***************************************************************************
  38:../../../FreeRTOS_9_0/Source/tasks.c **** 
  39:../../../FreeRTOS_9_0/Source/tasks.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../../../FreeRTOS_9_0/Source/tasks.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../../../FreeRTOS_9_0/Source/tasks.c ****     defined configASSERT()?
  42:../../../FreeRTOS_9_0/Source/tasks.c **** 
  43:../../../FreeRTOS_9_0/Source/tasks.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../../../FreeRTOS_9_0/Source/tasks.c ****     embedded software for free we request you assist our global community by
  45:../../../FreeRTOS_9_0/Source/tasks.c ****     participating in the support forum.
  46:../../../FreeRTOS_9_0/Source/tasks.c **** 
  47:../../../FreeRTOS_9_0/Source/tasks.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../../../FreeRTOS_9_0/Source/tasks.c ****     be as productive as possible as early as possible.  Now you can receive
  49:../../../FreeRTOS_9_0/Source/tasks.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../../../FreeRTOS_9_0/Source/tasks.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../../../FreeRTOS_9_0/Source/tasks.c **** 
  52:../../../FreeRTOS_9_0/Source/tasks.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../../../FreeRTOS_9_0/Source/tasks.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../../../FreeRTOS_9_0/Source/tasks.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../../../FreeRTOS_9_0/Source/tasks.c **** 
  56:../../../FreeRTOS_9_0/Source/tasks.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../../../FreeRTOS_9_0/Source/tasks.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../../../FreeRTOS_9_0/Source/tasks.c **** 
  59:../../../FreeRTOS_9_0/Source/tasks.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../../../FreeRTOS_9_0/Source/tasks.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../../../FreeRTOS_9_0/Source/tasks.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../../../FreeRTOS_9_0/Source/tasks.c **** 
  63:../../../FreeRTOS_9_0/Source/tasks.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../../../FreeRTOS_9_0/Source/tasks.c ****     engineered and independently SIL3 certified version for use in safety and
  65:../../../FreeRTOS_9_0/Source/tasks.c ****     mission critical applications that require provable dependability.
  66:../../../FreeRTOS_9_0/Source/tasks.c **** 
  67:../../../FreeRTOS_9_0/Source/tasks.c ****     1 tab == 4 spaces!
  68:../../../FreeRTOS_9_0/Source/tasks.c **** */
  69:../../../FreeRTOS_9_0/Source/tasks.c **** 
  70:../../../FreeRTOS_9_0/Source/tasks.c **** /* Standard includes. */
  71:../../../FreeRTOS_9_0/Source/tasks.c **** #include <stdlib.h>
  72:../../../FreeRTOS_9_0/Source/tasks.c **** #include <string.h>
  73:../../../FreeRTOS_9_0/Source/tasks.c **** 
  74:../../../FreeRTOS_9_0/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  75:../../../FreeRTOS_9_0/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  76:../../../FreeRTOS_9_0/Source/tasks.c **** task.h is included from an application file. */
  77:../../../FreeRTOS_9_0/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  78:../../../FreeRTOS_9_0/Source/tasks.c **** 
  79:../../../FreeRTOS_9_0/Source/tasks.c **** /* FreeRTOS includes. */
  80:../../../FreeRTOS_9_0/Source/tasks.c **** #include "FreeRTOS.h"
  81:../../../FreeRTOS_9_0/Source/tasks.c **** #include "task.h"
  82:../../../FreeRTOS_9_0/Source/tasks.c **** #include "timers.h"
  83:../../../FreeRTOS_9_0/Source/tasks.c **** #include "StackMacros.h"
  84:../../../FreeRTOS_9_0/Source/tasks.c **** 
  85:../../../FreeRTOS_9_0/Source/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  86:../../../FreeRTOS_9_0/Source/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  87:../../../FreeRTOS_9_0/Source/tasks.c **** header files above, but not in this file, in order to generate the correct
  88:../../../FreeRTOS_9_0/Source/tasks.c **** privileged Vs unprivileged linkage and placement. */
  89:../../../FreeRTOS_9_0/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  90:../../../FreeRTOS_9_0/Source/tasks.c **** 
  91:../../../FreeRTOS_9_0/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  92:../../../FreeRTOS_9_0/Source/tasks.c **** functions but without including stdio.h here. */
ARM GAS  /tmp/ccIgarPJ.s 			page 5


  93:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  94:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  95:../../../FreeRTOS_9_0/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  96:../../../FreeRTOS_9_0/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  97:../../../FreeRTOS_9_0/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  98:../../../FreeRTOS_9_0/Source/tasks.c **** 	#include <stdio.h>
  99:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
 100:../../../FreeRTOS_9_0/Source/tasks.c **** 
 101:../../../FreeRTOS_9_0/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
 102:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 103:../../../FreeRTOS_9_0/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
 104:../../../FreeRTOS_9_0/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
 105:../../../FreeRTOS_9_0/Source/tasks.c **** #else
 106:../../../FreeRTOS_9_0/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 107:../../../FreeRTOS_9_0/Source/tasks.c **** #endif
 108:../../../FreeRTOS_9_0/Source/tasks.c **** 
 109:../../../FreeRTOS_9_0/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
 110:../../../FreeRTOS_9_0/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
 111:../../../FreeRTOS_9_0/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
 112:../../../FreeRTOS_9_0/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
 113:../../../FreeRTOS_9_0/Source/tasks.c **** 
 114:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 115:../../../FreeRTOS_9_0/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
 116:../../../FreeRTOS_9_0/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
 117:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 118:../../../FreeRTOS_9_0/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
 119:../../../FreeRTOS_9_0/Source/tasks.c **** 
 120:../../../FreeRTOS_9_0/Source/tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
 121:../../../FreeRTOS_9_0/Source/tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
 122:../../../FreeRTOS_9_0/Source/tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
 123:../../../FreeRTOS_9_0/Source/tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
 124:../../../FreeRTOS_9_0/Source/tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
 125:../../../FreeRTOS_9_0/Source/tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
 126:../../../FreeRTOS_9_0/Source/tasks.c **** settings allow a task to be created using either statically or dynamically
 127:../../../FreeRTOS_9_0/Source/tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
 128:../../../FreeRTOS_9_0/Source/tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
 129:../../../FreeRTOS_9_0/Source/tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
 130:../../../FreeRTOS_9_0/Source/tasks.c **** made to free the RAM that was allocated statically.
 131:../../../FreeRTOS_9_0/Source/tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
 132:../../../FreeRTOS_9_0/Source/tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
 133:../../../FreeRTOS_9_0/Source/tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
 134:../../../FreeRTOS_9_0/Source/tasks.c **** a statically allocated stack and a dynamically allocated TCB. */
 135:../../../FreeRTOS_9_0/Source/tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE ( ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && (
 136:../../../FreeRTOS_9_0/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
 137:../../../FreeRTOS_9_0/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
 138:../../../FreeRTOS_9_0/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
 139:../../../FreeRTOS_9_0/Source/tasks.c **** 
 140:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 141:../../../FreeRTOS_9_0/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 142:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 143:../../../FreeRTOS_9_0/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 144:../../../FreeRTOS_9_0/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
 145:../../../FreeRTOS_9_0/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 146:../../../FreeRTOS_9_0/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 147:../../../FreeRTOS_9_0/Source/tasks.c **** 
 148:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 149:../../../FreeRTOS_9_0/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
ARM GAS  /tmp/ccIgarPJ.s 			page 6


 150:../../../FreeRTOS_9_0/Source/tasks.c ****  * global, rather than file scope.
 151:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 152:../../../FreeRTOS_9_0/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 153:../../../FreeRTOS_9_0/Source/tasks.c **** 	#define static
 154:../../../FreeRTOS_9_0/Source/tasks.c **** #endif
 155:../../../FreeRTOS_9_0/Source/tasks.c **** 
 156:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 157:../../../FreeRTOS_9_0/Source/tasks.c **** 
 158:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 159:../../../FreeRTOS_9_0/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 160:../../../FreeRTOS_9_0/Source/tasks.c **** 	microcontroller architecture. */
 161:../../../FreeRTOS_9_0/Source/tasks.c **** 
 162:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 163:../../../FreeRTOS_9_0/Source/tasks.c **** 	state task. */
 164:../../../FreeRTOS_9_0/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 165:../../../FreeRTOS_9_0/Source/tasks.c **** 	{																									\
 166:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 167:../../../FreeRTOS_9_0/Source/tasks.c **** 		{																								\
 168:../../../FreeRTOS_9_0/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 169:../../../FreeRTOS_9_0/Source/tasks.c **** 		}																								\
 170:../../../FreeRTOS_9_0/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 171:../../../FreeRTOS_9_0/Source/tasks.c **** 
 172:../../../FreeRTOS_9_0/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 173:../../../FreeRTOS_9_0/Source/tasks.c **** 
 174:../../../FreeRTOS_9_0/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 175:../../../FreeRTOS_9_0/Source/tasks.c **** 	{																									\
 176:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 177:../../../FreeRTOS_9_0/Source/tasks.c **** 																										\
 178:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 179:../../../FreeRTOS_9_0/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 180:../../../FreeRTOS_9_0/Source/tasks.c **** 		{																								\
 181:../../../FreeRTOS_9_0/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 182:../../../FreeRTOS_9_0/Source/tasks.c **** 			--uxTopPriority;																			\
 183:../../../FreeRTOS_9_0/Source/tasks.c **** 		}																								\
 184:../../../FreeRTOS_9_0/Source/tasks.c **** 																										\
 185:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 186:../../../FreeRTOS_9_0/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 187:../../../FreeRTOS_9_0/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 188:../../../FreeRTOS_9_0/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 189:../../../FreeRTOS_9_0/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 190:../../../FreeRTOS_9_0/Source/tasks.c **** 
 191:../../../FreeRTOS_9_0/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 192:../../../FreeRTOS_9_0/Source/tasks.c **** 
 193:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 194:../../../FreeRTOS_9_0/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 195:../../../FreeRTOS_9_0/Source/tasks.c **** 	being used. */
 196:../../../FreeRTOS_9_0/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 197:../../../FreeRTOS_9_0/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 198:../../../FreeRTOS_9_0/Source/tasks.c **** 
 199:../../../FreeRTOS_9_0/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 200:../../../FreeRTOS_9_0/Source/tasks.c **** 
 201:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 202:../../../FreeRTOS_9_0/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 203:../../../FreeRTOS_9_0/Source/tasks.c **** 	architecture being used. */
 204:../../../FreeRTOS_9_0/Source/tasks.c **** 
 205:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 206:../../../FreeRTOS_9_0/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
ARM GAS  /tmp/ccIgarPJ.s 			page 7


 207:../../../FreeRTOS_9_0/Source/tasks.c **** 
 208:../../../FreeRTOS_9_0/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 209:../../../FreeRTOS_9_0/Source/tasks.c **** 
 210:../../../FreeRTOS_9_0/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 211:../../../FreeRTOS_9_0/Source/tasks.c **** 	{																								\
 212:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 213:../../../FreeRTOS_9_0/Source/tasks.c **** 																									\
 214:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 215:../../../FreeRTOS_9_0/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 216:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 217:../../../FreeRTOS_9_0/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 218:../../../FreeRTOS_9_0/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 219:../../../FreeRTOS_9_0/Source/tasks.c **** 
 220:../../../FreeRTOS_9_0/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 221:../../../FreeRTOS_9_0/Source/tasks.c **** 
 222:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 223:../../../FreeRTOS_9_0/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 224:../../../FreeRTOS_9_0/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 225:../../../FreeRTOS_9_0/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 226:../../../FreeRTOS_9_0/Source/tasks.c **** 	{																									\
 227:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 228:../../../FreeRTOS_9_0/Source/tasks.c **** 		{																								\
 229:../../../FreeRTOS_9_0/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 230:../../../FreeRTOS_9_0/Source/tasks.c **** 		}																								\
 231:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 232:../../../FreeRTOS_9_0/Source/tasks.c **** 
 233:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 234:../../../FreeRTOS_9_0/Source/tasks.c **** 
 235:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
 236:../../../FreeRTOS_9_0/Source/tasks.c **** 
 237:../../../FreeRTOS_9_0/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 238:../../../FreeRTOS_9_0/Source/tasks.c **** count overflows. */
 239:../../../FreeRTOS_9_0/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 240:../../../FreeRTOS_9_0/Source/tasks.c **** {																									\
 241:../../../FreeRTOS_9_0/Source/tasks.c **** 	List_t *pxTemp;																					\
 242:../../../FreeRTOS_9_0/Source/tasks.c **** 																									\
 243:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 244:../../../FreeRTOS_9_0/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 245:../../../FreeRTOS_9_0/Source/tasks.c **** 																									\
 246:../../../FreeRTOS_9_0/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 247:../../../FreeRTOS_9_0/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 248:../../../FreeRTOS_9_0/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 249:../../../FreeRTOS_9_0/Source/tasks.c **** 	xNumOfOverflows++;																				\
 250:../../../FreeRTOS_9_0/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 251:../../../FreeRTOS_9_0/Source/tasks.c **** }
 252:../../../FreeRTOS_9_0/Source/tasks.c **** 
 253:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
 254:../../../FreeRTOS_9_0/Source/tasks.c **** 
 255:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 256:../../../FreeRTOS_9_0/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 257:../../../FreeRTOS_9_0/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 258:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 259:../../../FreeRTOS_9_0/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 260:../../../FreeRTOS_9_0/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 261:../../../FreeRTOS_9_0/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 262:../../../FreeRTOS_9_0/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 263:../../../FreeRTOS_9_0/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
ARM GAS  /tmp/ccIgarPJ.s 			page 8


 264:../../../FreeRTOS_9_0/Source/tasks.c **** 
 265:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 266:../../../FreeRTOS_9_0/Source/tasks.c ****  * Place the task represented by pxTCB which has been in a ready list before
 267:../../../FreeRTOS_9_0/Source/tasks.c ****  * into the appropriate ready list for the task.
 268:../../../FreeRTOS_9_0/Source/tasks.c ****  * It is inserted at the end of the list.
 269:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 270:../../../FreeRTOS_9_0/Source/tasks.c **** #define prvReaddTaskToReadyList( pxTCB )															\
 271:../../../FreeRTOS_9_0/Source/tasks.c **** 	traceREADDED_TASK_TO_READY_STATE( pxTCB );														\
 272:../../../FreeRTOS_9_0/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 273:../../../FreeRTOS_9_0/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 274:../../../FreeRTOS_9_0/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 275:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
 276:../../../FreeRTOS_9_0/Source/tasks.c **** 
 277:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 278:../../../FreeRTOS_9_0/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 279:../../../FreeRTOS_9_0/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 280:../../../FreeRTOS_9_0/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 281:../../../FreeRTOS_9_0/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 282:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 283:../../../FreeRTOS_9_0/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 284:../../../FreeRTOS_9_0/Source/tasks.c **** 
 285:../../../FreeRTOS_9_0/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 286:../../../FreeRTOS_9_0/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 287:../../../FreeRTOS_9_0/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 288:../../../FreeRTOS_9_0/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 289:../../../FreeRTOS_9_0/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 290:../../../FreeRTOS_9_0/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 291:../../../FreeRTOS_9_0/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 292:../../../FreeRTOS_9_0/Source/tasks.c **** to its original value when it is released. */
 293:../../../FreeRTOS_9_0/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 294:../../../FreeRTOS_9_0/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 295:../../../FreeRTOS_9_0/Source/tasks.c **** #else
 296:../../../FreeRTOS_9_0/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 297:../../../FreeRTOS_9_0/Source/tasks.c **** #endif
 298:../../../FreeRTOS_9_0/Source/tasks.c **** 
 299:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 300:../../../FreeRTOS_9_0/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 301:../../../FreeRTOS_9_0/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 302:../../../FreeRTOS_9_0/Source/tasks.c ****  * (the task's run time environment, including register values)
 303:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 304:../../../FreeRTOS_9_0/Source/tasks.c **** typedef struct tskTaskControlBlock
 305:../../../FreeRTOS_9_0/Source/tasks.c **** {
 306:../../../FreeRTOS_9_0/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 307:../../../FreeRTOS_9_0/Source/tasks.c **** 
 308:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 309:../../../FreeRTOS_9_0/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 310:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
 311:../../../FreeRTOS_9_0/Source/tasks.c **** 
 312:../../../FreeRTOS_9_0/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 313:../../../FreeRTOS_9_0/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 314:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 315:../../../FreeRTOS_9_0/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 316:../../../FreeRTOS_9_0/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 317:../../../FreeRTOS_9_0/Source/tasks.c **** 
 318:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( portSTACK_GROWTH > 0 )
 319:../../../FreeRTOS_9_0/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the end of the stack on architectures where the stack 
 320:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
ARM GAS  /tmp/ccIgarPJ.s 			page 9


 321:../../../FreeRTOS_9_0/Source/tasks.c **** 
 322:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 323:../../../FreeRTOS_9_0/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 324:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
 325:../../../FreeRTOS_9_0/Source/tasks.c **** 
 326:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 327:../../../FreeRTOS_9_0/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 328:../../../FreeRTOS_9_0/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 329:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
 330:../../../FreeRTOS_9_0/Source/tasks.c **** 
 331:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 332:../../../FreeRTOS_9_0/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 333:../../../FreeRTOS_9_0/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 334:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
 335:../../../FreeRTOS_9_0/Source/tasks.c **** 
 336:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 337:../../../FreeRTOS_9_0/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 338:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
 339:../../../FreeRTOS_9_0/Source/tasks.c **** 
 340:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 341:../../../FreeRTOS_9_0/Source/tasks.c **** 		void *pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 342:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
 343:../../../FreeRTOS_9_0/Source/tasks.c **** 
 344:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 345:../../../FreeRTOS_9_0/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 346:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
 347:../../../FreeRTOS_9_0/Source/tasks.c **** 
 348:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 349:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 350:../../../FreeRTOS_9_0/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 351:../../../FreeRTOS_9_0/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 352:../../../FreeRTOS_9_0/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 353:../../../FreeRTOS_9_0/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 354:../../../FreeRTOS_9_0/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 355:../../../FreeRTOS_9_0/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 356:../../../FreeRTOS_9_0/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 357:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
 358:../../../FreeRTOS_9_0/Source/tasks.c **** 
 359:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 360:../../../FreeRTOS_9_0/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 361:../../../FreeRTOS_9_0/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 362:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
 363:../../../FreeRTOS_9_0/Source/tasks.c **** 
 364:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* See the comments above the definition of
 365:../../../FreeRTOS_9_0/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 366:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 367:../../../FreeRTOS_9_0/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 368:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
 369:../../../FreeRTOS_9_0/Source/tasks.c **** 
 370:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 371:../../../FreeRTOS_9_0/Source/tasks.c **** 		uint8_t ucDelayAborted;
 372:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
 373:../../../FreeRTOS_9_0/Source/tasks.c **** 
 374:../../../FreeRTOS_9_0/Source/tasks.c **** } tskTCB;
 375:../../../FreeRTOS_9_0/Source/tasks.c **** 
 376:../../../FreeRTOS_9_0/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 377:../../../FreeRTOS_9_0/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
ARM GAS  /tmp/ccIgarPJ.s 			page 10


 378:../../../FreeRTOS_9_0/Source/tasks.c **** typedef tskTCB TCB_t;
 379:../../../FreeRTOS_9_0/Source/tasks.c **** 
 380:../../../FreeRTOS_9_0/Source/tasks.c **** /*lint -e956 A manual analysis and inspection has been used to determine which
 381:../../../FreeRTOS_9_0/Source/tasks.c **** static variables must be declared volatile. */
 382:../../../FreeRTOS_9_0/Source/tasks.c **** 
 383:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 384:../../../FreeRTOS_9_0/Source/tasks.c **** 
 385:../../../FreeRTOS_9_0/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 386:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 387:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 388:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 389:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 390:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 391:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 392:../../../FreeRTOS_9_0/Source/tasks.c **** 
 393:../../../FreeRTOS_9_0/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 394:../../../FreeRTOS_9_0/Source/tasks.c **** 
 395:../../../FreeRTOS_9_0/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 396:../../../FreeRTOS_9_0/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 397:../../../FreeRTOS_9_0/Source/tasks.c **** 
 398:../../../FreeRTOS_9_0/Source/tasks.c **** #endif
 399:../../../FreeRTOS_9_0/Source/tasks.c **** 
 400:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 401:../../../FreeRTOS_9_0/Source/tasks.c **** 
 402:../../../FreeRTOS_9_0/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 403:../../../FreeRTOS_9_0/Source/tasks.c **** 
 404:../../../FreeRTOS_9_0/Source/tasks.c **** #endif
 405:../../../FreeRTOS_9_0/Source/tasks.c **** 
 406:../../../FreeRTOS_9_0/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 407:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 408:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) 0U;
 409:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 410:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 411:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 412:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 413:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 414:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 415:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 416:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 417:../../../FreeRTOS_9_0/Source/tasks.c **** 
 418:../../../FreeRTOS_9_0/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 419:../../../FreeRTOS_9_0/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 420:../../../FreeRTOS_9_0/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 421:../../../FreeRTOS_9_0/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 422:../../../FreeRTOS_9_0/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 423:../../../FreeRTOS_9_0/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 424:../../../FreeRTOS_9_0/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 425:../../../FreeRTOS_9_0/Source/tasks.c **** accessed from a critical section. */
 426:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 427:../../../FreeRTOS_9_0/Source/tasks.c **** 
 428:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 429:../../../FreeRTOS_9_0/Source/tasks.c **** 
 430:../../../FreeRTOS_9_0/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 431:../../../FreeRTOS_9_0/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 432:../../../FreeRTOS_9_0/Source/tasks.c **** 
 433:../../../FreeRTOS_9_0/Source/tasks.c **** #endif
 434:../../../FreeRTOS_9_0/Source/tasks.c **** 
ARM GAS  /tmp/ccIgarPJ.s 			page 11


 435:../../../FreeRTOS_9_0/Source/tasks.c **** /*lint +e956 */
 436:../../../FreeRTOS_9_0/Source/tasks.c **** 
 437:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
 438:../../../FreeRTOS_9_0/Source/tasks.c **** 
 439:../../../FreeRTOS_9_0/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 440:../../../FreeRTOS_9_0/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 441:../../../FreeRTOS_9_0/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 442:../../../FreeRTOS_9_0/Source/tasks.c **** #endif
 443:../../../FreeRTOS_9_0/Source/tasks.c **** 
 444:../../../FreeRTOS_9_0/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 445:../../../FreeRTOS_9_0/Source/tasks.c **** 	extern void vApplicationTickHook( void );
 446:../../../FreeRTOS_9_0/Source/tasks.c **** #endif
 447:../../../FreeRTOS_9_0/Source/tasks.c **** 
 448:../../../FreeRTOS_9_0/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 449:../../../FreeRTOS_9_0/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 450:../../../FreeRTOS_9_0/Source/tasks.c **** #endif
 451:../../../FreeRTOS_9_0/Source/tasks.c **** 
 452:../../../FreeRTOS_9_0/Source/tasks.c **** /* File private functions. --------------------------------*/
 453:../../../FreeRTOS_9_0/Source/tasks.c **** 
 454:../../../FreeRTOS_9_0/Source/tasks.c **** /**
 455:../../../FreeRTOS_9_0/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 456:../../../FreeRTOS_9_0/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 457:../../../FreeRTOS_9_0/Source/tasks.c ****  * is in any other state.
 458:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 459:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 460:../../../FreeRTOS_9_0/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 461:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 462:../../../FreeRTOS_9_0/Source/tasks.c **** 
 463:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 464:../../../FreeRTOS_9_0/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 465:../../../FreeRTOS_9_0/Source/tasks.c ****  * automatically upon the creation of the first task.
 466:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 467:../../../FreeRTOS_9_0/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 468:../../../FreeRTOS_9_0/Source/tasks.c **** 
 469:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 470:../../../FreeRTOS_9_0/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 471:../../../FreeRTOS_9_0/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 472:../../../FreeRTOS_9_0/Source/tasks.c ****  * creation of the first user task.
 473:../../../FreeRTOS_9_0/Source/tasks.c ****  *
 474:../../../FreeRTOS_9_0/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 475:../../../FreeRTOS_9_0/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 476:../../../FreeRTOS_9_0/Source/tasks.c ****  *
 477:../../../FreeRTOS_9_0/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 478:../../../FreeRTOS_9_0/Source/tasks.c ****  *
 479:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 480:../../../FreeRTOS_9_0/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 481:../../../FreeRTOS_9_0/Source/tasks.c **** 
 482:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 483:../../../FreeRTOS_9_0/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 484:../../../FreeRTOS_9_0/Source/tasks.c ****  * including the stack pointed to by the TCB.
 485:../../../FreeRTOS_9_0/Source/tasks.c ****  *
 486:../../../FreeRTOS_9_0/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 487:../../../FreeRTOS_9_0/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 488:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 489:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 490:../../../FreeRTOS_9_0/Source/tasks.c **** 
 491:../../../FreeRTOS_9_0/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
ARM GAS  /tmp/ccIgarPJ.s 			page 12


 492:../../../FreeRTOS_9_0/Source/tasks.c **** 
 493:../../../FreeRTOS_9_0/Source/tasks.c **** #endif
 494:../../../FreeRTOS_9_0/Source/tasks.c **** 
 495:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 496:../../../FreeRTOS_9_0/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 497:../../../FreeRTOS_9_0/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 498:../../../FreeRTOS_9_0/Source/tasks.c ****  * and its TCB deleted.
 499:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 500:../../../FreeRTOS_9_0/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 501:../../../FreeRTOS_9_0/Source/tasks.c **** 
 502:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 503:../../../FreeRTOS_9_0/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 504:../../../FreeRTOS_9_0/Source/tasks.c ****  * either the current or the overflow delayed task list.
 505:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 506:../../../FreeRTOS_9_0/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 507:../../../FreeRTOS_9_0/Source/tasks.c **** 
 508:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 509:../../../FreeRTOS_9_0/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 510:../../../FreeRTOS_9_0/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 511:../../../FreeRTOS_9_0/Source/tasks.c ****  * a suspended list, etc.).
 512:../../../FreeRTOS_9_0/Source/tasks.c ****  *
 513:../../../FreeRTOS_9_0/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 514:../../../FreeRTOS_9_0/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 515:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 516:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 517:../../../FreeRTOS_9_0/Source/tasks.c **** 
 518:../../../FreeRTOS_9_0/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 519:../../../FreeRTOS_9_0/Source/tasks.c **** 
 520:../../../FreeRTOS_9_0/Source/tasks.c **** #endif
 521:../../../FreeRTOS_9_0/Source/tasks.c **** 
 522:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 523:../../../FreeRTOS_9_0/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 524:../../../FreeRTOS_9_0/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 525:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 526:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 527:../../../FreeRTOS_9_0/Source/tasks.c **** 
 528:../../../FreeRTOS_9_0/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 529:../../../FreeRTOS_9_0/Source/tasks.c **** 
 530:../../../FreeRTOS_9_0/Source/tasks.c **** #endif
 531:../../../FreeRTOS_9_0/Source/tasks.c **** 
 532:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 533:../../../FreeRTOS_9_0/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 534:../../../FreeRTOS_9_0/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 535:../../../FreeRTOS_9_0/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 536:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 537:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 538:../../../FreeRTOS_9_0/Source/tasks.c **** 
 539:../../../FreeRTOS_9_0/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
 540:../../../FreeRTOS_9_0/Source/tasks.c **** 
 541:../../../FreeRTOS_9_0/Source/tasks.c **** #endif
 542:../../../FreeRTOS_9_0/Source/tasks.c **** 
 543:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 544:../../../FreeRTOS_9_0/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 545:../../../FreeRTOS_9_0/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 546:../../../FreeRTOS_9_0/Source/tasks.c ****  *
 547:../../../FreeRTOS_9_0/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 548:../../../FreeRTOS_9_0/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
ARM GAS  /tmp/ccIgarPJ.s 			page 13


 549:../../../FreeRTOS_9_0/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 550:../../../FreeRTOS_9_0/Source/tasks.c ****  * set to a value other than 1.
 551:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 552:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 553:../../../FreeRTOS_9_0/Source/tasks.c **** 
 554:../../../FreeRTOS_9_0/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 555:../../../FreeRTOS_9_0/Source/tasks.c **** 
 556:../../../FreeRTOS_9_0/Source/tasks.c **** #endif
 557:../../../FreeRTOS_9_0/Source/tasks.c **** 
 558:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 559:../../../FreeRTOS_9_0/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 560:../../../FreeRTOS_9_0/Source/tasks.c ****  * will exit the Blocked state.
 561:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 562:../../../FreeRTOS_9_0/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 563:../../../FreeRTOS_9_0/Source/tasks.c **** 
 564:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 565:../../../FreeRTOS_9_0/Source/tasks.c **** 
 566:../../../FreeRTOS_9_0/Source/tasks.c **** 	/*
 567:../../../FreeRTOS_9_0/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 568:../../../FreeRTOS_9_0/Source/tasks.c **** 	 * human readable tables of task information.
 569:../../../FreeRTOS_9_0/Source/tasks.c **** 	 */
 570:../../../FreeRTOS_9_0/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 571:../../../FreeRTOS_9_0/Source/tasks.c **** 
 572:../../../FreeRTOS_9_0/Source/tasks.c **** #endif
 573:../../../FreeRTOS_9_0/Source/tasks.c **** 
 574:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 575:../../../FreeRTOS_9_0/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 576:../../../FreeRTOS_9_0/Source/tasks.c ****  * dynamically to fill in the structure's members.
 577:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 578:../../../FreeRTOS_9_0/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 579:../../../FreeRTOS_9_0/Source/tasks.c **** 									const char * const pcName,
 580:../../../FreeRTOS_9_0/Source/tasks.c **** 									const uint32_t ulStackDepth,
 581:../../../FreeRTOS_9_0/Source/tasks.c **** 									void * const pvParameters,
 582:../../../FreeRTOS_9_0/Source/tasks.c **** 									UBaseType_t uxPriority,
 583:../../../FreeRTOS_9_0/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 584:../../../FreeRTOS_9_0/Source/tasks.c **** 									TCB_t *pxNewTCB,
 585:../../../FreeRTOS_9_0/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char
 586:../../../FreeRTOS_9_0/Source/tasks.c **** 
 587:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 588:../../../FreeRTOS_9_0/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 589:../../../FreeRTOS_9_0/Source/tasks.c ****  * under the control of the scheduler.
 590:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 591:../../../FreeRTOS_9_0/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 592:../../../FreeRTOS_9_0/Source/tasks.c **** 
 593:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
 594:../../../FreeRTOS_9_0/Source/tasks.c **** 
 595:../../../FreeRTOS_9_0/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 596:../../../FreeRTOS_9_0/Source/tasks.c **** 
 597:../../../FreeRTOS_9_0/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 598:../../../FreeRTOS_9_0/Source/tasks.c **** 									const char * const pcName,
 599:../../../FreeRTOS_9_0/Source/tasks.c **** 									const uint32_t ulStackDepth,
 600:../../../FreeRTOS_9_0/Source/tasks.c **** 									void * const pvParameters,
 601:../../../FreeRTOS_9_0/Source/tasks.c **** 									UBaseType_t uxPriority,
 602:../../../FreeRTOS_9_0/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 603:../../../FreeRTOS_9_0/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer ) /*lint !e971 Unqualified char types are allowed for st
 604:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 605:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxNewTCB;
ARM GAS  /tmp/ccIgarPJ.s 			page 14


 606:../../../FreeRTOS_9_0/Source/tasks.c **** 	TaskHandle_t xReturn;
 607:../../../FreeRTOS_9_0/Source/tasks.c **** 
 608:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 609:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 610:../../../FreeRTOS_9_0/Source/tasks.c **** 
 611:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 612:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
 613:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 614:../../../FreeRTOS_9_0/Source/tasks.c **** 			function - use them. */
 615:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are desig
 616:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 617:../../../FreeRTOS_9_0/Source/tasks.c **** 
 618:../../../FreeRTOS_9_0/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 619:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
 620:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 621:../../../FreeRTOS_9_0/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 622:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 623:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
 624:../../../FreeRTOS_9_0/Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 625:../../../FreeRTOS_9_0/Source/tasks.c **** 
 626:../../../FreeRTOS_9_0/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 627:../../../FreeRTOS_9_0/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 628:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
 629:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
 630:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
 631:../../../FreeRTOS_9_0/Source/tasks.c **** 			xReturn = NULL;
 632:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
 633:../../../FreeRTOS_9_0/Source/tasks.c **** 
 634:../../../FreeRTOS_9_0/Source/tasks.c **** 		return xReturn;
 635:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 636:../../../FreeRTOS_9_0/Source/tasks.c **** 
 637:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 638:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
 639:../../../FreeRTOS_9_0/Source/tasks.c **** 
 640:../../../FreeRTOS_9_0/Source/tasks.c **** #if( portUSING_MPU_WRAPPERS == 1 )
 641:../../../FreeRTOS_9_0/Source/tasks.c **** 
 642:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 643:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 644:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxNewTCB;
 645:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 646:../../../FreeRTOS_9_0/Source/tasks.c **** 
 647:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 648:../../../FreeRTOS_9_0/Source/tasks.c **** 
 649:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 650:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
 651:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 652:../../../FreeRTOS_9_0/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 653:../../../FreeRTOS_9_0/Source/tasks.c **** 			not static allocation is being used. */
 654:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 655:../../../FreeRTOS_9_0/Source/tasks.c **** 
 656:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxNewTCB != NULL )
 657:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
 658:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 659:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 660:../../../FreeRTOS_9_0/Source/tasks.c **** 
 661:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note
 662:../../../FreeRTOS_9_0/Source/tasks.c **** 				this task had a statically allocated stack in case it is
ARM GAS  /tmp/ccIgarPJ.s 			page 15


 663:../../../FreeRTOS_9_0/Source/tasks.c **** 				later deleted.  The TCB was allocated dynamically. */
 664:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 665:../../../FreeRTOS_9_0/Source/tasks.c **** 
 666:../../../FreeRTOS_9_0/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 667:../../../FreeRTOS_9_0/Source/tasks.c **** 										pxTaskDefinition->pcName,
 668:../../../FreeRTOS_9_0/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 669:../../../FreeRTOS_9_0/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 670:../../../FreeRTOS_9_0/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 671:../../../FreeRTOS_9_0/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 672:../../../FreeRTOS_9_0/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 673:../../../FreeRTOS_9_0/Source/tasks.c **** 
 674:../../../FreeRTOS_9_0/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 675:../../../FreeRTOS_9_0/Source/tasks.c **** 				xReturn = pdPASS;
 676:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
 677:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
 678:../../../FreeRTOS_9_0/Source/tasks.c **** 
 679:../../../FreeRTOS_9_0/Source/tasks.c **** 		return xReturn;
 680:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 681:../../../FreeRTOS_9_0/Source/tasks.c **** 
 682:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 683:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
 684:../../../FreeRTOS_9_0/Source/tasks.c **** 
 685:../../../FreeRTOS_9_0/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 686:../../../FreeRTOS_9_0/Source/tasks.c **** 
 687:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 688:../../../FreeRTOS_9_0/Source/tasks.c **** 							const char * const pcName,
 689:../../../FreeRTOS_9_0/Source/tasks.c **** 							const uint16_t usStackDepth,
 690:../../../FreeRTOS_9_0/Source/tasks.c **** 							void * const pvParameters,
 691:../../../FreeRTOS_9_0/Source/tasks.c **** 							UBaseType_t uxPriority,
 692:../../../FreeRTOS_9_0/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for str
 693:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 156              		.loc 1 693 0
 157              		.cfi_startproc
 158              		@ args = 8, pretend = 0, frame = 32
 159              		@ frame_needed = 1, uses_anonymous_args = 0
 160 0000 80B5     		push	{r7, lr}
 161              	.LCFI0:
 162              		.cfi_def_cfa_offset 8
 163              		.cfi_offset 7, -8
 164              		.cfi_offset 14, -4
 165 0002 8CB0     		sub	sp, sp, #48
 166              	.LCFI1:
 167              		.cfi_def_cfa_offset 56
 168 0004 04AF     		add	r7, sp, #16
 169              	.LCFI2:
 170              		.cfi_def_cfa 7, 40
 171 0006 F860     		str	r0, [r7, #12]
 172 0008 B960     		str	r1, [r7, #8]
 173 000a 3B60     		str	r3, [r7]
 174 000c 1346     		mov	r3, r2	@ movhi
 175 000e FB80     		strh	r3, [r7, #6]	@ movhi
 176              	.LBB92:
 694:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxNewTCB;
 695:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xReturn;
 696:../../../FreeRTOS_9_0/Source/tasks.c **** 
 697:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 698:../../../FreeRTOS_9_0/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
ARM GAS  /tmp/ccIgarPJ.s 			page 16


 699:../../../FreeRTOS_9_0/Source/tasks.c **** 		the TCB then the stack. */
 700:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 701:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
 702:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 703:../../../FreeRTOS_9_0/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 704:../../../FreeRTOS_9_0/Source/tasks.c **** 			allocation is being used. */
 705:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 706:../../../FreeRTOS_9_0/Source/tasks.c **** 
 707:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxNewTCB != NULL )
 708:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
 709:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 710:../../../FreeRTOS_9_0/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 711:../../../FreeRTOS_9_0/Source/tasks.c **** 				be deleted later if required. */
 712:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 713:../../../FreeRTOS_9_0/Source/tasks.c **** 
 714:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 715:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
 716:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 717:../../../FreeRTOS_9_0/Source/tasks.c **** 					vPortFree( pxNewTCB );
 718:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxNewTCB = NULL;
 719:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
 720:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
 721:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
 722:../../../FreeRTOS_9_0/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 723:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
 724:../../../FreeRTOS_9_0/Source/tasks.c **** 		StackType_t *pxStack;
 725:../../../FreeRTOS_9_0/Source/tasks.c **** 
 726:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 727:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) 
 177              		.loc 1 727 0
 178 0010 FB88     		ldrh	r3, [r7, #6]
 179 0012 9B00     		lsls	r3, r3, #2
 180 0014 1846     		mov	r0, r3
 181 0016 FFF7FEFF 		bl	pvPortMalloc
 182 001a 7861     		str	r0, [r7, #20]
 728:../../../FreeRTOS_9_0/Source/tasks.c **** 
 729:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxStack != NULL )
 183              		.loc 1 729 0
 184 001c 7B69     		ldr	r3, [r7, #20]
 185 001e 002B     		cmp	r3, #0
 186 0020 0ED0     		beq	.L2
 730:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
 731:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Allocate space for the TCB. */
 732:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the cas
 187              		.loc 1 732 0
 188 0022 5C20     		movs	r0, #92
 189 0024 FFF7FEFF 		bl	pvPortMalloc
 190 0028 F861     		str	r0, [r7, #28]
 733:../../../FreeRTOS_9_0/Source/tasks.c **** 
 734:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( pxNewTCB != NULL )
 191              		.loc 1 734 0
 192 002a FB69     		ldr	r3, [r7, #28]
 193 002c 002B     		cmp	r3, #0
 194 002e 03D0     		beq	.L3
 735:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
 736:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 737:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
ARM GAS  /tmp/ccIgarPJ.s 			page 17


 195              		.loc 1 737 0
 196 0030 FB69     		ldr	r3, [r7, #28]
 197 0032 7A69     		ldr	r2, [r7, #20]
 198 0034 1A63     		str	r2, [r3, #48]
 199 0036 05E0     		b	.L5
 200              	.L3:
 738:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
 739:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
 740:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
 741:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 742:../../../FreeRTOS_9_0/Source/tasks.c **** 					it again. */
 743:../../../FreeRTOS_9_0/Source/tasks.c **** 					vPortFree( pxStack );
 201              		.loc 1 743 0
 202 0038 7869     		ldr	r0, [r7, #20]
 203 003a FFF7FEFF 		bl	vPortFree
 204 003e 01E0     		b	.L5
 205              	.L2:
 744:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
 745:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
 746:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
 747:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
 748:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxNewTCB = NULL;
 206              		.loc 1 748 0
 207 0040 0023     		movs	r3, #0
 208 0042 FB61     		str	r3, [r7, #28]
 209              	.L5:
 210              	.LBE92:
 749:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
 750:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
 751:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 752:../../../FreeRTOS_9_0/Source/tasks.c **** 
 753:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( pxNewTCB != NULL )
 211              		.loc 1 753 0
 212 0044 FB69     		ldr	r3, [r7, #28]
 213 0046 002B     		cmp	r3, #0
 214 0048 13D0     		beq	.L6
 754:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
 755:../../../FreeRTOS_9_0/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 756:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
 757:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 758:../../../FreeRTOS_9_0/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 759:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 760:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
 761:../../../FreeRTOS_9_0/Source/tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 762:../../../FreeRTOS_9_0/Source/tasks.c **** 
 763:../../../FreeRTOS_9_0/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 215              		.loc 1 763 0
 216 004a FA88     		ldrh	r2, [r7, #6]
 217 004c BB6A     		ldr	r3, [r7, #40]
 218 004e 0093     		str	r3, [sp]
 219 0050 FB6A     		ldr	r3, [r7, #44]
 220 0052 0193     		str	r3, [sp, #4]
 221 0054 FB69     		ldr	r3, [r7, #28]
 222 0056 0293     		str	r3, [sp, #8]
 223 0058 0023     		movs	r3, #0
 224 005a 0393     		str	r3, [sp, #12]
 225 005c F868     		ldr	r0, [r7, #12]
ARM GAS  /tmp/ccIgarPJ.s 			page 18


 226 005e B968     		ldr	r1, [r7, #8]
 227 0060 3B68     		ldr	r3, [r7]
 228 0062 FFF7FEFF 		bl	prvInitialiseNewTask
 764:../../../FreeRTOS_9_0/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 229              		.loc 1 764 0
 230 0066 F869     		ldr	r0, [r7, #28]
 231 0068 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 765:../../../FreeRTOS_9_0/Source/tasks.c **** 			xReturn = pdPASS;
 232              		.loc 1 765 0
 233 006c 0123     		movs	r3, #1
 234 006e BB61     		str	r3, [r7, #24]
 235 0070 02E0     		b	.L7
 236              	.L6:
 766:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
 767:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
 768:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
 769:../../../FreeRTOS_9_0/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 237              		.loc 1 769 0
 238 0072 4FF0FF33 		mov	r3, #-1
 239 0076 BB61     		str	r3, [r7, #24]
 240              	.L7:
 770:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
 771:../../../FreeRTOS_9_0/Source/tasks.c **** 
 772:../../../FreeRTOS_9_0/Source/tasks.c **** 		return xReturn;
 241              		.loc 1 772 0
 242 0078 BB69     		ldr	r3, [r7, #24]
 773:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 243              		.loc 1 773 0
 244 007a 1846     		mov	r0, r3
 245 007c 2037     		adds	r7, r7, #32
 246              	.LCFI3:
 247              		.cfi_def_cfa_offset 8
 248 007e BD46     		mov	sp, r7
 249              	.LCFI4:
 250              		.cfi_def_cfa_register 13
 251              		@ sp needed
 252 0080 80BD     		pop	{r7, pc}
 253              		.cfi_endproc
 254              	.LFE5:
 256 0082 00BF     		.section	.text.prvInitialiseNewTask,"ax",%progbits
 257              		.align	2
 258              		.thumb
 259              		.thumb_func
 261              	prvInitialiseNewTask:
 262              	.LFB6:
 774:../../../FreeRTOS_9_0/Source/tasks.c **** 
 775:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 776:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
 777:../../../FreeRTOS_9_0/Source/tasks.c **** 
 778:../../../FreeRTOS_9_0/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 779:../../../FreeRTOS_9_0/Source/tasks.c **** 									const char * const pcName,
 780:../../../FreeRTOS_9_0/Source/tasks.c **** 									const uint32_t ulStackDepth,
 781:../../../FreeRTOS_9_0/Source/tasks.c **** 									void * const pvParameters,
 782:../../../FreeRTOS_9_0/Source/tasks.c **** 									UBaseType_t uxPriority,
 783:../../../FreeRTOS_9_0/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 784:../../../FreeRTOS_9_0/Source/tasks.c **** 									TCB_t *pxNewTCB,
 785:../../../FreeRTOS_9_0/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed fo
ARM GAS  /tmp/ccIgarPJ.s 			page 19


 786:../../../FreeRTOS_9_0/Source/tasks.c **** {
 263              		.loc 1 786 0
 264              		.cfi_startproc
 265              		@ args = 16, pretend = 0, frame = 32
 266              		@ frame_needed = 1, uses_anonymous_args = 0
 267 0000 80B5     		push	{r7, lr}
 268              	.LCFI5:
 269              		.cfi_def_cfa_offset 8
 270              		.cfi_offset 7, -8
 271              		.cfi_offset 14, -4
 272 0002 88B0     		sub	sp, sp, #32
 273              	.LCFI6:
 274              		.cfi_def_cfa_offset 40
 275 0004 00AF     		add	r7, sp, #0
 276              	.LCFI7:
 277              		.cfi_def_cfa_register 7
 278 0006 F860     		str	r0, [r7, #12]
 279 0008 B960     		str	r1, [r7, #8]
 280 000a 7A60     		str	r2, [r7, #4]
 281 000c 3B60     		str	r3, [r7]
 787:../../../FreeRTOS_9_0/Source/tasks.c **** StackType_t *pxTopOfStack;
 788:../../../FreeRTOS_9_0/Source/tasks.c **** UBaseType_t x;
 789:../../../FreeRTOS_9_0/Source/tasks.c **** 
 790:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 791:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 792:../../../FreeRTOS_9_0/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 793:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 794:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
 795:../../../FreeRTOS_9_0/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 796:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
 797:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
 798:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
 799:../../../FreeRTOS_9_0/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 800:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
 801:../../../FreeRTOS_9_0/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 802:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 803:../../../FreeRTOS_9_0/Source/tasks.c **** 
 804:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 805:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTa
 806:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 807:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 808:../../../FreeRTOS_9_0/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 282              		.loc 1 808 0
 283 000e 3B6B     		ldr	r3, [r7, #48]
 284 0010 1A6B     		ldr	r2, [r3, #48]
 285 0012 7B68     		ldr	r3, [r7, #4]
 286 0014 9B00     		lsls	r3, r3, #2
 287 0016 1046     		mov	r0, r2
 288 0018 A521     		movs	r1, #165
 289 001a 1A46     		mov	r2, r3
 290 001c FFF7FEFF 		bl	memset
 809:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 810:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INC
 811:../../../FreeRTOS_9_0/Source/tasks.c **** 
 812:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 813:../../../FreeRTOS_9_0/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 814:../../../FreeRTOS_9_0/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
ARM GAS  /tmp/ccIgarPJ.s 			page 20


 815:../../../FreeRTOS_9_0/Source/tasks.c **** 	by the port. */
 816:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 817:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 818:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 291              		.loc 1 818 0
 292 0020 3B6B     		ldr	r3, [r7, #48]
 293 0022 1A6B     		ldr	r2, [r3, #48]
 294 0024 7B68     		ldr	r3, [r7, #4]
 295 0026 03F18043 		add	r3, r3, #1073741824
 296 002a 013B     		subs	r3, r3, #1
 297 002c 9B00     		lsls	r3, r3, #2
 298 002e 1344     		add	r3, r3, r2
 299 0030 BB61     		str	r3, [r7, #24]
 819:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 300              		.loc 1 819 0
 301 0032 BB69     		ldr	r3, [r7, #24]
 302 0034 23F00703 		bic	r3, r3, #7
 303 0038 BB61     		str	r3, [r7, #24]
 820:../../../FreeRTOS_9_0/Source/tasks.c **** 
 821:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 822:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 304              		.loc 1 822 0
 305 003a BB69     		ldr	r3, [r7, #24]
 306 003c 03F00703 		and	r3, r3, #7
 307 0040 002B     		cmp	r3, #0
 308 0042 09D0     		beq	.L10
 309              	.LBB93:
 310              	.LBB94:
 311              		.file 2 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     All rights reserved
   4:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   5:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   7:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   9:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  13:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  14:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  19:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  20:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  25:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  26:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  27:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
ARM GAS  /tmp/ccIgarPJ.s 			page 21


  29:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  32:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  37:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  38:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  39:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     defined configASSERT()?
  42:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  43:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     embedded software for free we request you assist our global community by
  45:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     participating in the support forum.
  46:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  47:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  52:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  56:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  63:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     mission critical applications that require provable dependability.
  66:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  67:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     1 tab == 4 spaces!
  68:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** */
  69:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  70:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  71:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  72:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  73:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  74:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  75:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  76:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  77:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  79:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  80:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  81:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  83:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  84:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  85:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
ARM GAS  /tmp/ccIgarPJ.s 			page 22


  86:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  87:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  88:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  89:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  90:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  91:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  92:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  93:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  94:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  96:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  97:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  99:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
 100:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 101:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
 103:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
 105:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
 106:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
 110:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 112:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 113:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 114:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
 115:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 119:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 120:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
 121:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
 122:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
 123:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
 126:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
 130:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 131:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 132:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) { if( xSwitchRequired != pdFALSE ) { traceISR_EXIT
 135:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 137:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
 139:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
 140:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
 141:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
ARM GAS  /tmp/ccIgarPJ.s 			page 23


 143:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 148:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 149:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 153:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 156:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 157:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 158:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 162:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 163:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 164:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 165:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 171:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 172:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 174:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 175:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 176:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 178:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 179:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 180:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 181:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 184:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 185:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 193:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 196:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 197:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 198:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
ARM GAS  /tmp/ccIgarPJ.s 			page 24


 200:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 201:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 202:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 203:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 204:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 206:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 208:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 209:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 210:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 213:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 215:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 216:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 219:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 221:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 222:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 223:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 224:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 225:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 226:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 227:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 228:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 229:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 230:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 231:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 232:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 233:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 235:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 236:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 312              		.loc 2 237 0 discriminator 1
 313              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 314 0044 4FF05003 			mov r3, #80												
 315 0048 83F31188 		msr basepri, r3											
 316 004c BFF36F8F 		isb														
 317 0050 BFF34F8F 		dsb														
 318              	
 319              	@ 0 "" 2
 320              		.thumb
 321 0054 7B61     		str	r3, [r7, #20]
 322              	.L11:
 323              	.LBE94:
 324              	.LBE93:
 325              		.loc 1 822 0 discriminator 1
 326 0056 FEE7     		b	.L11
 327              	.L10:
 823:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 824:../../../FreeRTOS_9_0/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 825:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
ARM GAS  /tmp/ccIgarPJ.s 			page 25


 826:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 827:../../../FreeRTOS_9_0/Source/tasks.c **** 
 828:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 829:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 830:../../../FreeRTOS_9_0/Source/tasks.c **** 
 831:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 832:../../../FreeRTOS_9_0/Source/tasks.c **** 		performed. */
 833:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 834:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 835:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 836:../../../FreeRTOS_9_0/Source/tasks.c **** 
 837:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Store the task name in the TCB. */
 838:../../../FreeRTOS_9_0/Source/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 328              		.loc 1 838 0
 329 0058 0023     		movs	r3, #0
 330 005a FB61     		str	r3, [r7, #28]
 331 005c 13E0     		b	.L12
 332              	.L15:
 839:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 840:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 333              		.loc 1 840 0
 334 005e BA68     		ldr	r2, [r7, #8]
 335 0060 FB69     		ldr	r3, [r7, #28]
 336 0062 1344     		add	r3, r3, r2
 337 0064 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 338 0066 3A6B     		ldr	r2, [r7, #48]
 339 0068 FB69     		ldr	r3, [r7, #28]
 340 006a 1344     		add	r3, r3, r2
 341 006c 3033     		adds	r3, r3, #48
 342 006e 0A46     		mov	r2, r1
 343 0070 1A71     		strb	r2, [r3, #4]
 841:../../../FreeRTOS_9_0/Source/tasks.c **** 
 842:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 843:../../../FreeRTOS_9_0/Source/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
 844:../../../FreeRTOS_9_0/Source/tasks.c **** 		string is not accessible (extremely unlikely). */
 845:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( pcName[ x ] == 0x00 )
 344              		.loc 1 845 0
 345 0072 BA68     		ldr	r2, [r7, #8]
 346 0074 FB69     		ldr	r3, [r7, #28]
 347 0076 1344     		add	r3, r3, r2
 348 0078 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 349 007a 002B     		cmp	r3, #0
 350 007c 00D1     		bne	.L13
 846:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
 847:../../../FreeRTOS_9_0/Source/tasks.c **** 			break;
 351              		.loc 1 847 0
 352 007e 05E0     		b	.L14
 353              	.L13:
 838:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 354              		.loc 1 838 0 discriminator 2
 355 0080 FB69     		ldr	r3, [r7, #28]
 356 0082 0133     		adds	r3, r3, #1
 357 0084 FB61     		str	r3, [r7, #28]
 358              	.L12:
 838:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 359              		.loc 1 838 0 is_stmt 0 discriminator 1
 360 0086 FB69     		ldr	r3, [r7, #28]
ARM GAS  /tmp/ccIgarPJ.s 			page 26


 361 0088 0F2B     		cmp	r3, #15
 362 008a E8D9     		bls	.L15
 363              	.L14:
 848:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
 849:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
 850:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
 851:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 852:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
 853:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 854:../../../FreeRTOS_9_0/Source/tasks.c **** 
 855:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 856:../../../FreeRTOS_9_0/Source/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 857:../../../FreeRTOS_9_0/Source/tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 364              		.loc 1 857 0 is_stmt 1
 365 008c 3B6B     		ldr	r3, [r7, #48]
 366 008e 0022     		movs	r2, #0
 367 0090 83F84320 		strb	r2, [r3, #67]
 858:../../../FreeRTOS_9_0/Source/tasks.c **** 
 859:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 860:../../../FreeRTOS_9_0/Source/tasks.c **** 	remove the privilege bit if one is present. */
 861:../../../FreeRTOS_9_0/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 368              		.loc 1 861 0
 369 0094 BB6A     		ldr	r3, [r7, #40]
 370 0096 062B     		cmp	r3, #6
 371 0098 01D9     		bls	.L16
 862:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 863:../../../FreeRTOS_9_0/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 372              		.loc 1 863 0
 373 009a 0623     		movs	r3, #6
 374 009c BB62     		str	r3, [r7, #40]
 375              	.L16:
 864:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 865:../../../FreeRTOS_9_0/Source/tasks.c **** 	else
 866:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 867:../../../FreeRTOS_9_0/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 868:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 869:../../../FreeRTOS_9_0/Source/tasks.c **** 
 870:../../../FreeRTOS_9_0/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 376              		.loc 1 870 0
 377 009e 3B6B     		ldr	r3, [r7, #48]
 378 00a0 BA6A     		ldr	r2, [r7, #40]
 379 00a2 DA62     		str	r2, [r3, #44]
 871:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 872:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 873:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 380              		.loc 1 873 0
 381 00a4 3B6B     		ldr	r3, [r7, #48]
 382 00a6 BA6A     		ldr	r2, [r7, #40]
 383 00a8 DA64     		str	r2, [r3, #76]
 874:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 384              		.loc 1 874 0
 385 00aa 3B6B     		ldr	r3, [r7, #48]
 386 00ac 0022     		movs	r2, #0
 387 00ae 1A65     		str	r2, [r3, #80]
 875:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 876:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 877:../../../FreeRTOS_9_0/Source/tasks.c **** 
ARM GAS  /tmp/ccIgarPJ.s 			page 27


 878:../../../FreeRTOS_9_0/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 388              		.loc 1 878 0
 389 00b0 3B6B     		ldr	r3, [r7, #48]
 390 00b2 0433     		adds	r3, r3, #4
 391 00b4 1846     		mov	r0, r3
 392 00b6 FFF7FEFF 		bl	vListInitialiseItem
 879:../../../FreeRTOS_9_0/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 393              		.loc 1 879 0
 394 00ba 3B6B     		ldr	r3, [r7, #48]
 395 00bc 1833     		adds	r3, r3, #24
 396 00be 1846     		mov	r0, r3
 397 00c0 FFF7FEFF 		bl	vListInitialiseItem
 880:../../../FreeRTOS_9_0/Source/tasks.c **** 
 881:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 882:../../../FreeRTOS_9_0/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 883:../../../FreeRTOS_9_0/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 398              		.loc 1 883 0
 399 00c4 3B6B     		ldr	r3, [r7, #48]
 400 00c6 3A6B     		ldr	r2, [r7, #48]
 401 00c8 1A61     		str	r2, [r3, #16]
 884:../../../FreeRTOS_9_0/Source/tasks.c **** 
 885:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Event lists are always in priority order. */
 886:../../../FreeRTOS_9_0/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 402              		.loc 1 886 0
 403 00ca BB6A     		ldr	r3, [r7, #40]
 404 00cc C3F10702 		rsb	r2, r3, #7
 405 00d0 3B6B     		ldr	r3, [r7, #48]
 406 00d2 9A61     		str	r2, [r3, #24]
 887:../../../FreeRTOS_9_0/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 407              		.loc 1 887 0
 408 00d4 3B6B     		ldr	r3, [r7, #48]
 409 00d6 3A6B     		ldr	r2, [r7, #48]
 410 00d8 5A62     		str	r2, [r3, #36]
 888:../../../FreeRTOS_9_0/Source/tasks.c **** 
 889:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 890:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 891:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 892:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 893:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 894:../../../FreeRTOS_9_0/Source/tasks.c **** 
 895:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 896:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 897:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 898:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 899:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 900:../../../FreeRTOS_9_0/Source/tasks.c **** 
 901:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 902:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 903:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 904:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 905:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 906:../../../FreeRTOS_9_0/Source/tasks.c **** 
 907:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 908:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 909:../../../FreeRTOS_9_0/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 910:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 911:../../../FreeRTOS_9_0/Source/tasks.c **** 	#else
ARM GAS  /tmp/ccIgarPJ.s 			page 28


 912:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 913:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 914:../../../FreeRTOS_9_0/Source/tasks.c **** 		( void ) xRegions;
 915:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 916:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
 917:../../../FreeRTOS_9_0/Source/tasks.c **** 
 918:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 919:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 920:../../../FreeRTOS_9_0/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 921:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
 922:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 923:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
 924:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 925:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
 926:../../../FreeRTOS_9_0/Source/tasks.c **** 
 927:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 928:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 929:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 411              		.loc 1 929 0
 412 00da 3B6B     		ldr	r3, [r7, #48]
 413 00dc 0022     		movs	r2, #0
 414 00de 5A65     		str	r2, [r3, #84]
 930:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 415              		.loc 1 930 0
 416 00e0 3B6B     		ldr	r3, [r7, #48]
 417 00e2 0022     		movs	r2, #0
 418 00e4 83F85820 		strb	r2, [r3, #88]
 931:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 932:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
 933:../../../FreeRTOS_9_0/Source/tasks.c **** 
 934:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 935:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 936:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 937:../../../FreeRTOS_9_0/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 938:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 939:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
 940:../../../FreeRTOS_9_0/Source/tasks.c **** 
 941:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 942:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 943:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
 944:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 945:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
 946:../../../FreeRTOS_9_0/Source/tasks.c **** 
 947:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
 948:../../../FreeRTOS_9_0/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
 949:../../../FreeRTOS_9_0/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
 950:../../../FreeRTOS_9_0/Source/tasks.c **** 	the	top of stack variable is updated. */
 951:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 952:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 953:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
 954:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 955:../../../FreeRTOS_9_0/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
 956:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 957:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 419              		.loc 1 957 0
 420 00e8 B869     		ldr	r0, [r7, #24]
 421 00ea F968     		ldr	r1, [r7, #12]
ARM GAS  /tmp/ccIgarPJ.s 			page 29


 422 00ec 3A68     		ldr	r2, [r7]
 423 00ee FFF7FEFF 		bl	pxPortInitialiseStack
 424 00f2 0246     		mov	r2, r0
 425 00f4 3B6B     		ldr	r3, [r7, #48]
 426 00f6 1A60     		str	r2, [r3]
 958:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 959:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
 960:../../../FreeRTOS_9_0/Source/tasks.c **** 
 961:../../../FreeRTOS_9_0/Source/tasks.c **** 	if( ( void * ) pxCreatedTask != NULL )
 427              		.loc 1 961 0
 428 00f8 FB6A     		ldr	r3, [r7, #44]
 429 00fa 002B     		cmp	r3, #0
 430 00fc 02D0     		beq	.L9
 962:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 963:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
 964:../../../FreeRTOS_9_0/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
 965:../../../FreeRTOS_9_0/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 431              		.loc 1 965 0
 432 00fe FB6A     		ldr	r3, [r7, #44]
 433 0100 3A6B     		ldr	r2, [r7, #48]
 434 0102 1A60     		str	r2, [r3]
 435              	.L9:
 966:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 967:../../../FreeRTOS_9_0/Source/tasks.c **** 	else
 968:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 969:../../../FreeRTOS_9_0/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 970:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 971:../../../FreeRTOS_9_0/Source/tasks.c **** }
 436              		.loc 1 971 0
 437 0104 2037     		adds	r7, r7, #32
 438              	.LCFI8:
 439              		.cfi_def_cfa_offset 8
 440 0106 BD46     		mov	sp, r7
 441              	.LCFI9:
 442              		.cfi_def_cfa_register 13
 443              		@ sp needed
 444 0108 80BD     		pop	{r7, pc}
 445              		.cfi_endproc
 446              	.LFE6:
 448 010a 00BF     		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 449              		.align	2
 450              		.thumb
 451              		.thumb_func
 453              	prvAddNewTaskToReadyList:
 454              	.LFB7:
 972:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
 973:../../../FreeRTOS_9_0/Source/tasks.c **** 
 974:../../../FreeRTOS_9_0/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
 975:../../../FreeRTOS_9_0/Source/tasks.c **** {
 455              		.loc 1 975 0
 456              		.cfi_startproc
 457              		@ args = 0, pretend = 0, frame = 8
 458              		@ frame_needed = 1, uses_anonymous_args = 0
 459 0000 B0B5     		push	{r4, r5, r7, lr}
 460              	.LCFI10:
 461              		.cfi_def_cfa_offset 16
 462              		.cfi_offset 4, -16
ARM GAS  /tmp/ccIgarPJ.s 			page 30


 463              		.cfi_offset 5, -12
 464              		.cfi_offset 7, -8
 465              		.cfi_offset 14, -4
 466 0002 84B0     		sub	sp, sp, #16
 467              	.LCFI11:
 468              		.cfi_def_cfa_offset 32
 469 0004 02AF     		add	r7, sp, #8
 470              	.LCFI12:
 471              		.cfi_def_cfa 7, 24
 472 0006 7860     		str	r0, [r7, #4]
 976:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 977:../../../FreeRTOS_9_0/Source/tasks.c **** 	updated. */
 978:../../../FreeRTOS_9_0/Source/tasks.c **** 	taskENTER_CRITICAL();
 473              		.loc 1 978 0
 474 0008 FFF7FEFF 		bl	vPortEnterCritical
 979:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 980:../../../FreeRTOS_9_0/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
 475              		.loc 1 980 0
 476 000c 3C4B     		ldr	r3, .L23
 477 000e 1B68     		ldr	r3, [r3]
 478 0010 0133     		adds	r3, r3, #1
 479 0012 3B4A     		ldr	r2, .L23
 480 0014 1360     		str	r3, [r2]
 981:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 481              		.loc 1 981 0
 482 0016 3B4B     		ldr	r3, .L23+4
 483 0018 1B68     		ldr	r3, [r3]
 484 001a 002B     		cmp	r3, #0
 485 001c 09D1     		bne	.L19
 982:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
 983:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
 984:../../../FreeRTOS_9_0/Source/tasks.c **** 			the suspended state - make this the current task. */
 985:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
 486              		.loc 1 985 0
 487 001e 394A     		ldr	r2, .L23+4
 488 0020 7B68     		ldr	r3, [r7, #4]
 489 0022 1360     		str	r3, [r2]
 986:../../../FreeRTOS_9_0/Source/tasks.c **** 
 987:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 490              		.loc 1 987 0
 491 0024 364B     		ldr	r3, .L23
 492 0026 1B68     		ldr	r3, [r3]
 493 0028 012B     		cmp	r3, #1
 494 002a 10D1     		bne	.L20
 988:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
 989:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
 990:../../../FreeRTOS_9_0/Source/tasks.c **** 				initialisation required.  We will not recover if this call
 991:../../../FreeRTOS_9_0/Source/tasks.c **** 				fails, but we will report the failure. */
 992:../../../FreeRTOS_9_0/Source/tasks.c **** 				prvInitialiseTaskLists();
 495              		.loc 1 992 0
 496 002c FFF7FEFF 		bl	prvInitialiseTaskLists
 497 0030 0DE0     		b	.L20
 498              	.L19:
 993:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
 994:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
 995:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
 996:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccIgarPJ.s 			page 31


 997:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
 998:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
 999:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
1000:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1001:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
1002:../../../FreeRTOS_9_0/Source/tasks.c **** 			current task if it is the highest priority task to be created
1003:../../../FreeRTOS_9_0/Source/tasks.c **** 			so far. */
1004:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
 499              		.loc 1 1004 0
 500 0032 354B     		ldr	r3, .L23+8
 501 0034 1B68     		ldr	r3, [r3]
 502 0036 002B     		cmp	r3, #0
 503 0038 09D1     		bne	.L20
1005:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1006:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 504              		.loc 1 1006 0
 505 003a 324B     		ldr	r3, .L23+4
 506 003c 1B68     		ldr	r3, [r3]
 507 003e DA6A     		ldr	r2, [r3, #44]
 508 0040 7B68     		ldr	r3, [r7, #4]
 509 0042 DB6A     		ldr	r3, [r3, #44]
 510 0044 9A42     		cmp	r2, r3
 511 0046 02D8     		bhi	.L20
1007:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1008:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
 512              		.loc 1 1008 0
 513 0048 2E4A     		ldr	r2, .L23+4
 514 004a 7B68     		ldr	r3, [r7, #4]
 515 004c 1360     		str	r3, [r2]
 516              	.L20:
1009:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1010:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
1011:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1012:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1013:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1014:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1015:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
1016:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1017:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1018:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1019:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1020:../../../FreeRTOS_9_0/Source/tasks.c **** 
1021:../../../FreeRTOS_9_0/Source/tasks.c **** 		uxTaskNumber++;
 517              		.loc 1 1021 0
 518 004e 2F4B     		ldr	r3, .L23+12
 519 0050 1B68     		ldr	r3, [r3]
 520 0052 0133     		adds	r3, r3, #1
 521 0054 2D4A     		ldr	r2, .L23+12
 522 0056 1360     		str	r3, [r2]
1022:../../../FreeRTOS_9_0/Source/tasks.c **** 
1023:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1024:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1025:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1026:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
 523              		.loc 1 1026 0
 524 0058 2C4B     		ldr	r3, .L23+12
 525 005a 1A68     		ldr	r2, [r3]
ARM GAS  /tmp/ccIgarPJ.s 			page 32


 526 005c 7B68     		ldr	r3, [r7, #4]
 527 005e 5A64     		str	r2, [r3, #68]
1027:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1028:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1029:../../../FreeRTOS_9_0/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
 528              		.loc 1 1029 0
 529 0060 7B68     		ldr	r3, [r7, #4]
 530 0062 002B     		cmp	r3, #0
 531 0064 16D0     		beq	.L21
 532              		.loc 1 1029 0 is_stmt 0 discriminator 1
 533 0066 7B68     		ldr	r3, [r7, #4]
 534 0068 1846     		mov	r0, r3
 535 006a FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskCreate
 536 006e 7868     		ldr	r0, [r7, #4]
 537 0070 7B68     		ldr	r3, [r7, #4]
 538 0072 03F13401 		add	r1, r3, #52
 539 0076 7B68     		ldr	r3, [r7, #4]
 540 0078 DA6A     		ldr	r2, [r3, #44]
 541 007a 7B68     		ldr	r3, [r7, #4]
 542 007c 1B6B     		ldr	r3, [r3, #48]
 543 007e 1D46     		mov	r5, r3
 544 0080 7B68     		ldr	r3, [r7, #4]
 545 0082 1B68     		ldr	r3, [r3]
 546 0084 1C46     		mov	r4, r3
 547 0086 7B68     		ldr	r3, [r7, #4]
 548 0088 1B6B     		ldr	r3, [r3, #48]
 549 008a E31A     		subs	r3, r4, r3
 550 008c 0093     		str	r3, [sp]
 551 008e 2B46     		mov	r3, r5
 552 0090 FFF7FEFF 		bl	SYSVIEW_AddTask
 553              	.L21:
1030:../../../FreeRTOS_9_0/Source/tasks.c **** 
1031:../../../FreeRTOS_9_0/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
 554              		.loc 1 1031 0 is_stmt 1
 555 0094 7B68     		ldr	r3, [r7, #4]
 556 0096 1846     		mov	r0, r3
 557 0098 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStartReady
 558 009c 7B68     		ldr	r3, [r7, #4]
 559 009e DB6A     		ldr	r3, [r3, #44]
 560 00a0 1A46     		mov	r2, r3
 561 00a2 0123     		movs	r3, #1
 562 00a4 03FA02F2 		lsl	r2, r3, r2
 563 00a8 194B     		ldr	r3, .L23+16
 564 00aa 1B68     		ldr	r3, [r3]
 565 00ac 1343     		orrs	r3, r3, r2
 566 00ae 184A     		ldr	r2, .L23+16
 567 00b0 1360     		str	r3, [r2]
 568 00b2 7B68     		ldr	r3, [r7, #4]
 569 00b4 DA6A     		ldr	r2, [r3, #44]
 570 00b6 1346     		mov	r3, r2
 571 00b8 9B00     		lsls	r3, r3, #2
 572 00ba 1344     		add	r3, r3, r2
 573 00bc 9B00     		lsls	r3, r3, #2
 574 00be 154A     		ldr	r2, .L23+20
 575 00c0 1A44     		add	r2, r2, r3
 576 00c2 7B68     		ldr	r3, [r7, #4]
 577 00c4 0433     		adds	r3, r3, #4
ARM GAS  /tmp/ccIgarPJ.s 			page 33


 578 00c6 1046     		mov	r0, r2
 579 00c8 1946     		mov	r1, r3
 580 00ca FFF7FEFF 		bl	vListInsertEnd
1032:../../../FreeRTOS_9_0/Source/tasks.c **** 
1033:../../../FreeRTOS_9_0/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1034:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
1035:../../../FreeRTOS_9_0/Source/tasks.c **** 	taskEXIT_CRITICAL();
 581              		.loc 1 1035 0
 582 00ce FFF7FEFF 		bl	vPortExitCritical
1036:../../../FreeRTOS_9_0/Source/tasks.c **** 
1037:../../../FreeRTOS_9_0/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
 583              		.loc 1 1037 0
 584 00d2 0D4B     		ldr	r3, .L23+8
 585 00d4 1B68     		ldr	r3, [r3]
 586 00d6 002B     		cmp	r3, #0
 587 00d8 0ED0     		beq	.L18
1038:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
1039:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1040:../../../FreeRTOS_9_0/Source/tasks.c **** 		then it should run now. */
1041:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 588              		.loc 1 1041 0
 589 00da 0A4B     		ldr	r3, .L23+4
 590 00dc 1B68     		ldr	r3, [r3]
 591 00de DA6A     		ldr	r2, [r3, #44]
 592 00e0 7B68     		ldr	r3, [r7, #4]
 593 00e2 DB6A     		ldr	r3, [r3, #44]
 594 00e4 9A42     		cmp	r2, r3
 595 00e6 07D2     		bcs	.L18
1042:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1043:../../../FreeRTOS_9_0/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
 596              		.loc 1 1043 0
 597 00e8 0B4B     		ldr	r3, .L23+24
 598 00ea 4FF08052 		mov	r2, #268435456
 599 00ee 1A60     		str	r2, [r3]
 600              	@ 1043 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 601 00f0 BFF34F8F 		dsb
 602              	@ 0 "" 2
 603              	@ 1043 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 604 00f4 BFF36F8F 		isb
 605              	@ 0 "" 2
 606              		.thumb
 607              	.L18:
1044:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1045:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
1046:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1047:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1048:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1049:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
1050:../../../FreeRTOS_9_0/Source/tasks.c **** 	else
1051:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
1052:../../../FreeRTOS_9_0/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1053:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
1054:../../../FreeRTOS_9_0/Source/tasks.c **** }
 608              		.loc 1 1054 0
 609 00f8 0837     		adds	r7, r7, #8
 610              	.LCFI13:
 611              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccIgarPJ.s 			page 34


 612 00fa BD46     		mov	sp, r7
 613              	.LCFI14:
 614              		.cfi_def_cfa_register 13
 615              		@ sp needed
 616 00fc B0BD     		pop	{r4, r5, r7, pc}
 617              	.L24:
 618 00fe 00BF     		.align	2
 619              	.L23:
 620 0100 00000000 		.word	uxCurrentNumberOfTasks
 621 0104 00000000 		.word	pxCurrentTCB
 622 0108 00000000 		.word	xSchedulerRunning
 623 010c 00000000 		.word	uxTaskNumber
 624 0110 00000000 		.word	uxTopReadyPriority
 625 0114 00000000 		.word	pxReadyTasksLists
 626 0118 04ED00E0 		.word	-536810236
 627              		.cfi_endproc
 628              	.LFE7:
 630              		.section	.text.vTaskDelete,"ax",%progbits
 631              		.align	2
 632              		.global	vTaskDelete
 633              		.thumb
 634              		.thumb_func
 636              	vTaskDelete:
 637              	.LFB8:
1055:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
1056:../../../FreeRTOS_9_0/Source/tasks.c **** 
1057:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1058:../../../FreeRTOS_9_0/Source/tasks.c **** 
1059:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1060:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 638              		.loc 1 1060 0
 639              		.cfi_startproc
 640              		@ args = 0, pretend = 0, frame = 16
 641              		@ frame_needed = 1, uses_anonymous_args = 0
 642 0000 80B5     		push	{r7, lr}
 643              	.LCFI15:
 644              		.cfi_def_cfa_offset 8
 645              		.cfi_offset 7, -8
 646              		.cfi_offset 14, -4
 647 0002 84B0     		sub	sp, sp, #16
 648              	.LCFI16:
 649              		.cfi_def_cfa_offset 24
 650 0004 00AF     		add	r7, sp, #0
 651              	.LCFI17:
 652              		.cfi_def_cfa_register 7
 653 0006 7860     		str	r0, [r7, #4]
1061:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxTCB;
1062:../../../FreeRTOS_9_0/Source/tasks.c **** 
1063:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskENTER_CRITICAL();
 654              		.loc 1 1063 0
 655 0008 FFF7FEFF 		bl	vPortEnterCritical
1064:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1065:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1066:../../../FreeRTOS_9_0/Source/tasks.c **** 			being deleted. */
1067:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 656              		.loc 1 1067 0
 657 000c 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccIgarPJ.s 			page 35


 658 000e 002B     		cmp	r3, #0
 659 0010 02D1     		bne	.L26
 660              		.loc 1 1067 0 is_stmt 0 discriminator 1
 661 0012 3C4B     		ldr	r3, .L36
 662 0014 1B68     		ldr	r3, [r3]
 663 0016 00E0     		b	.L27
 664              	.L26:
 665              		.loc 1 1067 0 discriminator 2
 666 0018 7B68     		ldr	r3, [r7, #4]
 667              	.L27:
 668              		.loc 1 1067 0 discriminator 4
 669 001a FB60     		str	r3, [r7, #12]
1068:../../../FreeRTOS_9_0/Source/tasks.c **** 
1069:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Remove task from the ready list. */
1070:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 670              		.loc 1 1070 0 is_stmt 1 discriminator 4
 671 001c FB68     		ldr	r3, [r7, #12]
 672 001e 0433     		adds	r3, r3, #4
 673 0020 1846     		mov	r0, r3
 674 0022 FFF7FEFF 		bl	uxListRemove
 675 0026 0346     		mov	r3, r0
 676 0028 002B     		cmp	r3, #0
 677 002a 15D1     		bne	.L28
1071:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1072:../../../FreeRTOS_9_0/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 678              		.loc 1 1072 0
 679 002c FB68     		ldr	r3, [r7, #12]
 680 002e DA6A     		ldr	r2, [r3, #44]
 681 0030 3549     		ldr	r1, .L36+4
 682 0032 1346     		mov	r3, r2
 683 0034 9B00     		lsls	r3, r3, #2
 684 0036 1344     		add	r3, r3, r2
 685 0038 9B00     		lsls	r3, r3, #2
 686 003a 0B44     		add	r3, r3, r1
 687 003c 1B68     		ldr	r3, [r3]
 688 003e 002B     		cmp	r3, #0
 689 0040 0AD1     		bne	.L28
 690              		.loc 1 1072 0 is_stmt 0 discriminator 1
 691 0042 FB68     		ldr	r3, [r7, #12]
 692 0044 DB6A     		ldr	r3, [r3, #44]
 693 0046 1A46     		mov	r2, r3
 694 0048 0123     		movs	r3, #1
 695 004a 9340     		lsls	r3, r3, r2
 696 004c DA43     		mvns	r2, r3
 697 004e 2F4B     		ldr	r3, .L36+8
 698 0050 1B68     		ldr	r3, [r3]
 699 0052 1340     		ands	r3, r3, r2
 700 0054 2D4A     		ldr	r2, .L36+8
 701 0056 1360     		str	r3, [r2]
 702              	.L28:
1073:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1074:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
1075:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1076:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1077:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1078:../../../FreeRTOS_9_0/Source/tasks.c **** 
1079:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Is the task waiting on an event also? */
ARM GAS  /tmp/ccIgarPJ.s 			page 36


1080:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 703              		.loc 1 1080 0 is_stmt 1
 704 0058 FB68     		ldr	r3, [r7, #12]
 705 005a 9B6A     		ldr	r3, [r3, #40]
 706 005c 002B     		cmp	r3, #0
 707 005e 04D0     		beq	.L30
1081:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1082:../../../FreeRTOS_9_0/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 708              		.loc 1 1082 0
 709 0060 FB68     		ldr	r3, [r7, #12]
 710 0062 1833     		adds	r3, r3, #24
 711 0064 1846     		mov	r0, r3
 712 0066 FFF7FEFF 		bl	uxListRemove
 713              	.L30:
1083:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1084:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
1085:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1086:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1087:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1088:../../../FreeRTOS_9_0/Source/tasks.c **** 
1089:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1090:../../../FreeRTOS_9_0/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1091:../../../FreeRTOS_9_0/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1092:../../../FreeRTOS_9_0/Source/tasks.c **** 			not return. */
1093:../../../FreeRTOS_9_0/Source/tasks.c **** 			uxTaskNumber++;
 714              		.loc 1 1093 0
 715 006a 294B     		ldr	r3, .L36+12
 716 006c 1B68     		ldr	r3, [r3]
 717 006e 0133     		adds	r3, r3, #1
 718 0070 274A     		ldr	r2, .L36+12
 719 0072 1360     		str	r3, [r2]
1094:../../../FreeRTOS_9_0/Source/tasks.c **** 
1095:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 720              		.loc 1 1095 0
 721 0074 234B     		ldr	r3, .L36
 722 0076 1B68     		ldr	r3, [r3]
 723 0078 FA68     		ldr	r2, [r7, #12]
 724 007a 9A42     		cmp	r2, r3
 725 007c 0BD1     		bne	.L31
1096:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1097:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1098:../../../FreeRTOS_9_0/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1099:../../../FreeRTOS_9_0/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1100:../../../FreeRTOS_9_0/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1101:../../../FreeRTOS_9_0/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1102:../../../FreeRTOS_9_0/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 726              		.loc 1 1102 0
 727 007e FB68     		ldr	r3, [r7, #12]
 728 0080 0433     		adds	r3, r3, #4
 729 0082 2448     		ldr	r0, .L36+16
 730 0084 1946     		mov	r1, r3
 731 0086 FFF7FEFF 		bl	vListInsertEnd
1103:../../../FreeRTOS_9_0/Source/tasks.c **** 
1104:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1105:../../../FreeRTOS_9_0/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1106:../../../FreeRTOS_9_0/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1107:../../../FreeRTOS_9_0/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
ARM GAS  /tmp/ccIgarPJ.s 			page 37


 732              		.loc 1 1107 0
 733 008a 234B     		ldr	r3, .L36+20
 734 008c 1B68     		ldr	r3, [r3]
 735 008e 0133     		adds	r3, r3, #1
 736 0090 214A     		ldr	r2, .L36+20
 737 0092 1360     		str	r3, [r2]
 738 0094 09E0     		b	.L32
 739              	.L31:
1108:../../../FreeRTOS_9_0/Source/tasks.c **** 
1109:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1110:../../../FreeRTOS_9_0/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1111:../../../FreeRTOS_9_0/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1112:../../../FreeRTOS_9_0/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1113:../../../FreeRTOS_9_0/Source/tasks.c **** 				required. */
1114:../../../FreeRTOS_9_0/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1115:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1116:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
1117:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1118:../../../FreeRTOS_9_0/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 740              		.loc 1 1118 0
 741 0096 214B     		ldr	r3, .L36+24
 742 0098 1B68     		ldr	r3, [r3]
 743 009a 013B     		subs	r3, r3, #1
 744 009c 1F4A     		ldr	r2, .L36+24
 745 009e 1360     		str	r3, [r2]
1119:../../../FreeRTOS_9_0/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 746              		.loc 1 1119 0
 747 00a0 F868     		ldr	r0, [r7, #12]
 748 00a2 FFF7FEFF 		bl	prvDeleteTCB
1120:../../../FreeRTOS_9_0/Source/tasks.c **** 
1121:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1122:../../../FreeRTOS_9_0/Source/tasks.c **** 				the task that has just been deleted. */
1123:../../../FreeRTOS_9_0/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 749              		.loc 1 1123 0
 750 00a6 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 751              	.L32:
1124:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1125:../../../FreeRTOS_9_0/Source/tasks.c **** 
1126:../../../FreeRTOS_9_0/Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
 752              		.loc 1 1126 0
 753 00aa FB68     		ldr	r3, [r7, #12]
 754 00ac 1846     		mov	r0, r3
 755 00ae FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 756 00b2 0346     		mov	r3, r0
 757 00b4 2220     		movs	r0, #34
 758 00b6 1946     		mov	r1, r3
 759 00b8 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32
1127:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1128:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskEXIT_CRITICAL();
 760              		.loc 1 1128 0
 761 00bc FFF7FEFF 		bl	vPortExitCritical
1129:../../../FreeRTOS_9_0/Source/tasks.c **** 
1130:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1131:../../../FreeRTOS_9_0/Source/tasks.c **** 		been deleted. */
1132:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 762              		.loc 1 1132 0
 763 00c0 174B     		ldr	r3, .L36+28
ARM GAS  /tmp/ccIgarPJ.s 			page 38


 764 00c2 1B68     		ldr	r3, [r3]
 765 00c4 002B     		cmp	r3, #0
 766 00c6 1AD0     		beq	.L25
1133:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1134:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 767              		.loc 1 1134 0
 768 00c8 0E4B     		ldr	r3, .L36
 769 00ca 1B68     		ldr	r3, [r3]
 770 00cc FA68     		ldr	r2, [r7, #12]
 771 00ce 9A42     		cmp	r2, r3
 772 00d0 15D1     		bne	.L25
1135:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1136:../../../FreeRTOS_9_0/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 773              		.loc 1 1136 0
 774 00d2 144B     		ldr	r3, .L36+32
 775 00d4 1B68     		ldr	r3, [r3]
 776 00d6 002B     		cmp	r3, #0
 777 00d8 09D0     		beq	.L34
 778              	.LBB95:
 779              	.LBB96:
 780              		.loc 2 237 0 discriminator 1
 781              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 782 00da 4FF05003 			mov r3, #80												
 783 00de 83F31188 		msr basepri, r3											
 784 00e2 BFF36F8F 		isb														
 785 00e6 BFF34F8F 		dsb														
 786              	
 787              	@ 0 "" 2
 788              		.thumb
 789 00ea BB60     		str	r3, [r7, #8]
 790              	.L35:
 791              	.LBE96:
 792              	.LBE95:
 793              		.loc 1 1136 0 discriminator 1
 794 00ec FEE7     		b	.L35
 795              	.L34:
1137:../../../FreeRTOS_9_0/Source/tasks.c **** 				portYIELD_WITHIN_API();
 796              		.loc 1 1137 0
 797 00ee 0E4B     		ldr	r3, .L36+36
 798 00f0 4FF08052 		mov	r2, #268435456
 799 00f4 1A60     		str	r2, [r3]
 800              	@ 1137 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 801 00f6 BFF34F8F 		dsb
 802              	@ 0 "" 2
 803              	@ 1137 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 804 00fa BFF36F8F 		isb
 805              	@ 0 "" 2
 806              		.thumb
 807              	.L25:
1138:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1139:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
1140:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1141:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1142:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1143:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1144:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 808              		.loc 1 1144 0
ARM GAS  /tmp/ccIgarPJ.s 			page 39


 809 00fe 1037     		adds	r7, r7, #16
 810              	.LCFI18:
 811              		.cfi_def_cfa_offset 8
 812 0100 BD46     		mov	sp, r7
 813              	.LCFI19:
 814              		.cfi_def_cfa_register 13
 815              		@ sp needed
 816 0102 80BD     		pop	{r7, pc}
 817              	.L37:
 818              		.align	2
 819              	.L36:
 820 0104 00000000 		.word	pxCurrentTCB
 821 0108 00000000 		.word	pxReadyTasksLists
 822 010c 00000000 		.word	uxTopReadyPriority
 823 0110 00000000 		.word	uxTaskNumber
 824 0114 00000000 		.word	xTasksWaitingTermination
 825 0118 00000000 		.word	uxDeletedTasksWaitingCleanUp
 826 011c 00000000 		.word	uxCurrentNumberOfTasks
 827 0120 00000000 		.word	xSchedulerRunning
 828 0124 00000000 		.word	uxSchedulerSuspended
 829 0128 04ED00E0 		.word	-536810236
 830              		.cfi_endproc
 831              	.LFE8:
 833              		.section	.text.vTaskDelay,"ax",%progbits
 834              		.align	2
 835              		.global	vTaskDelay
 836              		.thumb
 837              		.thumb_func
 839              	vTaskDelay:
 840              	.LFB9:
1145:../../../FreeRTOS_9_0/Source/tasks.c **** 
1146:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1147:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
1148:../../../FreeRTOS_9_0/Source/tasks.c **** 
1149:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1150:../../../FreeRTOS_9_0/Source/tasks.c **** 
1151:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1152:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
1153:../../../FreeRTOS_9_0/Source/tasks.c **** 	TickType_t xTimeToWake;
1154:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1155:../../../FreeRTOS_9_0/Source/tasks.c **** 
1156:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1157:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1158:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1159:../../../FreeRTOS_9_0/Source/tasks.c **** 
1160:../../../FreeRTOS_9_0/Source/tasks.c **** 		vTaskSuspendAll();
1161:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1162:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1163:../../../FreeRTOS_9_0/Source/tasks.c **** 			block. */
1164:../../../FreeRTOS_9_0/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1165:../../../FreeRTOS_9_0/Source/tasks.c **** 
1166:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1167:../../../FreeRTOS_9_0/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1168:../../../FreeRTOS_9_0/Source/tasks.c **** 
1169:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1170:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1171:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* The tick count has overflowed since this function was
ARM GAS  /tmp/ccIgarPJ.s 			page 40


1172:../../../FreeRTOS_9_0/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1173:../../../FreeRTOS_9_0/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1174:../../../FreeRTOS_9_0/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1175:../../../FreeRTOS_9_0/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1176:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1177:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1178:../../../FreeRTOS_9_0/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1179:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1180:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
1181:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1182:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1183:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1184:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1185:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
1186:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1187:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1188:../../../FreeRTOS_9_0/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1189:../../../FreeRTOS_9_0/Source/tasks.c **** 				tick time is less than the wake time. */
1190:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1191:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1192:../../../FreeRTOS_9_0/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1193:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1194:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
1195:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1196:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1197:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1198:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1199:../../../FreeRTOS_9_0/Source/tasks.c **** 
1200:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1201:../../../FreeRTOS_9_0/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1202:../../../FreeRTOS_9_0/Source/tasks.c **** 
1203:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
1204:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1205:../../../FreeRTOS_9_0/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1206:../../../FreeRTOS_9_0/Source/tasks.c **** 
1207:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1208:../../../FreeRTOS_9_0/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1209:../../../FreeRTOS_9_0/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1210:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1211:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
1212:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1213:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1214:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1215:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1216:../../../FreeRTOS_9_0/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1217:../../../FreeRTOS_9_0/Source/tasks.c **** 
1218:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1219:../../../FreeRTOS_9_0/Source/tasks.c **** 		have put ourselves to sleep. */
1220:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1221:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1222:../../../FreeRTOS_9_0/Source/tasks.c **** 			portYIELD_WITHIN_API();
1223:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1224:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
1225:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1226:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1227:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1228:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
ARM GAS  /tmp/ccIgarPJ.s 			page 41


1229:../../../FreeRTOS_9_0/Source/tasks.c **** 
1230:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1231:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
1232:../../../FreeRTOS_9_0/Source/tasks.c **** 
1233:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1234:../../../FreeRTOS_9_0/Source/tasks.c **** 
1235:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1236:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 841              		.loc 1 1236 0
 842              		.cfi_startproc
 843              		@ args = 0, pretend = 0, frame = 16
 844              		@ frame_needed = 1, uses_anonymous_args = 0
 845 0000 80B5     		push	{r7, lr}
 846              	.LCFI20:
 847              		.cfi_def_cfa_offset 8
 848              		.cfi_offset 7, -8
 849              		.cfi_offset 14, -4
 850 0002 84B0     		sub	sp, sp, #16
 851              	.LCFI21:
 852              		.cfi_def_cfa_offset 24
 853 0004 00AF     		add	r7, sp, #0
 854              	.LCFI22:
 855              		.cfi_def_cfa_register 7
 856 0006 7860     		str	r0, [r7, #4]
1237:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 857              		.loc 1 1237 0
 858 0008 0023     		movs	r3, #0
 859 000a FB60     		str	r3, [r7, #12]
1238:../../../FreeRTOS_9_0/Source/tasks.c **** 
1239:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1240:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
 860              		.loc 1 1240 0
 861 000c 7B68     		ldr	r3, [r7, #4]
 862 000e 002B     		cmp	r3, #0
 863 0010 1AD0     		beq	.L39
1241:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1242:../../../FreeRTOS_9_0/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
 864              		.loc 1 1242 0
 865 0012 144B     		ldr	r3, .L43
 866 0014 1B68     		ldr	r3, [r3]
 867 0016 002B     		cmp	r3, #0
 868 0018 09D0     		beq	.L40
 869              	.LBB97:
 870              	.LBB98:
 871              		.loc 2 237 0 discriminator 1
 872              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 873 001a 4FF05003 			mov r3, #80												
 874 001e 83F31188 		msr basepri, r3											
 875 0022 BFF36F8F 		isb														
 876 0026 BFF34F8F 		dsb														
 877              	
 878              	@ 0 "" 2
 879              		.thumb
 880 002a BB60     		str	r3, [r7, #8]
 881              	.L41:
 882              	.LBE98:
 883              	.LBE97:
ARM GAS  /tmp/ccIgarPJ.s 			page 42


 884              		.loc 1 1242 0 discriminator 1
 885 002c FEE7     		b	.L41
 886              	.L40:
1243:../../../FreeRTOS_9_0/Source/tasks.c **** 			vTaskSuspendAll();
 887              		.loc 1 1243 0
 888 002e FFF7FEFF 		bl	vTaskSuspendAll
1244:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1245:../../../FreeRTOS_9_0/Source/tasks.c **** 				traceTASK_DELAY();
 889              		.loc 1 1245 0
 890 0032 2320     		movs	r0, #35
 891 0034 7968     		ldr	r1, [r7, #4]
 892 0036 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32
1246:../../../FreeRTOS_9_0/Source/tasks.c **** 
1247:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* A task that is removed from the event list while the
1248:../../../FreeRTOS_9_0/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1249:../../../FreeRTOS_9_0/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1250:../../../FreeRTOS_9_0/Source/tasks.c **** 				is resumed.
1251:../../../FreeRTOS_9_0/Source/tasks.c **** 
1252:../../../FreeRTOS_9_0/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1253:../../../FreeRTOS_9_0/Source/tasks.c **** 				executing task. */
1254:../../../FreeRTOS_9_0/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 893              		.loc 1 1254 0
 894 003a 7868     		ldr	r0, [r7, #4]
 895 003c 0021     		movs	r1, #0
 896 003e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
1255:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1256:../../../FreeRTOS_9_0/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 897              		.loc 1 1256 0
 898 0042 FFF7FEFF 		bl	xTaskResumeAll
 899 0046 F860     		str	r0, [r7, #12]
 900              	.L39:
1257:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1258:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
1259:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1260:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1261:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1262:../../../FreeRTOS_9_0/Source/tasks.c **** 
1263:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1264:../../../FreeRTOS_9_0/Source/tasks.c **** 		have put ourselves to sleep. */
1265:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 901              		.loc 1 1265 0
 902 0048 FB68     		ldr	r3, [r7, #12]
 903 004a 002B     		cmp	r3, #0
 904 004c 07D1     		bne	.L38
1266:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1267:../../../FreeRTOS_9_0/Source/tasks.c **** 			portYIELD_WITHIN_API();
 905              		.loc 1 1267 0
 906 004e 064B     		ldr	r3, .L43+4
 907 0050 4FF08052 		mov	r2, #268435456
 908 0054 1A60     		str	r2, [r3]
 909              	@ 1267 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 910 0056 BFF34F8F 		dsb
 911              	@ 0 "" 2
 912              	@ 1267 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 913 005a BFF36F8F 		isb
 914              	@ 0 "" 2
 915              		.thumb
ARM GAS  /tmp/ccIgarPJ.s 			page 43


 916              	.L38:
1268:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1269:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
1270:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1271:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1272:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1273:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 917              		.loc 1 1273 0
 918 005e 1037     		adds	r7, r7, #16
 919              	.LCFI23:
 920              		.cfi_def_cfa_offset 8
 921 0060 BD46     		mov	sp, r7
 922              	.LCFI24:
 923              		.cfi_def_cfa_register 13
 924              		@ sp needed
 925 0062 80BD     		pop	{r7, pc}
 926              	.L44:
 927              		.align	2
 928              	.L43:
 929 0064 00000000 		.word	uxSchedulerSuspended
 930 0068 04ED00E0 		.word	-536810236
 931              		.cfi_endproc
 932              	.LFE9:
 934              		.section	.text.eTaskGetState,"ax",%progbits
 935              		.align	2
 936              		.global	eTaskGetState
 937              		.thumb
 938              		.thumb_func
 940              	eTaskGetState:
 941              	.LFB10:
1274:../../../FreeRTOS_9_0/Source/tasks.c **** 
1275:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1276:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
1277:../../../FreeRTOS_9_0/Source/tasks.c **** 
1278:../../../FreeRTOS_9_0/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1279:../../../FreeRTOS_9_0/Source/tasks.c **** 
1280:../../../FreeRTOS_9_0/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1281:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 942              		.loc 1 1281 0
 943              		.cfi_startproc
 944              		@ args = 0, pretend = 0, frame = 24
 945              		@ frame_needed = 1, uses_anonymous_args = 0
 946 0000 80B5     		push	{r7, lr}
 947              	.LCFI25:
 948              		.cfi_def_cfa_offset 8
 949              		.cfi_offset 7, -8
 950              		.cfi_offset 14, -4
 951 0002 86B0     		sub	sp, sp, #24
 952              	.LCFI26:
 953              		.cfi_def_cfa_offset 32
 954 0004 00AF     		add	r7, sp, #0
 955              	.LCFI27:
 956              		.cfi_def_cfa_register 7
 957 0006 7860     		str	r0, [r7, #4]
1282:../../../FreeRTOS_9_0/Source/tasks.c **** 	eTaskState eReturn;
1283:../../../FreeRTOS_9_0/Source/tasks.c **** 	List_t *pxStateList;
1284:../../../FreeRTOS_9_0/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
ARM GAS  /tmp/ccIgarPJ.s 			page 44


 958              		.loc 1 1284 0
 959 0008 7B68     		ldr	r3, [r7, #4]
 960 000a 3B61     		str	r3, [r7, #16]
1285:../../../FreeRTOS_9_0/Source/tasks.c **** 
1286:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( pxTCB );
 961              		.loc 1 1286 0
 962 000c 3B69     		ldr	r3, [r7, #16]
 963 000e 002B     		cmp	r3, #0
 964 0010 09D1     		bne	.L46
 965              	.LBB99:
 966              	.LBB100:
 967              		.loc 2 237 0 discriminator 1
 968              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 969 0012 4FF05003 			mov r3, #80												
 970 0016 83F31188 		msr basepri, r3											
 971 001a BFF36F8F 		isb														
 972 001e BFF34F8F 		dsb														
 973              	
 974              	@ 0 "" 2
 975              		.thumb
 976 0022 BB60     		str	r3, [r7, #8]
 977              	.L47:
 978              	.LBE100:
 979              	.LBE99:
 980              		.loc 1 1286 0 discriminator 1
 981 0024 FEE7     		b	.L47
 982              	.L46:
1287:../../../FreeRTOS_9_0/Source/tasks.c **** 
1288:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 983              		.loc 1 1288 0
 984 0026 1D4B     		ldr	r3, .L58
 985 0028 1B68     		ldr	r3, [r3]
 986 002a 3A69     		ldr	r2, [r7, #16]
 987 002c 9A42     		cmp	r2, r3
 988 002e 02D1     		bne	.L48
1289:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1290:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1291:../../../FreeRTOS_9_0/Source/tasks.c **** 			eReturn = eRunning;
 989              		.loc 1 1291 0
 990 0030 0023     		movs	r3, #0
 991 0032 FB75     		strb	r3, [r7, #23]
 992 0034 2DE0     		b	.L49
 993              	.L48:
1292:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1293:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
1294:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1295:../../../FreeRTOS_9_0/Source/tasks.c **** 			taskENTER_CRITICAL();
 994              		.loc 1 1295 0
 995 0036 FFF7FEFF 		bl	vPortEnterCritical
1296:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1297:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 996              		.loc 1 1297 0
 997 003a 3B69     		ldr	r3, [r7, #16]
 998 003c 5B69     		ldr	r3, [r3, #20]
 999 003e FB60     		str	r3, [r7, #12]
1298:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1299:../../../FreeRTOS_9_0/Source/tasks.c **** 			taskEXIT_CRITICAL();
ARM GAS  /tmp/ccIgarPJ.s 			page 45


 1000              		.loc 1 1299 0
 1001 0040 FFF7FEFF 		bl	vPortExitCritical
1300:../../../FreeRTOS_9_0/Source/tasks.c **** 
1301:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
 1002              		.loc 1 1301 0
 1003 0044 164B     		ldr	r3, .L58+4
 1004 0046 1B68     		ldr	r3, [r3]
 1005 0048 FA68     		ldr	r2, [r7, #12]
 1006 004a 9A42     		cmp	r2, r3
 1007 004c 04D0     		beq	.L50
 1008              		.loc 1 1301 0 is_stmt 0 discriminator 1
 1009 004e 154B     		ldr	r3, .L58+8
 1010 0050 1B68     		ldr	r3, [r3]
 1011 0052 FA68     		ldr	r2, [r7, #12]
 1012 0054 9A42     		cmp	r2, r3
 1013 0056 02D1     		bne	.L51
 1014              	.L50:
1302:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1303:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1304:../../../FreeRTOS_9_0/Source/tasks.c **** 				lists. */
1305:../../../FreeRTOS_9_0/Source/tasks.c **** 				eReturn = eBlocked;
 1015              		.loc 1 1305 0 is_stmt 1
 1016 0058 0223     		movs	r3, #2
 1017 005a FB75     		strb	r3, [r7, #23]
 1018 005c 19E0     		b	.L49
 1019              	.L51:
1306:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1307:../../../FreeRTOS_9_0/Source/tasks.c **** 
1308:../../../FreeRTOS_9_0/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1309:../../../FreeRTOS_9_0/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
 1020              		.loc 1 1309 0
 1021 005e FB68     		ldr	r3, [r7, #12]
 1022 0060 114A     		ldr	r2, .L58+12
 1023 0062 9342     		cmp	r3, r2
 1024 0064 09D1     		bne	.L52
1310:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1311:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1312:../../../FreeRTOS_9_0/Source/tasks.c **** 					list.  Is it genuinely suspended or is it block
1313:../../../FreeRTOS_9_0/Source/tasks.c **** 					indefinitely? */
1314:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 1025              		.loc 1 1314 0
 1026 0066 3B69     		ldr	r3, [r7, #16]
 1027 0068 9B6A     		ldr	r3, [r3, #40]
 1028 006a 002B     		cmp	r3, #0
 1029 006c 02D1     		bne	.L53
1315:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
1316:../../../FreeRTOS_9_0/Source/tasks.c **** 						eReturn = eSuspended;
 1030              		.loc 1 1316 0
 1031 006e 0323     		movs	r3, #3
 1032 0070 FB75     		strb	r3, [r7, #23]
 1033 0072 0EE0     		b	.L49
 1034              	.L53:
1317:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
1318:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
1319:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
1320:../../../FreeRTOS_9_0/Source/tasks.c **** 						eReturn = eBlocked;
 1035              		.loc 1 1320 0
ARM GAS  /tmp/ccIgarPJ.s 			page 46


 1036 0074 0223     		movs	r3, #2
 1037 0076 FB75     		strb	r3, [r7, #23]
 1038 0078 0BE0     		b	.L49
 1039              	.L52:
1321:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
1322:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1323:../../../FreeRTOS_9_0/Source/tasks.c **** 			#endif
1324:../../../FreeRTOS_9_0/Source/tasks.c **** 
1325:../../../FreeRTOS_9_0/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1326:../../../FreeRTOS_9_0/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 1040              		.loc 1 1326 0
 1041 007a FB68     		ldr	r3, [r7, #12]
 1042 007c 0B4A     		ldr	r2, .L58+16
 1043 007e 9342     		cmp	r3, r2
 1044 0080 02D0     		beq	.L55
 1045              		.loc 1 1326 0 is_stmt 0 discriminator 1
 1046 0082 FB68     		ldr	r3, [r7, #12]
 1047 0084 002B     		cmp	r3, #0
 1048 0086 02D1     		bne	.L56
 1049              	.L55:
1327:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1328:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1329:../../../FreeRTOS_9_0/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1330:../../../FreeRTOS_9_0/Source/tasks.c **** 					all. */
1331:../../../FreeRTOS_9_0/Source/tasks.c **** 					eReturn = eDeleted;
 1050              		.loc 1 1331 0 is_stmt 1
 1051 0088 0423     		movs	r3, #4
 1052 008a FB75     		strb	r3, [r7, #23]
 1053 008c 01E0     		b	.L49
 1054              	.L56:
1332:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1333:../../../FreeRTOS_9_0/Source/tasks.c **** 			#endif
1334:../../../FreeRTOS_9_0/Source/tasks.c **** 
1335:../../../FreeRTOS_9_0/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1336:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1337:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1338:../../../FreeRTOS_9_0/Source/tasks.c **** 				Ready (including pending ready) state. */
1339:../../../FreeRTOS_9_0/Source/tasks.c **** 				eReturn = eReady;
 1055              		.loc 1 1339 0
 1056 008e 0123     		movs	r3, #1
 1057 0090 FB75     		strb	r3, [r7, #23]
 1058              	.L49:
1340:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1341:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1342:../../../FreeRTOS_9_0/Source/tasks.c **** 
1343:../../../FreeRTOS_9_0/Source/tasks.c **** 		return eReturn;
 1059              		.loc 1 1343 0
 1060 0092 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1344:../../../FreeRTOS_9_0/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1061              		.loc 1 1344 0
 1062 0094 1846     		mov	r0, r3
 1063 0096 1837     		adds	r7, r7, #24
 1064              	.LCFI28:
 1065              		.cfi_def_cfa_offset 8
 1066 0098 BD46     		mov	sp, r7
 1067              	.LCFI29:
 1068              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccIgarPJ.s 			page 47


 1069              		@ sp needed
 1070 009a 80BD     		pop	{r7, pc}
 1071              	.L59:
 1072              		.align	2
 1073              	.L58:
 1074 009c 00000000 		.word	pxCurrentTCB
 1075 00a0 00000000 		.word	pxDelayedTaskList
 1076 00a4 00000000 		.word	pxOverflowDelayedTaskList
 1077 00a8 00000000 		.word	xSuspendedTaskList
 1078 00ac 00000000 		.word	xTasksWaitingTermination
 1079              		.cfi_endproc
 1080              	.LFE10:
 1082              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1083              		.align	2
 1084              		.global	uxTaskPriorityGet
 1085              		.thumb
 1086              		.thumb_func
 1088              	uxTaskPriorityGet:
 1089              	.LFB11:
1345:../../../FreeRTOS_9_0/Source/tasks.c **** 
1346:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1347:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
1348:../../../FreeRTOS_9_0/Source/tasks.c **** 
1349:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1350:../../../FreeRTOS_9_0/Source/tasks.c **** 
1351:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
1352:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 1090              		.loc 1 1352 0
 1091              		.cfi_startproc
 1092              		@ args = 0, pretend = 0, frame = 16
 1093              		@ frame_needed = 1, uses_anonymous_args = 0
 1094 0000 80B5     		push	{r7, lr}
 1095              	.LCFI30:
 1096              		.cfi_def_cfa_offset 8
 1097              		.cfi_offset 7, -8
 1098              		.cfi_offset 14, -4
 1099 0002 84B0     		sub	sp, sp, #16
 1100              	.LCFI31:
 1101              		.cfi_def_cfa_offset 24
 1102 0004 00AF     		add	r7, sp, #0
 1103              	.LCFI32:
 1104              		.cfi_def_cfa_register 7
 1105 0006 7860     		str	r0, [r7, #4]
1353:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxTCB;
1354:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxReturn;
1355:../../../FreeRTOS_9_0/Source/tasks.c **** 
1356:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskENTER_CRITICAL();
 1106              		.loc 1 1356 0
 1107 0008 FFF7FEFF 		bl	vPortEnterCritical
1357:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1358:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1359:../../../FreeRTOS_9_0/Source/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1360:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1108              		.loc 1 1360 0
 1109 000c 7B68     		ldr	r3, [r7, #4]
 1110 000e 002B     		cmp	r3, #0
 1111 0010 02D1     		bne	.L61
ARM GAS  /tmp/ccIgarPJ.s 			page 48


 1112              		.loc 1 1360 0 is_stmt 0 discriminator 1
 1113 0012 074B     		ldr	r3, .L64
 1114 0014 1B68     		ldr	r3, [r3]
 1115 0016 00E0     		b	.L62
 1116              	.L61:
 1117              		.loc 1 1360 0 discriminator 2
 1118 0018 7B68     		ldr	r3, [r7, #4]
 1119              	.L62:
 1120              		.loc 1 1360 0 discriminator 4
 1121 001a FB60     		str	r3, [r7, #12]
1361:../../../FreeRTOS_9_0/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1122              		.loc 1 1361 0 is_stmt 1 discriminator 4
 1123 001c FB68     		ldr	r3, [r7, #12]
 1124 001e DB6A     		ldr	r3, [r3, #44]
 1125 0020 BB60     		str	r3, [r7, #8]
1362:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1363:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1126              		.loc 1 1363 0 discriminator 4
 1127 0022 FFF7FEFF 		bl	vPortExitCritical
1364:../../../FreeRTOS_9_0/Source/tasks.c **** 
1365:../../../FreeRTOS_9_0/Source/tasks.c **** 		return uxReturn;
 1128              		.loc 1 1365 0 discriminator 4
 1129 0026 BB68     		ldr	r3, [r7, #8]
1366:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 1130              		.loc 1 1366 0 discriminator 4
 1131 0028 1846     		mov	r0, r3
 1132 002a 1037     		adds	r7, r7, #16
 1133              	.LCFI33:
 1134              		.cfi_def_cfa_offset 8
 1135 002c BD46     		mov	sp, r7
 1136              	.LCFI34:
 1137              		.cfi_def_cfa_register 13
 1138              		@ sp needed
 1139 002e 80BD     		pop	{r7, pc}
 1140              	.L65:
 1141              		.align	2
 1142              	.L64:
 1143 0030 00000000 		.word	pxCurrentTCB
 1144              		.cfi_endproc
 1145              	.LFE11:
 1147              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1148              		.align	2
 1149              		.global	uxTaskPriorityGetFromISR
 1150              		.thumb
 1151              		.thumb_func
 1153              	uxTaskPriorityGetFromISR:
 1154              	.LFB12:
1367:../../../FreeRTOS_9_0/Source/tasks.c **** 
1368:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1369:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
1370:../../../FreeRTOS_9_0/Source/tasks.c **** 
1371:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1372:../../../FreeRTOS_9_0/Source/tasks.c **** 
1373:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1374:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 1155              		.loc 1 1374 0
 1156              		.cfi_startproc
ARM GAS  /tmp/ccIgarPJ.s 			page 49


 1157              		@ args = 0, pretend = 0, frame = 32
 1158              		@ frame_needed = 1, uses_anonymous_args = 0
 1159 0000 80B5     		push	{r7, lr}
 1160              	.LCFI35:
 1161              		.cfi_def_cfa_offset 8
 1162              		.cfi_offset 7, -8
 1163              		.cfi_offset 14, -4
 1164 0002 88B0     		sub	sp, sp, #32
 1165              	.LCFI36:
 1166              		.cfi_def_cfa_offset 40
 1167 0004 00AF     		add	r7, sp, #0
 1168              	.LCFI37:
 1169              		.cfi_def_cfa_register 7
 1170 0006 7860     		str	r0, [r7, #4]
1375:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxTCB;
1376:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1377:../../../FreeRTOS_9_0/Source/tasks.c **** 
1378:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1379:../../../FreeRTOS_9_0/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1380:../../../FreeRTOS_9_0/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1381:../../../FreeRTOS_9_0/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1382:../../../FreeRTOS_9_0/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1383:../../../FreeRTOS_9_0/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1384:../../../FreeRTOS_9_0/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1385:../../../FreeRTOS_9_0/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1386:../../../FreeRTOS_9_0/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1387:../../../FreeRTOS_9_0/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1388:../../../FreeRTOS_9_0/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1389:../../../FreeRTOS_9_0/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1390:../../../FreeRTOS_9_0/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1391:../../../FreeRTOS_9_0/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1392:../../../FreeRTOS_9_0/Source/tasks.c **** 		provided on the following link:
1393:../../../FreeRTOS_9_0/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1394:../../../FreeRTOS_9_0/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1171              		.loc 1 1394 0
 1172 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1173              	.LBB101:
 1174              	.LBB102:
 238:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 239:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 240:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 241:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 242:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 243:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 244:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 245:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 246:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 247:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 248:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 249:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 250:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 251:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 252:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 253:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1175              		.loc 2 253 0
 1176              	@ 253 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1177 000c EFF31182 			mrs r2, basepri											
ARM GAS  /tmp/ccIgarPJ.s 			page 50


 1178 0010 4FF05003 		mov r3, #80												
 1179 0014 83F31188 		msr basepri, r3											
 1180 0018 BFF36F8F 		isb														
 1181 001c BFF34F8F 		dsb														
 1182              	
 1183              	@ 0 "" 2
 1184              		.thumb
 1185 0020 3A61     		str	r2, [r7, #16]
 1186 0022 FB60     		str	r3, [r7, #12]
 254:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 255:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 256:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 257:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 258:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 259:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 260:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 261:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 262:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 263:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 264:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 265:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 1187              		.loc 2 265 0
 1188 0024 3B69     		ldr	r3, [r7, #16]
 1189              	.LBE102:
 1190              	.LBE101:
1395:../../../FreeRTOS_9_0/Source/tasks.c **** 
1396:../../../FreeRTOS_9_0/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 1191              		.loc 1 1396 0
 1192 0026 FB61     		str	r3, [r7, #28]
1397:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1398:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1399:../../../FreeRTOS_9_0/Source/tasks.c **** 			task that is being queried. */
1400:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1193              		.loc 1 1400 0
 1194 0028 7B68     		ldr	r3, [r7, #4]
 1195 002a 002B     		cmp	r3, #0
 1196 002c 02D1     		bne	.L68
 1197              		.loc 1 1400 0 is_stmt 0 discriminator 1
 1198 002e 094B     		ldr	r3, .L71
 1199 0030 1B68     		ldr	r3, [r3]
 1200 0032 00E0     		b	.L69
 1201              	.L68:
 1202              		.loc 1 1400 0 discriminator 2
 1203 0034 7B68     		ldr	r3, [r7, #4]
 1204              	.L69:
 1205              		.loc 1 1400 0 discriminator 4
 1206 0036 BB61     		str	r3, [r7, #24]
1401:../../../FreeRTOS_9_0/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1207              		.loc 1 1401 0 is_stmt 1 discriminator 4
 1208 0038 BB69     		ldr	r3, [r7, #24]
 1209 003a DB6A     		ldr	r3, [r3, #44]
 1210 003c 7B61     		str	r3, [r7, #20]
 1211 003e FB69     		ldr	r3, [r7, #28]
 1212 0040 BB60     		str	r3, [r7, #8]
 1213              	.LBB103:
 1214              	.LBB104:
 266:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
ARM GAS  /tmp/ccIgarPJ.s 			page 51


 267:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 268:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 269:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 270:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 271:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1215              		.loc 2 271 0 discriminator 4
 1216 0042 BB68     		ldr	r3, [r7, #8]
 1217              	@ 271 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1218 0044 83F31188 			msr basepri, r3	
 1219              	@ 0 "" 2
 1220              		.thumb
 1221              	.LBE104:
 1222              	.LBE103:
1402:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1403:../../../FreeRTOS_9_0/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1404:../../../FreeRTOS_9_0/Source/tasks.c **** 
1405:../../../FreeRTOS_9_0/Source/tasks.c **** 		return uxReturn;
 1223              		.loc 1 1405 0 discriminator 4
 1224 0048 7B69     		ldr	r3, [r7, #20]
1406:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 1225              		.loc 1 1406 0 discriminator 4
 1226 004a 1846     		mov	r0, r3
 1227 004c 2037     		adds	r7, r7, #32
 1228              	.LCFI38:
 1229              		.cfi_def_cfa_offset 8
 1230 004e BD46     		mov	sp, r7
 1231              	.LCFI39:
 1232              		.cfi_def_cfa_register 13
 1233              		@ sp needed
 1234 0050 80BD     		pop	{r7, pc}
 1235              	.L72:
 1236 0052 00BF     		.align	2
 1237              	.L71:
 1238 0054 00000000 		.word	pxCurrentTCB
 1239              		.cfi_endproc
 1240              	.LFE12:
 1242              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1243              		.align	2
 1244              		.global	vTaskPrioritySet
 1245              		.thumb
 1246              		.thumb_func
 1248              	vTaskPrioritySet:
 1249              	.LFB13:
1407:../../../FreeRTOS_9_0/Source/tasks.c **** 
1408:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1409:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
1410:../../../FreeRTOS_9_0/Source/tasks.c **** 
1411:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1412:../../../FreeRTOS_9_0/Source/tasks.c **** 
1413:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1414:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 1250              		.loc 1 1414 0
 1251              		.cfi_startproc
 1252              		@ args = 0, pretend = 0, frame = 32
 1253              		@ frame_needed = 1, uses_anonymous_args = 0
 1254 0000 90B5     		push	{r4, r7, lr}
 1255              	.LCFI40:
ARM GAS  /tmp/ccIgarPJ.s 			page 52


 1256              		.cfi_def_cfa_offset 12
 1257              		.cfi_offset 4, -12
 1258              		.cfi_offset 7, -8
 1259              		.cfi_offset 14, -4
 1260 0002 8BB0     		sub	sp, sp, #44
 1261              	.LCFI41:
 1262              		.cfi_def_cfa_offset 56
 1263 0004 02AF     		add	r7, sp, #8
 1264              	.LCFI42:
 1265              		.cfi_def_cfa 7, 48
 1266 0006 7860     		str	r0, [r7, #4]
 1267 0008 3960     		str	r1, [r7]
1415:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxTCB;
1416:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1417:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1268              		.loc 1 1417 0
 1269 000a 0023     		movs	r3, #0
 1270 000c FB61     		str	r3, [r7, #28]
1418:../../../FreeRTOS_9_0/Source/tasks.c **** 
1419:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 1271              		.loc 1 1419 0
 1272 000e 3B68     		ldr	r3, [r7]
 1273 0010 062B     		cmp	r3, #6
 1274 0012 09D9     		bls	.L74
 1275              	.LBB105:
 1276              	.LBB106:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1277              		.loc 2 237 0 discriminator 1
 1278              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1279 0014 4FF05003 			mov r3, #80												
 1280 0018 83F31188 		msr basepri, r3											
 1281 001c BFF36F8F 		isb														
 1282 0020 BFF34F8F 		dsb														
 1283              	
 1284              	@ 0 "" 2
 1285              		.thumb
 1286 0024 FB60     		str	r3, [r7, #12]
 1287              	.L75:
 1288              	.LBE106:
 1289              	.LBE105:
 1290              		.loc 1 1419 0 discriminator 1
 1291 0026 FEE7     		b	.L75
 1292              	.L74:
1420:../../../FreeRTOS_9_0/Source/tasks.c **** 
1421:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1422:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 1293              		.loc 1 1422 0
 1294 0028 3B68     		ldr	r3, [r7]
 1295 002a 062B     		cmp	r3, #6
 1296 002c 01D9     		bls	.L76
1423:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1424:../../../FreeRTOS_9_0/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 1297              		.loc 1 1424 0
 1298 002e 0623     		movs	r3, #6
 1299 0030 3B60     		str	r3, [r7]
 1300              	.L76:
1425:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
ARM GAS  /tmp/ccIgarPJ.s 			page 53


1426:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
1427:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1428:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1429:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1430:../../../FreeRTOS_9_0/Source/tasks.c **** 
1431:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskENTER_CRITICAL();
 1301              		.loc 1 1431 0
 1302 0032 FFF7FEFF 		bl	vPortEnterCritical
1432:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1433:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1434:../../../FreeRTOS_9_0/Source/tasks.c **** 			task that is being changed. */
1435:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1303              		.loc 1 1435 0
 1304 0036 7B68     		ldr	r3, [r7, #4]
 1305 0038 002B     		cmp	r3, #0
 1306 003a 02D1     		bne	.L77
 1307              		.loc 1 1435 0 is_stmt 0 discriminator 1
 1308 003c 504B     		ldr	r3, .L88
 1309 003e 1B68     		ldr	r3, [r3]
 1310 0040 00E0     		b	.L78
 1311              	.L77:
 1312              		.loc 1 1435 0 discriminator 2
 1313 0042 7B68     		ldr	r3, [r7, #4]
 1314              	.L78:
 1315              		.loc 1 1435 0 discriminator 4
 1316 0044 BB61     		str	r3, [r7, #24]
1436:../../../FreeRTOS_9_0/Source/tasks.c **** 
1437:../../../FreeRTOS_9_0/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
 1317              		.loc 1 1437 0 is_stmt 1 discriminator 4
 1318 0046 BB69     		ldr	r3, [r7, #24]
 1319 0048 1846     		mov	r0, r3
 1320 004a FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 1321 004e 0346     		mov	r3, r0
 1322 0050 2820     		movs	r0, #40
 1323 0052 1946     		mov	r1, r3
 1324 0054 3A68     		ldr	r2, [r7]
 1325 0056 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x2
 1326 005a B969     		ldr	r1, [r7, #24]
 1327 005c BB69     		ldr	r3, [r7, #24]
 1328 005e 03F13402 		add	r2, r3, #52
 1329 0062 BB69     		ldr	r3, [r7, #24]
 1330 0064 1B6B     		ldr	r3, [r3, #48]
 1331 0066 1C46     		mov	r4, r3
 1332 0068 0023     		movs	r3, #0
 1333 006a 0093     		str	r3, [sp]
 1334 006c 0846     		mov	r0, r1
 1335 006e 1146     		mov	r1, r2
 1336 0070 3A68     		ldr	r2, [r7]
 1337 0072 2346     		mov	r3, r4
 1338 0074 FFF7FEFF 		bl	SYSVIEW_UpdateTask
1438:../../../FreeRTOS_9_0/Source/tasks.c **** 
1439:../../../FreeRTOS_9_0/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1440:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1441:../../../FreeRTOS_9_0/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
 1339              		.loc 1 1441 0 discriminator 4
 1340 0078 BB69     		ldr	r3, [r7, #24]
 1341 007a DB6C     		ldr	r3, [r3, #76]
ARM GAS  /tmp/ccIgarPJ.s 			page 54


 1342 007c 7B61     		str	r3, [r7, #20]
1442:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1443:../../../FreeRTOS_9_0/Source/tasks.c **** 			#else
1444:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1445:../../../FreeRTOS_9_0/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1446:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1447:../../../FreeRTOS_9_0/Source/tasks.c **** 			#endif
1448:../../../FreeRTOS_9_0/Source/tasks.c **** 
1449:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
 1343              		.loc 1 1449 0 discriminator 4
 1344 007e 7A69     		ldr	r2, [r7, #20]
 1345 0080 3B68     		ldr	r3, [r7]
 1346 0082 9A42     		cmp	r2, r3
 1347 0084 76D0     		beq	.L79
1450:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1451:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1452:../../../FreeRTOS_9_0/Source/tasks.c **** 				priority than the calling task. */
1453:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
 1348              		.loc 1 1453 0
 1349 0086 3A68     		ldr	r2, [r7]
 1350 0088 7B69     		ldr	r3, [r7, #20]
 1351 008a 9A42     		cmp	r2, r3
 1352 008c 0DD9     		bls	.L80
1454:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1455:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
 1353              		.loc 1 1455 0
 1354 008e 3C4B     		ldr	r3, .L88
 1355 0090 1B68     		ldr	r3, [r3]
 1356 0092 BA69     		ldr	r2, [r7, #24]
 1357 0094 9A42     		cmp	r2, r3
 1358 0096 0FD0     		beq	.L81
1456:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
1457:../../../FreeRTOS_9_0/Source/tasks.c **** 						/* The priority of a task other than the currently
1458:../../../FreeRTOS_9_0/Source/tasks.c **** 						running task is being raised.  Is the priority being
1459:../../../FreeRTOS_9_0/Source/tasks.c **** 						raised above that of the running task? */
1460:../../../FreeRTOS_9_0/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 1359              		.loc 1 1460 0
 1360 0098 394B     		ldr	r3, .L88
 1361 009a 1B68     		ldr	r3, [r3]
 1362 009c DA6A     		ldr	r2, [r3, #44]
 1363 009e 3B68     		ldr	r3, [r7]
 1364 00a0 9A42     		cmp	r2, r3
 1365 00a2 09D8     		bhi	.L81
1461:../../../FreeRTOS_9_0/Source/tasks.c **** 						{
1462:../../../FreeRTOS_9_0/Source/tasks.c **** 							xYieldRequired = pdTRUE;
 1366              		.loc 1 1462 0
 1367 00a4 0123     		movs	r3, #1
 1368 00a6 FB61     		str	r3, [r7, #28]
 1369 00a8 06E0     		b	.L81
 1370              	.L80:
1463:../../../FreeRTOS_9_0/Source/tasks.c **** 						}
1464:../../../FreeRTOS_9_0/Source/tasks.c **** 						else
1465:../../../FreeRTOS_9_0/Source/tasks.c **** 						{
1466:../../../FreeRTOS_9_0/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1467:../../../FreeRTOS_9_0/Source/tasks.c **** 						}
1468:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
1469:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
ARM GAS  /tmp/ccIgarPJ.s 			page 55


1470:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
1471:../../../FreeRTOS_9_0/Source/tasks.c **** 						/* The priority of the running task is being raised,
1472:../../../FreeRTOS_9_0/Source/tasks.c **** 						but the running task must already be the highest
1473:../../../FreeRTOS_9_0/Source/tasks.c **** 						priority task able to run so no yield is required. */
1474:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
1475:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1476:../../../FreeRTOS_9_0/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
 1371              		.loc 1 1476 0
 1372 00aa 354B     		ldr	r3, .L88
 1373 00ac 1B68     		ldr	r3, [r3]
 1374 00ae BA69     		ldr	r2, [r7, #24]
 1375 00b0 9A42     		cmp	r2, r3
 1376 00b2 01D1     		bne	.L81
1477:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1478:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Setting the priority of the running task down means
1479:../../../FreeRTOS_9_0/Source/tasks.c **** 					there may now be another task of higher priority that
1480:../../../FreeRTOS_9_0/Source/tasks.c **** 					is ready to execute. */
1481:../../../FreeRTOS_9_0/Source/tasks.c **** 					xYieldRequired = pdTRUE;
 1377              		.loc 1 1481 0
 1378 00b4 0123     		movs	r3, #1
 1379 00b6 FB61     		str	r3, [r7, #28]
 1380              	.L81:
1482:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1483:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
1484:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1485:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1486:../../../FreeRTOS_9_0/Source/tasks.c **** 					require a yield as the running task must be above the
1487:../../../FreeRTOS_9_0/Source/tasks.c **** 					new priority of the task being modified. */
1488:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1489:../../../FreeRTOS_9_0/Source/tasks.c **** 
1490:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1491:../../../FreeRTOS_9_0/Source/tasks.c **** 				before its uxPriority member is changed so the
1492:../../../FreeRTOS_9_0/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1493:../../../FreeRTOS_9_0/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 1381              		.loc 1 1493 0
 1382 00b8 BB69     		ldr	r3, [r7, #24]
 1383 00ba DB6A     		ldr	r3, [r3, #44]
 1384 00bc 3B61     		str	r3, [r7, #16]
1494:../../../FreeRTOS_9_0/Source/tasks.c **** 
1495:../../../FreeRTOS_9_0/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1496:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1497:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1498:../../../FreeRTOS_9_0/Source/tasks.c **** 					currently using an inherited priority. */
1499:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 1385              		.loc 1 1499 0
 1386 00be BB69     		ldr	r3, [r7, #24]
 1387 00c0 DA6C     		ldr	r2, [r3, #76]
 1388 00c2 BB69     		ldr	r3, [r7, #24]
 1389 00c4 DB6A     		ldr	r3, [r3, #44]
 1390 00c6 9A42     		cmp	r2, r3
 1391 00c8 02D1     		bne	.L82
1500:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
1501:../../../FreeRTOS_9_0/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 1392              		.loc 1 1501 0
 1393 00ca BB69     		ldr	r3, [r7, #24]
 1394 00cc 3A68     		ldr	r2, [r7]
 1395 00ce DA62     		str	r2, [r3, #44]
ARM GAS  /tmp/ccIgarPJ.s 			page 56


 1396              	.L82:
1502:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
1503:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
1504:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
1505:../../../FreeRTOS_9_0/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1506:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
1507:../../../FreeRTOS_9_0/Source/tasks.c **** 
1508:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* The base priority gets set whatever. */
1509:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
 1397              		.loc 1 1509 0
 1398 00d0 BB69     		ldr	r3, [r7, #24]
 1399 00d2 3A68     		ldr	r2, [r7]
 1400 00d4 DA64     		str	r2, [r3, #76]
1510:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1511:../../../FreeRTOS_9_0/Source/tasks.c **** 				#else
1512:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1513:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1514:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1515:../../../FreeRTOS_9_0/Source/tasks.c **** 				#endif
1516:../../../FreeRTOS_9_0/Source/tasks.c **** 
1517:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1518:../../../FreeRTOS_9_0/Source/tasks.c **** 				being used for anything else. */
1519:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 1401              		.loc 1 1519 0
 1402 00d6 BB69     		ldr	r3, [r7, #24]
 1403 00d8 9B69     		ldr	r3, [r3, #24]
 1404 00da 002B     		cmp	r3, #0
 1405 00dc 04DB     		blt	.L83
1520:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1521:../../../FreeRTOS_9_0/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
 1406              		.loc 1 1521 0
 1407 00de 3B68     		ldr	r3, [r7]
 1408 00e0 C3F10702 		rsb	r2, r3, #7
 1409 00e4 BB69     		ldr	r3, [r7, #24]
 1410 00e6 9A61     		str	r2, [r3, #24]
 1411              	.L83:
1522:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1523:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
1524:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1525:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1526:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1527:../../../FreeRTOS_9_0/Source/tasks.c **** 
1528:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1529:../../../FreeRTOS_9_0/Source/tasks.c **** 				nothing more than change it's priority variable. However, if
1530:../../../FreeRTOS_9_0/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1531:../../../FreeRTOS_9_0/Source/tasks.c **** 				in the list appropriate to its new priority. */
1532:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
 1412              		.loc 1 1532 0
 1413 00e8 BB69     		ldr	r3, [r7, #24]
 1414 00ea 5969     		ldr	r1, [r3, #20]
 1415 00ec 3A69     		ldr	r2, [r7, #16]
 1416 00ee 1346     		mov	r3, r2
 1417 00f0 9B00     		lsls	r3, r3, #2
 1418 00f2 1344     		add	r3, r3, r2
 1419 00f4 9B00     		lsls	r3, r3, #2
 1420 00f6 234A     		ldr	r2, .L88+4
 1421 00f8 1344     		add	r3, r3, r2
ARM GAS  /tmp/ccIgarPJ.s 			page 57


 1422 00fa 9942     		cmp	r1, r3
 1423 00fc 01D1     		bne	.L84
 1424              		.loc 1 1532 0 is_stmt 0 discriminator 1
 1425 00fe 0123     		movs	r3, #1
 1426 0100 00E0     		b	.L85
 1427              	.L84:
 1428              		.loc 1 1532 0 discriminator 2
 1429 0102 0023     		movs	r3, #0
 1430              	.L85:
 1431              		.loc 1 1532 0 discriminator 4
 1432 0104 002B     		cmp	r3, #0
 1433 0106 2AD0     		beq	.L86
1533:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1534:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* The task is currently in its ready list - remove before adding
1535:../../../FreeRTOS_9_0/Source/tasks.c **** 					it to it's new ready list.  As we are in a critical section we
1536:../../../FreeRTOS_9_0/Source/tasks.c **** 					can do this even if the scheduler is suspended. */
1537:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1434              		.loc 1 1537 0 is_stmt 1
 1435 0108 BB69     		ldr	r3, [r7, #24]
 1436 010a 0433     		adds	r3, r3, #4
 1437 010c 1846     		mov	r0, r3
 1438 010e FFF7FEFF 		bl	uxListRemove
 1439 0112 0346     		mov	r3, r0
 1440 0114 002B     		cmp	r3, #0
 1441 0116 09D1     		bne	.L87
1538:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
1539:../../../FreeRTOS_9_0/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1540:../../../FreeRTOS_9_0/Source/tasks.c **** 						there is no need to check again and the port level
1541:../../../FreeRTOS_9_0/Source/tasks.c **** 						reset macro can be called directly. */
1542:../../../FreeRTOS_9_0/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 1442              		.loc 1 1542 0
 1443 0118 3B69     		ldr	r3, [r7, #16]
 1444 011a 0122     		movs	r2, #1
 1445 011c 02FA03F3 		lsl	r3, r2, r3
 1446 0120 DA43     		mvns	r2, r3
 1447 0122 194B     		ldr	r3, .L88+8
 1448 0124 1B68     		ldr	r3, [r3]
 1449 0126 1340     		ands	r3, r3, r2
 1450 0128 174A     		ldr	r2, .L88+8
 1451 012a 1360     		str	r3, [r2]
 1452              	.L87:
1543:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
1544:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
1545:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
1546:../../../FreeRTOS_9_0/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1547:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
1548:../../../FreeRTOS_9_0/Source/tasks.c **** 					prvReaddTaskToReadyList( pxTCB );
 1453              		.loc 1 1548 0
 1454 012c BB69     		ldr	r3, [r7, #24]
 1455 012e DB6A     		ldr	r3, [r3, #44]
 1456 0130 1A46     		mov	r2, r3
 1457 0132 0123     		movs	r3, #1
 1458 0134 03FA02F2 		lsl	r2, r3, r2
 1459 0138 134B     		ldr	r3, .L88+8
 1460 013a 1B68     		ldr	r3, [r3]
 1461 013c 1343     		orrs	r3, r3, r2
 1462 013e 124A     		ldr	r2, .L88+8
ARM GAS  /tmp/ccIgarPJ.s 			page 58


 1463 0140 1360     		str	r3, [r2]
 1464 0142 BB69     		ldr	r3, [r7, #24]
 1465 0144 DA6A     		ldr	r2, [r3, #44]
 1466 0146 1346     		mov	r3, r2
 1467 0148 9B00     		lsls	r3, r3, #2
 1468 014a 1344     		add	r3, r3, r2
 1469 014c 9B00     		lsls	r3, r3, #2
 1470 014e 0D4A     		ldr	r2, .L88+4
 1471 0150 1A44     		add	r2, r2, r3
 1472 0152 BB69     		ldr	r3, [r7, #24]
 1473 0154 0433     		adds	r3, r3, #4
 1474 0156 1046     		mov	r0, r2
 1475 0158 1946     		mov	r1, r3
 1476 015a FFF7FEFF 		bl	vListInsertEnd
 1477              	.L86:
1549:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1550:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
1551:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1552:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1553:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1554:../../../FreeRTOS_9_0/Source/tasks.c **** 
1555:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
 1478              		.loc 1 1555 0
 1479 015e FB69     		ldr	r3, [r7, #28]
 1480 0160 002B     		cmp	r3, #0
 1481 0162 07D0     		beq	.L79
1556:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1557:../../../FreeRTOS_9_0/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 1482              		.loc 1 1557 0
 1483 0164 094B     		ldr	r3, .L88+12
 1484 0166 4FF08052 		mov	r2, #268435456
 1485 016a 1A60     		str	r2, [r3]
 1486              	@ 1557 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 1487 016c BFF34F8F 		dsb
 1488              	@ 0 "" 2
 1489              	@ 1557 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 1490 0170 BFF36F8F 		isb
 1491              	@ 0 "" 2
 1492              		.thumb
 1493              	.L79:
1558:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1559:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
1560:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1561:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1562:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1563:../../../FreeRTOS_9_0/Source/tasks.c **** 
1564:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1565:../../../FreeRTOS_9_0/Source/tasks.c **** 				optimised task selection is not being used. */
1566:../../../FreeRTOS_9_0/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1567:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1568:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1569:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1494              		.loc 1 1569 0
 1495 0174 FFF7FEFF 		bl	vPortExitCritical
1570:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 1496              		.loc 1 1570 0
 1497 0178 2437     		adds	r7, r7, #36
ARM GAS  /tmp/ccIgarPJ.s 			page 59


 1498              	.LCFI43:
 1499              		.cfi_def_cfa_offset 12
 1500 017a BD46     		mov	sp, r7
 1501              	.LCFI44:
 1502              		.cfi_def_cfa_register 13
 1503              		@ sp needed
 1504 017c 90BD     		pop	{r4, r7, pc}
 1505              	.L89:
 1506 017e 00BF     		.align	2
 1507              	.L88:
 1508 0180 00000000 		.word	pxCurrentTCB
 1509 0184 00000000 		.word	pxReadyTasksLists
 1510 0188 00000000 		.word	uxTopReadyPriority
 1511 018c 04ED00E0 		.word	-536810236
 1512              		.cfi_endproc
 1513              	.LFE13:
 1515              		.section	.text.vTaskSuspend,"ax",%progbits
 1516              		.align	2
 1517              		.global	vTaskSuspend
 1518              		.thumb
 1519              		.thumb_func
 1521              	vTaskSuspend:
 1522              	.LFB14:
1571:../../../FreeRTOS_9_0/Source/tasks.c **** 
1572:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1573:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
1574:../../../FreeRTOS_9_0/Source/tasks.c **** 
1575:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1576:../../../FreeRTOS_9_0/Source/tasks.c **** 
1577:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1578:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 1523              		.loc 1 1578 0
 1524              		.cfi_startproc
 1525              		@ args = 0, pretend = 0, frame = 16
 1526              		@ frame_needed = 1, uses_anonymous_args = 0
 1527 0000 80B5     		push	{r7, lr}
 1528              	.LCFI45:
 1529              		.cfi_def_cfa_offset 8
 1530              		.cfi_offset 7, -8
 1531              		.cfi_offset 14, -4
 1532 0002 84B0     		sub	sp, sp, #16
 1533              	.LCFI46:
 1534              		.cfi_def_cfa_offset 24
 1535 0004 00AF     		add	r7, sp, #0
 1536              	.LCFI47:
 1537              		.cfi_def_cfa_register 7
 1538 0006 7860     		str	r0, [r7, #4]
1579:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxTCB;
1580:../../../FreeRTOS_9_0/Source/tasks.c **** 
1581:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskENTER_CRITICAL();
 1539              		.loc 1 1581 0
 1540 0008 FFF7FEFF 		bl	vPortEnterCritical
1582:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1583:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1584:../../../FreeRTOS_9_0/Source/tasks.c **** 			being suspended. */
1585:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1541              		.loc 1 1585 0
ARM GAS  /tmp/ccIgarPJ.s 			page 60


 1542 000c 7B68     		ldr	r3, [r7, #4]
 1543 000e 002B     		cmp	r3, #0
 1544 0010 02D1     		bne	.L91
 1545              		.loc 1 1585 0 is_stmt 0 discriminator 1
 1546 0012 3D4B     		ldr	r3, .L103
 1547 0014 1B68     		ldr	r3, [r3]
 1548 0016 00E0     		b	.L92
 1549              	.L91:
 1550              		.loc 1 1585 0 discriminator 2
 1551 0018 7B68     		ldr	r3, [r7, #4]
 1552              	.L92:
 1553              		.loc 1 1585 0 discriminator 4
 1554 001a FB60     		str	r3, [r7, #12]
1586:../../../FreeRTOS_9_0/Source/tasks.c **** 
1587:../../../FreeRTOS_9_0/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
 1555              		.loc 1 1587 0 is_stmt 1 discriminator 4
 1556 001c FB68     		ldr	r3, [r7, #12]
 1557 001e 1846     		mov	r0, r3
 1558 0020 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 1559 0024 0346     		mov	r3, r0
 1560 0026 2920     		movs	r0, #41
 1561 0028 1946     		mov	r1, r3
 1562 002a FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32
1588:../../../FreeRTOS_9_0/Source/tasks.c **** 
1589:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1590:../../../FreeRTOS_9_0/Source/tasks.c **** 			suspended list. */
1591:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1563              		.loc 1 1591 0 discriminator 4
 1564 002e FB68     		ldr	r3, [r7, #12]
 1565 0030 0433     		adds	r3, r3, #4
 1566 0032 1846     		mov	r0, r3
 1567 0034 FFF7FEFF 		bl	uxListRemove
 1568 0038 0346     		mov	r3, r0
 1569 003a 002B     		cmp	r3, #0
 1570 003c 15D1     		bne	.L93
1592:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1593:../../../FreeRTOS_9_0/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 1571              		.loc 1 1593 0
 1572 003e FB68     		ldr	r3, [r7, #12]
 1573 0040 DA6A     		ldr	r2, [r3, #44]
 1574 0042 3249     		ldr	r1, .L103+4
 1575 0044 1346     		mov	r3, r2
 1576 0046 9B00     		lsls	r3, r3, #2
 1577 0048 1344     		add	r3, r3, r2
 1578 004a 9B00     		lsls	r3, r3, #2
 1579 004c 0B44     		add	r3, r3, r1
 1580 004e 1B68     		ldr	r3, [r3]
 1581 0050 002B     		cmp	r3, #0
 1582 0052 0AD1     		bne	.L93
 1583              		.loc 1 1593 0 is_stmt 0 discriminator 1
 1584 0054 FB68     		ldr	r3, [r7, #12]
 1585 0056 DB6A     		ldr	r3, [r3, #44]
 1586 0058 1A46     		mov	r2, r3
 1587 005a 0123     		movs	r3, #1
 1588 005c 9340     		lsls	r3, r3, r2
 1589 005e DA43     		mvns	r2, r3
 1590 0060 2B4B     		ldr	r3, .L103+8
ARM GAS  /tmp/ccIgarPJ.s 			page 61


 1591 0062 1B68     		ldr	r3, [r3]
 1592 0064 1340     		ands	r3, r3, r2
 1593 0066 2A4A     		ldr	r2, .L103+8
 1594 0068 1360     		str	r3, [r2]
 1595              	.L93:
1594:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1595:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
1596:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1597:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1598:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1599:../../../FreeRTOS_9_0/Source/tasks.c **** 
1600:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1601:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1596              		.loc 1 1601 0 is_stmt 1
 1597 006a FB68     		ldr	r3, [r7, #12]
 1598 006c 9B6A     		ldr	r3, [r3, #40]
 1599 006e 002B     		cmp	r3, #0
 1600 0070 04D0     		beq	.L95
1602:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1603:../../../FreeRTOS_9_0/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1601              		.loc 1 1603 0
 1602 0072 FB68     		ldr	r3, [r7, #12]
 1603 0074 1833     		adds	r3, r3, #24
 1604 0076 1846     		mov	r0, r3
 1605 0078 FFF7FEFF 		bl	uxListRemove
 1606              	.L95:
1604:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1605:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
1606:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1607:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1608:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1609:../../../FreeRTOS_9_0/Source/tasks.c **** 
1610:../../../FreeRTOS_9_0/Source/tasks.c **** 			traceMOVED_TASK_TO_SUSPENDED_LIST(pxTCB);
 1607              		.loc 1 1610 0
 1608 007c FB68     		ldr	r3, [r7, #12]
 1609 007e 1846     		mov	r0, r3
 1610 0080 1B21     		movs	r1, #27
 1611 0082 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStopReady
1611:../../../FreeRTOS_9_0/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 1612              		.loc 1 1611 0
 1613 0086 FB68     		ldr	r3, [r7, #12]
 1614 0088 0433     		adds	r3, r3, #4
 1615 008a 2248     		ldr	r0, .L103+12
 1616 008c 1946     		mov	r1, r3
 1617 008e FFF7FEFF 		bl	vListInsertEnd
1612:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1613:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1618              		.loc 1 1613 0
 1619 0092 FFF7FEFF 		bl	vPortExitCritical
1614:../../../FreeRTOS_9_0/Source/tasks.c **** 
1615:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 1620              		.loc 1 1615 0
 1621 0096 204B     		ldr	r3, .L103+16
 1622 0098 1B68     		ldr	r3, [r3]
 1623 009a 002B     		cmp	r3, #0
 1624 009c 05D0     		beq	.L96
1616:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
ARM GAS  /tmp/ccIgarPJ.s 			page 62


1617:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1618:../../../FreeRTOS_9_0/Source/tasks.c **** 			task that is now in the Suspended state. */
1619:../../../FreeRTOS_9_0/Source/tasks.c **** 			taskENTER_CRITICAL();
 1625              		.loc 1 1619 0
 1626 009e FFF7FEFF 		bl	vPortEnterCritical
1620:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1621:../../../FreeRTOS_9_0/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 1627              		.loc 1 1621 0
 1628 00a2 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
1622:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1623:../../../FreeRTOS_9_0/Source/tasks.c **** 			taskEXIT_CRITICAL();
 1629              		.loc 1 1623 0
 1630 00a6 FFF7FEFF 		bl	vPortExitCritical
 1631              	.L96:
1624:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1625:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
1626:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1627:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1628:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1629:../../../FreeRTOS_9_0/Source/tasks.c **** 
1630:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 1632              		.loc 1 1630 0
 1633 00aa 174B     		ldr	r3, .L103
 1634 00ac 1B68     		ldr	r3, [r3]
 1635 00ae FA68     		ldr	r2, [r7, #12]
 1636 00b0 9A42     		cmp	r2, r3
 1637 00b2 26D1     		bne	.L90
1631:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1632:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
 1638              		.loc 1 1632 0
 1639 00b4 184B     		ldr	r3, .L103+16
 1640 00b6 1B68     		ldr	r3, [r3]
 1641 00b8 002B     		cmp	r3, #0
 1642 00ba 16D0     		beq	.L98
1633:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1634:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* The current task has just been suspended. */
1635:../../../FreeRTOS_9_0/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 1643              		.loc 1 1635 0
 1644 00bc 174B     		ldr	r3, .L103+20
 1645 00be 1B68     		ldr	r3, [r3]
 1646 00c0 002B     		cmp	r3, #0
 1647 00c2 09D0     		beq	.L99
 1648              	.LBB107:
 1649              	.LBB108:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1650              		.loc 2 237 0 discriminator 1
 1651              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1652 00c4 4FF05003 			mov r3, #80												
 1653 00c8 83F31188 		msr basepri, r3											
 1654 00cc BFF36F8F 		isb														
 1655 00d0 BFF34F8F 		dsb														
 1656              	
 1657              	@ 0 "" 2
 1658              		.thumb
 1659 00d4 BB60     		str	r3, [r7, #8]
 1660              	.L100:
 1661              	.LBE108:
ARM GAS  /tmp/ccIgarPJ.s 			page 63


 1662              	.LBE107:
 1663              		.loc 1 1635 0 discriminator 1
 1664 00d6 FEE7     		b	.L100
 1665              	.L99:
1636:../../../FreeRTOS_9_0/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1666              		.loc 1 1636 0
 1667 00d8 114B     		ldr	r3, .L103+24
 1668 00da 4FF08052 		mov	r2, #268435456
 1669 00de 1A60     		str	r2, [r3]
 1670              	@ 1636 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 1671 00e0 BFF34F8F 		dsb
 1672              	@ 0 "" 2
 1673              	@ 1636 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 1674 00e4 BFF36F8F 		isb
 1675              	@ 0 "" 2
 1676              		.thumb
 1677 00e8 0BE0     		b	.L90
 1678              	.L98:
1637:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1638:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
1639:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1640:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1641:../../../FreeRTOS_9_0/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1642:../../../FreeRTOS_9_0/Source/tasks.c **** 				must be adjusted to point to a different task. */
1643:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 1679              		.loc 1 1643 0
 1680 00ea 0A4B     		ldr	r3, .L103+12
 1681 00ec 1A68     		ldr	r2, [r3]
 1682 00ee 0D4B     		ldr	r3, .L103+28
 1683 00f0 1B68     		ldr	r3, [r3]
 1684 00f2 9A42     		cmp	r2, r3
 1685 00f4 03D1     		bne	.L102
1644:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1645:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1646:../../../FreeRTOS_9_0/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1647:../../../FreeRTOS_9_0/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1648:../../../FreeRTOS_9_0/Source/tasks.c **** 					is. */
1649:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxCurrentTCB = NULL;
 1686              		.loc 1 1649 0
 1687 00f6 044B     		ldr	r3, .L103
 1688 00f8 0022     		movs	r2, #0
 1689 00fa 1A60     		str	r2, [r3]
 1690 00fc 01E0     		b	.L90
 1691              	.L102:
1650:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1651:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
1652:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1653:../../../FreeRTOS_9_0/Source/tasks.c **** 					vTaskSwitchContext();
 1692              		.loc 1 1653 0
 1693 00fe FFF7FEFF 		bl	vTaskSwitchContext
 1694              	.L90:
1654:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1655:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1656:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1657:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
1658:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1659:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccIgarPJ.s 			page 64


1660:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1661:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 1695              		.loc 1 1661 0
 1696 0102 1037     		adds	r7, r7, #16
 1697              	.LCFI48:
 1698              		.cfi_def_cfa_offset 8
 1699 0104 BD46     		mov	sp, r7
 1700              	.LCFI49:
 1701              		.cfi_def_cfa_register 13
 1702              		@ sp needed
 1703 0106 80BD     		pop	{r7, pc}
 1704              	.L104:
 1705              		.align	2
 1706              	.L103:
 1707 0108 00000000 		.word	pxCurrentTCB
 1708 010c 00000000 		.word	pxReadyTasksLists
 1709 0110 00000000 		.word	uxTopReadyPriority
 1710 0114 00000000 		.word	xSuspendedTaskList
 1711 0118 00000000 		.word	xSchedulerRunning
 1712 011c 00000000 		.word	uxSchedulerSuspended
 1713 0120 04ED00E0 		.word	-536810236
 1714 0124 00000000 		.word	uxCurrentNumberOfTasks
 1715              		.cfi_endproc
 1716              	.LFE14:
 1718              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
 1719              		.align	2
 1720              		.thumb
 1721              		.thumb_func
 1723              	prvTaskIsTaskSuspended:
 1724              	.LFB15:
1662:../../../FreeRTOS_9_0/Source/tasks.c **** 
1663:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1664:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
1665:../../../FreeRTOS_9_0/Source/tasks.c **** 
1666:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1667:../../../FreeRTOS_9_0/Source/tasks.c **** 
1668:../../../FreeRTOS_9_0/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1669:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 1725              		.loc 1 1669 0
 1726              		.cfi_startproc
 1727              		@ args = 0, pretend = 0, frame = 24
 1728              		@ frame_needed = 1, uses_anonymous_args = 0
 1729              		@ link register save eliminated.
 1730 0000 80B4     		push	{r7}
 1731              	.LCFI50:
 1732              		.cfi_def_cfa_offset 4
 1733              		.cfi_offset 7, -4
 1734 0002 87B0     		sub	sp, sp, #28
 1735              	.LCFI51:
 1736              		.cfi_def_cfa_offset 32
 1737 0004 00AF     		add	r7, sp, #0
 1738              	.LCFI52:
 1739              		.cfi_def_cfa_register 7
 1740 0006 7860     		str	r0, [r7, #4]
1670:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 1741              		.loc 1 1670 0
 1742 0008 0023     		movs	r3, #0
ARM GAS  /tmp/ccIgarPJ.s 			page 65


 1743 000a 7B61     		str	r3, [r7, #20]
1671:../../../FreeRTOS_9_0/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 1744              		.loc 1 1671 0
 1745 000c 7B68     		ldr	r3, [r7, #4]
 1746 000e 3B61     		str	r3, [r7, #16]
1672:../../../FreeRTOS_9_0/Source/tasks.c **** 
1673:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1674:../../../FreeRTOS_9_0/Source/tasks.c **** 		section. */
1675:../../../FreeRTOS_9_0/Source/tasks.c **** 
1676:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1677:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( xTask );
 1747              		.loc 1 1677 0
 1748 0010 7B68     		ldr	r3, [r7, #4]
 1749 0012 002B     		cmp	r3, #0
 1750 0014 09D1     		bne	.L106
 1751              	.LBB109:
 1752              	.LBB110:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1753              		.loc 2 237 0 discriminator 1
 1754              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1755 0016 4FF05003 			mov r3, #80												
 1756 001a 83F31188 		msr basepri, r3											
 1757 001e BFF36F8F 		isb														
 1758 0022 BFF34F8F 		dsb														
 1759              	
 1760              	@ 0 "" 2
 1761              		.thumb
 1762 0026 FB60     		str	r3, [r7, #12]
 1763              	.L107:
 1764              	.LBE110:
 1765              	.LBE109:
 1766              		.loc 1 1677 0 discriminator 1
 1767 0028 FEE7     		b	.L107
 1768              	.L106:
1678:../../../FreeRTOS_9_0/Source/tasks.c **** 
1679:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1680:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 1769              		.loc 1 1680 0
 1770 002a 3B69     		ldr	r3, [r7, #16]
 1771 002c 5B69     		ldr	r3, [r3, #20]
 1772 002e 0F4A     		ldr	r2, .L114
 1773 0030 9342     		cmp	r3, r2
 1774 0032 01D1     		bne	.L108
 1775              		.loc 1 1680 0 is_stmt 0 discriminator 1
 1776 0034 0123     		movs	r3, #1
 1777 0036 00E0     		b	.L109
 1778              	.L108:
 1779              		.loc 1 1680 0 discriminator 2
 1780 0038 0023     		movs	r3, #0
 1781              	.L109:
 1782              		.loc 1 1680 0 discriminator 4
 1783 003a 002B     		cmp	r3, #0
 1784 003c 0FD0     		beq	.L110
1681:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1682:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1683:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 1785              		.loc 1 1683 0 is_stmt 1
ARM GAS  /tmp/ccIgarPJ.s 			page 66


 1786 003e 3B69     		ldr	r3, [r7, #16]
 1787 0040 9B6A     		ldr	r3, [r3, #40]
 1788 0042 0B4A     		ldr	r2, .L114+4
 1789 0044 9342     		cmp	r3, r2
 1790 0046 0AD0     		beq	.L110
1684:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1685:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1686:../../../FreeRTOS_9_0/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1687:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 1791              		.loc 1 1687 0
 1792 0048 3B69     		ldr	r3, [r7, #16]
 1793 004a 9B6A     		ldr	r3, [r3, #40]
 1794 004c 002B     		cmp	r3, #0
 1795 004e 01D1     		bne	.L111
 1796              		.loc 1 1687 0 is_stmt 0 discriminator 1
 1797 0050 0123     		movs	r3, #1
 1798 0052 00E0     		b	.L112
 1799              	.L111:
 1800              		.loc 1 1687 0 discriminator 2
 1801 0054 0023     		movs	r3, #0
 1802              	.L112:
 1803              		.loc 1 1687 0 discriminator 4
 1804 0056 002B     		cmp	r3, #0
 1805 0058 01D0     		beq	.L110
1688:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1689:../../../FreeRTOS_9_0/Source/tasks.c **** 					xReturn = pdTRUE;
 1806              		.loc 1 1689 0 is_stmt 1
 1807 005a 0123     		movs	r3, #1
 1808 005c 7B61     		str	r3, [r7, #20]
 1809              	.L110:
1690:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1691:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
1692:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1693:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1694:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1695:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1696:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
1697:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1698:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1699:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1700:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1701:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
1702:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1703:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1704:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1705:../../../FreeRTOS_9_0/Source/tasks.c **** 
1706:../../../FreeRTOS_9_0/Source/tasks.c **** 		return xReturn;
 1810              		.loc 1 1706 0
 1811 005e 7B69     		ldr	r3, [r7, #20]
1707:../../../FreeRTOS_9_0/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1812              		.loc 1 1707 0
 1813 0060 1846     		mov	r0, r3
 1814 0062 1C37     		adds	r7, r7, #28
 1815              	.LCFI53:
 1816              		.cfi_def_cfa_offset 4
 1817 0064 BD46     		mov	sp, r7
 1818              	.LCFI54:
ARM GAS  /tmp/ccIgarPJ.s 			page 67


 1819              		.cfi_def_cfa_register 13
 1820              		@ sp needed
 1821 0066 5DF8047B 		ldr	r7, [sp], #4
 1822              	.LCFI55:
 1823              		.cfi_restore 7
 1824              		.cfi_def_cfa_offset 0
 1825 006a 7047     		bx	lr
 1826              	.L115:
 1827              		.align	2
 1828              	.L114:
 1829 006c 00000000 		.word	xSuspendedTaskList
 1830 0070 00000000 		.word	xPendingReadyList
 1831              		.cfi_endproc
 1832              	.LFE15:
 1834              		.section	.text.vTaskResume,"ax",%progbits
 1835              		.align	2
 1836              		.global	vTaskResume
 1837              		.thumb
 1838              		.thumb_func
 1840              	vTaskResume:
 1841              	.LFB16:
1708:../../../FreeRTOS_9_0/Source/tasks.c **** 
1709:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1710:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
1711:../../../FreeRTOS_9_0/Source/tasks.c **** 
1712:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1713:../../../FreeRTOS_9_0/Source/tasks.c **** 
1714:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1715:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 1842              		.loc 1 1715 0
 1843              		.cfi_startproc
 1844              		@ args = 0, pretend = 0, frame = 16
 1845              		@ frame_needed = 1, uses_anonymous_args = 0
 1846 0000 80B5     		push	{r7, lr}
 1847              	.LCFI56:
 1848              		.cfi_def_cfa_offset 8
 1849              		.cfi_offset 7, -8
 1850              		.cfi_offset 14, -4
 1851 0002 84B0     		sub	sp, sp, #16
 1852              	.LCFI57:
 1853              		.cfi_def_cfa_offset 24
 1854 0004 00AF     		add	r7, sp, #0
 1855              	.LCFI58:
 1856              		.cfi_def_cfa_register 7
 1857 0006 7860     		str	r0, [r7, #4]
1716:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1858              		.loc 1 1716 0
 1859 0008 7B68     		ldr	r3, [r7, #4]
 1860 000a FB60     		str	r3, [r7, #12]
1717:../../../FreeRTOS_9_0/Source/tasks.c **** 
1718:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1719:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( xTaskToResume );
 1861              		.loc 1 1719 0
 1862 000c 7B68     		ldr	r3, [r7, #4]
 1863 000e 002B     		cmp	r3, #0
 1864 0010 09D1     		bne	.L117
 1865              	.LBB111:
ARM GAS  /tmp/ccIgarPJ.s 			page 68


 1866              	.LBB112:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1867              		.loc 2 237 0 discriminator 1
 1868              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1869 0012 4FF05003 			mov r3, #80												
 1870 0016 83F31188 		msr basepri, r3											
 1871 001a BFF36F8F 		isb														
 1872 001e BFF34F8F 		dsb														
 1873              	
 1874              	@ 0 "" 2
 1875              		.thumb
 1876 0022 BB60     		str	r3, [r7, #8]
 1877              	.L118:
 1878              	.LBE112:
 1879              	.LBE111:
 1880              		.loc 1 1719 0 discriminator 1
 1881 0024 FEE7     		b	.L118
 1882              	.L117:
1720:../../../FreeRTOS_9_0/Source/tasks.c **** 
1721:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1722:../../../FreeRTOS_9_0/Source/tasks.c **** 		currently executing task. */
1723:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 1883              		.loc 1 1723 0
 1884 0026 FB68     		ldr	r3, [r7, #12]
 1885 0028 002B     		cmp	r3, #0
 1886 002a 48D0     		beq	.L116
 1887              		.loc 1 1723 0 is_stmt 0 discriminator 1
 1888 002c 254B     		ldr	r3, .L121
 1889 002e 1B68     		ldr	r3, [r3]
 1890 0030 FA68     		ldr	r2, [r7, #12]
 1891 0032 9A42     		cmp	r2, r3
 1892 0034 43D0     		beq	.L116
1724:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1725:../../../FreeRTOS_9_0/Source/tasks.c **** 			taskENTER_CRITICAL();
 1893              		.loc 1 1725 0 is_stmt 1
 1894 0036 FFF7FEFF 		bl	vPortEnterCritical
1726:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1727:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 1895              		.loc 1 1727 0
 1896 003a F868     		ldr	r0, [r7, #12]
 1897 003c FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1898 0040 0346     		mov	r3, r0
 1899 0042 002B     		cmp	r3, #0
 1900 0044 39D0     		beq	.L120
1728:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1729:../../../FreeRTOS_9_0/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
 1901              		.loc 1 1729 0
 1902 0046 FB68     		ldr	r3, [r7, #12]
 1903 0048 1846     		mov	r0, r3
 1904 004a FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 1905 004e 0346     		mov	r3, r0
 1906 0050 2A20     		movs	r0, #42
 1907 0052 1946     		mov	r1, r3
 1908 0054 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32
1730:../../../FreeRTOS_9_0/Source/tasks.c **** 
1731:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* As we are in a critical section we can access the ready
1732:../../../FreeRTOS_9_0/Source/tasks.c **** 					lists even if the scheduler is suspended. */
ARM GAS  /tmp/ccIgarPJ.s 			page 69


1733:../../../FreeRTOS_9_0/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 1909              		.loc 1 1733 0
 1910 0058 FB68     		ldr	r3, [r7, #12]
 1911 005a 0433     		adds	r3, r3, #4
 1912 005c 1846     		mov	r0, r3
 1913 005e FFF7FEFF 		bl	uxListRemove
1734:../../../FreeRTOS_9_0/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1914              		.loc 1 1734 0
 1915 0062 FB68     		ldr	r3, [r7, #12]
 1916 0064 1846     		mov	r0, r3
 1917 0066 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStartReady
 1918 006a FB68     		ldr	r3, [r7, #12]
 1919 006c DB6A     		ldr	r3, [r3, #44]
 1920 006e 1A46     		mov	r2, r3
 1921 0070 0123     		movs	r3, #1
 1922 0072 03FA02F2 		lsl	r2, r3, r2
 1923 0076 144B     		ldr	r3, .L121+4
 1924 0078 1B68     		ldr	r3, [r3]
 1925 007a 1343     		orrs	r3, r3, r2
 1926 007c 124A     		ldr	r2, .L121+4
 1927 007e 1360     		str	r3, [r2]
 1928 0080 FB68     		ldr	r3, [r7, #12]
 1929 0082 DA6A     		ldr	r2, [r3, #44]
 1930 0084 1346     		mov	r3, r2
 1931 0086 9B00     		lsls	r3, r3, #2
 1932 0088 1344     		add	r3, r3, r2
 1933 008a 9B00     		lsls	r3, r3, #2
 1934 008c 0F4A     		ldr	r2, .L121+8
 1935 008e 1A44     		add	r2, r2, r3
 1936 0090 FB68     		ldr	r3, [r7, #12]
 1937 0092 0433     		adds	r3, r3, #4
 1938 0094 1046     		mov	r0, r2
 1939 0096 1946     		mov	r1, r3
 1940 0098 FFF7FEFF 		bl	vListInsertEnd
1735:../../../FreeRTOS_9_0/Source/tasks.c **** 
1736:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* We may have just resumed a higher priority task. */
1737:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1941              		.loc 1 1737 0
 1942 009c FB68     		ldr	r3, [r7, #12]
 1943 009e DA6A     		ldr	r2, [r3, #44]
 1944 00a0 084B     		ldr	r3, .L121
 1945 00a2 1B68     		ldr	r3, [r3]
 1946 00a4 DB6A     		ldr	r3, [r3, #44]
 1947 00a6 9A42     		cmp	r2, r3
 1948 00a8 07D3     		bcc	.L120
1738:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
1739:../../../FreeRTOS_9_0/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1740:../../../FreeRTOS_9_0/Source/tasks.c **** 						but will leave the lists in the correct state for the
1741:../../../FreeRTOS_9_0/Source/tasks.c **** 						next yield. */
1742:../../../FreeRTOS_9_0/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
 1949              		.loc 1 1742 0
 1950 00aa 094B     		ldr	r3, .L121+12
 1951 00ac 4FF08052 		mov	r2, #268435456
 1952 00b0 1A60     		str	r2, [r3]
 1953              	@ 1742 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 1954 00b2 BFF34F8F 		dsb
 1955              	@ 0 "" 2
ARM GAS  /tmp/ccIgarPJ.s 			page 70


 1956              	@ 1742 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 1957 00b6 BFF36F8F 		isb
 1958              	@ 0 "" 2
 1959              		.thumb
 1960              	.L120:
1743:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
1744:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
1745:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
1746:../../../FreeRTOS_9_0/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1747:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
1748:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1749:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
1750:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1751:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1752:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1753:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1754:../../../FreeRTOS_9_0/Source/tasks.c **** 			taskEXIT_CRITICAL();
 1961              		.loc 1 1754 0
 1962 00ba FFF7FEFF 		bl	vPortExitCritical
 1963              	.L116:
1755:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1756:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
1757:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1758:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1759:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1760:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 1964              		.loc 1 1760 0
 1965 00be 1037     		adds	r7, r7, #16
 1966              	.LCFI59:
 1967              		.cfi_def_cfa_offset 8
 1968 00c0 BD46     		mov	sp, r7
 1969              	.LCFI60:
 1970              		.cfi_def_cfa_register 13
 1971              		@ sp needed
 1972 00c2 80BD     		pop	{r7, pc}
 1973              	.L122:
 1974              		.align	2
 1975              	.L121:
 1976 00c4 00000000 		.word	pxCurrentTCB
 1977 00c8 00000000 		.word	uxTopReadyPriority
 1978 00cc 00000000 		.word	pxReadyTasksLists
 1979 00d0 04ED00E0 		.word	-536810236
 1980              		.cfi_endproc
 1981              	.LFE16:
 1983              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1984              		.align	2
 1985              		.global	xTaskResumeFromISR
 1986              		.thumb
 1987              		.thumb_func
 1989              	xTaskResumeFromISR:
 1990              	.LFB17:
1761:../../../FreeRTOS_9_0/Source/tasks.c **** 
1762:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1763:../../../FreeRTOS_9_0/Source/tasks.c **** 
1764:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
1765:../../../FreeRTOS_9_0/Source/tasks.c **** 
1766:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
ARM GAS  /tmp/ccIgarPJ.s 			page 71


1767:../../../FreeRTOS_9_0/Source/tasks.c **** 
1768:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1769:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 1991              		.loc 1 1769 0
 1992              		.cfi_startproc
 1993              		@ args = 0, pretend = 0, frame = 40
 1994              		@ frame_needed = 1, uses_anonymous_args = 0
 1995 0000 80B5     		push	{r7, lr}
 1996              	.LCFI61:
 1997              		.cfi_def_cfa_offset 8
 1998              		.cfi_offset 7, -8
 1999              		.cfi_offset 14, -4
 2000 0002 8AB0     		sub	sp, sp, #40
 2001              	.LCFI62:
 2002              		.cfi_def_cfa_offset 48
 2003 0004 00AF     		add	r7, sp, #0
 2004              	.LCFI63:
 2005              		.cfi_def_cfa_register 7
 2006 0006 7860     		str	r0, [r7, #4]
1770:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 2007              		.loc 1 1770 0
 2008 0008 0023     		movs	r3, #0
 2009 000a 7B62     		str	r3, [r7, #36]
1771:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 2010              		.loc 1 1771 0
 2011 000c 7B68     		ldr	r3, [r7, #4]
 2012 000e 3B62     		str	r3, [r7, #32]
1772:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1773:../../../FreeRTOS_9_0/Source/tasks.c **** 
1774:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( xTaskToResume );
 2013              		.loc 1 1774 0
 2014 0010 7B68     		ldr	r3, [r7, #4]
 2015 0012 002B     		cmp	r3, #0
 2016 0014 09D1     		bne	.L124
 2017              	.LBB113:
 2018              	.LBB114:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2019              		.loc 2 237 0 discriminator 1
 2020              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2021 0016 4FF05003 			mov r3, #80												
 2022 001a 83F31188 		msr basepri, r3											
 2023 001e BFF36F8F 		isb														
 2024 0022 BFF34F8F 		dsb														
 2025              	
 2026              	@ 0 "" 2
 2027              		.thumb
 2028 0026 BB61     		str	r3, [r7, #24]
 2029              	.L125:
 2030              	.LBE114:
 2031              	.LBE113:
 2032              		.loc 1 1774 0 discriminator 1
 2033 0028 FEE7     		b	.L125
 2034              	.L124:
1775:../../../FreeRTOS_9_0/Source/tasks.c **** 
1776:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1777:../../../FreeRTOS_9_0/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1778:../../../FreeRTOS_9_0/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
ARM GAS  /tmp/ccIgarPJ.s 			page 72


1779:../../../FreeRTOS_9_0/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1780:../../../FreeRTOS_9_0/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1781:../../../FreeRTOS_9_0/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1782:../../../FreeRTOS_9_0/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1783:../../../FreeRTOS_9_0/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1784:../../../FreeRTOS_9_0/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1785:../../../FreeRTOS_9_0/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1786:../../../FreeRTOS_9_0/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1787:../../../FreeRTOS_9_0/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1788:../../../FreeRTOS_9_0/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1789:../../../FreeRTOS_9_0/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1790:../../../FreeRTOS_9_0/Source/tasks.c **** 		provided on the following link:
1791:../../../FreeRTOS_9_0/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1792:../../../FreeRTOS_9_0/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2035              		.loc 1 1792 0
 2036 002a FFF7FEFF 		bl	vPortValidateInterruptPriority
 2037              	.LBB115:
 2038              	.LBB116:
 253:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2039              		.loc 2 253 0
 2040              	@ 253 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2041 002e EFF31182 			mrs r2, basepri											
 2042 0032 4FF05003 		mov r3, #80												
 2043 0036 83F31188 		msr basepri, r3											
 2044 003a BFF36F8F 		isb														
 2045 003e BFF34F8F 		dsb														
 2046              	
 2047              	@ 0 "" 2
 2048              		.thumb
 2049 0042 7A61     		str	r2, [r7, #20]
 2050 0044 3B61     		str	r3, [r7, #16]
 265:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 2051              		.loc 2 265 0
 2052 0046 7B69     		ldr	r3, [r7, #20]
 2053              	.LBE116:
 2054              	.LBE115:
1793:../../../FreeRTOS_9_0/Source/tasks.c **** 
1794:../../../FreeRTOS_9_0/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 2055              		.loc 1 1794 0
 2056 0048 FB61     		str	r3, [r7, #28]
1795:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1796:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 2057              		.loc 1 1796 0
 2058 004a 386A     		ldr	r0, [r7, #32]
 2059 004c FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2060 0050 0346     		mov	r3, r0
 2061 0052 002B     		cmp	r3, #0
 2062 0054 3ED0     		beq	.L127
1797:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1798:../../../FreeRTOS_9_0/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
 2063              		.loc 1 1798 0
 2064 0056 3B6A     		ldr	r3, [r7, #32]
 2065 0058 1846     		mov	r0, r3
 2066 005a FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 2067 005e 0346     		mov	r3, r0
 2068 0060 2B20     		movs	r0, #43
 2069 0062 1946     		mov	r1, r3
ARM GAS  /tmp/ccIgarPJ.s 			page 73


 2070 0064 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32
1799:../../../FreeRTOS_9_0/Source/tasks.c **** 
1800:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1801:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2071              		.loc 1 1801 0
 2072 0068 1F4B     		ldr	r3, .L132
 2073 006a 1B68     		ldr	r3, [r3]
 2074 006c 002B     		cmp	r3, #0
 2075 006e 2BD1     		bne	.L128
1802:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1803:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1804:../../../FreeRTOS_9_0/Source/tasks.c **** 					suspended list to the ready list directly. */
1805:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2076              		.loc 1 1805 0
 2077 0070 3B6A     		ldr	r3, [r7, #32]
 2078 0072 DA6A     		ldr	r2, [r3, #44]
 2079 0074 1D4B     		ldr	r3, .L132+4
 2080 0076 1B68     		ldr	r3, [r3]
 2081 0078 DB6A     		ldr	r3, [r3, #44]
 2082 007a 9A42     		cmp	r2, r3
 2083 007c 01D3     		bcc	.L129
1806:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
1807:../../../FreeRTOS_9_0/Source/tasks.c **** 						xYieldRequired = pdTRUE;
 2084              		.loc 1 1807 0
 2085 007e 0123     		movs	r3, #1
 2086 0080 7B62     		str	r3, [r7, #36]
 2087              	.L129:
1808:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
1809:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
1810:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
1811:../../../FreeRTOS_9_0/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1812:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
1813:../../../FreeRTOS_9_0/Source/tasks.c **** 
1814:../../../FreeRTOS_9_0/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2088              		.loc 1 1814 0
 2089 0082 3B6A     		ldr	r3, [r7, #32]
 2090 0084 0433     		adds	r3, r3, #4
 2091 0086 1846     		mov	r0, r3
 2092 0088 FFF7FEFF 		bl	uxListRemove
1815:../../../FreeRTOS_9_0/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2093              		.loc 1 1815 0
 2094 008c 3B6A     		ldr	r3, [r7, #32]
 2095 008e 1846     		mov	r0, r3
 2096 0090 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStartReady
 2097 0094 3B6A     		ldr	r3, [r7, #32]
 2098 0096 DB6A     		ldr	r3, [r3, #44]
 2099 0098 1A46     		mov	r2, r3
 2100 009a 0123     		movs	r3, #1
 2101 009c 03FA02F2 		lsl	r2, r3, r2
 2102 00a0 134B     		ldr	r3, .L132+8
 2103 00a2 1B68     		ldr	r3, [r3]
 2104 00a4 1343     		orrs	r3, r3, r2
 2105 00a6 124A     		ldr	r2, .L132+8
 2106 00a8 1360     		str	r3, [r2]
 2107 00aa 3B6A     		ldr	r3, [r7, #32]
 2108 00ac DA6A     		ldr	r2, [r3, #44]
 2109 00ae 1346     		mov	r3, r2
ARM GAS  /tmp/ccIgarPJ.s 			page 74


 2110 00b0 9B00     		lsls	r3, r3, #2
 2111 00b2 1344     		add	r3, r3, r2
 2112 00b4 9B00     		lsls	r3, r3, #2
 2113 00b6 0F4A     		ldr	r2, .L132+12
 2114 00b8 1A44     		add	r2, r2, r3
 2115 00ba 3B6A     		ldr	r3, [r7, #32]
 2116 00bc 0433     		adds	r3, r3, #4
 2117 00be 1046     		mov	r0, r2
 2118 00c0 1946     		mov	r1, r3
 2119 00c2 FFF7FEFF 		bl	vListInsertEnd
 2120 00c6 05E0     		b	.L127
 2121              	.L128:
1816:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1817:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
1818:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1819:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1820:../../../FreeRTOS_9_0/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1821:../../../FreeRTOS_9_0/Source/tasks.c **** 					unsuspended. */
1822:../../../FreeRTOS_9_0/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 2122              		.loc 1 1822 0
 2123 00c8 3B6A     		ldr	r3, [r7, #32]
 2124 00ca 1833     		adds	r3, r3, #24
 2125 00cc 0A48     		ldr	r0, .L132+16
 2126 00ce 1946     		mov	r1, r3
 2127 00d0 FFF7FEFF 		bl	vListInsertEnd
 2128              	.L127:
 2129 00d4 FB69     		ldr	r3, [r7, #28]
 2130 00d6 FB60     		str	r3, [r7, #12]
 2131              	.LBB117:
 2132              	.LBB118:
 2133              		.loc 2 271 0
 2134 00d8 FB68     		ldr	r3, [r7, #12]
 2135              	@ 271 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2136 00da 83F31188 			msr basepri, r3	
 2137              	@ 0 "" 2
 2138              		.thumb
 2139              	.LBE118:
 2140              	.LBE117:
1823:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1824:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1825:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
1826:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1827:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1828:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1829:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1830:../../../FreeRTOS_9_0/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1831:../../../FreeRTOS_9_0/Source/tasks.c **** 
1832:../../../FreeRTOS_9_0/Source/tasks.c **** 		return xYieldRequired;
 2141              		.loc 1 1832 0
 2142 00de 7B6A     		ldr	r3, [r7, #36]
1833:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 2143              		.loc 1 1833 0
 2144 00e0 1846     		mov	r0, r3
 2145 00e2 2837     		adds	r7, r7, #40
 2146              	.LCFI64:
 2147              		.cfi_def_cfa_offset 8
 2148 00e4 BD46     		mov	sp, r7
ARM GAS  /tmp/ccIgarPJ.s 			page 75


 2149              	.LCFI65:
 2150              		.cfi_def_cfa_register 13
 2151              		@ sp needed
 2152 00e6 80BD     		pop	{r7, pc}
 2153              	.L133:
 2154              		.align	2
 2155              	.L132:
 2156 00e8 00000000 		.word	uxSchedulerSuspended
 2157 00ec 00000000 		.word	pxCurrentTCB
 2158 00f0 00000000 		.word	uxTopReadyPriority
 2159 00f4 00000000 		.word	pxReadyTasksLists
 2160 00f8 00000000 		.word	xPendingReadyList
 2161              		.cfi_endproc
 2162              	.LFE17:
 2164              		.section	.rodata
 2165              		.align	2
 2166              	.LC0:
 2167 0000 49444C45 		.ascii	"IDLE\000"
 2167      00
 2168              		.section	.text.vTaskStartScheduler,"ax",%progbits
 2169              		.align	2
 2170              		.global	vTaskStartScheduler
 2171              		.thumb
 2172              		.thumb_func
 2174              	vTaskStartScheduler:
 2175              	.LFB18:
1834:../../../FreeRTOS_9_0/Source/tasks.c **** 
1835:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1836:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
1837:../../../FreeRTOS_9_0/Source/tasks.c **** 
1838:../../../FreeRTOS_9_0/Source/tasks.c **** void vTaskStartScheduler( void )
1839:../../../FreeRTOS_9_0/Source/tasks.c **** {
 2176              		.loc 1 1839 0
 2177              		.cfi_startproc
 2178              		@ args = 0, pretend = 0, frame = 16
 2179              		@ frame_needed = 1, uses_anonymous_args = 0
 2180 0000 80B5     		push	{r7, lr}
 2181              	.LCFI66:
 2182              		.cfi_def_cfa_offset 8
 2183              		.cfi_offset 7, -8
 2184              		.cfi_offset 14, -4
 2185 0002 86B0     		sub	sp, sp, #24
 2186              	.LCFI67:
 2187              		.cfi_def_cfa_offset 32
 2188 0004 02AF     		add	r7, sp, #8
 2189              	.LCFI68:
 2190              		.cfi_def_cfa 7, 24
1840:../../../FreeRTOS_9_0/Source/tasks.c **** BaseType_t xReturn;
1841:../../../FreeRTOS_9_0/Source/tasks.c **** 
1842:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1843:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1844:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
1845:../../../FreeRTOS_9_0/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1846:../../../FreeRTOS_9_0/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1847:../../../FreeRTOS_9_0/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1848:../../../FreeRTOS_9_0/Source/tasks.c **** 
1849:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
ARM GAS  /tmp/ccIgarPJ.s 			page 76


1850:../../../FreeRTOS_9_0/Source/tasks.c **** 		address of the RAM then create the idle task. */
1851:../../../FreeRTOS_9_0/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1852:../../../FreeRTOS_9_0/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1853:../../../FreeRTOS_9_0/Source/tasks.c **** 												"IDLE",
1854:../../../FreeRTOS_9_0/Source/tasks.c **** 												ulIdleTaskStackSize,
1855:../../../FreeRTOS_9_0/Source/tasks.c **** 												( void * ) NULL,
1856:../../../FreeRTOS_9_0/Source/tasks.c **** 												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1857:../../../FreeRTOS_9_0/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1858:../../../FreeRTOS_9_0/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1859:../../../FreeRTOS_9_0/Source/tasks.c **** 
1860:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1861:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1862:../../../FreeRTOS_9_0/Source/tasks.c **** 			xReturn = pdPASS;
1863:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1864:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
1865:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1866:../../../FreeRTOS_9_0/Source/tasks.c **** 			xReturn = pdFAIL;
1867:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1868:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
1869:../../../FreeRTOS_9_0/Source/tasks.c **** 	#else
1870:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
1871:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1872:../../../FreeRTOS_9_0/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
 2191              		.loc 1 1872 0
 2192 0006 0023     		movs	r3, #0
 2193 0008 0093     		str	r3, [sp]
 2194 000a 194B     		ldr	r3, .L138
 2195 000c 0193     		str	r3, [sp, #4]
 2196 000e 1948     		ldr	r0, .L138+4
 2197 0010 1949     		ldr	r1, .L138+8
 2198 0012 8022     		movs	r2, #128
 2199 0014 0023     		movs	r3, #0
 2200 0016 FFF7FEFF 		bl	xTaskCreate
 2201 001a F860     		str	r0, [r7, #12]
1873:../../../FreeRTOS_9_0/Source/tasks.c **** 								"IDLE", configMINIMAL_STACK_SIZE,
1874:../../../FreeRTOS_9_0/Source/tasks.c **** 								( void * ) NULL,
1875:../../../FreeRTOS_9_0/Source/tasks.c **** 								( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1876:../../../FreeRTOS_9_0/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
1877:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
1878:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
1879:../../../FreeRTOS_9_0/Source/tasks.c **** 
1880:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1881:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
1882:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xReturn == pdPASS )
1883:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1884:../../../FreeRTOS_9_0/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1885:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1886:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
1887:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1888:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1889:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1890:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
1891:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
1892:../../../FreeRTOS_9_0/Source/tasks.c **** 
1893:../../../FreeRTOS_9_0/Source/tasks.c **** 	if( xReturn == pdPASS )
 2202              		.loc 1 1893 0
 2203 001c FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccIgarPJ.s 			page 77


 2204 001e 012B     		cmp	r3, #1
 2205 0020 15D1     		bne	.L135
 2206              	.LBB119:
 2207              	.LBB120:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2208              		.loc 2 237 0
 2209              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2210 0022 4FF05003 			mov r3, #80												
 2211 0026 83F31188 		msr basepri, r3											
 2212 002a BFF36F8F 		isb														
 2213 002e BFF34F8F 		dsb														
 2214              	
 2215              	@ 0 "" 2
 2216              		.thumb
 2217 0032 BB60     		str	r3, [r7, #8]
 2218              	.LBE120:
 2219              	.LBE119:
1894:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
1895:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1896:../../../FreeRTOS_9_0/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1897:../../../FreeRTOS_9_0/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1898:../../../FreeRTOS_9_0/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1899:../../../FreeRTOS_9_0/Source/tasks.c **** 		starts to run. */
1900:../../../FreeRTOS_9_0/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
1901:../../../FreeRTOS_9_0/Source/tasks.c **** 
1902:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1903:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1904:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1905:../../../FreeRTOS_9_0/Source/tasks.c **** 			structure specific to the task that will run first. */
1906:../../../FreeRTOS_9_0/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1907:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1908:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1909:../../../FreeRTOS_9_0/Source/tasks.c **** 
1910:../../../FreeRTOS_9_0/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 2220              		.loc 1 1910 0
 2221 0034 114B     		ldr	r3, .L138+12
 2222 0036 4FF0FF32 		mov	r2, #-1
 2223 003a 1A60     		str	r2, [r3]
1911:../../../FreeRTOS_9_0/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2224              		.loc 1 1911 0
 2225 003c 104B     		ldr	r3, .L138+16
 2226 003e 0122     		movs	r2, #1
 2227 0040 1A60     		str	r2, [r3]
1912:../../../FreeRTOS_9_0/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 2228              		.loc 1 1912 0
 2229 0042 104B     		ldr	r3, .L138+20
 2230 0044 0022     		movs	r2, #0
 2231 0046 1A60     		str	r2, [r3]
1913:../../../FreeRTOS_9_0/Source/tasks.c **** 
1914:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1915:../../../FreeRTOS_9_0/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1916:../../../FreeRTOS_9_0/Source/tasks.c **** 		the run time counter time base. */
1917:../../../FreeRTOS_9_0/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1918:../../../FreeRTOS_9_0/Source/tasks.c **** 
1919:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1920:../../../FreeRTOS_9_0/Source/tasks.c **** 		portable interface. */
1921:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
ARM GAS  /tmp/ccIgarPJ.s 			page 78


 2232              		.loc 1 1921 0
 2233 0048 FFF7FEFF 		bl	xPortStartScheduler
 2234 004c 0DE0     		b	.L134
 2235              	.L135:
1922:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1923:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1924:../../../FreeRTOS_9_0/Source/tasks.c **** 			function will not return. */
1925:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1926:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
1927:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1928:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1929:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1930:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
1931:../../../FreeRTOS_9_0/Source/tasks.c **** 	else
1932:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
1933:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
1934:../../../FreeRTOS_9_0/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
1935:../../../FreeRTOS_9_0/Source/tasks.c **** 		or the timer task. */
1936:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 2236              		.loc 1 1936 0
 2237 004e FB68     		ldr	r3, [r7, #12]
 2238 0050 B3F1FF3F 		cmp	r3, #-1
 2239 0054 09D1     		bne	.L134
 2240              	.LBB121:
 2241              	.LBB122:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2242              		.loc 2 237 0 discriminator 1
 2243              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2244 0056 4FF05003 			mov r3, #80												
 2245 005a 83F31188 		msr basepri, r3											
 2246 005e BFF36F8F 		isb														
 2247 0062 BFF34F8F 		dsb														
 2248              	
 2249              	@ 0 "" 2
 2250              		.thumb
 2251 0066 7B60     		str	r3, [r7, #4]
 2252              	.L137:
 2253              	.LBE122:
 2254              	.LBE121:
 2255              		.loc 1 1936 0 discriminator 2
 2256 0068 FEE7     		b	.L137
 2257              	.L134:
1937:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
1938:../../../FreeRTOS_9_0/Source/tasks.c **** 
1939:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
1940:../../../FreeRTOS_9_0/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
1941:../../../FreeRTOS_9_0/Source/tasks.c **** 	( void ) xIdleTaskHandle;
1942:../../../FreeRTOS_9_0/Source/tasks.c **** }
 2258              		.loc 1 1942 0
 2259 006a 1037     		adds	r7, r7, #16
 2260              	.LCFI69:
 2261              		.cfi_def_cfa_offset 8
 2262 006c BD46     		mov	sp, r7
 2263              	.LCFI70:
 2264              		.cfi_def_cfa_register 13
 2265              		@ sp needed
 2266 006e 80BD     		pop	{r7, pc}
ARM GAS  /tmp/ccIgarPJ.s 			page 79


 2267              	.L139:
 2268              		.align	2
 2269              	.L138:
 2270 0070 00000000 		.word	xIdleTaskHandle
 2271 0074 00000000 		.word	prvIdleTask
 2272 0078 00000000 		.word	.LC0
 2273 007c 00000000 		.word	xNextTaskUnblockTime
 2274 0080 00000000 		.word	xSchedulerRunning
 2275 0084 00000000 		.word	xTickCount
 2276              		.cfi_endproc
 2277              	.LFE18:
 2279              		.section	.text.vTaskEndScheduler,"ax",%progbits
 2280              		.align	2
 2281              		.global	vTaskEndScheduler
 2282              		.thumb
 2283              		.thumb_func
 2285              	vTaskEndScheduler:
 2286              	.LFB19:
1943:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
1944:../../../FreeRTOS_9_0/Source/tasks.c **** 
1945:../../../FreeRTOS_9_0/Source/tasks.c **** void vTaskEndScheduler( void )
1946:../../../FreeRTOS_9_0/Source/tasks.c **** {
 2287              		.loc 1 1946 0
 2288              		.cfi_startproc
 2289              		@ args = 0, pretend = 0, frame = 8
 2290              		@ frame_needed = 1, uses_anonymous_args = 0
 2291 0000 80B5     		push	{r7, lr}
 2292              	.LCFI71:
 2293              		.cfi_def_cfa_offset 8
 2294              		.cfi_offset 7, -8
 2295              		.cfi_offset 14, -4
 2296 0002 82B0     		sub	sp, sp, #8
 2297              	.LCFI72:
 2298              		.cfi_def_cfa_offset 16
 2299 0004 00AF     		add	r7, sp, #0
 2300              	.LCFI73:
 2301              		.cfi_def_cfa_register 7
 2302              	.LBB123:
 2303              	.LBB124:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2304              		.loc 2 237 0
 2305              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2306 0006 4FF05003 			mov r3, #80												
 2307 000a 83F31188 		msr basepri, r3											
 2308 000e BFF36F8F 		isb														
 2309 0012 BFF34F8F 		dsb														
 2310              	
 2311              	@ 0 "" 2
 2312              		.thumb
 2313 0016 7B60     		str	r3, [r7, #4]
 2314              	.LBE124:
 2315              	.LBE123:
1947:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
1948:../../../FreeRTOS_9_0/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
1949:../../../FreeRTOS_9_0/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
1950:../../../FreeRTOS_9_0/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
1951:../../../FreeRTOS_9_0/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
ARM GAS  /tmp/ccIgarPJ.s 			page 80


 2316              		.loc 1 1951 0
 2317 0018 034B     		ldr	r3, .L141
 2318 001a 0022     		movs	r2, #0
 2319 001c 1A60     		str	r2, [r3]
1952:../../../FreeRTOS_9_0/Source/tasks.c **** 	vPortEndScheduler();
 2320              		.loc 1 1952 0
 2321 001e FFF7FEFF 		bl	vPortEndScheduler
1953:../../../FreeRTOS_9_0/Source/tasks.c **** }
 2322              		.loc 1 1953 0
 2323 0022 0837     		adds	r7, r7, #8
 2324              	.LCFI74:
 2325              		.cfi_def_cfa_offset 8
 2326 0024 BD46     		mov	sp, r7
 2327              	.LCFI75:
 2328              		.cfi_def_cfa_register 13
 2329              		@ sp needed
 2330 0026 80BD     		pop	{r7, pc}
 2331              	.L142:
 2332              		.align	2
 2333              	.L141:
 2334 0028 00000000 		.word	xSchedulerRunning
 2335              		.cfi_endproc
 2336              	.LFE19:
 2338              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2339              		.align	2
 2340              		.global	vTaskSuspendAll
 2341              		.thumb
 2342              		.thumb_func
 2344              	vTaskSuspendAll:
 2345              	.LFB20:
1954:../../../FreeRTOS_9_0/Source/tasks.c **** /*----------------------------------------------------------*/
1955:../../../FreeRTOS_9_0/Source/tasks.c **** 
1956:../../../FreeRTOS_9_0/Source/tasks.c **** void vTaskSuspendAll( void )
1957:../../../FreeRTOS_9_0/Source/tasks.c **** {
 2346              		.loc 1 1957 0
 2347              		.cfi_startproc
 2348              		@ args = 0, pretend = 0, frame = 0
 2349              		@ frame_needed = 1, uses_anonymous_args = 0
 2350              		@ link register save eliminated.
 2351 0000 80B4     		push	{r7}
 2352              	.LCFI76:
 2353              		.cfi_def_cfa_offset 4
 2354              		.cfi_offset 7, -4
 2355 0002 00AF     		add	r7, sp, #0
 2356              	.LCFI77:
 2357              		.cfi_def_cfa_register 7
1958:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
1959:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
1960:../../../FreeRTOS_9_0/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
1961:../../../FreeRTOS_9_0/Source/tasks.c **** 	http://goo.gl/wu4acr */
1962:../../../FreeRTOS_9_0/Source/tasks.c **** 	++uxSchedulerSuspended;
 2358              		.loc 1 1962 0
 2359 0004 044B     		ldr	r3, .L144
 2360 0006 1B68     		ldr	r3, [r3]
 2361 0008 0133     		adds	r3, r3, #1
 2362 000a 034A     		ldr	r2, .L144
 2363 000c 1360     		str	r3, [r2]
ARM GAS  /tmp/ccIgarPJ.s 			page 81


1963:../../../FreeRTOS_9_0/Source/tasks.c **** }
 2364              		.loc 1 1963 0
 2365 000e BD46     		mov	sp, r7
 2366              	.LCFI78:
 2367              		.cfi_def_cfa_register 13
 2368              		@ sp needed
 2369 0010 5DF8047B 		ldr	r7, [sp], #4
 2370              	.LCFI79:
 2371              		.cfi_restore 7
 2372              		.cfi_def_cfa_offset 0
 2373 0014 7047     		bx	lr
 2374              	.L145:
 2375 0016 00BF     		.align	2
 2376              	.L144:
 2377 0018 00000000 		.word	uxSchedulerSuspended
 2378              		.cfi_endproc
 2379              	.LFE20:
 2381              		.section	.text.xTaskResumeAll,"ax",%progbits
 2382              		.align	2
 2383              		.global	xTaskResumeAll
 2384              		.thumb
 2385              		.thumb_func
 2387              	xTaskResumeAll:
 2388              	.LFB21:
1964:../../../FreeRTOS_9_0/Source/tasks.c **** /*----------------------------------------------------------*/
1965:../../../FreeRTOS_9_0/Source/tasks.c **** 
1966:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1967:../../../FreeRTOS_9_0/Source/tasks.c **** 
1968:../../../FreeRTOS_9_0/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
1969:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
1970:../../../FreeRTOS_9_0/Source/tasks.c **** 	TickType_t xReturn;
1971:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
1972:../../../FreeRTOS_9_0/Source/tasks.c **** 
1973:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
1974:../../../FreeRTOS_9_0/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
1975:../../../FreeRTOS_9_0/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
1976:../../../FreeRTOS_9_0/Source/tasks.c **** 		running. */
1977:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
1978:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1979:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
1980:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1981:../../../FreeRTOS_9_0/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
1982:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1983:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1984:../../../FreeRTOS_9_0/Source/tasks.c **** 		#else
1985:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1986:../../../FreeRTOS_9_0/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
1987:../../../FreeRTOS_9_0/Source/tasks.c **** 
1988:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
1989:../../../FreeRTOS_9_0/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
1990:../../../FreeRTOS_9_0/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
1991:../../../FreeRTOS_9_0/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
1992:../../../FreeRTOS_9_0/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
1993:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
1994:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1995:../../../FreeRTOS_9_0/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
1996:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
ARM GAS  /tmp/ccIgarPJ.s 			page 82


1997:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1998:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif
1999:../../../FreeRTOS_9_0/Source/tasks.c **** 
2000:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2001:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2002:../../../FreeRTOS_9_0/Source/tasks.c **** 			xReturn = 0;
2003:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2004:../../../FreeRTOS_9_0/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2005:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2006:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2007:../../../FreeRTOS_9_0/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2008:../../../FreeRTOS_9_0/Source/tasks.c **** 			processed. */
2009:../../../FreeRTOS_9_0/Source/tasks.c **** 			xReturn = 0;
2010:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2011:../../../FreeRTOS_9_0/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2012:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2013:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2014:../../../FreeRTOS_9_0/Source/tasks.c **** 			idle priority.  This path can only be reached if
2015:../../../FreeRTOS_9_0/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2016:../../../FreeRTOS_9_0/Source/tasks.c **** 			xReturn = 0;
2017:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2018:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
2019:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2020:../../../FreeRTOS_9_0/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2021:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2022:../../../FreeRTOS_9_0/Source/tasks.c **** 
2023:../../../FreeRTOS_9_0/Source/tasks.c **** 		return xReturn;
2024:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2025:../../../FreeRTOS_9_0/Source/tasks.c **** 
2026:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2027:../../../FreeRTOS_9_0/Source/tasks.c **** /*----------------------------------------------------------*/
2028:../../../FreeRTOS_9_0/Source/tasks.c **** 
2029:../../../FreeRTOS_9_0/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2030:../../../FreeRTOS_9_0/Source/tasks.c **** {
 2389              		.loc 1 2030 0
 2390              		.cfi_startproc
 2391              		@ args = 0, pretend = 0, frame = 16
 2392              		@ frame_needed = 1, uses_anonymous_args = 0
 2393 0000 80B5     		push	{r7, lr}
 2394              	.LCFI80:
 2395              		.cfi_def_cfa_offset 8
 2396              		.cfi_offset 7, -8
 2397              		.cfi_offset 14, -4
 2398 0002 84B0     		sub	sp, sp, #16
 2399              	.LCFI81:
 2400              		.cfi_def_cfa_offset 24
 2401 0004 00AF     		add	r7, sp, #0
 2402              	.LCFI82:
 2403              		.cfi_def_cfa_register 7
2031:../../../FreeRTOS_9_0/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2404              		.loc 1 2031 0
 2405 0006 0023     		movs	r3, #0
 2406 0008 FB60     		str	r3, [r7, #12]
2032:../../../FreeRTOS_9_0/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2407              		.loc 1 2032 0
 2408 000a 0023     		movs	r3, #0
 2409 000c BB60     		str	r3, [r7, #8]
ARM GAS  /tmp/ccIgarPJ.s 			page 83


2033:../../../FreeRTOS_9_0/Source/tasks.c **** 
2034:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2035:../../../FreeRTOS_9_0/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2036:../../../FreeRTOS_9_0/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
 2410              		.loc 1 2036 0
 2411 000e 444B     		ldr	r3, .L157
 2412 0010 1B68     		ldr	r3, [r3]
 2413 0012 002B     		cmp	r3, #0
 2414 0014 09D1     		bne	.L147
 2415              	.LBB125:
 2416              	.LBB126:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2417              		.loc 2 237 0 discriminator 1
 2418              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2419 0016 4FF05003 			mov r3, #80												
 2420 001a 83F31188 		msr basepri, r3											
 2421 001e BFF36F8F 		isb														
 2422 0022 BFF34F8F 		dsb														
 2423              	
 2424              	@ 0 "" 2
 2425              		.thumb
 2426 0026 3B60     		str	r3, [r7]
 2427              	.L148:
 2428              	.LBE126:
 2429              	.LBE125:
 2430              		.loc 1 2036 0 discriminator 1
 2431 0028 FEE7     		b	.L148
 2432              	.L147:
2037:../../../FreeRTOS_9_0/Source/tasks.c **** 
2038:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2039:../../../FreeRTOS_9_0/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2040:../../../FreeRTOS_9_0/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2041:../../../FreeRTOS_9_0/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2042:../../../FreeRTOS_9_0/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2043:../../../FreeRTOS_9_0/Source/tasks.c **** 	taskENTER_CRITICAL();
 2433              		.loc 1 2043 0
 2434 002a FFF7FEFF 		bl	vPortEnterCritical
2044:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2045:../../../FreeRTOS_9_0/Source/tasks.c **** 		--uxSchedulerSuspended;
 2435              		.loc 1 2045 0
 2436 002e 3C4B     		ldr	r3, .L157
 2437 0030 1B68     		ldr	r3, [r3]
 2438 0032 013B     		subs	r3, r3, #1
 2439 0034 3A4A     		ldr	r2, .L157
 2440 0036 1360     		str	r3, [r2]
2046:../../../FreeRTOS_9_0/Source/tasks.c **** 
2047:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2441              		.loc 1 2047 0
 2442 0038 394B     		ldr	r3, .L157
 2443 003a 1B68     		ldr	r3, [r3]
 2444 003c 002B     		cmp	r3, #0
 2445 003e 67D1     		bne	.L149
2048:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2049:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 2446              		.loc 1 2049 0
 2447 0040 384B     		ldr	r3, .L157+4
 2448 0042 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccIgarPJ.s 			page 84


 2449 0044 002B     		cmp	r3, #0
 2450 0046 63D0     		beq	.L149
2050:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
2051:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2052:../../../FreeRTOS_9_0/Source/tasks.c **** 				appropriate ready list. */
2053:../../../FreeRTOS_9_0/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 2451              		.loc 1 2053 0
 2452 0048 34E0     		b	.L150
 2453              	.L151:
2054:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2055:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 2454              		.loc 1 2055 0
 2455 004a 374B     		ldr	r3, .L157+8
 2456 004c DB68     		ldr	r3, [r3, #12]
 2457 004e DB68     		ldr	r3, [r3, #12]
 2458 0050 FB60     		str	r3, [r7, #12]
2056:../../../FreeRTOS_9_0/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2459              		.loc 1 2056 0
 2460 0052 FB68     		ldr	r3, [r7, #12]
 2461 0054 1833     		adds	r3, r3, #24
 2462 0056 1846     		mov	r0, r3
 2463 0058 FFF7FEFF 		bl	uxListRemove
2057:../../../FreeRTOS_9_0/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2464              		.loc 1 2057 0
 2465 005c FB68     		ldr	r3, [r7, #12]
 2466 005e 0433     		adds	r3, r3, #4
 2467 0060 1846     		mov	r0, r3
 2468 0062 FFF7FEFF 		bl	uxListRemove
2058:../../../FreeRTOS_9_0/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2469              		.loc 1 2058 0
 2470 0066 FB68     		ldr	r3, [r7, #12]
 2471 0068 1846     		mov	r0, r3
 2472 006a FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStartReady
 2473 006e FB68     		ldr	r3, [r7, #12]
 2474 0070 DB6A     		ldr	r3, [r3, #44]
 2475 0072 1A46     		mov	r2, r3
 2476 0074 0123     		movs	r3, #1
 2477 0076 03FA02F2 		lsl	r2, r3, r2
 2478 007a 2C4B     		ldr	r3, .L157+12
 2479 007c 1B68     		ldr	r3, [r3]
 2480 007e 1343     		orrs	r3, r3, r2
 2481 0080 2A4A     		ldr	r2, .L157+12
 2482 0082 1360     		str	r3, [r2]
 2483 0084 FB68     		ldr	r3, [r7, #12]
 2484 0086 DA6A     		ldr	r2, [r3, #44]
 2485 0088 1346     		mov	r3, r2
 2486 008a 9B00     		lsls	r3, r3, #2
 2487 008c 1344     		add	r3, r3, r2
 2488 008e 9B00     		lsls	r3, r3, #2
 2489 0090 274A     		ldr	r2, .L157+16
 2490 0092 1A44     		add	r2, r2, r3
 2491 0094 FB68     		ldr	r3, [r7, #12]
 2492 0096 0433     		adds	r3, r3, #4
 2493 0098 1046     		mov	r0, r2
 2494 009a 1946     		mov	r1, r3
 2495 009c FFF7FEFF 		bl	vListInsertEnd
2059:../../../FreeRTOS_9_0/Source/tasks.c **** 
ARM GAS  /tmp/ccIgarPJ.s 			page 85


2060:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2061:../../../FreeRTOS_9_0/Source/tasks.c **** 					task then a yield must be performed. */
2062:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2496              		.loc 1 2062 0
 2497 00a0 FB68     		ldr	r3, [r7, #12]
 2498 00a2 DA6A     		ldr	r2, [r3, #44]
 2499 00a4 234B     		ldr	r3, .L157+20
 2500 00a6 1B68     		ldr	r3, [r3]
 2501 00a8 DB6A     		ldr	r3, [r3, #44]
 2502 00aa 9A42     		cmp	r2, r3
 2503 00ac 02D3     		bcc	.L150
2063:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2064:../../../FreeRTOS_9_0/Source/tasks.c **** 						xYieldPending = pdTRUE;
 2504              		.loc 1 2064 0
 2505 00ae 224B     		ldr	r3, .L157+24
 2506 00b0 0122     		movs	r2, #1
 2507 00b2 1A60     		str	r2, [r3]
 2508              	.L150:
2053:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
 2509              		.loc 1 2053 0
 2510 00b4 1C4B     		ldr	r3, .L157+8
 2511 00b6 1B68     		ldr	r3, [r3]
 2512 00b8 002B     		cmp	r3, #0
 2513 00ba C6D1     		bne	.L151
2065:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2066:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
2067:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2068:../../../FreeRTOS_9_0/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2069:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2070:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2071:../../../FreeRTOS_9_0/Source/tasks.c **** 
2072:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( pxTCB != NULL )
 2514              		.loc 1 2072 0
 2515 00bc FB68     		ldr	r3, [r7, #12]
 2516 00be 002B     		cmp	r3, #0
 2517 00c0 01D0     		beq	.L152
2073:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2074:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2075:../../../FreeRTOS_9_0/Source/tasks.c **** 					which may have prevented the next unblock time from being
2076:../../../FreeRTOS_9_0/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2077:../../../FreeRTOS_9_0/Source/tasks.c **** 					important for low power tickless implementations, where
2078:../../../FreeRTOS_9_0/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2079:../../../FreeRTOS_9_0/Source/tasks.c **** 					state. */
2080:../../../FreeRTOS_9_0/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
 2518              		.loc 1 2080 0
 2519 00c2 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2520              	.L152:
 2521              	.LBB127:
2081:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2082:../../../FreeRTOS_9_0/Source/tasks.c **** 
2083:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2084:../../../FreeRTOS_9_0/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2085:../../../FreeRTOS_9_0/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2086:../../../FreeRTOS_9_0/Source/tasks.c **** 				time. */
2087:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2088:../../../FreeRTOS_9_0/Source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 2522              		.loc 1 2088 0
ARM GAS  /tmp/ccIgarPJ.s 			page 86


 2523 00c6 1D4B     		ldr	r3, .L157+28
 2524 00c8 1B68     		ldr	r3, [r3]
 2525 00ca 7B60     		str	r3, [r7, #4]
2089:../../../FreeRTOS_9_0/Source/tasks.c **** 
2090:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
 2526              		.loc 1 2090 0
 2527 00cc 7B68     		ldr	r3, [r7, #4]
 2528 00ce 002B     		cmp	r3, #0
 2529 00d0 10D0     		beq	.L153
 2530              	.L155:
2091:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2092:../../../FreeRTOS_9_0/Source/tasks.c **** 						do
2093:../../../FreeRTOS_9_0/Source/tasks.c **** 						{
2094:../../../FreeRTOS_9_0/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
 2531              		.loc 1 2094 0
 2532 00d2 FFF7FEFF 		bl	xTaskIncrementTick
 2533 00d6 0346     		mov	r3, r0
 2534 00d8 002B     		cmp	r3, #0
 2535 00da 02D0     		beq	.L154
2095:../../../FreeRTOS_9_0/Source/tasks.c **** 							{
2096:../../../FreeRTOS_9_0/Source/tasks.c **** 								xYieldPending = pdTRUE;
 2536              		.loc 1 2096 0
 2537 00dc 164B     		ldr	r3, .L157+24
 2538 00de 0122     		movs	r2, #1
 2539 00e0 1A60     		str	r2, [r3]
 2540              	.L154:
2097:../../../FreeRTOS_9_0/Source/tasks.c **** 							}
2098:../../../FreeRTOS_9_0/Source/tasks.c **** 							else
2099:../../../FreeRTOS_9_0/Source/tasks.c **** 							{
2100:../../../FreeRTOS_9_0/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2101:../../../FreeRTOS_9_0/Source/tasks.c **** 							}
2102:../../../FreeRTOS_9_0/Source/tasks.c **** 							--uxPendedCounts;
 2541              		.loc 1 2102 0
 2542 00e2 7B68     		ldr	r3, [r7, #4]
 2543 00e4 013B     		subs	r3, r3, #1
 2544 00e6 7B60     		str	r3, [r7, #4]
2103:../../../FreeRTOS_9_0/Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 2545              		.loc 1 2103 0
 2546 00e8 7B68     		ldr	r3, [r7, #4]
 2547 00ea 002B     		cmp	r3, #0
 2548 00ec F1D1     		bne	.L155
2104:../../../FreeRTOS_9_0/Source/tasks.c **** 
2105:../../../FreeRTOS_9_0/Source/tasks.c **** 						uxPendedTicks = 0;
 2549              		.loc 1 2105 0
 2550 00ee 134B     		ldr	r3, .L157+28
 2551 00f0 0022     		movs	r2, #0
 2552 00f2 1A60     		str	r2, [r3]
 2553              	.L153:
 2554              	.LBE127:
2106:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2107:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
2108:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2109:../../../FreeRTOS_9_0/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2110:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2111:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2112:../../../FreeRTOS_9_0/Source/tasks.c **** 
2113:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
ARM GAS  /tmp/ccIgarPJ.s 			page 87


 2555              		.loc 1 2113 0
 2556 00f4 104B     		ldr	r3, .L157+24
 2557 00f6 1B68     		ldr	r3, [r3]
 2558 00f8 002B     		cmp	r3, #0
 2559 00fa 09D0     		beq	.L149
2114:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2115:../../../FreeRTOS_9_0/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2116:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2117:../../../FreeRTOS_9_0/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
 2560              		.loc 1 2117 0
 2561 00fc 0123     		movs	r3, #1
 2562 00fe BB60     		str	r3, [r7, #8]
2118:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2119:../../../FreeRTOS_9_0/Source/tasks.c **** 					#endif
2120:../../../FreeRTOS_9_0/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 2563              		.loc 1 2120 0
 2564 0100 0F4B     		ldr	r3, .L157+32
 2565 0102 4FF08052 		mov	r2, #268435456
 2566 0106 1A60     		str	r2, [r3]
 2567              	@ 2120 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 2568 0108 BFF34F8F 		dsb
 2569              	@ 0 "" 2
 2570              	@ 2120 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 2571 010c BFF36F8F 		isb
 2572              	@ 0 "" 2
 2573              		.thumb
 2574              	.L149:
2121:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2122:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
2123:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2124:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2125:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2126:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
2127:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2128:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
2129:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2130:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2131:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2132:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2133:../../../FreeRTOS_9_0/Source/tasks.c **** 	taskEXIT_CRITICAL();
 2575              		.loc 1 2133 0
 2576 0110 FFF7FEFF 		bl	vPortExitCritical
2134:../../../FreeRTOS_9_0/Source/tasks.c **** 
2135:../../../FreeRTOS_9_0/Source/tasks.c **** 	return xAlreadyYielded;
 2577              		.loc 1 2135 0
 2578 0114 BB68     		ldr	r3, [r7, #8]
2136:../../../FreeRTOS_9_0/Source/tasks.c **** }
 2579              		.loc 1 2136 0
 2580 0116 1846     		mov	r0, r3
 2581 0118 1037     		adds	r7, r7, #16
 2582              	.LCFI83:
 2583              		.cfi_def_cfa_offset 8
 2584 011a BD46     		mov	sp, r7
 2585              	.LCFI84:
 2586              		.cfi_def_cfa_register 13
 2587              		@ sp needed
 2588 011c 80BD     		pop	{r7, pc}
ARM GAS  /tmp/ccIgarPJ.s 			page 88


 2589              	.L158:
 2590 011e 00BF     		.align	2
 2591              	.L157:
 2592 0120 00000000 		.word	uxSchedulerSuspended
 2593 0124 00000000 		.word	uxCurrentNumberOfTasks
 2594 0128 00000000 		.word	xPendingReadyList
 2595 012c 00000000 		.word	uxTopReadyPriority
 2596 0130 00000000 		.word	pxReadyTasksLists
 2597 0134 00000000 		.word	pxCurrentTCB
 2598 0138 00000000 		.word	xYieldPending
 2599 013c 00000000 		.word	uxPendedTicks
 2600 0140 04ED00E0 		.word	-536810236
 2601              		.cfi_endproc
 2602              	.LFE21:
 2604              		.section	.text.xTaskGetTickCount,"ax",%progbits
 2605              		.align	2
 2606              		.global	xTaskGetTickCount
 2607              		.thumb
 2608              		.thumb_func
 2610              	xTaskGetTickCount:
 2611              	.LFB22:
2137:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
2138:../../../FreeRTOS_9_0/Source/tasks.c **** 
2139:../../../FreeRTOS_9_0/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2140:../../../FreeRTOS_9_0/Source/tasks.c **** {
 2612              		.loc 1 2140 0
 2613              		.cfi_startproc
 2614              		@ args = 0, pretend = 0, frame = 8
 2615              		@ frame_needed = 1, uses_anonymous_args = 0
 2616              		@ link register save eliminated.
 2617 0000 80B4     		push	{r7}
 2618              	.LCFI85:
 2619              		.cfi_def_cfa_offset 4
 2620              		.cfi_offset 7, -4
 2621 0002 83B0     		sub	sp, sp, #12
 2622              	.LCFI86:
 2623              		.cfi_def_cfa_offset 16
 2624 0004 00AF     		add	r7, sp, #0
 2625              	.LCFI87:
 2626              		.cfi_def_cfa_register 7
2141:../../../FreeRTOS_9_0/Source/tasks.c **** TickType_t xTicks;
2142:../../../FreeRTOS_9_0/Source/tasks.c **** 
2143:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2144:../../../FreeRTOS_9_0/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2145:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2146:../../../FreeRTOS_9_0/Source/tasks.c **** 		xTicks = xTickCount;
 2627              		.loc 1 2146 0
 2628 0006 054B     		ldr	r3, .L161
 2629 0008 1B68     		ldr	r3, [r3]
 2630 000a 7B60     		str	r3, [r7, #4]
2147:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2148:../../../FreeRTOS_9_0/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2149:../../../FreeRTOS_9_0/Source/tasks.c **** 
2150:../../../FreeRTOS_9_0/Source/tasks.c **** 	return xTicks;
 2631              		.loc 1 2150 0
 2632 000c 7B68     		ldr	r3, [r7, #4]
2151:../../../FreeRTOS_9_0/Source/tasks.c **** }
ARM GAS  /tmp/ccIgarPJ.s 			page 89


 2633              		.loc 1 2151 0
 2634 000e 1846     		mov	r0, r3
 2635 0010 0C37     		adds	r7, r7, #12
 2636              	.LCFI88:
 2637              		.cfi_def_cfa_offset 4
 2638 0012 BD46     		mov	sp, r7
 2639              	.LCFI89:
 2640              		.cfi_def_cfa_register 13
 2641              		@ sp needed
 2642 0014 5DF8047B 		ldr	r7, [sp], #4
 2643              	.LCFI90:
 2644              		.cfi_restore 7
 2645              		.cfi_def_cfa_offset 0
 2646 0018 7047     		bx	lr
 2647              	.L162:
 2648 001a 00BF     		.align	2
 2649              	.L161:
 2650 001c 00000000 		.word	xTickCount
 2651              		.cfi_endproc
 2652              	.LFE22:
 2654              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2655              		.align	2
 2656              		.global	xTaskGetTickCountFromISR
 2657              		.thumb
 2658              		.thumb_func
 2660              	xTaskGetTickCountFromISR:
 2661              	.LFB23:
2152:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
2153:../../../FreeRTOS_9_0/Source/tasks.c **** 
2154:../../../FreeRTOS_9_0/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2155:../../../FreeRTOS_9_0/Source/tasks.c **** {
 2662              		.loc 1 2155 0
 2663              		.cfi_startproc
 2664              		@ args = 0, pretend = 0, frame = 8
 2665              		@ frame_needed = 1, uses_anonymous_args = 0
 2666 0000 80B5     		push	{r7, lr}
 2667              	.LCFI91:
 2668              		.cfi_def_cfa_offset 8
 2669              		.cfi_offset 7, -8
 2670              		.cfi_offset 14, -4
 2671 0002 82B0     		sub	sp, sp, #8
 2672              	.LCFI92:
 2673              		.cfi_def_cfa_offset 16
 2674 0004 00AF     		add	r7, sp, #0
 2675              	.LCFI93:
 2676              		.cfi_def_cfa_register 7
2156:../../../FreeRTOS_9_0/Source/tasks.c **** TickType_t xReturn;
2157:../../../FreeRTOS_9_0/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2158:../../../FreeRTOS_9_0/Source/tasks.c **** 
2159:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2160:../../../FreeRTOS_9_0/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2161:../../../FreeRTOS_9_0/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2162:../../../FreeRTOS_9_0/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2163:../../../FreeRTOS_9_0/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2164:../../../FreeRTOS_9_0/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2165:../../../FreeRTOS_9_0/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2166:../../../FreeRTOS_9_0/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
ARM GAS  /tmp/ccIgarPJ.s 			page 90


2167:../../../FreeRTOS_9_0/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2168:../../../FreeRTOS_9_0/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2169:../../../FreeRTOS_9_0/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2170:../../../FreeRTOS_9_0/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2171:../../../FreeRTOS_9_0/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2172:../../../FreeRTOS_9_0/Source/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
2173:../../../FreeRTOS_9_0/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2677              		.loc 1 2173 0
 2678 0006 FFF7FEFF 		bl	vPortValidateInterruptPriority
2174:../../../FreeRTOS_9_0/Source/tasks.c **** 
2175:../../../FreeRTOS_9_0/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 2679              		.loc 1 2175 0
 2680 000a 0023     		movs	r3, #0
 2681 000c 7B60     		str	r3, [r7, #4]
2176:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2177:../../../FreeRTOS_9_0/Source/tasks.c **** 		xReturn = xTickCount;
 2682              		.loc 1 2177 0
 2683 000e 044B     		ldr	r3, .L165
 2684 0010 1B68     		ldr	r3, [r3]
 2685 0012 3B60     		str	r3, [r7]
2178:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2179:../../../FreeRTOS_9_0/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2180:../../../FreeRTOS_9_0/Source/tasks.c **** 
2181:../../../FreeRTOS_9_0/Source/tasks.c **** 	return xReturn;
 2686              		.loc 1 2181 0
 2687 0014 3B68     		ldr	r3, [r7]
2182:../../../FreeRTOS_9_0/Source/tasks.c **** }
 2688              		.loc 1 2182 0
 2689 0016 1846     		mov	r0, r3
 2690 0018 0837     		adds	r7, r7, #8
 2691              	.LCFI94:
 2692              		.cfi_def_cfa_offset 8
 2693 001a BD46     		mov	sp, r7
 2694              	.LCFI95:
 2695              		.cfi_def_cfa_register 13
 2696              		@ sp needed
 2697 001c 80BD     		pop	{r7, pc}
 2698              	.L166:
 2699 001e 00BF     		.align	2
 2700              	.L165:
 2701 0020 00000000 		.word	xTickCount
 2702              		.cfi_endproc
 2703              	.LFE23:
 2705              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2706              		.align	2
 2707              		.global	uxTaskGetNumberOfTasks
 2708              		.thumb
 2709              		.thumb_func
 2711              	uxTaskGetNumberOfTasks:
 2712              	.LFB24:
2183:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
2184:../../../FreeRTOS_9_0/Source/tasks.c **** 
2185:../../../FreeRTOS_9_0/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2186:../../../FreeRTOS_9_0/Source/tasks.c **** {
 2713              		.loc 1 2186 0
 2714              		.cfi_startproc
 2715              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccIgarPJ.s 			page 91


 2716              		@ frame_needed = 1, uses_anonymous_args = 0
 2717              		@ link register save eliminated.
 2718 0000 80B4     		push	{r7}
 2719              	.LCFI96:
 2720              		.cfi_def_cfa_offset 4
 2721              		.cfi_offset 7, -4
 2722 0002 00AF     		add	r7, sp, #0
 2723              	.LCFI97:
 2724              		.cfi_def_cfa_register 7
2187:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2188:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t. */
2189:../../../FreeRTOS_9_0/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
 2725              		.loc 1 2189 0
 2726 0004 034B     		ldr	r3, .L169
 2727 0006 1B68     		ldr	r3, [r3]
2190:../../../FreeRTOS_9_0/Source/tasks.c **** }
 2728              		.loc 1 2190 0
 2729 0008 1846     		mov	r0, r3
 2730 000a BD46     		mov	sp, r7
 2731              	.LCFI98:
 2732              		.cfi_def_cfa_register 13
 2733              		@ sp needed
 2734 000c 5DF8047B 		ldr	r7, [sp], #4
 2735              	.LCFI99:
 2736              		.cfi_restore 7
 2737              		.cfi_def_cfa_offset 0
 2738 0010 7047     		bx	lr
 2739              	.L170:
 2740 0012 00BF     		.align	2
 2741              	.L169:
 2742 0014 00000000 		.word	uxCurrentNumberOfTasks
 2743              		.cfi_endproc
 2744              	.LFE24:
 2746              		.section	.text.pcTaskGetName,"ax",%progbits
 2747              		.align	2
 2748              		.global	pcTaskGetName
 2749              		.thumb
 2750              		.thumb_func
 2752              	pcTaskGetName:
 2753              	.LFB25:
2191:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
2192:../../../FreeRTOS_9_0/Source/tasks.c **** 
2193:../../../FreeRTOS_9_0/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2194:../../../FreeRTOS_9_0/Source/tasks.c **** {
 2754              		.loc 1 2194 0
 2755              		.cfi_startproc
 2756              		@ args = 0, pretend = 0, frame = 16
 2757              		@ frame_needed = 1, uses_anonymous_args = 0
 2758              		@ link register save eliminated.
 2759 0000 80B4     		push	{r7}
 2760              	.LCFI100:
 2761              		.cfi_def_cfa_offset 4
 2762              		.cfi_offset 7, -4
 2763 0002 85B0     		sub	sp, sp, #20
 2764              	.LCFI101:
 2765              		.cfi_def_cfa_offset 24
 2766 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccIgarPJ.s 			page 92


 2767              	.LCFI102:
 2768              		.cfi_def_cfa_register 7
 2769 0006 7860     		str	r0, [r7, #4]
2195:../../../FreeRTOS_9_0/Source/tasks.c **** TCB_t *pxTCB;
2196:../../../FreeRTOS_9_0/Source/tasks.c **** 
2197:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2198:../../../FreeRTOS_9_0/Source/tasks.c **** 	queried. */
2199:../../../FreeRTOS_9_0/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 2770              		.loc 1 2199 0
 2771 0008 7B68     		ldr	r3, [r7, #4]
 2772 000a 002B     		cmp	r3, #0
 2773 000c 02D1     		bne	.L172
 2774              		.loc 1 2199 0 is_stmt 0 discriminator 1
 2775 000e 0D4B     		ldr	r3, .L177
 2776 0010 1B68     		ldr	r3, [r3]
 2777 0012 00E0     		b	.L173
 2778              	.L172:
 2779              		.loc 1 2199 0 discriminator 2
 2780 0014 7B68     		ldr	r3, [r7, #4]
 2781              	.L173:
 2782              		.loc 1 2199 0 discriminator 4
 2783 0016 FB60     		str	r3, [r7, #12]
2200:../../../FreeRTOS_9_0/Source/tasks.c **** 	configASSERT( pxTCB );
 2784              		.loc 1 2200 0 is_stmt 1 discriminator 4
 2785 0018 FB68     		ldr	r3, [r7, #12]
 2786 001a 002B     		cmp	r3, #0
 2787 001c 09D1     		bne	.L174
 2788              	.LBB128:
 2789              	.LBB129:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2790              		.loc 2 237 0 discriminator 1
 2791              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2792 001e 4FF05003 			mov r3, #80												
 2793 0022 83F31188 		msr basepri, r3											
 2794 0026 BFF36F8F 		isb														
 2795 002a BFF34F8F 		dsb														
 2796              	
 2797              	@ 0 "" 2
 2798              		.thumb
 2799 002e BB60     		str	r3, [r7, #8]
 2800              	.L175:
 2801              	.LBE129:
 2802              	.LBE128:
 2803              		.loc 1 2200 0 discriminator 1
 2804 0030 FEE7     		b	.L175
 2805              	.L174:
2201:../../../FreeRTOS_9_0/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2806              		.loc 1 2201 0
 2807 0032 FB68     		ldr	r3, [r7, #12]
 2808 0034 3433     		adds	r3, r3, #52
2202:../../../FreeRTOS_9_0/Source/tasks.c **** }
 2809              		.loc 1 2202 0
 2810 0036 1846     		mov	r0, r3
 2811 0038 1437     		adds	r7, r7, #20
 2812              	.LCFI103:
 2813              		.cfi_def_cfa_offset 4
 2814 003a BD46     		mov	sp, r7
ARM GAS  /tmp/ccIgarPJ.s 			page 93


 2815              	.LCFI104:
 2816              		.cfi_def_cfa_register 13
 2817              		@ sp needed
 2818 003c 5DF8047B 		ldr	r7, [sp], #4
 2819              	.LCFI105:
 2820              		.cfi_restore 7
 2821              		.cfi_def_cfa_offset 0
 2822 0040 7047     		bx	lr
 2823              	.L178:
 2824 0042 00BF     		.align	2
 2825              	.L177:
 2826 0044 00000000 		.word	pxCurrentTCB
 2827              		.cfi_endproc
 2828              	.LFE25:
 2830              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 2831              		.align	2
 2832              		.global	uxTaskGetSystemState
 2833              		.thumb
 2834              		.thumb_func
 2836              	uxTaskGetSystemState:
 2837              	.LFB26:
2203:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
2204:../../../FreeRTOS_9_0/Source/tasks.c **** 
2205:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2206:../../../FreeRTOS_9_0/Source/tasks.c **** 
2207:../../../FreeRTOS_9_0/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2208:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2209:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2210:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t x;
2211:../../../FreeRTOS_9_0/Source/tasks.c **** 	char cNextChar;
2212:../../../FreeRTOS_9_0/Source/tasks.c **** 
2213:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2214:../../../FreeRTOS_9_0/Source/tasks.c **** 
2215:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2216:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2217:../../../FreeRTOS_9_0/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2218:../../../FreeRTOS_9_0/Source/tasks.c **** 
2219:../../../FreeRTOS_9_0/Source/tasks.c **** 			do
2220:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
2221:../../../FreeRTOS_9_0/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2222:../../../FreeRTOS_9_0/Source/tasks.c **** 
2223:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2224:../../../FreeRTOS_9_0/Source/tasks.c **** 				mismatch. */
2225:../../../FreeRTOS_9_0/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2226:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2227:../../../FreeRTOS_9_0/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2228:../../../FreeRTOS_9_0/Source/tasks.c **** 
2229:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2230:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2231:../../../FreeRTOS_9_0/Source/tasks.c **** 						/* Characters didn't match. */
2232:../../../FreeRTOS_9_0/Source/tasks.c **** 						break;
2233:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2234:../../../FreeRTOS_9_0/Source/tasks.c **** 					else if( cNextChar == 0x00 )
2235:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2236:../../../FreeRTOS_9_0/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2237:../../../FreeRTOS_9_0/Source/tasks.c **** 						found. */
2238:../../../FreeRTOS_9_0/Source/tasks.c **** 						pxReturn = pxNextTCB;
ARM GAS  /tmp/ccIgarPJ.s 			page 94


2239:../../../FreeRTOS_9_0/Source/tasks.c **** 						break;
2240:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2241:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
2242:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2243:../../../FreeRTOS_9_0/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2244:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2245:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2246:../../../FreeRTOS_9_0/Source/tasks.c **** 
2247:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( pxReturn != NULL )
2248:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2249:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* The handle has been found. */
2250:../../../FreeRTOS_9_0/Source/tasks.c **** 					break;
2251:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2252:../../../FreeRTOS_9_0/Source/tasks.c **** 
2253:../../../FreeRTOS_9_0/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2254:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2255:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
2256:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2257:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2258:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2259:../../../FreeRTOS_9_0/Source/tasks.c **** 
2260:../../../FreeRTOS_9_0/Source/tasks.c **** 		return pxReturn;
2261:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2262:../../../FreeRTOS_9_0/Source/tasks.c **** 
2263:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2264:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
2265:../../../FreeRTOS_9_0/Source/tasks.c **** 
2266:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2267:../../../FreeRTOS_9_0/Source/tasks.c **** 
2268:../../../FreeRTOS_9_0/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2269:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2270:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2271:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t* pxTCB;
2272:../../../FreeRTOS_9_0/Source/tasks.c **** 
2273:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2274:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2275:../../../FreeRTOS_9_0/Source/tasks.c **** 
2276:../../../FreeRTOS_9_0/Source/tasks.c **** 		vTaskSuspendAll();
2277:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2278:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Search the ready lists. */
2279:../../../FreeRTOS_9_0/Source/tasks.c **** 			do
2280:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
2281:../../../FreeRTOS_9_0/Source/tasks.c **** 				uxQueue--;
2282:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2283:../../../FreeRTOS_9_0/Source/tasks.c **** 
2284:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( pxTCB != NULL )
2285:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2286:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Found the handle. */
2287:../../../FreeRTOS_9_0/Source/tasks.c **** 					break;
2288:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2289:../../../FreeRTOS_9_0/Source/tasks.c **** 
2290:../../../FreeRTOS_9_0/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2291:../../../FreeRTOS_9_0/Source/tasks.c **** 
2292:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Search the delayed lists. */
2293:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxTCB == NULL )
2294:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
2295:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
ARM GAS  /tmp/ccIgarPJ.s 			page 95


2296:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
2297:../../../FreeRTOS_9_0/Source/tasks.c **** 
2298:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxTCB == NULL )
2299:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
2300:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2301:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
2302:../../../FreeRTOS_9_0/Source/tasks.c **** 
2303:../../../FreeRTOS_9_0/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2304:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
2305:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( pxTCB == NULL )
2306:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2307:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Search the suspended list. */
2308:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2309:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2310:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
2311:../../../FreeRTOS_9_0/Source/tasks.c **** 			#endif
2312:../../../FreeRTOS_9_0/Source/tasks.c **** 
2313:../../../FreeRTOS_9_0/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2314:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
2315:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( pxTCB == NULL )
2316:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2317:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Search the deleted list. */
2318:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2319:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2320:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
2321:../../../FreeRTOS_9_0/Source/tasks.c **** 			#endif
2322:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2323:../../../FreeRTOS_9_0/Source/tasks.c **** 		( void ) xTaskResumeAll();
2324:../../../FreeRTOS_9_0/Source/tasks.c **** 
2325:../../../FreeRTOS_9_0/Source/tasks.c **** 		return ( TaskHandle_t ) pxTCB;
2326:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2327:../../../FreeRTOS_9_0/Source/tasks.c **** 
2328:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2329:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
2330:../../../FreeRTOS_9_0/Source/tasks.c **** 
2331:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2332:../../../FreeRTOS_9_0/Source/tasks.c **** 
2333:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2334:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 2838              		.loc 1 2334 0
 2839              		.cfi_startproc
 2840              		@ args = 0, pretend = 0, frame = 24
 2841              		@ frame_needed = 1, uses_anonymous_args = 0
 2842 0000 80B5     		push	{r7, lr}
 2843              	.LCFI106:
 2844              		.cfi_def_cfa_offset 8
 2845              		.cfi_offset 7, -8
 2846              		.cfi_offset 14, -4
 2847 0002 86B0     		sub	sp, sp, #24
 2848              	.LCFI107:
 2849              		.cfi_def_cfa_offset 32
 2850 0004 00AF     		add	r7, sp, #0
 2851              	.LCFI108:
 2852              		.cfi_def_cfa_register 7
 2853 0006 F860     		str	r0, [r7, #12]
 2854 0008 B960     		str	r1, [r7, #8]
 2855 000a 7A60     		str	r2, [r7, #4]
ARM GAS  /tmp/ccIgarPJ.s 			page 96


2335:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 2856              		.loc 1 2335 0
 2857 000c 0023     		movs	r3, #0
 2858 000e 7B61     		str	r3, [r7, #20]
 2859 0010 0723     		movs	r3, #7
 2860 0012 3B61     		str	r3, [r7, #16]
2336:../../../FreeRTOS_9_0/Source/tasks.c **** 
2337:../../../FreeRTOS_9_0/Source/tasks.c **** 		vTaskSuspendAll();
 2861              		.loc 1 2337 0
 2862 0014 FFF7FEFF 		bl	vTaskSuspendAll
2338:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2339:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2340:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
 2863              		.loc 1 2340 0
 2864 0018 3B4B     		ldr	r3, .L184
 2865 001a 1B68     		ldr	r3, [r3]
 2866 001c BA68     		ldr	r2, [r7, #8]
 2867 001e 9A42     		cmp	r2, r3
 2868 0020 6BD3     		bcc	.L180
 2869              	.L181:
2341:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
2342:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2343:../../../FreeRTOS_9_0/Source/tasks.c **** 				task in the Ready state. */
2344:../../../FreeRTOS_9_0/Source/tasks.c **** 				do
2345:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2346:../../../FreeRTOS_9_0/Source/tasks.c **** 					uxQueue--;
 2870              		.loc 1 2346 0 discriminator 1
 2871 0022 3B69     		ldr	r3, [r7, #16]
 2872 0024 013B     		subs	r3, r3, #1
 2873 0026 3B61     		str	r3, [r7, #16]
2347:../../../FreeRTOS_9_0/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
 2874              		.loc 1 2347 0 discriminator 1
 2875 0028 7A69     		ldr	r2, [r7, #20]
 2876 002a 1346     		mov	r3, r2
 2877 002c DB00     		lsls	r3, r3, #3
 2878 002e 1344     		add	r3, r3, r2
 2879 0030 9B00     		lsls	r3, r3, #2
 2880 0032 1A46     		mov	r2, r3
 2881 0034 FB68     		ldr	r3, [r7, #12]
 2882 0036 9918     		adds	r1, r3, r2
 2883 0038 3A69     		ldr	r2, [r7, #16]
 2884 003a 1346     		mov	r3, r2
 2885 003c 9B00     		lsls	r3, r3, #2
 2886 003e 1344     		add	r3, r3, r2
 2887 0040 9B00     		lsls	r3, r3, #2
 2888 0042 324A     		ldr	r2, .L184+4
 2889 0044 1344     		add	r3, r3, r2
 2890 0046 0846     		mov	r0, r1
 2891 0048 1946     		mov	r1, r3
 2892 004a 0122     		movs	r2, #1
 2893 004c FFF7FEFF 		bl	prvListTasksWithinSingleList
 2894 0050 0246     		mov	r2, r0
 2895 0052 7B69     		ldr	r3, [r7, #20]
 2896 0054 1344     		add	r3, r3, r2
 2897 0056 7B61     		str	r3, [r7, #20]
2348:../../../FreeRTOS_9_0/Source/tasks.c **** 
2349:../../../FreeRTOS_9_0/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
ARM GAS  /tmp/ccIgarPJ.s 			page 97


 2898              		.loc 1 2349 0 discriminator 1
 2899 0058 3B69     		ldr	r3, [r7, #16]
 2900 005a 002B     		cmp	r3, #0
 2901 005c E1D1     		bne	.L181
2350:../../../FreeRTOS_9_0/Source/tasks.c **** 
2351:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2352:../../../FreeRTOS_9_0/Source/tasks.c **** 				task in the Blocked state. */
2353:../../../FreeRTOS_9_0/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
 2902              		.loc 1 2353 0
 2903 005e 7A69     		ldr	r2, [r7, #20]
 2904 0060 1346     		mov	r3, r2
 2905 0062 DB00     		lsls	r3, r3, #3
 2906 0064 1344     		add	r3, r3, r2
 2907 0066 9B00     		lsls	r3, r3, #2
 2908 0068 1A46     		mov	r2, r3
 2909 006a FB68     		ldr	r3, [r7, #12]
 2910 006c 1A44     		add	r2, r2, r3
 2911 006e 284B     		ldr	r3, .L184+8
 2912 0070 1B68     		ldr	r3, [r3]
 2913 0072 1046     		mov	r0, r2
 2914 0074 1946     		mov	r1, r3
 2915 0076 0222     		movs	r2, #2
 2916 0078 FFF7FEFF 		bl	prvListTasksWithinSingleList
 2917 007c 0246     		mov	r2, r0
 2918 007e 7B69     		ldr	r3, [r7, #20]
 2919 0080 1344     		add	r3, r3, r2
 2920 0082 7B61     		str	r3, [r7, #20]
2354:../../../FreeRTOS_9_0/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 2921              		.loc 1 2354 0
 2922 0084 7A69     		ldr	r2, [r7, #20]
 2923 0086 1346     		mov	r3, r2
 2924 0088 DB00     		lsls	r3, r3, #3
 2925 008a 1344     		add	r3, r3, r2
 2926 008c 9B00     		lsls	r3, r3, #2
 2927 008e 1A46     		mov	r2, r3
 2928 0090 FB68     		ldr	r3, [r7, #12]
 2929 0092 1A44     		add	r2, r2, r3
 2930 0094 1F4B     		ldr	r3, .L184+12
 2931 0096 1B68     		ldr	r3, [r3]
 2932 0098 1046     		mov	r0, r2
 2933 009a 1946     		mov	r1, r3
 2934 009c 0222     		movs	r2, #2
 2935 009e FFF7FEFF 		bl	prvListTasksWithinSingleList
 2936 00a2 0246     		mov	r2, r0
 2937 00a4 7B69     		ldr	r3, [r7, #20]
 2938 00a6 1344     		add	r3, r3, r2
 2939 00a8 7B61     		str	r3, [r7, #20]
2355:../../../FreeRTOS_9_0/Source/tasks.c **** 
2356:../../../FreeRTOS_9_0/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2357:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2358:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2359:../../../FreeRTOS_9_0/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2360:../../../FreeRTOS_9_0/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
 2940              		.loc 1 2360 0
 2941 00aa 7A69     		ldr	r2, [r7, #20]
 2942 00ac 1346     		mov	r3, r2
 2943 00ae DB00     		lsls	r3, r3, #3
ARM GAS  /tmp/ccIgarPJ.s 			page 98


 2944 00b0 1344     		add	r3, r3, r2
 2945 00b2 9B00     		lsls	r3, r3, #2
 2946 00b4 1A46     		mov	r2, r3
 2947 00b6 FB68     		ldr	r3, [r7, #12]
 2948 00b8 1344     		add	r3, r3, r2
 2949 00ba 1846     		mov	r0, r3
 2950 00bc 1649     		ldr	r1, .L184+16
 2951 00be 0422     		movs	r2, #4
 2952 00c0 FFF7FEFF 		bl	prvListTasksWithinSingleList
 2953 00c4 0246     		mov	r2, r0
 2954 00c6 7B69     		ldr	r3, [r7, #20]
 2955 00c8 1344     		add	r3, r3, r2
 2956 00ca 7B61     		str	r3, [r7, #20]
2361:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2362:../../../FreeRTOS_9_0/Source/tasks.c **** 				#endif
2363:../../../FreeRTOS_9_0/Source/tasks.c **** 
2364:../../../FreeRTOS_9_0/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2365:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2366:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2367:../../../FreeRTOS_9_0/Source/tasks.c **** 					each task in the Suspended state. */
2368:../../../FreeRTOS_9_0/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
 2957              		.loc 1 2368 0
 2958 00cc 7A69     		ldr	r2, [r7, #20]
 2959 00ce 1346     		mov	r3, r2
 2960 00d0 DB00     		lsls	r3, r3, #3
 2961 00d2 1344     		add	r3, r3, r2
 2962 00d4 9B00     		lsls	r3, r3, #2
 2963 00d6 1A46     		mov	r2, r3
 2964 00d8 FB68     		ldr	r3, [r7, #12]
 2965 00da 1344     		add	r3, r3, r2
 2966 00dc 1846     		mov	r0, r3
 2967 00de 0F49     		ldr	r1, .L184+20
 2968 00e0 0322     		movs	r2, #3
 2969 00e2 FFF7FEFF 		bl	prvListTasksWithinSingleList
 2970 00e6 0246     		mov	r2, r0
 2971 00e8 7B69     		ldr	r3, [r7, #20]
 2972 00ea 1344     		add	r3, r3, r2
 2973 00ec 7B61     		str	r3, [r7, #20]
2369:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2370:../../../FreeRTOS_9_0/Source/tasks.c **** 				#endif
2371:../../../FreeRTOS_9_0/Source/tasks.c **** 
2372:../../../FreeRTOS_9_0/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2373:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2374:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2375:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2376:../../../FreeRTOS_9_0/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2377:../../../FreeRTOS_9_0/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2378:../../../FreeRTOS_9_0/Source/tasks.c **** 						#else
2379:../../../FreeRTOS_9_0/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2380:../../../FreeRTOS_9_0/Source/tasks.c **** 						#endif
2381:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2382:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2383:../../../FreeRTOS_9_0/Source/tasks.c **** 				#else
2384:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2385:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
 2974              		.loc 1 2385 0
 2975 00ee 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccIgarPJ.s 			page 99


 2976 00f0 002B     		cmp	r3, #0
 2977 00f2 02D0     		beq	.L180
2386:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2387:../../../FreeRTOS_9_0/Source/tasks.c **** 						*pulTotalRunTime = 0;
 2978              		.loc 1 2387 0
 2979 00f4 7B68     		ldr	r3, [r7, #4]
 2980 00f6 0022     		movs	r2, #0
 2981 00f8 1A60     		str	r2, [r3]
 2982              	.L180:
2388:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2389:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2390:../../../FreeRTOS_9_0/Source/tasks.c **** 				#endif
2391:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
2392:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
2393:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
2394:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2395:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
2396:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2397:../../../FreeRTOS_9_0/Source/tasks.c **** 		( void ) xTaskResumeAll();
 2983              		.loc 1 2397 0
 2984 00fa FFF7FEFF 		bl	xTaskResumeAll
2398:../../../FreeRTOS_9_0/Source/tasks.c **** 
2399:../../../FreeRTOS_9_0/Source/tasks.c **** 		return uxTask;
 2985              		.loc 1 2399 0
 2986 00fe 7B69     		ldr	r3, [r7, #20]
2400:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 2987              		.loc 1 2400 0
 2988 0100 1846     		mov	r0, r3
 2989 0102 1837     		adds	r7, r7, #24
 2990              	.LCFI109:
 2991              		.cfi_def_cfa_offset 8
 2992 0104 BD46     		mov	sp, r7
 2993              	.LCFI110:
 2994              		.cfi_def_cfa_register 13
 2995              		@ sp needed
 2996 0106 80BD     		pop	{r7, pc}
 2997              	.L185:
 2998              		.align	2
 2999              	.L184:
 3000 0108 00000000 		.word	uxCurrentNumberOfTasks
 3001 010c 00000000 		.word	pxReadyTasksLists
 3002 0110 00000000 		.word	pxDelayedTaskList
 3003 0114 00000000 		.word	pxOverflowDelayedTaskList
 3004 0118 00000000 		.word	xTasksWaitingTermination
 3005 011c 00000000 		.word	xSuspendedTaskList
 3006              		.cfi_endproc
 3007              	.LFE26:
 3009              		.section	.text.xTaskIncrementTick,"ax",%progbits
 3010              		.align	2
 3011              		.global	xTaskIncrementTick
 3012              		.thumb
 3013              		.thumb_func
 3015              	xTaskIncrementTick:
 3016              	.LFB27:
2401:../../../FreeRTOS_9_0/Source/tasks.c **** 
2402:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2403:../../../FreeRTOS_9_0/Source/tasks.c **** /*----------------------------------------------------------*/
ARM GAS  /tmp/ccIgarPJ.s 			page 100


2404:../../../FreeRTOS_9_0/Source/tasks.c **** 
2405:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2406:../../../FreeRTOS_9_0/Source/tasks.c **** 
2407:../../../FreeRTOS_9_0/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2408:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2409:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2410:../../../FreeRTOS_9_0/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2411:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2412:../../../FreeRTOS_9_0/Source/tasks.c **** 		return xIdleTaskHandle;
2413:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2414:../../../FreeRTOS_9_0/Source/tasks.c **** 
2415:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2416:../../../FreeRTOS_9_0/Source/tasks.c **** /*----------------------------------------------------------*/
2417:../../../FreeRTOS_9_0/Source/tasks.c **** 
2418:../../../FreeRTOS_9_0/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2419:../../../FreeRTOS_9_0/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2420:../../../FreeRTOS_9_0/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2421:../../../FreeRTOS_9_0/Source/tasks.c **** 1. */
2422:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2423:../../../FreeRTOS_9_0/Source/tasks.c **** 
2424:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2425:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2426:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2427:../../../FreeRTOS_9_0/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2428:../../../FreeRTOS_9_0/Source/tasks.c **** 		each stepped tick. */
2429:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2430:../../../FreeRTOS_9_0/Source/tasks.c **** 		xTickCount += xTicksToJump;
2431:../../../FreeRTOS_9_0/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2432:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2433:../../../FreeRTOS_9_0/Source/tasks.c **** 
2434:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2435:../../../FreeRTOS_9_0/Source/tasks.c **** /*----------------------------------------------------------*/
2436:../../../FreeRTOS_9_0/Source/tasks.c **** 
2437:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2438:../../../FreeRTOS_9_0/Source/tasks.c **** 
2439:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2440:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2441:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxTCB = ( TCB_t * ) xTask;
2442:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
2443:../../../FreeRTOS_9_0/Source/tasks.c **** 
2444:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( pxTCB );
2445:../../../FreeRTOS_9_0/Source/tasks.c **** 
2446:../../../FreeRTOS_9_0/Source/tasks.c **** 		vTaskSuspendAll();
2447:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2448:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2449:../../../FreeRTOS_9_0/Source/tasks.c **** 			it is actually in the Blocked state. */
2450:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2451:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
2452:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2453:../../../FreeRTOS_9_0/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2454:../../../FreeRTOS_9_0/Source/tasks.c **** 				scheduler is suspended. */
2455:../../../FreeRTOS_9_0/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2456:../../../FreeRTOS_9_0/Source/tasks.c **** 
2457:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2458:../../../FreeRTOS_9_0/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2459:../../../FreeRTOS_9_0/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2460:../../../FreeRTOS_9_0/Source/tasks.c **** 				is used. */
ARM GAS  /tmp/ccIgarPJ.s 			page 101


2461:../../../FreeRTOS_9_0/Source/tasks.c **** 				taskENTER_CRITICAL();
2462:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2463:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2464:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2465:../../../FreeRTOS_9_0/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2466:../../../FreeRTOS_9_0/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2467:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2468:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
2469:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2470:../../../FreeRTOS_9_0/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2471:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2472:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2473:../../../FreeRTOS_9_0/Source/tasks.c **** 				taskEXIT_CRITICAL();
2474:../../../FreeRTOS_9_0/Source/tasks.c **** 
2475:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2476:../../../FreeRTOS_9_0/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2477:../../../FreeRTOS_9_0/Source/tasks.c **** 
2478:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2479:../../../FreeRTOS_9_0/Source/tasks.c **** 				switch if preemption is turned off. */
2480:../../../FreeRTOS_9_0/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2481:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2482:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2483:../../../FreeRTOS_9_0/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2484:../../../FreeRTOS_9_0/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2485:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2486:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2487:../../../FreeRTOS_9_0/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2488:../../../FreeRTOS_9_0/Source/tasks.c **** 						is unsuspended. */
2489:../../../FreeRTOS_9_0/Source/tasks.c **** 						xYieldPending = pdTRUE;
2490:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2491:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
2492:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2493:../../../FreeRTOS_9_0/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2494:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2495:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2496:../../../FreeRTOS_9_0/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2497:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
2498:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
2499:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
2500:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2501:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
2502:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2503:../../../FreeRTOS_9_0/Source/tasks.c **** 		xTaskResumeAll();
2504:../../../FreeRTOS_9_0/Source/tasks.c **** 
2505:../../../FreeRTOS_9_0/Source/tasks.c **** 		return xReturn;
2506:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2507:../../../FreeRTOS_9_0/Source/tasks.c **** 
2508:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2509:../../../FreeRTOS_9_0/Source/tasks.c **** /*----------------------------------------------------------*/
2510:../../../FreeRTOS_9_0/Source/tasks.c **** 
2511:../../../FreeRTOS_9_0/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2512:../../../FreeRTOS_9_0/Source/tasks.c **** {
 3017              		.loc 1 2512 0
 3018              		.cfi_startproc
 3019              		@ args = 0, pretend = 0, frame = 24
 3020              		@ frame_needed = 1, uses_anonymous_args = 0
 3021 0000 80B5     		push	{r7, lr}
ARM GAS  /tmp/ccIgarPJ.s 			page 102


 3022              	.LCFI111:
 3023              		.cfi_def_cfa_offset 8
 3024              		.cfi_offset 7, -8
 3025              		.cfi_offset 14, -4
 3026 0002 86B0     		sub	sp, sp, #24
 3027              	.LCFI112:
 3028              		.cfi_def_cfa_offset 32
 3029 0004 00AF     		add	r7, sp, #0
 3030              	.LCFI113:
 3031              		.cfi_def_cfa_register 7
2513:../../../FreeRTOS_9_0/Source/tasks.c **** TCB_t * pxTCB;
2514:../../../FreeRTOS_9_0/Source/tasks.c **** TickType_t xItemValue;
2515:../../../FreeRTOS_9_0/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
 3032              		.loc 1 2515 0
 3033 0006 0023     		movs	r3, #0
 3034 0008 7B61     		str	r3, [r7, #20]
2516:../../../FreeRTOS_9_0/Source/tasks.c **** 
2517:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2518:../../../FreeRTOS_9_0/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2519:../../../FreeRTOS_9_0/Source/tasks.c **** 	tasks to be unblocked. */
2520:../../../FreeRTOS_9_0/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2521:../../../FreeRTOS_9_0/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3035              		.loc 1 2521 0
 3036 000a 534B     		ldr	r3, .L203
 3037 000c 1B68     		ldr	r3, [r3]
 3038 000e 002B     		cmp	r3, #0
 3039 0010 40F09280 		bne	.L187
 3040              	.LBB130:
2522:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2523:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2524:../../../FreeRTOS_9_0/Source/tasks.c **** 		block. */
2525:../../../FreeRTOS_9_0/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + 1;
 3041              		.loc 1 2525 0
 3042 0014 514B     		ldr	r3, .L203+4
 3043 0016 1B68     		ldr	r3, [r3]
 3044 0018 0133     		adds	r3, r3, #1
 3045 001a 3B61     		str	r3, [r7, #16]
2526:../../../FreeRTOS_9_0/Source/tasks.c **** 
2527:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2528:../../../FreeRTOS_9_0/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2529:../../../FreeRTOS_9_0/Source/tasks.c **** 		xTickCount = xConstTickCount;
 3046              		.loc 1 2529 0
 3047 001c 4F4A     		ldr	r2, .L203+4
 3048 001e 3B69     		ldr	r3, [r7, #16]
 3049 0020 1360     		str	r3, [r2]
2530:../../../FreeRTOS_9_0/Source/tasks.c **** 
2531:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U )
 3050              		.loc 1 2531 0
 3051 0022 3B69     		ldr	r3, [r7, #16]
 3052 0024 002B     		cmp	r3, #0
 3053 0026 1FD1     		bne	.L188
 3054              	.LBB131:
2532:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2533:../../../FreeRTOS_9_0/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
 3055              		.loc 1 2533 0
 3056 0028 4D4B     		ldr	r3, .L203+8
 3057 002a 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccIgarPJ.s 			page 103


 3058 002c 1B68     		ldr	r3, [r3]
 3059 002e 002B     		cmp	r3, #0
 3060 0030 09D0     		beq	.L189
 3061              	.LBB132:
 3062              	.LBB133:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3063              		.loc 2 237 0 discriminator 1
 3064              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3065 0032 4FF05003 			mov r3, #80												
 3066 0036 83F31188 		msr basepri, r3											
 3067 003a BFF36F8F 		isb														
 3068 003e BFF34F8F 		dsb														
 3069              	
 3070              	@ 0 "" 2
 3071              		.thumb
 3072 0042 3B60     		str	r3, [r7]
 3073              	.L190:
 3074              	.LBE133:
 3075              	.LBE132:
 3076              		.loc 1 2533 0 discriminator 1
 3077 0044 FEE7     		b	.L190
 3078              	.L189:
 3079              		.loc 1 2533 0 is_stmt 0 discriminator 2
 3080 0046 464B     		ldr	r3, .L203+8
 3081 0048 1B68     		ldr	r3, [r3]
 3082 004a FB60     		str	r3, [r7, #12]
 3083 004c 454B     		ldr	r3, .L203+12
 3084 004e 1B68     		ldr	r3, [r3]
 3085 0050 434A     		ldr	r2, .L203+8
 3086 0052 1360     		str	r3, [r2]
 3087 0054 434A     		ldr	r2, .L203+12
 3088 0056 FB68     		ldr	r3, [r7, #12]
 3089 0058 1360     		str	r3, [r2]
 3090 005a 434B     		ldr	r3, .L203+16
 3091 005c 1B68     		ldr	r3, [r3]
 3092 005e 0133     		adds	r3, r3, #1
 3093 0060 414A     		ldr	r2, .L203+16
 3094 0062 1360     		str	r3, [r2]
 3095 0064 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3096              	.L188:
 3097              	.LBE131:
2534:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2535:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
2536:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2537:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2538:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2539:../../../FreeRTOS_9_0/Source/tasks.c **** 
2540:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2541:../../../FreeRTOS_9_0/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2542:../../../FreeRTOS_9_0/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2543:../../../FreeRTOS_9_0/Source/tasks.c **** 		look any further down the list. */
2544:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
 3098              		.loc 1 2544 0 is_stmt 1
 3099 0068 404B     		ldr	r3, .L203+20
 3100 006a 1B68     		ldr	r3, [r3]
 3101 006c 3A69     		ldr	r2, [r7, #16]
 3102 006e 9A42     		cmp	r2, r3
ARM GAS  /tmp/ccIgarPJ.s 			page 104


 3103 0070 53D3     		bcc	.L191
 3104              	.L198:
2545:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2546:../../../FreeRTOS_9_0/Source/tasks.c **** 			for( ;; )
2547:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
2548:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 3105              		.loc 1 2548 0
 3106 0072 3B4B     		ldr	r3, .L203+8
 3107 0074 1B68     		ldr	r3, [r3]
 3108 0076 1B68     		ldr	r3, [r3]
 3109 0078 002B     		cmp	r3, #0
 3110 007a 01D1     		bne	.L192
 3111              		.loc 1 2548 0 is_stmt 0 discriminator 1
 3112 007c 0123     		movs	r3, #1
 3113 007e 00E0     		b	.L193
 3114              	.L192:
 3115              		.loc 1 2548 0 discriminator 2
 3116 0080 0023     		movs	r3, #0
 3117              	.L193:
 3118              		.loc 1 2548 0 discriminator 4
 3119 0082 002B     		cmp	r3, #0
 3120 0084 04D0     		beq	.L194
2549:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2550:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2551:../../../FreeRTOS_9_0/Source/tasks.c **** 					to the maximum possible value so it is extremely
2552:../../../FreeRTOS_9_0/Source/tasks.c **** 					unlikely that the
2553:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2554:../../../FreeRTOS_9_0/Source/tasks.c **** 					next time through. */
2555:../../../FreeRTOS_9_0/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
 3121              		.loc 1 2555 0 is_stmt 1
 3122 0086 394B     		ldr	r3, .L203+20
 3123 0088 4FF0FF32 		mov	r2, #-1
 3124 008c 1A60     		str	r2, [r3]
2556:../../../FreeRTOS_9_0/Source/tasks.c **** 					break;
 3125              		.loc 1 2556 0
 3126 008e 44E0     		b	.L191
 3127              	.L194:
2557:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2558:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
2559:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2560:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2561:../../../FreeRTOS_9_0/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2562:../../../FreeRTOS_9_0/Source/tasks.c **** 					at which the task at the head of the delayed list must
2563:../../../FreeRTOS_9_0/Source/tasks.c **** 					be removed from the Blocked state. */
2564:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 3128              		.loc 1 2564 0
 3129 0090 334B     		ldr	r3, .L203+8
 3130 0092 1B68     		ldr	r3, [r3]
 3131 0094 DB68     		ldr	r3, [r3, #12]
 3132 0096 DB68     		ldr	r3, [r3, #12]
 3133 0098 BB60     		str	r3, [r7, #8]
2565:../../../FreeRTOS_9_0/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 3134              		.loc 1 2565 0
 3135 009a BB68     		ldr	r3, [r7, #8]
 3136 009c 5B68     		ldr	r3, [r3, #4]
 3137 009e 7B60     		str	r3, [r7, #4]
2566:../../../FreeRTOS_9_0/Source/tasks.c **** 
ARM GAS  /tmp/ccIgarPJ.s 			page 105


2567:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
 3138              		.loc 1 2567 0
 3139 00a0 3A69     		ldr	r2, [r7, #16]
 3140 00a2 7B68     		ldr	r3, [r7, #4]
 3141 00a4 9A42     		cmp	r2, r3
 3142 00a6 03D2     		bcs	.L195
2568:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2569:../../../FreeRTOS_9_0/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2570:../../../FreeRTOS_9_0/Source/tasks.c **** 						item value is the time at which the task at the head
2571:../../../FreeRTOS_9_0/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2572:../../../FreeRTOS_9_0/Source/tasks.c **** 						state -	so record the item value in
2573:../../../FreeRTOS_9_0/Source/tasks.c **** 						xNextTaskUnblockTime. */
2574:../../../FreeRTOS_9_0/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
 3143              		.loc 1 2574 0
 3144 00a8 304A     		ldr	r2, .L203+20
 3145 00aa 7B68     		ldr	r3, [r7, #4]
 3146 00ac 1360     		str	r3, [r2]
2575:../../../FreeRTOS_9_0/Source/tasks.c **** 						break;
 3147              		.loc 1 2575 0
 3148 00ae 34E0     		b	.L191
 3149              	.L195:
2576:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2577:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
2578:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2579:../../../FreeRTOS_9_0/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2580:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2581:../../../FreeRTOS_9_0/Source/tasks.c **** 
2582:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2583:../../../FreeRTOS_9_0/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 3150              		.loc 1 2583 0
 3151 00b0 BB68     		ldr	r3, [r7, #8]
 3152 00b2 0433     		adds	r3, r3, #4
 3153 00b4 1846     		mov	r0, r3
 3154 00b6 FFF7FEFF 		bl	uxListRemove
2584:../../../FreeRTOS_9_0/Source/tasks.c **** 
2585:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2586:../../../FreeRTOS_9_0/Source/tasks.c **** 					it from the event list. */
2587:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 3155              		.loc 1 2587 0
 3156 00ba BB68     		ldr	r3, [r7, #8]
 3157 00bc 9B6A     		ldr	r3, [r3, #40]
 3158 00be 002B     		cmp	r3, #0
 3159 00c0 04D0     		beq	.L196
2588:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2589:../../../FreeRTOS_9_0/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 3160              		.loc 1 2589 0
 3161 00c2 BB68     		ldr	r3, [r7, #8]
 3162 00c4 1833     		adds	r3, r3, #24
 3163 00c6 1846     		mov	r0, r3
 3164 00c8 FFF7FEFF 		bl	uxListRemove
 3165              	.L196:
2590:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2591:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
2592:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2593:../../../FreeRTOS_9_0/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2594:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2595:../../../FreeRTOS_9_0/Source/tasks.c **** 
ARM GAS  /tmp/ccIgarPJ.s 			page 106


2596:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2597:../../../FreeRTOS_9_0/Source/tasks.c **** 					list. */
2598:../../../FreeRTOS_9_0/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3166              		.loc 1 2598 0
 3167 00cc BB68     		ldr	r3, [r7, #8]
 3168 00ce 1846     		mov	r0, r3
 3169 00d0 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStartReady
 3170 00d4 BB68     		ldr	r3, [r7, #8]
 3171 00d6 DB6A     		ldr	r3, [r3, #44]
 3172 00d8 1A46     		mov	r2, r3
 3173 00da 0123     		movs	r3, #1
 3174 00dc 03FA02F2 		lsl	r2, r3, r2
 3175 00e0 234B     		ldr	r3, .L203+24
 3176 00e2 1B68     		ldr	r3, [r3]
 3177 00e4 1343     		orrs	r3, r3, r2
 3178 00e6 224A     		ldr	r2, .L203+24
 3179 00e8 1360     		str	r3, [r2]
 3180 00ea BB68     		ldr	r3, [r7, #8]
 3181 00ec DA6A     		ldr	r2, [r3, #44]
 3182 00ee 1346     		mov	r3, r2
 3183 00f0 9B00     		lsls	r3, r3, #2
 3184 00f2 1344     		add	r3, r3, r2
 3185 00f4 9B00     		lsls	r3, r3, #2
 3186 00f6 1F4A     		ldr	r2, .L203+28
 3187 00f8 1A44     		add	r2, r2, r3
 3188 00fa BB68     		ldr	r3, [r7, #8]
 3189 00fc 0433     		adds	r3, r3, #4
 3190 00fe 1046     		mov	r0, r2
 3191 0100 1946     		mov	r1, r3
 3192 0102 FFF7FEFF 		bl	vListInsertEnd
2599:../../../FreeRTOS_9_0/Source/tasks.c **** 
2600:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2601:../../../FreeRTOS_9_0/Source/tasks.c **** 					context switch if preemption is turned off. */
2602:../../../FreeRTOS_9_0/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2603:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2604:../../../FreeRTOS_9_0/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2605:../../../FreeRTOS_9_0/Source/tasks.c **** 						only be performed if the unblocked task has a
2606:../../../FreeRTOS_9_0/Source/tasks.c **** 						priority that is equal to or higher than the
2607:../../../FreeRTOS_9_0/Source/tasks.c **** 						currently executing task. */
2608:../../../FreeRTOS_9_0/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 3193              		.loc 1 2608 0
 3194 0106 BB68     		ldr	r3, [r7, #8]
 3195 0108 DA6A     		ldr	r2, [r3, #44]
 3196 010a 1B4B     		ldr	r3, .L203+32
 3197 010c 1B68     		ldr	r3, [r3]
 3198 010e DB6A     		ldr	r3, [r3, #44]
 3199 0110 9A42     		cmp	r2, r3
 3200 0112 01D3     		bcc	.L197
2609:../../../FreeRTOS_9_0/Source/tasks.c **** 						{
2610:../../../FreeRTOS_9_0/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
 3201              		.loc 1 2610 0
 3202 0114 0123     		movs	r3, #1
 3203 0116 7B61     		str	r3, [r7, #20]
 3204              	.L197:
2611:../../../FreeRTOS_9_0/Source/tasks.c **** 						}
2612:../../../FreeRTOS_9_0/Source/tasks.c **** 						else
2613:../../../FreeRTOS_9_0/Source/tasks.c **** 						{
ARM GAS  /tmp/ccIgarPJ.s 			page 107


2614:../../../FreeRTOS_9_0/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2615:../../../FreeRTOS_9_0/Source/tasks.c **** 						}
2616:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2617:../../../FreeRTOS_9_0/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2618:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2619:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
 3205              		.loc 1 2619 0
 3206 0118 ABE7     		b	.L198
 3207              	.L191:
2620:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2621:../../../FreeRTOS_9_0/Source/tasks.c **** 
2622:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2623:../../../FreeRTOS_9_0/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2624:../../../FreeRTOS_9_0/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2625:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2626:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2627:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
 3208              		.loc 1 2627 0
 3209 011a 174B     		ldr	r3, .L203+32
 3210 011c 1B68     		ldr	r3, [r3]
 3211 011e DA6A     		ldr	r2, [r3, #44]
 3212 0120 1449     		ldr	r1, .L203+28
 3213 0122 1346     		mov	r3, r2
 3214 0124 9B00     		lsls	r3, r3, #2
 3215 0126 1344     		add	r3, r3, r2
 3216 0128 9B00     		lsls	r3, r3, #2
 3217 012a 0B44     		add	r3, r3, r1
 3218 012c 1B68     		ldr	r3, [r3]
 3219 012e 012B     		cmp	r3, #1
 3220 0130 01D9     		bls	.L199
2628:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
2629:../../../FreeRTOS_9_0/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
 3221              		.loc 1 2629 0
 3222 0132 0123     		movs	r3, #1
 3223 0134 7B61     		str	r3, [r7, #20]
 3224              	.L199:
 3225              	.LBE130:
 3226 0136 04E0     		b	.L200
 3227              	.L187:
2630:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
2631:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
2632:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
2633:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2634:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
2635:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2636:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2637:../../../FreeRTOS_9_0/Source/tasks.c **** 
2638:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2639:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2640:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2641:../../../FreeRTOS_9_0/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2642:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2643:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
2644:../../../FreeRTOS_9_0/Source/tasks.c **** 				vApplicationTickHook();
2645:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
2646:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
2647:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
ARM GAS  /tmp/ccIgarPJ.s 			page 108


2648:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2649:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
2650:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2651:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2652:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2653:../../../FreeRTOS_9_0/Source/tasks.c **** 	else
2654:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2655:../../../FreeRTOS_9_0/Source/tasks.c **** 		++uxPendedTicks;
 3228              		.loc 1 2655 0
 3229 0138 104B     		ldr	r3, .L203+36
 3230 013a 1B68     		ldr	r3, [r3]
 3231 013c 0133     		adds	r3, r3, #1
 3232 013e 0F4A     		ldr	r2, .L203+36
 3233 0140 1360     		str	r3, [r2]
 3234              	.L200:
2656:../../../FreeRTOS_9_0/Source/tasks.c **** 
2657:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2658:../../../FreeRTOS_9_0/Source/tasks.c **** 		scheduler is locked. */
2659:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2660:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2661:../../../FreeRTOS_9_0/Source/tasks.c **** 			vApplicationTickHook();
2662:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2663:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif
2664:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2665:../../../FreeRTOS_9_0/Source/tasks.c **** 
2666:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2667:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2668:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xYieldPending != pdFALSE )
 3235              		.loc 1 2668 0
 3236 0142 0F4B     		ldr	r3, .L203+40
 3237 0144 1B68     		ldr	r3, [r3]
 3238 0146 002B     		cmp	r3, #0
 3239 0148 01D0     		beq	.L201
2669:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2670:../../../FreeRTOS_9_0/Source/tasks.c **** 			xSwitchRequired = pdTRUE;
 3240              		.loc 1 2670 0
 3241 014a 0123     		movs	r3, #1
 3242 014c 7B61     		str	r3, [r7, #20]
 3243              	.L201:
2671:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2672:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
2673:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2674:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2675:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2676:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2677:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2678:../../../FreeRTOS_9_0/Source/tasks.c **** 
2679:../../../FreeRTOS_9_0/Source/tasks.c **** 	return xSwitchRequired;
 3244              		.loc 1 2679 0
 3245 014e 7B69     		ldr	r3, [r7, #20]
2680:../../../FreeRTOS_9_0/Source/tasks.c **** }
 3246              		.loc 1 2680 0
 3247 0150 1846     		mov	r0, r3
 3248 0152 1837     		adds	r7, r7, #24
 3249              	.LCFI114:
 3250              		.cfi_def_cfa_offset 8
 3251 0154 BD46     		mov	sp, r7
ARM GAS  /tmp/ccIgarPJ.s 			page 109


 3252              	.LCFI115:
 3253              		.cfi_def_cfa_register 13
 3254              		@ sp needed
 3255 0156 80BD     		pop	{r7, pc}
 3256              	.L204:
 3257              		.align	2
 3258              	.L203:
 3259 0158 00000000 		.word	uxSchedulerSuspended
 3260 015c 00000000 		.word	xTickCount
 3261 0160 00000000 		.word	pxDelayedTaskList
 3262 0164 00000000 		.word	pxOverflowDelayedTaskList
 3263 0168 00000000 		.word	xNumOfOverflows
 3264 016c 00000000 		.word	xNextTaskUnblockTime
 3265 0170 00000000 		.word	uxTopReadyPriority
 3266 0174 00000000 		.word	pxReadyTasksLists
 3267 0178 00000000 		.word	pxCurrentTCB
 3268 017c 00000000 		.word	uxPendedTicks
 3269 0180 00000000 		.word	xYieldPending
 3270              		.cfi_endproc
 3271              	.LFE27:
 3273              		.section	.text.vTaskSwitchContext,"ax",%progbits
 3274              		.align	2
 3275              		.global	vTaskSwitchContext
 3276              		.thumb
 3277              		.thumb_func
 3279              	vTaskSwitchContext:
 3280              	.LFB28:
2681:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
2682:../../../FreeRTOS_9_0/Source/tasks.c **** 
2683:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2684:../../../FreeRTOS_9_0/Source/tasks.c **** 
2685:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2686:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2687:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *xTCB;
2688:../../../FreeRTOS_9_0/Source/tasks.c **** 
2689:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2690:../../../FreeRTOS_9_0/Source/tasks.c **** 		getting set. */
2691:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xTask == NULL )
2692:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2693:../../../FreeRTOS_9_0/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2694:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2695:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
2696:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2697:../../../FreeRTOS_9_0/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2698:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2699:../../../FreeRTOS_9_0/Source/tasks.c **** 
2700:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2701:../../../FreeRTOS_9_0/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2702:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskENTER_CRITICAL();
2703:../../../FreeRTOS_9_0/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2704:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskEXIT_CRITICAL();
2705:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2706:../../../FreeRTOS_9_0/Source/tasks.c **** 
2707:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2708:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
2709:../../../FreeRTOS_9_0/Source/tasks.c **** 
2710:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
ARM GAS  /tmp/ccIgarPJ.s 			page 110


2711:../../../FreeRTOS_9_0/Source/tasks.c **** 
2712:../../../FreeRTOS_9_0/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2713:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2714:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *xTCB;
2715:../../../FreeRTOS_9_0/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2716:../../../FreeRTOS_9_0/Source/tasks.c **** 
2717:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2718:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xTask == NULL )
2719:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2720:../../../FreeRTOS_9_0/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2721:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2722:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
2723:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2724:../../../FreeRTOS_9_0/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2725:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2726:../../../FreeRTOS_9_0/Source/tasks.c **** 
2727:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2728:../../../FreeRTOS_9_0/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2729:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskENTER_CRITICAL();
2730:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2731:../../../FreeRTOS_9_0/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2732:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2733:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskEXIT_CRITICAL();
2734:../../../FreeRTOS_9_0/Source/tasks.c **** 
2735:../../../FreeRTOS_9_0/Source/tasks.c **** 		return xReturn;
2736:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2737:../../../FreeRTOS_9_0/Source/tasks.c **** 
2738:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2739:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
2740:../../../FreeRTOS_9_0/Source/tasks.c **** 
2741:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2742:../../../FreeRTOS_9_0/Source/tasks.c **** 
2743:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2744:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2745:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *xTCB;
2746:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xReturn;
2747:../../../FreeRTOS_9_0/Source/tasks.c **** 
2748:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2749:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xTask == NULL )
2750:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2751:../../../FreeRTOS_9_0/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2752:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2753:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
2754:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2755:../../../FreeRTOS_9_0/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2756:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2757:../../../FreeRTOS_9_0/Source/tasks.c **** 
2758:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2759:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2760:../../../FreeRTOS_9_0/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2761:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2762:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
2763:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2764:../../../FreeRTOS_9_0/Source/tasks.c **** 			xReturn = pdFAIL;
2765:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2766:../../../FreeRTOS_9_0/Source/tasks.c **** 
2767:../../../FreeRTOS_9_0/Source/tasks.c **** 		return xReturn;
ARM GAS  /tmp/ccIgarPJ.s 			page 111


2768:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2769:../../../FreeRTOS_9_0/Source/tasks.c **** 
2770:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2771:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
2772:../../../FreeRTOS_9_0/Source/tasks.c **** 
2773:../../../FreeRTOS_9_0/Source/tasks.c **** void vTaskSwitchContext( void )
2774:../../../FreeRTOS_9_0/Source/tasks.c **** {
 3281              		.loc 1 2774 0
 3282              		.cfi_startproc
 3283              		@ args = 0, pretend = 0, frame = 24
 3284              		@ frame_needed = 1, uses_anonymous_args = 0
 3285 0000 80B5     		push	{r7, lr}
 3286              	.LCFI116:
 3287              		.cfi_def_cfa_offset 8
 3288              		.cfi_offset 7, -8
 3289              		.cfi_offset 14, -4
 3290 0002 86B0     		sub	sp, sp, #24
 3291              	.LCFI117:
 3292              		.cfi_def_cfa_offset 32
 3293 0004 00AF     		add	r7, sp, #0
 3294              	.LCFI118:
 3295              		.cfi_def_cfa_register 7
2775:../../../FreeRTOS_9_0/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3296              		.loc 1 2775 0
 3297 0006 2E4B     		ldr	r3, .L213
 3298 0008 1B68     		ldr	r3, [r3]
 3299 000a 002B     		cmp	r3, #0
 3300 000c 03D0     		beq	.L206
2776:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2777:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2778:../../../FreeRTOS_9_0/Source/tasks.c **** 		switch. */
2779:../../../FreeRTOS_9_0/Source/tasks.c **** 		xYieldPending = pdTRUE;
 3301              		.loc 1 2779 0
 3302 000e 2D4B     		ldr	r3, .L213+4
 3303 0010 0122     		movs	r2, #1
 3304 0012 1A60     		str	r2, [r3]
 3305 0014 51E0     		b	.L205
 3306              	.L206:
2780:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2781:../../../FreeRTOS_9_0/Source/tasks.c **** 	else
2782:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2783:../../../FreeRTOS_9_0/Source/tasks.c **** 		xYieldPending = pdFALSE;
 3307              		.loc 1 2783 0
 3308 0016 2B4B     		ldr	r3, .L213+4
 3309 0018 0022     		movs	r2, #0
 3310 001a 1A60     		str	r2, [r3]
 3311              	.LBB134:
2784:../../../FreeRTOS_9_0/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2785:../../../FreeRTOS_9_0/Source/tasks.c **** 
2786:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2787:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2788:../../../FreeRTOS_9_0/Source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2789:../../../FreeRTOS_9_0/Source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2790:../../../FreeRTOS_9_0/Source/tasks.c **** 				#else
2791:../../../FreeRTOS_9_0/Source/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2792:../../../FreeRTOS_9_0/Source/tasks.c **** 				#endif
2793:../../../FreeRTOS_9_0/Source/tasks.c **** 
ARM GAS  /tmp/ccIgarPJ.s 			page 112


2794:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Add the amount of time the task has been running to the
2795:../../../FreeRTOS_9_0/Source/tasks.c **** 				accumulated time so far.  The time the task started running was
2796:../../../FreeRTOS_9_0/Source/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2797:../../../FreeRTOS_9_0/Source/tasks.c **** 				protection here so count values are only valid until the timer
2798:../../../FreeRTOS_9_0/Source/tasks.c **** 				overflows.  The guard against negative values is to protect
2799:../../../FreeRTOS_9_0/Source/tasks.c **** 				against suspect run time stat counter implementations - which
2800:../../../FreeRTOS_9_0/Source/tasks.c **** 				are provided by the application, not the kernel. */
2801:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2802:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2803:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2804:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2805:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
2806:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2807:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2808:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2809:../../../FreeRTOS_9_0/Source/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2810:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2811:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2812:../../../FreeRTOS_9_0/Source/tasks.c **** 
2813:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2814:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2815:../../../FreeRTOS_9_0/Source/tasks.c **** 
2816:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2817:../../../FreeRTOS_9_0/Source/tasks.c **** 		optimised asm code. */
2818:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
 3312              		.loc 1 2818 0
 3313 001c 2A4B     		ldr	r3, .L213+8
 3314 001e 1B68     		ldr	r3, [r3]
 3315 0020 FB60     		str	r3, [r7, #12]
 3316              	.LBB135:
 3317              	.LBB136:
 176:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 3318              		.loc 2 176 0
 3319 0022 FB68     		ldr	r3, [r7, #12]
 3320              	@ 176 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3321 0024 B3FA83F3 		clz r3, r3
 3322              	@ 0 "" 2
 3323              		.thumb
 3324 0028 FB72     		strb	r3, [r7, #11]
 177:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 3325              		.loc 2 177 0
 3326 002a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 3327              	.LBE136:
 3328              	.LBE135:
 3329              		.loc 1 2818 0
 3330 002c C3F11F03 		rsb	r3, r3, #31
 3331 0030 7B61     		str	r3, [r7, #20]
 3332 0032 2649     		ldr	r1, .L213+12
 3333 0034 7A69     		ldr	r2, [r7, #20]
 3334 0036 1346     		mov	r3, r2
 3335 0038 9B00     		lsls	r3, r3, #2
 3336 003a 1344     		add	r3, r3, r2
 3337 003c 9B00     		lsls	r3, r3, #2
 3338 003e 0B44     		add	r3, r3, r1
 3339 0040 1B68     		ldr	r3, [r3]
 3340 0042 002B     		cmp	r3, #0
 3341 0044 09D1     		bne	.L209
ARM GAS  /tmp/ccIgarPJ.s 			page 113


 3342              	.LBB137:
 3343              	.LBB138:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3344              		.loc 2 237 0 discriminator 1
 3345              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3346 0046 4FF05003 			mov r3, #80												
 3347 004a 83F31188 		msr basepri, r3											
 3348 004e BFF36F8F 		isb														
 3349 0052 BFF34F8F 		dsb														
 3350              	
 3351              	@ 0 "" 2
 3352              		.thumb
 3353 0056 7B60     		str	r3, [r7, #4]
 3354              	.L210:
 3355              	.LBE138:
 3356              	.LBE137:
 3357              		.loc 1 2818 0 discriminator 1
 3358 0058 FEE7     		b	.L210
 3359              	.L209:
 3360              	.LBB139:
 3361              		.loc 1 2818 0 is_stmt 0 discriminator 2
 3362 005a 7A69     		ldr	r2, [r7, #20]
 3363 005c 1346     		mov	r3, r2
 3364 005e 9B00     		lsls	r3, r3, #2
 3365 0060 1344     		add	r3, r3, r2
 3366 0062 9B00     		lsls	r3, r3, #2
 3367 0064 194A     		ldr	r2, .L213+12
 3368 0066 1344     		add	r3, r3, r2
 3369 0068 3B61     		str	r3, [r7, #16]
 3370 006a 3B69     		ldr	r3, [r7, #16]
 3371 006c 5B68     		ldr	r3, [r3, #4]
 3372 006e 5A68     		ldr	r2, [r3, #4]
 3373 0070 3B69     		ldr	r3, [r7, #16]
 3374 0072 5A60     		str	r2, [r3, #4]
 3375 0074 3B69     		ldr	r3, [r7, #16]
 3376 0076 5A68     		ldr	r2, [r3, #4]
 3377 0078 3B69     		ldr	r3, [r7, #16]
 3378 007a 0833     		adds	r3, r3, #8
 3379 007c 9A42     		cmp	r2, r3
 3380 007e 04D1     		bne	.L211
 3381              		.loc 1 2818 0 discriminator 3
 3382 0080 3B69     		ldr	r3, [r7, #16]
 3383 0082 5B68     		ldr	r3, [r3, #4]
 3384 0084 5A68     		ldr	r2, [r3, #4]
 3385 0086 3B69     		ldr	r3, [r7, #16]
 3386 0088 5A60     		str	r2, [r3, #4]
 3387              	.L211:
 3388              		.loc 1 2818 0 discriminator 5
 3389 008a 3B69     		ldr	r3, [r7, #16]
 3390 008c 5B68     		ldr	r3, [r3, #4]
 3391 008e DB68     		ldr	r3, [r3, #12]
 3392 0090 0F4A     		ldr	r2, .L213+16
 3393 0092 1360     		str	r3, [r2]
 3394              	.LBE139:
 3395              	.LBE134:
2819:../../../FreeRTOS_9_0/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3396              		.loc 1 2819 0 is_stmt 1 discriminator 5
ARM GAS  /tmp/ccIgarPJ.s 			page 114


 3397 0094 0E4B     		ldr	r3, .L213+16
 3398 0096 1B68     		ldr	r3, [r3]
 3399 0098 3433     		adds	r3, r3, #52
 3400 009a 1846     		mov	r0, r3
 3401 009c 0D49     		ldr	r1, .L213+20
 3402 009e 0522     		movs	r2, #5
 3403 00a0 FFF7FEFF 		bl	memcmp
 3404 00a4 0346     		mov	r3, r0
 3405 00a6 002B     		cmp	r3, #0
 3406 00a8 05D0     		beq	.L212
 3407              		.loc 1 2819 0 is_stmt 0 discriminator 1
 3408 00aa 094B     		ldr	r3, .L213+16
 3409 00ac 1B68     		ldr	r3, [r3]
 3410 00ae 1846     		mov	r0, r3
 3411 00b0 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStartExec
 3412 00b4 01E0     		b	.L205
 3413              	.L212:
 3414              		.loc 1 2819 0 discriminator 2
 3415 00b6 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnIdle
 3416              	.L205:
2820:../../../FreeRTOS_9_0/Source/tasks.c **** 
2821:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2822:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2823:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2824:../../../FreeRTOS_9_0/Source/tasks.c **** 			structure specific to this task. */
2825:../../../FreeRTOS_9_0/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2826:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2827:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2828:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2829:../../../FreeRTOS_9_0/Source/tasks.c **** }
 3417              		.loc 1 2829 0 is_stmt 1
 3418 00ba 1837     		adds	r7, r7, #24
 3419              	.LCFI119:
 3420              		.cfi_def_cfa_offset 8
 3421 00bc BD46     		mov	sp, r7
 3422              	.LCFI120:
 3423              		.cfi_def_cfa_register 13
 3424              		@ sp needed
 3425 00be 80BD     		pop	{r7, pc}
 3426              	.L214:
 3427              		.align	2
 3428              	.L213:
 3429 00c0 00000000 		.word	uxSchedulerSuspended
 3430 00c4 00000000 		.word	xYieldPending
 3431 00c8 00000000 		.word	uxTopReadyPriority
 3432 00cc 00000000 		.word	pxReadyTasksLists
 3433 00d0 00000000 		.word	pxCurrentTCB
 3434 00d4 00000000 		.word	.LC0
 3435              		.cfi_endproc
 3436              	.LFE28:
 3438              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 3439              		.align	2
 3440              		.global	vTaskPlaceOnEventList
 3441              		.thumb
 3442              		.thumb_func
 3444              	vTaskPlaceOnEventList:
 3445              	.LFB29:
ARM GAS  /tmp/ccIgarPJ.s 			page 115


2830:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
2831:../../../FreeRTOS_9_0/Source/tasks.c **** 
2832:../../../FreeRTOS_9_0/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2833:../../../FreeRTOS_9_0/Source/tasks.c **** {
 3446              		.loc 1 2833 0
 3447              		.cfi_startproc
 3448              		@ args = 0, pretend = 0, frame = 16
 3449              		@ frame_needed = 1, uses_anonymous_args = 0
 3450 0000 80B5     		push	{r7, lr}
 3451              	.LCFI121:
 3452              		.cfi_def_cfa_offset 8
 3453              		.cfi_offset 7, -8
 3454              		.cfi_offset 14, -4
 3455 0002 84B0     		sub	sp, sp, #16
 3456              	.LCFI122:
 3457              		.cfi_def_cfa_offset 24
 3458 0004 00AF     		add	r7, sp, #0
 3459              	.LCFI123:
 3460              		.cfi_def_cfa_register 7
 3461 0006 7860     		str	r0, [r7, #4]
 3462 0008 3960     		str	r1, [r7]
2834:../../../FreeRTOS_9_0/Source/tasks.c **** 	configASSERT( pxEventList );
 3463              		.loc 1 2834 0
 3464 000a 7B68     		ldr	r3, [r7, #4]
 3465 000c 002B     		cmp	r3, #0
 3466 000e 09D1     		bne	.L216
 3467              	.LBB140:
 3468              	.LBB141:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3469              		.loc 2 237 0 discriminator 1
 3470              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3471 0010 4FF05003 			mov r3, #80												
 3472 0014 83F31188 		msr basepri, r3											
 3473 0018 BFF36F8F 		isb														
 3474 001c BFF34F8F 		dsb														
 3475              	
 3476              	@ 0 "" 2
 3477              		.thumb
 3478 0020 FB60     		str	r3, [r7, #12]
 3479              	.L217:
 3480              	.LBE141:
 3481              	.LBE140:
 3482              		.loc 1 2834 0 discriminator 1
 3483 0022 FEE7     		b	.L217
 3484              	.L216:
2835:../../../FreeRTOS_9_0/Source/tasks.c **** 
2836:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2837:../../../FreeRTOS_9_0/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2838:../../../FreeRTOS_9_0/Source/tasks.c **** 
2839:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2840:../../../FreeRTOS_9_0/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2841:../../../FreeRTOS_9_0/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2842:../../../FreeRTOS_9_0/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2843:../../../FreeRTOS_9_0/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 3485              		.loc 1 2843 0
 3486 0024 064B     		ldr	r3, .L218
 3487 0026 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccIgarPJ.s 			page 116


 3488 0028 1833     		adds	r3, r3, #24
 3489 002a 7868     		ldr	r0, [r7, #4]
 3490 002c 1946     		mov	r1, r3
 3491 002e FFF7FEFF 		bl	vListInsert
2844:../../../FreeRTOS_9_0/Source/tasks.c **** 
2845:../../../FreeRTOS_9_0/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 3492              		.loc 1 2845 0
 3493 0032 3868     		ldr	r0, [r7]
 3494 0034 0121     		movs	r1, #1
 3495 0036 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
2846:../../../FreeRTOS_9_0/Source/tasks.c **** }
 3496              		.loc 1 2846 0
 3497 003a 1037     		adds	r7, r7, #16
 3498              	.LCFI124:
 3499              		.cfi_def_cfa_offset 8
 3500 003c BD46     		mov	sp, r7
 3501              	.LCFI125:
 3502              		.cfi_def_cfa_register 13
 3503              		@ sp needed
 3504 003e 80BD     		pop	{r7, pc}
 3505              	.L219:
 3506              		.align	2
 3507              	.L218:
 3508 0040 00000000 		.word	pxCurrentTCB
 3509              		.cfi_endproc
 3510              	.LFE29:
 3512              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3513              		.align	2
 3514              		.global	vTaskPlaceOnUnorderedEventList
 3515              		.thumb
 3516              		.thumb_func
 3518              	vTaskPlaceOnUnorderedEventList:
 3519              	.LFB30:
2847:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
2848:../../../FreeRTOS_9_0/Source/tasks.c **** 
2849:../../../FreeRTOS_9_0/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2850:../../../FreeRTOS_9_0/Source/tasks.c **** {
 3520              		.loc 1 2850 0
 3521              		.cfi_startproc
 3522              		@ args = 0, pretend = 0, frame = 24
 3523              		@ frame_needed = 1, uses_anonymous_args = 0
 3524 0000 80B5     		push	{r7, lr}
 3525              	.LCFI126:
 3526              		.cfi_def_cfa_offset 8
 3527              		.cfi_offset 7, -8
 3528              		.cfi_offset 14, -4
 3529 0002 86B0     		sub	sp, sp, #24
 3530              	.LCFI127:
 3531              		.cfi_def_cfa_offset 32
 3532 0004 00AF     		add	r7, sp, #0
 3533              	.LCFI128:
 3534              		.cfi_def_cfa_register 7
 3535 0006 F860     		str	r0, [r7, #12]
 3536 0008 B960     		str	r1, [r7, #8]
 3537 000a 7A60     		str	r2, [r7, #4]
2851:../../../FreeRTOS_9_0/Source/tasks.c **** 	configASSERT( pxEventList );
 3538              		.loc 1 2851 0
ARM GAS  /tmp/ccIgarPJ.s 			page 117


 3539 000c FB68     		ldr	r3, [r7, #12]
 3540 000e 002B     		cmp	r3, #0
 3541 0010 09D1     		bne	.L221
 3542              	.LBB142:
 3543              	.LBB143:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3544              		.loc 2 237 0 discriminator 1
 3545              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3546 0012 4FF05003 			mov r3, #80												
 3547 0016 83F31188 		msr basepri, r3											
 3548 001a BFF36F8F 		isb														
 3549 001e BFF34F8F 		dsb														
 3550              	
 3551              	@ 0 "" 2
 3552              		.thumb
 3553 0022 7B61     		str	r3, [r7, #20]
 3554              	.L222:
 3555              	.LBE143:
 3556              	.LBE142:
 3557              		.loc 1 2851 0 discriminator 1
 3558 0024 FEE7     		b	.L222
 3559              	.L221:
2852:../../../FreeRTOS_9_0/Source/tasks.c **** 
2853:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2854:../../../FreeRTOS_9_0/Source/tasks.c **** 	the event groups implementation. */
2855:../../../FreeRTOS_9_0/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
 3560              		.loc 1 2855 0
 3561 0026 114B     		ldr	r3, .L225
 3562 0028 1B68     		ldr	r3, [r3]
 3563 002a 002B     		cmp	r3, #0
 3564 002c 09D1     		bne	.L223
 3565              	.LBB144:
 3566              	.LBB145:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3567              		.loc 2 237 0 discriminator 1
 3568              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3569 002e 4FF05003 			mov r3, #80												
 3570 0032 83F31188 		msr basepri, r3											
 3571 0036 BFF36F8F 		isb														
 3572 003a BFF34F8F 		dsb														
 3573              	
 3574              	@ 0 "" 2
 3575              		.thumb
 3576 003e 3B61     		str	r3, [r7, #16]
 3577              	.L224:
 3578              	.LBE145:
 3579              	.LBE144:
 3580              		.loc 1 2855 0 discriminator 2
 3581 0040 FEE7     		b	.L224
 3582              	.L223:
2856:../../../FreeRTOS_9_0/Source/tasks.c **** 
2857:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2858:../../../FreeRTOS_9_0/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2859:../../../FreeRTOS_9_0/Source/tasks.c **** 	task that is not in the Blocked state. */
2860:../../../FreeRTOS_9_0/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
 3583              		.loc 1 2860 0
 3584 0042 0B4B     		ldr	r3, .L225+4
ARM GAS  /tmp/ccIgarPJ.s 			page 118


 3585 0044 1B68     		ldr	r3, [r3]
 3586 0046 BA68     		ldr	r2, [r7, #8]
 3587 0048 42F00042 		orr	r2, r2, #-2147483648
 3588 004c 9A61     		str	r2, [r3, #24]
2861:../../../FreeRTOS_9_0/Source/tasks.c **** 
2862:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2863:../../../FreeRTOS_9_0/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2864:../../../FreeRTOS_9_0/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
2865:../../../FreeRTOS_9_0/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2866:../../../FreeRTOS_9_0/Source/tasks.c **** 	the task level). */
2867:../../../FreeRTOS_9_0/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 3589              		.loc 1 2867 0
 3590 004e 084B     		ldr	r3, .L225+4
 3591 0050 1B68     		ldr	r3, [r3]
 3592 0052 1833     		adds	r3, r3, #24
 3593 0054 F868     		ldr	r0, [r7, #12]
 3594 0056 1946     		mov	r1, r3
 3595 0058 FFF7FEFF 		bl	vListInsertEnd
2868:../../../FreeRTOS_9_0/Source/tasks.c **** 
2869:../../../FreeRTOS_9_0/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 3596              		.loc 1 2869 0
 3597 005c 7868     		ldr	r0, [r7, #4]
 3598 005e 0121     		movs	r1, #1
 3599 0060 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
2870:../../../FreeRTOS_9_0/Source/tasks.c **** }
 3600              		.loc 1 2870 0
 3601 0064 1837     		adds	r7, r7, #24
 3602              	.LCFI129:
 3603              		.cfi_def_cfa_offset 8
 3604 0066 BD46     		mov	sp, r7
 3605              	.LCFI130:
 3606              		.cfi_def_cfa_register 13
 3607              		@ sp needed
 3608 0068 80BD     		pop	{r7, pc}
 3609              	.L226:
 3610 006a 00BF     		.align	2
 3611              	.L225:
 3612 006c 00000000 		.word	uxSchedulerSuspended
 3613 0070 00000000 		.word	pxCurrentTCB
 3614              		.cfi_endproc
 3615              	.LFE30:
 3617              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3618              		.align	2
 3619              		.global	xTaskRemoveFromEventList
 3620              		.thumb
 3621              		.thumb_func
 3623              	xTaskRemoveFromEventList:
 3624              	.LFB31:
2871:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
2872:../../../FreeRTOS_9_0/Source/tasks.c **** 
2873:../../../FreeRTOS_9_0/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
2874:../../../FreeRTOS_9_0/Source/tasks.c **** 
2875:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
2876:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2877:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( pxEventList );
2878:../../../FreeRTOS_9_0/Source/tasks.c **** 
2879:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* This function should not be called by application code hence the
ARM GAS  /tmp/ccIgarPJ.s 			page 119


2880:../../../FreeRTOS_9_0/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2881:../../../FreeRTOS_9_0/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2882:../../../FreeRTOS_9_0/Source/tasks.c **** 		it should be called with the scheduler suspended. */
2883:../../../FreeRTOS_9_0/Source/tasks.c **** 
2884:../../../FreeRTOS_9_0/Source/tasks.c **** 
2885:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2886:../../../FreeRTOS_9_0/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
2887:../../../FreeRTOS_9_0/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2888:../../../FreeRTOS_9_0/Source/tasks.c **** 		can be used in place of vListInsert. */
2889:../../../FreeRTOS_9_0/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2890:../../../FreeRTOS_9_0/Source/tasks.c **** 
2891:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
2892:../../../FreeRTOS_9_0/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
2893:../../../FreeRTOS_9_0/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
2894:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
2895:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2896:../../../FreeRTOS_9_0/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
2897:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2898:../../../FreeRTOS_9_0/Source/tasks.c **** 
2899:../../../FreeRTOS_9_0/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
2900:../../../FreeRTOS_9_0/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
2901:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2902:../../../FreeRTOS_9_0/Source/tasks.c **** 
2903:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_TIMERS */
2904:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
2905:../../../FreeRTOS_9_0/Source/tasks.c **** 
2906:../../../FreeRTOS_9_0/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2907:../../../FreeRTOS_9_0/Source/tasks.c **** {
 3625              		.loc 1 2907 0
 3626              		.cfi_startproc
 3627              		@ args = 0, pretend = 0, frame = 24
 3628              		@ frame_needed = 1, uses_anonymous_args = 0
 3629 0000 80B5     		push	{r7, lr}
 3630              	.LCFI131:
 3631              		.cfi_def_cfa_offset 8
 3632              		.cfi_offset 7, -8
 3633              		.cfi_offset 14, -4
 3634 0002 86B0     		sub	sp, sp, #24
 3635              	.LCFI132:
 3636              		.cfi_def_cfa_offset 32
 3637 0004 00AF     		add	r7, sp, #0
 3638              	.LCFI133:
 3639              		.cfi_def_cfa_register 7
 3640 0006 7860     		str	r0, [r7, #4]
2908:../../../FreeRTOS_9_0/Source/tasks.c **** TCB_t *pxUnblockedTCB;
2909:../../../FreeRTOS_9_0/Source/tasks.c **** BaseType_t xReturn;
2910:../../../FreeRTOS_9_0/Source/tasks.c **** 
2911:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2912:../../../FreeRTOS_9_0/Source/tasks.c **** 	called from a critical section within an ISR. */
2913:../../../FreeRTOS_9_0/Source/tasks.c **** 
2914:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2915:../../../FreeRTOS_9_0/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2916:../../../FreeRTOS_9_0/Source/tasks.c **** 	the delayed list, and add it to the ready list.
2917:../../../FreeRTOS_9_0/Source/tasks.c **** 
2918:../../../FreeRTOS_9_0/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
2919:../../../FreeRTOS_9_0/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2920:../../../FreeRTOS_9_0/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
ARM GAS  /tmp/ccIgarPJ.s 			page 120


2921:../../../FreeRTOS_9_0/Source/tasks.c **** 
2922:../../../FreeRTOS_9_0/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
2923:../../../FreeRTOS_9_0/Source/tasks.c **** 	pxEventList is not empty. */
2924:../../../FreeRTOS_9_0/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 3641              		.loc 1 2924 0
 3642 0008 7B68     		ldr	r3, [r7, #4]
 3643 000a DB68     		ldr	r3, [r3, #12]
 3644 000c DB68     		ldr	r3, [r3, #12]
 3645 000e 3B61     		str	r3, [r7, #16]
2925:../../../FreeRTOS_9_0/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3646              		.loc 1 2925 0
 3647 0010 3B69     		ldr	r3, [r7, #16]
 3648 0012 002B     		cmp	r3, #0
 3649 0014 09D1     		bne	.L228
 3650              	.LBB146:
 3651              	.LBB147:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3652              		.loc 2 237 0 discriminator 1
 3653              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3654 0016 4FF05003 			mov r3, #80												
 3655 001a 83F31188 		msr basepri, r3											
 3656 001e BFF36F8F 		isb														
 3657 0022 BFF34F8F 		dsb														
 3658              	
 3659              	@ 0 "" 2
 3660              		.thumb
 3661 0026 FB60     		str	r3, [r7, #12]
 3662              	.L229:
 3663              	.LBE147:
 3664              	.LBE146:
 3665              		.loc 1 2925 0 discriminator 1
 3666 0028 FEE7     		b	.L229
 3667              	.L228:
2926:../../../FreeRTOS_9_0/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3668              		.loc 1 2926 0
 3669 002a 3B69     		ldr	r3, [r7, #16]
 3670 002c 1833     		adds	r3, r3, #24
 3671 002e 1846     		mov	r0, r3
 3672 0030 FFF7FEFF 		bl	uxListRemove
2927:../../../FreeRTOS_9_0/Source/tasks.c **** 
2928:../../../FreeRTOS_9_0/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3673              		.loc 1 2928 0
 3674 0034 204B     		ldr	r3, .L235
 3675 0036 1B68     		ldr	r3, [r3]
 3676 0038 002B     		cmp	r3, #0
 3677 003a 22D1     		bne	.L230
2929:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2930:../../../FreeRTOS_9_0/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 3678              		.loc 1 2930 0
 3679 003c 3B69     		ldr	r3, [r7, #16]
 3680 003e 0433     		adds	r3, r3, #4
 3681 0040 1846     		mov	r0, r3
 3682 0042 FFF7FEFF 		bl	uxListRemove
2931:../../../FreeRTOS_9_0/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3683              		.loc 1 2931 0
 3684 0046 3B69     		ldr	r3, [r7, #16]
 3685 0048 1846     		mov	r0, r3
ARM GAS  /tmp/ccIgarPJ.s 			page 121


 3686 004a FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStartReady
 3687 004e 3B69     		ldr	r3, [r7, #16]
 3688 0050 DB6A     		ldr	r3, [r3, #44]
 3689 0052 1A46     		mov	r2, r3
 3690 0054 0123     		movs	r3, #1
 3691 0056 03FA02F2 		lsl	r2, r3, r2
 3692 005a 184B     		ldr	r3, .L235+4
 3693 005c 1B68     		ldr	r3, [r3]
 3694 005e 1343     		orrs	r3, r3, r2
 3695 0060 164A     		ldr	r2, .L235+4
 3696 0062 1360     		str	r3, [r2]
 3697 0064 3B69     		ldr	r3, [r7, #16]
 3698 0066 DA6A     		ldr	r2, [r3, #44]
 3699 0068 1346     		mov	r3, r2
 3700 006a 9B00     		lsls	r3, r3, #2
 3701 006c 1344     		add	r3, r3, r2
 3702 006e 9B00     		lsls	r3, r3, #2
 3703 0070 134A     		ldr	r2, .L235+8
 3704 0072 1A44     		add	r2, r2, r3
 3705 0074 3B69     		ldr	r3, [r7, #16]
 3706 0076 0433     		adds	r3, r3, #4
 3707 0078 1046     		mov	r0, r2
 3708 007a 1946     		mov	r1, r3
 3709 007c FFF7FEFF 		bl	vListInsertEnd
 3710 0080 05E0     		b	.L231
 3711              	.L230:
2932:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2933:../../../FreeRTOS_9_0/Source/tasks.c **** 	else
2934:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2935:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
2936:../../../FreeRTOS_9_0/Source/tasks.c **** 		pending until the scheduler is resumed. */
2937:../../../FreeRTOS_9_0/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 3712              		.loc 1 2937 0
 3713 0082 3B69     		ldr	r3, [r7, #16]
 3714 0084 1833     		adds	r3, r3, #24
 3715 0086 0F48     		ldr	r0, .L235+12
 3716 0088 1946     		mov	r1, r3
 3717 008a FFF7FEFF 		bl	vListInsertEnd
 3718              	.L231:
2938:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2939:../../../FreeRTOS_9_0/Source/tasks.c **** 
2940:../../../FreeRTOS_9_0/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 3719              		.loc 1 2940 0
 3720 008e 3B69     		ldr	r3, [r7, #16]
 3721 0090 DA6A     		ldr	r2, [r3, #44]
 3722 0092 0D4B     		ldr	r3, .L235+16
 3723 0094 1B68     		ldr	r3, [r3]
 3724 0096 DB6A     		ldr	r3, [r3, #44]
 3725 0098 9A42     		cmp	r2, r3
 3726 009a 05D9     		bls	.L232
2941:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2942:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
2943:../../../FreeRTOS_9_0/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
2944:../../../FreeRTOS_9_0/Source/tasks.c **** 		it should force a context switch now. */
2945:../../../FreeRTOS_9_0/Source/tasks.c **** 		xReturn = pdTRUE;
 3727              		.loc 1 2945 0
 3728 009c 0123     		movs	r3, #1
ARM GAS  /tmp/ccIgarPJ.s 			page 122


 3729 009e 7B61     		str	r3, [r7, #20]
2946:../../../FreeRTOS_9_0/Source/tasks.c **** 
2947:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2948:../../../FreeRTOS_9_0/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2949:../../../FreeRTOS_9_0/Source/tasks.c **** 		xYieldPending = pdTRUE;
 3730              		.loc 1 2949 0
 3731 00a0 0A4B     		ldr	r3, .L235+20
 3732 00a2 0122     		movs	r2, #1
 3733 00a4 1A60     		str	r2, [r3]
 3734 00a6 01E0     		b	.L233
 3735              	.L232:
2950:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2951:../../../FreeRTOS_9_0/Source/tasks.c **** 	else
2952:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2953:../../../FreeRTOS_9_0/Source/tasks.c **** 		xReturn = pdFALSE;
 3736              		.loc 1 2953 0
 3737 00a8 0023     		movs	r3, #0
 3738 00aa 7B61     		str	r3, [r7, #20]
 3739              	.L233:
2954:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2955:../../../FreeRTOS_9_0/Source/tasks.c **** 
2956:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
2957:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2958:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
2959:../../../FreeRTOS_9_0/Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
2960:../../../FreeRTOS_9_0/Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
2961:../../../FreeRTOS_9_0/Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
2962:../../../FreeRTOS_9_0/Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
2963:../../../FreeRTOS_9_0/Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
2964:../../../FreeRTOS_9_0/Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
2965:../../../FreeRTOS_9_0/Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
2966:../../../FreeRTOS_9_0/Source/tasks.c **** 		prvResetNextTaskUnblockTime();
2967:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2968:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
2969:../../../FreeRTOS_9_0/Source/tasks.c **** 
2970:../../../FreeRTOS_9_0/Source/tasks.c **** 	return xReturn;
 3740              		.loc 1 2970 0
 3741 00ac 7B69     		ldr	r3, [r7, #20]
2971:../../../FreeRTOS_9_0/Source/tasks.c **** }
 3742              		.loc 1 2971 0
 3743 00ae 1846     		mov	r0, r3
 3744 00b0 1837     		adds	r7, r7, #24
 3745              	.LCFI134:
 3746              		.cfi_def_cfa_offset 8
 3747 00b2 BD46     		mov	sp, r7
 3748              	.LCFI135:
 3749              		.cfi_def_cfa_register 13
 3750              		@ sp needed
 3751 00b4 80BD     		pop	{r7, pc}
 3752              	.L236:
 3753 00b6 00BF     		.align	2
 3754              	.L235:
 3755 00b8 00000000 		.word	uxSchedulerSuspended
 3756 00bc 00000000 		.word	uxTopReadyPriority
 3757 00c0 00000000 		.word	pxReadyTasksLists
 3758 00c4 00000000 		.word	xPendingReadyList
 3759 00c8 00000000 		.word	pxCurrentTCB
ARM GAS  /tmp/ccIgarPJ.s 			page 123


 3760 00cc 00000000 		.word	xYieldPending
 3761              		.cfi_endproc
 3762              	.LFE31:
 3764              		.section	.text.xTaskRemoveFromUnorderedEventList,"ax",%progbits
 3765              		.align	2
 3766              		.global	xTaskRemoveFromUnorderedEventList
 3767              		.thumb
 3768              		.thumb_func
 3770              	xTaskRemoveFromUnorderedEventList:
 3771              	.LFB32:
2972:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
2973:../../../FreeRTOS_9_0/Source/tasks.c **** 
2974:../../../FreeRTOS_9_0/Source/tasks.c **** BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemV
2975:../../../FreeRTOS_9_0/Source/tasks.c **** {
 3772              		.loc 1 2975 0
 3773              		.cfi_startproc
 3774              		@ args = 0, pretend = 0, frame = 24
 3775              		@ frame_needed = 1, uses_anonymous_args = 0
 3776 0000 80B5     		push	{r7, lr}
 3777              	.LCFI136:
 3778              		.cfi_def_cfa_offset 8
 3779              		.cfi_offset 7, -8
 3780              		.cfi_offset 14, -4
 3781 0002 86B0     		sub	sp, sp, #24
 3782              	.LCFI137:
 3783              		.cfi_def_cfa_offset 32
 3784 0004 00AF     		add	r7, sp, #0
 3785              	.LCFI138:
 3786              		.cfi_def_cfa_register 7
 3787 0006 7860     		str	r0, [r7, #4]
 3788 0008 3960     		str	r1, [r7]
2976:../../../FreeRTOS_9_0/Source/tasks.c **** TCB_t *pxUnblockedTCB;
2977:../../../FreeRTOS_9_0/Source/tasks.c **** BaseType_t xReturn;
2978:../../../FreeRTOS_9_0/Source/tasks.c **** 
2979:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2980:../../../FreeRTOS_9_0/Source/tasks.c **** 	the event flags implementation. */
2981:../../../FreeRTOS_9_0/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
 3789              		.loc 1 2981 0
 3790 000a 2E4B     		ldr	r3, .L245
 3791 000c 1B68     		ldr	r3, [r3]
 3792 000e 002B     		cmp	r3, #0
 3793 0010 09D1     		bne	.L238
 3794              	.LBB148:
 3795              	.LBB149:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3796              		.loc 2 237 0 discriminator 1
 3797              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3798 0012 4FF05003 			mov r3, #80												
 3799 0016 83F31188 		msr basepri, r3											
 3800 001a BFF36F8F 		isb														
 3801 001e BFF34F8F 		dsb														
 3802              	
 3803              	@ 0 "" 2
 3804              		.thumb
 3805 0022 FB60     		str	r3, [r7, #12]
 3806              	.L239:
 3807              	.LBE149:
ARM GAS  /tmp/ccIgarPJ.s 			page 124


 3808              	.LBE148:
 3809              		.loc 1 2981 0 discriminator 1
 3810 0024 FEE7     		b	.L239
 3811              	.L238:
2982:../../../FreeRTOS_9_0/Source/tasks.c **** 
2983:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Store the new item value in the event list. */
2984:../../../FreeRTOS_9_0/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 3812              		.loc 1 2984 0
 3813 0026 3B68     		ldr	r3, [r7]
 3814 0028 43F00042 		orr	r2, r3, #-2147483648
 3815 002c 7B68     		ldr	r3, [r7, #4]
 3816 002e 1A60     		str	r2, [r3]
2985:../../../FreeRTOS_9_0/Source/tasks.c **** 
2986:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
2987:../../../FreeRTOS_9_0/Source/tasks.c **** 	event flags. */
2988:../../../FreeRTOS_9_0/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 3817              		.loc 1 2988 0
 3818 0030 7B68     		ldr	r3, [r7, #4]
 3819 0032 DB68     		ldr	r3, [r3, #12]
 3820 0034 3B61     		str	r3, [r7, #16]
2989:../../../FreeRTOS_9_0/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3821              		.loc 1 2989 0
 3822 0036 3B69     		ldr	r3, [r7, #16]
 3823 0038 002B     		cmp	r3, #0
 3824 003a 09D1     		bne	.L240
 3825              	.LBB150:
 3826              	.LBB151:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3827              		.loc 2 237 0 discriminator 1
 3828              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3829 003c 4FF05003 			mov r3, #80												
 3830 0040 83F31188 		msr basepri, r3											
 3831 0044 BFF36F8F 		isb														
 3832 0048 BFF34F8F 		dsb														
 3833              	
 3834              	@ 0 "" 2
 3835              		.thumb
 3836 004c BB60     		str	r3, [r7, #8]
 3837              	.L241:
 3838              	.LBE151:
 3839              	.LBE150:
 3840              		.loc 1 2989 0 discriminator 2
 3841 004e FEE7     		b	.L241
 3842              	.L240:
2990:../../../FreeRTOS_9_0/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3843              		.loc 1 2990 0
 3844 0050 7868     		ldr	r0, [r7, #4]
 3845 0052 FFF7FEFF 		bl	uxListRemove
2991:../../../FreeRTOS_9_0/Source/tasks.c **** 
2992:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
2993:../../../FreeRTOS_9_0/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
2994:../../../FreeRTOS_9_0/Source/tasks.c **** 	lists. */
2995:../../../FreeRTOS_9_0/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 3846              		.loc 1 2995 0
 3847 0056 3B69     		ldr	r3, [r7, #16]
 3848 0058 0433     		adds	r3, r3, #4
 3849 005a 1846     		mov	r0, r3
ARM GAS  /tmp/ccIgarPJ.s 			page 125


 3850 005c FFF7FEFF 		bl	uxListRemove
2996:../../../FreeRTOS_9_0/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3851              		.loc 1 2996 0
 3852 0060 3B69     		ldr	r3, [r7, #16]
 3853 0062 1846     		mov	r0, r3
 3854 0064 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStartReady
 3855 0068 3B69     		ldr	r3, [r7, #16]
 3856 006a DB6A     		ldr	r3, [r3, #44]
 3857 006c 1A46     		mov	r2, r3
 3858 006e 0123     		movs	r3, #1
 3859 0070 03FA02F2 		lsl	r2, r3, r2
 3860 0074 144B     		ldr	r3, .L245+4
 3861 0076 1B68     		ldr	r3, [r3]
 3862 0078 1343     		orrs	r3, r3, r2
 3863 007a 134A     		ldr	r2, .L245+4
 3864 007c 1360     		str	r3, [r2]
 3865 007e 3B69     		ldr	r3, [r7, #16]
 3866 0080 DA6A     		ldr	r2, [r3, #44]
 3867 0082 1346     		mov	r3, r2
 3868 0084 9B00     		lsls	r3, r3, #2
 3869 0086 1344     		add	r3, r3, r2
 3870 0088 9B00     		lsls	r3, r3, #2
 3871 008a 104A     		ldr	r2, .L245+8
 3872 008c 1A44     		add	r2, r2, r3
 3873 008e 3B69     		ldr	r3, [r7, #16]
 3874 0090 0433     		adds	r3, r3, #4
 3875 0092 1046     		mov	r0, r2
 3876 0094 1946     		mov	r1, r3
 3877 0096 FFF7FEFF 		bl	vListInsertEnd
2997:../../../FreeRTOS_9_0/Source/tasks.c **** 
2998:../../../FreeRTOS_9_0/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 3878              		.loc 1 2998 0
 3879 009a 3B69     		ldr	r3, [r7, #16]
 3880 009c DA6A     		ldr	r2, [r3, #44]
 3881 009e 0C4B     		ldr	r3, .L245+12
 3882 00a0 1B68     		ldr	r3, [r3]
 3883 00a2 DB6A     		ldr	r3, [r3, #44]
 3884 00a4 9A42     		cmp	r2, r3
 3885 00a6 05D9     		bls	.L242
2999:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
3000:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Return true if the task removed from the event list has
3001:../../../FreeRTOS_9_0/Source/tasks.c **** 		a higher priority than the calling task.  This allows
3002:../../../FreeRTOS_9_0/Source/tasks.c **** 		the calling task to know if it should force a context
3003:../../../FreeRTOS_9_0/Source/tasks.c **** 		switch now. */
3004:../../../FreeRTOS_9_0/Source/tasks.c **** 		xReturn = pdTRUE;
 3886              		.loc 1 3004 0
 3887 00a8 0123     		movs	r3, #1
 3888 00aa 7B61     		str	r3, [r7, #20]
3005:../../../FreeRTOS_9_0/Source/tasks.c **** 
3006:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3007:../../../FreeRTOS_9_0/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3008:../../../FreeRTOS_9_0/Source/tasks.c **** 		xYieldPending = pdTRUE;
 3889              		.loc 1 3008 0
 3890 00ac 094B     		ldr	r3, .L245+16
 3891 00ae 0122     		movs	r2, #1
 3892 00b0 1A60     		str	r2, [r3]
 3893 00b2 01E0     		b	.L243
ARM GAS  /tmp/ccIgarPJ.s 			page 126


 3894              	.L242:
3009:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
3010:../../../FreeRTOS_9_0/Source/tasks.c **** 	else
3011:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
3012:../../../FreeRTOS_9_0/Source/tasks.c **** 		xReturn = pdFALSE;
 3895              		.loc 1 3012 0
 3896 00b4 0023     		movs	r3, #0
 3897 00b6 7B61     		str	r3, [r7, #20]
 3898              	.L243:
3013:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
3014:../../../FreeRTOS_9_0/Source/tasks.c **** 
3015:../../../FreeRTOS_9_0/Source/tasks.c **** 	return xReturn;
 3899              		.loc 1 3015 0
 3900 00b8 7B69     		ldr	r3, [r7, #20]
3016:../../../FreeRTOS_9_0/Source/tasks.c **** }
 3901              		.loc 1 3016 0
 3902 00ba 1846     		mov	r0, r3
 3903 00bc 1837     		adds	r7, r7, #24
 3904              	.LCFI139:
 3905              		.cfi_def_cfa_offset 8
 3906 00be BD46     		mov	sp, r7
 3907              	.LCFI140:
 3908              		.cfi_def_cfa_register 13
 3909              		@ sp needed
 3910 00c0 80BD     		pop	{r7, pc}
 3911              	.L246:
 3912 00c2 00BF     		.align	2
 3913              	.L245:
 3914 00c4 00000000 		.word	uxSchedulerSuspended
 3915 00c8 00000000 		.word	uxTopReadyPriority
 3916 00cc 00000000 		.word	pxReadyTasksLists
 3917 00d0 00000000 		.word	pxCurrentTCB
 3918 00d4 00000000 		.word	xYieldPending
 3919              		.cfi_endproc
 3920              	.LFE32:
 3922              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3923              		.align	2
 3924              		.global	vTaskSetTimeOutState
 3925              		.thumb
 3926              		.thumb_func
 3928              	vTaskSetTimeOutState:
 3929              	.LFB33:
3017:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3018:../../../FreeRTOS_9_0/Source/tasks.c **** 
3019:../../../FreeRTOS_9_0/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3020:../../../FreeRTOS_9_0/Source/tasks.c **** {
 3930              		.loc 1 3020 0
 3931              		.cfi_startproc
 3932              		@ args = 0, pretend = 0, frame = 16
 3933              		@ frame_needed = 1, uses_anonymous_args = 0
 3934              		@ link register save eliminated.
 3935 0000 80B4     		push	{r7}
 3936              	.LCFI141:
 3937              		.cfi_def_cfa_offset 4
 3938              		.cfi_offset 7, -4
 3939 0002 85B0     		sub	sp, sp, #20
 3940              	.LCFI142:
ARM GAS  /tmp/ccIgarPJ.s 			page 127


 3941              		.cfi_def_cfa_offset 24
 3942 0004 00AF     		add	r7, sp, #0
 3943              	.LCFI143:
 3944              		.cfi_def_cfa_register 7
 3945 0006 7860     		str	r0, [r7, #4]
3021:../../../FreeRTOS_9_0/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3946              		.loc 1 3021 0
 3947 0008 7B68     		ldr	r3, [r7, #4]
 3948 000a 002B     		cmp	r3, #0
 3949 000c 09D1     		bne	.L248
 3950              	.LBB152:
 3951              	.LBB153:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3952              		.loc 2 237 0 discriminator 1
 3953              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3954 000e 4FF05003 			mov r3, #80												
 3955 0012 83F31188 		msr basepri, r3											
 3956 0016 BFF36F8F 		isb														
 3957 001a BFF34F8F 		dsb														
 3958              	
 3959              	@ 0 "" 2
 3960              		.thumb
 3961 001e FB60     		str	r3, [r7, #12]
 3962              	.L249:
 3963              	.LBE153:
 3964              	.LBE152:
 3965              		.loc 1 3021 0 discriminator 1
 3966 0020 FEE7     		b	.L249
 3967              	.L248:
3022:../../../FreeRTOS_9_0/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 3968              		.loc 1 3022 0
 3969 0022 064B     		ldr	r3, .L250
 3970 0024 1A68     		ldr	r2, [r3]
 3971 0026 7B68     		ldr	r3, [r7, #4]
 3972 0028 1A60     		str	r2, [r3]
3023:../../../FreeRTOS_9_0/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3973              		.loc 1 3023 0
 3974 002a 054B     		ldr	r3, .L250+4
 3975 002c 1A68     		ldr	r2, [r3]
 3976 002e 7B68     		ldr	r3, [r7, #4]
 3977 0030 5A60     		str	r2, [r3, #4]
3024:../../../FreeRTOS_9_0/Source/tasks.c **** }
 3978              		.loc 1 3024 0
 3979 0032 1437     		adds	r7, r7, #20
 3980              	.LCFI144:
 3981              		.cfi_def_cfa_offset 4
 3982 0034 BD46     		mov	sp, r7
 3983              	.LCFI145:
 3984              		.cfi_def_cfa_register 13
 3985              		@ sp needed
 3986 0036 5DF8047B 		ldr	r7, [sp], #4
 3987              	.LCFI146:
 3988              		.cfi_restore 7
 3989              		.cfi_def_cfa_offset 0
 3990 003a 7047     		bx	lr
 3991              	.L251:
 3992              		.align	2
ARM GAS  /tmp/ccIgarPJ.s 			page 128


 3993              	.L250:
 3994 003c 00000000 		.word	xNumOfOverflows
 3995 0040 00000000 		.word	xTickCount
 3996              		.cfi_endproc
 3997              	.LFE33:
 3999              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 4000              		.align	2
 4001              		.global	xTaskCheckForTimeOut
 4002              		.thumb
 4003              		.thumb_func
 4005              	xTaskCheckForTimeOut:
 4006              	.LFB34:
3025:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3026:../../../FreeRTOS_9_0/Source/tasks.c **** 
3027:../../../FreeRTOS_9_0/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3028:../../../FreeRTOS_9_0/Source/tasks.c **** {
 4007              		.loc 1 3028 0
 4008              		.cfi_startproc
 4009              		@ args = 0, pretend = 0, frame = 24
 4010              		@ frame_needed = 1, uses_anonymous_args = 0
 4011 0000 80B5     		push	{r7, lr}
 4012              	.LCFI147:
 4013              		.cfi_def_cfa_offset 8
 4014              		.cfi_offset 7, -8
 4015              		.cfi_offset 14, -4
 4016 0002 86B0     		sub	sp, sp, #24
 4017              	.LCFI148:
 4018              		.cfi_def_cfa_offset 32
 4019 0004 00AF     		add	r7, sp, #0
 4020              	.LCFI149:
 4021              		.cfi_def_cfa_register 7
 4022 0006 7860     		str	r0, [r7, #4]
 4023 0008 3960     		str	r1, [r7]
3029:../../../FreeRTOS_9_0/Source/tasks.c **** BaseType_t xReturn;
3030:../../../FreeRTOS_9_0/Source/tasks.c **** 
3031:../../../FreeRTOS_9_0/Source/tasks.c **** 	configASSERT( pxTimeOut );
 4024              		.loc 1 3031 0
 4025 000a 7B68     		ldr	r3, [r7, #4]
 4026 000c 002B     		cmp	r3, #0
 4027 000e 09D1     		bne	.L253
 4028              	.LBB154:
 4029              	.LBB155:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4030              		.loc 2 237 0 discriminator 1
 4031              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4032 0010 4FF05003 			mov r3, #80												
 4033 0014 83F31188 		msr basepri, r3											
 4034 0018 BFF36F8F 		isb														
 4035 001c BFF34F8F 		dsb														
 4036              	
 4037              	@ 0 "" 2
 4038              		.thumb
 4039 0020 FB60     		str	r3, [r7, #12]
 4040              	.L254:
 4041              	.LBE155:
 4042              	.LBE154:
 4043              		.loc 1 3031 0 discriminator 1
ARM GAS  /tmp/ccIgarPJ.s 			page 129


 4044 0022 FEE7     		b	.L254
 4045              	.L253:
3032:../../../FreeRTOS_9_0/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 4046              		.loc 1 3032 0
 4047 0024 3B68     		ldr	r3, [r7]
 4048 0026 002B     		cmp	r3, #0
 4049 0028 09D1     		bne	.L255
 4050              	.LBB156:
 4051              	.LBB157:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4052              		.loc 2 237 0 discriminator 1
 4053              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4054 002a 4FF05003 			mov r3, #80												
 4055 002e 83F31188 		msr basepri, r3											
 4056 0032 BFF36F8F 		isb														
 4057 0036 BFF34F8F 		dsb														
 4058              	
 4059              	@ 0 "" 2
 4060              		.thumb
 4061 003a BB60     		str	r3, [r7, #8]
 4062              	.L256:
 4063              	.LBE157:
 4064              	.LBE156:
 4065              		.loc 1 3032 0 discriminator 2
 4066 003c FEE7     		b	.L256
 4067              	.L255:
3033:../../../FreeRTOS_9_0/Source/tasks.c **** 
3034:../../../FreeRTOS_9_0/Source/tasks.c **** 	taskENTER_CRITICAL();
 4068              		.loc 1 3034 0
 4069 003e FFF7FEFF 		bl	vPortEnterCritical
 4070              	.LBB158:
3035:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
3036:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3037:../../../FreeRTOS_9_0/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
 4071              		.loc 1 3037 0
 4072 0042 1C4B     		ldr	r3, .L262
 4073 0044 1B68     		ldr	r3, [r3]
 4074 0046 3B61     		str	r3, [r7, #16]
3038:../../../FreeRTOS_9_0/Source/tasks.c **** 
3039:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3040:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
3041:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3042:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3043:../../../FreeRTOS_9_0/Source/tasks.c **** 				but has the same result. */
3044:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3045:../../../FreeRTOS_9_0/Source/tasks.c **** 				xReturn = pdTRUE;
3046:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3047:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
3048:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif
3049:../../../FreeRTOS_9_0/Source/tasks.c **** 
3050:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3051:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
 4075              		.loc 1 3051 0
 4076 0048 3B68     		ldr	r3, [r7]
 4077 004a 1B68     		ldr	r3, [r3]
 4078 004c B3F1FF3F 		cmp	r3, #-1
 4079 0050 02D1     		bne	.L257
ARM GAS  /tmp/ccIgarPJ.s 			page 130


3052:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3053:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3054:../../../FreeRTOS_9_0/Source/tasks.c **** 				specified is the maximum block time then the task should block
3055:../../../FreeRTOS_9_0/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3056:../../../FreeRTOS_9_0/Source/tasks.c **** 				xReturn = pdFALSE;
 4080              		.loc 1 3056 0
 4081 0052 0023     		movs	r3, #0
 4082 0054 7B61     		str	r3, [r7, #20]
 4083 0056 26E0     		b	.L258
 4084              	.L257:
3057:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3058:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
3059:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif
3060:../../../FreeRTOS_9_0/Source/tasks.c **** 
3061:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
 4085              		.loc 1 3061 0
 4086 0058 7B68     		ldr	r3, [r7, #4]
 4087 005a 1A68     		ldr	r2, [r3]
 4088 005c 164B     		ldr	r3, .L262+4
 4089 005e 1B68     		ldr	r3, [r3]
 4090 0060 9A42     		cmp	r2, r3
 4091 0062 07D0     		beq	.L259
 4092              		.loc 1 3061 0 is_stmt 0 discriminator 1
 4093 0064 7B68     		ldr	r3, [r7, #4]
 4094 0066 5A68     		ldr	r2, [r3, #4]
 4095 0068 3B69     		ldr	r3, [r7, #16]
 4096 006a 9A42     		cmp	r2, r3
 4097 006c 02D8     		bhi	.L259
3062:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3063:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* The tick count is greater than the time at which
3064:../../../FreeRTOS_9_0/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3065:../../../FreeRTOS_9_0/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3066:../../../FreeRTOS_9_0/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3067:../../../FreeRTOS_9_0/Source/tasks.c **** 			was called. */
3068:../../../FreeRTOS_9_0/Source/tasks.c **** 			xReturn = pdTRUE;
 4098              		.loc 1 3068 0 is_stmt 1
 4099 006e 0123     		movs	r3, #1
 4100 0070 7B61     		str	r3, [r7, #20]
 4101 0072 18E0     		b	.L258
 4102              	.L259:
3069:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3070:../../../FreeRTOS_9_0/Source/tasks.c **** 		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /
 4103              		.loc 1 3070 0
 4104 0074 7B68     		ldr	r3, [r7, #4]
 4105 0076 5B68     		ldr	r3, [r3, #4]
 4106 0078 3A69     		ldr	r2, [r7, #16]
 4107 007a D21A     		subs	r2, r2, r3
 4108 007c 3B68     		ldr	r3, [r7]
 4109 007e 1B68     		ldr	r3, [r3]
 4110 0080 9A42     		cmp	r2, r3
 4111 0082 0ED2     		bcs	.L260
3071:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3072:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3073:../../../FreeRTOS_9_0/Source/tasks.c **** 			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 4112              		.loc 1 3073 0
 4113 0084 3B68     		ldr	r3, [r7]
 4114 0086 1A68     		ldr	r2, [r3]
ARM GAS  /tmp/ccIgarPJ.s 			page 131


 4115 0088 7B68     		ldr	r3, [r7, #4]
 4116 008a 5968     		ldr	r1, [r3, #4]
 4117 008c 3B69     		ldr	r3, [r7, #16]
 4118 008e CB1A     		subs	r3, r1, r3
 4119 0090 1A44     		add	r2, r2, r3
 4120 0092 3B68     		ldr	r3, [r7]
 4121 0094 1A60     		str	r2, [r3]
3074:../../../FreeRTOS_9_0/Source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 4122              		.loc 1 3074 0
 4123 0096 7868     		ldr	r0, [r7, #4]
 4124 0098 FFF7FEFF 		bl	vTaskSetTimeOutState
3075:../../../FreeRTOS_9_0/Source/tasks.c **** 			xReturn = pdFALSE;
 4125              		.loc 1 3075 0
 4126 009c 0023     		movs	r3, #0
 4127 009e 7B61     		str	r3, [r7, #20]
 4128 00a0 01E0     		b	.L258
 4129              	.L260:
3076:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3077:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
3078:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3079:../../../FreeRTOS_9_0/Source/tasks.c **** 			xReturn = pdTRUE;
 4130              		.loc 1 3079 0
 4131 00a2 0123     		movs	r3, #1
 4132 00a4 7B61     		str	r3, [r7, #20]
 4133              	.L258:
 4134              	.LBE158:
3080:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3081:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
3082:../../../FreeRTOS_9_0/Source/tasks.c **** 	taskEXIT_CRITICAL();
 4135              		.loc 1 3082 0
 4136 00a6 FFF7FEFF 		bl	vPortExitCritical
3083:../../../FreeRTOS_9_0/Source/tasks.c **** 
3084:../../../FreeRTOS_9_0/Source/tasks.c **** 	return xReturn;
 4137              		.loc 1 3084 0
 4138 00aa 7B69     		ldr	r3, [r7, #20]
3085:../../../FreeRTOS_9_0/Source/tasks.c **** }
 4139              		.loc 1 3085 0
 4140 00ac 1846     		mov	r0, r3
 4141 00ae 1837     		adds	r7, r7, #24
 4142              	.LCFI150:
 4143              		.cfi_def_cfa_offset 8
 4144 00b0 BD46     		mov	sp, r7
 4145              	.LCFI151:
 4146              		.cfi_def_cfa_register 13
 4147              		@ sp needed
 4148 00b2 80BD     		pop	{r7, pc}
 4149              	.L263:
 4150              		.align	2
 4151              	.L262:
 4152 00b4 00000000 		.word	xTickCount
 4153 00b8 00000000 		.word	xNumOfOverflows
 4154              		.cfi_endproc
 4155              	.LFE34:
 4157              		.section	.text.vTaskMissedYield,"ax",%progbits
 4158              		.align	2
 4159              		.global	vTaskMissedYield
 4160              		.thumb
ARM GAS  /tmp/ccIgarPJ.s 			page 132


 4161              		.thumb_func
 4163              	vTaskMissedYield:
 4164              	.LFB35:
3086:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3087:../../../FreeRTOS_9_0/Source/tasks.c **** 
3088:../../../FreeRTOS_9_0/Source/tasks.c **** void vTaskMissedYield( void )
3089:../../../FreeRTOS_9_0/Source/tasks.c **** {
 4165              		.loc 1 3089 0
 4166              		.cfi_startproc
 4167              		@ args = 0, pretend = 0, frame = 0
 4168              		@ frame_needed = 1, uses_anonymous_args = 0
 4169              		@ link register save eliminated.
 4170 0000 80B4     		push	{r7}
 4171              	.LCFI152:
 4172              		.cfi_def_cfa_offset 4
 4173              		.cfi_offset 7, -4
 4174 0002 00AF     		add	r7, sp, #0
 4175              	.LCFI153:
 4176              		.cfi_def_cfa_register 7
3090:../../../FreeRTOS_9_0/Source/tasks.c **** 	xYieldPending = pdTRUE;
 4177              		.loc 1 3090 0
 4178 0004 034B     		ldr	r3, .L265
 4179 0006 0122     		movs	r2, #1
 4180 0008 1A60     		str	r2, [r3]
3091:../../../FreeRTOS_9_0/Source/tasks.c **** }
 4181              		.loc 1 3091 0
 4182 000a BD46     		mov	sp, r7
 4183              	.LCFI154:
 4184              		.cfi_def_cfa_register 13
 4185              		@ sp needed
 4186 000c 5DF8047B 		ldr	r7, [sp], #4
 4187              	.LCFI155:
 4188              		.cfi_restore 7
 4189              		.cfi_def_cfa_offset 0
 4190 0010 7047     		bx	lr
 4191              	.L266:
 4192 0012 00BF     		.align	2
 4193              	.L265:
 4194 0014 00000000 		.word	xYieldPending
 4195              		.cfi_endproc
 4196              	.LFE35:
 4198              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 4199              		.align	2
 4200              		.global	uxTaskGetTaskNumber
 4201              		.thumb
 4202              		.thumb_func
 4204              	uxTaskGetTaskNumber:
 4205              	.LFB36:
3092:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3093:../../../FreeRTOS_9_0/Source/tasks.c **** 
3094:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3095:../../../FreeRTOS_9_0/Source/tasks.c **** 
3096:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3097:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 4206              		.loc 1 3097 0
 4207              		.cfi_startproc
 4208              		@ args = 0, pretend = 0, frame = 16
ARM GAS  /tmp/ccIgarPJ.s 			page 133


 4209              		@ frame_needed = 1, uses_anonymous_args = 0
 4210              		@ link register save eliminated.
 4211 0000 80B4     		push	{r7}
 4212              	.LCFI156:
 4213              		.cfi_def_cfa_offset 4
 4214              		.cfi_offset 7, -4
 4215 0002 85B0     		sub	sp, sp, #20
 4216              	.LCFI157:
 4217              		.cfi_def_cfa_offset 24
 4218 0004 00AF     		add	r7, sp, #0
 4219              	.LCFI158:
 4220              		.cfi_def_cfa_register 7
 4221 0006 7860     		str	r0, [r7, #4]
3098:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxReturn;
3099:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxTCB;
3100:../../../FreeRTOS_9_0/Source/tasks.c **** 
3101:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xTask != NULL )
 4222              		.loc 1 3101 0
 4223 0008 7B68     		ldr	r3, [r7, #4]
 4224 000a 002B     		cmp	r3, #0
 4225 000c 05D0     		beq	.L268
3102:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3103:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
 4226              		.loc 1 3103 0
 4227 000e 7B68     		ldr	r3, [r7, #4]
 4228 0010 BB60     		str	r3, [r7, #8]
3104:../../../FreeRTOS_9_0/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
 4229              		.loc 1 3104 0
 4230 0012 BB68     		ldr	r3, [r7, #8]
 4231 0014 9B6C     		ldr	r3, [r3, #72]
 4232 0016 FB60     		str	r3, [r7, #12]
 4233 0018 01E0     		b	.L269
 4234              	.L268:
3105:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3106:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
3107:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3108:../../../FreeRTOS_9_0/Source/tasks.c **** 			uxReturn = 0U;
 4235              		.loc 1 3108 0
 4236 001a 0023     		movs	r3, #0
 4237 001c FB60     		str	r3, [r7, #12]
 4238              	.L269:
3109:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3110:../../../FreeRTOS_9_0/Source/tasks.c **** 
3111:../../../FreeRTOS_9_0/Source/tasks.c **** 		return uxReturn;
 4239              		.loc 1 3111 0
 4240 001e FB68     		ldr	r3, [r7, #12]
3112:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 4241              		.loc 1 3112 0
 4242 0020 1846     		mov	r0, r3
 4243 0022 1437     		adds	r7, r7, #20
 4244              	.LCFI159:
 4245              		.cfi_def_cfa_offset 4
 4246 0024 BD46     		mov	sp, r7
 4247              	.LCFI160:
 4248              		.cfi_def_cfa_register 13
 4249              		@ sp needed
 4250 0026 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  /tmp/ccIgarPJ.s 			page 134


 4251              	.LCFI161:
 4252              		.cfi_restore 7
 4253              		.cfi_def_cfa_offset 0
 4254 002a 7047     		bx	lr
 4255              		.cfi_endproc
 4256              	.LFE36:
 4258              		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 4259              		.align	2
 4260              		.global	vTaskSetTaskNumber
 4261              		.thumb
 4262              		.thumb_func
 4264              	vTaskSetTaskNumber:
 4265              	.LFB37:
3113:../../../FreeRTOS_9_0/Source/tasks.c **** 
3114:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3115:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3116:../../../FreeRTOS_9_0/Source/tasks.c **** 
3117:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3118:../../../FreeRTOS_9_0/Source/tasks.c **** 
3119:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3120:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 4266              		.loc 1 3120 0
 4267              		.cfi_startproc
 4268              		@ args = 0, pretend = 0, frame = 16
 4269              		@ frame_needed = 1, uses_anonymous_args = 0
 4270              		@ link register save eliminated.
 4271 0000 80B4     		push	{r7}
 4272              	.LCFI162:
 4273              		.cfi_def_cfa_offset 4
 4274              		.cfi_offset 7, -4
 4275 0002 85B0     		sub	sp, sp, #20
 4276              	.LCFI163:
 4277              		.cfi_def_cfa_offset 24
 4278 0004 00AF     		add	r7, sp, #0
 4279              	.LCFI164:
 4280              		.cfi_def_cfa_register 7
 4281 0006 7860     		str	r0, [r7, #4]
 4282 0008 3960     		str	r1, [r7]
3121:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxTCB;
3122:../../../FreeRTOS_9_0/Source/tasks.c **** 
3123:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xTask != NULL )
 4283              		.loc 1 3123 0
 4284 000a 7B68     		ldr	r3, [r7, #4]
 4285 000c 002B     		cmp	r3, #0
 4286 000e 04D0     		beq	.L271
3124:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3125:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
 4287              		.loc 1 3125 0
 4288 0010 7B68     		ldr	r3, [r7, #4]
 4289 0012 FB60     		str	r3, [r7, #12]
3126:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
 4290              		.loc 1 3126 0
 4291 0014 FB68     		ldr	r3, [r7, #12]
 4292 0016 3A68     		ldr	r2, [r7]
 4293 0018 9A64     		str	r2, [r3, #72]
 4294              	.L271:
3127:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
ARM GAS  /tmp/ccIgarPJ.s 			page 135


3128:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 4295              		.loc 1 3128 0
 4296 001a 1437     		adds	r7, r7, #20
 4297              	.LCFI165:
 4298              		.cfi_def_cfa_offset 4
 4299 001c BD46     		mov	sp, r7
 4300              	.LCFI166:
 4301              		.cfi_def_cfa_register 13
 4302              		@ sp needed
 4303 001e 5DF8047B 		ldr	r7, [sp], #4
 4304              	.LCFI167:
 4305              		.cfi_restore 7
 4306              		.cfi_def_cfa_offset 0
 4307 0022 7047     		bx	lr
 4308              		.cfi_endproc
 4309              	.LFE37:
 4311              		.section	.text.prvIdleTask,"ax",%progbits
 4312              		.align	2
 4313              		.thumb
 4314              		.thumb_func
 4316              	prvIdleTask:
 4317              	.LFB38:
3129:../../../FreeRTOS_9_0/Source/tasks.c **** 
3130:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3131:../../../FreeRTOS_9_0/Source/tasks.c **** 
3132:../../../FreeRTOS_9_0/Source/tasks.c **** /*
3133:../../../FreeRTOS_9_0/Source/tasks.c ****  * -----------------------------------------------------------
3134:../../../FreeRTOS_9_0/Source/tasks.c ****  * The Idle task.
3135:../../../FreeRTOS_9_0/Source/tasks.c ****  * ----------------------------------------------------------
3136:../../../FreeRTOS_9_0/Source/tasks.c ****  *
3137:../../../FreeRTOS_9_0/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3138:../../../FreeRTOS_9_0/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3139:../../../FreeRTOS_9_0/Source/tasks.c ****  *
3140:../../../FreeRTOS_9_0/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3141:../../../FreeRTOS_9_0/Source/tasks.c ****  *
3142:../../../FreeRTOS_9_0/Source/tasks.c ****  */
3143:../../../FreeRTOS_9_0/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3144:../../../FreeRTOS_9_0/Source/tasks.c **** {
 4318              		.loc 1 3144 0
 4319              		.cfi_startproc
 4320              		@ args = 0, pretend = 0, frame = 8
 4321              		@ frame_needed = 1, uses_anonymous_args = 0
 4322 0000 80B5     		push	{r7, lr}
 4323              	.LCFI168:
 4324              		.cfi_def_cfa_offset 8
 4325              		.cfi_offset 7, -8
 4326              		.cfi_offset 14, -4
 4327 0002 82B0     		sub	sp, sp, #8
 4328              	.LCFI169:
 4329              		.cfi_def_cfa_offset 16
 4330 0004 00AF     		add	r7, sp, #0
 4331              	.LCFI170:
 4332              		.cfi_def_cfa_register 7
 4333 0006 7860     		str	r0, [r7, #4]
 4334              	.L275:
3145:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Stop warnings. */
3146:../../../FreeRTOS_9_0/Source/tasks.c **** 	( void ) pvParameters;
ARM GAS  /tmp/ccIgarPJ.s 			page 136


3147:../../../FreeRTOS_9_0/Source/tasks.c **** 
3148:../../../FreeRTOS_9_0/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3149:../../../FreeRTOS_9_0/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3150:../../../FreeRTOS_9_0/Source/tasks.c **** 
3151:../../../FreeRTOS_9_0/Source/tasks.c **** 	for( ;; )
3152:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
3153:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3154:../../../FreeRTOS_9_0/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3155:../../../FreeRTOS_9_0/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
 4335              		.loc 1 3155 0
 4336 0008 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
3156:../../../FreeRTOS_9_0/Source/tasks.c **** 
3157:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3158:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3159:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3160:../../../FreeRTOS_9_0/Source/tasks.c **** 			see if any other task has become available.  If we are using
3161:../../../FreeRTOS_9_0/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3162:../../../FreeRTOS_9_0/Source/tasks.c **** 			will automatically get the processor anyway. */
3163:../../../FreeRTOS_9_0/Source/tasks.c **** 			taskYIELD();
3164:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3165:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3166:../../../FreeRTOS_9_0/Source/tasks.c **** 
3167:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3168:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3169:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3170:../../../FreeRTOS_9_0/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3171:../../../FreeRTOS_9_0/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3172:../../../FreeRTOS_9_0/Source/tasks.c **** 			timeslice.
3173:../../../FreeRTOS_9_0/Source/tasks.c **** 
3174:../../../FreeRTOS_9_0/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3175:../../../FreeRTOS_9_0/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3176:../../../FreeRTOS_9_0/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3177:../../../FreeRTOS_9_0/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3178:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 4337              		.loc 1 3178 0
 4338 000c 064B     		ldr	r3, .L276
 4339 000e 1B68     		ldr	r3, [r3]
 4340 0010 012B     		cmp	r3, #1
 4341 0012 07D9     		bls	.L274
3179:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3180:../../../FreeRTOS_9_0/Source/tasks.c **** 				taskYIELD();
 4342              		.loc 1 3180 0
 4343 0014 054B     		ldr	r3, .L276+4
 4344 0016 4FF08052 		mov	r2, #268435456
 4345 001a 1A60     		str	r2, [r3]
 4346              	@ 3180 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 4347 001c BFF34F8F 		dsb
 4348              	@ 0 "" 2
 4349              	@ 3180 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 4350 0020 BFF36F8F 		isb
 4351              	@ 0 "" 2
 4352              		.thumb
 4353              	.L274:
3181:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3182:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
3183:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3184:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccIgarPJ.s 			page 137


3185:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3186:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3187:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3188:../../../FreeRTOS_9_0/Source/tasks.c **** 
3189:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3190:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3191:../../../FreeRTOS_9_0/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3192:../../../FreeRTOS_9_0/Source/tasks.c **** 
3193:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3194:../../../FreeRTOS_9_0/Source/tasks.c **** 			allows the application designer to add background functionality
3195:../../../FreeRTOS_9_0/Source/tasks.c **** 			without the overhead of a separate task.
3196:../../../FreeRTOS_9_0/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3197:../../../FreeRTOS_9_0/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3198:../../../FreeRTOS_9_0/Source/tasks.c **** 			vApplicationIdleHook();
3199:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3200:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3201:../../../FreeRTOS_9_0/Source/tasks.c **** 
3202:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3203:../../../FreeRTOS_9_0/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3204:../../../FreeRTOS_9_0/Source/tasks.c **** 		user defined low power mode	implementations require
3205:../../../FreeRTOS_9_0/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3206:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3207:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3208:../../../FreeRTOS_9_0/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3209:../../../FreeRTOS_9_0/Source/tasks.c **** 
3210:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3211:../../../FreeRTOS_9_0/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3212:../../../FreeRTOS_9_0/Source/tasks.c **** 			test of the expected idle time is performed without the
3213:../../../FreeRTOS_9_0/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3214:../../../FreeRTOS_9_0/Source/tasks.c **** 			valid. */
3215:../../../FreeRTOS_9_0/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3216:../../../FreeRTOS_9_0/Source/tasks.c **** 
3217:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3218:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3219:../../../FreeRTOS_9_0/Source/tasks.c **** 				vTaskSuspendAll();
3220:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
3221:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3222:../../../FreeRTOS_9_0/Source/tasks.c **** 					time can be sampled again, and this time its value can
3223:../../../FreeRTOS_9_0/Source/tasks.c **** 					be used. */
3224:../../../FreeRTOS_9_0/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3225:../../../FreeRTOS_9_0/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3226:../../../FreeRTOS_9_0/Source/tasks.c **** 
3227:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3228:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
3229:../../../FreeRTOS_9_0/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3230:../../../FreeRTOS_9_0/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3231:../../../FreeRTOS_9_0/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3232:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
3233:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
3234:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
3235:../../../FreeRTOS_9_0/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3236:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
3237:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
3238:../../../FreeRTOS_9_0/Source/tasks.c **** 				( void ) xTaskResumeAll();
3239:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3240:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
3241:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
ARM GAS  /tmp/ccIgarPJ.s 			page 138


3242:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3243:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3244:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3245:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3246:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 4354              		.loc 1 3246 0
 4355 0024 F0E7     		b	.L275
 4356              	.L277:
 4357 0026 00BF     		.align	2
 4358              	.L276:
 4359 0028 00000000 		.word	pxReadyTasksLists
 4360 002c 04ED00E0 		.word	-536810236
 4361              		.cfi_endproc
 4362              	.LFE38:
 4364              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 4365              		.align	2
 4366              		.thumb
 4367              		.thumb_func
 4369              	prvInitialiseTaskLists:
 4370              	.LFB39:
3247:../../../FreeRTOS_9_0/Source/tasks.c **** }
3248:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3249:../../../FreeRTOS_9_0/Source/tasks.c **** 
3250:../../../FreeRTOS_9_0/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3251:../../../FreeRTOS_9_0/Source/tasks.c **** 
3252:../../../FreeRTOS_9_0/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3253:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
3254:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3255:../../../FreeRTOS_9_0/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3256:../../../FreeRTOS_9_0/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3257:../../../FreeRTOS_9_0/Source/tasks.c **** 
3258:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3259:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3260:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3261:../../../FreeRTOS_9_0/Source/tasks.c **** 			eReturn = eAbortSleep;
3262:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3263:../../../FreeRTOS_9_0/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3264:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3265:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3266:../../../FreeRTOS_9_0/Source/tasks.c **** 			eReturn = eAbortSleep;
3267:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3268:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
3269:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3270:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3271:../../../FreeRTOS_9_0/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3272:../../../FreeRTOS_9_0/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3273:../../../FreeRTOS_9_0/Source/tasks.c **** 			interrupts. */
3274:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3275:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3276:../../../FreeRTOS_9_0/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3277:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3278:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
3279:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3280:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3281:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3282:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3283:../../../FreeRTOS_9_0/Source/tasks.c **** 
ARM GAS  /tmp/ccIgarPJ.s 			page 139


3284:../../../FreeRTOS_9_0/Source/tasks.c **** 		return eReturn;
3285:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
3286:../../../FreeRTOS_9_0/Source/tasks.c **** 
3287:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3288:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3289:../../../FreeRTOS_9_0/Source/tasks.c **** 
3290:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3291:../../../FreeRTOS_9_0/Source/tasks.c **** 
3292:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3293:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
3294:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxTCB;
3295:../../../FreeRTOS_9_0/Source/tasks.c **** 
3296:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3297:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3298:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3299:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3300:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3301:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
3302:../../../FreeRTOS_9_0/Source/tasks.c **** 
3303:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3304:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3305:../../../FreeRTOS_9_0/Source/tasks.c **** 
3306:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3307:../../../FreeRTOS_9_0/Source/tasks.c **** 
3308:../../../FreeRTOS_9_0/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3309:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
3310:../../../FreeRTOS_9_0/Source/tasks.c **** 	void *pvReturn = NULL;
3311:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxTCB;
3312:../../../FreeRTOS_9_0/Source/tasks.c **** 
3313:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3314:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3315:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3316:../../../FreeRTOS_9_0/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3317:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3318:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
3319:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3320:../../../FreeRTOS_9_0/Source/tasks.c **** 			pvReturn = NULL;
3321:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3322:../../../FreeRTOS_9_0/Source/tasks.c **** 
3323:../../../FreeRTOS_9_0/Source/tasks.c **** 		return pvReturn;
3324:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
3325:../../../FreeRTOS_9_0/Source/tasks.c **** 
3326:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3327:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3328:../../../FreeRTOS_9_0/Source/tasks.c **** 
3329:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3330:../../../FreeRTOS_9_0/Source/tasks.c **** 
3331:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3332:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
3333:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxTCB;
3334:../../../FreeRTOS_9_0/Source/tasks.c **** 
3335:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3336:../../../FreeRTOS_9_0/Source/tasks.c **** 		the calling task. */
3337:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3338:../../../FreeRTOS_9_0/Source/tasks.c **** 
3339:../../../FreeRTOS_9_0/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3340:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
ARM GAS  /tmp/ccIgarPJ.s 			page 140


3341:../../../FreeRTOS_9_0/Source/tasks.c **** 
3342:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3343:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3344:../../../FreeRTOS_9_0/Source/tasks.c **** 
3345:../../../FreeRTOS_9_0/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3346:../../../FreeRTOS_9_0/Source/tasks.c **** {
 4371              		.loc 1 3346 0
 4372              		.cfi_startproc
 4373              		@ args = 0, pretend = 0, frame = 8
 4374              		@ frame_needed = 1, uses_anonymous_args = 0
 4375 0000 80B5     		push	{r7, lr}
 4376              	.LCFI171:
 4377              		.cfi_def_cfa_offset 8
 4378              		.cfi_offset 7, -8
 4379              		.cfi_offset 14, -4
 4380 0002 82B0     		sub	sp, sp, #8
 4381              	.LCFI172:
 4382              		.cfi_def_cfa_offset 16
 4383 0004 00AF     		add	r7, sp, #0
 4384              	.LCFI173:
 4385              		.cfi_def_cfa_register 7
3347:../../../FreeRTOS_9_0/Source/tasks.c **** UBaseType_t uxPriority;
3348:../../../FreeRTOS_9_0/Source/tasks.c **** 
3349:../../../FreeRTOS_9_0/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
 4386              		.loc 1 3349 0
 4387 0006 0023     		movs	r3, #0
 4388 0008 7B60     		str	r3, [r7, #4]
 4389 000a 0CE0     		b	.L279
 4390              	.L280:
3350:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
3351:../../../FreeRTOS_9_0/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 4391              		.loc 1 3351 0 discriminator 3
 4392 000c 7A68     		ldr	r2, [r7, #4]
 4393 000e 1346     		mov	r3, r2
 4394 0010 9B00     		lsls	r3, r3, #2
 4395 0012 1344     		add	r3, r3, r2
 4396 0014 9B00     		lsls	r3, r3, #2
 4397 0016 114A     		ldr	r2, .L281
 4398 0018 1344     		add	r3, r3, r2
 4399 001a 1846     		mov	r0, r3
 4400 001c FFF7FEFF 		bl	vListInitialise
3349:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 4401              		.loc 1 3349 0 discriminator 3
 4402 0020 7B68     		ldr	r3, [r7, #4]
 4403 0022 0133     		adds	r3, r3, #1
 4404 0024 7B60     		str	r3, [r7, #4]
 4405              	.L279:
3349:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 4406              		.loc 1 3349 0 is_stmt 0 discriminator 1
 4407 0026 7B68     		ldr	r3, [r7, #4]
 4408 0028 062B     		cmp	r3, #6
 4409 002a EFD9     		bls	.L280
3352:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
3353:../../../FreeRTOS_9_0/Source/tasks.c **** 
3354:../../../FreeRTOS_9_0/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
 4410              		.loc 1 3354 0 is_stmt 1
 4411 002c 0C48     		ldr	r0, .L281+4
ARM GAS  /tmp/ccIgarPJ.s 			page 141


 4412 002e FFF7FEFF 		bl	vListInitialise
3355:../../../FreeRTOS_9_0/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 4413              		.loc 1 3355 0
 4414 0032 0C48     		ldr	r0, .L281+8
 4415 0034 FFF7FEFF 		bl	vListInitialise
3356:../../../FreeRTOS_9_0/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 4416              		.loc 1 3356 0
 4417 0038 0B48     		ldr	r0, .L281+12
 4418 003a FFF7FEFF 		bl	vListInitialise
3357:../../../FreeRTOS_9_0/Source/tasks.c **** 
3358:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3359:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
3360:../../../FreeRTOS_9_0/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
 4419              		.loc 1 3360 0
 4420 003e 0B48     		ldr	r0, .L281+16
 4421 0040 FFF7FEFF 		bl	vListInitialise
3361:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
3362:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3363:../../../FreeRTOS_9_0/Source/tasks.c **** 
3364:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3365:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
3366:../../../FreeRTOS_9_0/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
 4422              		.loc 1 3366 0
 4423 0044 0A48     		ldr	r0, .L281+20
 4424 0046 FFF7FEFF 		bl	vListInitialise
3367:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
3368:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3369:../../../FreeRTOS_9_0/Source/tasks.c **** 
3370:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3371:../../../FreeRTOS_9_0/Source/tasks.c **** 	using list2. */
3372:../../../FreeRTOS_9_0/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
 4425              		.loc 1 3372 0
 4426 004a 0A4B     		ldr	r3, .L281+24
 4427 004c 044A     		ldr	r2, .L281+4
 4428 004e 1A60     		str	r2, [r3]
3373:../../../FreeRTOS_9_0/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 4429              		.loc 1 3373 0
 4430 0050 094B     		ldr	r3, .L281+28
 4431 0052 044A     		ldr	r2, .L281+8
 4432 0054 1A60     		str	r2, [r3]
3374:../../../FreeRTOS_9_0/Source/tasks.c **** }
 4433              		.loc 1 3374 0
 4434 0056 0837     		adds	r7, r7, #8
 4435              	.LCFI174:
 4436              		.cfi_def_cfa_offset 8
 4437 0058 BD46     		mov	sp, r7
 4438              	.LCFI175:
 4439              		.cfi_def_cfa_register 13
 4440              		@ sp needed
 4441 005a 80BD     		pop	{r7, pc}
 4442              	.L282:
 4443              		.align	2
 4444              	.L281:
 4445 005c 00000000 		.word	pxReadyTasksLists
 4446 0060 00000000 		.word	xDelayedTaskList1
 4447 0064 00000000 		.word	xDelayedTaskList2
 4448 0068 00000000 		.word	xPendingReadyList
ARM GAS  /tmp/ccIgarPJ.s 			page 142


 4449 006c 00000000 		.word	xTasksWaitingTermination
 4450 0070 00000000 		.word	xSuspendedTaskList
 4451 0074 00000000 		.word	pxDelayedTaskList
 4452 0078 00000000 		.word	pxOverflowDelayedTaskList
 4453              		.cfi_endproc
 4454              	.LFE39:
 4456              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 4457              		.align	2
 4458              		.thumb
 4459              		.thumb_func
 4461              	prvCheckTasksWaitingTermination:
 4462              	.LFB40:
3375:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3376:../../../FreeRTOS_9_0/Source/tasks.c **** 
3377:../../../FreeRTOS_9_0/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3378:../../../FreeRTOS_9_0/Source/tasks.c **** {
 4463              		.loc 1 3378 0
 4464              		.cfi_startproc
 4465              		@ args = 0, pretend = 0, frame = 8
 4466              		@ frame_needed = 1, uses_anonymous_args = 0
 4467 0000 80B5     		push	{r7, lr}
 4468              	.LCFI176:
 4469              		.cfi_def_cfa_offset 8
 4470              		.cfi_offset 7, -8
 4471              		.cfi_offset 14, -4
 4472 0002 82B0     		sub	sp, sp, #8
 4473              	.LCFI177:
 4474              		.cfi_def_cfa_offset 16
 4475 0004 00AF     		add	r7, sp, #0
 4476              	.LCFI178:
 4477              		.cfi_def_cfa_register 7
 4478              	.LBB159:
3379:../../../FreeRTOS_9_0/Source/tasks.c **** 
3380:../../../FreeRTOS_9_0/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3381:../../../FreeRTOS_9_0/Source/tasks.c **** 
3382:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3383:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
3384:../../../FreeRTOS_9_0/Source/tasks.c **** 		BaseType_t xListIsEmpty;
3385:../../../FreeRTOS_9_0/Source/tasks.c **** 
3386:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
3387:../../../FreeRTOS_9_0/Source/tasks.c **** 		too often in the idle task. */
3388:../../../FreeRTOS_9_0/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 4479              		.loc 1 3388 0
 4480 0006 28E0     		b	.L284
 4481              	.L285:
3389:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3390:../../../FreeRTOS_9_0/Source/tasks.c **** 			vTaskSuspendAll();
 4482              		.loc 1 3390 0
 4483 0008 FFF7FEFF 		bl	vTaskSuspendAll
3391:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3392:../../../FreeRTOS_9_0/Source/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 4484              		.loc 1 3392 0
 4485 000c 164B     		ldr	r3, .L286
 4486 000e 1B68     		ldr	r3, [r3]
 4487 0010 002B     		cmp	r3, #0
 4488 0012 0CBF     		ite	eq
 4489 0014 0123     		moveq	r3, #1
ARM GAS  /tmp/ccIgarPJ.s 			page 143


 4490 0016 0023     		movne	r3, #0
 4491 0018 DBB2     		uxtb	r3, r3
 4492 001a 7B60     		str	r3, [r7, #4]
3393:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3394:../../../FreeRTOS_9_0/Source/tasks.c **** 			( void ) xTaskResumeAll();
 4493              		.loc 1 3394 0
 4494 001c FFF7FEFF 		bl	xTaskResumeAll
3395:../../../FreeRTOS_9_0/Source/tasks.c **** 
3396:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( xListIsEmpty == pdFALSE )
 4495              		.loc 1 3396 0
 4496 0020 7B68     		ldr	r3, [r7, #4]
 4497 0022 002B     		cmp	r3, #0
 4498 0024 19D1     		bne	.L284
 4499              	.LBB160:
3397:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3398:../../../FreeRTOS_9_0/Source/tasks.c **** 				TCB_t *pxTCB;
3399:../../../FreeRTOS_9_0/Source/tasks.c **** 
3400:../../../FreeRTOS_9_0/Source/tasks.c **** 				taskENTER_CRITICAL();
 4500              		.loc 1 3400 0
 4501 0026 FFF7FEFF 		bl	vPortEnterCritical
3401:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
3402:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 4502              		.loc 1 3402 0
 4503 002a 0F4B     		ldr	r3, .L286
 4504 002c DB68     		ldr	r3, [r3, #12]
 4505 002e DB68     		ldr	r3, [r3, #12]
 4506 0030 3B60     		str	r3, [r7]
3403:../../../FreeRTOS_9_0/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 4507              		.loc 1 3403 0
 4508 0032 3B68     		ldr	r3, [r7]
 4509 0034 0433     		adds	r3, r3, #4
 4510 0036 1846     		mov	r0, r3
 4511 0038 FFF7FEFF 		bl	uxListRemove
3404:../../../FreeRTOS_9_0/Source/tasks.c **** 					--uxCurrentNumberOfTasks;
 4512              		.loc 1 3404 0
 4513 003c 0B4B     		ldr	r3, .L286+4
 4514 003e 1B68     		ldr	r3, [r3]
 4515 0040 013B     		subs	r3, r3, #1
 4516 0042 0A4A     		ldr	r2, .L286+4
 4517 0044 1360     		str	r3, [r2]
3405:../../../FreeRTOS_9_0/Source/tasks.c **** 					--uxDeletedTasksWaitingCleanUp;
 4518              		.loc 1 3405 0
 4519 0046 0A4B     		ldr	r3, .L286+8
 4520 0048 1B68     		ldr	r3, [r3]
 4521 004a 013B     		subs	r3, r3, #1
 4522 004c 084A     		ldr	r2, .L286+8
 4523 004e 1360     		str	r3, [r2]
3406:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
3407:../../../FreeRTOS_9_0/Source/tasks.c **** 				taskEXIT_CRITICAL();
 4524              		.loc 1 3407 0
 4525 0050 FFF7FEFF 		bl	vPortExitCritical
3408:../../../FreeRTOS_9_0/Source/tasks.c **** 
3409:../../../FreeRTOS_9_0/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 4526              		.loc 1 3409 0
 4527 0054 3868     		ldr	r0, [r7]
 4528 0056 FFF7FEFF 		bl	prvDeleteTCB
 4529              	.L284:
ARM GAS  /tmp/ccIgarPJ.s 			page 144


 4530              	.LBE160:
3388:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
 4531              		.loc 1 3388 0
 4532 005a 054B     		ldr	r3, .L286+8
 4533 005c 1B68     		ldr	r3, [r3]
 4534 005e 002B     		cmp	r3, #0
 4535 0060 D2D1     		bne	.L285
 4536              	.LBE159:
3410:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3411:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
3412:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3413:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3414:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3415:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3416:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
3417:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3418:../../../FreeRTOS_9_0/Source/tasks.c **** }
 4537              		.loc 1 3418 0
 4538 0062 0837     		adds	r7, r7, #8
 4539              	.LCFI179:
 4540              		.cfi_def_cfa_offset 8
 4541 0064 BD46     		mov	sp, r7
 4542              	.LCFI180:
 4543              		.cfi_def_cfa_register 13
 4544              		@ sp needed
 4545 0066 80BD     		pop	{r7, pc}
 4546              	.L287:
 4547              		.align	2
 4548              	.L286:
 4549 0068 00000000 		.word	xTasksWaitingTermination
 4550 006c 00000000 		.word	uxCurrentNumberOfTasks
 4551 0070 00000000 		.word	uxDeletedTasksWaitingCleanUp
 4552              		.cfi_endproc
 4553              	.LFE40:
 4555              		.section	.text.vTaskGetInfo,"ax",%progbits
 4556              		.align	2
 4557              		.global	vTaskGetInfo
 4558              		.thumb
 4559              		.thumb_func
 4561              	vTaskGetInfo:
 4562              	.LFB41:
3419:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3420:../../../FreeRTOS_9_0/Source/tasks.c **** 
3421:../../../FreeRTOS_9_0/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3422:../../../FreeRTOS_9_0/Source/tasks.c **** 
3423:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3424:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 4563              		.loc 1 3424 0
 4564              		.cfi_startproc
 4565              		@ args = 0, pretend = 0, frame = 24
 4566              		@ frame_needed = 1, uses_anonymous_args = 0
 4567 0000 80B5     		push	{r7, lr}
 4568              	.LCFI181:
 4569              		.cfi_def_cfa_offset 8
 4570              		.cfi_offset 7, -8
 4571              		.cfi_offset 14, -4
 4572 0002 86B0     		sub	sp, sp, #24
ARM GAS  /tmp/ccIgarPJ.s 			page 145


 4573              	.LCFI182:
 4574              		.cfi_def_cfa_offset 32
 4575 0004 00AF     		add	r7, sp, #0
 4576              	.LCFI183:
 4577              		.cfi_def_cfa_register 7
 4578 0006 F860     		str	r0, [r7, #12]
 4579 0008 B960     		str	r1, [r7, #8]
 4580 000a 7A60     		str	r2, [r7, #4]
 4581 000c FB70     		strb	r3, [r7, #3]
3425:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxTCB;
3426:../../../FreeRTOS_9_0/Source/tasks.c **** 
3427:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3428:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 4582              		.loc 1 3428 0
 4583 000e FB68     		ldr	r3, [r7, #12]
 4584 0010 002B     		cmp	r3, #0
 4585 0012 02D1     		bne	.L289
 4586              		.loc 1 3428 0 is_stmt 0 discriminator 1
 4587 0014 274B     		ldr	r3, .L297
 4588 0016 1B68     		ldr	r3, [r3]
 4589 0018 00E0     		b	.L290
 4590              	.L289:
 4591              		.loc 1 3428 0 discriminator 2
 4592 001a FB68     		ldr	r3, [r7, #12]
 4593              	.L290:
 4594              		.loc 1 3428 0 discriminator 4
 4595 001c 7B61     		str	r3, [r7, #20]
3429:../../../FreeRTOS_9_0/Source/tasks.c **** 
3430:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 4596              		.loc 1 3430 0 is_stmt 1 discriminator 4
 4597 001e BB68     		ldr	r3, [r7, #8]
 4598 0020 7A69     		ldr	r2, [r7, #20]
 4599 0022 1A60     		str	r2, [r3]
3431:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 4600              		.loc 1 3431 0 discriminator 4
 4601 0024 7B69     		ldr	r3, [r7, #20]
 4602 0026 03F13402 		add	r2, r3, #52
 4603 002a BB68     		ldr	r3, [r7, #8]
 4604 002c 5A60     		str	r2, [r3, #4]
3432:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 4605              		.loc 1 3432 0 discriminator 4
 4606 002e 7B69     		ldr	r3, [r7, #20]
 4607 0030 DA6A     		ldr	r2, [r3, #44]
 4608 0032 BB68     		ldr	r3, [r7, #8]
 4609 0034 1A61     		str	r2, [r3, #16]
3433:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 4610              		.loc 1 3433 0 discriminator 4
 4611 0036 7B69     		ldr	r3, [r7, #20]
 4612 0038 1A6B     		ldr	r2, [r3, #48]
 4613 003a BB68     		ldr	r3, [r7, #8]
 4614 003c DA61     		str	r2, [r3, #28]
3434:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 4615              		.loc 1 3434 0 discriminator 4
 4616 003e 7B69     		ldr	r3, [r7, #20]
 4617 0040 5A6C     		ldr	r2, [r3, #68]
 4618 0042 BB68     		ldr	r3, [r7, #8]
 4619 0044 9A60     		str	r2, [r3, #8]
ARM GAS  /tmp/ccIgarPJ.s 			page 146


3435:../../../FreeRTOS_9_0/Source/tasks.c **** 
3436:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3437:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3438:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* If the task is in the suspended list then there is a chance it is
3439:../../../FreeRTOS_9_0/Source/tasks.c **** 			actually just blocked indefinitely - so really it should be reported as
3440:../../../FreeRTOS_9_0/Source/tasks.c **** 			being in the Blocked state. */
3441:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxTaskStatus->eCurrentState == eSuspended )
 4620              		.loc 1 3441 0 discriminator 4
 4621 0046 BB68     		ldr	r3, [r7, #8]
 4622 0048 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 4623 004a 032B     		cmp	r3, #3
 4624 004c 0AD1     		bne	.L291
3442:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3443:../../../FreeRTOS_9_0/Source/tasks.c **** 				vTaskSuspendAll();
 4625              		.loc 1 3443 0
 4626 004e FFF7FEFF 		bl	vTaskSuspendAll
3444:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
3445:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 4627              		.loc 1 3445 0
 4628 0052 7B69     		ldr	r3, [r7, #20]
 4629 0054 9B6A     		ldr	r3, [r3, #40]
 4630 0056 002B     		cmp	r3, #0
 4631 0058 02D0     		beq	.L292
3446:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
3447:../../../FreeRTOS_9_0/Source/tasks.c **** 						pxTaskStatus->eCurrentState = eBlocked;
 4632              		.loc 1 3447 0
 4633 005a BB68     		ldr	r3, [r7, #8]
 4634 005c 0222     		movs	r2, #2
 4635 005e 1A73     		strb	r2, [r3, #12]
 4636              	.L292:
3448:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
3449:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
3450:../../../FreeRTOS_9_0/Source/tasks.c **** 				xTaskResumeAll();
 4637              		.loc 1 3450 0
 4638 0060 FFF7FEFF 		bl	xTaskResumeAll
 4639              	.L291:
3451:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3452:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3453:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif /* INCLUDE_vTaskSuspend */
3454:../../../FreeRTOS_9_0/Source/tasks.c **** 
3455:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3456:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3457:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 4640              		.loc 1 3457 0
 4641 0064 7B69     		ldr	r3, [r7, #20]
 4642 0066 DA6C     		ldr	r2, [r3, #76]
 4643 0068 BB68     		ldr	r3, [r7, #8]
 4644 006a 5A61     		str	r2, [r3, #20]
3458:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3459:../../../FreeRTOS_9_0/Source/tasks.c **** 		#else
3460:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3461:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3462:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3463:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif
3464:../../../FreeRTOS_9_0/Source/tasks.c **** 
3465:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3466:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
ARM GAS  /tmp/ccIgarPJ.s 			page 147


3467:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3468:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3469:../../../FreeRTOS_9_0/Source/tasks.c **** 		#else
3470:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3471:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
 4645              		.loc 1 3471 0
 4646 006c BB68     		ldr	r3, [r7, #8]
 4647 006e 0022     		movs	r2, #0
 4648 0070 9A61     		str	r2, [r3, #24]
3472:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3473:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif
3474:../../../FreeRTOS_9_0/Source/tasks.c **** 
3475:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the value
3476:../../../FreeRTOS_9_0/Source/tasks.c **** 		of eState passed into this function is eInvalid - otherwise the state is
3477:../../../FreeRTOS_9_0/Source/tasks.c **** 		just set to whatever is passed in. */
3478:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( eState != eInvalid )
 4649              		.loc 1 3478 0
 4650 0072 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 4651 0074 052B     		cmp	r3, #5
 4652 0076 03D0     		beq	.L293
3479:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3480:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eState;
 4653              		.loc 1 3480 0
 4654 0078 BB68     		ldr	r3, [r7, #8]
 4655 007a FA78     		ldrb	r2, [r7, #3]
 4656 007c 1A73     		strb	r2, [r3, #12]
 4657 007e 06E0     		b	.L294
 4658              	.L293:
3481:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3482:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
3483:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3484:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( xTask );
 4659              		.loc 1 3484 0
 4660 0080 F868     		ldr	r0, [r7, #12]
 4661 0082 FFF7FEFF 		bl	eTaskGetState
 4662 0086 0346     		mov	r3, r0
 4663 0088 1A46     		mov	r2, r3
 4664 008a BB68     		ldr	r3, [r7, #8]
 4665 008c 1A73     		strb	r2, [r3, #12]
 4666              	.L294:
3485:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3486:../../../FreeRTOS_9_0/Source/tasks.c **** 
3487:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3488:../../../FreeRTOS_9_0/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3489:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
 4667              		.loc 1 3489 0
 4668 008e 7B68     		ldr	r3, [r7, #4]
 4669 0090 002B     		cmp	r3, #0
 4670 0092 09D0     		beq	.L295
3490:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3491:../../../FreeRTOS_9_0/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3492:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3493:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3494:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3495:../../../FreeRTOS_9_0/Source/tasks.c **** 			#else
3496:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3497:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
ARM GAS  /tmp/ccIgarPJ.s 			page 148


 4671              		.loc 1 3497 0
 4672 0094 7B69     		ldr	r3, [r7, #20]
 4673 0096 1B6B     		ldr	r3, [r3, #48]
 4674 0098 1846     		mov	r0, r3
 4675 009a FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 4676 009e 0346     		mov	r3, r0
 4677 00a0 1A46     		mov	r2, r3
 4678 00a2 BB68     		ldr	r3, [r7, #8]
 4679 00a4 1A84     		strh	r2, [r3, #32]	@ movhi
 4680 00a6 02E0     		b	.L288
 4681              	.L295:
3498:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3499:../../../FreeRTOS_9_0/Source/tasks.c **** 			#endif
3500:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3501:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
3502:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3503:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
 4682              		.loc 1 3503 0
 4683 00a8 BB68     		ldr	r3, [r7, #8]
 4684 00aa 0022     		movs	r2, #0
 4685 00ac 1A84     		strh	r2, [r3, #32]	@ movhi
 4686              	.L288:
3504:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3505:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 4687              		.loc 1 3505 0
 4688 00ae 1837     		adds	r7, r7, #24
 4689              	.LCFI184:
 4690              		.cfi_def_cfa_offset 8
 4691 00b0 BD46     		mov	sp, r7
 4692              	.LCFI185:
 4693              		.cfi_def_cfa_register 13
 4694              		@ sp needed
 4695 00b2 80BD     		pop	{r7, pc}
 4696              	.L298:
 4697              		.align	2
 4698              	.L297:
 4699 00b4 00000000 		.word	pxCurrentTCB
 4700              		.cfi_endproc
 4701              	.LFE41:
 4703              		.section	.text.prvListTasksWithinSingleList,"ax",%progbits
 4704              		.align	2
 4705              		.thumb
 4706              		.thumb_func
 4708              	prvListTasksWithinSingleList:
 4709              	.LFB42:
3506:../../../FreeRTOS_9_0/Source/tasks.c **** 
3507:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3508:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3509:../../../FreeRTOS_9_0/Source/tasks.c **** 
3510:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3511:../../../FreeRTOS_9_0/Source/tasks.c **** 
3512:../../../FreeRTOS_9_0/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3513:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 4710              		.loc 1 3513 0
 4711              		.cfi_startproc
 4712              		@ args = 0, pretend = 0, frame = 40
 4713              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccIgarPJ.s 			page 149


 4714 0000 80B5     		push	{r7, lr}
 4715              	.LCFI186:
 4716              		.cfi_def_cfa_offset 8
 4717              		.cfi_offset 7, -8
 4718              		.cfi_offset 14, -4
 4719 0002 8AB0     		sub	sp, sp, #40
 4720              	.LCFI187:
 4721              		.cfi_def_cfa_offset 48
 4722 0004 00AF     		add	r7, sp, #0
 4723              	.LCFI188:
 4724              		.cfi_def_cfa_register 7
 4725 0006 F860     		str	r0, [r7, #12]
 4726 0008 B960     		str	r1, [r7, #8]
 4727 000a 1346     		mov	r3, r2
 4728 000c FB71     		strb	r3, [r7, #7]
3514:../../../FreeRTOS_9_0/Source/tasks.c **** 	volatile TCB_t *pxNextTCB, *pxFirstTCB;
3515:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxTask = 0;
 4729              		.loc 1 3515 0
 4730 000e 0023     		movs	r3, #0
 4731 0010 7B62     		str	r3, [r7, #36]
3516:../../../FreeRTOS_9_0/Source/tasks.c **** 
3517:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 4732              		.loc 1 3517 0
 4733 0012 BB68     		ldr	r3, [r7, #8]
 4734 0014 1B68     		ldr	r3, [r3]
 4735 0016 002B     		cmp	r3, #0
 4736 0018 40D0     		beq	.L300
 4737              	.LBB161:
3518:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3519:../../../FreeRTOS_9_0/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 4738              		.loc 1 3519 0
 4739 001a BB68     		ldr	r3, [r7, #8]
 4740 001c 3B62     		str	r3, [r7, #32]
 4741 001e 3B6A     		ldr	r3, [r7, #32]
 4742 0020 5B68     		ldr	r3, [r3, #4]
 4743 0022 5A68     		ldr	r2, [r3, #4]
 4744 0024 3B6A     		ldr	r3, [r7, #32]
 4745 0026 5A60     		str	r2, [r3, #4]
 4746 0028 3B6A     		ldr	r3, [r7, #32]
 4747 002a 5A68     		ldr	r2, [r3, #4]
 4748 002c 3B6A     		ldr	r3, [r7, #32]
 4749 002e 0833     		adds	r3, r3, #8
 4750 0030 9A42     		cmp	r2, r3
 4751 0032 04D1     		bne	.L301
 4752              		.loc 1 3519 0 is_stmt 0 discriminator 1
 4753 0034 3B6A     		ldr	r3, [r7, #32]
 4754 0036 5B68     		ldr	r3, [r3, #4]
 4755 0038 5A68     		ldr	r2, [r3, #4]
 4756 003a 3B6A     		ldr	r3, [r7, #32]
 4757 003c 5A60     		str	r2, [r3, #4]
 4758              	.L301:
 4759              		.loc 1 3519 0 discriminator 3
 4760 003e 3B6A     		ldr	r3, [r7, #32]
 4761 0040 5B68     		ldr	r3, [r3, #4]
 4762 0042 DB68     		ldr	r3, [r3, #12]
 4763 0044 FB61     		str	r3, [r7, #28]
 4764              	.L303:
ARM GAS  /tmp/ccIgarPJ.s 			page 150


 4765              	.LBE161:
 4766              	.LBB162:
3520:../../../FreeRTOS_9_0/Source/tasks.c **** 
3521:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3522:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3523:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3524:../../../FreeRTOS_9_0/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3525:../../../FreeRTOS_9_0/Source/tasks.c **** 			do
3526:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3527:../../../FreeRTOS_9_0/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 4767              		.loc 1 3527 0 is_stmt 1
 4768 0046 BB68     		ldr	r3, [r7, #8]
 4769 0048 BB61     		str	r3, [r7, #24]
 4770 004a BB69     		ldr	r3, [r7, #24]
 4771 004c 5B68     		ldr	r3, [r3, #4]
 4772 004e 5A68     		ldr	r2, [r3, #4]
 4773 0050 BB69     		ldr	r3, [r7, #24]
 4774 0052 5A60     		str	r2, [r3, #4]
 4775 0054 BB69     		ldr	r3, [r7, #24]
 4776 0056 5A68     		ldr	r2, [r3, #4]
 4777 0058 BB69     		ldr	r3, [r7, #24]
 4778 005a 0833     		adds	r3, r3, #8
 4779 005c 9A42     		cmp	r2, r3
 4780 005e 04D1     		bne	.L302
 4781              		.loc 1 3527 0 is_stmt 0 discriminator 1
 4782 0060 BB69     		ldr	r3, [r7, #24]
 4783 0062 5B68     		ldr	r3, [r3, #4]
 4784 0064 5A68     		ldr	r2, [r3, #4]
 4785 0066 BB69     		ldr	r3, [r7, #24]
 4786 0068 5A60     		str	r2, [r3, #4]
 4787              	.L302:
 4788              		.loc 1 3527 0 discriminator 3
 4789 006a BB69     		ldr	r3, [r7, #24]
 4790 006c 5B68     		ldr	r3, [r3, #4]
 4791 006e DB68     		ldr	r3, [r3, #12]
 4792 0070 7B61     		str	r3, [r7, #20]
 4793              	.LBE162:
3528:../../../FreeRTOS_9_0/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4794              		.loc 1 3528 0 is_stmt 1 discriminator 3
 4795 0072 7A6A     		ldr	r2, [r7, #36]
 4796 0074 1346     		mov	r3, r2
 4797 0076 DB00     		lsls	r3, r3, #3
 4798 0078 1344     		add	r3, r3, r2
 4799 007a 9B00     		lsls	r3, r3, #2
 4800 007c 1A46     		mov	r2, r3
 4801 007e FB68     		ldr	r3, [r7, #12]
 4802 0080 1A44     		add	r2, r2, r3
 4803 0082 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4804 0084 7869     		ldr	r0, [r7, #20]
 4805 0086 1146     		mov	r1, r2
 4806 0088 0122     		movs	r2, #1
 4807 008a FFF7FEFF 		bl	vTaskGetInfo
3529:../../../FreeRTOS_9_0/Source/tasks.c **** 				uxTask++;
 4808              		.loc 1 3529 0 discriminator 3
 4809 008e 7B6A     		ldr	r3, [r7, #36]
 4810 0090 0133     		adds	r3, r3, #1
 4811 0092 7B62     		str	r3, [r7, #36]
ARM GAS  /tmp/ccIgarPJ.s 			page 151


3530:../../../FreeRTOS_9_0/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 4812              		.loc 1 3530 0 discriminator 3
 4813 0094 7A69     		ldr	r2, [r7, #20]
 4814 0096 FB69     		ldr	r3, [r7, #28]
 4815 0098 9A42     		cmp	r2, r3
 4816 009a D4D1     		bne	.L303
 4817              	.L300:
3531:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3532:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
3533:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3534:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3535:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3536:../../../FreeRTOS_9_0/Source/tasks.c **** 
3537:../../../FreeRTOS_9_0/Source/tasks.c **** 		return uxTask;
 4818              		.loc 1 3537 0
 4819 009c 7B6A     		ldr	r3, [r7, #36]
3538:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 4820              		.loc 1 3538 0
 4821 009e 1846     		mov	r0, r3
 4822 00a0 2837     		adds	r7, r7, #40
 4823              	.LCFI189:
 4824              		.cfi_def_cfa_offset 8
 4825 00a2 BD46     		mov	sp, r7
 4826              	.LCFI190:
 4827              		.cfi_def_cfa_register 13
 4828              		@ sp needed
 4829 00a4 80BD     		pop	{r7, pc}
 4830              		.cfi_endproc
 4831              	.LFE42:
 4833 00a6 00BF     		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
 4834              		.align	2
 4835              		.thumb
 4836              		.thumb_func
 4838              	prvTaskCheckFreeStackSpace:
 4839              	.LFB43:
3539:../../../FreeRTOS_9_0/Source/tasks.c **** 
3540:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3541:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3542:../../../FreeRTOS_9_0/Source/tasks.c **** 
3543:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3544:../../../FreeRTOS_9_0/Source/tasks.c **** 
3545:../../../FreeRTOS_9_0/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3546:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 4840              		.loc 1 3546 0
 4841              		.cfi_startproc
 4842              		@ args = 0, pretend = 0, frame = 16
 4843              		@ frame_needed = 1, uses_anonymous_args = 0
 4844              		@ link register save eliminated.
 4845 0000 80B4     		push	{r7}
 4846              	.LCFI191:
 4847              		.cfi_def_cfa_offset 4
 4848              		.cfi_offset 7, -4
 4849 0002 85B0     		sub	sp, sp, #20
 4850              	.LCFI192:
 4851              		.cfi_def_cfa_offset 24
 4852 0004 00AF     		add	r7, sp, #0
 4853              	.LCFI193:
ARM GAS  /tmp/ccIgarPJ.s 			page 152


 4854              		.cfi_def_cfa_register 7
 4855 0006 7860     		str	r0, [r7, #4]
3547:../../../FreeRTOS_9_0/Source/tasks.c **** 	uint32_t ulCount = 0U;
 4856              		.loc 1 3547 0
 4857 0008 0023     		movs	r3, #0
 4858 000a FB60     		str	r3, [r7, #12]
3548:../../../FreeRTOS_9_0/Source/tasks.c **** 
3549:../../../FreeRTOS_9_0/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 4859              		.loc 1 3549 0
 4860 000c 05E0     		b	.L306
 4861              	.L307:
3550:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3551:../../../FreeRTOS_9_0/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 4862              		.loc 1 3551 0
 4863 000e 7B68     		ldr	r3, [r7, #4]
 4864 0010 0133     		adds	r3, r3, #1
 4865 0012 7B60     		str	r3, [r7, #4]
3552:../../../FreeRTOS_9_0/Source/tasks.c **** 			ulCount++;
 4866              		.loc 1 3552 0
 4867 0014 FB68     		ldr	r3, [r7, #12]
 4868 0016 0133     		adds	r3, r3, #1
 4869 0018 FB60     		str	r3, [r7, #12]
 4870              	.L306:
3549:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
 4871              		.loc 1 3549 0
 4872 001a 7B68     		ldr	r3, [r7, #4]
 4873 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4874 001e A52B     		cmp	r3, #165
 4875 0020 F5D0     		beq	.L307
3553:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3554:../../../FreeRTOS_9_0/Source/tasks.c **** 
3555:../../../FreeRTOS_9_0/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
 4876              		.loc 1 3555 0
 4877 0022 FB68     		ldr	r3, [r7, #12]
 4878 0024 9B08     		lsrs	r3, r3, #2
 4879 0026 FB60     		str	r3, [r7, #12]
3556:../../../FreeRTOS_9_0/Source/tasks.c **** 
3557:../../../FreeRTOS_9_0/Source/tasks.c **** 		return ( uint16_t ) ulCount;
 4880              		.loc 1 3557 0
 4881 0028 FB68     		ldr	r3, [r7, #12]
 4882 002a 9BB2     		uxth	r3, r3
3558:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 4883              		.loc 1 3558 0
 4884 002c 1846     		mov	r0, r3
 4885 002e 1437     		adds	r7, r7, #20
 4886              	.LCFI194:
 4887              		.cfi_def_cfa_offset 4
 4888 0030 BD46     		mov	sp, r7
 4889              	.LCFI195:
 4890              		.cfi_def_cfa_register 13
 4891              		@ sp needed
 4892 0032 5DF8047B 		ldr	r7, [sp], #4
 4893              	.LCFI196:
 4894              		.cfi_restore 7
 4895              		.cfi_def_cfa_offset 0
 4896 0036 7047     		bx	lr
 4897              		.cfi_endproc
ARM GAS  /tmp/ccIgarPJ.s 			page 153


 4898              	.LFE43:
 4900              		.section	.text.prvDeleteTCB,"ax",%progbits
 4901              		.align	2
 4902              		.thumb
 4903              		.thumb_func
 4905              	prvDeleteTCB:
 4906              	.LFB44:
3559:../../../FreeRTOS_9_0/Source/tasks.c **** 
3560:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3561:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3562:../../../FreeRTOS_9_0/Source/tasks.c **** 
3563:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3564:../../../FreeRTOS_9_0/Source/tasks.c **** 
3565:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3566:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
3567:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxTCB;
3568:../../../FreeRTOS_9_0/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3569:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxReturn;
3570:../../../FreeRTOS_9_0/Source/tasks.c **** 
3571:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3572:../../../FreeRTOS_9_0/Source/tasks.c **** 
3573:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3574:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3575:../../../FreeRTOS_9_0/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3576:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3577:../../../FreeRTOS_9_0/Source/tasks.c **** 		#else
3578:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3579:../../../FreeRTOS_9_0/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3580:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3581:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif
3582:../../../FreeRTOS_9_0/Source/tasks.c **** 
3583:../../../FreeRTOS_9_0/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3584:../../../FreeRTOS_9_0/Source/tasks.c **** 
3585:../../../FreeRTOS_9_0/Source/tasks.c **** 		return uxReturn;
3586:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
3587:../../../FreeRTOS_9_0/Source/tasks.c **** 
3588:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3589:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3590:../../../FreeRTOS_9_0/Source/tasks.c **** 
3591:../../../FreeRTOS_9_0/Source/tasks.c **** #if (INCLUDE_pxTaskGetStackStart == 1)
3592:../../../FreeRTOS_9_0/Source/tasks.c **** 	uint8_t* pxTaskGetStackStart( TaskHandle_t xTask)
3593:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
3594:../../../FreeRTOS_9_0/Source/tasks.c **** 	    TCB_t *pxTCB;
3595:../../../FreeRTOS_9_0/Source/tasks.c **** 	    UBaseType_t uxReturn;
3596:../../../FreeRTOS_9_0/Source/tasks.c ****         (void)uxReturn;
3597:../../../FreeRTOS_9_0/Source/tasks.c **** 
3598:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3599:../../../FreeRTOS_9_0/Source/tasks.c **** 		return ( uint8_t * ) pxTCB->pxStack;
3600:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
3601:../../../FreeRTOS_9_0/Source/tasks.c **** 
3602:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_pxTaskGetStackStart */
3603:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3604:../../../FreeRTOS_9_0/Source/tasks.c **** 
3605:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3606:../../../FreeRTOS_9_0/Source/tasks.c **** 
3607:../../../FreeRTOS_9_0/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3608:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
ARM GAS  /tmp/ccIgarPJ.s 			page 154


 4907              		.loc 1 3608 0
 4908              		.cfi_startproc
 4909              		@ args = 0, pretend = 0, frame = 8
 4910              		@ frame_needed = 1, uses_anonymous_args = 0
 4911 0000 80B5     		push	{r7, lr}
 4912              	.LCFI197:
 4913              		.cfi_def_cfa_offset 8
 4914              		.cfi_offset 7, -8
 4915              		.cfi_offset 14, -4
 4916 0002 82B0     		sub	sp, sp, #8
 4917              	.LCFI198:
 4918              		.cfi_def_cfa_offset 16
 4919 0004 00AF     		add	r7, sp, #0
 4920              	.LCFI199:
 4921              		.cfi_def_cfa_register 7
 4922 0006 7860     		str	r0, [r7, #4]
3609:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3610:../../../FreeRTOS_9_0/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3611:../../../FreeRTOS_9_0/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3612:../../../FreeRTOS_9_0/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3613:../../../FreeRTOS_9_0/Source/tasks.c **** 
3614:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3615:../../../FreeRTOS_9_0/Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3616:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3617:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3618:../../../FreeRTOS_9_0/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3619:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3620:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3621:../../../FreeRTOS_9_0/Source/tasks.c **** 
3622:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3623:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3624:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3625:../../../FreeRTOS_9_0/Source/tasks.c **** 			the stack and TCB. */
3626:../../../FreeRTOS_9_0/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
 4923              		.loc 1 3626 0
 4924 0008 7B68     		ldr	r3, [r7, #4]
 4925 000a 1B6B     		ldr	r3, [r3, #48]
 4926 000c 1846     		mov	r0, r3
 4927 000e FFF7FEFF 		bl	vPortFree
3627:../../../FreeRTOS_9_0/Source/tasks.c **** 			vPortFree( pxTCB );
 4928              		.loc 1 3627 0
 4929 0012 7868     		ldr	r0, [r7, #4]
 4930 0014 FFF7FEFF 		bl	vPortFree
3628:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3629:../../../FreeRTOS_9_0/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE == 1 )
3630:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3631:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3632:../../../FreeRTOS_9_0/Source/tasks.c **** 			check what was statically allocated before trying to free the
3633:../../../FreeRTOS_9_0/Source/tasks.c **** 			memory. */
3634:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3635:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3636:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3637:../../../FreeRTOS_9_0/Source/tasks.c **** 				must be freed. */
3638:../../../FreeRTOS_9_0/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3639:../../../FreeRTOS_9_0/Source/tasks.c **** 				vPortFree( pxTCB );
3640:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3641:../../../FreeRTOS_9_0/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
ARM GAS  /tmp/ccIgarPJ.s 			page 155


3642:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3643:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3644:../../../FreeRTOS_9_0/Source/tasks.c **** 				only memory that must be freed. */
3645:../../../FreeRTOS_9_0/Source/tasks.c **** 				vPortFree( pxTCB );
3646:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3647:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
3648:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3649:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3650:../../../FreeRTOS_9_0/Source/tasks.c **** 				nothing needs to be freed. */
3651:../../../FreeRTOS_9_0/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
3652:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3653:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3654:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3655:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3656:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 4931              		.loc 1 3656 0
 4932 0018 0837     		adds	r7, r7, #8
 4933              	.LCFI200:
 4934              		.cfi_def_cfa_offset 8
 4935 001a BD46     		mov	sp, r7
 4936              	.LCFI201:
 4937              		.cfi_def_cfa_register 13
 4938              		@ sp needed
 4939 001c 80BD     		pop	{r7, pc}
 4940              		.cfi_endproc
 4941              	.LFE44:
 4943 001e 00BF     		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 4944              		.align	2
 4945              		.thumb
 4946              		.thumb_func
 4948              	prvResetNextTaskUnblockTime:
 4949              	.LFB45:
3657:../../../FreeRTOS_9_0/Source/tasks.c **** 
3658:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3659:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3660:../../../FreeRTOS_9_0/Source/tasks.c **** 
3661:../../../FreeRTOS_9_0/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3662:../../../FreeRTOS_9_0/Source/tasks.c **** {
 4950              		.loc 1 3662 0
 4951              		.cfi_startproc
 4952              		@ args = 0, pretend = 0, frame = 8
 4953              		@ frame_needed = 1, uses_anonymous_args = 0
 4954              		@ link register save eliminated.
 4955 0000 80B4     		push	{r7}
 4956              	.LCFI202:
 4957              		.cfi_def_cfa_offset 4
 4958              		.cfi_offset 7, -4
 4959 0002 83B0     		sub	sp, sp, #12
 4960              	.LCFI203:
 4961              		.cfi_def_cfa_offset 16
 4962 0004 00AF     		add	r7, sp, #0
 4963              	.LCFI204:
 4964              		.cfi_def_cfa_register 7
3663:../../../FreeRTOS_9_0/Source/tasks.c **** TCB_t *pxTCB;
3664:../../../FreeRTOS_9_0/Source/tasks.c **** 
3665:../../../FreeRTOS_9_0/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 4965              		.loc 1 3665 0
ARM GAS  /tmp/ccIgarPJ.s 			page 156


 4966 0006 0E4B     		ldr	r3, .L315
 4967 0008 1B68     		ldr	r3, [r3]
 4968 000a 1B68     		ldr	r3, [r3]
 4969 000c 002B     		cmp	r3, #0
 4970 000e 01D1     		bne	.L311
 4971              		.loc 1 3665 0 is_stmt 0 discriminator 1
 4972 0010 0123     		movs	r3, #1
 4973 0012 00E0     		b	.L312
 4974              	.L311:
 4975              		.loc 1 3665 0 discriminator 2
 4976 0014 0023     		movs	r3, #0
 4977              	.L312:
 4978              		.loc 1 3665 0 discriminator 4
 4979 0016 002B     		cmp	r3, #0
 4980 0018 04D0     		beq	.L313
3666:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
3667:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3668:../../../FreeRTOS_9_0/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3669:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3670:../../../FreeRTOS_9_0/Source/tasks.c **** 		there is an item in the delayed list. */
3671:../../../FreeRTOS_9_0/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 4981              		.loc 1 3671 0 is_stmt 1
 4982 001a 0A4B     		ldr	r3, .L315+4
 4983 001c 4FF0FF32 		mov	r2, #-1
 4984 0020 1A60     		str	r2, [r3]
 4985 0022 08E0     		b	.L310
 4986              	.L313:
3672:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
3673:../../../FreeRTOS_9_0/Source/tasks.c **** 	else
3674:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
3675:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3676:../../../FreeRTOS_9_0/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3677:../../../FreeRTOS_9_0/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3678:../../../FreeRTOS_9_0/Source/tasks.c **** 		from the Blocked state. */
3679:../../../FreeRTOS_9_0/Source/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 4987              		.loc 1 3679 0
 4988 0024 064B     		ldr	r3, .L315
 4989 0026 1B68     		ldr	r3, [r3]
 4990 0028 DB68     		ldr	r3, [r3, #12]
 4991 002a DB68     		ldr	r3, [r3, #12]
 4992 002c 7B60     		str	r3, [r7, #4]
3680:../../../FreeRTOS_9_0/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 4993              		.loc 1 3680 0
 4994 002e 7B68     		ldr	r3, [r7, #4]
 4995 0030 5B68     		ldr	r3, [r3, #4]
 4996 0032 044A     		ldr	r2, .L315+4
 4997 0034 1360     		str	r3, [r2]
 4998              	.L310:
3681:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
3682:../../../FreeRTOS_9_0/Source/tasks.c **** }
 4999              		.loc 1 3682 0
 5000 0036 0C37     		adds	r7, r7, #12
 5001              	.LCFI205:
 5002              		.cfi_def_cfa_offset 4
 5003 0038 BD46     		mov	sp, r7
 5004              	.LCFI206:
 5005              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccIgarPJ.s 			page 157


 5006              		@ sp needed
 5007 003a 5DF8047B 		ldr	r7, [sp], #4
 5008              	.LCFI207:
 5009              		.cfi_restore 7
 5010              		.cfi_def_cfa_offset 0
 5011 003e 7047     		bx	lr
 5012              	.L316:
 5013              		.align	2
 5014              	.L315:
 5015 0040 00000000 		.word	pxDelayedTaskList
 5016 0044 00000000 		.word	xNextTaskUnblockTime
 5017              		.cfi_endproc
 5018              	.LFE45:
 5020              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 5021              		.align	2
 5022              		.global	xTaskGetCurrentTaskHandle
 5023              		.thumb
 5024              		.thumb_func
 5026              	xTaskGetCurrentTaskHandle:
 5027              	.LFB46:
3683:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3684:../../../FreeRTOS_9_0/Source/tasks.c **** 
3685:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3686:../../../FreeRTOS_9_0/Source/tasks.c **** 
3687:../../../FreeRTOS_9_0/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3688:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 5028              		.loc 1 3688 0
 5029              		.cfi_startproc
 5030              		@ args = 0, pretend = 0, frame = 8
 5031              		@ frame_needed = 1, uses_anonymous_args = 0
 5032              		@ link register save eliminated.
 5033 0000 80B4     		push	{r7}
 5034              	.LCFI208:
 5035              		.cfi_def_cfa_offset 4
 5036              		.cfi_offset 7, -4
 5037 0002 83B0     		sub	sp, sp, #12
 5038              	.LCFI209:
 5039              		.cfi_def_cfa_offset 16
 5040 0004 00AF     		add	r7, sp, #0
 5041              	.LCFI210:
 5042              		.cfi_def_cfa_register 7
3689:../../../FreeRTOS_9_0/Source/tasks.c **** 	TaskHandle_t xReturn;
3690:../../../FreeRTOS_9_0/Source/tasks.c **** 
3691:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3692:../../../FreeRTOS_9_0/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3693:../../../FreeRTOS_9_0/Source/tasks.c **** 		individual execution thread. */
3694:../../../FreeRTOS_9_0/Source/tasks.c **** 		xReturn = pxCurrentTCB;
 5043              		.loc 1 3694 0
 5044 0006 054B     		ldr	r3, .L319
 5045 0008 1B68     		ldr	r3, [r3]
 5046 000a 7B60     		str	r3, [r7, #4]
3695:../../../FreeRTOS_9_0/Source/tasks.c **** 
3696:../../../FreeRTOS_9_0/Source/tasks.c **** 		return xReturn;
 5047              		.loc 1 3696 0
 5048 000c 7B68     		ldr	r3, [r7, #4]
3697:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 5049              		.loc 1 3697 0
ARM GAS  /tmp/ccIgarPJ.s 			page 158


 5050 000e 1846     		mov	r0, r3
 5051 0010 0C37     		adds	r7, r7, #12
 5052              	.LCFI211:
 5053              		.cfi_def_cfa_offset 4
 5054 0012 BD46     		mov	sp, r7
 5055              	.LCFI212:
 5056              		.cfi_def_cfa_register 13
 5057              		@ sp needed
 5058 0014 5DF8047B 		ldr	r7, [sp], #4
 5059              	.LCFI213:
 5060              		.cfi_restore 7
 5061              		.cfi_def_cfa_offset 0
 5062 0018 7047     		bx	lr
 5063              	.L320:
 5064 001a 00BF     		.align	2
 5065              	.L319:
 5066 001c 00000000 		.word	pxCurrentTCB
 5067              		.cfi_endproc
 5068              	.LFE46:
 5070              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 5071              		.align	2
 5072              		.global	xTaskGetSchedulerState
 5073              		.thumb
 5074              		.thumb_func
 5076              	xTaskGetSchedulerState:
 5077              	.LFB47:
3698:../../../FreeRTOS_9_0/Source/tasks.c **** 
3699:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3700:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3701:../../../FreeRTOS_9_0/Source/tasks.c **** 
3702:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3703:../../../FreeRTOS_9_0/Source/tasks.c **** 
3704:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3705:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 5078              		.loc 1 3705 0
 5079              		.cfi_startproc
 5080              		@ args = 0, pretend = 0, frame = 8
 5081              		@ frame_needed = 1, uses_anonymous_args = 0
 5082              		@ link register save eliminated.
 5083 0000 80B4     		push	{r7}
 5084              	.LCFI214:
 5085              		.cfi_def_cfa_offset 4
 5086              		.cfi_offset 7, -4
 5087 0002 83B0     		sub	sp, sp, #12
 5088              	.LCFI215:
 5089              		.cfi_def_cfa_offset 16
 5090 0004 00AF     		add	r7, sp, #0
 5091              	.LCFI216:
 5092              		.cfi_def_cfa_register 7
3706:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xReturn;
3707:../../../FreeRTOS_9_0/Source/tasks.c **** 
3708:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
 5093              		.loc 1 3708 0
 5094 0006 0B4B     		ldr	r3, .L326
 5095 0008 1B68     		ldr	r3, [r3]
 5096 000a 002B     		cmp	r3, #0
 5097 000c 02D1     		bne	.L322
ARM GAS  /tmp/ccIgarPJ.s 			page 159


3709:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3710:../../../FreeRTOS_9_0/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
 5098              		.loc 1 3710 0
 5099 000e 0123     		movs	r3, #1
 5100 0010 7B60     		str	r3, [r7, #4]
 5101 0012 08E0     		b	.L323
 5102              	.L322:
3711:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3712:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
3713:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3714:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 5103              		.loc 1 3714 0
 5104 0014 084B     		ldr	r3, .L326+4
 5105 0016 1B68     		ldr	r3, [r3]
 5106 0018 002B     		cmp	r3, #0
 5107 001a 02D1     		bne	.L324
3715:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3716:../../../FreeRTOS_9_0/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
 5108              		.loc 1 3716 0
 5109 001c 0223     		movs	r3, #2
 5110 001e 7B60     		str	r3, [r7, #4]
 5111 0020 01E0     		b	.L323
 5112              	.L324:
3717:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3718:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
3719:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3720:../../../FreeRTOS_9_0/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
 5113              		.loc 1 3720 0
 5114 0022 0023     		movs	r3, #0
 5115 0024 7B60     		str	r3, [r7, #4]
 5116              	.L323:
3721:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3722:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3723:../../../FreeRTOS_9_0/Source/tasks.c **** 
3724:../../../FreeRTOS_9_0/Source/tasks.c **** 		return xReturn;
 5117              		.loc 1 3724 0
 5118 0026 7B68     		ldr	r3, [r7, #4]
3725:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 5119              		.loc 1 3725 0
 5120 0028 1846     		mov	r0, r3
 5121 002a 0C37     		adds	r7, r7, #12
 5122              	.LCFI217:
 5123              		.cfi_def_cfa_offset 4
 5124 002c BD46     		mov	sp, r7
 5125              	.LCFI218:
 5126              		.cfi_def_cfa_register 13
 5127              		@ sp needed
 5128 002e 5DF8047B 		ldr	r7, [sp], #4
 5129              	.LCFI219:
 5130              		.cfi_restore 7
 5131              		.cfi_def_cfa_offset 0
 5132 0032 7047     		bx	lr
 5133              	.L327:
 5134              		.align	2
 5135              	.L326:
 5136 0034 00000000 		.word	xSchedulerRunning
 5137 0038 00000000 		.word	uxSchedulerSuspended
ARM GAS  /tmp/ccIgarPJ.s 			page 160


 5138              		.cfi_endproc
 5139              	.LFE47:
 5141              		.section	.text.vTaskPriorityInherit,"ax",%progbits
 5142              		.align	2
 5143              		.global	vTaskPriorityInherit
 5144              		.thumb
 5145              		.thumb_func
 5147              	vTaskPriorityInherit:
 5148              	.LFB48:
3726:../../../FreeRTOS_9_0/Source/tasks.c **** 
3727:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3728:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3729:../../../FreeRTOS_9_0/Source/tasks.c **** 
3730:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3731:../../../FreeRTOS_9_0/Source/tasks.c **** 
3732:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3733:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 5149              		.loc 1 3733 0
 5150              		.cfi_startproc
 5151              		@ args = 0, pretend = 0, frame = 16
 5152              		@ frame_needed = 1, uses_anonymous_args = 0
 5153 0000 80B5     		push	{r7, lr}
 5154              	.LCFI220:
 5155              		.cfi_def_cfa_offset 8
 5156              		.cfi_offset 7, -8
 5157              		.cfi_offset 14, -4
 5158 0002 84B0     		sub	sp, sp, #16
 5159              	.LCFI221:
 5160              		.cfi_def_cfa_offset 24
 5161 0004 00AF     		add	r7, sp, #0
 5162              	.LCFI222:
 5163              		.cfi_def_cfa_register 7
 5164 0006 7860     		str	r0, [r7, #4]
3734:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 5165              		.loc 1 3734 0
 5166 0008 7B68     		ldr	r3, [r7, #4]
 5167 000a FB60     		str	r3, [r7, #12]
3735:../../../FreeRTOS_9_0/Source/tasks.c **** 
3736:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3737:../../../FreeRTOS_9_0/Source/tasks.c **** 		locked then the mutex holder might now be NULL. */
3738:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 5168              		.loc 1 3738 0
 5169 000c 7B68     		ldr	r3, [r7, #4]
 5170 000e 002B     		cmp	r3, #0
 5171 0010 69D0     		beq	.L328
3739:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3740:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3741:../../../FreeRTOS_9_0/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3742:../../../FreeRTOS_9_0/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3743:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 5172              		.loc 1 3743 0
 5173 0012 FB68     		ldr	r3, [r7, #12]
 5174 0014 DA6A     		ldr	r2, [r3, #44]
 5175 0016 354B     		ldr	r3, .L337
 5176 0018 1B68     		ldr	r3, [r3]
 5177 001a DB6A     		ldr	r3, [r3, #44]
 5178 001c 9A42     		cmp	r2, r3
ARM GAS  /tmp/ccIgarPJ.s 			page 161


 5179 001e 62D2     		bcs	.L328
3744:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3745:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3746:../../../FreeRTOS_9_0/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3747:../../../FreeRTOS_9_0/Source/tasks.c **** 				not	being used for anything else. */
3748:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 5180              		.loc 1 3748 0
 5181 0020 FB68     		ldr	r3, [r7, #12]
 5182 0022 9B69     		ldr	r3, [r3, #24]
 5183 0024 002B     		cmp	r3, #0
 5184 0026 06DB     		blt	.L330
3749:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
3750:../../../FreeRTOS_9_0/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
 5185              		.loc 1 3750 0
 5186 0028 304B     		ldr	r3, .L337
 5187 002a 1B68     		ldr	r3, [r3]
 5188 002c DB6A     		ldr	r3, [r3, #44]
 5189 002e C3F10702 		rsb	r2, r3, #7
 5190 0032 FB68     		ldr	r3, [r7, #12]
 5191 0034 9A61     		str	r2, [r3, #24]
 5192              	.L330:
3751:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
3752:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
3753:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
3754:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3755:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
3756:../../../FreeRTOS_9_0/Source/tasks.c **** 
3757:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3758:../../../FreeRTOS_9_0/Source/tasks.c **** 				to be moved into a new list. */
3759:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListI
 5193              		.loc 1 3759 0
 5194 0036 FB68     		ldr	r3, [r7, #12]
 5195 0038 5969     		ldr	r1, [r3, #20]
 5196 003a FB68     		ldr	r3, [r7, #12]
 5197 003c DA6A     		ldr	r2, [r3, #44]
 5198 003e 1346     		mov	r3, r2
 5199 0040 9B00     		lsls	r3, r3, #2
 5200 0042 1344     		add	r3, r3, r2
 5201 0044 9B00     		lsls	r3, r3, #2
 5202 0046 2A4A     		ldr	r2, .L337+4
 5203 0048 1344     		add	r3, r3, r2
 5204 004a 9942     		cmp	r1, r3
 5205 004c 01D1     		bne	.L331
 5206              		.loc 1 3759 0 is_stmt 0 discriminator 1
 5207 004e 0123     		movs	r3, #1
 5208 0050 00E0     		b	.L332
 5209              	.L331:
 5210              		.loc 1 3759 0 discriminator 2
 5211 0052 0023     		movs	r3, #0
 5212              	.L332:
 5213              		.loc 1 3759 0 discriminator 4
 5214 0054 002B     		cmp	r3, #0
 5215 0056 3CD0     		beq	.L333
3760:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
3761:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 5216              		.loc 1 3761 0 is_stmt 1
 5217 0058 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccIgarPJ.s 			page 162


 5218 005a 0433     		adds	r3, r3, #4
 5219 005c 1846     		mov	r0, r3
 5220 005e FFF7FEFF 		bl	uxListRemove
 5221 0062 0346     		mov	r3, r0
 5222 0064 002B     		cmp	r3, #0
 5223 0066 15D1     		bne	.L334
3762:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
3763:../../../FreeRTOS_9_0/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 5224              		.loc 1 3763 0
 5225 0068 FB68     		ldr	r3, [r7, #12]
 5226 006a DA6A     		ldr	r2, [r3, #44]
 5227 006c 2049     		ldr	r1, .L337+4
 5228 006e 1346     		mov	r3, r2
 5229 0070 9B00     		lsls	r3, r3, #2
 5230 0072 1344     		add	r3, r3, r2
 5231 0074 9B00     		lsls	r3, r3, #2
 5232 0076 0B44     		add	r3, r3, r1
 5233 0078 1B68     		ldr	r3, [r3]
 5234 007a 002B     		cmp	r3, #0
 5235 007c 0AD1     		bne	.L334
 5236              		.loc 1 3763 0 is_stmt 0 discriminator 1
 5237 007e FB68     		ldr	r3, [r7, #12]
 5238 0080 DB6A     		ldr	r3, [r3, #44]
 5239 0082 1A46     		mov	r2, r3
 5240 0084 0123     		movs	r3, #1
 5241 0086 9340     		lsls	r3, r3, r2
 5242 0088 DA43     		mvns	r2, r3
 5243 008a 1A4B     		ldr	r3, .L337+8
 5244 008c 1B68     		ldr	r3, [r3]
 5245 008e 1340     		ands	r3, r3, r2
 5246 0090 184A     		ldr	r2, .L337+8
 5247 0092 1360     		str	r3, [r2]
 5248              	.L334:
3764:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
3765:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
3766:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
3767:../../../FreeRTOS_9_0/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3768:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
3769:../../../FreeRTOS_9_0/Source/tasks.c **** 
3770:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3771:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 5249              		.loc 1 3771 0 is_stmt 1
 5250 0094 154B     		ldr	r3, .L337
 5251 0096 1B68     		ldr	r3, [r3]
 5252 0098 DA6A     		ldr	r2, [r3, #44]
 5253 009a FB68     		ldr	r3, [r7, #12]
 5254 009c DA62     		str	r2, [r3, #44]
3772:../../../FreeRTOS_9_0/Source/tasks.c **** 					prvReaddTaskToReadyList( pxTCB );
 5255              		.loc 1 3772 0
 5256 009e FB68     		ldr	r3, [r7, #12]
 5257 00a0 DB6A     		ldr	r3, [r3, #44]
 5258 00a2 1A46     		mov	r2, r3
 5259 00a4 0123     		movs	r3, #1
 5260 00a6 03FA02F2 		lsl	r2, r3, r2
 5261 00aa 124B     		ldr	r3, .L337+8
 5262 00ac 1B68     		ldr	r3, [r3]
 5263 00ae 1343     		orrs	r3, r3, r2
ARM GAS  /tmp/ccIgarPJ.s 			page 163


 5264 00b0 104A     		ldr	r2, .L337+8
 5265 00b2 1360     		str	r3, [r2]
 5266 00b4 FB68     		ldr	r3, [r7, #12]
 5267 00b6 DA6A     		ldr	r2, [r3, #44]
 5268 00b8 1346     		mov	r3, r2
 5269 00ba 9B00     		lsls	r3, r3, #2
 5270 00bc 1344     		add	r3, r3, r2
 5271 00be 9B00     		lsls	r3, r3, #2
 5272 00c0 0B4A     		ldr	r2, .L337+4
 5273 00c2 1A44     		add	r2, r2, r3
 5274 00c4 FB68     		ldr	r3, [r7, #12]
 5275 00c6 0433     		adds	r3, r3, #4
 5276 00c8 1046     		mov	r0, r2
 5277 00ca 1946     		mov	r1, r3
 5278 00cc FFF7FEFF 		bl	vListInsertEnd
 5279 00d0 04E0     		b	.L336
 5280              	.L333:
3773:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
3774:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
3775:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
3776:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Just inherit the priority. */
3777:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 5281              		.loc 1 3777 0
 5282 00d2 064B     		ldr	r3, .L337
 5283 00d4 1B68     		ldr	r3, [r3]
 5284 00d6 DA6A     		ldr	r2, [r3, #44]
 5285 00d8 FB68     		ldr	r3, [r7, #12]
 5286 00da DA62     		str	r2, [r3, #44]
 5287              	.L336:
3778:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
3779:../../../FreeRTOS_9_0/Source/tasks.c **** 
3780:../../../FreeRTOS_9_0/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
 5288              		.loc 1 3780 0
 5289 00dc 7B68     		ldr	r3, [r7, #4]
 5290 00de 4920     		movs	r0, #73
 5291 00e0 1946     		mov	r1, r3
 5292 00e2 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32
 5293              	.L328:
3781:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3782:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
3783:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3784:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3785:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3786:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3787:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
3788:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3789:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3790:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3791:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 5294              		.loc 1 3791 0
 5295 00e6 1037     		adds	r7, r7, #16
 5296              	.LCFI223:
 5297              		.cfi_def_cfa_offset 8
 5298 00e8 BD46     		mov	sp, r7
 5299              	.LCFI224:
 5300              		.cfi_def_cfa_register 13
 5301              		@ sp needed
ARM GAS  /tmp/ccIgarPJ.s 			page 164


 5302 00ea 80BD     		pop	{r7, pc}
 5303              	.L338:
 5304              		.align	2
 5305              	.L337:
 5306 00ec 00000000 		.word	pxCurrentTCB
 5307 00f0 00000000 		.word	pxReadyTasksLists
 5308 00f4 00000000 		.word	uxTopReadyPriority
 5309              		.cfi_endproc
 5310              	.LFE48:
 5312              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 5313              		.align	2
 5314              		.global	xTaskPriorityDisinherit
 5315              		.thumb
 5316              		.thumb_func
 5318              	xTaskPriorityDisinherit:
 5319              	.LFB49:
3792:../../../FreeRTOS_9_0/Source/tasks.c **** 
3793:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3794:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3795:../../../FreeRTOS_9_0/Source/tasks.c **** 
3796:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3797:../../../FreeRTOS_9_0/Source/tasks.c **** 
3798:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3799:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 5320              		.loc 1 3799 0
 5321              		.cfi_startproc
 5322              		@ args = 0, pretend = 0, frame = 24
 5323              		@ frame_needed = 1, uses_anonymous_args = 0
 5324 0000 80B5     		push	{r7, lr}
 5325              	.LCFI225:
 5326              		.cfi_def_cfa_offset 8
 5327              		.cfi_offset 7, -8
 5328              		.cfi_offset 14, -4
 5329 0002 86B0     		sub	sp, sp, #24
 5330              	.LCFI226:
 5331              		.cfi_def_cfa_offset 32
 5332 0004 00AF     		add	r7, sp, #0
 5333              	.LCFI227:
 5334              		.cfi_def_cfa_register 7
 5335 0006 7860     		str	r0, [r7, #4]
3800:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 5336              		.loc 1 3800 0
 5337 0008 7B68     		ldr	r3, [r7, #4]
 5338 000a 3B61     		str	r3, [r7, #16]
3801:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 5339              		.loc 1 3801 0
 5340 000c 0023     		movs	r3, #0
 5341 000e 7B61     		str	r3, [r7, #20]
3802:../../../FreeRTOS_9_0/Source/tasks.c **** 
3803:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 5342              		.loc 1 3803 0
 5343 0010 7B68     		ldr	r3, [r7, #4]
 5344 0012 002B     		cmp	r3, #0
 5345 0014 73D0     		beq	.L340
3804:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3805:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3806:../../../FreeRTOS_9_0/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
ARM GAS  /tmp/ccIgarPJ.s 			page 165


3807:../../../FreeRTOS_9_0/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3808:../../../FreeRTOS_9_0/Source/tasks.c **** 			be the running state task. */
3809:../../../FreeRTOS_9_0/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
 5346              		.loc 1 3809 0
 5347 0016 3C4B     		ldr	r3, .L348
 5348 0018 1B68     		ldr	r3, [r3]
 5349 001a 3A69     		ldr	r2, [r7, #16]
 5350 001c 9A42     		cmp	r2, r3
 5351 001e 09D0     		beq	.L341
 5352              	.LBB163:
 5353              	.LBB164:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5354              		.loc 2 237 0 discriminator 1
 5355              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5356 0020 4FF05003 			mov r3, #80												
 5357 0024 83F31188 		msr basepri, r3											
 5358 0028 BFF36F8F 		isb														
 5359 002c BFF34F8F 		dsb														
 5360              	
 5361              	@ 0 "" 2
 5362              		.thumb
 5363 0030 FB60     		str	r3, [r7, #12]
 5364              	.L342:
 5365              	.LBE164:
 5366              	.LBE163:
 5367              		.loc 1 3809 0 discriminator 1
 5368 0032 FEE7     		b	.L342
 5369              	.L341:
3810:../../../FreeRTOS_9_0/Source/tasks.c **** 
3811:../../../FreeRTOS_9_0/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 5370              		.loc 1 3811 0
 5371 0034 3B69     		ldr	r3, [r7, #16]
 5372 0036 1B6D     		ldr	r3, [r3, #80]
 5373 0038 002B     		cmp	r3, #0
 5374 003a 09D1     		bne	.L343
 5375              	.LBB165:
 5376              	.LBB166:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5377              		.loc 2 237 0 discriminator 1
 5378              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5379 003c 4FF05003 			mov r3, #80												
 5380 0040 83F31188 		msr basepri, r3											
 5381 0044 BFF36F8F 		isb														
 5382 0048 BFF34F8F 		dsb														
 5383              	
 5384              	@ 0 "" 2
 5385              		.thumb
 5386 004c BB60     		str	r3, [r7, #8]
 5387              	.L344:
 5388              	.LBE166:
 5389              	.LBE165:
 5390              		.loc 1 3811 0 discriminator 2
 5391 004e FEE7     		b	.L344
 5392              	.L343:
3812:../../../FreeRTOS_9_0/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 5393              		.loc 1 3812 0
 5394 0050 3B69     		ldr	r3, [r7, #16]
ARM GAS  /tmp/ccIgarPJ.s 			page 166


 5395 0052 1B6D     		ldr	r3, [r3, #80]
 5396 0054 5A1E     		subs	r2, r3, #1
 5397 0056 3B69     		ldr	r3, [r7, #16]
 5398 0058 1A65     		str	r2, [r3, #80]
3813:../../../FreeRTOS_9_0/Source/tasks.c **** 
3814:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3815:../../../FreeRTOS_9_0/Source/tasks.c **** 			task? */
3816:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 5399              		.loc 1 3816 0
 5400 005a 3B69     		ldr	r3, [r7, #16]
 5401 005c DA6A     		ldr	r2, [r3, #44]
 5402 005e 3B69     		ldr	r3, [r7, #16]
 5403 0060 DB6C     		ldr	r3, [r3, #76]
 5404 0062 9A42     		cmp	r2, r3
 5405 0064 4BD0     		beq	.L340
3817:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3818:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3819:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 5406              		.loc 1 3819 0
 5407 0066 3B69     		ldr	r3, [r7, #16]
 5408 0068 1B6D     		ldr	r3, [r3, #80]
 5409 006a 002B     		cmp	r3, #0
 5410 006c 47D1     		bne	.L340
3820:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
3821:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
3822:../../../FreeRTOS_9_0/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3823:../../../FreeRTOS_9_0/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3824:../../../FreeRTOS_9_0/Source/tasks.c **** 					holding	task then it must be the running state task.  Remove
3825:../../../FreeRTOS_9_0/Source/tasks.c **** 					the	holding task from the ready	list. */
3826:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 5411              		.loc 1 3826 0
 5412 006e 3B69     		ldr	r3, [r7, #16]
 5413 0070 0433     		adds	r3, r3, #4
 5414 0072 1846     		mov	r0, r3
 5415 0074 FFF7FEFF 		bl	uxListRemove
 5416 0078 0346     		mov	r3, r0
 5417 007a 002B     		cmp	r3, #0
 5418 007c 15D1     		bne	.L345
3827:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
3828:../../../FreeRTOS_9_0/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 5419              		.loc 1 3828 0
 5420 007e 3B69     		ldr	r3, [r7, #16]
 5421 0080 DA6A     		ldr	r2, [r3, #44]
 5422 0082 2249     		ldr	r1, .L348+4
 5423 0084 1346     		mov	r3, r2
 5424 0086 9B00     		lsls	r3, r3, #2
 5425 0088 1344     		add	r3, r3, r2
 5426 008a 9B00     		lsls	r3, r3, #2
 5427 008c 0B44     		add	r3, r3, r1
 5428 008e 1B68     		ldr	r3, [r3]
 5429 0090 002B     		cmp	r3, #0
 5430 0092 0AD1     		bne	.L345
 5431              		.loc 1 3828 0 is_stmt 0 discriminator 1
 5432 0094 3B69     		ldr	r3, [r7, #16]
 5433 0096 DB6A     		ldr	r3, [r3, #44]
 5434 0098 1A46     		mov	r2, r3
 5435 009a 0123     		movs	r3, #1
ARM GAS  /tmp/ccIgarPJ.s 			page 167


 5436 009c 9340     		lsls	r3, r3, r2
 5437 009e DA43     		mvns	r2, r3
 5438 00a0 1B4B     		ldr	r3, .L348+8
 5439 00a2 1B68     		ldr	r3, [r3]
 5440 00a4 1340     		ands	r3, r3, r2
 5441 00a6 1A4A     		ldr	r2, .L348+8
 5442 00a8 1360     		str	r3, [r2]
 5443              	.L345:
3829:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
3830:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
3831:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
3832:../../../FreeRTOS_9_0/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3833:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
3834:../../../FreeRTOS_9_0/Source/tasks.c **** 
3835:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
3836:../../../FreeRTOS_9_0/Source/tasks.c **** 					new	ready list. */
3837:../../../FreeRTOS_9_0/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 5444              		.loc 1 3837 0 is_stmt 1
 5445 00aa 7B68     		ldr	r3, [r7, #4]
 5446 00ac 4A20     		movs	r0, #74
 5447 00ae 1946     		mov	r1, r3
 5448 00b0 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32
3838:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
 5449              		.loc 1 3838 0
 5450 00b4 3B69     		ldr	r3, [r7, #16]
 5451 00b6 DA6C     		ldr	r2, [r3, #76]
 5452 00b8 3B69     		ldr	r3, [r7, #16]
 5453 00ba DA62     		str	r2, [r3, #44]
3839:../../../FreeRTOS_9_0/Source/tasks.c **** 
3840:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3841:../../../FreeRTOS_9_0/Source/tasks.c **** 					any other purpose if this task is running, and it must be
3842:../../../FreeRTOS_9_0/Source/tasks.c **** 					running to give back the mutex. */
3843:../../../FreeRTOS_9_0/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
 5454              		.loc 1 3843 0
 5455 00bc 3B69     		ldr	r3, [r7, #16]
 5456 00be DB6A     		ldr	r3, [r3, #44]
 5457 00c0 C3F10702 		rsb	r2, r3, #7
 5458 00c4 3B69     		ldr	r3, [r7, #16]
 5459 00c6 9A61     		str	r2, [r3, #24]
3844:../../../FreeRTOS_9_0/Source/tasks.c **** 					prvReaddTaskToReadyList( pxTCB );
 5460              		.loc 1 3844 0
 5461 00c8 3B69     		ldr	r3, [r7, #16]
 5462 00ca DB6A     		ldr	r3, [r3, #44]
 5463 00cc 1A46     		mov	r2, r3
 5464 00ce 0123     		movs	r3, #1
 5465 00d0 03FA02F2 		lsl	r2, r3, r2
 5466 00d4 0E4B     		ldr	r3, .L348+8
 5467 00d6 1B68     		ldr	r3, [r3]
 5468 00d8 1343     		orrs	r3, r3, r2
 5469 00da 0D4A     		ldr	r2, .L348+8
 5470 00dc 1360     		str	r3, [r2]
 5471 00de 3B69     		ldr	r3, [r7, #16]
 5472 00e0 DA6A     		ldr	r2, [r3, #44]
 5473 00e2 1346     		mov	r3, r2
 5474 00e4 9B00     		lsls	r3, r3, #2
 5475 00e6 1344     		add	r3, r3, r2
 5476 00e8 9B00     		lsls	r3, r3, #2
ARM GAS  /tmp/ccIgarPJ.s 			page 168


 5477 00ea 084A     		ldr	r2, .L348+4
 5478 00ec 1A44     		add	r2, r2, r3
 5479 00ee 3B69     		ldr	r3, [r7, #16]
 5480 00f0 0433     		adds	r3, r3, #4
 5481 00f2 1046     		mov	r0, r2
 5482 00f4 1946     		mov	r1, r3
 5483 00f6 FFF7FEFF 		bl	vListInsertEnd
3845:../../../FreeRTOS_9_0/Source/tasks.c **** 
3846:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
3847:../../../FreeRTOS_9_0/Source/tasks.c **** 					This is only actually required in the corner case whereby
3848:../../../FreeRTOS_9_0/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3849:../../../FreeRTOS_9_0/Source/tasks.c **** 					in an order different to that in which they were taken.
3850:../../../FreeRTOS_9_0/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
3851:../../../FreeRTOS_9_0/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
3852:../../../FreeRTOS_9_0/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
3853:../../../FreeRTOS_9_0/Source/tasks.c **** 					a task is waiting on it or not. */
3854:../../../FreeRTOS_9_0/Source/tasks.c **** 					xReturn = pdTRUE;
 5484              		.loc 1 3854 0
 5485 00fa 0123     		movs	r3, #1
 5486 00fc 7B61     		str	r3, [r7, #20]
 5487              	.L340:
3855:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
3856:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
3857:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
3858:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3859:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
3860:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3861:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
3862:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3863:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3864:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3865:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3866:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
3867:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3868:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3869:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3870:../../../FreeRTOS_9_0/Source/tasks.c **** 
3871:../../../FreeRTOS_9_0/Source/tasks.c **** 		return xReturn;
 5488              		.loc 1 3871 0
 5489 00fe 7B69     		ldr	r3, [r7, #20]
3872:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 5490              		.loc 1 3872 0
 5491 0100 1846     		mov	r0, r3
 5492 0102 1837     		adds	r7, r7, #24
 5493              	.LCFI228:
 5494              		.cfi_def_cfa_offset 8
 5495 0104 BD46     		mov	sp, r7
 5496              	.LCFI229:
 5497              		.cfi_def_cfa_register 13
 5498              		@ sp needed
 5499 0106 80BD     		pop	{r7, pc}
 5500              	.L349:
 5501              		.align	2
 5502              	.L348:
 5503 0108 00000000 		.word	pxCurrentTCB
 5504 010c 00000000 		.word	pxReadyTasksLists
 5505 0110 00000000 		.word	uxTopReadyPriority
ARM GAS  /tmp/ccIgarPJ.s 			page 169


 5506              		.cfi_endproc
 5507              	.LFE49:
 5509              		.section	.text.prvWriteNameToBuffer,"ax",%progbits
 5510              		.align	2
 5511              		.thumb
 5512              		.thumb_func
 5514              	prvWriteNameToBuffer:
 5515              	.LFB50:
3873:../../../FreeRTOS_9_0/Source/tasks.c **** 
3874:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3875:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3876:../../../FreeRTOS_9_0/Source/tasks.c **** 
3877:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3878:../../../FreeRTOS_9_0/Source/tasks.c **** 
3879:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskEnterCritical( void )
3880:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
3881:../../../FreeRTOS_9_0/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
3882:../../../FreeRTOS_9_0/Source/tasks.c **** 
3883:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3884:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3885:../../../FreeRTOS_9_0/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
3886:../../../FreeRTOS_9_0/Source/tasks.c **** 
3887:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
3888:../../../FreeRTOS_9_0/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
3889:../../../FreeRTOS_9_0/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
3890:../../../FreeRTOS_9_0/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
3891:../../../FreeRTOS_9_0/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
3892:../../../FreeRTOS_9_0/Source/tasks.c **** 			critical section. */
3893:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
3894:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3895:../../../FreeRTOS_9_0/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
3896:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3897:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3898:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
3899:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3900:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3901:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3902:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
3903:../../../FreeRTOS_9_0/Source/tasks.c **** 
3904:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3905:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3906:../../../FreeRTOS_9_0/Source/tasks.c **** 
3907:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3908:../../../FreeRTOS_9_0/Source/tasks.c **** 
3909:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskExitCritical( void )
3910:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
3911:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3912:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3913:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
3914:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3915:../../../FreeRTOS_9_0/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
3916:../../../FreeRTOS_9_0/Source/tasks.c **** 
3917:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
3918:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
3919:../../../FreeRTOS_9_0/Source/tasks.c **** 					portENABLE_INTERRUPTS();
3920:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
3921:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
ARM GAS  /tmp/ccIgarPJ.s 			page 170


3922:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
3923:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3924:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
3925:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3926:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
3927:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3928:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3929:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3930:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3931:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
3932:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3933:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3934:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3935:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
3936:../../../FreeRTOS_9_0/Source/tasks.c **** 
3937:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3938:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3939:../../../FreeRTOS_9_0/Source/tasks.c **** 
3940:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3941:../../../FreeRTOS_9_0/Source/tasks.c **** 
3942:../../../FreeRTOS_9_0/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
3943:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 5516              		.loc 1 3943 0
 5517              		.cfi_startproc
 5518              		@ args = 0, pretend = 0, frame = 16
 5519              		@ frame_needed = 1, uses_anonymous_args = 0
 5520 0000 80B5     		push	{r7, lr}
 5521              	.LCFI230:
 5522              		.cfi_def_cfa_offset 8
 5523              		.cfi_offset 7, -8
 5524              		.cfi_offset 14, -4
 5525 0002 84B0     		sub	sp, sp, #16
 5526              	.LCFI231:
 5527              		.cfi_def_cfa_offset 24
 5528 0004 00AF     		add	r7, sp, #0
 5529              	.LCFI232:
 5530              		.cfi_def_cfa_register 7
 5531 0006 7860     		str	r0, [r7, #4]
 5532 0008 3960     		str	r1, [r7]
3944:../../../FreeRTOS_9_0/Source/tasks.c **** 	size_t x;
3945:../../../FreeRTOS_9_0/Source/tasks.c **** 
3946:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Start by copying the entire string. */
3947:../../../FreeRTOS_9_0/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
 5533              		.loc 1 3947 0
 5534 000a 7868     		ldr	r0, [r7, #4]
 5535 000c 3968     		ldr	r1, [r7]
 5536 000e FFF7FEFF 		bl	strcpy
3948:../../../FreeRTOS_9_0/Source/tasks.c **** 
3949:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
3950:../../../FreeRTOS_9_0/Source/tasks.c **** 		printed out. */
3951:../../../FreeRTOS_9_0/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 5537              		.loc 1 3951 0
 5538 0012 7868     		ldr	r0, [r7, #4]
 5539 0014 FFF7FEFF 		bl	strlen
 5540 0018 F860     		str	r0, [r7, #12]
 5541 001a 07E0     		b	.L351
 5542              	.L352:
ARM GAS  /tmp/ccIgarPJ.s 			page 171


3952:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3953:../../../FreeRTOS_9_0/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
 5543              		.loc 1 3953 0 discriminator 3
 5544 001c 7A68     		ldr	r2, [r7, #4]
 5545 001e FB68     		ldr	r3, [r7, #12]
 5546 0020 1344     		add	r3, r3, r2
 5547 0022 2022     		movs	r2, #32
 5548 0024 1A70     		strb	r2, [r3]
3951:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
 5549              		.loc 1 3951 0 discriminator 3
 5550 0026 FB68     		ldr	r3, [r7, #12]
 5551 0028 0133     		adds	r3, r3, #1
 5552 002a FB60     		str	r3, [r7, #12]
 5553              	.L351:
3951:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
 5554              		.loc 1 3951 0 is_stmt 0 discriminator 1
 5555 002c FB68     		ldr	r3, [r7, #12]
 5556 002e 0E2B     		cmp	r3, #14
 5557 0030 F4D9     		bls	.L352
3954:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3955:../../../FreeRTOS_9_0/Source/tasks.c **** 
3956:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Terminate. */
3957:../../../FreeRTOS_9_0/Source/tasks.c **** 		pcBuffer[ x ] = 0x00;
 5558              		.loc 1 3957 0 is_stmt 1
 5559 0032 7A68     		ldr	r2, [r7, #4]
 5560 0034 FB68     		ldr	r3, [r7, #12]
 5561 0036 1344     		add	r3, r3, r2
 5562 0038 0022     		movs	r2, #0
 5563 003a 1A70     		strb	r2, [r3]
3958:../../../FreeRTOS_9_0/Source/tasks.c **** 
3959:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Return the new end of string. */
3960:../../../FreeRTOS_9_0/Source/tasks.c **** 		return &( pcBuffer[ x ] );
 5564              		.loc 1 3960 0
 5565 003c 7A68     		ldr	r2, [r7, #4]
 5566 003e FB68     		ldr	r3, [r7, #12]
 5567 0040 1344     		add	r3, r3, r2
3961:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 5568              		.loc 1 3961 0
 5569 0042 1846     		mov	r0, r3
 5570 0044 1037     		adds	r7, r7, #16
 5571              	.LCFI233:
 5572              		.cfi_def_cfa_offset 8
 5573 0046 BD46     		mov	sp, r7
 5574              	.LCFI234:
 5575              		.cfi_def_cfa_register 13
 5576              		@ sp needed
 5577 0048 80BD     		pop	{r7, pc}
 5578              		.cfi_endproc
 5579              	.LFE50:
 5581 004a 00BF     		.section	.rodata
 5582 0005 000000   		.align	2
 5583              	.LC1:
 5584 0008 09256309 		.ascii	"\011%c\011%u\011%u\011%u\015\012\000"
 5584      25750925 
 5584      75092575 
 5584      0D0A00
 5585              		.section	.text.vTaskList,"ax",%progbits
ARM GAS  /tmp/ccIgarPJ.s 			page 172


 5586              		.align	2
 5587              		.global	vTaskList
 5588              		.thumb
 5589              		.thumb_func
 5591              	vTaskList:
 5592              	.LFB51:
3962:../../../FreeRTOS_9_0/Source/tasks.c **** 
3963:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
3964:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3965:../../../FreeRTOS_9_0/Source/tasks.c **** 
3966:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3967:../../../FreeRTOS_9_0/Source/tasks.c **** 
3968:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
3969:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 5593              		.loc 1 3969 0
 5594              		.cfi_startproc
 5595              		@ args = 0, pretend = 0, frame = 24
 5596              		@ frame_needed = 1, uses_anonymous_args = 0
 5597 0000 B0B5     		push	{r4, r5, r7, lr}
 5598              	.LCFI235:
 5599              		.cfi_def_cfa_offset 16
 5600              		.cfi_offset 4, -16
 5601              		.cfi_offset 5, -12
 5602              		.cfi_offset 7, -8
 5603              		.cfi_offset 14, -4
 5604 0002 88B0     		sub	sp, sp, #32
 5605              	.LCFI236:
 5606              		.cfi_def_cfa_offset 48
 5607 0004 02AF     		add	r7, sp, #8
 5608              	.LCFI237:
 5609              		.cfi_def_cfa 7, 40
 5610 0006 7860     		str	r0, [r7, #4]
3970:../../../FreeRTOS_9_0/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
3971:../../../FreeRTOS_9_0/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
3972:../../../FreeRTOS_9_0/Source/tasks.c **** 	char cStatus;
3973:../../../FreeRTOS_9_0/Source/tasks.c **** 
3974:../../../FreeRTOS_9_0/Source/tasks.c **** 		/*
3975:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * PLEASE NOTE:
3976:../../../FreeRTOS_9_0/Source/tasks.c **** 		 *
3977:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
3978:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
3979:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * scheduler.
3980:../../../FreeRTOS_9_0/Source/tasks.c **** 		 *
3981:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
3982:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
3983:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * displays task names, states and stack usage.
3984:../../../FreeRTOS_9_0/Source/tasks.c **** 		 *
3985:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
3986:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
3987:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
3988:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
3989:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
3990:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
3991:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * snprintf() implementation!).
3992:../../../FreeRTOS_9_0/Source/tasks.c **** 		 *
3993:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
3994:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
ARM GAS  /tmp/ccIgarPJ.s 			page 173


3995:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * through a call to vTaskList().
3996:../../../FreeRTOS_9_0/Source/tasks.c **** 		 */
3997:../../../FreeRTOS_9_0/Source/tasks.c **** 
3998:../../../FreeRTOS_9_0/Source/tasks.c **** 
3999:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4000:../../../FreeRTOS_9_0/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
 5611              		.loc 1 4000 0
 5612 0008 7B68     		ldr	r3, [r7, #4]
 5613 000a 0022     		movs	r2, #0
 5614 000c 1A70     		strb	r2, [r3]
4001:../../../FreeRTOS_9_0/Source/tasks.c **** 
4002:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4003:../../../FreeRTOS_9_0/Source/tasks.c **** 		function is executing. */
4004:../../../FreeRTOS_9_0/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
 5615              		.loc 1 4004 0
 5616 000e 444B     		ldr	r3, .L365
 5617 0010 1B68     		ldr	r3, [r3]
 5618 0012 FB60     		str	r3, [r7, #12]
4005:../../../FreeRTOS_9_0/Source/tasks.c **** 
4006:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4007:../../../FreeRTOS_9_0/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4008:../../../FreeRTOS_9_0/Source/tasks.c **** 		equate to NULL. */
4009:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 5619              		.loc 1 4009 0
 5620 0014 424B     		ldr	r3, .L365
 5621 0016 1A68     		ldr	r2, [r3]
 5622 0018 1346     		mov	r3, r2
 5623 001a DB00     		lsls	r3, r3, #3
 5624 001c 1344     		add	r3, r3, r2
 5625 001e 9B00     		lsls	r3, r3, #2
 5626 0020 1846     		mov	r0, r3
 5627 0022 FFF7FEFF 		bl	pvPortMalloc
 5628 0026 3861     		str	r0, [r7, #16]
4010:../../../FreeRTOS_9_0/Source/tasks.c **** 
4011:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
 5629              		.loc 1 4011 0
 5630 0028 3B69     		ldr	r3, [r7, #16]
 5631 002a 002B     		cmp	r3, #0
 5632 002c 75D0     		beq	.L354
4012:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4013:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Generate the (binary) data. */
4014:../../../FreeRTOS_9_0/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 5633              		.loc 1 4014 0
 5634 002e FB68     		ldr	r3, [r7, #12]
 5635 0030 3869     		ldr	r0, [r7, #16]
 5636 0032 1946     		mov	r1, r3
 5637 0034 0022     		movs	r2, #0
 5638 0036 FFF7FEFF 		bl	uxTaskGetSystemState
 5639 003a 0346     		mov	r3, r0
 5640 003c FB60     		str	r3, [r7, #12]
4015:../../../FreeRTOS_9_0/Source/tasks.c **** 
4016:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
4017:../../../FreeRTOS_9_0/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
 5641              		.loc 1 4017 0
 5642 003e 0023     		movs	r3, #0
 5643 0040 BB60     		str	r3, [r7, #8]
 5644 0042 63E0     		b	.L356
ARM GAS  /tmp/ccIgarPJ.s 			page 174


 5645              	.L364:
4018:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4019:../../../FreeRTOS_9_0/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
 5646              		.loc 1 4019 0
 5647 0044 BA68     		ldr	r2, [r7, #8]
 5648 0046 1346     		mov	r3, r2
 5649 0048 DB00     		lsls	r3, r3, #3
 5650 004a 1344     		add	r3, r3, r2
 5651 004c 9B00     		lsls	r3, r3, #2
 5652 004e 1A46     		mov	r2, r3
 5653 0050 3B69     		ldr	r3, [r7, #16]
 5654 0052 1344     		add	r3, r3, r2
 5655 0054 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 5656 0056 013B     		subs	r3, r3, #1
 5657 0058 032B     		cmp	r3, #3
 5658 005a 17D8     		bhi	.L357
 5659 005c 01A2     		adr	r2, .L359
 5660 005e 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 5661 0062 00BF     		.p2align 2
 5662              	.L359:
 5663 0064 75000000 		.word	.L358+1
 5664 0068 7B000000 		.word	.L360+1
 5665 006c 81000000 		.word	.L361+1
 5666 0070 87000000 		.word	.L362+1
 5667              		.p2align 1
 5668              	.L358:
4020:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4021:../../../FreeRTOS_9_0/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
 5669              		.loc 1 4021 0
 5670 0074 5223     		movs	r3, #82
 5671 0076 FB75     		strb	r3, [r7, #23]
4022:../../../FreeRTOS_9_0/Source/tasks.c **** 										break;
 5672              		.loc 1 4022 0
 5673 0078 0BE0     		b	.L363
 5674              	.L360:
4023:../../../FreeRTOS_9_0/Source/tasks.c **** 
4024:../../../FreeRTOS_9_0/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 5675              		.loc 1 4024 0
 5676 007a 4223     		movs	r3, #66
 5677 007c FB75     		strb	r3, [r7, #23]
4025:../../../FreeRTOS_9_0/Source/tasks.c **** 										break;
 5678              		.loc 1 4025 0
 5679 007e 08E0     		b	.L363
 5680              	.L361:
4026:../../../FreeRTOS_9_0/Source/tasks.c **** 
4027:../../../FreeRTOS_9_0/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 5681              		.loc 1 4027 0
 5682 0080 5323     		movs	r3, #83
 5683 0082 FB75     		strb	r3, [r7, #23]
4028:../../../FreeRTOS_9_0/Source/tasks.c **** 										break;
 5684              		.loc 1 4028 0
 5685 0084 05E0     		b	.L363
 5686              	.L362:
4029:../../../FreeRTOS_9_0/Source/tasks.c **** 
4030:../../../FreeRTOS_9_0/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
 5687              		.loc 1 4030 0
 5688 0086 4423     		movs	r3, #68
ARM GAS  /tmp/ccIgarPJ.s 			page 175


 5689 0088 FB75     		strb	r3, [r7, #23]
4031:../../../FreeRTOS_9_0/Source/tasks.c **** 										break;
 5690              		.loc 1 4031 0
 5691 008a 02E0     		b	.L363
 5692              	.L357:
4032:../../../FreeRTOS_9_0/Source/tasks.c **** 
4033:../../../FreeRTOS_9_0/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4034:../../../FreeRTOS_9_0/Source/tasks.c **** 										to prevent static checking errors. */
4035:../../../FreeRTOS_9_0/Source/tasks.c **** 										cStatus = 0x00;
 5693              		.loc 1 4035 0
 5694 008c 0023     		movs	r3, #0
 5695 008e FB75     		strb	r3, [r7, #23]
4036:../../../FreeRTOS_9_0/Source/tasks.c **** 										break;
 5696              		.loc 1 4036 0
 5697 0090 00BF     		nop
 5698              	.L363:
4037:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4038:../../../FreeRTOS_9_0/Source/tasks.c **** 
4039:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4040:../../../FreeRTOS_9_0/Source/tasks.c **** 				can be printed in tabular form more easily. */
4041:../../../FreeRTOS_9_0/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 5699              		.loc 1 4041 0 discriminator 2
 5700 0092 BA68     		ldr	r2, [r7, #8]
 5701 0094 1346     		mov	r3, r2
 5702 0096 DB00     		lsls	r3, r3, #3
 5703 0098 1344     		add	r3, r3, r2
 5704 009a 9B00     		lsls	r3, r3, #2
 5705 009c 1A46     		mov	r2, r3
 5706 009e 3B69     		ldr	r3, [r7, #16]
 5707 00a0 1344     		add	r3, r3, r2
 5708 00a2 5B68     		ldr	r3, [r3, #4]
 5709 00a4 7868     		ldr	r0, [r7, #4]
 5710 00a6 1946     		mov	r1, r3
 5711 00a8 FFF7FEFF 		bl	prvWriteNameToBuffer
 5712 00ac 7860     		str	r0, [r7, #4]
4042:../../../FreeRTOS_9_0/Source/tasks.c **** 
4043:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Write the rest of the string. */
4044:../../../FreeRTOS_9_0/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
 5713              		.loc 1 4044 0 discriminator 2
 5714 00ae FD7D     		ldrb	r5, [r7, #23]	@ zero_extendqisi2
 5715 00b0 BA68     		ldr	r2, [r7, #8]
 5716 00b2 1346     		mov	r3, r2
 5717 00b4 DB00     		lsls	r3, r3, #3
 5718 00b6 1344     		add	r3, r3, r2
 5719 00b8 9B00     		lsls	r3, r3, #2
 5720 00ba 1A46     		mov	r2, r3
 5721 00bc 3B69     		ldr	r3, [r7, #16]
 5722 00be 1344     		add	r3, r3, r2
 5723 00c0 1C69     		ldr	r4, [r3, #16]
 5724 00c2 BA68     		ldr	r2, [r7, #8]
 5725 00c4 1346     		mov	r3, r2
 5726 00c6 DB00     		lsls	r3, r3, #3
 5727 00c8 1344     		add	r3, r3, r2
 5728 00ca 9B00     		lsls	r3, r3, #2
 5729 00cc 1A46     		mov	r2, r3
 5730 00ce 3B69     		ldr	r3, [r7, #16]
 5731 00d0 1344     		add	r3, r3, r2
ARM GAS  /tmp/ccIgarPJ.s 			page 176


 5732 00d2 1B8C     		ldrh	r3, [r3, #32]
 5733 00d4 1946     		mov	r1, r3
 5734 00d6 BA68     		ldr	r2, [r7, #8]
 5735 00d8 1346     		mov	r3, r2
 5736 00da DB00     		lsls	r3, r3, #3
 5737 00dc 1344     		add	r3, r3, r2
 5738 00de 9B00     		lsls	r3, r3, #2
 5739 00e0 1A46     		mov	r2, r3
 5740 00e2 3B69     		ldr	r3, [r7, #16]
 5741 00e4 1344     		add	r3, r3, r2
 5742 00e6 9B68     		ldr	r3, [r3, #8]
 5743 00e8 0091     		str	r1, [sp]
 5744 00ea 0193     		str	r3, [sp, #4]
 5745 00ec 7868     		ldr	r0, [r7, #4]
 5746 00ee 0D49     		ldr	r1, .L365+4
 5747 00f0 2A46     		mov	r2, r5
 5748 00f2 2346     		mov	r3, r4
 5749 00f4 FFF7FEFF 		bl	sprintf
4045:../../../FreeRTOS_9_0/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
 5750              		.loc 1 4045 0 discriminator 2
 5751 00f8 7868     		ldr	r0, [r7, #4]
 5752 00fa FFF7FEFF 		bl	strlen
 5753 00fe 0246     		mov	r2, r0
 5754 0100 7B68     		ldr	r3, [r7, #4]
 5755 0102 1344     		add	r3, r3, r2
 5756 0104 7B60     		str	r3, [r7, #4]
4017:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
 5757              		.loc 1 4017 0 discriminator 2
 5758 0106 BB68     		ldr	r3, [r7, #8]
 5759 0108 0133     		adds	r3, r3, #1
 5760 010a BB60     		str	r3, [r7, #8]
 5761              	.L356:
4017:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
 5762              		.loc 1 4017 0 is_stmt 0 discriminator 1
 5763 010c BA68     		ldr	r2, [r7, #8]
 5764 010e FB68     		ldr	r3, [r7, #12]
 5765 0110 9A42     		cmp	r2, r3
 5766 0112 97D3     		bcc	.L364
4046:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4047:../../../FreeRTOS_9_0/Source/tasks.c **** 
4048:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4049:../../../FreeRTOS_9_0/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4050:../../../FreeRTOS_9_0/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
 5767              		.loc 1 4050 0 is_stmt 1
 5768 0114 3869     		ldr	r0, [r7, #16]
 5769 0116 FFF7FEFF 		bl	vPortFree
 5770              	.L354:
4051:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4052:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
4053:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4054:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4055:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4056:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 5771              		.loc 1 4056 0
 5772 011a 1837     		adds	r7, r7, #24
 5773              	.LCFI238:
 5774              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccIgarPJ.s 			page 177


 5775 011c BD46     		mov	sp, r7
 5776              	.LCFI239:
 5777              		.cfi_def_cfa_register 13
 5778              		@ sp needed
 5779 011e B0BD     		pop	{r4, r5, r7, pc}
 5780              	.L366:
 5781              		.align	2
 5782              	.L365:
 5783 0120 00000000 		.word	uxCurrentNumberOfTasks
 5784 0124 08000000 		.word	.LC1
 5785              		.cfi_endproc
 5786              	.LFE51:
 5788              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 5789              		.align	2
 5790              		.global	uxTaskResetEventItemValue
 5791              		.thumb
 5792              		.thumb_func
 5794              	uxTaskResetEventItemValue:
 5795              	.LFB52:
4057:../../../FreeRTOS_9_0/Source/tasks.c **** 
4058:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
4059:../../../FreeRTOS_9_0/Source/tasks.c **** /*----------------------------------------------------------*/
4060:../../../FreeRTOS_9_0/Source/tasks.c **** 
4061:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4062:../../../FreeRTOS_9_0/Source/tasks.c **** 
4063:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4064:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
4065:../../../FreeRTOS_9_0/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4066:../../../FreeRTOS_9_0/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4067:../../../FreeRTOS_9_0/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4068:../../../FreeRTOS_9_0/Source/tasks.c **** 
4069:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4070:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4071:../../../FreeRTOS_9_0/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4072:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4073:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif
4074:../../../FreeRTOS_9_0/Source/tasks.c **** 
4075:../../../FreeRTOS_9_0/Source/tasks.c **** 		/*
4076:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * PLEASE NOTE:
4077:../../../FreeRTOS_9_0/Source/tasks.c **** 		 *
4078:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4079:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4080:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * scheduler.
4081:../../../FreeRTOS_9_0/Source/tasks.c **** 		 *
4082:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4083:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4084:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4085:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * in both absolute and percentage terms.
4086:../../../FreeRTOS_9_0/Source/tasks.c **** 		 *
4087:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4088:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4089:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4090:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4091:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4092:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4093:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * a full snprintf() implementation!).
4094:../../../FreeRTOS_9_0/Source/tasks.c **** 		 *
ARM GAS  /tmp/ccIgarPJ.s 			page 178


4095:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4096:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4097:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4098:../../../FreeRTOS_9_0/Source/tasks.c **** 		 */
4099:../../../FreeRTOS_9_0/Source/tasks.c **** 
4100:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4101:../../../FreeRTOS_9_0/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
4102:../../../FreeRTOS_9_0/Source/tasks.c **** 
4103:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4104:../../../FreeRTOS_9_0/Source/tasks.c **** 		function is executing. */
4105:../../../FreeRTOS_9_0/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4106:../../../FreeRTOS_9_0/Source/tasks.c **** 
4107:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4108:../../../FreeRTOS_9_0/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4109:../../../FreeRTOS_9_0/Source/tasks.c **** 		equate to NULL. */
4110:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4111:../../../FreeRTOS_9_0/Source/tasks.c **** 
4112:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4113:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4114:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Generate the (binary) data. */
4115:../../../FreeRTOS_9_0/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4116:../../../FreeRTOS_9_0/Source/tasks.c **** 
4117:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* For percentage calculations. */
4118:../../../FreeRTOS_9_0/Source/tasks.c **** 			ulTotalTime /= 100UL;
4119:../../../FreeRTOS_9_0/Source/tasks.c **** 
4120:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4121:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( ulTotalTime > 0 )
4122:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4123:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4124:../../../FreeRTOS_9_0/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4125:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4126:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4127:../../../FreeRTOS_9_0/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4128:../../../FreeRTOS_9_0/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4129:../../../FreeRTOS_9_0/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4130:../../../FreeRTOS_9_0/Source/tasks.c **** 
4131:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Write the task name to the string, padding with
4132:../../../FreeRTOS_9_0/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4133:../../../FreeRTOS_9_0/Source/tasks.c **** 					easily. */
4134:../../../FreeRTOS_9_0/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4135:../../../FreeRTOS_9_0/Source/tasks.c **** 
4136:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4137:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
4138:../../../FreeRTOS_9_0/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4139:../../../FreeRTOS_9_0/Source/tasks.c **** 						{
4140:../../../FreeRTOS_9_0/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4141:../../../FreeRTOS_9_0/Source/tasks.c **** 						}
4142:../../../FreeRTOS_9_0/Source/tasks.c **** 						#else
4143:../../../FreeRTOS_9_0/Source/tasks.c **** 						{
4144:../../../FreeRTOS_9_0/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4145:../../../FreeRTOS_9_0/Source/tasks.c **** 							printf() library can be used. */
4146:../../../FreeRTOS_9_0/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4147:../../../FreeRTOS_9_0/Source/tasks.c **** 						}
4148:../../../FreeRTOS_9_0/Source/tasks.c **** 						#endif
4149:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
4150:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
4151:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
ARM GAS  /tmp/ccIgarPJ.s 			page 179


4152:../../../FreeRTOS_9_0/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4153:../../../FreeRTOS_9_0/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4154:../../../FreeRTOS_9_0/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4155:../../../FreeRTOS_9_0/Source/tasks.c **** 						{
4156:../../../FreeRTOS_9_0/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4157:../../../FreeRTOS_9_0/Source/tasks.c **** 						}
4158:../../../FreeRTOS_9_0/Source/tasks.c **** 						#else
4159:../../../FreeRTOS_9_0/Source/tasks.c **** 						{
4160:../../../FreeRTOS_9_0/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4161:../../../FreeRTOS_9_0/Source/tasks.c **** 							printf() library can be used. */
4162:../../../FreeRTOS_9_0/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4163:../../../FreeRTOS_9_0/Source/tasks.c **** 						}
4164:../../../FreeRTOS_9_0/Source/tasks.c **** 						#endif
4165:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
4166:../../../FreeRTOS_9_0/Source/tasks.c **** 
4167:../../../FreeRTOS_9_0/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
4168:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4169:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4170:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
4171:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4172:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4173:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4174:../../../FreeRTOS_9_0/Source/tasks.c **** 
4175:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4176:../../../FreeRTOS_9_0/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4177:../../../FreeRTOS_9_0/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4178:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4179:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
4180:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4181:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4182:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4183:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
4184:../../../FreeRTOS_9_0/Source/tasks.c **** 
4185:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4186:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
4187:../../../FreeRTOS_9_0/Source/tasks.c **** 
4188:../../../FreeRTOS_9_0/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4189:../../../FreeRTOS_9_0/Source/tasks.c **** {
 5796              		.loc 1 4189 0
 5797              		.cfi_startproc
 5798              		@ args = 0, pretend = 0, frame = 8
 5799              		@ frame_needed = 1, uses_anonymous_args = 0
 5800              		@ link register save eliminated.
 5801 0000 80B4     		push	{r7}
 5802              	.LCFI240:
 5803              		.cfi_def_cfa_offset 4
 5804              		.cfi_offset 7, -4
 5805 0002 83B0     		sub	sp, sp, #12
 5806              	.LCFI241:
 5807              		.cfi_def_cfa_offset 16
 5808 0004 00AF     		add	r7, sp, #0
 5809              	.LCFI242:
 5810              		.cfi_def_cfa_register 7
4190:../../../FreeRTOS_9_0/Source/tasks.c **** TickType_t uxReturn;
4191:../../../FreeRTOS_9_0/Source/tasks.c **** 
4192:../../../FreeRTOS_9_0/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 5811              		.loc 1 4192 0
ARM GAS  /tmp/ccIgarPJ.s 			page 180


 5812 0006 094B     		ldr	r3, .L369
 5813 0008 1B68     		ldr	r3, [r3]
 5814 000a 9B69     		ldr	r3, [r3, #24]
 5815 000c 7B60     		str	r3, [r7, #4]
4193:../../../FreeRTOS_9_0/Source/tasks.c **** 
4194:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4195:../../../FreeRTOS_9_0/Source/tasks.c **** 	queues and semaphores. */
4196:../../../FreeRTOS_9_0/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
 5816              		.loc 1 4196 0
 5817 000e 074B     		ldr	r3, .L369
 5818 0010 1B68     		ldr	r3, [r3]
 5819 0012 064A     		ldr	r2, .L369
 5820 0014 1268     		ldr	r2, [r2]
 5821 0016 D26A     		ldr	r2, [r2, #44]
 5822 0018 C2F10702 		rsb	r2, r2, #7
 5823 001c 9A61     		str	r2, [r3, #24]
4197:../../../FreeRTOS_9_0/Source/tasks.c **** 
4198:../../../FreeRTOS_9_0/Source/tasks.c **** 	return uxReturn;
 5824              		.loc 1 4198 0
 5825 001e 7B68     		ldr	r3, [r7, #4]
4199:../../../FreeRTOS_9_0/Source/tasks.c **** }
 5826              		.loc 1 4199 0
 5827 0020 1846     		mov	r0, r3
 5828 0022 0C37     		adds	r7, r7, #12
 5829              	.LCFI243:
 5830              		.cfi_def_cfa_offset 4
 5831 0024 BD46     		mov	sp, r7
 5832              	.LCFI244:
 5833              		.cfi_def_cfa_register 13
 5834              		@ sp needed
 5835 0026 5DF8047B 		ldr	r7, [sp], #4
 5836              	.LCFI245:
 5837              		.cfi_restore 7
 5838              		.cfi_def_cfa_offset 0
 5839 002a 7047     		bx	lr
 5840              	.L370:
 5841              		.align	2
 5842              	.L369:
 5843 002c 00000000 		.word	pxCurrentTCB
 5844              		.cfi_endproc
 5845              	.LFE52:
 5847              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 5848              		.align	2
 5849              		.global	pvTaskIncrementMutexHeldCount
 5850              		.thumb
 5851              		.thumb_func
 5853              	pvTaskIncrementMutexHeldCount:
 5854              	.LFB53:
4200:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
4201:../../../FreeRTOS_9_0/Source/tasks.c **** 
4202:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4203:../../../FreeRTOS_9_0/Source/tasks.c **** 
4204:../../../FreeRTOS_9_0/Source/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
4205:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 5855              		.loc 1 4205 0
 5856              		.cfi_startproc
 5857              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccIgarPJ.s 			page 181


 5858              		@ frame_needed = 1, uses_anonymous_args = 0
 5859              		@ link register save eliminated.
 5860 0000 80B4     		push	{r7}
 5861              	.LCFI246:
 5862              		.cfi_def_cfa_offset 4
 5863              		.cfi_offset 7, -4
 5864 0002 00AF     		add	r7, sp, #0
 5865              	.LCFI247:
 5866              		.cfi_def_cfa_register 7
4206:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4207:../../../FreeRTOS_9_0/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4208:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
 5867              		.loc 1 4208 0
 5868 0004 074B     		ldr	r3, .L374
 5869 0006 1B68     		ldr	r3, [r3]
 5870 0008 002B     		cmp	r3, #0
 5871 000a 04D0     		beq	.L372
4209:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4210:../../../FreeRTOS_9_0/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
 5872              		.loc 1 4210 0
 5873 000c 054B     		ldr	r3, .L374
 5874 000e 1B68     		ldr	r3, [r3]
 5875 0010 1A6D     		ldr	r2, [r3, #80]
 5876 0012 0132     		adds	r2, r2, #1
 5877 0014 1A65     		str	r2, [r3, #80]
 5878              	.L372:
4211:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4212:../../../FreeRTOS_9_0/Source/tasks.c **** 
4213:../../../FreeRTOS_9_0/Source/tasks.c **** 		return pxCurrentTCB;
 5879              		.loc 1 4213 0
 5880 0016 034B     		ldr	r3, .L374
 5881 0018 1B68     		ldr	r3, [r3]
4214:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 5882              		.loc 1 4214 0
 5883 001a 1846     		mov	r0, r3
 5884 001c BD46     		mov	sp, r7
 5885              	.LCFI248:
 5886              		.cfi_def_cfa_register 13
 5887              		@ sp needed
 5888 001e 5DF8047B 		ldr	r7, [sp], #4
 5889              	.LCFI249:
 5890              		.cfi_restore 7
 5891              		.cfi_def_cfa_offset 0
 5892 0022 7047     		bx	lr
 5893              	.L375:
 5894              		.align	2
 5895              	.L374:
 5896 0024 00000000 		.word	pxCurrentTCB
 5897              		.cfi_endproc
 5898              	.LFE53:
 5900              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 5901              		.align	2
 5902              		.global	ulTaskNotifyTake
 5903              		.thumb
 5904              		.thumb_func
 5906              	ulTaskNotifyTake:
 5907              	.LFB54:
ARM GAS  /tmp/ccIgarPJ.s 			page 182


4215:../../../FreeRTOS_9_0/Source/tasks.c **** 
4216:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4217:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
4218:../../../FreeRTOS_9_0/Source/tasks.c **** 
4219:../../../FreeRTOS_9_0/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4220:../../../FreeRTOS_9_0/Source/tasks.c **** 
4221:../../../FreeRTOS_9_0/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4222:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 5908              		.loc 1 4222 0
 5909              		.cfi_startproc
 5910              		@ args = 0, pretend = 0, frame = 16
 5911              		@ frame_needed = 1, uses_anonymous_args = 0
 5912 0000 80B5     		push	{r7, lr}
 5913              	.LCFI250:
 5914              		.cfi_def_cfa_offset 8
 5915              		.cfi_offset 7, -8
 5916              		.cfi_offset 14, -4
 5917 0002 84B0     		sub	sp, sp, #16
 5918              	.LCFI251:
 5919              		.cfi_def_cfa_offset 24
 5920 0004 00AF     		add	r7, sp, #0
 5921              	.LCFI252:
 5922              		.cfi_def_cfa_register 7
 5923 0006 7860     		str	r0, [r7, #4]
 5924 0008 3960     		str	r1, [r7]
4223:../../../FreeRTOS_9_0/Source/tasks.c **** 	uint32_t ulReturn;
4224:../../../FreeRTOS_9_0/Source/tasks.c **** 
4225:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskENTER_CRITICAL();
 5925              		.loc 1 4225 0
 5926 000a FFF7FEFF 		bl	vPortEnterCritical
4226:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4227:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4228:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 5927              		.loc 1 4228 0
 5928 000e 214B     		ldr	r3, .L382
 5929 0010 1B68     		ldr	r3, [r3]
 5930 0012 5B6D     		ldr	r3, [r3, #84]
 5931 0014 002B     		cmp	r3, #0
 5932 0016 13D1     		bne	.L377
4229:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4230:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4231:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 5933              		.loc 1 4231 0
 5934 0018 1E4B     		ldr	r3, .L382
 5935 001a 1B68     		ldr	r3, [r3]
 5936 001c 0122     		movs	r2, #1
 5937 001e 83F85820 		strb	r2, [r3, #88]
4232:../../../FreeRTOS_9_0/Source/tasks.c **** 
4233:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 5938              		.loc 1 4233 0
 5939 0022 3B68     		ldr	r3, [r7]
 5940 0024 002B     		cmp	r3, #0
 5941 0026 0BD0     		beq	.L377
4234:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4235:../../../FreeRTOS_9_0/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 5942              		.loc 1 4235 0
 5943 0028 3868     		ldr	r0, [r7]
ARM GAS  /tmp/ccIgarPJ.s 			page 183


 5944 002a 0121     		movs	r1, #1
 5945 002c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4236:../../../FreeRTOS_9_0/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4237:../../../FreeRTOS_9_0/Source/tasks.c **** 
4238:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4239:../../../FreeRTOS_9_0/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4240:../../../FreeRTOS_9_0/Source/tasks.c **** 					critical section exits) - but it is not something that
4241:../../../FreeRTOS_9_0/Source/tasks.c **** 					application code should ever do. */
4242:../../../FreeRTOS_9_0/Source/tasks.c **** 					portYIELD_WITHIN_API();
 5946              		.loc 1 4242 0
 5947 0030 194B     		ldr	r3, .L382+4
 5948 0032 4FF08052 		mov	r2, #268435456
 5949 0036 1A60     		str	r2, [r3]
 5950              	@ 4242 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 5951 0038 BFF34F8F 		dsb
 5952              	@ 0 "" 2
 5953              	@ 4242 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 5954 003c BFF36F8F 		isb
 5955              	@ 0 "" 2
 5956              		.thumb
 5957              	.L377:
4243:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4244:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
4245:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4246:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4247:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4248:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4249:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
4250:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4251:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4252:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4253:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4254:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskEXIT_CRITICAL();
 5958              		.loc 1 4254 0
 5959 0040 FFF7FEFF 		bl	vPortExitCritical
4255:../../../FreeRTOS_9_0/Source/tasks.c **** 
4256:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskENTER_CRITICAL();
 5960              		.loc 1 4256 0
 5961 0044 FFF7FEFF 		bl	vPortEnterCritical
4257:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4258:../../../FreeRTOS_9_0/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
 5962              		.loc 1 4258 0
 5963 0048 7B68     		ldr	r3, [r7, #4]
 5964 004a 4220     		movs	r0, #66
 5965 004c 1946     		mov	r1, r3
 5966 004e 3A68     		ldr	r2, [r7]
 5967 0050 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x2
4259:../../../FreeRTOS_9_0/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 5968              		.loc 1 4259 0
 5969 0054 0F4B     		ldr	r3, .L382
 5970 0056 1B68     		ldr	r3, [r3]
 5971 0058 5B6D     		ldr	r3, [r3, #84]
 5972 005a FB60     		str	r3, [r7, #12]
4260:../../../FreeRTOS_9_0/Source/tasks.c **** 
4261:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( ulReturn != 0UL )
 5973              		.loc 1 4261 0
 5974 005c FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccIgarPJ.s 			page 184


 5975 005e 002B     		cmp	r3, #0
 5976 0060 0CD0     		beq	.L378
4262:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4263:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
 5977              		.loc 1 4263 0
 5978 0062 7B68     		ldr	r3, [r7, #4]
 5979 0064 002B     		cmp	r3, #0
 5980 0066 04D0     		beq	.L379
4264:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4265:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
 5981              		.loc 1 4265 0
 5982 0068 0A4B     		ldr	r3, .L382
 5983 006a 1B68     		ldr	r3, [r3]
 5984 006c 0022     		movs	r2, #0
 5985 006e 5A65     		str	r2, [r3, #84]
 5986 0070 04E0     		b	.L378
 5987              	.L379:
4266:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4267:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
4268:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4269:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
 5988              		.loc 1 4269 0
 5989 0072 084B     		ldr	r3, .L382
 5990 0074 1B68     		ldr	r3, [r3]
 5991 0076 FA68     		ldr	r2, [r7, #12]
 5992 0078 013A     		subs	r2, r2, #1
 5993 007a 5A65     		str	r2, [r3, #84]
 5994              	.L378:
4270:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4271:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4272:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
4273:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4274:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4275:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4276:../../../FreeRTOS_9_0/Source/tasks.c **** 
4277:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 5995              		.loc 1 4277 0
 5996 007c 054B     		ldr	r3, .L382
 5997 007e 1B68     		ldr	r3, [r3]
 5998 0080 0022     		movs	r2, #0
 5999 0082 83F85820 		strb	r2, [r3, #88]
4278:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4279:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskEXIT_CRITICAL();
 6000              		.loc 1 4279 0
 6001 0086 FFF7FEFF 		bl	vPortExitCritical
4280:../../../FreeRTOS_9_0/Source/tasks.c **** 
4281:../../../FreeRTOS_9_0/Source/tasks.c **** 		return ulReturn;
 6002              		.loc 1 4281 0
 6003 008a FB68     		ldr	r3, [r7, #12]
4282:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 6004              		.loc 1 4282 0
 6005 008c 1846     		mov	r0, r3
 6006 008e 1037     		adds	r7, r7, #16
 6007              	.LCFI253:
 6008              		.cfi_def_cfa_offset 8
 6009 0090 BD46     		mov	sp, r7
 6010              	.LCFI254:
ARM GAS  /tmp/ccIgarPJ.s 			page 185


 6011              		.cfi_def_cfa_register 13
 6012              		@ sp needed
 6013 0092 80BD     		pop	{r7, pc}
 6014              	.L383:
 6015              		.align	2
 6016              	.L382:
 6017 0094 00000000 		.word	pxCurrentTCB
 6018 0098 04ED00E0 		.word	-536810236
 6019              		.cfi_endproc
 6020              	.LFE54:
 6022              		.section	.text.xTaskNotifyWait,"ax",%progbits
 6023              		.align	2
 6024              		.global	xTaskNotifyWait
 6025              		.thumb
 6026              		.thumb_func
 6028              	xTaskNotifyWait:
 6029              	.LFB55:
4283:../../../FreeRTOS_9_0/Source/tasks.c **** 
4284:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4285:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
4286:../../../FreeRTOS_9_0/Source/tasks.c **** 
4287:../../../FreeRTOS_9_0/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4288:../../../FreeRTOS_9_0/Source/tasks.c **** 
4289:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4290:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 6030              		.loc 1 4290 0
 6031              		.cfi_startproc
 6032              		@ args = 0, pretend = 0, frame = 24
 6033              		@ frame_needed = 1, uses_anonymous_args = 0
 6034 0000 90B5     		push	{r4, r7, lr}
 6035              	.LCFI255:
 6036              		.cfi_def_cfa_offset 12
 6037              		.cfi_offset 4, -12
 6038              		.cfi_offset 7, -8
 6039              		.cfi_offset 14, -4
 6040 0002 89B0     		sub	sp, sp, #36
 6041              	.LCFI256:
 6042              		.cfi_def_cfa_offset 48
 6043 0004 02AF     		add	r7, sp, #8
 6044              	.LCFI257:
 6045              		.cfi_def_cfa 7, 40
 6046 0006 F860     		str	r0, [r7, #12]
 6047 0008 B960     		str	r1, [r7, #8]
 6048 000a 7A60     		str	r2, [r7, #4]
 6049 000c 3B60     		str	r3, [r7]
4291:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xReturn;
4292:../../../FreeRTOS_9_0/Source/tasks.c **** 
4293:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskENTER_CRITICAL();
 6050              		.loc 1 4293 0
 6051 000e FFF7FEFF 		bl	vPortEnterCritical
4294:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4295:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4296:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 6052              		.loc 1 4296 0
 6053 0012 2B4B     		ldr	r3, .L390
 6054 0014 1B68     		ldr	r3, [r3]
 6055 0016 93F85830 		ldrb	r3, [r3, #88]
ARM GAS  /tmp/ccIgarPJ.s 			page 186


 6056 001a DBB2     		uxtb	r3, r3
 6057 001c 022B     		cmp	r3, #2
 6058 001e 1AD0     		beq	.L385
4297:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4298:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4299:../../../FreeRTOS_9_0/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4300:../../../FreeRTOS_9_0/Source/tasks.c **** 				clear the value to zero. */
4301:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 6059              		.loc 1 4301 0
 6060 0020 274B     		ldr	r3, .L390
 6061 0022 1B68     		ldr	r3, [r3]
 6062 0024 596D     		ldr	r1, [r3, #84]
 6063 0026 FA68     		ldr	r2, [r7, #12]
 6064 0028 D243     		mvns	r2, r2
 6065 002a 0A40     		ands	r2, r2, r1
 6066 002c 5A65     		str	r2, [r3, #84]
4302:../../../FreeRTOS_9_0/Source/tasks.c **** 
4303:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4304:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 6067              		.loc 1 4304 0
 6068 002e 244B     		ldr	r3, .L390
 6069 0030 1B68     		ldr	r3, [r3]
 6070 0032 0122     		movs	r2, #1
 6071 0034 83F85820 		strb	r2, [r3, #88]
4305:../../../FreeRTOS_9_0/Source/tasks.c **** 
4306:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 6072              		.loc 1 4306 0
 6073 0038 3B68     		ldr	r3, [r7]
 6074 003a 002B     		cmp	r3, #0
 6075 003c 0BD0     		beq	.L385
4307:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4308:../../../FreeRTOS_9_0/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 6076              		.loc 1 4308 0
 6077 003e 3868     		ldr	r0, [r7]
 6078 0040 0121     		movs	r1, #1
 6079 0042 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4309:../../../FreeRTOS_9_0/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4310:../../../FreeRTOS_9_0/Source/tasks.c **** 
4311:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4312:../../../FreeRTOS_9_0/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4313:../../../FreeRTOS_9_0/Source/tasks.c **** 					critical section exits) - but it is not something that
4314:../../../FreeRTOS_9_0/Source/tasks.c **** 					application code should ever do. */
4315:../../../FreeRTOS_9_0/Source/tasks.c **** 					portYIELD_WITHIN_API();
 6080              		.loc 1 4315 0
 6081 0046 1F4B     		ldr	r3, .L390+4
 6082 0048 4FF08052 		mov	r2, #268435456
 6083 004c 1A60     		str	r2, [r3]
 6084              	@ 4315 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 6085 004e BFF34F8F 		dsb
 6086              	@ 0 "" 2
 6087              	@ 4315 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 6088 0052 BFF36F8F 		isb
 6089              	@ 0 "" 2
 6090              		.thumb
 6091              	.L385:
4316:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4317:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
ARM GAS  /tmp/ccIgarPJ.s 			page 187


4318:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4319:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4320:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4321:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4322:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
4323:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4324:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4325:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4326:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4327:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskEXIT_CRITICAL();
 6092              		.loc 1 4327 0
 6093 0056 FFF7FEFF 		bl	vPortExitCritical
4328:../../../FreeRTOS_9_0/Source/tasks.c **** 
4329:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskENTER_CRITICAL();
 6094              		.loc 1 4329 0
 6095 005a FFF7FEFF 		bl	vPortEnterCritical
4330:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4331:../../../FreeRTOS_9_0/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
 6096              		.loc 1 4331 0
 6097 005e 7C68     		ldr	r4, [r7, #4]
 6098 0060 3B68     		ldr	r3, [r7]
 6099 0062 0093     		str	r3, [sp]
 6100 0064 4020     		movs	r0, #64
 6101 0066 F968     		ldr	r1, [r7, #12]
 6102 0068 BA68     		ldr	r2, [r7, #8]
 6103 006a 2346     		mov	r3, r4
 6104 006c FFF7FEFF 		bl	SYSVIEW_RecordU32x4
4332:../../../FreeRTOS_9_0/Source/tasks.c **** 
4333:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pulNotificationValue != NULL )
 6105              		.loc 1 4333 0
 6106 0070 7B68     		ldr	r3, [r7, #4]
 6107 0072 002B     		cmp	r3, #0
 6108 0074 04D0     		beq	.L386
4334:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4335:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4336:../../../FreeRTOS_9_0/Source/tasks.c **** 				have changed. */
4337:../../../FreeRTOS_9_0/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 6109              		.loc 1 4337 0
 6110 0076 124B     		ldr	r3, .L390
 6111 0078 1B68     		ldr	r3, [r3]
 6112 007a 5A6D     		ldr	r2, [r3, #84]
 6113 007c 7B68     		ldr	r3, [r7, #4]
 6114 007e 1A60     		str	r2, [r3]
 6115              	.L386:
4338:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4339:../../../FreeRTOS_9_0/Source/tasks.c **** 
4340:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4341:../../../FreeRTOS_9_0/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4342:../../../FreeRTOS_9_0/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4343:../../../FreeRTOS_9_0/Source/tasks.c **** 			unblocked because of a timeout. */
4344:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 6116              		.loc 1 4344 0
 6117 0080 0F4B     		ldr	r3, .L390
 6118 0082 1B68     		ldr	r3, [r3]
 6119 0084 93F85830 		ldrb	r3, [r3, #88]
 6120 0088 DBB2     		uxtb	r3, r3
 6121 008a 012B     		cmp	r3, #1
ARM GAS  /tmp/ccIgarPJ.s 			page 188


 6122 008c 02D1     		bne	.L387
4345:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4346:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* A notification was not received. */
4347:../../../FreeRTOS_9_0/Source/tasks.c **** 				xReturn = pdFALSE;
 6123              		.loc 1 4347 0
 6124 008e 0023     		movs	r3, #0
 6125 0090 7B61     		str	r3, [r7, #20]
 6126 0092 08E0     		b	.L388
 6127              	.L387:
4348:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4349:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
4350:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4351:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* A notification was already pending or a notification was
4352:../../../FreeRTOS_9_0/Source/tasks.c **** 				received while the task was waiting. */
4353:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 6128              		.loc 1 4353 0
 6129 0094 0A4B     		ldr	r3, .L390
 6130 0096 1B68     		ldr	r3, [r3]
 6131 0098 596D     		ldr	r1, [r3, #84]
 6132 009a BA68     		ldr	r2, [r7, #8]
 6133 009c D243     		mvns	r2, r2
 6134 009e 0A40     		ands	r2, r2, r1
 6135 00a0 5A65     		str	r2, [r3, #84]
4354:../../../FreeRTOS_9_0/Source/tasks.c **** 				xReturn = pdTRUE;
 6136              		.loc 1 4354 0
 6137 00a2 0123     		movs	r3, #1
 6138 00a4 7B61     		str	r3, [r7, #20]
 6139              	.L388:
4355:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4356:../../../FreeRTOS_9_0/Source/tasks.c **** 
4357:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 6140              		.loc 1 4357 0
 6141 00a6 064B     		ldr	r3, .L390
 6142 00a8 1B68     		ldr	r3, [r3]
 6143 00aa 0022     		movs	r2, #0
 6144 00ac 83F85820 		strb	r2, [r3, #88]
4358:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4359:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskEXIT_CRITICAL();
 6145              		.loc 1 4359 0
 6146 00b0 FFF7FEFF 		bl	vPortExitCritical
4360:../../../FreeRTOS_9_0/Source/tasks.c **** 
4361:../../../FreeRTOS_9_0/Source/tasks.c **** 		return xReturn;
 6147              		.loc 1 4361 0
 6148 00b4 7B69     		ldr	r3, [r7, #20]
4362:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 6149              		.loc 1 4362 0
 6150 00b6 1846     		mov	r0, r3
 6151 00b8 1C37     		adds	r7, r7, #28
 6152              	.LCFI258:
 6153              		.cfi_def_cfa_offset 12
 6154 00ba BD46     		mov	sp, r7
 6155              	.LCFI259:
 6156              		.cfi_def_cfa_register 13
 6157              		@ sp needed
 6158 00bc 90BD     		pop	{r4, r7, pc}
 6159              	.L391:
 6160 00be 00BF     		.align	2
ARM GAS  /tmp/ccIgarPJ.s 			page 189


 6161              	.L390:
 6162 00c0 00000000 		.word	pxCurrentTCB
 6163 00c4 04ED00E0 		.word	-536810236
 6164              		.cfi_endproc
 6165              	.LFE55:
 6167              		.section	.text.xTaskGenericNotify,"ax",%progbits
 6168              		.align	2
 6169              		.global	xTaskGenericNotify
 6170              		.thumb
 6171              		.thumb_func
 6173              	xTaskGenericNotify:
 6174              	.LFB56:
4363:../../../FreeRTOS_9_0/Source/tasks.c **** 
4364:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4365:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
4366:../../../FreeRTOS_9_0/Source/tasks.c **** 
4367:../../../FreeRTOS_9_0/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4368:../../../FreeRTOS_9_0/Source/tasks.c **** 
4369:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4370:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 6175              		.loc 1 4370 0
 6176              		.cfi_startproc
 6177              		@ args = 0, pretend = 0, frame = 40
 6178              		@ frame_needed = 1, uses_anonymous_args = 0
 6179 0000 90B5     		push	{r4, r7, lr}
 6180              	.LCFI260:
 6181              		.cfi_def_cfa_offset 12
 6182              		.cfi_offset 4, -12
 6183              		.cfi_offset 7, -8
 6184              		.cfi_offset 14, -4
 6185 0002 8DB0     		sub	sp, sp, #52
 6186              	.LCFI261:
 6187              		.cfi_def_cfa_offset 64
 6188 0004 02AF     		add	r7, sp, #8
 6189              	.LCFI262:
 6190              		.cfi_def_cfa 7, 56
 6191 0006 F860     		str	r0, [r7, #12]
 6192 0008 B960     		str	r1, [r7, #8]
 6193 000a 3B60     		str	r3, [r7]
 6194 000c 1346     		mov	r3, r2
 6195 000e FB71     		strb	r3, [r7, #7]
4371:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t * pxTCB;
4372:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 6196              		.loc 1 4372 0
 6197 0010 0123     		movs	r3, #1
 6198 0012 7B62     		str	r3, [r7, #36]
4373:../../../FreeRTOS_9_0/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4374:../../../FreeRTOS_9_0/Source/tasks.c **** 
4375:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 6199              		.loc 1 4375 0
 6200 0014 FB68     		ldr	r3, [r7, #12]
 6201 0016 002B     		cmp	r3, #0
 6202 0018 09D1     		bne	.L393
 6203              	.LBB167:
 6204              	.LBB168:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6205              		.loc 2 237 0 discriminator 1
ARM GAS  /tmp/ccIgarPJ.s 			page 190


 6206              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6207 001a 4FF05003 			mov r3, #80												
 6208 001e 83F31188 		msr basepri, r3											
 6209 0022 BFF36F8F 		isb														
 6210 0026 BFF34F8F 		dsb														
 6211              	
 6212              	@ 0 "" 2
 6213              		.thumb
 6214 002a BB61     		str	r3, [r7, #24]
 6215              	.L394:
 6216              	.LBE168:
 6217              	.LBE167:
 6218              		.loc 1 4375 0 discriminator 1
 6219 002c FEE7     		b	.L394
 6220              	.L393:
4376:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 6221              		.loc 1 4376 0
 6222 002e FB68     		ldr	r3, [r7, #12]
 6223 0030 3B62     		str	r3, [r7, #32]
4377:../../../FreeRTOS_9_0/Source/tasks.c **** 
4378:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskENTER_CRITICAL();
 6224              		.loc 1 4378 0
 6225 0032 FFF7FEFF 		bl	vPortEnterCritical
4379:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4380:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 6226              		.loc 1 4380 0
 6227 0036 3B68     		ldr	r3, [r7]
 6228 0038 002B     		cmp	r3, #0
 6229 003a 03D0     		beq	.L395
4381:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4382:../../../FreeRTOS_9_0/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 6230              		.loc 1 4382 0
 6231 003c 3B6A     		ldr	r3, [r7, #32]
 6232 003e 5A6D     		ldr	r2, [r3, #84]
 6233 0040 3B68     		ldr	r3, [r7]
 6234 0042 1A60     		str	r2, [r3]
 6235              	.L395:
4383:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4384:../../../FreeRTOS_9_0/Source/tasks.c **** 
4385:../../../FreeRTOS_9_0/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 6236              		.loc 1 4385 0
 6237 0044 3B6A     		ldr	r3, [r7, #32]
 6238 0046 93F85830 		ldrb	r3, [r3, #88]
 6239 004a FB77     		strb	r3, [r7, #31]
4386:../../../FreeRTOS_9_0/Source/tasks.c **** 
4387:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 6240              		.loc 1 4387 0
 6241 004c 3B6A     		ldr	r3, [r7, #32]
 6242 004e 0222     		movs	r2, #2
 6243 0050 83F85820 		strb	r2, [r3, #88]
4388:../../../FreeRTOS_9_0/Source/tasks.c **** 
4389:../../../FreeRTOS_9_0/Source/tasks.c **** 			switch( eAction )
 6244              		.loc 1 4389 0
 6245 0054 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6246 0056 042B     		cmp	r3, #4
 6247 0058 27D8     		bhi	.L396
 6248 005a 01A2     		adr	r2, .L398
ARM GAS  /tmp/ccIgarPJ.s 			page 191


 6249 005c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 6250              		.p2align 2
 6251              	.L398:
 6252 0060 AB000000 		.word	.L396+1
 6253 0064 75000000 		.word	.L399+1
 6254 0068 83000000 		.word	.L400+1
 6255 006c 8F000000 		.word	.L401+1
 6256 0070 97000000 		.word	.L402+1
 6257              		.p2align 1
 6258              	.L399:
4390:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4391:../../../FreeRTOS_9_0/Source/tasks.c **** 				case eSetBits	:
4392:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 6259              		.loc 1 4392 0
 6260 0074 3B6A     		ldr	r3, [r7, #32]
 6261 0076 5A6D     		ldr	r2, [r3, #84]
 6262 0078 BB68     		ldr	r3, [r7, #8]
 6263 007a 1A43     		orrs	r2, r2, r3
 6264 007c 3B6A     		ldr	r3, [r7, #32]
 6265 007e 5A65     		str	r2, [r3, #84]
4393:../../../FreeRTOS_9_0/Source/tasks.c **** 					break;
 6266              		.loc 1 4393 0
 6267 0080 13E0     		b	.L396
 6268              	.L400:
4394:../../../FreeRTOS_9_0/Source/tasks.c **** 
4395:../../../FreeRTOS_9_0/Source/tasks.c **** 				case eIncrement	:
4396:../../../FreeRTOS_9_0/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 6269              		.loc 1 4396 0
 6270 0082 3B6A     		ldr	r3, [r7, #32]
 6271 0084 5B6D     		ldr	r3, [r3, #84]
 6272 0086 5A1C     		adds	r2, r3, #1
 6273 0088 3B6A     		ldr	r3, [r7, #32]
 6274 008a 5A65     		str	r2, [r3, #84]
4397:../../../FreeRTOS_9_0/Source/tasks.c **** 					break;
 6275              		.loc 1 4397 0
 6276 008c 0DE0     		b	.L396
 6277              	.L401:
4398:../../../FreeRTOS_9_0/Source/tasks.c **** 
4399:../../../FreeRTOS_9_0/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4400:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 6278              		.loc 1 4400 0
 6279 008e 3B6A     		ldr	r3, [r7, #32]
 6280 0090 BA68     		ldr	r2, [r7, #8]
 6281 0092 5A65     		str	r2, [r3, #84]
4401:../../../FreeRTOS_9_0/Source/tasks.c **** 					break;
 6282              		.loc 1 4401 0
 6283 0094 09E0     		b	.L396
 6284              	.L402:
4402:../../../FreeRTOS_9_0/Source/tasks.c **** 
4403:../../../FreeRTOS_9_0/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4404:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 6285              		.loc 1 4404 0
 6286 0096 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 6287 0098 022B     		cmp	r3, #2
 6288 009a 03D0     		beq	.L403
4405:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
4406:../../../FreeRTOS_9_0/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
ARM GAS  /tmp/ccIgarPJ.s 			page 192


 6289              		.loc 1 4406 0
 6290 009c 3B6A     		ldr	r3, [r7, #32]
 6291 009e BA68     		ldr	r2, [r7, #8]
 6292 00a0 5A65     		str	r2, [r3, #84]
4407:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
4408:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
4409:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
4410:../../../FreeRTOS_9_0/Source/tasks.c **** 						/* The value could not be written to the task. */
4411:../../../FreeRTOS_9_0/Source/tasks.c **** 						xReturn = pdFAIL;
4412:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
4413:../../../FreeRTOS_9_0/Source/tasks.c **** 					break;
 6293              		.loc 1 4413 0
 6294 00a2 01E0     		b	.L409
 6295              	.L403:
4411:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
 6296              		.loc 1 4411 0
 6297 00a4 0023     		movs	r3, #0
 6298 00a6 7B62     		str	r3, [r7, #36]
 6299              	.L409:
 6300              		.loc 1 4413 0
 6301 00a8 00BF     		nop
 6302              	.L396:
4414:../../../FreeRTOS_9_0/Source/tasks.c **** 
4415:../../../FreeRTOS_9_0/Source/tasks.c **** 				case eNoAction:
4416:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* The task is being notified without its notify value being
4417:../../../FreeRTOS_9_0/Source/tasks.c **** 					updated. */
4418:../../../FreeRTOS_9_0/Source/tasks.c **** 					break;
4419:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4420:../../../FreeRTOS_9_0/Source/tasks.c **** 
4421:../../../FreeRTOS_9_0/Source/tasks.c **** 			traceTASK_NOTIFY();
 6303              		.loc 1 4421 0
 6304 00aa 3B6A     		ldr	r3, [r7, #32]
 6305 00ac 1846     		mov	r0, r3
 6306 00ae FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 6307 00b2 0246     		mov	r2, r0
 6308 00b4 FC79     		ldrb	r4, [r7, #7]	@ zero_extendqisi2
 6309 00b6 3B68     		ldr	r3, [r7]
 6310 00b8 0093     		str	r3, [sp]
 6311 00ba 3E20     		movs	r0, #62
 6312 00bc 1146     		mov	r1, r2
 6313 00be BA68     		ldr	r2, [r7, #8]
 6314 00c0 2346     		mov	r3, r4
 6315 00c2 FFF7FEFF 		bl	SYSVIEW_RecordU32x4
4422:../../../FreeRTOS_9_0/Source/tasks.c **** 
4423:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4424:../../../FreeRTOS_9_0/Source/tasks.c **** 			notification then unblock it now. */
4425:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 6316              		.loc 1 4425 0
 6317 00c6 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 6318 00c8 012B     		cmp	r3, #1
 6319 00ca 3ED1     		bne	.L405
4426:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4427:../../../FreeRTOS_9_0/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 6320              		.loc 1 4427 0
 6321 00cc 3B6A     		ldr	r3, [r7, #32]
 6322 00ce 0433     		adds	r3, r3, #4
 6323 00d0 1846     		mov	r0, r3
ARM GAS  /tmp/ccIgarPJ.s 			page 193


 6324 00d2 FFF7FEFF 		bl	uxListRemove
4428:../../../FreeRTOS_9_0/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 6325              		.loc 1 4428 0
 6326 00d6 3B6A     		ldr	r3, [r7, #32]
 6327 00d8 1846     		mov	r0, r3
 6328 00da FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStartReady
 6329 00de 3B6A     		ldr	r3, [r7, #32]
 6330 00e0 DB6A     		ldr	r3, [r3, #44]
 6331 00e2 1A46     		mov	r2, r3
 6332 00e4 0123     		movs	r3, #1
 6333 00e6 03FA02F2 		lsl	r2, r3, r2
 6334 00ea 1B4B     		ldr	r3, .L410
 6335 00ec 1B68     		ldr	r3, [r3]
 6336 00ee 1343     		orrs	r3, r3, r2
 6337 00f0 194A     		ldr	r2, .L410
 6338 00f2 1360     		str	r3, [r2]
 6339 00f4 3B6A     		ldr	r3, [r7, #32]
 6340 00f6 DA6A     		ldr	r2, [r3, #44]
 6341 00f8 1346     		mov	r3, r2
 6342 00fa 9B00     		lsls	r3, r3, #2
 6343 00fc 1344     		add	r3, r3, r2
 6344 00fe 9B00     		lsls	r3, r3, #2
 6345 0100 164A     		ldr	r2, .L410+4
 6346 0102 1A44     		add	r2, r2, r3
 6347 0104 3B6A     		ldr	r3, [r7, #32]
 6348 0106 0433     		adds	r3, r3, #4
 6349 0108 1046     		mov	r0, r2
 6350 010a 1946     		mov	r1, r3
 6351 010c FFF7FEFF 		bl	vListInsertEnd
4429:../../../FreeRTOS_9_0/Source/tasks.c **** 
4430:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* The task should not have been on an event list. */
4431:../../../FreeRTOS_9_0/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 6352              		.loc 1 4431 0
 6353 0110 3B6A     		ldr	r3, [r7, #32]
 6354 0112 9B6A     		ldr	r3, [r3, #40]
 6355 0114 002B     		cmp	r3, #0
 6356 0116 09D0     		beq	.L406
 6357              	.LBB169:
 6358              	.LBB170:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6359              		.loc 2 237 0 discriminator 1
 6360              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6361 0118 4FF05003 			mov r3, #80												
 6362 011c 83F31188 		msr basepri, r3											
 6363 0120 BFF36F8F 		isb														
 6364 0124 BFF34F8F 		dsb														
 6365              	
 6366              	@ 0 "" 2
 6367              		.thumb
 6368 0128 7B61     		str	r3, [r7, #20]
 6369              	.L407:
 6370              	.LBE170:
 6371              	.LBE169:
 6372              		.loc 1 4431 0 discriminator 2
 6373 012a FEE7     		b	.L407
 6374              	.L406:
4432:../../../FreeRTOS_9_0/Source/tasks.c **** 
ARM GAS  /tmp/ccIgarPJ.s 			page 194


4433:../../../FreeRTOS_9_0/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4434:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4435:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4436:../../../FreeRTOS_9_0/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4437:../../../FreeRTOS_9_0/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4438:../../../FreeRTOS_9_0/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4439:../../../FreeRTOS_9_0/Source/tasks.c **** 					because it will automatically get reset to a new value when
4440:../../../FreeRTOS_9_0/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4441:../../../FreeRTOS_9_0/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4442:../../../FreeRTOS_9_0/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4443:../../../FreeRTOS_9_0/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4444:../../../FreeRTOS_9_0/Source/tasks.c **** 					earliest possible time. */
4445:../../../FreeRTOS_9_0/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4446:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4447:../../../FreeRTOS_9_0/Source/tasks.c **** 				#endif
4448:../../../FreeRTOS_9_0/Source/tasks.c **** 
4449:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 6375              		.loc 1 4449 0
 6376 012c 3B6A     		ldr	r3, [r7, #32]
 6377 012e DA6A     		ldr	r2, [r3, #44]
 6378 0130 0B4B     		ldr	r3, .L410+8
 6379 0132 1B68     		ldr	r3, [r3]
 6380 0134 DB6A     		ldr	r3, [r3, #44]
 6381 0136 9A42     		cmp	r2, r3
 6382 0138 07D9     		bls	.L405
4450:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4451:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* The notified task has a priority above the currently
4452:../../../FreeRTOS_9_0/Source/tasks.c **** 					executing task so a yield is required. */
4453:../../../FreeRTOS_9_0/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 6383              		.loc 1 4453 0
 6384 013a 0A4B     		ldr	r3, .L410+12
 6385 013c 4FF08052 		mov	r2, #268435456
 6386 0140 1A60     		str	r2, [r3]
 6387              	@ 4453 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 6388 0142 BFF34F8F 		dsb
 6389              	@ 0 "" 2
 6390              	@ 4453 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 6391 0146 BFF36F8F 		isb
 6392              	@ 0 "" 2
 6393              		.thumb
 6394              	.L405:
4454:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4455:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
4456:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4457:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4458:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4459:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4460:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
4461:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4462:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4463:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4464:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4465:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskEXIT_CRITICAL();
 6395              		.loc 1 4465 0
 6396 014a FFF7FEFF 		bl	vPortExitCritical
4466:../../../FreeRTOS_9_0/Source/tasks.c **** 
4467:../../../FreeRTOS_9_0/Source/tasks.c **** 		return xReturn;
ARM GAS  /tmp/ccIgarPJ.s 			page 195


 6397              		.loc 1 4467 0
 6398 014e 7B6A     		ldr	r3, [r7, #36]
4468:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 6399              		.loc 1 4468 0
 6400 0150 1846     		mov	r0, r3
 6401 0152 2C37     		adds	r7, r7, #44
 6402              	.LCFI263:
 6403              		.cfi_def_cfa_offset 12
 6404 0154 BD46     		mov	sp, r7
 6405              	.LCFI264:
 6406              		.cfi_def_cfa_register 13
 6407              		@ sp needed
 6408 0156 90BD     		pop	{r4, r7, pc}
 6409              	.L411:
 6410              		.align	2
 6411              	.L410:
 6412 0158 00000000 		.word	uxTopReadyPriority
 6413 015c 00000000 		.word	pxReadyTasksLists
 6414 0160 00000000 		.word	pxCurrentTCB
 6415 0164 04ED00E0 		.word	-536810236
 6416              		.cfi_endproc
 6417              	.LFE56:
 6419              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 6420              		.align	2
 6421              		.global	xTaskGenericNotifyFromISR
 6422              		.thumb
 6423              		.thumb_func
 6425              	xTaskGenericNotifyFromISR:
 6426              	.LFB57:
4469:../../../FreeRTOS_9_0/Source/tasks.c **** 
4470:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4471:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
4472:../../../FreeRTOS_9_0/Source/tasks.c **** 
4473:../../../FreeRTOS_9_0/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4474:../../../FreeRTOS_9_0/Source/tasks.c **** 
4475:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4476:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 6427              		.loc 1 4476 0
 6428              		.cfi_startproc
 6429              		@ args = 4, pretend = 0, frame = 56
 6430              		@ frame_needed = 1, uses_anonymous_args = 0
 6431 0000 90B5     		push	{r4, r7, lr}
 6432              	.LCFI265:
 6433              		.cfi_def_cfa_offset 12
 6434              		.cfi_offset 4, -12
 6435              		.cfi_offset 7, -8
 6436              		.cfi_offset 14, -4
 6437 0002 91B0     		sub	sp, sp, #68
 6438              	.LCFI266:
 6439              		.cfi_def_cfa_offset 80
 6440 0004 02AF     		add	r7, sp, #8
 6441              	.LCFI267:
 6442              		.cfi_def_cfa 7, 72
 6443 0006 F860     		str	r0, [r7, #12]
 6444 0008 B960     		str	r1, [r7, #8]
 6445 000a 3B60     		str	r3, [r7]
 6446 000c 1346     		mov	r3, r2
ARM GAS  /tmp/ccIgarPJ.s 			page 196


 6447 000e FB71     		strb	r3, [r7, #7]
4477:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t * pxTCB;
4478:../../../FreeRTOS_9_0/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4479:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 6448              		.loc 1 4479 0
 6449 0010 0123     		movs	r3, #1
 6450 0012 7B63     		str	r3, [r7, #52]
4480:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4481:../../../FreeRTOS_9_0/Source/tasks.c **** 
4482:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 6451              		.loc 1 4482 0
 6452 0014 FB68     		ldr	r3, [r7, #12]
 6453 0016 002B     		cmp	r3, #0
 6454 0018 09D1     		bne	.L413
 6455              	.LBB171:
 6456              	.LBB172:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6457              		.loc 2 237 0 discriminator 1
 6458              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6459 001a 4FF05003 			mov r3, #80												
 6460 001e 83F31188 		msr basepri, r3											
 6461 0022 BFF36F8F 		isb														
 6462 0026 BFF34F8F 		dsb														
 6463              	
 6464              	@ 0 "" 2
 6465              		.thumb
 6466 002a 7B62     		str	r3, [r7, #36]
 6467              	.L414:
 6468              	.LBE172:
 6469              	.LBE171:
 6470              		.loc 1 4482 0 discriminator 1
 6471 002c FEE7     		b	.L414
 6472              	.L413:
4483:../../../FreeRTOS_9_0/Source/tasks.c **** 
4484:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4485:../../../FreeRTOS_9_0/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4486:../../../FreeRTOS_9_0/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4487:../../../FreeRTOS_9_0/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4488:../../../FreeRTOS_9_0/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4489:../../../FreeRTOS_9_0/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4490:../../../FreeRTOS_9_0/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4491:../../../FreeRTOS_9_0/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4492:../../../FreeRTOS_9_0/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4493:../../../FreeRTOS_9_0/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4494:../../../FreeRTOS_9_0/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4495:../../../FreeRTOS_9_0/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4496:../../../FreeRTOS_9_0/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4497:../../../FreeRTOS_9_0/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4498:../../../FreeRTOS_9_0/Source/tasks.c **** 		provided on the following link:
4499:../../../FreeRTOS_9_0/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4500:../../../FreeRTOS_9_0/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 6473              		.loc 1 4500 0
 6474 002e FFF7FEFF 		bl	vPortValidateInterruptPriority
4501:../../../FreeRTOS_9_0/Source/tasks.c **** 
4502:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 6475              		.loc 1 4502 0
 6476 0032 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccIgarPJ.s 			page 197


 6477 0034 3B63     		str	r3, [r7, #48]
 6478              	.LBB173:
 6479              	.LBB174:
 253:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6480              		.loc 2 253 0
 6481              	@ 253 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6482 0036 EFF31182 			mrs r2, basepri											
 6483 003a 4FF05003 		mov r3, #80												
 6484 003e 83F31188 		msr basepri, r3											
 6485 0042 BFF36F8F 		isb														
 6486 0046 BFF34F8F 		dsb														
 6487              	
 6488              	@ 0 "" 2
 6489              		.thumb
 6490 004a 3A62     		str	r2, [r7, #32]
 6491 004c FB61     		str	r3, [r7, #28]
 265:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 6492              		.loc 2 265 0
 6493 004e 3B6A     		ldr	r3, [r7, #32]
 6494              	.LBE174:
 6495              	.LBE173:
4503:../../../FreeRTOS_9_0/Source/tasks.c **** 
4504:../../../FreeRTOS_9_0/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 6496              		.loc 1 4504 0
 6497 0050 FB62     		str	r3, [r7, #44]
4505:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4506:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 6498              		.loc 1 4506 0
 6499 0052 3B68     		ldr	r3, [r7]
 6500 0054 002B     		cmp	r3, #0
 6501 0056 03D0     		beq	.L416
4507:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4508:../../../FreeRTOS_9_0/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 6502              		.loc 1 4508 0
 6503 0058 3B6B     		ldr	r3, [r7, #48]
 6504 005a 5A6D     		ldr	r2, [r3, #84]
 6505 005c 3B68     		ldr	r3, [r7]
 6506 005e 1A60     		str	r2, [r3]
 6507              	.L416:
4509:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4510:../../../FreeRTOS_9_0/Source/tasks.c **** 
4511:../../../FreeRTOS_9_0/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 6508              		.loc 1 4511 0
 6509 0060 3B6B     		ldr	r3, [r7, #48]
 6510 0062 93F85830 		ldrb	r3, [r3, #88]
 6511 0066 87F82B30 		strb	r3, [r7, #43]
4512:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 6512              		.loc 1 4512 0
 6513 006a 3B6B     		ldr	r3, [r7, #48]
 6514 006c 0222     		movs	r2, #2
 6515 006e 83F85820 		strb	r2, [r3, #88]
4513:../../../FreeRTOS_9_0/Source/tasks.c **** 
4514:../../../FreeRTOS_9_0/Source/tasks.c **** 			switch( eAction )
 6516              		.loc 1 4514 0
 6517 0072 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6518 0074 042B     		cmp	r3, #4
 6519 0076 29D8     		bhi	.L417
ARM GAS  /tmp/ccIgarPJ.s 			page 198


 6520 0078 01A2     		adr	r2, .L419
 6521 007a 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 6522 007e 00BF     		.p2align 2
 6523              	.L419:
 6524 0080 CD000000 		.word	.L417+1
 6525 0084 95000000 		.word	.L420+1
 6526 0088 A3000000 		.word	.L421+1
 6527 008c AF000000 		.word	.L422+1
 6528 0090 B7000000 		.word	.L423+1
 6529              		.p2align 1
 6530              	.L420:
4515:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4516:../../../FreeRTOS_9_0/Source/tasks.c **** 				case eSetBits	:
4517:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 6531              		.loc 1 4517 0
 6532 0094 3B6B     		ldr	r3, [r7, #48]
 6533 0096 5A6D     		ldr	r2, [r3, #84]
 6534 0098 BB68     		ldr	r3, [r7, #8]
 6535 009a 1A43     		orrs	r2, r2, r3
 6536 009c 3B6B     		ldr	r3, [r7, #48]
 6537 009e 5A65     		str	r2, [r3, #84]
4518:../../../FreeRTOS_9_0/Source/tasks.c **** 					break;
 6538              		.loc 1 4518 0
 6539 00a0 14E0     		b	.L417
 6540              	.L421:
4519:../../../FreeRTOS_9_0/Source/tasks.c **** 
4520:../../../FreeRTOS_9_0/Source/tasks.c **** 				case eIncrement	:
4521:../../../FreeRTOS_9_0/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 6541              		.loc 1 4521 0
 6542 00a2 3B6B     		ldr	r3, [r7, #48]
 6543 00a4 5B6D     		ldr	r3, [r3, #84]
 6544 00a6 5A1C     		adds	r2, r3, #1
 6545 00a8 3B6B     		ldr	r3, [r7, #48]
 6546 00aa 5A65     		str	r2, [r3, #84]
4522:../../../FreeRTOS_9_0/Source/tasks.c **** 					break;
 6547              		.loc 1 4522 0
 6548 00ac 0EE0     		b	.L417
 6549              	.L422:
4523:../../../FreeRTOS_9_0/Source/tasks.c **** 
4524:../../../FreeRTOS_9_0/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4525:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 6550              		.loc 1 4525 0
 6551 00ae 3B6B     		ldr	r3, [r7, #48]
 6552 00b0 BA68     		ldr	r2, [r7, #8]
 6553 00b2 5A65     		str	r2, [r3, #84]
4526:../../../FreeRTOS_9_0/Source/tasks.c **** 					break;
 6554              		.loc 1 4526 0
 6555 00b4 0AE0     		b	.L417
 6556              	.L423:
4527:../../../FreeRTOS_9_0/Source/tasks.c **** 
4528:../../../FreeRTOS_9_0/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4529:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 6557              		.loc 1 4529 0
 6558 00b6 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 6559 00ba 022B     		cmp	r3, #2
 6560 00bc 03D0     		beq	.L424
4530:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
ARM GAS  /tmp/ccIgarPJ.s 			page 199


4531:../../../FreeRTOS_9_0/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 6561              		.loc 1 4531 0
 6562 00be 3B6B     		ldr	r3, [r7, #48]
 6563 00c0 BA68     		ldr	r2, [r7, #8]
 6564 00c2 5A65     		str	r2, [r3, #84]
4532:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
4533:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
4534:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
4535:../../../FreeRTOS_9_0/Source/tasks.c **** 						/* The value could not be written to the task. */
4536:../../../FreeRTOS_9_0/Source/tasks.c **** 						xReturn = pdFAIL;
4537:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
4538:../../../FreeRTOS_9_0/Source/tasks.c **** 					break;
 6565              		.loc 1 4538 0
 6566 00c4 01E0     		b	.L434
 6567              	.L424:
4536:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
 6568              		.loc 1 4536 0
 6569 00c6 0023     		movs	r3, #0
 6570 00c8 7B63     		str	r3, [r7, #52]
 6571              	.L434:
 6572              		.loc 1 4538 0
 6573 00ca 00BF     		nop
 6574              	.L417:
4539:../../../FreeRTOS_9_0/Source/tasks.c **** 
4540:../../../FreeRTOS_9_0/Source/tasks.c **** 				case eNoAction :
4541:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* The task is being notified without its notify value being
4542:../../../FreeRTOS_9_0/Source/tasks.c **** 					updated. */
4543:../../../FreeRTOS_9_0/Source/tasks.c **** 					break;
4544:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4545:../../../FreeRTOS_9_0/Source/tasks.c **** 
4546:../../../FreeRTOS_9_0/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
 6575              		.loc 1 4546 0
 6576 00cc 3B6B     		ldr	r3, [r7, #48]
 6577 00ce 1846     		mov	r0, r3
 6578 00d0 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 6579 00d4 0146     		mov	r1, r0
 6580 00d6 FC79     		ldrb	r4, [r7, #7]	@ zero_extendqisi2
 6581 00d8 3A68     		ldr	r2, [r7]
 6582 00da BB6C     		ldr	r3, [r7, #72]
 6583 00dc 0092     		str	r2, [sp]
 6584 00de 0193     		str	r3, [sp, #4]
 6585 00e0 3F20     		movs	r0, #63
 6586 00e2 BA68     		ldr	r2, [r7, #8]
 6587 00e4 2346     		mov	r3, r4
 6588 00e6 FFF7FEFF 		bl	SYSVIEW_RecordU32x5
4547:../../../FreeRTOS_9_0/Source/tasks.c **** 
4548:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4549:../../../FreeRTOS_9_0/Source/tasks.c **** 			notification then unblock it now. */
4550:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 6589              		.loc 1 4550 0
 6590 00ea 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 6591 00ee 012B     		cmp	r3, #1
 6592 00f0 4BD1     		bne	.L426
4551:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4552:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* The task should not have been on an event list. */
4553:../../../FreeRTOS_9_0/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 6593              		.loc 1 4553 0
ARM GAS  /tmp/ccIgarPJ.s 			page 200


 6594 00f2 3B6B     		ldr	r3, [r7, #48]
 6595 00f4 9B6A     		ldr	r3, [r3, #40]
 6596 00f6 002B     		cmp	r3, #0
 6597 00f8 09D0     		beq	.L427
 6598              	.LBB175:
 6599              	.LBB176:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6600              		.loc 2 237 0 discriminator 1
 6601              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6602 00fa 4FF05003 			mov r3, #80												
 6603 00fe 83F31188 		msr basepri, r3											
 6604 0102 BFF36F8F 		isb														
 6605 0106 BFF34F8F 		dsb														
 6606              	
 6607              	@ 0 "" 2
 6608              		.thumb
 6609 010a BB61     		str	r3, [r7, #24]
 6610              	.L428:
 6611              	.LBE176:
 6612              	.LBE175:
 6613              		.loc 1 4553 0 discriminator 2
 6614 010c FEE7     		b	.L428
 6615              	.L427:
4554:../../../FreeRTOS_9_0/Source/tasks.c **** 
4555:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 6616              		.loc 1 4555 0
 6617 010e 244B     		ldr	r3, .L435
 6618 0110 1B68     		ldr	r3, [r3]
 6619 0112 002B     		cmp	r3, #0
 6620 0114 22D1     		bne	.L429
4556:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4557:../../../FreeRTOS_9_0/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 6621              		.loc 1 4557 0
 6622 0116 3B6B     		ldr	r3, [r7, #48]
 6623 0118 0433     		adds	r3, r3, #4
 6624 011a 1846     		mov	r0, r3
 6625 011c FFF7FEFF 		bl	uxListRemove
4558:../../../FreeRTOS_9_0/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6626              		.loc 1 4558 0
 6627 0120 3B6B     		ldr	r3, [r7, #48]
 6628 0122 1846     		mov	r0, r3
 6629 0124 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStartReady
 6630 0128 3B6B     		ldr	r3, [r7, #48]
 6631 012a DB6A     		ldr	r3, [r3, #44]
 6632 012c 1A46     		mov	r2, r3
 6633 012e 0123     		movs	r3, #1
 6634 0130 03FA02F2 		lsl	r2, r3, r2
 6635 0134 1B4B     		ldr	r3, .L435+4
 6636 0136 1B68     		ldr	r3, [r3]
 6637 0138 1343     		orrs	r3, r3, r2
 6638 013a 1A4A     		ldr	r2, .L435+4
 6639 013c 1360     		str	r3, [r2]
 6640 013e 3B6B     		ldr	r3, [r7, #48]
 6641 0140 DA6A     		ldr	r2, [r3, #44]
 6642 0142 1346     		mov	r3, r2
 6643 0144 9B00     		lsls	r3, r3, #2
 6644 0146 1344     		add	r3, r3, r2
ARM GAS  /tmp/ccIgarPJ.s 			page 201


 6645 0148 9B00     		lsls	r3, r3, #2
 6646 014a 174A     		ldr	r2, .L435+8
 6647 014c 1A44     		add	r2, r2, r3
 6648 014e 3B6B     		ldr	r3, [r7, #48]
 6649 0150 0433     		adds	r3, r3, #4
 6650 0152 1046     		mov	r0, r2
 6651 0154 1946     		mov	r1, r3
 6652 0156 FFF7FEFF 		bl	vListInsertEnd
 6653 015a 05E0     		b	.L430
 6654              	.L429:
4559:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4560:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
4561:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4562:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4563:../../../FreeRTOS_9_0/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4564:../../../FreeRTOS_9_0/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 6655              		.loc 1 4564 0
 6656 015c 3B6B     		ldr	r3, [r7, #48]
 6657 015e 1833     		adds	r3, r3, #24
 6658 0160 1248     		ldr	r0, .L435+12
 6659 0162 1946     		mov	r1, r3
 6660 0164 FFF7FEFF 		bl	vListInsertEnd
 6661              	.L430:
4565:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4566:../../../FreeRTOS_9_0/Source/tasks.c **** 
4567:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 6662              		.loc 1 4567 0
 6663 0168 3B6B     		ldr	r3, [r7, #48]
 6664 016a DA6A     		ldr	r2, [r3, #44]
 6665 016c 104B     		ldr	r3, .L435+16
 6666 016e 1B68     		ldr	r3, [r3]
 6667 0170 DB6A     		ldr	r3, [r3, #44]
 6668 0172 9A42     		cmp	r2, r3
 6669 0174 09D9     		bls	.L426
4568:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4569:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* The notified task has a priority above the currently
4570:../../../FreeRTOS_9_0/Source/tasks.c **** 					executing task so a yield is required. */
4571:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 6670              		.loc 1 4571 0
 6671 0176 BB6C     		ldr	r3, [r7, #72]
 6672 0178 002B     		cmp	r3, #0
 6673 017a 03D0     		beq	.L431
4572:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
4573:../../../FreeRTOS_9_0/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 6674              		.loc 1 4573 0
 6675 017c BB6C     		ldr	r3, [r7, #72]
 6676 017e 0122     		movs	r2, #1
 6677 0180 1A60     		str	r2, [r3]
 6678 0182 02E0     		b	.L426
 6679              	.L431:
4574:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
4575:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
4576:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
4577:../../../FreeRTOS_9_0/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4578:../../../FreeRTOS_9_0/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter to an ISR
4579:../../../FreeRTOS_9_0/Source/tasks.c **** 						safe FreeRTOS function. */
4580:../../../FreeRTOS_9_0/Source/tasks.c **** 						xYieldPending = pdTRUE;
ARM GAS  /tmp/ccIgarPJ.s 			page 202


 6680              		.loc 1 4580 0
 6681 0184 0B4B     		ldr	r3, .L435+20
 6682 0186 0122     		movs	r2, #1
 6683 0188 1A60     		str	r2, [r3]
 6684              	.L426:
 6685 018a FB6A     		ldr	r3, [r7, #44]
 6686 018c 7B61     		str	r3, [r7, #20]
 6687              	.LBB177:
 6688              	.LBB178:
 6689              		.loc 2 271 0
 6690 018e 7B69     		ldr	r3, [r7, #20]
 6691              	@ 271 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6692 0190 83F31188 			msr basepri, r3	
 6693              	@ 0 "" 2
 6694              		.thumb
 6695              	.LBE178:
 6696              	.LBE177:
4581:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
4582:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4583:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
4584:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4585:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4586:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4587:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4588:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4589:../../../FreeRTOS_9_0/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4590:../../../FreeRTOS_9_0/Source/tasks.c **** 
4591:../../../FreeRTOS_9_0/Source/tasks.c **** 		return xReturn;
 6697              		.loc 1 4591 0
 6698 0194 7B6B     		ldr	r3, [r7, #52]
4592:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 6699              		.loc 1 4592 0
 6700 0196 1846     		mov	r0, r3
 6701 0198 3C37     		adds	r7, r7, #60
 6702              	.LCFI268:
 6703              		.cfi_def_cfa_offset 12
 6704 019a BD46     		mov	sp, r7
 6705              	.LCFI269:
 6706              		.cfi_def_cfa_register 13
 6707              		@ sp needed
 6708 019c 90BD     		pop	{r4, r7, pc}
 6709              	.L436:
 6710 019e 00BF     		.align	2
 6711              	.L435:
 6712 01a0 00000000 		.word	uxSchedulerSuspended
 6713 01a4 00000000 		.word	uxTopReadyPriority
 6714 01a8 00000000 		.word	pxReadyTasksLists
 6715 01ac 00000000 		.word	xPendingReadyList
 6716 01b0 00000000 		.word	pxCurrentTCB
 6717 01b4 00000000 		.word	xYieldPending
 6718              		.cfi_endproc
 6719              	.LFE57:
 6721              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 6722              		.align	2
 6723              		.global	vTaskNotifyGiveFromISR
 6724              		.thumb
 6725              		.thumb_func
ARM GAS  /tmp/ccIgarPJ.s 			page 203


 6727              	vTaskNotifyGiveFromISR:
 6728              	.LFB58:
4593:../../../FreeRTOS_9_0/Source/tasks.c **** 
4594:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4595:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
4596:../../../FreeRTOS_9_0/Source/tasks.c **** 
4597:../../../FreeRTOS_9_0/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4598:../../../FreeRTOS_9_0/Source/tasks.c **** 
4599:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4600:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 6729              		.loc 1 4600 0
 6730              		.cfi_startproc
 6731              		@ args = 0, pretend = 0, frame = 40
 6732              		@ frame_needed = 1, uses_anonymous_args = 0
 6733 0000 80B5     		push	{r7, lr}
 6734              	.LCFI270:
 6735              		.cfi_def_cfa_offset 8
 6736              		.cfi_offset 7, -8
 6737              		.cfi_offset 14, -4
 6738 0002 8AB0     		sub	sp, sp, #40
 6739              	.LCFI271:
 6740              		.cfi_def_cfa_offset 48
 6741 0004 00AF     		add	r7, sp, #0
 6742              	.LCFI272:
 6743              		.cfi_def_cfa_register 7
 6744 0006 7860     		str	r0, [r7, #4]
 6745 0008 3960     		str	r1, [r7]
4601:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t * pxTCB;
4602:../../../FreeRTOS_9_0/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4603:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4604:../../../FreeRTOS_9_0/Source/tasks.c **** 
4605:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 6746              		.loc 1 4605 0
 6747 000a 7B68     		ldr	r3, [r7, #4]
 6748 000c 002B     		cmp	r3, #0
 6749 000e 09D1     		bne	.L438
 6750              	.LBB179:
 6751              	.LBB180:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6752              		.loc 2 237 0 discriminator 1
 6753              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6754 0010 4FF05003 			mov r3, #80												
 6755 0014 83F31188 		msr basepri, r3											
 6756 0018 BFF36F8F 		isb														
 6757 001c BFF34F8F 		dsb														
 6758              	
 6759              	@ 0 "" 2
 6760              		.thumb
 6761 0020 BB61     		str	r3, [r7, #24]
 6762              	.L439:
 6763              	.LBE180:
 6764              	.LBE179:
 6765              		.loc 1 4605 0 discriminator 1
 6766 0022 FEE7     		b	.L439
 6767              	.L438:
4606:../../../FreeRTOS_9_0/Source/tasks.c **** 
4607:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
ARM GAS  /tmp/ccIgarPJ.s 			page 204


4608:../../../FreeRTOS_9_0/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4609:../../../FreeRTOS_9_0/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4610:../../../FreeRTOS_9_0/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4611:../../../FreeRTOS_9_0/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4612:../../../FreeRTOS_9_0/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4613:../../../FreeRTOS_9_0/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4614:../../../FreeRTOS_9_0/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4615:../../../FreeRTOS_9_0/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4616:../../../FreeRTOS_9_0/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4617:../../../FreeRTOS_9_0/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4618:../../../FreeRTOS_9_0/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4619:../../../FreeRTOS_9_0/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4620:../../../FreeRTOS_9_0/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4621:../../../FreeRTOS_9_0/Source/tasks.c **** 		provided on the following link:
4622:../../../FreeRTOS_9_0/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4623:../../../FreeRTOS_9_0/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 6768              		.loc 1 4623 0
 6769 0024 FFF7FEFF 		bl	vPortValidateInterruptPriority
4624:../../../FreeRTOS_9_0/Source/tasks.c **** 
4625:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 6770              		.loc 1 4625 0
 6771 0028 7B68     		ldr	r3, [r7, #4]
 6772 002a 7B62     		str	r3, [r7, #36]
 6773              	.LBB181:
 6774              	.LBB182:
 253:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6775              		.loc 2 253 0
 6776              	@ 253 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6777 002c EFF31182 			mrs r2, basepri											
 6778 0030 4FF05003 		mov r3, #80												
 6779 0034 83F31188 		msr basepri, r3											
 6780 0038 BFF36F8F 		isb														
 6781 003c BFF34F8F 		dsb														
 6782              	
 6783              	@ 0 "" 2
 6784              		.thumb
 6785 0040 7A61     		str	r2, [r7, #20]
 6786 0042 3B61     		str	r3, [r7, #16]
 265:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 6787              		.loc 2 265 0
 6788 0044 7B69     		ldr	r3, [r7, #20]
 6789              	.LBE182:
 6790              	.LBE181:
4626:../../../FreeRTOS_9_0/Source/tasks.c **** 
4627:../../../FreeRTOS_9_0/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 6791              		.loc 1 4627 0
 6792 0046 3B62     		str	r3, [r7, #32]
4628:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4629:../../../FreeRTOS_9_0/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 6793              		.loc 1 4629 0
 6794 0048 7B6A     		ldr	r3, [r7, #36]
 6795 004a 93F85830 		ldrb	r3, [r3, #88]
 6796 004e FB77     		strb	r3, [r7, #31]
4630:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 6797              		.loc 1 4630 0
 6798 0050 7B6A     		ldr	r3, [r7, #36]
 6799 0052 0222     		movs	r2, #2
ARM GAS  /tmp/ccIgarPJ.s 			page 205


 6800 0054 83F85820 		strb	r2, [r3, #88]
4631:../../../FreeRTOS_9_0/Source/tasks.c **** 
4632:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4633:../../../FreeRTOS_9_0/Source/tasks.c **** 			semaphore. */
4634:../../../FreeRTOS_9_0/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
 6801              		.loc 1 4634 0
 6802 0058 7B6A     		ldr	r3, [r7, #36]
 6803 005a 5B6D     		ldr	r3, [r3, #84]
 6804 005c 5A1C     		adds	r2, r3, #1
 6805 005e 7B6A     		ldr	r3, [r7, #36]
 6806 0060 5A65     		str	r2, [r3, #84]
4635:../../../FreeRTOS_9_0/Source/tasks.c **** 
4636:../../../FreeRTOS_9_0/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
 6807              		.loc 1 4636 0
 6808 0062 7B6A     		ldr	r3, [r7, #36]
 6809 0064 1846     		mov	r0, r3
 6810 0066 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 6811 006a 0246     		mov	r2, r0
 6812 006c 3B68     		ldr	r3, [r7]
 6813 006e 4120     		movs	r0, #65
 6814 0070 1146     		mov	r1, r2
 6815 0072 1A46     		mov	r2, r3
 6816 0074 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x2
4637:../../../FreeRTOS_9_0/Source/tasks.c **** 
4638:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4639:../../../FreeRTOS_9_0/Source/tasks.c **** 			notification then unblock it now. */
4640:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 6817              		.loc 1 4640 0
 6818 0078 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 6819 007a 012B     		cmp	r3, #1
 6820 007c 4BD1     		bne	.L441
4641:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4642:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* The task should not have been on an event list. */
4643:../../../FreeRTOS_9_0/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 6821              		.loc 1 4643 0
 6822 007e 7B6A     		ldr	r3, [r7, #36]
 6823 0080 9B6A     		ldr	r3, [r3, #40]
 6824 0082 002B     		cmp	r3, #0
 6825 0084 09D0     		beq	.L442
 6826              	.LBB183:
 6827              	.LBB184:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6828              		.loc 2 237 0 discriminator 1
 6829              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6830 0086 4FF05003 			mov r3, #80												
 6831 008a 83F31188 		msr basepri, r3											
 6832 008e BFF36F8F 		isb														
 6833 0092 BFF34F8F 		dsb														
 6834              	
 6835              	@ 0 "" 2
 6836              		.thumb
 6837 0096 FB60     		str	r3, [r7, #12]
 6838              	.L443:
 6839              	.LBE184:
 6840              	.LBE183:
 6841              		.loc 1 4643 0 discriminator 2
 6842 0098 FEE7     		b	.L443
ARM GAS  /tmp/ccIgarPJ.s 			page 206


 6843              	.L442:
4644:../../../FreeRTOS_9_0/Source/tasks.c **** 
4645:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 6844              		.loc 1 4645 0
 6845 009a 234B     		ldr	r3, .L448
 6846 009c 1B68     		ldr	r3, [r3]
 6847 009e 002B     		cmp	r3, #0
 6848 00a0 22D1     		bne	.L444
4646:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4647:../../../FreeRTOS_9_0/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 6849              		.loc 1 4647 0
 6850 00a2 7B6A     		ldr	r3, [r7, #36]
 6851 00a4 0433     		adds	r3, r3, #4
 6852 00a6 1846     		mov	r0, r3
 6853 00a8 FFF7FEFF 		bl	uxListRemove
4648:../../../FreeRTOS_9_0/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6854              		.loc 1 4648 0
 6855 00ac 7B6A     		ldr	r3, [r7, #36]
 6856 00ae 1846     		mov	r0, r3
 6857 00b0 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStartReady
 6858 00b4 7B6A     		ldr	r3, [r7, #36]
 6859 00b6 DB6A     		ldr	r3, [r3, #44]
 6860 00b8 1A46     		mov	r2, r3
 6861 00ba 0123     		movs	r3, #1
 6862 00bc 03FA02F2 		lsl	r2, r3, r2
 6863 00c0 1A4B     		ldr	r3, .L448+4
 6864 00c2 1B68     		ldr	r3, [r3]
 6865 00c4 1343     		orrs	r3, r3, r2
 6866 00c6 194A     		ldr	r2, .L448+4
 6867 00c8 1360     		str	r3, [r2]
 6868 00ca 7B6A     		ldr	r3, [r7, #36]
 6869 00cc DA6A     		ldr	r2, [r3, #44]
 6870 00ce 1346     		mov	r3, r2
 6871 00d0 9B00     		lsls	r3, r3, #2
 6872 00d2 1344     		add	r3, r3, r2
 6873 00d4 9B00     		lsls	r3, r3, #2
 6874 00d6 164A     		ldr	r2, .L448+8
 6875 00d8 1A44     		add	r2, r2, r3
 6876 00da 7B6A     		ldr	r3, [r7, #36]
 6877 00dc 0433     		adds	r3, r3, #4
 6878 00de 1046     		mov	r0, r2
 6879 00e0 1946     		mov	r1, r3
 6880 00e2 FFF7FEFF 		bl	vListInsertEnd
 6881 00e6 05E0     		b	.L445
 6882              	.L444:
4649:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4650:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
4651:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4652:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4653:../../../FreeRTOS_9_0/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4654:../../../FreeRTOS_9_0/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 6883              		.loc 1 4654 0
 6884 00e8 7B6A     		ldr	r3, [r7, #36]
 6885 00ea 1833     		adds	r3, r3, #24
 6886 00ec 1148     		ldr	r0, .L448+12
 6887 00ee 1946     		mov	r1, r3
 6888 00f0 FFF7FEFF 		bl	vListInsertEnd
ARM GAS  /tmp/ccIgarPJ.s 			page 207


 6889              	.L445:
4655:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4656:../../../FreeRTOS_9_0/Source/tasks.c **** 
4657:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 6890              		.loc 1 4657 0
 6891 00f4 7B6A     		ldr	r3, [r7, #36]
 6892 00f6 DA6A     		ldr	r2, [r3, #44]
 6893 00f8 0F4B     		ldr	r3, .L448+16
 6894 00fa 1B68     		ldr	r3, [r3]
 6895 00fc DB6A     		ldr	r3, [r3, #44]
 6896 00fe 9A42     		cmp	r2, r3
 6897 0100 09D9     		bls	.L441
4658:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4659:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* The notified task has a priority above the currently
4660:../../../FreeRTOS_9_0/Source/tasks.c **** 					executing task so a yield is required. */
4661:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 6898              		.loc 1 4661 0
 6899 0102 3B68     		ldr	r3, [r7]
 6900 0104 002B     		cmp	r3, #0
 6901 0106 03D0     		beq	.L446
4662:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
4663:../../../FreeRTOS_9_0/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 6902              		.loc 1 4663 0
 6903 0108 3B68     		ldr	r3, [r7]
 6904 010a 0122     		movs	r2, #1
 6905 010c 1A60     		str	r2, [r3]
 6906 010e 02E0     		b	.L441
 6907              	.L446:
4664:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
4665:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
4666:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
4667:../../../FreeRTOS_9_0/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4668:../../../FreeRTOS_9_0/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter in an ISR
4669:../../../FreeRTOS_9_0/Source/tasks.c **** 						safe FreeRTOS function. */
4670:../../../FreeRTOS_9_0/Source/tasks.c **** 						xYieldPending = pdTRUE;
 6908              		.loc 1 4670 0
 6909 0110 0A4B     		ldr	r3, .L448+20
 6910 0112 0122     		movs	r2, #1
 6911 0114 1A60     		str	r2, [r3]
 6912              	.L441:
 6913 0116 3B6A     		ldr	r3, [r7, #32]
 6914 0118 BB60     		str	r3, [r7, #8]
 6915              	.LBB185:
 6916              	.LBB186:
 6917              		.loc 2 271 0
 6918 011a BB68     		ldr	r3, [r7, #8]
 6919              	@ 271 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6920 011c 83F31188 			msr basepri, r3	
 6921              	@ 0 "" 2
 6922              		.thumb
 6923              	.LBE186:
 6924              	.LBE185:
4671:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
4672:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4673:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
4674:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4675:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccIgarPJ.s 			page 208


4676:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4677:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4678:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4679:../../../FreeRTOS_9_0/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4680:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 6925              		.loc 1 4680 0
 6926 0120 2837     		adds	r7, r7, #40
 6927              	.LCFI273:
 6928              		.cfi_def_cfa_offset 8
 6929 0122 BD46     		mov	sp, r7
 6930              	.LCFI274:
 6931              		.cfi_def_cfa_register 13
 6932              		@ sp needed
 6933 0124 80BD     		pop	{r7, pc}
 6934              	.L449:
 6935 0126 00BF     		.align	2
 6936              	.L448:
 6937 0128 00000000 		.word	uxSchedulerSuspended
 6938 012c 00000000 		.word	uxTopReadyPriority
 6939 0130 00000000 		.word	pxReadyTasksLists
 6940 0134 00000000 		.word	xPendingReadyList
 6941 0138 00000000 		.word	pxCurrentTCB
 6942 013c 00000000 		.word	xYieldPending
 6943              		.cfi_endproc
 6944              	.LFE58:
 6946              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 6947              		.align	2
 6948              		.global	xTaskNotifyStateClear
 6949              		.thumb
 6950              		.thumb_func
 6952              	xTaskNotifyStateClear:
 6953              	.LFB59:
4681:../../../FreeRTOS_9_0/Source/tasks.c **** 
4682:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4683:../../../FreeRTOS_9_0/Source/tasks.c **** 
4684:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
4685:../../../FreeRTOS_9_0/Source/tasks.c **** 
4686:../../../FreeRTOS_9_0/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4687:../../../FreeRTOS_9_0/Source/tasks.c **** 
4688:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4689:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 6954              		.loc 1 4689 0
 6955              		.cfi_startproc
 6956              		@ args = 0, pretend = 0, frame = 16
 6957              		@ frame_needed = 1, uses_anonymous_args = 0
 6958 0000 80B5     		push	{r7, lr}
 6959              	.LCFI275:
 6960              		.cfi_def_cfa_offset 8
 6961              		.cfi_offset 7, -8
 6962              		.cfi_offset 14, -4
 6963 0002 84B0     		sub	sp, sp, #16
 6964              	.LCFI276:
 6965              		.cfi_def_cfa_offset 24
 6966 0004 00AF     		add	r7, sp, #0
 6967              	.LCFI277:
 6968              		.cfi_def_cfa_register 7
 6969 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/ccIgarPJ.s 			page 209


4690:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxTCB;
4691:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xReturn;
4692:../../../FreeRTOS_9_0/Source/tasks.c **** 
4693:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4694:../../../FreeRTOS_9_0/Source/tasks.c **** 		its notification state cleared. */
4695:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 6970              		.loc 1 4695 0
 6971 0008 7B68     		ldr	r3, [r7, #4]
 6972 000a 002B     		cmp	r3, #0
 6973 000c 02D1     		bne	.L451
 6974              		.loc 1 4695 0 is_stmt 0 discriminator 1
 6975 000e 0E4B     		ldr	r3, .L456
 6976 0010 1B68     		ldr	r3, [r3]
 6977 0012 00E0     		b	.L452
 6978              	.L451:
 6979              		.loc 1 4695 0 discriminator 2
 6980 0014 7B68     		ldr	r3, [r7, #4]
 6981              	.L452:
 6982              		.loc 1 4695 0 discriminator 4
 6983 0016 BB60     		str	r3, [r7, #8]
4696:../../../FreeRTOS_9_0/Source/tasks.c **** 
4697:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskENTER_CRITICAL();
 6984              		.loc 1 4697 0 is_stmt 1 discriminator 4
 6985 0018 FFF7FEFF 		bl	vPortEnterCritical
4698:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4699:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 6986              		.loc 1 4699 0 discriminator 4
 6987 001c BB68     		ldr	r3, [r7, #8]
 6988 001e 93F85830 		ldrb	r3, [r3, #88]
 6989 0022 DBB2     		uxtb	r3, r3
 6990 0024 022B     		cmp	r3, #2
 6991 0026 06D1     		bne	.L453
4700:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4701:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 6992              		.loc 1 4701 0
 6993 0028 BB68     		ldr	r3, [r7, #8]
 6994 002a 0022     		movs	r2, #0
 6995 002c 83F85820 		strb	r2, [r3, #88]
4702:../../../FreeRTOS_9_0/Source/tasks.c **** 				xReturn = pdPASS;
 6996              		.loc 1 4702 0
 6997 0030 0123     		movs	r3, #1
 6998 0032 FB60     		str	r3, [r7, #12]
 6999 0034 01E0     		b	.L454
 7000              	.L453:
4703:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4704:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
4705:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4706:../../../FreeRTOS_9_0/Source/tasks.c **** 				xReturn = pdFAIL;
 7001              		.loc 1 4706 0
 7002 0036 0023     		movs	r3, #0
 7003 0038 FB60     		str	r3, [r7, #12]
 7004              	.L454:
4707:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4708:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4709:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskEXIT_CRITICAL();
 7005              		.loc 1 4709 0
 7006 003a FFF7FEFF 		bl	vPortExitCritical
ARM GAS  /tmp/ccIgarPJ.s 			page 210


4710:../../../FreeRTOS_9_0/Source/tasks.c **** 
4711:../../../FreeRTOS_9_0/Source/tasks.c **** 		return xReturn;
 7007              		.loc 1 4711 0
 7008 003e FB68     		ldr	r3, [r7, #12]
4712:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 7009              		.loc 1 4712 0
 7010 0040 1846     		mov	r0, r3
 7011 0042 1037     		adds	r7, r7, #16
 7012              	.LCFI278:
 7013              		.cfi_def_cfa_offset 8
 7014 0044 BD46     		mov	sp, r7
 7015              	.LCFI279:
 7016              		.cfi_def_cfa_register 13
 7017              		@ sp needed
 7018 0046 80BD     		pop	{r7, pc}
 7019              	.L457:
 7020              		.align	2
 7021              	.L456:
 7022 0048 00000000 		.word	pxCurrentTCB
 7023              		.cfi_endproc
 7024              	.LFE59:
 7026              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 7027              		.align	2
 7028              		.thumb
 7029              		.thumb_func
 7031              	prvAddCurrentTaskToDelayedList:
 7032              	.LFB60:
4713:../../../FreeRTOS_9_0/Source/tasks.c **** 
4714:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4715:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
4716:../../../FreeRTOS_9_0/Source/tasks.c **** 
4717:../../../FreeRTOS_9_0/Source/tasks.c **** 
4718:../../../FreeRTOS_9_0/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
4719:../../../FreeRTOS_9_0/Source/tasks.c **** {
 7033              		.loc 1 4719 0
 7034              		.cfi_startproc
 7035              		@ args = 0, pretend = 0, frame = 16
 7036              		@ frame_needed = 1, uses_anonymous_args = 0
 7037 0000 80B5     		push	{r7, lr}
 7038              	.LCFI280:
 7039              		.cfi_def_cfa_offset 8
 7040              		.cfi_offset 7, -8
 7041              		.cfi_offset 14, -4
 7042 0002 84B0     		sub	sp, sp, #16
 7043              	.LCFI281:
 7044              		.cfi_def_cfa_offset 24
 7045 0004 00AF     		add	r7, sp, #0
 7046              	.LCFI282:
 7047              		.cfi_def_cfa_register 7
 7048 0006 7860     		str	r0, [r7, #4]
 7049 0008 3960     		str	r1, [r7]
4720:../../../FreeRTOS_9_0/Source/tasks.c **** TickType_t xTimeToWake;
4721:../../../FreeRTOS_9_0/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 7050              		.loc 1 4721 0
 7051 000a 314B     		ldr	r3, .L463
 7052 000c 1B68     		ldr	r3, [r3]
 7053 000e FB60     		str	r3, [r7, #12]
ARM GAS  /tmp/ccIgarPJ.s 			page 211


4722:../../../FreeRTOS_9_0/Source/tasks.c **** 
4723:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
4724:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
4725:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
4726:../../../FreeRTOS_9_0/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
4727:../../../FreeRTOS_9_0/Source/tasks.c **** 		when the task leaves the Blocked state. */
4728:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
4729:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
4730:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
4731:../../../FreeRTOS_9_0/Source/tasks.c **** 
4732:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
4733:../../../FreeRTOS_9_0/Source/tasks.c **** 	as the same list item is used for both lists. */
4734:../../../FreeRTOS_9_0/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 7054              		.loc 1 4734 0
 7055 0010 304B     		ldr	r3, .L463+4
 7056 0012 1B68     		ldr	r3, [r3]
 7057 0014 0433     		adds	r3, r3, #4
 7058 0016 1846     		mov	r0, r3
 7059 0018 FFF7FEFF 		bl	uxListRemove
 7060 001c 0346     		mov	r3, r0
 7061 001e 002B     		cmp	r3, #0
 7062 0020 0BD1     		bne	.L459
4735:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
4736:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
4737:../../../FreeRTOS_9_0/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
4738:../../../FreeRTOS_9_0/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 7063              		.loc 1 4738 0
 7064 0022 2C4B     		ldr	r3, .L463+4
 7065 0024 1B68     		ldr	r3, [r3]
 7066 0026 DB6A     		ldr	r3, [r3, #44]
 7067 0028 1A46     		mov	r2, r3
 7068 002a 0123     		movs	r3, #1
 7069 002c 9340     		lsls	r3, r3, r2
 7070 002e DA43     		mvns	r2, r3
 7071 0030 294B     		ldr	r3, .L463+8
 7072 0032 1B68     		ldr	r3, [r3]
 7073 0034 1340     		ands	r3, r3, r2
 7074 0036 284A     		ldr	r2, .L463+8
 7075 0038 1360     		str	r3, [r2]
 7076              	.L459:
4739:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
4740:../../../FreeRTOS_9_0/Source/tasks.c **** 	else
4741:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
4742:../../../FreeRTOS_9_0/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
4743:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
4744:../../../FreeRTOS_9_0/Source/tasks.c **** 
4745:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
4746:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
4747:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 7077              		.loc 1 4747 0
 7078 003a 7B68     		ldr	r3, [r7, #4]
 7079 003c B3F1FF3F 		cmp	r3, #-1
 7080 0040 10D1     		bne	.L460
 7081              		.loc 1 4747 0 is_stmt 0 discriminator 1
 7082 0042 3B68     		ldr	r3, [r7]
 7083 0044 002B     		cmp	r3, #0
 7084 0046 0DD0     		beq	.L460
ARM GAS  /tmp/ccIgarPJ.s 			page 212


4748:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4749:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
4750:../../../FreeRTOS_9_0/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
4751:../../../FreeRTOS_9_0/Source/tasks.c **** 			indefinitely. */
4752:../../../FreeRTOS_9_0/Source/tasks.c **** 			traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 7085              		.loc 1 4752 0 is_stmt 1
 7086 0048 224B     		ldr	r3, .L463+4
 7087 004a 1B68     		ldr	r3, [r3]
 7088 004c 1846     		mov	r0, r3
 7089 004e 1B21     		movs	r1, #27
 7090 0050 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStopReady
4753:../../../FreeRTOS_9_0/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 7091              		.loc 1 4753 0
 7092 0054 1F4B     		ldr	r3, .L463+4
 7093 0056 1B68     		ldr	r3, [r3]
 7094 0058 0433     		adds	r3, r3, #4
 7095 005a 2048     		ldr	r0, .L463+12
 7096 005c 1946     		mov	r1, r3
 7097 005e FFF7FEFF 		bl	vListInsertEnd
 7098 0062 32E0     		b	.L458
 7099              	.L460:
4754:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4755:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
4756:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4757:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
4758:../../../FreeRTOS_9_0/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
4759:../../../FreeRTOS_9_0/Source/tasks.c **** 			kernel will manage it correctly. */
4760:../../../FreeRTOS_9_0/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 7100              		.loc 1 4760 0
 7101 0064 FA68     		ldr	r2, [r7, #12]
 7102 0066 7B68     		ldr	r3, [r7, #4]
 7103 0068 1344     		add	r3, r3, r2
 7104 006a BB60     		str	r3, [r7, #8]
4761:../../../FreeRTOS_9_0/Source/tasks.c **** 
4762:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
4763:../../../FreeRTOS_9_0/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 7105              		.loc 1 4763 0
 7106 006c 194B     		ldr	r3, .L463+4
 7107 006e 1B68     		ldr	r3, [r3]
 7108 0070 BA68     		ldr	r2, [r7, #8]
 7109 0072 5A60     		str	r2, [r3, #4]
4764:../../../FreeRTOS_9_0/Source/tasks.c **** 
4765:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 7110              		.loc 1 4765 0
 7111 0074 BA68     		ldr	r2, [r7, #8]
 7112 0076 FB68     		ldr	r3, [r7, #12]
 7113 0078 9A42     		cmp	r2, r3
 7114 007a 0FD2     		bcs	.L462
4766:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4767:../../../FreeRTOS_9_0/Source/tasks.c ****                 traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 7115              		.loc 1 4767 0
 7116 007c 154B     		ldr	r3, .L463+4
 7117 007e 1B68     		ldr	r3, [r3]
 7118 0080 1846     		mov	r0, r3
 7119 0082 0421     		movs	r1, #4
 7120 0084 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStopReady
4768:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
ARM GAS  /tmp/ccIgarPJ.s 			page 213


4769:../../../FreeRTOS_9_0/Source/tasks.c **** 				list. */
4770:../../../FreeRTOS_9_0/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 7121              		.loc 1 4770 0
 7122 0088 154B     		ldr	r3, .L463+16
 7123 008a 1A68     		ldr	r2, [r3]
 7124 008c 114B     		ldr	r3, .L463+4
 7125 008e 1B68     		ldr	r3, [r3]
 7126 0090 0433     		adds	r3, r3, #4
 7127 0092 1046     		mov	r0, r2
 7128 0094 1946     		mov	r1, r3
 7129 0096 FFF7FEFF 		bl	vListInsert
 7130 009a 16E0     		b	.L458
 7131              	.L462:
4771:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4772:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
4773:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4774:../../../FreeRTOS_9_0/Source/tasks.c ****                 traceMOVED_TASK_TO_DELAYED_LIST();
 7132              		.loc 1 4774 0
 7133 009c 0D4B     		ldr	r3, .L463+4
 7134 009e 1B68     		ldr	r3, [r3]
 7135 00a0 1846     		mov	r0, r3
 7136 00a2 0421     		movs	r1, #4
 7137 00a4 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStopReady
4775:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
4776:../../../FreeRTOS_9_0/Source/tasks.c **** 				is used. */
4777:../../../FreeRTOS_9_0/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 7138              		.loc 1 4777 0
 7139 00a8 0E4B     		ldr	r3, .L463+20
 7140 00aa 1A68     		ldr	r2, [r3]
 7141 00ac 094B     		ldr	r3, .L463+4
 7142 00ae 1B68     		ldr	r3, [r3]
 7143 00b0 0433     		adds	r3, r3, #4
 7144 00b2 1046     		mov	r0, r2
 7145 00b4 1946     		mov	r1, r3
 7146 00b6 FFF7FEFF 		bl	vListInsert
4778:../../../FreeRTOS_9_0/Source/tasks.c **** 
4779:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
4780:../../../FreeRTOS_9_0/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
4781:../../../FreeRTOS_9_0/Source/tasks.c **** 				needs to be updated too. */
4782:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
 7147              		.loc 1 4782 0
 7148 00ba 0B4B     		ldr	r3, .L463+24
 7149 00bc 1B68     		ldr	r3, [r3]
 7150 00be BA68     		ldr	r2, [r7, #8]
 7151 00c0 9A42     		cmp	r2, r3
 7152 00c2 02D2     		bcs	.L458
4783:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4784:../../../FreeRTOS_9_0/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
 7153              		.loc 1 4784 0
 7154 00c4 084A     		ldr	r2, .L463+24
 7155 00c6 BB68     		ldr	r3, [r7, #8]
 7156 00c8 1360     		str	r3, [r2]
 7157              	.L458:
4785:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4786:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
4787:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4788:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccIgarPJ.s 			page 214


4789:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4790:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4791:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4792:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
4793:../../../FreeRTOS_9_0/Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
4794:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
4795:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
4796:../../../FreeRTOS_9_0/Source/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
4797:../../../FreeRTOS_9_0/Source/tasks.c **** 		will manage it correctly. */
4798:../../../FreeRTOS_9_0/Source/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
4799:../../../FreeRTOS_9_0/Source/tasks.c **** 
4800:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* The list item will be inserted in wake time order. */
4801:../../../FreeRTOS_9_0/Source/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
4802:../../../FreeRTOS_9_0/Source/tasks.c **** 
4803:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xTimeToWake < xConstTickCount )
4804:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4805:../../../FreeRTOS_9_0/Source/tasks.c ****             traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
4806:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
4807:../../../FreeRTOS_9_0/Source/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4808:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4809:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
4810:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4811:../../../FreeRTOS_9_0/Source/tasks.c ****             traceMOVED_TASK_TO_DELAYED_LIST();
4812:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
4813:../../../FreeRTOS_9_0/Source/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4814:../../../FreeRTOS_9_0/Source/tasks.c **** 
4815:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
4816:../../../FreeRTOS_9_0/Source/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
4817:../../../FreeRTOS_9_0/Source/tasks.c **** 			too. */
4818:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
4819:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4820:../../../FreeRTOS_9_0/Source/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
4821:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4822:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
4823:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4824:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4825:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4826:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4827:../../../FreeRTOS_9_0/Source/tasks.c **** 
4828:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
4829:../../../FreeRTOS_9_0/Source/tasks.c **** 		( void ) xCanBlockIndefinitely;
4830:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
4831:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
4832:../../../FreeRTOS_9_0/Source/tasks.c **** }
 7158              		.loc 1 4832 0
 7159 00ca 1037     		adds	r7, r7, #16
 7160              	.LCFI283:
 7161              		.cfi_def_cfa_offset 8
 7162 00cc BD46     		mov	sp, r7
 7163              	.LCFI284:
 7164              		.cfi_def_cfa_register 13
 7165              		@ sp needed
 7166 00ce 80BD     		pop	{r7, pc}
 7167              	.L464:
 7168              		.align	2
 7169              	.L463:
 7170 00d0 00000000 		.word	xTickCount
ARM GAS  /tmp/ccIgarPJ.s 			page 215


 7171 00d4 00000000 		.word	pxCurrentTCB
 7172 00d8 00000000 		.word	uxTopReadyPriority
 7173 00dc 00000000 		.word	xSuspendedTaskList
 7174 00e0 00000000 		.word	pxOverflowDelayedTaskList
 7175 00e4 00000000 		.word	pxDelayedTaskList
 7176 00e8 00000000 		.word	xNextTaskUnblockTime
 7177              		.cfi_endproc
 7178              	.LFE60:
 7180              		.text
 7181              	.Letext0:
 7182              		.file 3 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h"
 7183              		.file 4 "/usr/arm-none-eabi/include/machine/_default_types.h"
 7184              		.file 5 "/usr/arm-none-eabi/include/sys/_stdint.h"
 7185              		.file 6 "../../../FreeRTOS_9_0/Source/include/projdefs.h"
 7186              		.file 7 "../../../FreeRTOS_9_0/Source/include/list.h"
 7187              		.file 8 "../../../FreeRTOS_9_0/Source/include/task.h"
ARM GAS  /tmp/ccIgarPJ.s 			page 216


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tasks.c
     /tmp/ccIgarPJ.s:25     .bss.pxCurrentTCB:0000000000000000 pxCurrentTCB
     /tmp/ccIgarPJ.s:22     .bss.pxCurrentTCB:0000000000000000 $d
     /tmp/ccIgarPJ.s:28     .bss.pxReadyTasksLists:0000000000000000 $d
     /tmp/ccIgarPJ.s:31     .bss.pxReadyTasksLists:0000000000000000 pxReadyTasksLists
     /tmp/ccIgarPJ.s:34     .bss.xDelayedTaskList1:0000000000000000 $d
     /tmp/ccIgarPJ.s:37     .bss.xDelayedTaskList1:0000000000000000 xDelayedTaskList1
     /tmp/ccIgarPJ.s:40     .bss.xDelayedTaskList2:0000000000000000 $d
     /tmp/ccIgarPJ.s:43     .bss.xDelayedTaskList2:0000000000000000 xDelayedTaskList2
     /tmp/ccIgarPJ.s:46     .bss.pxDelayedTaskList:0000000000000000 $d
     /tmp/ccIgarPJ.s:49     .bss.pxDelayedTaskList:0000000000000000 pxDelayedTaskList
     /tmp/ccIgarPJ.s:52     .bss.pxOverflowDelayedTaskList:0000000000000000 $d
     /tmp/ccIgarPJ.s:55     .bss.pxOverflowDelayedTaskList:0000000000000000 pxOverflowDelayedTaskList
     /tmp/ccIgarPJ.s:58     .bss.xPendingReadyList:0000000000000000 $d
     /tmp/ccIgarPJ.s:61     .bss.xPendingReadyList:0000000000000000 xPendingReadyList
     /tmp/ccIgarPJ.s:64     .bss.xTasksWaitingTermination:0000000000000000 $d
     /tmp/ccIgarPJ.s:67     .bss.xTasksWaitingTermination:0000000000000000 xTasksWaitingTermination
     /tmp/ccIgarPJ.s:70     .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 $d
     /tmp/ccIgarPJ.s:73     .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 uxDeletedTasksWaitingCleanUp
     /tmp/ccIgarPJ.s:76     .bss.xSuspendedTaskList:0000000000000000 $d
     /tmp/ccIgarPJ.s:79     .bss.xSuspendedTaskList:0000000000000000 xSuspendedTaskList
     /tmp/ccIgarPJ.s:82     .bss.uxCurrentNumberOfTasks:0000000000000000 $d
     /tmp/ccIgarPJ.s:85     .bss.uxCurrentNumberOfTasks:0000000000000000 uxCurrentNumberOfTasks
     /tmp/ccIgarPJ.s:88     .bss.xTickCount:0000000000000000 $d
     /tmp/ccIgarPJ.s:91     .bss.xTickCount:0000000000000000 xTickCount
     /tmp/ccIgarPJ.s:94     .bss.uxTopReadyPriority:0000000000000000 $d
     /tmp/ccIgarPJ.s:97     .bss.uxTopReadyPriority:0000000000000000 uxTopReadyPriority
     /tmp/ccIgarPJ.s:100    .bss.xSchedulerRunning:0000000000000000 $d
     /tmp/ccIgarPJ.s:103    .bss.xSchedulerRunning:0000000000000000 xSchedulerRunning
     /tmp/ccIgarPJ.s:106    .bss.uxPendedTicks:0000000000000000 $d
     /tmp/ccIgarPJ.s:109    .bss.uxPendedTicks:0000000000000000 uxPendedTicks
     /tmp/ccIgarPJ.s:112    .bss.xYieldPending:0000000000000000 $d
     /tmp/ccIgarPJ.s:115    .bss.xYieldPending:0000000000000000 xYieldPending
     /tmp/ccIgarPJ.s:118    .bss.xNumOfOverflows:0000000000000000 $d
     /tmp/ccIgarPJ.s:121    .bss.xNumOfOverflows:0000000000000000 xNumOfOverflows
     /tmp/ccIgarPJ.s:124    .bss.uxTaskNumber:0000000000000000 $d
     /tmp/ccIgarPJ.s:127    .bss.uxTaskNumber:0000000000000000 uxTaskNumber
     /tmp/ccIgarPJ.s:130    .bss.xNextTaskUnblockTime:0000000000000000 $d
     /tmp/ccIgarPJ.s:133    .bss.xNextTaskUnblockTime:0000000000000000 xNextTaskUnblockTime
     /tmp/ccIgarPJ.s:136    .bss.xIdleTaskHandle:0000000000000000 $d
     /tmp/ccIgarPJ.s:139    .bss.xIdleTaskHandle:0000000000000000 xIdleTaskHandle
     /tmp/ccIgarPJ.s:142    .bss.uxSchedulerSuspended:0000000000000000 $d
     /tmp/ccIgarPJ.s:145    .bss.uxSchedulerSuspended:0000000000000000 uxSchedulerSuspended
     /tmp/ccIgarPJ.s:148    .text.xTaskCreate:0000000000000000 $t
     /tmp/ccIgarPJ.s:153    .text.xTaskCreate:0000000000000000 xTaskCreate
     /tmp/ccIgarPJ.s:261    .text.prvInitialiseNewTask:0000000000000000 prvInitialiseNewTask
     /tmp/ccIgarPJ.s:453    .text.prvAddNewTaskToReadyList:0000000000000000 prvAddNewTaskToReadyList
     /tmp/ccIgarPJ.s:257    .text.prvInitialiseNewTask:0000000000000000 $t
     /tmp/ccIgarPJ.s:449    .text.prvAddNewTaskToReadyList:0000000000000000 $t
     /tmp/ccIgarPJ.s:4369   .text.prvInitialiseTaskLists:0000000000000000 prvInitialiseTaskLists
     /tmp/ccIgarPJ.s:620    .text.prvAddNewTaskToReadyList:0000000000000100 $d
     /tmp/ccIgarPJ.s:631    .text.vTaskDelete:0000000000000000 $t
     /tmp/ccIgarPJ.s:636    .text.vTaskDelete:0000000000000000 vTaskDelete
     /tmp/ccIgarPJ.s:4905   .text.prvDeleteTCB:0000000000000000 prvDeleteTCB
     /tmp/ccIgarPJ.s:4948   .text.prvResetNextTaskUnblockTime:0000000000000000 prvResetNextTaskUnblockTime
     /tmp/ccIgarPJ.s:820    .text.vTaskDelete:0000000000000104 $d
ARM GAS  /tmp/ccIgarPJ.s 			page 217


     /tmp/ccIgarPJ.s:834    .text.vTaskDelay:0000000000000000 $t
     /tmp/ccIgarPJ.s:839    .text.vTaskDelay:0000000000000000 vTaskDelay
     /tmp/ccIgarPJ.s:2344   .text.vTaskSuspendAll:0000000000000000 vTaskSuspendAll
     /tmp/ccIgarPJ.s:7031   .text.prvAddCurrentTaskToDelayedList:0000000000000000 prvAddCurrentTaskToDelayedList
     /tmp/ccIgarPJ.s:2387   .text.xTaskResumeAll:0000000000000000 xTaskResumeAll
     /tmp/ccIgarPJ.s:929    .text.vTaskDelay:0000000000000064 $d
     /tmp/ccIgarPJ.s:935    .text.eTaskGetState:0000000000000000 $t
     /tmp/ccIgarPJ.s:940    .text.eTaskGetState:0000000000000000 eTaskGetState
     /tmp/ccIgarPJ.s:1074   .text.eTaskGetState:000000000000009c $d
     /tmp/ccIgarPJ.s:1083   .text.uxTaskPriorityGet:0000000000000000 $t
     /tmp/ccIgarPJ.s:1088   .text.uxTaskPriorityGet:0000000000000000 uxTaskPriorityGet
     /tmp/ccIgarPJ.s:1143   .text.uxTaskPriorityGet:0000000000000030 $d
     /tmp/ccIgarPJ.s:1148   .text.uxTaskPriorityGetFromISR:0000000000000000 $t
     /tmp/ccIgarPJ.s:1153   .text.uxTaskPriorityGetFromISR:0000000000000000 uxTaskPriorityGetFromISR
     /tmp/ccIgarPJ.s:1238   .text.uxTaskPriorityGetFromISR:0000000000000054 $d
     /tmp/ccIgarPJ.s:1243   .text.vTaskPrioritySet:0000000000000000 $t
     /tmp/ccIgarPJ.s:1248   .text.vTaskPrioritySet:0000000000000000 vTaskPrioritySet
     /tmp/ccIgarPJ.s:1508   .text.vTaskPrioritySet:0000000000000180 $d
     /tmp/ccIgarPJ.s:1516   .text.vTaskSuspend:0000000000000000 $t
     /tmp/ccIgarPJ.s:1521   .text.vTaskSuspend:0000000000000000 vTaskSuspend
     /tmp/ccIgarPJ.s:3279   .text.vTaskSwitchContext:0000000000000000 vTaskSwitchContext
     /tmp/ccIgarPJ.s:1707   .text.vTaskSuspend:0000000000000108 $d
     /tmp/ccIgarPJ.s:1719   .text.prvTaskIsTaskSuspended:0000000000000000 $t
     /tmp/ccIgarPJ.s:1723   .text.prvTaskIsTaskSuspended:0000000000000000 prvTaskIsTaskSuspended
     /tmp/ccIgarPJ.s:1829   .text.prvTaskIsTaskSuspended:000000000000006c $d
     /tmp/ccIgarPJ.s:1835   .text.vTaskResume:0000000000000000 $t
     /tmp/ccIgarPJ.s:1840   .text.vTaskResume:0000000000000000 vTaskResume
     /tmp/ccIgarPJ.s:1976   .text.vTaskResume:00000000000000c4 $d
     /tmp/ccIgarPJ.s:1984   .text.xTaskResumeFromISR:0000000000000000 $t
     /tmp/ccIgarPJ.s:1989   .text.xTaskResumeFromISR:0000000000000000 xTaskResumeFromISR
     /tmp/ccIgarPJ.s:2156   .text.xTaskResumeFromISR:00000000000000e8 $d
     /tmp/ccIgarPJ.s:2165   .rodata:0000000000000000 $d
     /tmp/ccIgarPJ.s:2169   .text.vTaskStartScheduler:0000000000000000 $t
     /tmp/ccIgarPJ.s:2174   .text.vTaskStartScheduler:0000000000000000 vTaskStartScheduler
     /tmp/ccIgarPJ.s:2270   .text.vTaskStartScheduler:0000000000000070 $d
     /tmp/ccIgarPJ.s:4316   .text.prvIdleTask:0000000000000000 prvIdleTask
     /tmp/ccIgarPJ.s:2280   .text.vTaskEndScheduler:0000000000000000 $t
     /tmp/ccIgarPJ.s:2285   .text.vTaskEndScheduler:0000000000000000 vTaskEndScheduler
     /tmp/ccIgarPJ.s:2334   .text.vTaskEndScheduler:0000000000000028 $d
     /tmp/ccIgarPJ.s:2339   .text.vTaskSuspendAll:0000000000000000 $t
     /tmp/ccIgarPJ.s:2377   .text.vTaskSuspendAll:0000000000000018 $d
     /tmp/ccIgarPJ.s:2382   .text.xTaskResumeAll:0000000000000000 $t
     /tmp/ccIgarPJ.s:3015   .text.xTaskIncrementTick:0000000000000000 xTaskIncrementTick
     /tmp/ccIgarPJ.s:2592   .text.xTaskResumeAll:0000000000000120 $d
     /tmp/ccIgarPJ.s:2605   .text.xTaskGetTickCount:0000000000000000 $t
     /tmp/ccIgarPJ.s:2610   .text.xTaskGetTickCount:0000000000000000 xTaskGetTickCount
     /tmp/ccIgarPJ.s:2650   .text.xTaskGetTickCount:000000000000001c $d
     /tmp/ccIgarPJ.s:2655   .text.xTaskGetTickCountFromISR:0000000000000000 $t
     /tmp/ccIgarPJ.s:2660   .text.xTaskGetTickCountFromISR:0000000000000000 xTaskGetTickCountFromISR
     /tmp/ccIgarPJ.s:2701   .text.xTaskGetTickCountFromISR:0000000000000020 $d
     /tmp/ccIgarPJ.s:2706   .text.uxTaskGetNumberOfTasks:0000000000000000 $t
     /tmp/ccIgarPJ.s:2711   .text.uxTaskGetNumberOfTasks:0000000000000000 uxTaskGetNumberOfTasks
     /tmp/ccIgarPJ.s:2742   .text.uxTaskGetNumberOfTasks:0000000000000014 $d
     /tmp/ccIgarPJ.s:2747   .text.pcTaskGetName:0000000000000000 $t
     /tmp/ccIgarPJ.s:2752   .text.pcTaskGetName:0000000000000000 pcTaskGetName
     /tmp/ccIgarPJ.s:2826   .text.pcTaskGetName:0000000000000044 $d
     /tmp/ccIgarPJ.s:2831   .text.uxTaskGetSystemState:0000000000000000 $t
ARM GAS  /tmp/ccIgarPJ.s 			page 218


     /tmp/ccIgarPJ.s:2836   .text.uxTaskGetSystemState:0000000000000000 uxTaskGetSystemState
     /tmp/ccIgarPJ.s:4708   .text.prvListTasksWithinSingleList:0000000000000000 prvListTasksWithinSingleList
     /tmp/ccIgarPJ.s:3000   .text.uxTaskGetSystemState:0000000000000108 $d
     /tmp/ccIgarPJ.s:3010   .text.xTaskIncrementTick:0000000000000000 $t
     /tmp/ccIgarPJ.s:3259   .text.xTaskIncrementTick:0000000000000158 $d
     /tmp/ccIgarPJ.s:3274   .text.vTaskSwitchContext:0000000000000000 $t
     /tmp/ccIgarPJ.s:3429   .text.vTaskSwitchContext:00000000000000c0 $d
     /tmp/ccIgarPJ.s:3439   .text.vTaskPlaceOnEventList:0000000000000000 $t
     /tmp/ccIgarPJ.s:3444   .text.vTaskPlaceOnEventList:0000000000000000 vTaskPlaceOnEventList
     /tmp/ccIgarPJ.s:3508   .text.vTaskPlaceOnEventList:0000000000000040 $d
     /tmp/ccIgarPJ.s:3513   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 $t
     /tmp/ccIgarPJ.s:3518   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 vTaskPlaceOnUnorderedEventList
     /tmp/ccIgarPJ.s:3612   .text.vTaskPlaceOnUnorderedEventList:000000000000006c $d
     /tmp/ccIgarPJ.s:3618   .text.xTaskRemoveFromEventList:0000000000000000 $t
     /tmp/ccIgarPJ.s:3623   .text.xTaskRemoveFromEventList:0000000000000000 xTaskRemoveFromEventList
     /tmp/ccIgarPJ.s:3755   .text.xTaskRemoveFromEventList:00000000000000b8 $d
     /tmp/ccIgarPJ.s:3765   .text.xTaskRemoveFromUnorderedEventList:0000000000000000 $t
     /tmp/ccIgarPJ.s:3770   .text.xTaskRemoveFromUnorderedEventList:0000000000000000 xTaskRemoveFromUnorderedEventList
     /tmp/ccIgarPJ.s:3914   .text.xTaskRemoveFromUnorderedEventList:00000000000000c4 $d
     /tmp/ccIgarPJ.s:3923   .text.vTaskSetTimeOutState:0000000000000000 $t
     /tmp/ccIgarPJ.s:3928   .text.vTaskSetTimeOutState:0000000000000000 vTaskSetTimeOutState
     /tmp/ccIgarPJ.s:3994   .text.vTaskSetTimeOutState:000000000000003c $d
     /tmp/ccIgarPJ.s:4000   .text.xTaskCheckForTimeOut:0000000000000000 $t
     /tmp/ccIgarPJ.s:4005   .text.xTaskCheckForTimeOut:0000000000000000 xTaskCheckForTimeOut
     /tmp/ccIgarPJ.s:4152   .text.xTaskCheckForTimeOut:00000000000000b4 $d
     /tmp/ccIgarPJ.s:4158   .text.vTaskMissedYield:0000000000000000 $t
     /tmp/ccIgarPJ.s:4163   .text.vTaskMissedYield:0000000000000000 vTaskMissedYield
     /tmp/ccIgarPJ.s:4194   .text.vTaskMissedYield:0000000000000014 $d
     /tmp/ccIgarPJ.s:4199   .text.uxTaskGetTaskNumber:0000000000000000 $t
     /tmp/ccIgarPJ.s:4204   .text.uxTaskGetTaskNumber:0000000000000000 uxTaskGetTaskNumber
     /tmp/ccIgarPJ.s:4259   .text.vTaskSetTaskNumber:0000000000000000 $t
     /tmp/ccIgarPJ.s:4264   .text.vTaskSetTaskNumber:0000000000000000 vTaskSetTaskNumber
     /tmp/ccIgarPJ.s:4312   .text.prvIdleTask:0000000000000000 $t
     /tmp/ccIgarPJ.s:4461   .text.prvCheckTasksWaitingTermination:0000000000000000 prvCheckTasksWaitingTermination
     /tmp/ccIgarPJ.s:4359   .text.prvIdleTask:0000000000000028 $d
     /tmp/ccIgarPJ.s:4365   .text.prvInitialiseTaskLists:0000000000000000 $t
     /tmp/ccIgarPJ.s:4445   .text.prvInitialiseTaskLists:000000000000005c $d
     /tmp/ccIgarPJ.s:4457   .text.prvCheckTasksWaitingTermination:0000000000000000 $t
     /tmp/ccIgarPJ.s:4549   .text.prvCheckTasksWaitingTermination:0000000000000068 $d
     /tmp/ccIgarPJ.s:4556   .text.vTaskGetInfo:0000000000000000 $t
     /tmp/ccIgarPJ.s:4561   .text.vTaskGetInfo:0000000000000000 vTaskGetInfo
     /tmp/ccIgarPJ.s:4838   .text.prvTaskCheckFreeStackSpace:0000000000000000 prvTaskCheckFreeStackSpace
     /tmp/ccIgarPJ.s:4699   .text.vTaskGetInfo:00000000000000b4 $d
     /tmp/ccIgarPJ.s:4704   .text.prvListTasksWithinSingleList:0000000000000000 $t
     /tmp/ccIgarPJ.s:4834   .text.prvTaskCheckFreeStackSpace:0000000000000000 $t
     /tmp/ccIgarPJ.s:4901   .text.prvDeleteTCB:0000000000000000 $t
     /tmp/ccIgarPJ.s:4944   .text.prvResetNextTaskUnblockTime:0000000000000000 $t
     /tmp/ccIgarPJ.s:5015   .text.prvResetNextTaskUnblockTime:0000000000000040 $d
     /tmp/ccIgarPJ.s:5021   .text.xTaskGetCurrentTaskHandle:0000000000000000 $t
     /tmp/ccIgarPJ.s:5026   .text.xTaskGetCurrentTaskHandle:0000000000000000 xTaskGetCurrentTaskHandle
     /tmp/ccIgarPJ.s:5066   .text.xTaskGetCurrentTaskHandle:000000000000001c $d
     /tmp/ccIgarPJ.s:5071   .text.xTaskGetSchedulerState:0000000000000000 $t
     /tmp/ccIgarPJ.s:5076   .text.xTaskGetSchedulerState:0000000000000000 xTaskGetSchedulerState
     /tmp/ccIgarPJ.s:5136   .text.xTaskGetSchedulerState:0000000000000034 $d
     /tmp/ccIgarPJ.s:5142   .text.vTaskPriorityInherit:0000000000000000 $t
     /tmp/ccIgarPJ.s:5147   .text.vTaskPriorityInherit:0000000000000000 vTaskPriorityInherit
     /tmp/ccIgarPJ.s:5306   .text.vTaskPriorityInherit:00000000000000ec $d
ARM GAS  /tmp/ccIgarPJ.s 			page 219


     /tmp/ccIgarPJ.s:5313   .text.xTaskPriorityDisinherit:0000000000000000 $t
     /tmp/ccIgarPJ.s:5318   .text.xTaskPriorityDisinherit:0000000000000000 xTaskPriorityDisinherit
     /tmp/ccIgarPJ.s:5503   .text.xTaskPriorityDisinherit:0000000000000108 $d
     /tmp/ccIgarPJ.s:5510   .text.prvWriteNameToBuffer:0000000000000000 $t
     /tmp/ccIgarPJ.s:5514   .text.prvWriteNameToBuffer:0000000000000000 prvWriteNameToBuffer
     /tmp/ccIgarPJ.s:5586   .text.vTaskList:0000000000000000 $t
     /tmp/ccIgarPJ.s:5591   .text.vTaskList:0000000000000000 vTaskList
     /tmp/ccIgarPJ.s:5663   .text.vTaskList:0000000000000064 $d
     /tmp/ccIgarPJ.s:5667   .text.vTaskList:0000000000000074 $t
     /tmp/ccIgarPJ.s:5783   .text.vTaskList:0000000000000120 $d
     /tmp/ccIgarPJ.s:5789   .text.uxTaskResetEventItemValue:0000000000000000 $t
     /tmp/ccIgarPJ.s:5794   .text.uxTaskResetEventItemValue:0000000000000000 uxTaskResetEventItemValue
     /tmp/ccIgarPJ.s:5843   .text.uxTaskResetEventItemValue:000000000000002c $d
     /tmp/ccIgarPJ.s:5848   .text.pvTaskIncrementMutexHeldCount:0000000000000000 $t
     /tmp/ccIgarPJ.s:5853   .text.pvTaskIncrementMutexHeldCount:0000000000000000 pvTaskIncrementMutexHeldCount
     /tmp/ccIgarPJ.s:5896   .text.pvTaskIncrementMutexHeldCount:0000000000000024 $d
     /tmp/ccIgarPJ.s:5901   .text.ulTaskNotifyTake:0000000000000000 $t
     /tmp/ccIgarPJ.s:5906   .text.ulTaskNotifyTake:0000000000000000 ulTaskNotifyTake
     /tmp/ccIgarPJ.s:6017   .text.ulTaskNotifyTake:0000000000000094 $d
     /tmp/ccIgarPJ.s:6023   .text.xTaskNotifyWait:0000000000000000 $t
     /tmp/ccIgarPJ.s:6028   .text.xTaskNotifyWait:0000000000000000 xTaskNotifyWait
     /tmp/ccIgarPJ.s:6162   .text.xTaskNotifyWait:00000000000000c0 $d
     /tmp/ccIgarPJ.s:6168   .text.xTaskGenericNotify:0000000000000000 $t
     /tmp/ccIgarPJ.s:6173   .text.xTaskGenericNotify:0000000000000000 xTaskGenericNotify
     /tmp/ccIgarPJ.s:6252   .text.xTaskGenericNotify:0000000000000060 $d
     /tmp/ccIgarPJ.s:6257   .text.xTaskGenericNotify:0000000000000074 $t
     /tmp/ccIgarPJ.s:6412   .text.xTaskGenericNotify:0000000000000158 $d
     /tmp/ccIgarPJ.s:6420   .text.xTaskGenericNotifyFromISR:0000000000000000 $t
     /tmp/ccIgarPJ.s:6425   .text.xTaskGenericNotifyFromISR:0000000000000000 xTaskGenericNotifyFromISR
     /tmp/ccIgarPJ.s:6524   .text.xTaskGenericNotifyFromISR:0000000000000080 $d
     /tmp/ccIgarPJ.s:6529   .text.xTaskGenericNotifyFromISR:0000000000000094 $t
     /tmp/ccIgarPJ.s:6712   .text.xTaskGenericNotifyFromISR:00000000000001a0 $d
     /tmp/ccIgarPJ.s:6722   .text.vTaskNotifyGiveFromISR:0000000000000000 $t
     /tmp/ccIgarPJ.s:6727   .text.vTaskNotifyGiveFromISR:0000000000000000 vTaskNotifyGiveFromISR
     /tmp/ccIgarPJ.s:6937   .text.vTaskNotifyGiveFromISR:0000000000000128 $d
     /tmp/ccIgarPJ.s:6947   .text.xTaskNotifyStateClear:0000000000000000 $t
     /tmp/ccIgarPJ.s:6952   .text.xTaskNotifyStateClear:0000000000000000 xTaskNotifyStateClear
     /tmp/ccIgarPJ.s:7022   .text.xTaskNotifyStateClear:0000000000000048 $d
     /tmp/ccIgarPJ.s:7027   .text.prvAddCurrentTaskToDelayedList:0000000000000000 $t
     /tmp/ccIgarPJ.s:7170   .text.prvAddCurrentTaskToDelayedList:00000000000000d0 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
pvPortMalloc
vPortFree
memset
vListInitialiseItem
pxPortInitialiseStack
vPortEnterCritical
SEGGER_SYSVIEW_OnTaskCreate
SYSVIEW_AddTask
SEGGER_SYSVIEW_OnTaskStartReady
vListInsertEnd
vPortExitCritical
uxListRemove
SEGGER_SYSVIEW_ShrinkId
SEGGER_SYSVIEW_RecordU32
ARM GAS  /tmp/ccIgarPJ.s 			page 220


vPortValidateInterruptPriority
SEGGER_SYSVIEW_RecordU32x2
SYSVIEW_UpdateTask
SEGGER_SYSVIEW_OnTaskStopReady
xPortStartScheduler
vPortEndScheduler
memcmp
SEGGER_SYSVIEW_OnTaskStartExec
SEGGER_SYSVIEW_OnIdle
vListInsert
vListInitialise
strcpy
strlen
sprintf
SYSVIEW_RecordU32x4
SYSVIEW_RecordU32x5
