
build/STM32F3.elf:     file format elf32-littlearm


Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800616c 	.word	0x0800616c

080001b4 <frame_dummy>:
 80001b4:	4b08      	ldr	r3, [pc, #32]	; (80001d8 <frame_dummy+0x24>)
 80001b6:	b510      	push	{r4, lr}
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4808      	ldr	r0, [pc, #32]	; (80001dc <frame_dummy+0x28>)
 80001bc:	4908      	ldr	r1, [pc, #32]	; (80001e0 <frame_dummy+0x2c>)
 80001be:	f3af 8000 	nop.w
 80001c2:	4808      	ldr	r0, [pc, #32]	; (80001e4 <frame_dummy+0x30>)
 80001c4:	6803      	ldr	r3, [r0, #0]
 80001c6:	b903      	cbnz	r3, 80001ca <frame_dummy+0x16>
 80001c8:	bd10      	pop	{r4, pc}
 80001ca:	4b07      	ldr	r3, [pc, #28]	; (80001e8 <frame_dummy+0x34>)
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d0fb      	beq.n	80001c8 <frame_dummy+0x14>
 80001d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80001d4:	4718      	bx	r3
 80001d6:	bf00      	nop
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800616c 	.word	0x0800616c
 80001e0:	20000070 	.word	0x20000070
 80001e4:	2000006c 	.word	0x2000006c
 80001e8:	00000000 	.word	0x00000000

080001ec <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b082      	sub	sp, #8
 80001f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80001f2:	4a1e      	ldr	r2, [pc, #120]	; (800026c <HAL_MspInit+0x80>)
 80001f4:	4b1d      	ldr	r3, [pc, #116]	; (800026c <HAL_MspInit+0x80>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	f043 0301 	orr.w	r3, r3, #1
 80001fc:	6193      	str	r3, [r2, #24]
 80001fe:	4b1b      	ldr	r3, [pc, #108]	; (800026c <HAL_MspInit+0x80>)
 8000200:	699b      	ldr	r3, [r3, #24]
 8000202:	f003 0301 	and.w	r3, r3, #1
 8000206:	607b      	str	r3, [r7, #4]
 8000208:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800020a:	2003      	movs	r0, #3
 800020c:	f000 fbd2 	bl	80009b4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000210:	f06f 000b 	mvn.w	r0, #11
 8000214:	2100      	movs	r1, #0
 8000216:	2200      	movs	r2, #0
 8000218:	f000 fbd6 	bl	80009c8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800021c:	f06f 000a 	mvn.w	r0, #10
 8000220:	2100      	movs	r1, #0
 8000222:	2200      	movs	r2, #0
 8000224:	f000 fbd0 	bl	80009c8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000228:	f06f 0009 	mvn.w	r0, #9
 800022c:	2100      	movs	r1, #0
 800022e:	2200      	movs	r2, #0
 8000230:	f000 fbca 	bl	80009c8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000234:	f06f 0004 	mvn.w	r0, #4
 8000238:	2100      	movs	r1, #0
 800023a:	2200      	movs	r2, #0
 800023c:	f000 fbc4 	bl	80009c8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000240:	f06f 0003 	mvn.w	r0, #3
 8000244:	2100      	movs	r1, #0
 8000246:	2200      	movs	r2, #0
 8000248:	f000 fbbe 	bl	80009c8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800024c:	f06f 0001 	mvn.w	r0, #1
 8000250:	210f      	movs	r1, #15
 8000252:	2200      	movs	r2, #0
 8000254:	f000 fbb8 	bl	80009c8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8000258:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800025c:	210f      	movs	r1, #15
 800025e:	2200      	movs	r2, #0
 8000260:	f000 fbb2 	bl	80009c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000264:	3708      	adds	r7, #8
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	40021000 	.word	0x40021000

08000270 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b08a      	sub	sp, #40	; 0x28
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a22      	ldr	r2, [pc, #136]	; (8000308 <HAL_UART_MspInit+0x98>)
 800027e:	4293      	cmp	r3, r2
 8000280:	d11c      	bne.n	80002bc <HAL_UART_MspInit+0x4c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000282:	4a22      	ldr	r2, [pc, #136]	; (800030c <HAL_UART_MspInit+0x9c>)
 8000284:	4b21      	ldr	r3, [pc, #132]	; (800030c <HAL_UART_MspInit+0x9c>)
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800028c:	6193      	str	r3, [r2, #24]
 800028e:	4b1f      	ldr	r3, [pc, #124]	; (800030c <HAL_UART_MspInit+0x9c>)
 8000290:	699b      	ldr	r3, [r3, #24]
 8000292:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000296:	613b      	str	r3, [r7, #16]
 8000298:	693b      	ldr	r3, [r7, #16]

    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800029a:	2330      	movs	r3, #48	; 0x30
 800029c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800029e:	2302      	movs	r3, #2
 80002a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002a2:	2301      	movs	r3, #1
 80002a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002a6:	2303      	movs	r3, #3
 80002a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80002aa:	2307      	movs	r3, #7
 80002ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002ae:	f107 0314 	add.w	r3, r7, #20
 80002b2:	4817      	ldr	r0, [pc, #92]	; (8000310 <HAL_UART_MspInit+0xa0>)
 80002b4:	4619      	mov	r1, r3
 80002b6:	f001 ff91 	bl	80021dc <HAL_GPIO_Init>
 80002ba:	e021      	b.n	8000300 <HAL_UART_MspInit+0x90>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a14      	ldr	r2, [pc, #80]	; (8000314 <HAL_UART_MspInit+0xa4>)
 80002c2:	4293      	cmp	r3, r2
 80002c4:	d11c      	bne.n	8000300 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80002c6:	4a11      	ldr	r2, [pc, #68]	; (800030c <HAL_UART_MspInit+0x9c>)
 80002c8:	4b10      	ldr	r3, [pc, #64]	; (800030c <HAL_UART_MspInit+0x9c>)
 80002ca:	69db      	ldr	r3, [r3, #28]
 80002cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002d0:	61d3      	str	r3, [r2, #28]
 80002d2:	4b0e      	ldr	r3, [pc, #56]	; (800030c <HAL_UART_MspInit+0x9c>)
 80002d4:	69db      	ldr	r3, [r3, #28]
 80002d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002da:	60fb      	str	r3, [r7, #12]
 80002dc:	68fb      	ldr	r3, [r7, #12]

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80002de:	230c      	movs	r3, #12
 80002e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002e2:	2302      	movs	r3, #2
 80002e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e6:	2300      	movs	r3, #0
 80002e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ea:	2300      	movs	r3, #0
 80002ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80002ee:	2307      	movs	r3, #7
 80002f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002f2:	f107 0314 	add.w	r3, r7, #20
 80002f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002fa:	4619      	mov	r1, r3
 80002fc:	f001 ff6e 	bl	80021dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000300:	3728      	adds	r7, #40	; 0x28
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	40013800 	.word	0x40013800
 800030c:	40021000 	.word	0x40021000
 8000310:	48000800 	.word	0x48000800
 8000314:	40004400 	.word	0x40004400

08000318 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b08c      	sub	sp, #48	; 0x30
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000320:	2300      	movs	r3, #0
 8000322:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000324:	2300      	movs	r3, #0
 8000326:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8000328:	2019      	movs	r0, #25
 800032a:	6879      	ldr	r1, [r7, #4]
 800032c:	2200      	movs	r2, #0
 800032e:	f000 fb4b 	bl	80009c8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8000332:	2019      	movs	r0, #25
 8000334:	f000 fb64 	bl	8000a00 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000338:	4a1e      	ldr	r2, [pc, #120]	; (80003b4 <HAL_InitTick+0x9c>)
 800033a:	4b1e      	ldr	r3, [pc, #120]	; (80003b4 <HAL_InitTick+0x9c>)
 800033c:	699b      	ldr	r3, [r3, #24]
 800033e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000342:	6193      	str	r3, [r2, #24]
 8000344:	4b1b      	ldr	r3, [pc, #108]	; (80003b4 <HAL_InitTick+0x9c>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800034c:	60fb      	str	r3, [r7, #12]
 800034e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000350:	f107 0214 	add.w	r2, r7, #20
 8000354:	f107 0310 	add.w	r3, r7, #16
 8000358:	4610      	mov	r0, r2
 800035a:	4619      	mov	r1, r3
 800035c:	f001 ff0e 	bl	800217c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000360:	f001 feea 	bl	8002138 <HAL_RCC_GetPCLK2Freq>
 8000364:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000368:	4a13      	ldr	r2, [pc, #76]	; (80003b8 <HAL_InitTick+0xa0>)
 800036a:	fba2 2303 	umull	r2, r3, r2, r3
 800036e:	0c9b      	lsrs	r3, r3, #18
 8000370:	3b01      	subs	r3, #1
 8000372:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000374:	4b11      	ldr	r3, [pc, #68]	; (80003bc <HAL_InitTick+0xa4>)
 8000376:	4a12      	ldr	r2, [pc, #72]	; (80003c0 <HAL_InitTick+0xa8>)
 8000378:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800037a:	4b10      	ldr	r3, [pc, #64]	; (80003bc <HAL_InitTick+0xa4>)
 800037c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000380:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000382:	4a0e      	ldr	r2, [pc, #56]	; (80003bc <HAL_InitTick+0xa4>)
 8000384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000386:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000388:	4b0c      	ldr	r3, [pc, #48]	; (80003bc <HAL_InitTick+0xa4>)
 800038a:	2200      	movs	r2, #0
 800038c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800038e:	4b0b      	ldr	r3, [pc, #44]	; (80003bc <HAL_InitTick+0xa4>)
 8000390:	2200      	movs	r2, #0
 8000392:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000394:	4809      	ldr	r0, [pc, #36]	; (80003bc <HAL_InitTick+0xa4>)
 8000396:	f002 fce7 	bl	8002d68 <HAL_TIM_Base_Init>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d104      	bne.n	80003aa <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80003a0:	4806      	ldr	r0, [pc, #24]	; (80003bc <HAL_InitTick+0xa4>)
 80003a2:	f002 fd17 	bl	8002dd4 <HAL_TIM_Base_Start_IT>
 80003a6:	4603      	mov	r3, r0
 80003a8:	e000      	b.n	80003ac <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80003aa:	2301      	movs	r3, #1
}
 80003ac:	4618      	mov	r0, r3
 80003ae:	3730      	adds	r7, #48	; 0x30
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	40021000 	.word	0x40021000
 80003b8:	431bde83 	.word	0x431bde83
 80003bc:	20002bb0 	.word	0x20002bb0
 80003c0:	40012c00 	.word	0x40012c00

080003c4 <_read>:
	char newline[2] ="\r\n";
	HAL_UART_Transmit(huart, (uint8_t*) newline, 2, 10);
}


int _read(int file, char *result, size_t len) {
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b086      	sub	sp, #24
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	60f8      	str	r0, [r7, #12]
 80003cc:	60b9      	str	r1, [r7, #8]
 80003ce:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef status;
    int retcode = 0;
 80003d0:	2300      	movs	r3, #0
 80003d2:	617b      	str	r3, [r7, #20]

    if (len != 0) {
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d013      	beq.n	8000402 <_read+0x3e>
        status = HAL_UART_Receive( &huart1, (uint8_t *) result, len, HAL_MAX_DELAY);
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	b29b      	uxth	r3, r3
 80003de:	480b      	ldr	r0, [pc, #44]	; (800040c <_read+0x48>)
 80003e0:	68b9      	ldr	r1, [r7, #8]
 80003e2:	461a      	mov	r2, r3
 80003e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80003e8:	f002 f960 	bl	80026ac <HAL_UART_Receive>
 80003ec:	4603      	mov	r3, r0
 80003ee:	74fb      	strb	r3, [r7, #19]

        if (status == HAL_OK) {
 80003f0:	7cfb      	ldrb	r3, [r7, #19]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d102      	bne.n	80003fc <_read+0x38>
            retcode = len;
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	617b      	str	r3, [r7, #20]
 80003fa:	e002      	b.n	8000402 <_read+0x3e>
        } else {
            retcode = -1;
 80003fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000400:	617b      	str	r3, [r7, #20]
        }
    }
    return( retcode);
 8000402:	697b      	ldr	r3, [r7, #20]
}
 8000404:	4618      	mov	r0, r3
 8000406:	3718      	adds	r7, #24
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	20002bf0 	.word	0x20002bf0

08000410 <blink_task>:



void blink_task(void *pvParameters)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b084      	sub	sp, #16
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
	/*just to remove compiler warning*/
	(void) pvParameters;
	uint8_t ch;
	char newline[2] ="\r\n";
 8000418:	f640 230d 	movw	r3, #2573	; 0xa0d
 800041c:	81bb      	strh	r3, [r7, #12]
	while(1){
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);	// Debugging, watch Calculation Time
 800041e:	4811      	ldr	r0, [pc, #68]	; (8000464 <blink_task+0x54>)
 8000420:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000424:	2201      	movs	r2, #1
 8000426:	f002 f849 	bl	80024bc <HAL_GPIO_WritePin>
		  //debugPrint(&huart1,"\r\n");// manual new line
		  //debugPrintln(&huart1,"how are you?");// print full line

		  //vTaskDelay(100);
		  //ch = getchar();
		  HAL_UART_Receive( &huart1, (uint8_t *)aRxBuffer, 20, HAL_MAX_DELAY);
 800042a:	480f      	ldr	r0, [pc, #60]	; (8000468 <blink_task+0x58>)
 800042c:	490f      	ldr	r1, [pc, #60]	; (800046c <blink_task+0x5c>)
 800042e:	2214      	movs	r2, #20
 8000430:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000434:	f002 f93a 	bl	80026ac <HAL_UART_Receive>
		  HAL_UART_Transmit(&huart1,aRxBuffer, 20,10);
 8000438:	480b      	ldr	r0, [pc, #44]	; (8000468 <blink_task+0x58>)
 800043a:	490c      	ldr	r1, [pc, #48]	; (800046c <blink_task+0x5c>)
 800043c:	2214      	movs	r2, #20
 800043e:	230a      	movs	r3, #10
 8000440:	f002 f8a6 	bl	8002590 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, (uint8_t*) newline, 2, 10);
 8000444:	f107 030c 	add.w	r3, r7, #12
 8000448:	4807      	ldr	r0, [pc, #28]	; (8000468 <blink_task+0x58>)
 800044a:	4619      	mov	r1, r3
 800044c:	2202      	movs	r2, #2
 800044e:	230a      	movs	r3, #10
 8000450:	f002 f89e 	bl	8002590 <HAL_UART_Transmit>

		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	// Debugging, watch Calculation Time
 8000454:	4803      	ldr	r0, [pc, #12]	; (8000464 <blink_task+0x54>)
 8000456:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800045a:	2200      	movs	r2, #0
 800045c:	f002 f82e 	bl	80024bc <HAL_GPIO_WritePin>
		  //vTaskDelay(100);

	}
 8000460:	e7dd      	b.n	800041e <blink_task+0xe>
 8000462:	bf00      	nop
 8000464:	48000400 	.word	0x48000400
 8000468:	20002bf0 	.word	0x20002bf0
 800046c:	20002c60 	.word	0x20002c60

08000470 <main>:
}


int main(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af02      	add	r7, sp, #8

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000476:	f000 f9a5 	bl	80007c4 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800047a:	f000 f823 	bl	80004c4 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800047e:	f000 f897 	bl	80005b0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000482:	f000 f867 	bl	8000554 <MX_USART1_UART_Init>

  SEGGER_SYSVIEW_Conf();
 8000486:	f000 f971 	bl	800076c <SEGGER_SYSVIEW_Conf>

  setvbuf(stdin, NULL, _IONBF, 0);
 800048a:	4b0b      	ldr	r3, [pc, #44]	; (80004b8 <main+0x48>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	685b      	ldr	r3, [r3, #4]
 8000490:	4618      	mov	r0, r3
 8000492:	2100      	movs	r1, #0
 8000494:	2202      	movs	r2, #2
 8000496:	2300      	movs	r3, #0
 8000498:	f005 fb08 	bl	8005aac <setvbuf>

  xTaskCreate(blink_task, "Blink_task", configMINIMAL_STACK_SIZE, NULL, 1, ( TaskHandle_t * )NULL);
 800049c:	2301      	movs	r3, #1
 800049e:	9300      	str	r3, [sp, #0]
 80004a0:	2300      	movs	r3, #0
 80004a2:	9301      	str	r3, [sp, #4]
 80004a4:	4805      	ldr	r0, [pc, #20]	; (80004bc <main+0x4c>)
 80004a6:	4906      	ldr	r1, [pc, #24]	; (80004c0 <main+0x50>)
 80004a8:	2280      	movs	r2, #128	; 0x80
 80004aa:	2300      	movs	r3, #0
 80004ac:	f003 faac 	bl	8003a08 <xTaskCreate>
  vTaskStartScheduler();
 80004b0:	f003 fc00 	bl	8003cb4 <vTaskStartScheduler>

  /* Infinite loop */
  while (1)
  {

  }
 80004b4:	e7fe      	b.n	80004b4 <main+0x44>
 80004b6:	bf00      	nop
 80004b8:	20000068 	.word	0x20000068
 80004bc:	08000411 	.word	0x08000411
 80004c0:	08006184 	.word	0x08006184

080004c4 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b090      	sub	sp, #64	; 0x40
 80004c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004ca:	2302      	movs	r3, #2
 80004cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004ce:	2301      	movs	r3, #1
 80004d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80004d2:	2310      	movs	r3, #16
 80004d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004d6:	2302      	movs	r3, #2
 80004d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004da:	2300      	movs	r3, #0
 80004dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80004de:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80004e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004e4:	f107 0318 	add.w	r3, r7, #24
 80004e8:	4618      	mov	r0, r3
 80004ea:	f000 fabf 	bl	8000a6c <HAL_RCC_OscConfig>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80004f4:	f000 f8cc 	bl	8000690 <Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004f8:	230f      	movs	r3, #15
 80004fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004fc:	2302      	movs	r3, #2
 80004fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000500:	2300      	movs	r3, #0
 8000502:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000504:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000508:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800050a:	2300      	movs	r3, #0
 800050c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800050e:	1d3b      	adds	r3, r7, #4
 8000510:	4618      	mov	r0, r3
 8000512:	2102      	movs	r1, #2
 8000514:	f001 fb76 	bl	8001c04 <HAL_RCC_ClockConfig>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800051e:	f000 f8b7 	bl	8000690 <Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000522:	f001 fddb 	bl	80020dc <HAL_RCC_GetHCLKFreq>
 8000526:	4602      	mov	r2, r0
 8000528:	4b09      	ldr	r3, [pc, #36]	; (8000550 <SystemClock_Config+0x8c>)
 800052a:	fba3 2302 	umull	r2, r3, r3, r2
 800052e:	099b      	lsrs	r3, r3, #6
 8000530:	4618      	mov	r0, r3
 8000532:	f000 fa73 	bl	8000a1c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000536:	2004      	movs	r0, #4
 8000538:	f000 fa7c 	bl	8000a34 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800053c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000540:	210f      	movs	r1, #15
 8000542:	2200      	movs	r2, #0
 8000544:	f000 fa40 	bl	80009c8 <HAL_NVIC_SetPriority>
}
 8000548:	3740      	adds	r7, #64	; 0x40
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	10624dd3 	.word	0x10624dd3

08000554 <MX_USART1_UART_Init>:

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000558:	4b13      	ldr	r3, [pc, #76]	; (80005a8 <MX_USART1_UART_Init+0x54>)
 800055a:	4a14      	ldr	r2, [pc, #80]	; (80005ac <MX_USART1_UART_Init+0x58>)
 800055c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800055e:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <MX_USART1_UART_Init+0x54>)
 8000560:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000564:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000566:	4b10      	ldr	r3, [pc, #64]	; (80005a8 <MX_USART1_UART_Init+0x54>)
 8000568:	2200      	movs	r2, #0
 800056a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800056c:	4b0e      	ldr	r3, [pc, #56]	; (80005a8 <MX_USART1_UART_Init+0x54>)
 800056e:	2200      	movs	r2, #0
 8000570:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000572:	4b0d      	ldr	r3, [pc, #52]	; (80005a8 <MX_USART1_UART_Init+0x54>)
 8000574:	2200      	movs	r2, #0
 8000576:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000578:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <MX_USART1_UART_Init+0x54>)
 800057a:	220c      	movs	r2, #12
 800057c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800057e:	4b0a      	ldr	r3, [pc, #40]	; (80005a8 <MX_USART1_UART_Init+0x54>)
 8000580:	2200      	movs	r2, #0
 8000582:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000584:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <MX_USART1_UART_Init+0x54>)
 8000586:	2200      	movs	r2, #0
 8000588:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800058a:	4b07      	ldr	r3, [pc, #28]	; (80005a8 <MX_USART1_UART_Init+0x54>)
 800058c:	2200      	movs	r2, #0
 800058e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000590:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <MX_USART1_UART_Init+0x54>)
 8000592:	2200      	movs	r2, #0
 8000594:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000596:	4804      	ldr	r0, [pc, #16]	; (80005a8 <MX_USART1_UART_Init+0x54>)
 8000598:	f001 ffa8 	bl	80024ec <HAL_UART_Init>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80005a2:	f000 f875 	bl	8000690 <Error_Handler>
  }

}
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20002bf0 	.word	0x20002bf0
 80005ac:	40013800 	.word	0x40013800

080005b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08a      	sub	sp, #40	; 0x28
 80005b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b6:	4a2a      	ldr	r2, [pc, #168]	; (8000660 <MX_GPIO_Init+0xb0>)
 80005b8:	4b29      	ldr	r3, [pc, #164]	; (8000660 <MX_GPIO_Init+0xb0>)
 80005ba:	695b      	ldr	r3, [r3, #20]
 80005bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005c0:	6153      	str	r3, [r2, #20]
 80005c2:	4b27      	ldr	r3, [pc, #156]	; (8000660 <MX_GPIO_Init+0xb0>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80005ca:	613b      	str	r3, [r7, #16]
 80005cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005ce:	4a24      	ldr	r2, [pc, #144]	; (8000660 <MX_GPIO_Init+0xb0>)
 80005d0:	4b23      	ldr	r3, [pc, #140]	; (8000660 <MX_GPIO_Init+0xb0>)
 80005d2:	695b      	ldr	r3, [r3, #20]
 80005d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005d8:	6153      	str	r3, [r2, #20]
 80005da:	4b21      	ldr	r3, [pc, #132]	; (8000660 <MX_GPIO_Init+0xb0>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e6:	4a1e      	ldr	r2, [pc, #120]	; (8000660 <MX_GPIO_Init+0xb0>)
 80005e8:	4b1d      	ldr	r3, [pc, #116]	; (8000660 <MX_GPIO_Init+0xb0>)
 80005ea:	695b      	ldr	r3, [r3, #20]
 80005ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005f0:	6153      	str	r3, [r2, #20]
 80005f2:	4b1b      	ldr	r3, [pc, #108]	; (8000660 <MX_GPIO_Init+0xb0>)
 80005f4:	695b      	ldr	r3, [r3, #20]
 80005f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fe:	4a18      	ldr	r2, [pc, #96]	; (8000660 <MX_GPIO_Init+0xb0>)
 8000600:	4b17      	ldr	r3, [pc, #92]	; (8000660 <MX_GPIO_Init+0xb0>)
 8000602:	695b      	ldr	r3, [r3, #20]
 8000604:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000608:	6153      	str	r3, [r2, #20]
 800060a:	4b15      	ldr	r3, [pc, #84]	; (8000660 <MX_GPIO_Init+0xb0>)
 800060c:	695b      	ldr	r3, [r3, #20]
 800060e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000616:	4813      	ldr	r0, [pc, #76]	; (8000664 <MX_GPIO_Init+0xb4>)
 8000618:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800061c:	2200      	movs	r2, #0
 800061e:	f001 ff4d 	bl	80024bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000622:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000628:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <MX_GPIO_Init+0xb8>)
 800062a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062c:	2300      	movs	r3, #0
 800062e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000630:	f107 0314 	add.w	r3, r7, #20
 8000634:	480d      	ldr	r0, [pc, #52]	; (800066c <MX_GPIO_Init+0xbc>)
 8000636:	4619      	mov	r1, r3
 8000638:	f001 fdd0 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800063c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000642:	2301      	movs	r3, #1
 8000644:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000646:	2300      	movs	r3, #0
 8000648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064a:	2300      	movs	r3, #0
 800064c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	4804      	ldr	r0, [pc, #16]	; (8000664 <MX_GPIO_Init+0xb4>)
 8000654:	4619      	mov	r1, r3
 8000656:	f001 fdc1 	bl	80021dc <HAL_GPIO_Init>

}
 800065a:	3728      	adds	r7, #40	; 0x28
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40021000 	.word	0x40021000
 8000664:	48000400 	.word	0x48000400
 8000668:	10210000 	.word	0x10210000
 800066c:	48000800 	.word	0x48000800

08000670 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN Callback 0 */

/* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a03      	ldr	r2, [pc, #12]	; (800068c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d101      	bne.n	8000686 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000682:	f000 f8b5 	bl	80007f0 <HAL_IncTick>
  }
/* USER CODE BEGIN Callback 1 */

/* USER CODE END Callback 1 */
}
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40012c00 	.word	0x40012c00

08000690 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
  }
 8000694:	e7fe      	b.n	8000694 <Error_Handler+0x4>
 8000696:	bf00      	nop

08000698 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800069c:	4a1f      	ldr	r2, [pc, #124]	; (800071c <SystemInit+0x84>)
 800069e:	4b1f      	ldr	r3, [pc, #124]	; (800071c <SystemInit+0x84>)
 80006a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80006ac:	4a1c      	ldr	r2, [pc, #112]	; (8000720 <SystemInit+0x88>)
 80006ae:	4b1c      	ldr	r3, [pc, #112]	; (8000720 <SystemInit+0x88>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f043 0301 	orr.w	r3, r3, #1
 80006b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80006b8:	4919      	ldr	r1, [pc, #100]	; (8000720 <SystemInit+0x88>)
 80006ba:	4b19      	ldr	r3, [pc, #100]	; (8000720 <SystemInit+0x88>)
 80006bc:	685a      	ldr	r2, [r3, #4]
 80006be:	4b19      	ldr	r3, [pc, #100]	; (8000724 <SystemInit+0x8c>)
 80006c0:	4013      	ands	r3, r2
 80006c2:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80006c4:	4a16      	ldr	r2, [pc, #88]	; (8000720 <SystemInit+0x88>)
 80006c6:	4b16      	ldr	r3, [pc, #88]	; (8000720 <SystemInit+0x88>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80006ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006d2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006d4:	4a12      	ldr	r2, [pc, #72]	; (8000720 <SystemInit+0x88>)
 80006d6:	4b12      	ldr	r3, [pc, #72]	; (8000720 <SystemInit+0x88>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006de:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80006e0:	4a0f      	ldr	r2, [pc, #60]	; (8000720 <SystemInit+0x88>)
 80006e2:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <SystemInit+0x88>)
 80006e4:	685b      	ldr	r3, [r3, #4]
 80006e6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80006ea:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80006ec:	4a0c      	ldr	r2, [pc, #48]	; (8000720 <SystemInit+0x88>)
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <SystemInit+0x88>)
 80006f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006f2:	f023 030f 	bic.w	r3, r3, #15
 80006f6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80006f8:	4909      	ldr	r1, [pc, #36]	; (8000720 <SystemInit+0x88>)
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <SystemInit+0x88>)
 80006fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006fe:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <SystemInit+0x90>)
 8000700:	4013      	ands	r3, r2
 8000702:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <SystemInit+0x88>)
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800070a:	4b04      	ldr	r3, [pc, #16]	; (800071c <SystemInit+0x84>)
 800070c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000710:	609a      	str	r2, [r3, #8]
#endif
}
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	e000ed00 	.word	0xe000ed00
 8000720:	40021000 	.word	0x40021000
 8000724:	f87fc00c 	.word	0xf87fc00c
 8000728:	ff00fccc 	.word	0xff00fccc

0800072c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  //HAL_IncTick();
  //HAL_SYSTICK_IRQHandler();
  if(xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000730:	f003 fdb8 	bl	80042a4 <xTaskGetSchedulerState>
 8000734:	4603      	mov	r3, r0
 8000736:	2b01      	cmp	r3, #1
 8000738:	d001      	beq.n	800073e <SysTick_Handler+0x12>
  {
	xPortSysTickHandler();
 800073a:	f002 ff0b 	bl	8003554 <xPortSysTickHandler>
  }
  //HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800073e:	bd80      	pop	{r7, pc}

08000740 <TIM1_UP_TIM16_IRQHandler>:

/**
* @brief This function handles TIM1 update and TIM16 interrupts.
*/
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000744:	4801      	ldr	r0, [pc, #4]	; (800074c <TIM1_UP_TIM16_IRQHandler+0xc>)
 8000746:	f002 fb61 	bl	8002e0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20002bb0 	.word	0x20002bb0

08000750 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8000754:	4803      	ldr	r0, [pc, #12]	; (8000764 <_cbSendSystemDesc+0x14>)
 8000756:	f004 fd5f 	bl	8005218 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800075a:	4803      	ldr	r0, [pc, #12]	; (8000768 <_cbSendSystemDesc+0x18>)
 800075c:	f004 fd5c 	bl	8005218 <SEGGER_SYSVIEW_SendSysDesc>
}
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	08006190 	.word	0x08006190
 8000768:	080061c4 	.word	0x080061c4

0800076c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8000770:	4b07      	ldr	r3, [pc, #28]	; (8000790 <SEGGER_SYSVIEW_Conf+0x24>)
 8000772:	681a      	ldr	r2, [r3, #0]
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <SEGGER_SYSVIEW_Conf+0x24>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4610      	mov	r0, r2
 800077a:	4619      	mov	r1, r3
 800077c:	4a05      	ldr	r2, [pc, #20]	; (8000794 <SEGGER_SYSVIEW_Conf+0x28>)
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <SEGGER_SYSVIEW_Conf+0x2c>)
 8000780:	f004 f9e0 	bl	8004b44 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8000784:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000788:	f004 fa18 	bl	8004bbc <SEGGER_SYSVIEW_SetRAMBase>
}
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000000 	.word	0x20000000
 8000794:	080062a8 	.word	0x080062a8
 8000798:	08000751 	.word	0x08000751

0800079c <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop

080007b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop

080007c4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007c8:	4a08      	ldr	r2, [pc, #32]	; (80007ec <HAL_Init+0x28>)
 80007ca:	4b08      	ldr	r3, [pc, #32]	; (80007ec <HAL_Init+0x28>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f043 0310 	orr.w	r3, r3, #16
 80007d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007d4:	2003      	movs	r0, #3
 80007d6:	f000 f8ed 	bl	80009b4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007da:	2000      	movs	r0, #0
 80007dc:	f7ff fd9c 	bl	8000318 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007e0:	f7ff fd04 	bl	80001ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007e4:	2300      	movs	r3, #0
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40022000 	.word	0x40022000

080007f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  uwTick++;
 80007f4:	4b04      	ldr	r3, [pc, #16]	; (8000808 <HAL_IncTick+0x18>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	3301      	adds	r3, #1
 80007fa:	4a03      	ldr	r2, [pc, #12]	; (8000808 <HAL_IncTick+0x18>)
 80007fc:	6013      	str	r3, [r2, #0]
}
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	20002c74 	.word	0x20002c74

0800080c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000810:	4b03      	ldr	r3, [pc, #12]	; (8000820 <HAL_GetTick+0x14>)
 8000812:	681b      	ldr	r3, [r3, #0]
}
 8000814:	4618      	mov	r0, r3
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	20002c74 	.word	0x20002c74

08000824 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000824:	b480      	push	{r7}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	f003 0307 	and.w	r3, r3, #7
 8000832:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <NVIC_SetPriorityGrouping+0x44>)
 8000836:	68db      	ldr	r3, [r3, #12]
 8000838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800083a:	68ba      	ldr	r2, [r7, #8]
 800083c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000840:	4013      	ands	r3, r2
 8000842:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800084c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000854:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000856:	4a04      	ldr	r2, [pc, #16]	; (8000868 <NVIC_SetPriorityGrouping+0x44>)
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	60d3      	str	r3, [r2, #12]
}
 800085c:	3714      	adds	r7, #20
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	e000ed00 	.word	0xe000ed00

0800086c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000870:	4b04      	ldr	r3, [pc, #16]	; (8000884 <NVIC_GetPriorityGrouping+0x18>)
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000878:	0a1b      	lsrs	r3, r3, #8
}
 800087a:	4618      	mov	r0, r3
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	e000ed00 	.word	0xe000ed00

08000888 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000892:	4908      	ldr	r1, [pc, #32]	; (80008b4 <NVIC_EnableIRQ+0x2c>)
 8000894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000898:	095b      	lsrs	r3, r3, #5
 800089a:	79fa      	ldrb	r2, [r7, #7]
 800089c:	f002 021f 	and.w	r2, r2, #31
 80008a0:	2001      	movs	r0, #1
 80008a2:	fa00 f202 	lsl.w	r2, r0, r2
 80008a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	e000e100 	.word	0xe000e100

080008b8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	6039      	str	r1, [r7, #0]
 80008c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80008c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	da0b      	bge.n	80008e4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008cc:	490d      	ldr	r1, [pc, #52]	; (8000904 <NVIC_SetPriority+0x4c>)
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	f003 030f 	and.w	r3, r3, #15
 80008d4:	3b04      	subs	r3, #4
 80008d6:	683a      	ldr	r2, [r7, #0]
 80008d8:	b2d2      	uxtb	r2, r2
 80008da:	0112      	lsls	r2, r2, #4
 80008dc:	b2d2      	uxtb	r2, r2
 80008de:	440b      	add	r3, r1
 80008e0:	761a      	strb	r2, [r3, #24]
 80008e2:	e009      	b.n	80008f8 <NVIC_SetPriority+0x40>
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e4:	4908      	ldr	r1, [pc, #32]	; (8000908 <NVIC_SetPriority+0x50>)
 80008e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ea:	683a      	ldr	r2, [r7, #0]
 80008ec:	b2d2      	uxtb	r2, r2
 80008ee:	0112      	lsls	r2, r2, #4
 80008f0:	b2d2      	uxtb	r2, r2
 80008f2:	440b      	add	r3, r1
 80008f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	e000ed00 	.word	0xe000ed00
 8000908:	e000e100 	.word	0xe000e100

0800090c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800090c:	b480      	push	{r7}
 800090e:	b089      	sub	sp, #36	; 0x24
 8000910:	af00      	add	r7, sp, #0
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	60b9      	str	r1, [r7, #8]
 8000916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	f003 0307 	and.w	r3, r3, #7
 800091e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000920:	69fb      	ldr	r3, [r7, #28]
 8000922:	f1c3 0307 	rsb	r3, r3, #7
 8000926:	2b04      	cmp	r3, #4
 8000928:	bf28      	it	cs
 800092a:	2304      	movcs	r3, #4
 800092c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	3304      	adds	r3, #4
 8000932:	2b06      	cmp	r3, #6
 8000934:	d902      	bls.n	800093c <NVIC_EncodePriority+0x30>
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	3b03      	subs	r3, #3
 800093a:	e000      	b.n	800093e <NVIC_EncodePriority+0x32>
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000940:	69bb      	ldr	r3, [r7, #24]
 8000942:	2201      	movs	r2, #1
 8000944:	fa02 f303 	lsl.w	r3, r2, r3
 8000948:	1e5a      	subs	r2, r3, #1
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	401a      	ands	r2, r3
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	2101      	movs	r1, #1
 8000956:	fa01 f303 	lsl.w	r3, r1, r3
 800095a:	1e59      	subs	r1, r3, #1
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000960:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8000962:	4618      	mov	r0, r3
 8000964:	3724      	adds	r7, #36	; 0x24
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop

08000970 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	3b01      	subs	r3, #1
 800097c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000980:	d301      	bcc.n	8000986 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000982:	2301      	movs	r3, #1
 8000984:	e00f      	b.n	80009a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000986:	4a0a      	ldr	r2, [pc, #40]	; (80009b0 <SysTick_Config+0x40>)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	3b01      	subs	r3, #1
 800098c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800098e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000992:	210f      	movs	r1, #15
 8000994:	f7ff ff90 	bl	80008b8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000998:	4b05      	ldr	r3, [pc, #20]	; (80009b0 <SysTick_Config+0x40>)
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800099e:	4b04      	ldr	r3, [pc, #16]	; (80009b0 <SysTick_Config+0x40>)
 80009a0:	2207      	movs	r2, #7
 80009a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009a4:	2300      	movs	r3, #0
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	e000e010 	.word	0xe000e010

080009b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f7ff ff31 	bl	8000824 <NVIC_SetPriorityGrouping>
}
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607a      	str	r2, [r7, #4]
 80009d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009d6:	2300      	movs	r3, #0
 80009d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009da:	f7ff ff47 	bl	800086c <NVIC_GetPriorityGrouping>
 80009de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009e0:	6978      	ldr	r0, [r7, #20]
 80009e2:	68b9      	ldr	r1, [r7, #8]
 80009e4:	687a      	ldr	r2, [r7, #4]
 80009e6:	f7ff ff91 	bl	800090c <NVIC_EncodePriority>
 80009ea:	4602      	mov	r2, r0
 80009ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009f0:	4618      	mov	r0, r3
 80009f2:	4611      	mov	r1, r2
 80009f4:	f7ff ff60 	bl	80008b8 <NVIC_SetPriority>
}
 80009f8:	3718      	adds	r7, #24
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop

08000a00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff ff3a 	bl	8000888 <NVIC_EnableIRQ>
}
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop

08000a1c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f7ff ffa3 	bl	8000970 <SysTick_Config>
 8000a2a:	4603      	mov	r3, r0
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2b04      	cmp	r3, #4
 8000a40:	d106      	bne.n	8000a50 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000a42:	4a09      	ldr	r2, [pc, #36]	; (8000a68 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000a44:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f043 0304 	orr.w	r3, r3, #4
 8000a4c:	6013      	str	r3, [r2, #0]
 8000a4e:	e005      	b.n	8000a5c <HAL_SYSTICK_CLKSourceConfig+0x28>
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000a50:	4a05      	ldr	r2, [pc, #20]	; (8000a68 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000a52:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f023 0304 	bic.w	r3, r3, #4
 8000a5a:	6013      	str	r3, [r2, #0]
  }
}
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	e000e010 	.word	0xe000e010

08000a6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	6018      	str	r0, [r3, #0]
   uint32_t tickstart = 0U;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f003 0301 	and.w	r3, r3, #1
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	f000 81cc 	beq.w	8000e26 <HAL_RCC_OscConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000a8e:	4baf      	ldr	r3, [pc, #700]	; (8000d4c <HAL_RCC_OscConfig+0x2e0>)
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	f003 030c 	and.w	r3, r3, #12
 8000a96:	2b04      	cmp	r3, #4
 8000a98:	d00b      	beq.n	8000ab2 <HAL_RCC_OscConfig+0x46>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a9a:	4bac      	ldr	r3, [pc, #688]	; (8000d4c <HAL_RCC_OscConfig+0x2e0>)
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	f003 030c 	and.w	r3, r3, #12
 8000aa2:	2b08      	cmp	r3, #8
 8000aa4:	d179      	bne.n	8000b9a <HAL_RCC_OscConfig+0x12e>
 8000aa6:	4ba9      	ldr	r3, [pc, #676]	; (8000d4c <HAL_RCC_OscConfig+0x2e0>)
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d073      	beq.n	8000b9a <HAL_RCC_OscConfig+0x12e>
 8000ab2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ab6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000aba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000abe:	fa93 f3a3 	rbit	r3, r3
 8000ac2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000ac6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000aca:	fab3 f383 	clz	r3, r3
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	f043 0320 	orr.w	r3, r3, #32
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	095b      	lsrs	r3, r3, #5
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d102      	bne.n	8000ae6 <HAL_RCC_OscConfig+0x7a>
 8000ae0:	4b9a      	ldr	r3, [pc, #616]	; (8000d4c <HAL_RCC_OscConfig+0x2e0>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	e035      	b.n	8000b52 <HAL_RCC_OscConfig+0xe6>
 8000ae6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000aea:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000aee:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000af2:	fa93 f3a3 	rbit	r3, r3
 8000af6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000afa:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000afe:	fab3 f383 	clz	r3, r3
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	f043 0320 	orr.w	r3, r3, #32
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	095b      	lsrs	r3, r3, #5
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	2b02      	cmp	r3, #2
 8000b12:	d102      	bne.n	8000b1a <HAL_RCC_OscConfig+0xae>
 8000b14:	4b8d      	ldr	r3, [pc, #564]	; (8000d4c <HAL_RCC_OscConfig+0x2e0>)
 8000b16:	6a1b      	ldr	r3, [r3, #32]
 8000b18:	e01b      	b.n	8000b52 <HAL_RCC_OscConfig+0xe6>
 8000b1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b1e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b22:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000b26:	fa93 f3a3 	rbit	r3, r3
 8000b2a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000b2e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000b32:	fab3 f383 	clz	r3, r3
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	f043 0320 	orr.w	r3, r3, #32
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	095b      	lsrs	r3, r3, #5
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	2b04      	cmp	r3, #4
 8000b46:	d102      	bne.n	8000b4e <HAL_RCC_OscConfig+0xe2>
 8000b48:	4b80      	ldr	r3, [pc, #512]	; (8000d4c <HAL_RCC_OscConfig+0x2e0>)
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	e001      	b.n	8000b52 <HAL_RCC_OscConfig+0xe6>
 8000b4e:	4b7f      	ldr	r3, [pc, #508]	; (8000d4c <HAL_RCC_OscConfig+0x2e0>)
 8000b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b56:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b5a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000b5e:	fa92 f2a2 	rbit	r2, r2
 8000b62:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000b66:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000b6a:	fab2 f282 	clz	r2, r2
 8000b6e:	b2d2      	uxtb	r2, r2
 8000b70:	f042 0220 	orr.w	r2, r2, #32
 8000b74:	b2d2      	uxtb	r2, r2
 8000b76:	b2d2      	uxtb	r2, r2
 8000b78:	f002 021f 	and.w	r2, r2, #31
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b82:	4013      	ands	r3, r2
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d007      	beq.n	8000b98 <HAL_RCC_OscConfig+0x12c>
 8000b88:	1d3b      	adds	r3, r7, #4
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d102      	bne.n	8000b98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	f001 b831 	b.w	8001bfa <HAL_RCC_OscConfig+0x118e>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b98:	e145      	b.n	8000e26 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b9a:	1d3b      	adds	r3, r7, #4
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ba4:	d106      	bne.n	8000bb4 <HAL_RCC_OscConfig+0x148>
 8000ba6:	4a69      	ldr	r2, [pc, #420]	; (8000d4c <HAL_RCC_OscConfig+0x2e0>)
 8000ba8:	4b68      	ldr	r3, [pc, #416]	; (8000d4c <HAL_RCC_OscConfig+0x2e0>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bb0:	6013      	str	r3, [r2, #0]
 8000bb2:	e030      	b.n	8000c16 <HAL_RCC_OscConfig+0x1aa>
 8000bb4:	1d3b      	adds	r3, r7, #4
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d10c      	bne.n	8000bd8 <HAL_RCC_OscConfig+0x16c>
 8000bbe:	4a63      	ldr	r2, [pc, #396]	; (8000d4c <HAL_RCC_OscConfig+0x2e0>)
 8000bc0:	4b62      	ldr	r3, [pc, #392]	; (8000d4c <HAL_RCC_OscConfig+0x2e0>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bc8:	6013      	str	r3, [r2, #0]
 8000bca:	4a60      	ldr	r2, [pc, #384]	; (8000d4c <HAL_RCC_OscConfig+0x2e0>)
 8000bcc:	4b5f      	ldr	r3, [pc, #380]	; (8000d4c <HAL_RCC_OscConfig+0x2e0>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bd4:	6013      	str	r3, [r2, #0]
 8000bd6:	e01e      	b.n	8000c16 <HAL_RCC_OscConfig+0x1aa>
 8000bd8:	1d3b      	adds	r3, r7, #4
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000be2:	d10c      	bne.n	8000bfe <HAL_RCC_OscConfig+0x192>
 8000be4:	4a59      	ldr	r2, [pc, #356]	; (8000d4c <HAL_RCC_OscConfig+0x2e0>)
 8000be6:	4b59      	ldr	r3, [pc, #356]	; (8000d4c <HAL_RCC_OscConfig+0x2e0>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bee:	6013      	str	r3, [r2, #0]
 8000bf0:	4a56      	ldr	r2, [pc, #344]	; (8000d4c <HAL_RCC_OscConfig+0x2e0>)
 8000bf2:	4b56      	ldr	r3, [pc, #344]	; (8000d4c <HAL_RCC_OscConfig+0x2e0>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bfa:	6013      	str	r3, [r2, #0]
 8000bfc:	e00b      	b.n	8000c16 <HAL_RCC_OscConfig+0x1aa>
 8000bfe:	4a53      	ldr	r2, [pc, #332]	; (8000d4c <HAL_RCC_OscConfig+0x2e0>)
 8000c00:	4b52      	ldr	r3, [pc, #328]	; (8000d4c <HAL_RCC_OscConfig+0x2e0>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c08:	6013      	str	r3, [r2, #0]
 8000c0a:	4a50      	ldr	r2, [pc, #320]	; (8000d4c <HAL_RCC_OscConfig+0x2e0>)
 8000c0c:	4b4f      	ldr	r3, [pc, #316]	; (8000d4c <HAL_RCC_OscConfig+0x2e0>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c14:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000c16:	494d      	ldr	r1, [pc, #308]	; (8000d4c <HAL_RCC_OscConfig+0x2e0>)
 8000c18:	4b4c      	ldr	r3, [pc, #304]	; (8000d4c <HAL_RCC_OscConfig+0x2e0>)
 8000c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c1c:	f023 020f 	bic.w	r2, r3, #15
 8000c20:	1d3b      	adds	r3, r7, #4
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	689b      	ldr	r3, [r3, #8]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d07b      	beq.n	8000d2c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c34:	f7ff fdea 	bl	800080c <HAL_GetTick>
 8000c38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c3c:	e00a      	b.n	8000c54 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c3e:	f7ff fde5 	bl	800080c <HAL_GetTick>
 8000c42:	4602      	mov	r2, r0
 8000c44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	2b64      	cmp	r3, #100	; 0x64
 8000c4c:	d902      	bls.n	8000c54 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	f000 bfd3 	b.w	8001bfa <HAL_RCC_OscConfig+0x118e>
 8000c54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c58:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c5c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000c60:	fa93 f3a3 	rbit	r3, r3
 8000c64:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000c68:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c6c:	fab3 f383 	clz	r3, r3
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	f043 0320 	orr.w	r3, r3, #32
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	095b      	lsrs	r3, r3, #5
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d102      	bne.n	8000c88 <HAL_RCC_OscConfig+0x21c>
 8000c82:	4b32      	ldr	r3, [pc, #200]	; (8000d4c <HAL_RCC_OscConfig+0x2e0>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	e035      	b.n	8000cf4 <HAL_RCC_OscConfig+0x288>
 8000c88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c8c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c90:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000c94:	fa93 f3a3 	rbit	r3, r3
 8000c98:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000c9c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000ca0:	fab3 f383 	clz	r3, r3
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	f043 0320 	orr.w	r3, r3, #32
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	095b      	lsrs	r3, r3, #5
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	2b02      	cmp	r3, #2
 8000cb4:	d102      	bne.n	8000cbc <HAL_RCC_OscConfig+0x250>
 8000cb6:	4b25      	ldr	r3, [pc, #148]	; (8000d4c <HAL_RCC_OscConfig+0x2e0>)
 8000cb8:	6a1b      	ldr	r3, [r3, #32]
 8000cba:	e01b      	b.n	8000cf4 <HAL_RCC_OscConfig+0x288>
 8000cbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cc0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cc4:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000cc8:	fa93 f3a3 	rbit	r3, r3
 8000ccc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000cd0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000cd4:	fab3 f383 	clz	r3, r3
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	f043 0320 	orr.w	r3, r3, #32
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	095b      	lsrs	r3, r3, #5
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	2b04      	cmp	r3, #4
 8000ce8:	d102      	bne.n	8000cf0 <HAL_RCC_OscConfig+0x284>
 8000cea:	4b18      	ldr	r3, [pc, #96]	; (8000d4c <HAL_RCC_OscConfig+0x2e0>)
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	e001      	b.n	8000cf4 <HAL_RCC_OscConfig+0x288>
 8000cf0:	4b16      	ldr	r3, [pc, #88]	; (8000d4c <HAL_RCC_OscConfig+0x2e0>)
 8000cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cf4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000cf8:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cfc:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000d00:	fa92 f2a2 	rbit	r2, r2
 8000d04:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000d08:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b2d2      	uxtb	r2, r2
 8000d12:	f042 0220 	orr.w	r2, r2, #32
 8000d16:	b2d2      	uxtb	r2, r2
 8000d18:	b2d2      	uxtb	r2, r2
 8000d1a:	f002 021f 	and.w	r2, r2, #31
 8000d1e:	2101      	movs	r1, #1
 8000d20:	fa01 f202 	lsl.w	r2, r1, r2
 8000d24:	4013      	ands	r3, r2
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d089      	beq.n	8000c3e <HAL_RCC_OscConfig+0x1d2>
 8000d2a:	e07c      	b.n	8000e26 <HAL_RCC_OscConfig+0x3ba>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d2c:	f7ff fd6e 	bl	800080c <HAL_GetTick>
 8000d30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d34:	e00c      	b.n	8000d50 <HAL_RCC_OscConfig+0x2e4>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d36:	f7ff fd69 	bl	800080c <HAL_GetTick>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	2b64      	cmp	r3, #100	; 0x64
 8000d44:	d904      	bls.n	8000d50 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8000d46:	2303      	movs	r3, #3
 8000d48:	f000 bf57 	b.w	8001bfa <HAL_RCC_OscConfig+0x118e>
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d54:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d58:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000d5c:	fa93 f3a3 	rbit	r3, r3
 8000d60:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000d64:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d68:	fab3 f383 	clz	r3, r3
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	f043 0320 	orr.w	r3, r3, #32
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	095b      	lsrs	r3, r3, #5
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d102      	bne.n	8000d84 <HAL_RCC_OscConfig+0x318>
 8000d7e:	4bb7      	ldr	r3, [pc, #732]	; (800105c <HAL_RCC_OscConfig+0x5f0>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	e035      	b.n	8000df0 <HAL_RCC_OscConfig+0x384>
 8000d84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d88:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d8c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000d90:	fa93 f3a3 	rbit	r3, r3
 8000d94:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000d98:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000d9c:	fab3 f383 	clz	r3, r3
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	f043 0320 	orr.w	r3, r3, #32
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	095b      	lsrs	r3, r3, #5
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d102      	bne.n	8000db8 <HAL_RCC_OscConfig+0x34c>
 8000db2:	4baa      	ldr	r3, [pc, #680]	; (800105c <HAL_RCC_OscConfig+0x5f0>)
 8000db4:	6a1b      	ldr	r3, [r3, #32]
 8000db6:	e01b      	b.n	8000df0 <HAL_RCC_OscConfig+0x384>
 8000db8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dbc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dc0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000dc4:	fa93 f3a3 	rbit	r3, r3
 8000dc8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000dcc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000dd0:	fab3 f383 	clz	r3, r3
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	f043 0320 	orr.w	r3, r3, #32
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	095b      	lsrs	r3, r3, #5
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	d102      	bne.n	8000dec <HAL_RCC_OscConfig+0x380>
 8000de6:	4b9d      	ldr	r3, [pc, #628]	; (800105c <HAL_RCC_OscConfig+0x5f0>)
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	e001      	b.n	8000df0 <HAL_RCC_OscConfig+0x384>
 8000dec:	4b9b      	ldr	r3, [pc, #620]	; (800105c <HAL_RCC_OscConfig+0x5f0>)
 8000dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000df4:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000df8:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000dfc:	fa92 f2a2 	rbit	r2, r2
 8000e00:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000e04:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000e08:	fab2 f282 	clz	r2, r2
 8000e0c:	b2d2      	uxtb	r2, r2
 8000e0e:	f042 0220 	orr.w	r2, r2, #32
 8000e12:	b2d2      	uxtb	r2, r2
 8000e14:	b2d2      	uxtb	r2, r2
 8000e16:	f002 021f 	and.w	r2, r2, #31
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e20:	4013      	ands	r3, r2
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d187      	bne.n	8000d36 <HAL_RCC_OscConfig+0x2ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e26:	1d3b      	adds	r3, r7, #4
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f003 0302 	and.w	r3, r3, #2
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	f000 81d7 	beq.w	80011e4 <HAL_RCC_OscConfig+0x778>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e36:	4b89      	ldr	r3, [pc, #548]	; (800105c <HAL_RCC_OscConfig+0x5f0>)
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f003 030c 	and.w	r3, r3, #12
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d00d      	beq.n	8000e5e <HAL_RCC_OscConfig+0x3f2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e42:	4b86      	ldr	r3, [pc, #536]	; (800105c <HAL_RCC_OscConfig+0x5f0>)
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f003 030c 	and.w	r3, r3, #12
 8000e4a:	2b08      	cmp	r3, #8
 8000e4c:	f040 8090 	bne.w	8000f70 <HAL_RCC_OscConfig+0x504>
 8000e50:	4b82      	ldr	r3, [pc, #520]	; (800105c <HAL_RCC_OscConfig+0x5f0>)
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	f040 8089 	bne.w	8000f70 <HAL_RCC_OscConfig+0x504>
 8000e5e:	2302      	movs	r3, #2
 8000e60:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e64:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000e68:	fa93 f3a3 	rbit	r3, r3
 8000e6c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000e70:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e74:	fab3 f383 	clz	r3, r3
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	f043 0320 	orr.w	r3, r3, #32
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	095b      	lsrs	r3, r3, #5
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d102      	bne.n	8000e90 <HAL_RCC_OscConfig+0x424>
 8000e8a:	4b74      	ldr	r3, [pc, #464]	; (800105c <HAL_RCC_OscConfig+0x5f0>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	e033      	b.n	8000ef8 <HAL_RCC_OscConfig+0x48c>
 8000e90:	2302      	movs	r3, #2
 8000e92:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e96:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000e9a:	fa93 f3a3 	rbit	r3, r3
 8000e9e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000ea2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000ea6:	fab3 f383 	clz	r3, r3
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	f043 0320 	orr.w	r3, r3, #32
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	095b      	lsrs	r3, r3, #5
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d102      	bne.n	8000ec2 <HAL_RCC_OscConfig+0x456>
 8000ebc:	4b67      	ldr	r3, [pc, #412]	; (800105c <HAL_RCC_OscConfig+0x5f0>)
 8000ebe:	6a1b      	ldr	r3, [r3, #32]
 8000ec0:	e01a      	b.n	8000ef8 <HAL_RCC_OscConfig+0x48c>
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ec8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000ecc:	fa93 f3a3 	rbit	r3, r3
 8000ed0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000ed4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000ed8:	fab3 f383 	clz	r3, r3
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	f043 0320 	orr.w	r3, r3, #32
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	095b      	lsrs	r3, r3, #5
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	2b04      	cmp	r3, #4
 8000eec:	d102      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x488>
 8000eee:	4b5b      	ldr	r3, [pc, #364]	; (800105c <HAL_RCC_OscConfig+0x5f0>)
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	e001      	b.n	8000ef8 <HAL_RCC_OscConfig+0x48c>
 8000ef4:	4b59      	ldr	r3, [pc, #356]	; (800105c <HAL_RCC_OscConfig+0x5f0>)
 8000ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef8:	2202      	movs	r2, #2
 8000efa:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000efe:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000f02:	fa92 f2a2 	rbit	r2, r2
 8000f06:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000f0a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000f0e:	fab2 f282 	clz	r2, r2
 8000f12:	b2d2      	uxtb	r2, r2
 8000f14:	f042 0220 	orr.w	r2, r2, #32
 8000f18:	b2d2      	uxtb	r2, r2
 8000f1a:	b2d2      	uxtb	r2, r2
 8000f1c:	f002 021f 	and.w	r2, r2, #31
 8000f20:	2101      	movs	r1, #1
 8000f22:	fa01 f202 	lsl.w	r2, r1, r2
 8000f26:	4013      	ands	r3, r2
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d007      	beq.n	8000f3c <HAL_RCC_OscConfig+0x4d0>
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	691b      	ldr	r3, [r3, #16]
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d002      	beq.n	8000f3c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	f000 be5f 	b.w	8001bfa <HAL_RCC_OscConfig+0x118e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f3c:	4847      	ldr	r0, [pc, #284]	; (800105c <HAL_RCC_OscConfig+0x5f0>)
 8000f3e:	4b47      	ldr	r3, [pc, #284]	; (800105c <HAL_RCC_OscConfig+0x5f0>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	6959      	ldr	r1, [r3, #20]
 8000f4c:	23f8      	movs	r3, #248	; 0xf8
 8000f4e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f52:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000f56:	fa93 f3a3 	rbit	r3, r3
 8000f5a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000f5e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8000f62:	fab3 f383 	clz	r3, r3
 8000f66:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	6003      	str	r3, [r0, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f6e:	e139      	b.n	80011e4 <HAL_RCC_OscConfig+0x778>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f70:	1d3b      	adds	r3, r7, #4
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	691b      	ldr	r3, [r3, #16]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	f000 80a8 	beq.w	80010cc <HAL_RCC_OscConfig+0x660>
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f82:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000f86:	fa93 f3a3 	rbit	r3, r3
 8000f8a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000f8e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f92:	fab3 f383 	clz	r3, r3
 8000f96:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f9a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa6:	f7ff fc31 	bl	800080c <HAL_GetTick>
 8000faa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fae:	e00a      	b.n	8000fc6 <HAL_RCC_OscConfig+0x55a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fb0:	f7ff fc2c 	bl	800080c <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d902      	bls.n	8000fc6 <HAL_RCC_OscConfig+0x55a>
          {
            return HAL_TIMEOUT;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	f000 be1a 	b.w	8001bfa <HAL_RCC_OscConfig+0x118e>
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fcc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000fd0:	fa93 f3a3 	rbit	r3, r3
 8000fd4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000fd8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fdc:	fab3 f383 	clz	r3, r3
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	f043 0320 	orr.w	r3, r3, #32
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	095b      	lsrs	r3, r3, #5
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d102      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x58c>
 8000ff2:	4b1a      	ldr	r3, [pc, #104]	; (800105c <HAL_RCC_OscConfig+0x5f0>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	e035      	b.n	8001064 <HAL_RCC_OscConfig+0x5f8>
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ffe:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001002:	fa93 f3a3 	rbit	r3, r3
 8001006:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800100a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800100e:	fab3 f383 	clz	r3, r3
 8001012:	b2db      	uxtb	r3, r3
 8001014:	f043 0320 	orr.w	r3, r3, #32
 8001018:	b2db      	uxtb	r3, r3
 800101a:	b2db      	uxtb	r3, r3
 800101c:	095b      	lsrs	r3, r3, #5
 800101e:	b2db      	uxtb	r3, r3
 8001020:	2b02      	cmp	r3, #2
 8001022:	d102      	bne.n	800102a <HAL_RCC_OscConfig+0x5be>
 8001024:	4b0d      	ldr	r3, [pc, #52]	; (800105c <HAL_RCC_OscConfig+0x5f0>)
 8001026:	6a1b      	ldr	r3, [r3, #32]
 8001028:	e01c      	b.n	8001064 <HAL_RCC_OscConfig+0x5f8>
 800102a:	2302      	movs	r3, #2
 800102c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001030:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001034:	fa93 f3a3 	rbit	r3, r3
 8001038:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800103c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001040:	fab3 f383 	clz	r3, r3
 8001044:	b2db      	uxtb	r3, r3
 8001046:	f043 0320 	orr.w	r3, r3, #32
 800104a:	b2db      	uxtb	r3, r3
 800104c:	b2db      	uxtb	r3, r3
 800104e:	095b      	lsrs	r3, r3, #5
 8001050:	b2db      	uxtb	r3, r3
 8001052:	2b04      	cmp	r3, #4
 8001054:	d104      	bne.n	8001060 <HAL_RCC_OscConfig+0x5f4>
 8001056:	4b01      	ldr	r3, [pc, #4]	; (800105c <HAL_RCC_OscConfig+0x5f0>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	e003      	b.n	8001064 <HAL_RCC_OscConfig+0x5f8>
 800105c:	40021000 	.word	0x40021000
 8001060:	4bc6      	ldr	r3, [pc, #792]	; (800137c <HAL_RCC_OscConfig+0x910>)
 8001062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001064:	2202      	movs	r2, #2
 8001066:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800106a:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800106e:	fa92 f2a2 	rbit	r2, r2
 8001072:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001076:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800107a:	fab2 f282 	clz	r2, r2
 800107e:	b2d2      	uxtb	r2, r2
 8001080:	f042 0220 	orr.w	r2, r2, #32
 8001084:	b2d2      	uxtb	r2, r2
 8001086:	b2d2      	uxtb	r2, r2
 8001088:	f002 021f 	and.w	r2, r2, #31
 800108c:	2101      	movs	r1, #1
 800108e:	fa01 f202 	lsl.w	r2, r1, r2
 8001092:	4013      	ands	r3, r2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d08b      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x544>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001098:	48b8      	ldr	r0, [pc, #736]	; (800137c <HAL_RCC_OscConfig+0x910>)
 800109a:	4bb8      	ldr	r3, [pc, #736]	; (800137c <HAL_RCC_OscConfig+0x910>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	6959      	ldr	r1, [r3, #20]
 80010a8:	23f8      	movs	r3, #248	; 0xf8
 80010aa:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ae:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80010b2:	fa93 f3a3 	rbit	r3, r3
 80010b6:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80010ba:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80010be:	fab3 f383 	clz	r3, r3
 80010c2:	fa01 f303 	lsl.w	r3, r1, r3
 80010c6:	4313      	orrs	r3, r2
 80010c8:	6003      	str	r3, [r0, #0]
 80010ca:	e08b      	b.n	80011e4 <HAL_RCC_OscConfig+0x778>
 80010cc:	2301      	movs	r3, #1
 80010ce:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80010d6:	fa93 f3a3 	rbit	r3, r3
 80010da:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80010de:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010e2:	fab3 f383 	clz	r3, r3
 80010e6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80010ea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	461a      	mov	r2, r3
 80010f2:	2300      	movs	r3, #0
 80010f4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f6:	f7ff fb89 	bl	800080c <HAL_GetTick>
 80010fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010fe:	e00a      	b.n	8001116 <HAL_RCC_OscConfig+0x6aa>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001100:	f7ff fb84 	bl	800080c <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	2b02      	cmp	r3, #2
 800110e:	d902      	bls.n	8001116 <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 8001110:	2303      	movs	r3, #3
 8001112:	f000 bd72 	b.w	8001bfa <HAL_RCC_OscConfig+0x118e>
 8001116:	2302      	movs	r3, #2
 8001118:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800111c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001120:	fa93 f3a3 	rbit	r3, r3
 8001124:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001128:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800112c:	fab3 f383 	clz	r3, r3
 8001130:	b2db      	uxtb	r3, r3
 8001132:	f043 0320 	orr.w	r3, r3, #32
 8001136:	b2db      	uxtb	r3, r3
 8001138:	b2db      	uxtb	r3, r3
 800113a:	095b      	lsrs	r3, r3, #5
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b01      	cmp	r3, #1
 8001140:	d102      	bne.n	8001148 <HAL_RCC_OscConfig+0x6dc>
 8001142:	4b8e      	ldr	r3, [pc, #568]	; (800137c <HAL_RCC_OscConfig+0x910>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	e033      	b.n	80011b0 <HAL_RCC_OscConfig+0x744>
 8001148:	2302      	movs	r3, #2
 800114a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800114e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001152:	fa93 f3a3 	rbit	r3, r3
 8001156:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800115a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800115e:	fab3 f383 	clz	r3, r3
 8001162:	b2db      	uxtb	r3, r3
 8001164:	f043 0320 	orr.w	r3, r3, #32
 8001168:	b2db      	uxtb	r3, r3
 800116a:	b2db      	uxtb	r3, r3
 800116c:	095b      	lsrs	r3, r3, #5
 800116e:	b2db      	uxtb	r3, r3
 8001170:	2b02      	cmp	r3, #2
 8001172:	d102      	bne.n	800117a <HAL_RCC_OscConfig+0x70e>
 8001174:	4b81      	ldr	r3, [pc, #516]	; (800137c <HAL_RCC_OscConfig+0x910>)
 8001176:	6a1b      	ldr	r3, [r3, #32]
 8001178:	e01a      	b.n	80011b0 <HAL_RCC_OscConfig+0x744>
 800117a:	2302      	movs	r3, #2
 800117c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001180:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001184:	fa93 f3a3 	rbit	r3, r3
 8001188:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800118c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001190:	fab3 f383 	clz	r3, r3
 8001194:	b2db      	uxtb	r3, r3
 8001196:	f043 0320 	orr.w	r3, r3, #32
 800119a:	b2db      	uxtb	r3, r3
 800119c:	b2db      	uxtb	r3, r3
 800119e:	095b      	lsrs	r3, r3, #5
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	d102      	bne.n	80011ac <HAL_RCC_OscConfig+0x740>
 80011a6:	4b75      	ldr	r3, [pc, #468]	; (800137c <HAL_RCC_OscConfig+0x910>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	e001      	b.n	80011b0 <HAL_RCC_OscConfig+0x744>
 80011ac:	4b73      	ldr	r3, [pc, #460]	; (800137c <HAL_RCC_OscConfig+0x910>)
 80011ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b0:	2202      	movs	r2, #2
 80011b2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80011ba:	fa92 f2a2 	rbit	r2, r2
 80011be:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80011c2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80011c6:	fab2 f282 	clz	r2, r2
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	f042 0220 	orr.w	r2, r2, #32
 80011d0:	b2d2      	uxtb	r2, r2
 80011d2:	b2d2      	uxtb	r2, r2
 80011d4:	f002 021f 	and.w	r2, r2, #31
 80011d8:	2101      	movs	r1, #1
 80011da:	fa01 f202 	lsl.w	r2, r1, r2
 80011de:	4013      	ands	r3, r2
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d18d      	bne.n	8001100 <HAL_RCC_OscConfig+0x694>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011e4:	1d3b      	adds	r3, r7, #4
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0308 	and.w	r3, r3, #8
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	f000 8140 	beq.w	8001474 <HAL_RCC_OscConfig+0xa08>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011f4:	1d3b      	adds	r3, r7, #4
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f000 8096 	beq.w	800132c <HAL_RCC_OscConfig+0x8c0>
 8001200:	2301      	movs	r3, #1
 8001202:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001206:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800120a:	fa93 f3a3 	rbit	r3, r3
 800120e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001212:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001216:	fab3 f383 	clz	r3, r3
 800121a:	461a      	mov	r2, r3
 800121c:	4b58      	ldr	r3, [pc, #352]	; (8001380 <HAL_RCC_OscConfig+0x914>)
 800121e:	4413      	add	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	461a      	mov	r2, r3
 8001224:	2301      	movs	r3, #1
 8001226:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001228:	f7ff faf0 	bl	800080c <HAL_GetTick>
 800122c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001230:	e00a      	b.n	8001248 <HAL_RCC_OscConfig+0x7dc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001232:	f7ff faeb 	bl	800080c <HAL_GetTick>
 8001236:	4602      	mov	r2, r0
 8001238:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d902      	bls.n	8001248 <HAL_RCC_OscConfig+0x7dc>
        {
          return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	f000 bcd9 	b.w	8001bfa <HAL_RCC_OscConfig+0x118e>
 8001248:	2302      	movs	r3, #2
 800124a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800124e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001252:	fa93 f3a3 	rbit	r3, r3
 8001256:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800125a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800125e:	fab3 f383 	clz	r3, r3
 8001262:	b2db      	uxtb	r3, r3
 8001264:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001268:	b2db      	uxtb	r3, r3
 800126a:	b2db      	uxtb	r3, r3
 800126c:	095b      	lsrs	r3, r3, #5
 800126e:	b2db      	uxtb	r3, r3
 8001270:	2b01      	cmp	r3, #1
 8001272:	d102      	bne.n	800127a <HAL_RCC_OscConfig+0x80e>
 8001274:	4b41      	ldr	r3, [pc, #260]	; (800137c <HAL_RCC_OscConfig+0x910>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	e039      	b.n	80012ee <HAL_RCC_OscConfig+0x882>
 800127a:	2302      	movs	r3, #2
 800127c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001280:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001284:	fa93 f2a3 	rbit	r2, r3
 8001288:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800128c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800128e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	fab3 f383 	clz	r3, r3
 8001298:	b2db      	uxtb	r3, r3
 800129a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	095b      	lsrs	r3, r3, #5
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d102      	bne.n	80012b0 <HAL_RCC_OscConfig+0x844>
 80012aa:	4b34      	ldr	r3, [pc, #208]	; (800137c <HAL_RCC_OscConfig+0x910>)
 80012ac:	6a1b      	ldr	r3, [r3, #32]
 80012ae:	e01e      	b.n	80012ee <HAL_RCC_OscConfig+0x882>
 80012b0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80012b4:	2202      	movs	r2, #2
 80012b6:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	fa93 f2a3 	rbit	r2, r3
 80012c2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80012c6:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80012c8:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	fab3 f383 	clz	r3, r3
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	095b      	lsrs	r3, r3, #5
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	2b04      	cmp	r3, #4
 80012e2:	d102      	bne.n	80012ea <HAL_RCC_OscConfig+0x87e>
 80012e4:	4b25      	ldr	r3, [pc, #148]	; (800137c <HAL_RCC_OscConfig+0x910>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	e001      	b.n	80012ee <HAL_RCC_OscConfig+0x882>
 80012ea:	4b24      	ldr	r3, [pc, #144]	; (800137c <HAL_RCC_OscConfig+0x910>)
 80012ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ee:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 80012f2:	2102      	movs	r1, #2
 80012f4:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f6:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 80012fa:	6812      	ldr	r2, [r2, #0]
 80012fc:	fa92 f1a2 	rbit	r1, r2
 8001300:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001304:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001306:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800130a:	6812      	ldr	r2, [r2, #0]
 800130c:	fab2 f282 	clz	r2, r2
 8001310:	b2d2      	uxtb	r2, r2
 8001312:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001316:	b2d2      	uxtb	r2, r2
 8001318:	b2d2      	uxtb	r2, r2
 800131a:	f002 021f 	and.w	r2, r2, #31
 800131e:	2101      	movs	r1, #1
 8001320:	fa01 f202 	lsl.w	r2, r1, r2
 8001324:	4013      	ands	r3, r2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d083      	beq.n	8001232 <HAL_RCC_OscConfig+0x7c6>
 800132a:	e0a3      	b.n	8001474 <HAL_RCC_OscConfig+0xa08>
 800132c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001330:	2201      	movs	r2, #1
 8001332:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001334:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	fa93 f2a3 	rbit	r2, r3
 800133e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001342:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001344:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001348:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800134a:	fab3 f383 	clz	r3, r3
 800134e:	461a      	mov	r2, r3
 8001350:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <HAL_RCC_OscConfig+0x914>)
 8001352:	4413      	add	r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	461a      	mov	r2, r3
 8001358:	2300      	movs	r3, #0
 800135a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800135c:	f7ff fa56 	bl	800080c <HAL_GetTick>
 8001360:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001364:	e00e      	b.n	8001384 <HAL_RCC_OscConfig+0x918>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001366:	f7ff fa51 	bl	800080c <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b02      	cmp	r3, #2
 8001374:	d906      	bls.n	8001384 <HAL_RCC_OscConfig+0x918>
        {
          return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	f000 bc3f 	b.w	8001bfa <HAL_RCC_OscConfig+0x118e>
 800137c:	40021000 	.word	0x40021000
 8001380:	10908120 	.word	0x10908120
 8001384:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001388:	2202      	movs	r2, #2
 800138a:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800138c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	fa93 f2a3 	rbit	r2, r3
 8001396:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800139a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800139c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80013a0:	681b      	ldr	r3, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013a2:	fab3 f383 	clz	r3, r3
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	095b      	lsrs	r3, r3, #5
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d102      	bne.n	80013be <HAL_RCC_OscConfig+0x952>
 80013b8:	4ba6      	ldr	r3, [pc, #664]	; (8001654 <HAL_RCC_OscConfig+0xbe8>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	e03b      	b.n	8001436 <HAL_RCC_OscConfig+0x9ca>
 80013be:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013c2:	2202      	movs	r2, #2
 80013c4:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	fa93 f2a3 	rbit	r2, r3
 80013d0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80013d4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80013d6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	fab3 f383 	clz	r3, r3
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	095b      	lsrs	r3, r3, #5
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d102      	bne.n	80013f8 <HAL_RCC_OscConfig+0x98c>
 80013f2:	4b98      	ldr	r3, [pc, #608]	; (8001654 <HAL_RCC_OscConfig+0xbe8>)
 80013f4:	6a1b      	ldr	r3, [r3, #32]
 80013f6:	e01e      	b.n	8001436 <HAL_RCC_OscConfig+0x9ca>
 80013f8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013fc:	2202      	movs	r2, #2
 80013fe:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001400:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	fa93 f2a3 	rbit	r2, r3
 800140a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800140e:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001410:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	fab3 f383 	clz	r3, r3
 800141a:	b2db      	uxtb	r3, r3
 800141c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001420:	b2db      	uxtb	r3, r3
 8001422:	b2db      	uxtb	r3, r3
 8001424:	095b      	lsrs	r3, r3, #5
 8001426:	b2db      	uxtb	r3, r3
 8001428:	2b04      	cmp	r3, #4
 800142a:	d102      	bne.n	8001432 <HAL_RCC_OscConfig+0x9c6>
 800142c:	4b89      	ldr	r3, [pc, #548]	; (8001654 <HAL_RCC_OscConfig+0xbe8>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	e001      	b.n	8001436 <HAL_RCC_OscConfig+0x9ca>
 8001432:	4b88      	ldr	r3, [pc, #544]	; (8001654 <HAL_RCC_OscConfig+0xbe8>)
 8001434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001436:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 800143a:	2102      	movs	r1, #2
 800143c:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800143e:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8001442:	6812      	ldr	r2, [r2, #0]
 8001444:	fa92 f1a2 	rbit	r1, r2
 8001448:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800144c:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800144e:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8001452:	6812      	ldr	r2, [r2, #0]
 8001454:	fab2 f282 	clz	r2, r2
 8001458:	b2d2      	uxtb	r2, r2
 800145a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800145e:	b2d2      	uxtb	r2, r2
 8001460:	b2d2      	uxtb	r2, r2
 8001462:	f002 021f 	and.w	r2, r2, #31
 8001466:	2101      	movs	r1, #1
 8001468:	fa01 f202 	lsl.w	r2, r1, r2
 800146c:	4013      	ands	r3, r2
 800146e:	2b00      	cmp	r3, #0
 8001470:	f47f af79 	bne.w	8001366 <HAL_RCC_OscConfig+0x8fa>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0304 	and.w	r3, r3, #4
 800147e:	2b00      	cmp	r3, #0
 8001480:	f000 81a1 	beq.w	80017c6 <HAL_RCC_OscConfig+0xd5a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001484:	2300      	movs	r3, #0
 8001486:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800148a:	4b72      	ldr	r3, [pc, #456]	; (8001654 <HAL_RCC_OscConfig+0xbe8>)
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d112      	bne.n	80014bc <HAL_RCC_OscConfig+0xa50>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001496:	4a6f      	ldr	r2, [pc, #444]	; (8001654 <HAL_RCC_OscConfig+0xbe8>)
 8001498:	4b6e      	ldr	r3, [pc, #440]	; (8001654 <HAL_RCC_OscConfig+0xbe8>)
 800149a:	69db      	ldr	r3, [r3, #28]
 800149c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a0:	61d3      	str	r3, [r2, #28]
 80014a2:	4b6c      	ldr	r3, [pc, #432]	; (8001654 <HAL_RCC_OscConfig+0xbe8>)
 80014a4:	69db      	ldr	r3, [r3, #28]
 80014a6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80014aa:	f107 030c 	add.w	r3, r7, #12
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	f107 030c 	add.w	r3, r7, #12
 80014b4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80014b6:	2301      	movs	r3, #1
 80014b8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014bc:	4b66      	ldr	r3, [pc, #408]	; (8001658 <HAL_RCC_OscConfig+0xbec>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d11a      	bne.n	80014fe <HAL_RCC_OscConfig+0xa92>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014c8:	4a63      	ldr	r2, [pc, #396]	; (8001658 <HAL_RCC_OscConfig+0xbec>)
 80014ca:	4b63      	ldr	r3, [pc, #396]	; (8001658 <HAL_RCC_OscConfig+0xbec>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014d4:	f7ff f99a 	bl	800080c <HAL_GetTick>
 80014d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014dc:	e009      	b.n	80014f2 <HAL_RCC_OscConfig+0xa86>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014de:	f7ff f995 	bl	800080c <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b64      	cmp	r3, #100	; 0x64
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0xa86>
        {
          return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e383      	b.n	8001bfa <HAL_RCC_OscConfig+0x118e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f2:	4b59      	ldr	r3, [pc, #356]	; (8001658 <HAL_RCC_OscConfig+0xbec>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d0ef      	beq.n	80014de <HAL_RCC_OscConfig+0xa72>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014fe:	1d3b      	adds	r3, r7, #4
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d106      	bne.n	8001516 <HAL_RCC_OscConfig+0xaaa>
 8001508:	4a52      	ldr	r2, [pc, #328]	; (8001654 <HAL_RCC_OscConfig+0xbe8>)
 800150a:	4b52      	ldr	r3, [pc, #328]	; (8001654 <HAL_RCC_OscConfig+0xbe8>)
 800150c:	6a1b      	ldr	r3, [r3, #32]
 800150e:	f043 0301 	orr.w	r3, r3, #1
 8001512:	6213      	str	r3, [r2, #32]
 8001514:	e02f      	b.n	8001576 <HAL_RCC_OscConfig+0xb0a>
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d10c      	bne.n	800153a <HAL_RCC_OscConfig+0xace>
 8001520:	4a4c      	ldr	r2, [pc, #304]	; (8001654 <HAL_RCC_OscConfig+0xbe8>)
 8001522:	4b4c      	ldr	r3, [pc, #304]	; (8001654 <HAL_RCC_OscConfig+0xbe8>)
 8001524:	6a1b      	ldr	r3, [r3, #32]
 8001526:	f023 0301 	bic.w	r3, r3, #1
 800152a:	6213      	str	r3, [r2, #32]
 800152c:	4a49      	ldr	r2, [pc, #292]	; (8001654 <HAL_RCC_OscConfig+0xbe8>)
 800152e:	4b49      	ldr	r3, [pc, #292]	; (8001654 <HAL_RCC_OscConfig+0xbe8>)
 8001530:	6a1b      	ldr	r3, [r3, #32]
 8001532:	f023 0304 	bic.w	r3, r3, #4
 8001536:	6213      	str	r3, [r2, #32]
 8001538:	e01d      	b.n	8001576 <HAL_RCC_OscConfig+0xb0a>
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	2b05      	cmp	r3, #5
 8001542:	d10c      	bne.n	800155e <HAL_RCC_OscConfig+0xaf2>
 8001544:	4a43      	ldr	r2, [pc, #268]	; (8001654 <HAL_RCC_OscConfig+0xbe8>)
 8001546:	4b43      	ldr	r3, [pc, #268]	; (8001654 <HAL_RCC_OscConfig+0xbe8>)
 8001548:	6a1b      	ldr	r3, [r3, #32]
 800154a:	f043 0304 	orr.w	r3, r3, #4
 800154e:	6213      	str	r3, [r2, #32]
 8001550:	4a40      	ldr	r2, [pc, #256]	; (8001654 <HAL_RCC_OscConfig+0xbe8>)
 8001552:	4b40      	ldr	r3, [pc, #256]	; (8001654 <HAL_RCC_OscConfig+0xbe8>)
 8001554:	6a1b      	ldr	r3, [r3, #32]
 8001556:	f043 0301 	orr.w	r3, r3, #1
 800155a:	6213      	str	r3, [r2, #32]
 800155c:	e00b      	b.n	8001576 <HAL_RCC_OscConfig+0xb0a>
 800155e:	4a3d      	ldr	r2, [pc, #244]	; (8001654 <HAL_RCC_OscConfig+0xbe8>)
 8001560:	4b3c      	ldr	r3, [pc, #240]	; (8001654 <HAL_RCC_OscConfig+0xbe8>)
 8001562:	6a1b      	ldr	r3, [r3, #32]
 8001564:	f023 0301 	bic.w	r3, r3, #1
 8001568:	6213      	str	r3, [r2, #32]
 800156a:	4a3a      	ldr	r2, [pc, #232]	; (8001654 <HAL_RCC_OscConfig+0xbe8>)
 800156c:	4b39      	ldr	r3, [pc, #228]	; (8001654 <HAL_RCC_OscConfig+0xbe8>)
 800156e:	6a1b      	ldr	r3, [r3, #32]
 8001570:	f023 0304 	bic.w	r3, r3, #4
 8001574:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001576:	1d3b      	adds	r3, r7, #4
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	2b00      	cmp	r3, #0
 800157e:	f000 808f 	beq.w	80016a0 <HAL_RCC_OscConfig+0xc34>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001582:	f7ff f943 	bl	800080c <HAL_GetTick>
 8001586:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800158a:	e00b      	b.n	80015a4 <HAL_RCC_OscConfig+0xb38>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800158c:	f7ff f93e 	bl	800080c <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	f241 3288 	movw	r2, #5000	; 0x1388
 800159c:	4293      	cmp	r3, r2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0xb38>
        {
          return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e32a      	b.n	8001bfa <HAL_RCC_OscConfig+0x118e>
 80015a4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80015a8:	2202      	movs	r2, #2
 80015aa:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ac:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	fa93 f2a3 	rbit	r2, r3
 80015b6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80015ba:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80015bc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80015c0:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015c2:	fab3 f383 	clz	r3, r3
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	095b      	lsrs	r3, r3, #5
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d102      	bne.n	80015de <HAL_RCC_OscConfig+0xb72>
 80015d8:	4b1e      	ldr	r3, [pc, #120]	; (8001654 <HAL_RCC_OscConfig+0xbe8>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	e040      	b.n	8001660 <HAL_RCC_OscConfig+0xbf4>
 80015de:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80015e2:	2202      	movs	r2, #2
 80015e4:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	fa93 f2a3 	rbit	r2, r3
 80015f0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80015f4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80015f6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	fab3 f383 	clz	r3, r3
 8001600:	b2db      	uxtb	r3, r3
 8001602:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001606:	b2db      	uxtb	r3, r3
 8001608:	b2db      	uxtb	r3, r3
 800160a:	095b      	lsrs	r3, r3, #5
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d102      	bne.n	8001618 <HAL_RCC_OscConfig+0xbac>
 8001612:	4b10      	ldr	r3, [pc, #64]	; (8001654 <HAL_RCC_OscConfig+0xbe8>)
 8001614:	6a1b      	ldr	r3, [r3, #32]
 8001616:	e023      	b.n	8001660 <HAL_RCC_OscConfig+0xbf4>
 8001618:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800161c:	2202      	movs	r2, #2
 800161e:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001620:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	fa93 f2a3 	rbit	r2, r3
 800162a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800162e:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001630:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	fab3 f383 	clz	r3, r3
 800163a:	b2db      	uxtb	r3, r3
 800163c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001640:	b2db      	uxtb	r3, r3
 8001642:	b2db      	uxtb	r3, r3
 8001644:	095b      	lsrs	r3, r3, #5
 8001646:	b2db      	uxtb	r3, r3
 8001648:	2b04      	cmp	r3, #4
 800164a:	d107      	bne.n	800165c <HAL_RCC_OscConfig+0xbf0>
 800164c:	4b01      	ldr	r3, [pc, #4]	; (8001654 <HAL_RCC_OscConfig+0xbe8>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	e006      	b.n	8001660 <HAL_RCC_OscConfig+0xbf4>
 8001652:	bf00      	nop
 8001654:	40021000 	.word	0x40021000
 8001658:	40007000 	.word	0x40007000
 800165c:	4ba5      	ldr	r3, [pc, #660]	; (80018f4 <HAL_RCC_OscConfig+0xe88>)
 800165e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001660:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001664:	2102      	movs	r1, #2
 8001666:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001668:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800166c:	6812      	ldr	r2, [r2, #0]
 800166e:	fa92 f1a2 	rbit	r1, r2
 8001672:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001676:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001678:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800167c:	6812      	ldr	r2, [r2, #0]
 800167e:	fab2 f282 	clz	r2, r2
 8001682:	b2d2      	uxtb	r2, r2
 8001684:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001688:	b2d2      	uxtb	r2, r2
 800168a:	b2d2      	uxtb	r2, r2
 800168c:	f002 021f 	and.w	r2, r2, #31
 8001690:	2101      	movs	r1, #1
 8001692:	fa01 f202 	lsl.w	r2, r1, r2
 8001696:	4013      	ands	r3, r2
 8001698:	2b00      	cmp	r3, #0
 800169a:	f43f af77 	beq.w	800158c <HAL_RCC_OscConfig+0xb20>
 800169e:	e088      	b.n	80017b2 <HAL_RCC_OscConfig+0xd46>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016a0:	f7ff f8b4 	bl	800080c <HAL_GetTick>
 80016a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016a8:	e00b      	b.n	80016c2 <HAL_RCC_OscConfig+0xc56>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016aa:	f7ff f8af 	bl	800080c <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0xc56>
        {
          return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e29b      	b.n	8001bfa <HAL_RCC_OscConfig+0x118e>
 80016c2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016c6:	2202      	movs	r2, #2
 80016c8:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	fa93 f2a3 	rbit	r2, r3
 80016d4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80016d8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80016da:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80016de:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016e0:	fab3 f383 	clz	r3, r3
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	095b      	lsrs	r3, r3, #5
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d102      	bne.n	80016fc <HAL_RCC_OscConfig+0xc90>
 80016f6:	4b7f      	ldr	r3, [pc, #508]	; (80018f4 <HAL_RCC_OscConfig+0xe88>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	e03b      	b.n	8001774 <HAL_RCC_OscConfig+0xd08>
 80016fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001700:	2202      	movs	r2, #2
 8001702:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001704:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	fa93 f2a3 	rbit	r2, r3
 800170e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001712:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001714:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	fab3 f383 	clz	r3, r3
 800171e:	b2db      	uxtb	r3, r3
 8001720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001724:	b2db      	uxtb	r3, r3
 8001726:	b2db      	uxtb	r3, r3
 8001728:	095b      	lsrs	r3, r3, #5
 800172a:	b2db      	uxtb	r3, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d102      	bne.n	8001736 <HAL_RCC_OscConfig+0xcca>
 8001730:	4b70      	ldr	r3, [pc, #448]	; (80018f4 <HAL_RCC_OscConfig+0xe88>)
 8001732:	6a1b      	ldr	r3, [r3, #32]
 8001734:	e01e      	b.n	8001774 <HAL_RCC_OscConfig+0xd08>
 8001736:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800173a:	2202      	movs	r2, #2
 800173c:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	fa93 f2a3 	rbit	r2, r3
 8001748:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800174c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800174e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	fab3 f383 	clz	r3, r3
 8001758:	b2db      	uxtb	r3, r3
 800175a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800175e:	b2db      	uxtb	r3, r3
 8001760:	b2db      	uxtb	r3, r3
 8001762:	095b      	lsrs	r3, r3, #5
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b04      	cmp	r3, #4
 8001768:	d102      	bne.n	8001770 <HAL_RCC_OscConfig+0xd04>
 800176a:	4b62      	ldr	r3, [pc, #392]	; (80018f4 <HAL_RCC_OscConfig+0xe88>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	e001      	b.n	8001774 <HAL_RCC_OscConfig+0xd08>
 8001770:	4b60      	ldr	r3, [pc, #384]	; (80018f4 <HAL_RCC_OscConfig+0xe88>)
 8001772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001774:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001778:	2102      	movs	r1, #2
 800177a:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177c:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001780:	6812      	ldr	r2, [r2, #0]
 8001782:	fa92 f1a2 	rbit	r1, r2
 8001786:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800178a:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800178c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001790:	6812      	ldr	r2, [r2, #0]
 8001792:	fab2 f282 	clz	r2, r2
 8001796:	b2d2      	uxtb	r2, r2
 8001798:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800179c:	b2d2      	uxtb	r2, r2
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	f002 021f 	and.w	r2, r2, #31
 80017a4:	2101      	movs	r1, #1
 80017a6:	fa01 f202 	lsl.w	r2, r1, r2
 80017aa:	4013      	ands	r3, r2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f47f af7c 	bne.w	80016aa <HAL_RCC_OscConfig+0xc3e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017b2:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d105      	bne.n	80017c6 <HAL_RCC_OscConfig+0xd5a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ba:	4a4e      	ldr	r2, [pc, #312]	; (80018f4 <HAL_RCC_OscConfig+0xe88>)
 80017bc:	4b4d      	ldr	r3, [pc, #308]	; (80018f4 <HAL_RCC_OscConfig+0xe88>)
 80017be:	69db      	ldr	r3, [r3, #28]
 80017c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017c4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017c6:	1d3b      	adds	r3, r7, #4
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	69db      	ldr	r3, [r3, #28]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 8213 	beq.w	8001bf8 <HAL_RCC_OscConfig+0x118c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017d2:	4b48      	ldr	r3, [pc, #288]	; (80018f4 <HAL_RCC_OscConfig+0xe88>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f003 030c 	and.w	r3, r3, #12
 80017da:	2b08      	cmp	r3, #8
 80017dc:	f000 8208 	beq.w	8001bf0 <HAL_RCC_OscConfig+0x1184>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017e0:	1d3b      	adds	r3, r7, #4
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	f040 815c 	bne.w	8001aa4 <HAL_RCC_OscConfig+0x1038>
 80017ec:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80017f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80017f4:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	fa93 f2a3 	rbit	r2, r3
 8001800:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001804:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001806:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800180a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800180c:	fab3 f383 	clz	r3, r3
 8001810:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001814:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	461a      	mov	r2, r3
 800181c:	2300      	movs	r3, #0
 800181e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001820:	f7fe fff4 	bl	800080c <HAL_GetTick>
 8001824:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001828:	e009      	b.n	800183e <HAL_RCC_OscConfig+0xdd2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800182a:	f7fe ffef 	bl	800080c <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b02      	cmp	r3, #2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0xdd2>
          {
            return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e1dd      	b.n	8001bfa <HAL_RCC_OscConfig+0x118e>
 800183e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001842:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001846:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001848:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	fa93 f2a3 	rbit	r2, r3
 8001852:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001856:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001858:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800185c:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800185e:	fab3 f383 	clz	r3, r3
 8001862:	b2db      	uxtb	r3, r3
 8001864:	f043 0320 	orr.w	r3, r3, #32
 8001868:	b2db      	uxtb	r3, r3
 800186a:	b2db      	uxtb	r3, r3
 800186c:	095b      	lsrs	r3, r3, #5
 800186e:	b2db      	uxtb	r3, r3
 8001870:	2b01      	cmp	r3, #1
 8001872:	d102      	bne.n	800187a <HAL_RCC_OscConfig+0xe0e>
 8001874:	4b1f      	ldr	r3, [pc, #124]	; (80018f4 <HAL_RCC_OscConfig+0xe88>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	e040      	b.n	80018fc <HAL_RCC_OscConfig+0xe90>
 800187a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800187e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001882:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001884:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	fa93 f2a3 	rbit	r2, r3
 800188e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001892:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001894:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	fab3 f383 	clz	r3, r3
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	f043 0320 	orr.w	r3, r3, #32
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	095b      	lsrs	r3, r3, #5
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d102      	bne.n	80018b6 <HAL_RCC_OscConfig+0xe4a>
 80018b0:	4b10      	ldr	r3, [pc, #64]	; (80018f4 <HAL_RCC_OscConfig+0xe88>)
 80018b2:	6a1b      	ldr	r3, [r3, #32]
 80018b4:	e022      	b.n	80018fc <HAL_RCC_OscConfig+0xe90>
 80018b6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80018ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018be:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	fa93 f2a3 	rbit	r2, r3
 80018ca:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80018ce:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80018d0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	fab3 f383 	clz	r3, r3
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	f043 0320 	orr.w	r3, r3, #32
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	095b      	lsrs	r3, r3, #5
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	2b04      	cmp	r3, #4
 80018ea:	d105      	bne.n	80018f8 <HAL_RCC_OscConfig+0xe8c>
 80018ec:	4b01      	ldr	r3, [pc, #4]	; (80018f4 <HAL_RCC_OscConfig+0xe88>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	e004      	b.n	80018fc <HAL_RCC_OscConfig+0xe90>
 80018f2:	bf00      	nop
 80018f4:	40021000 	.word	0x40021000
 80018f8:	4bbe      	ldr	r3, [pc, #760]	; (8001bf4 <HAL_RCC_OscConfig+0x1188>)
 80018fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fc:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001900:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001904:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001906:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800190a:	6812      	ldr	r2, [r2, #0]
 800190c:	fa92 f1a2 	rbit	r1, r2
 8001910:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001914:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001916:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800191a:	6812      	ldr	r2, [r2, #0]
 800191c:	fab2 f282 	clz	r2, r2
 8001920:	b2d2      	uxtb	r2, r2
 8001922:	f042 0220 	orr.w	r2, r2, #32
 8001926:	b2d2      	uxtb	r2, r2
 8001928:	b2d2      	uxtb	r2, r2
 800192a:	f002 021f 	and.w	r2, r2, #31
 800192e:	2101      	movs	r1, #1
 8001930:	fa01 f202 	lsl.w	r2, r1, r2
 8001934:	4013      	ands	r3, r2
 8001936:	2b00      	cmp	r3, #0
 8001938:	f47f af77 	bne.w	800182a <HAL_RCC_OscConfig+0xdbe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800193c:	48ad      	ldr	r0, [pc, #692]	; (8001bf4 <HAL_RCC_OscConfig+0x1188>)
 800193e:	4bad      	ldr	r3, [pc, #692]	; (8001bf4 <HAL_RCC_OscConfig+0x1188>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001946:	1d3b      	adds	r3, r7, #4
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800194c:	1d3b      	adds	r3, r7, #4
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6a1b      	ldr	r3, [r3, #32]
 8001952:	430b      	orrs	r3, r1
 8001954:	4313      	orrs	r3, r2
 8001956:	6043      	str	r3, [r0, #4]
 8001958:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800195c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001960:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001962:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	fa93 f2a3 	rbit	r2, r3
 800196c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001970:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001972:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001976:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001978:	fab3 f383 	clz	r3, r3
 800197c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001980:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	461a      	mov	r2, r3
 8001988:	2301      	movs	r3, #1
 800198a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198c:	f7fe ff3e 	bl	800080c <HAL_GetTick>
 8001990:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001994:	e009      	b.n	80019aa <HAL_RCC_OscConfig+0xf3e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001996:	f7fe ff39 	bl	800080c <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0xf3e>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e127      	b.n	8001bfa <HAL_RCC_OscConfig+0x118e>
 80019aa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019b2:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	fa93 f2a3 	rbit	r2, r3
 80019be:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80019c2:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80019c4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80019c8:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019ca:	fab3 f383 	clz	r3, r3
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	f043 0320 	orr.w	r3, r3, #32
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	095b      	lsrs	r3, r3, #5
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d102      	bne.n	80019e6 <HAL_RCC_OscConfig+0xf7a>
 80019e0:	4b84      	ldr	r3, [pc, #528]	; (8001bf4 <HAL_RCC_OscConfig+0x1188>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	e03d      	b.n	8001a62 <HAL_RCC_OscConfig+0xff6>
 80019e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019ee:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	fa93 f2a3 	rbit	r2, r3
 80019fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80019fe:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001a00:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	fab3 f383 	clz	r3, r3
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	f043 0320 	orr.w	r3, r3, #32
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	095b      	lsrs	r3, r3, #5
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d102      	bne.n	8001a22 <HAL_RCC_OscConfig+0xfb6>
 8001a1c:	4b75      	ldr	r3, [pc, #468]	; (8001bf4 <HAL_RCC_OscConfig+0x1188>)
 8001a1e:	6a1b      	ldr	r3, [r3, #32]
 8001a20:	e01f      	b.n	8001a62 <HAL_RCC_OscConfig+0xff6>
 8001a22:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a2a:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	fa93 f2a3 	rbit	r2, r3
 8001a36:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a3a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001a3c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	fab3 f383 	clz	r3, r3
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	f043 0320 	orr.w	r3, r3, #32
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	095b      	lsrs	r3, r3, #5
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	2b04      	cmp	r3, #4
 8001a56:	d102      	bne.n	8001a5e <HAL_RCC_OscConfig+0xff2>
 8001a58:	4b66      	ldr	r3, [pc, #408]	; (8001bf4 <HAL_RCC_OscConfig+0x1188>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	e001      	b.n	8001a62 <HAL_RCC_OscConfig+0xff6>
 8001a5e:	4b65      	ldr	r3, [pc, #404]	; (8001bf4 <HAL_RCC_OscConfig+0x1188>)
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001a66:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a6a:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001a70:	6812      	ldr	r2, [r2, #0]
 8001a72:	fa92 f1a2 	rbit	r1, r2
 8001a76:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001a7a:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001a7c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001a80:	6812      	ldr	r2, [r2, #0]
 8001a82:	fab2 f282 	clz	r2, r2
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	f042 0220 	orr.w	r2, r2, #32
 8001a8c:	b2d2      	uxtb	r2, r2
 8001a8e:	b2d2      	uxtb	r2, r2
 8001a90:	f002 021f 	and.w	r2, r2, #31
 8001a94:	2101      	movs	r1, #1
 8001a96:	fa01 f202 	lsl.w	r2, r1, r2
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f43f af7a 	beq.w	8001996 <HAL_RCC_OscConfig+0xf2a>
 8001aa2:	e0a9      	b.n	8001bf8 <HAL_RCC_OscConfig+0x118c>
 8001aa4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001aa8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001aac:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	fa93 f2a3 	rbit	r2, r3
 8001ab8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001abc:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001abe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ac2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac4:	fab3 f383 	clz	r3, r3
 8001ac8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001acc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad8:	f7fe fe98 	bl	800080c <HAL_GetTick>
 8001adc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ae0:	e009      	b.n	8001af6 <HAL_RCC_OscConfig+0x108a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ae2:	f7fe fe93 	bl	800080c <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x108a>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e081      	b.n	8001bfa <HAL_RCC_OscConfig+0x118e>
 8001af6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001afa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001afe:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	fa93 f2a3 	rbit	r2, r3
 8001b0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b0e:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001b10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b14:	681b      	ldr	r3, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b16:	fab3 f383 	clz	r3, r3
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	f043 0320 	orr.w	r3, r3, #32
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	095b      	lsrs	r3, r3, #5
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d102      	bne.n	8001b32 <HAL_RCC_OscConfig+0x10c6>
 8001b2c:	4b31      	ldr	r3, [pc, #196]	; (8001bf4 <HAL_RCC_OscConfig+0x1188>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	e03d      	b.n	8001bae <HAL_RCC_OscConfig+0x1142>
 8001b32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b3a:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	fa93 f2a3 	rbit	r2, r3
 8001b46:	f107 0320 	add.w	r3, r7, #32
 8001b4a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001b4c:	f107 0320 	add.w	r3, r7, #32
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	fab3 f383 	clz	r3, r3
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	f043 0320 	orr.w	r3, r3, #32
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	095b      	lsrs	r3, r3, #5
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d102      	bne.n	8001b6e <HAL_RCC_OscConfig+0x1102>
 8001b68:	4b22      	ldr	r3, [pc, #136]	; (8001bf4 <HAL_RCC_OscConfig+0x1188>)
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	e01f      	b.n	8001bae <HAL_RCC_OscConfig+0x1142>
 8001b6e:	f107 031c 	add.w	r3, r7, #28
 8001b72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b76:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b78:	f107 031c 	add.w	r3, r7, #28
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	fa93 f2a3 	rbit	r2, r3
 8001b82:	f107 0318 	add.w	r3, r7, #24
 8001b86:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001b88:	f107 0318 	add.w	r3, r7, #24
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	fab3 f383 	clz	r3, r3
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	f043 0320 	orr.w	r3, r3, #32
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	095b      	lsrs	r3, r3, #5
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	2b04      	cmp	r3, #4
 8001ba2:	d102      	bne.n	8001baa <HAL_RCC_OscConfig+0x113e>
 8001ba4:	4b13      	ldr	r3, [pc, #76]	; (8001bf4 <HAL_RCC_OscConfig+0x1188>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	e001      	b.n	8001bae <HAL_RCC_OscConfig+0x1142>
 8001baa:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <HAL_RCC_OscConfig+0x1188>)
 8001bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bae:	f107 0214 	add.w	r2, r7, #20
 8001bb2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001bb6:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb8:	f107 0214 	add.w	r2, r7, #20
 8001bbc:	6812      	ldr	r2, [r2, #0]
 8001bbe:	fa92 f1a2 	rbit	r1, r2
 8001bc2:	f107 0210 	add.w	r2, r7, #16
 8001bc6:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001bc8:	f107 0210 	add.w	r2, r7, #16
 8001bcc:	6812      	ldr	r2, [r2, #0]
 8001bce:	fab2 f282 	clz	r2, r2
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	f042 0220 	orr.w	r2, r2, #32
 8001bd8:	b2d2      	uxtb	r2, r2
 8001bda:	b2d2      	uxtb	r2, r2
 8001bdc:	f002 021f 	and.w	r2, r2, #31
 8001be0:	2101      	movs	r1, #1
 8001be2:	fa01 f202 	lsl.w	r2, r1, r2
 8001be6:	4013      	ands	r3, r2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f47f af7a 	bne.w	8001ae2 <HAL_RCC_OscConfig+0x1076>
 8001bee:	e003      	b.n	8001bf8 <HAL_RCC_OscConfig+0x118c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e002      	b.n	8001bfa <HAL_RCC_OscConfig+0x118e>
 8001bf4:	40021000 	.word	0x40021000
    }
  }
  
  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b09e      	sub	sp, #120	; 0x78
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	677b      	str	r3, [r7, #116]	; 0x74
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001c12:	4ba5      	ldr	r3, [pc, #660]	; (8001ea8 <HAL_RCC_ClockConfig+0x2a4>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0207 	and.w	r2, r3, #7
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d210      	bcs.n	8001c42 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c20:	49a1      	ldr	r1, [pc, #644]	; (8001ea8 <HAL_RCC_ClockConfig+0x2a4>)
 8001c22:	4ba1      	ldr	r3, [pc, #644]	; (8001ea8 <HAL_RCC_ClockConfig+0x2a4>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f023 0207 	bic.w	r2, r3, #7
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c30:	4b9d      	ldr	r3, [pc, #628]	; (8001ea8 <HAL_RCC_ClockConfig+0x2a4>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0207 	and.w	r2, r3, #7
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d001      	beq.n	8001c42 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e1d5      	b.n	8001fee <HAL_RCC_ClockConfig+0x3ea>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d008      	beq.n	8001c60 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c4e:	4997      	ldr	r1, [pc, #604]	; (8001eac <HAL_RCC_ClockConfig+0x2a8>)
 8001c50:	4b96      	ldr	r3, [pc, #600]	; (8001eac <HAL_RCC_ClockConfig+0x2a8>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f000 816d 	beq.w	8001f48 <HAL_RCC_ClockConfig+0x344>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d15d      	bne.n	8001d32 <HAL_RCC_ClockConfig+0x12e>
 8001c76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c7a:	673b      	str	r3, [r7, #112]	; 0x70
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c7e:	fa93 f3a3 	rbit	r3, r3
 8001c82:	66fb      	str	r3, [r7, #108]	; 0x6c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001c84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c86:	fab3 f383 	clz	r3, r3
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	f043 0320 	orr.w	r3, r3, #32
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	095b      	lsrs	r3, r3, #5
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d102      	bne.n	8001ca2 <HAL_RCC_ClockConfig+0x9e>
 8001c9c:	4b83      	ldr	r3, [pc, #524]	; (8001eac <HAL_RCC_ClockConfig+0x2a8>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	e02d      	b.n	8001cfe <HAL_RCC_ClockConfig+0xfa>
 8001ca2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ca6:	66bb      	str	r3, [r7, #104]	; 0x68
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001caa:	fa93 f3a3 	rbit	r3, r3
 8001cae:	667b      	str	r3, [r7, #100]	; 0x64
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001cb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001cb2:	fab3 f383 	clz	r3, r3
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	f043 0320 	orr.w	r3, r3, #32
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	095b      	lsrs	r3, r3, #5
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d102      	bne.n	8001cce <HAL_RCC_ClockConfig+0xca>
 8001cc8:	4b78      	ldr	r3, [pc, #480]	; (8001eac <HAL_RCC_ClockConfig+0x2a8>)
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	e017      	b.n	8001cfe <HAL_RCC_ClockConfig+0xfa>
 8001cce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cd2:	663b      	str	r3, [r7, #96]	; 0x60
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cd6:	fa93 f3a3 	rbit	r3, r3
 8001cda:	65fb      	str	r3, [r7, #92]	; 0x5c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001cdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cde:	fab3 f383 	clz	r3, r3
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	f043 0320 	orr.w	r3, r3, #32
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	095b      	lsrs	r3, r3, #5
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	2b04      	cmp	r3, #4
 8001cf2:	d102      	bne.n	8001cfa <HAL_RCC_ClockConfig+0xf6>
 8001cf4:	4b6d      	ldr	r3, [pc, #436]	; (8001eac <HAL_RCC_ClockConfig+0x2a8>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	e001      	b.n	8001cfe <HAL_RCC_ClockConfig+0xfa>
 8001cfa:	4b6c      	ldr	r3, [pc, #432]	; (8001eac <HAL_RCC_ClockConfig+0x2a8>)
 8001cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d02:	65ba      	str	r2, [r7, #88]	; 0x58
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001d06:	fa92 f2a2 	rbit	r2, r2
 8001d0a:	657a      	str	r2, [r7, #84]	; 0x54
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001d0c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d0e:	fab2 f282 	clz	r2, r2
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	f042 0220 	orr.w	r2, r2, #32
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	f002 021f 	and.w	r2, r2, #31
 8001d20:	2101      	movs	r1, #1
 8001d22:	fa01 f202 	lsl.w	r2, r1, r2
 8001d26:	4013      	ands	r3, r2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f040 80c1 	bne.w	8001eb0 <HAL_RCC_ClockConfig+0x2ac>
      {
        return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e15d      	b.n	8001fee <HAL_RCC_ClockConfig+0x3ea>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d15c      	bne.n	8001df4 <HAL_RCC_ClockConfig+0x1f0>
 8001d3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d3e:	653b      	str	r3, [r7, #80]	; 0x50
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d42:	fa93 f3a3 	rbit	r3, r3
 8001d46:	64fb      	str	r3, [r7, #76]	; 0x4c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001d48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d4a:	fab3 f383 	clz	r3, r3
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	f043 0320 	orr.w	r3, r3, #32
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	095b      	lsrs	r3, r3, #5
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d102      	bne.n	8001d66 <HAL_RCC_ClockConfig+0x162>
 8001d60:	4b52      	ldr	r3, [pc, #328]	; (8001eac <HAL_RCC_ClockConfig+0x2a8>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	e02d      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1be>
 8001d66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d6a:	64bb      	str	r3, [r7, #72]	; 0x48
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d6e:	fa93 f3a3 	rbit	r3, r3
 8001d72:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001d74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d76:	fab3 f383 	clz	r3, r3
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	f043 0320 	orr.w	r3, r3, #32
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	095b      	lsrs	r3, r3, #5
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d102      	bne.n	8001d92 <HAL_RCC_ClockConfig+0x18e>
 8001d8c:	4b47      	ldr	r3, [pc, #284]	; (8001eac <HAL_RCC_ClockConfig+0x2a8>)
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	e017      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1be>
 8001d92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d96:	643b      	str	r3, [r7, #64]	; 0x40
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d9a:	fa93 f3a3 	rbit	r3, r3
 8001d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001da2:	fab3 f383 	clz	r3, r3
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	f043 0320 	orr.w	r3, r3, #32
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	095b      	lsrs	r3, r3, #5
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2b04      	cmp	r3, #4
 8001db6:	d102      	bne.n	8001dbe <HAL_RCC_ClockConfig+0x1ba>
 8001db8:	4b3c      	ldr	r3, [pc, #240]	; (8001eac <HAL_RCC_ClockConfig+0x2a8>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	e001      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1be>
 8001dbe:	4b3b      	ldr	r3, [pc, #236]	; (8001eac <HAL_RCC_ClockConfig+0x2a8>)
 8001dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dc6:	63ba      	str	r2, [r7, #56]	; 0x38
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001dca:	fa92 f2a2 	rbit	r2, r2
 8001dce:	637a      	str	r2, [r7, #52]	; 0x34
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001dd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001dd2:	fab2 f282 	clz	r2, r2
 8001dd6:	b2d2      	uxtb	r2, r2
 8001dd8:	f042 0220 	orr.w	r2, r2, #32
 8001ddc:	b2d2      	uxtb	r2, r2
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	f002 021f 	and.w	r2, r2, #31
 8001de4:	2101      	movs	r1, #1
 8001de6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dea:	4013      	ands	r3, r2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d15f      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0x2ac>
      {
        return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e0fc      	b.n	8001fee <HAL_RCC_ClockConfig+0x3ea>
 8001df4:	2302      	movs	r3, #2
 8001df6:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dfa:	fa93 f3a3 	rbit	r3, r3
 8001dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e02:	fab3 f383 	clz	r3, r3
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	f043 0320 	orr.w	r3, r3, #32
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	095b      	lsrs	r3, r3, #5
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d102      	bne.n	8001e1e <HAL_RCC_ClockConfig+0x21a>
 8001e18:	4b24      	ldr	r3, [pc, #144]	; (8001eac <HAL_RCC_ClockConfig+0x2a8>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	e02b      	b.n	8001e76 <HAL_RCC_ClockConfig+0x272>
 8001e1e:	2302      	movs	r3, #2
 8001e20:	62bb      	str	r3, [r7, #40]	; 0x28
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e24:	fa93 f3a3 	rbit	r3, r3
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	fab3 f383 	clz	r3, r3
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	f043 0320 	orr.w	r3, r3, #32
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	095b      	lsrs	r3, r3, #5
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d102      	bne.n	8001e48 <HAL_RCC_ClockConfig+0x244>
 8001e42:	4b1a      	ldr	r3, [pc, #104]	; (8001eac <HAL_RCC_ClockConfig+0x2a8>)
 8001e44:	6a1b      	ldr	r3, [r3, #32]
 8001e46:	e016      	b.n	8001e76 <HAL_RCC_ClockConfig+0x272>
 8001e48:	2302      	movs	r3, #2
 8001e4a:	623b      	str	r3, [r7, #32]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4c:	6a3b      	ldr	r3, [r7, #32]
 8001e4e:	fa93 f3a3 	rbit	r3, r3
 8001e52:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	fab3 f383 	clz	r3, r3
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	f043 0320 	orr.w	r3, r3, #32
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	095b      	lsrs	r3, r3, #5
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b04      	cmp	r3, #4
 8001e6a:	d102      	bne.n	8001e72 <HAL_RCC_ClockConfig+0x26e>
 8001e6c:	4b0f      	ldr	r3, [pc, #60]	; (8001eac <HAL_RCC_ClockConfig+0x2a8>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	e001      	b.n	8001e76 <HAL_RCC_ClockConfig+0x272>
 8001e72:	4b0e      	ldr	r3, [pc, #56]	; (8001eac <HAL_RCC_ClockConfig+0x2a8>)
 8001e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e76:	2202      	movs	r2, #2
 8001e78:	61ba      	str	r2, [r7, #24]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	fa92 f2a2 	rbit	r2, r2
 8001e80:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001e82:	697a      	ldr	r2, [r7, #20]
 8001e84:	fab2 f282 	clz	r2, r2
 8001e88:	b2d2      	uxtb	r2, r2
 8001e8a:	f042 0220 	orr.w	r2, r2, #32
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	f002 021f 	and.w	r2, r2, #31
 8001e96:	2101      	movs	r1, #1
 8001e98:	fa01 f202 	lsl.w	r2, r1, r2
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d106      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0x2ac>
      {
        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e0a3      	b.n	8001fee <HAL_RCC_ClockConfig+0x3ea>
 8001ea6:	bf00      	nop
 8001ea8:	40022000 	.word	0x40022000
 8001eac:	40021000 	.word	0x40021000
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eb0:	4951      	ldr	r1, [pc, #324]	; (8001ff8 <HAL_RCC_ClockConfig+0x3f4>)
 8001eb2:	4b51      	ldr	r3, [pc, #324]	; (8001ff8 <HAL_RCC_ClockConfig+0x3f4>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f023 0203 	bic.w	r2, r3, #3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ec2:	f7fe fca3 	bl	800080c <HAL_GetTick>
 8001ec6:	6778      	str	r0, [r7, #116]	; 0x74
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d112      	bne.n	8001ef6 <HAL_RCC_ClockConfig+0x2f2>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ed0:	e00a      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x2e4>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ed2:	f7fe fc9b 	bl	800080c <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_ClockConfig+0x2e4>
        {
          return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e082      	b.n	8001fee <HAL_RCC_ClockConfig+0x3ea>
    /* Get Start Tick */
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ee8:	4b43      	ldr	r3, [pc, #268]	; (8001ff8 <HAL_RCC_ClockConfig+0x3f4>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f003 030c 	and.w	r3, r3, #12
 8001ef0:	2b04      	cmp	r3, #4
 8001ef2:	d1ee      	bne.n	8001ed2 <HAL_RCC_ClockConfig+0x2ce>
 8001ef4:	e028      	b.n	8001f48 <HAL_RCC_ClockConfig+0x344>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d112      	bne.n	8001f24 <HAL_RCC_ClockConfig+0x320>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001efe:	e00a      	b.n	8001f16 <HAL_RCC_ClockConfig+0x312>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f00:	f7fe fc84 	bl	800080c <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_ClockConfig+0x312>
        {
          return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e06b      	b.n	8001fee <HAL_RCC_ClockConfig+0x3ea>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f16:	4b38      	ldr	r3, [pc, #224]	; (8001ff8 <HAL_RCC_ClockConfig+0x3f4>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f003 030c 	and.w	r3, r3, #12
 8001f1e:	2b08      	cmp	r3, #8
 8001f20:	d1ee      	bne.n	8001f00 <HAL_RCC_ClockConfig+0x2fc>
 8001f22:	e011      	b.n	8001f48 <HAL_RCC_ClockConfig+0x344>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f24:	e00a      	b.n	8001f3c <HAL_RCC_ClockConfig+0x338>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f26:	f7fe fc71 	bl	800080c <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_ClockConfig+0x338>
        {
          return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e058      	b.n	8001fee <HAL_RCC_ClockConfig+0x3ea>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f3c:	4b2e      	ldr	r3, [pc, #184]	; (8001ff8 <HAL_RCC_ClockConfig+0x3f4>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f003 030c 	and.w	r3, r3, #12
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1ee      	bne.n	8001f26 <HAL_RCC_ClockConfig+0x322>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001f48:	4b2c      	ldr	r3, [pc, #176]	; (8001ffc <HAL_RCC_ClockConfig+0x3f8>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0207 	and.w	r2, r3, #7
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d910      	bls.n	8001f78 <HAL_RCC_ClockConfig+0x374>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f56:	4929      	ldr	r1, [pc, #164]	; (8001ffc <HAL_RCC_ClockConfig+0x3f8>)
 8001f58:	4b28      	ldr	r3, [pc, #160]	; (8001ffc <HAL_RCC_ClockConfig+0x3f8>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f023 0207 	bic.w	r2, r3, #7
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f66:	4b25      	ldr	r3, [pc, #148]	; (8001ffc <HAL_RCC_ClockConfig+0x3f8>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0207 	and.w	r2, r3, #7
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d001      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x374>
    {
      return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e03a      	b.n	8001fee <HAL_RCC_ClockConfig+0x3ea>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d008      	beq.n	8001f96 <HAL_RCC_ClockConfig+0x392>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f84:	491c      	ldr	r1, [pc, #112]	; (8001ff8 <HAL_RCC_ClockConfig+0x3f4>)
 8001f86:	4b1c      	ldr	r3, [pc, #112]	; (8001ff8 <HAL_RCC_ClockConfig+0x3f4>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0308 	and.w	r3, r3, #8
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d009      	beq.n	8001fb6 <HAL_RCC_ClockConfig+0x3b2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fa2:	4915      	ldr	r1, [pc, #84]	; (8001ff8 <HAL_RCC_ClockConfig+0x3f4>)
 8001fa4:	4b14      	ldr	r3, [pc, #80]	; (8001ff8 <HAL_RCC_ClockConfig+0x3f4>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001fb6:	f000 f827 	bl	8002008 <HAL_RCC_GetSysClockFreq>
 8001fba:	4601      	mov	r1, r0
 8001fbc:	4b0e      	ldr	r3, [pc, #56]	; (8001ff8 <HAL_RCC_ClockConfig+0x3f4>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001fc4:	23f0      	movs	r3, #240	; 0xf0
 8001fc6:	613b      	str	r3, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	fa93 f3a3 	rbit	r3, r3
 8001fce:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	fab3 f383 	clz	r3, r3
 8001fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001fda:	4a09      	ldr	r2, [pc, #36]	; (8002000 <HAL_RCC_ClockConfig+0x3fc>)
 8001fdc:	5cd3      	ldrb	r3, [r2, r3]
 8001fde:	fa21 f303 	lsr.w	r3, r1, r3
 8001fe2:	4a08      	ldr	r2, [pc, #32]	; (8002004 <HAL_RCC_ClockConfig+0x400>)
 8001fe4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	f7fe f996 	bl	8000318 <HAL_InitTick>
  
  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3778      	adds	r7, #120	; 0x78
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	40022000 	.word	0x40022000
 8002000:	08006264 	.word	0x08006264
 8002004:	20000000 	.word	0x20000000

08002008 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002008:	b480      	push	{r7}
 800200a:	b08b      	sub	sp, #44	; 0x2c
 800200c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800200e:	2300      	movs	r3, #0
 8002010:	61fb      	str	r3, [r7, #28]
 8002012:	2300      	movs	r3, #0
 8002014:	61bb      	str	r3, [r7, #24]
 8002016:	2300      	movs	r3, #0
 8002018:	627b      	str	r3, [r7, #36]	; 0x24
 800201a:	2300      	movs	r3, #0
 800201c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800201e:	2300      	movs	r3, #0
 8002020:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002022:	4b29      	ldr	r3, [pc, #164]	; (80020c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	f003 030c 	and.w	r3, r3, #12
 800202e:	2b04      	cmp	r3, #4
 8002030:	d002      	beq.n	8002038 <HAL_RCC_GetSysClockFreq+0x30>
 8002032:	2b08      	cmp	r3, #8
 8002034:	d003      	beq.n	800203e <HAL_RCC_GetSysClockFreq+0x36>
 8002036:	e03c      	b.n	80020b2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002038:	4b24      	ldr	r3, [pc, #144]	; (80020cc <HAL_RCC_GetSysClockFreq+0xc4>)
 800203a:	623b      	str	r3, [r7, #32]
      break;
 800203c:	e03c      	b.n	80020b8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002044:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8002048:	613b      	str	r3, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	fa93 f3a3 	rbit	r3, r3
 8002050:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	fab3 f383 	clz	r3, r3
 8002058:	fa22 f303 	lsr.w	r3, r2, r3
 800205c:	4a1c      	ldr	r2, [pc, #112]	; (80020d0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800205e:	5cd3      	ldrb	r3, [r2, r3]
 8002060:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002062:	4b19      	ldr	r3, [pc, #100]	; (80020c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002066:	f003 020f 	and.w	r2, r3, #15
 800206a:	230f      	movs	r3, #15
 800206c:	60bb      	str	r3, [r7, #8]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	fa93 f3a3 	rbit	r3, r3
 8002074:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	fab3 f383 	clz	r3, r3
 800207c:	fa22 f303 	lsr.w	r3, r2, r3
 8002080:	4a14      	ldr	r2, [pc, #80]	; (80020d4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002082:	5cd3      	ldrb	r3, [r2, r3]
 8002084:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d008      	beq.n	80020a2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8002090:	4a0e      	ldr	r2, [pc, #56]	; (80020cc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	fbb2 f3f3 	udiv	r3, r2, r3
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	fb02 f303 	mul.w	r3, r2, r3
 800209e:	627b      	str	r3, [r7, #36]	; 0x24
 80020a0:	e004      	b.n	80020ac <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	4a0c      	ldr	r2, [pc, #48]	; (80020d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 80020a6:	fb02 f303 	mul.w	r3, r2, r3
 80020aa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	623b      	str	r3, [r7, #32]
      break;
 80020b0:	e002      	b.n	80020b8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020b2:	4b06      	ldr	r3, [pc, #24]	; (80020cc <HAL_RCC_GetSysClockFreq+0xc4>)
 80020b4:	623b      	str	r3, [r7, #32]
      break;
 80020b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020b8:	6a3b      	ldr	r3, [r7, #32]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	372c      	adds	r7, #44	; 0x2c
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	40021000 	.word	0x40021000
 80020cc:	007a1200 	.word	0x007a1200
 80020d0:	0800627c 	.word	0x0800627c
 80020d4:	0800628c 	.word	0x0800628c
 80020d8:	003d0900 	.word	0x003d0900

080020dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020e0:	4b03      	ldr	r3, [pc, #12]	; (80020f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80020e2:	681b      	ldr	r3, [r3, #0]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	20000000 	.word	0x20000000

080020f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80020fa:	f7ff ffef 	bl	80020dc <HAL_RCC_GetHCLKFreq>
 80020fe:	4601      	mov	r1, r0
 8002100:	4b0b      	ldr	r3, [pc, #44]	; (8002130 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002108:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800210c:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	fa93 f3a3 	rbit	r3, r3
 8002114:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	fab3 f383 	clz	r3, r3
 800211c:	fa22 f303 	lsr.w	r3, r2, r3
 8002120:	4a04      	ldr	r2, [pc, #16]	; (8002134 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002122:	5cd3      	ldrb	r3, [r2, r3]
 8002124:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002128:	4618      	mov	r0, r3
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40021000 	.word	0x40021000
 8002134:	08006274 	.word	0x08006274

08002138 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800213e:	f7ff ffcd 	bl	80020dc <HAL_RCC_GetHCLKFreq>
 8002142:	4601      	mov	r1, r0
 8002144:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 800214c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002150:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	fa93 f3a3 	rbit	r3, r3
 8002158:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	fab3 f383 	clz	r3, r3
 8002160:	fa22 f303 	lsr.w	r3, r2, r3
 8002164:	4a04      	ldr	r2, [pc, #16]	; (8002178 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002166:	5cd3      	ldrb	r3, [r2, r3]
 8002168:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800216c:	4618      	mov	r0, r3
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40021000 	.word	0x40021000
 8002178:	08006274 	.word	0x08006274

0800217c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	220f      	movs	r2, #15
 800218a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800218c:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <HAL_RCC_GetClockConfig+0x58>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 0203 	and.w	r2, r3, #3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002198:	4b0e      	ldr	r3, [pc, #56]	; (80021d4 <HAL_RCC_GetClockConfig+0x58>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80021a4:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <HAL_RCC_GetClockConfig+0x58>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80021b0:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <HAL_RCC_GetClockConfig+0x58>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80021b8:	08da      	lsrs	r2, r3, #3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80021be:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <HAL_RCC_GetClockConfig+0x5c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0207 	and.w	r2, r3, #7
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	601a      	str	r2, [r3, #0]
}
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	40021000 	.word	0x40021000
 80021d8:	40022000 	.word	0x40022000

080021dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021dc:	b480      	push	{r7}
 80021de:	b087      	sub	sp, #28
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021ea:	2300      	movs	r3, #0
 80021ec:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80021f2:	e14a      	b.n	800248a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	2101      	movs	r1, #1
 80021fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002200:	4013      	ands	r3, r2
 8002202:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2b00      	cmp	r3, #0
 8002208:	f000 813c 	beq.w	8002484 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	2b02      	cmp	r3, #2
 8002212:	d003      	beq.n	800221c <HAL_GPIO_Init+0x40>
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	2b12      	cmp	r3, #18
 800221a:	d122      	bne.n	8002262 <HAL_GPIO_Init+0x86>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	08da      	lsrs	r2, r3, #3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3208      	adds	r2, #8
 8002224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002228:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	461a      	mov	r2, r3
 8002234:	230f      	movs	r3, #15
 8002236:	4093      	lsls	r3, r2
 8002238:	43db      	mvns	r3, r3
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	4013      	ands	r3, r2
 800223e:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	f002 0207 	and.w	r2, r2, #7
 800224a:	0092      	lsls	r2, r2, #2
 800224c:	4093      	lsls	r3, r2
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	4313      	orrs	r3, r2
 8002252:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	08da      	lsrs	r2, r3, #3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3208      	adds	r2, #8
 800225c:	6939      	ldr	r1, [r7, #16]
 800225e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	461a      	mov	r2, r3
 800226e:	2303      	movs	r3, #3
 8002270:	4093      	lsls	r3, r2
 8002272:	43db      	mvns	r3, r3
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	4013      	ands	r3, r2
 8002278:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f003 0303 	and.w	r3, r3, #3
 8002282:	697a      	ldr	r2, [r7, #20]
 8002284:	0052      	lsls	r2, r2, #1
 8002286:	4093      	lsls	r3, r2
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	4313      	orrs	r3, r2
 800228c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d00b      	beq.n	80022b4 <HAL_GPIO_Init+0xd8>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d007      	beq.n	80022b4 <HAL_GPIO_Init+0xd8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022a8:	2b11      	cmp	r3, #17
 80022aa:	d003      	beq.n	80022b4 <HAL_GPIO_Init+0xd8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	2b12      	cmp	r3, #18
 80022b2:	d12f      	bne.n	8002314 <HAL_GPIO_Init+0x138>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	461a      	mov	r2, r3
 80022c0:	2303      	movs	r3, #3
 80022c2:	4093      	lsls	r3, r2
 80022c4:	43db      	mvns	r3, r3
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	4013      	ands	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	0052      	lsls	r2, r2, #1
 80022d4:	4093      	lsls	r3, r2
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	4313      	orrs	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	2201      	movs	r2, #1
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	4013      	ands	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 0310 	and.w	r3, r3, #16
 8002300:	091a      	lsrs	r2, r3, #4
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	4313      	orrs	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	461a      	mov	r2, r3
 8002320:	2303      	movs	r3, #3
 8002322:	4093      	lsls	r3, r2
 8002324:	43db      	mvns	r3, r3
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	4013      	ands	r3, r2
 800232a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	0052      	lsls	r2, r2, #1
 8002334:	4093      	lsls	r3, r2
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	4313      	orrs	r3, r2
 800233a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234a:	2b00      	cmp	r3, #0
 800234c:	f000 809a 	beq.w	8002484 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002350:	4a54      	ldr	r2, [pc, #336]	; (80024a4 <HAL_GPIO_Init+0x2c8>)
 8002352:	4b54      	ldr	r3, [pc, #336]	; (80024a4 <HAL_GPIO_Init+0x2c8>)
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	f043 0301 	orr.w	r3, r3, #1
 800235a:	6193      	str	r3, [r2, #24]
 800235c:	4b51      	ldr	r3, [pc, #324]	; (80024a4 <HAL_GPIO_Init+0x2c8>)
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	60bb      	str	r3, [r7, #8]
 8002366:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002368:	4a4f      	ldr	r2, [pc, #316]	; (80024a8 <HAL_GPIO_Init+0x2cc>)
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	089b      	lsrs	r3, r3, #2
 800236e:	3302      	adds	r3, #2
 8002370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002374:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	f003 0303 	and.w	r3, r3, #3
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	461a      	mov	r2, r3
 8002380:	230f      	movs	r3, #15
 8002382:	4093      	lsls	r3, r2
 8002384:	43db      	mvns	r3, r3
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	4013      	ands	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002392:	d013      	beq.n	80023bc <HAL_GPIO_Init+0x1e0>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a45      	ldr	r2, [pc, #276]	; (80024ac <HAL_GPIO_Init+0x2d0>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d00d      	beq.n	80023b8 <HAL_GPIO_Init+0x1dc>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a44      	ldr	r2, [pc, #272]	; (80024b0 <HAL_GPIO_Init+0x2d4>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d007      	beq.n	80023b4 <HAL_GPIO_Init+0x1d8>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a43      	ldr	r2, [pc, #268]	; (80024b4 <HAL_GPIO_Init+0x2d8>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d101      	bne.n	80023b0 <HAL_GPIO_Init+0x1d4>
 80023ac:	2303      	movs	r3, #3
 80023ae:	e006      	b.n	80023be <HAL_GPIO_Init+0x1e2>
 80023b0:	2305      	movs	r3, #5
 80023b2:	e004      	b.n	80023be <HAL_GPIO_Init+0x1e2>
 80023b4:	2302      	movs	r3, #2
 80023b6:	e002      	b.n	80023be <HAL_GPIO_Init+0x1e2>
 80023b8:	2301      	movs	r3, #1
 80023ba:	e000      	b.n	80023be <HAL_GPIO_Init+0x1e2>
 80023bc:	2300      	movs	r3, #0
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	f002 0203 	and.w	r2, r2, #3
 80023c4:	0092      	lsls	r2, r2, #2
 80023c6:	4093      	lsls	r3, r2
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80023ce:	4936      	ldr	r1, [pc, #216]	; (80024a8 <HAL_GPIO_Init+0x2cc>)
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	089b      	lsrs	r3, r3, #2
 80023d4:	3302      	adds	r3, #2
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023dc:	4b36      	ldr	r3, [pc, #216]	; (80024b8 <HAL_GPIO_Init+0x2dc>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	43db      	mvns	r3, r3
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	4013      	ands	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d003      	beq.n	8002400 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002400:	4a2d      	ldr	r2, [pc, #180]	; (80024b8 <HAL_GPIO_Init+0x2dc>)
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002406:	4b2c      	ldr	r3, [pc, #176]	; (80024b8 <HAL_GPIO_Init+0x2dc>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	43db      	mvns	r3, r3
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	4013      	ands	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	4313      	orrs	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800242a:	4a23      	ldr	r2, [pc, #140]	; (80024b8 <HAL_GPIO_Init+0x2dc>)
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002430:	4b21      	ldr	r3, [pc, #132]	; (80024b8 <HAL_GPIO_Init+0x2dc>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	43db      	mvns	r3, r3
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	4013      	ands	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d003      	beq.n	8002454 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	4313      	orrs	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002454:	4a18      	ldr	r2, [pc, #96]	; (80024b8 <HAL_GPIO_Init+0x2dc>)
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800245a:	4b17      	ldr	r3, [pc, #92]	; (80024b8 <HAL_GPIO_Init+0x2dc>)
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	43db      	mvns	r3, r3
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	4013      	ands	r3, r2
 8002468:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	4313      	orrs	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800247e:	4a0e      	ldr	r2, [pc, #56]	; (80024b8 <HAL_GPIO_Init+0x2dc>)
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	3301      	adds	r3, #1
 8002488:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	fa22 f303 	lsr.w	r3, r2, r3
 8002494:	2b00      	cmp	r3, #0
 8002496:	f47f aead 	bne.w	80021f4 <HAL_GPIO_Init+0x18>
      }
    }
    
    position++;
  }
}
 800249a:	371c      	adds	r7, #28
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	40021000 	.word	0x40021000
 80024a8:	40010000 	.word	0x40010000
 80024ac:	48000400 	.word	0x48000400
 80024b0:	48000800 	.word	0x48000800
 80024b4:	48000c00 	.word	0x48000c00
 80024b8:	40010400 	.word	0x40010400

080024bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	460b      	mov	r3, r1
 80024c6:	807b      	strh	r3, [r7, #2]
 80024c8:	4613      	mov	r3, r2
 80024ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024cc:	787b      	ldrb	r3, [r7, #1]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024d2:	887a      	ldrh	r2, [r7, #2]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	619a      	str	r2, [r3, #24]
 80024d8:	e002      	b.n	80024e0 <HAL_GPIO_WritePin+0x24>
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024da:	887a      	ldrh	r2, [r7, #2]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop

080024ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e043      	b.n	8002586 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d106      	bne.n	8002518 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f7fd feac 	bl	8000270 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2224      	movs	r2, #36	; 0x24
 800251c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	6812      	ldr	r2, [r2, #0]
 8002528:	6812      	ldr	r2, [r2, #0]
 800252a:	f022 0201 	bic.w	r2, r2, #1
 800252e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 f97f 	bl	8002834 <UART_SetConfig>
 8002536:	4603      	mov	r3, r0
 8002538:	2b01      	cmp	r3, #1
 800253a:	d101      	bne.n	8002540 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e022      	b.n	8002586 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002544:	2b00      	cmp	r3, #0
 8002546:	d002      	beq.n	800254e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 fad7 	bl	8002afc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	6812      	ldr	r2, [r2, #0]
 8002556:	6852      	ldr	r2, [r2, #4]
 8002558:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800255c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	6812      	ldr	r2, [r2, #0]
 8002566:	6892      	ldr	r2, [r2, #8]
 8002568:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800256c:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	6812      	ldr	r2, [r2, #0]
 8002576:	6812      	ldr	r2, [r2, #0]
 8002578:	f042 0201 	orr.w	r2, r2, #1
 800257c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 fb5e 	bl	8002c40 <UART_CheckIdleState>
 8002584:	4603      	mov	r3, r0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop

08002590 <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b088      	sub	sp, #32
 8002594:	af02      	add	r7, sp, #8
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	603b      	str	r3, [r7, #0]
 800259c:	4613      	mov	r3, r2
 800259e:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80025a0:	2300      	movs	r3, #0
 80025a2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b20      	cmp	r3, #32
 80025ae:	d177      	bne.n	80026a0 <HAL_UART_Transmit+0x110>
  {
    if((pData == NULL ) || (Size == 0U))
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d002      	beq.n	80025bc <HAL_UART_Transmit+0x2c>
 80025b6:	88fb      	ldrh	r3, [r7, #6]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d101      	bne.n	80025c0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e070      	b.n	80026a2 <HAL_UART_Transmit+0x112>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d101      	bne.n	80025ce <HAL_UART_Transmit+0x3e>
 80025ca:	2302      	movs	r3, #2
 80025cc:	e069      	b.n	80026a2 <HAL_UART_Transmit+0x112>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2221      	movs	r2, #33	; 0x21
 80025e0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80025e4:	f7fe f912 	bl	800080c <HAL_GetTick>
 80025e8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	88fa      	ldrh	r2, [r7, #6]
 80025ee:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	88fa      	ldrh	r2, [r7, #6]
 80025f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 80025fa:	e034      	b.n	8002666 <HAL_UART_Transmit+0xd6>
    {
      huart->TxXferCount--;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002602:	b29b      	uxth	r3, r3
 8002604:	3b01      	subs	r3, #1
 8002606:	b29a      	uxth	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	2180      	movs	r1, #128	; 0x80
 8002616:	2200      	movs	r2, #0
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	f000 fb5b 	bl	8002cd4 <UART_WaitOnFlagUntilTimeout>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e03c      	b.n	80026a2 <HAL_UART_Transmit+0x112>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002630:	d111      	bne.n	8002656 <HAL_UART_Transmit+0xc6>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d10d      	bne.n	8002656 <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	8812      	ldrh	r2, [r2, #0]
 8002646:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800264a:	b292      	uxth	r2, r2
 800264c:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2U;
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	3302      	adds	r3, #2
 8002652:	60bb      	str	r3, [r7, #8]
 8002654:	e007      	b.n	8002666 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	1c59      	adds	r1, r3, #1
 800265e:	60b9      	str	r1, [r7, #8]
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	b29b      	uxth	r3, r3
 8002664:	8513      	strh	r3, [r2, #40]	; 0x28
    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0U)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800266c:	b29b      	uxth	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1c4      	bne.n	80025fc <HAL_UART_Transmit+0x6c>
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	2140      	movs	r1, #64	; 0x40
 800267a:	2200      	movs	r2, #0
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	f000 fb29 	bl	8002cd4 <UART_WaitOnFlagUntilTimeout>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <HAL_UART_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e00a      	b.n	80026a2 <HAL_UART_Transmit+0x112>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2220      	movs	r2, #32
 8002690:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 800269c:	2300      	movs	r3, #0
 800269e:	e000      	b.n	80026a2 <HAL_UART_Transmit+0x112>
  }
  else
  {
    return HAL_BUSY;
 80026a0:	2302      	movs	r3, #2
  }
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop

080026ac <HAL_UART_Receive>:
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b08a      	sub	sp, #40	; 0x28
 80026b0:	af02      	add	r7, sp, #8
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	603b      	str	r3, [r7, #0]
 80026b8:	4613      	mov	r3, r2
 80026ba:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0U;
 80026bc:	2300      	movs	r3, #0
 80026be:	61fb      	str	r3, [r7, #28]

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	2b20      	cmp	r3, #32
 80026ca:	f040 80ad 	bne.w	8002828 <HAL_UART_Receive+0x17c>
  {
    if((pData == NULL ) || (Size == 0U))
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d002      	beq.n	80026da <HAL_UART_Receive+0x2e>
 80026d4:	88fb      	ldrh	r3, [r7, #6]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e0a5      	b.n	800282a <HAL_UART_Receive+0x17e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d101      	bne.n	80026ec <HAL_UART_Receive+0x40>
 80026e8:	2302      	movs	r3, #2
 80026ea:	e09e      	b.n	800282a <HAL_UART_Receive+0x17e>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2222      	movs	r2, #34	; 0x22
 80026fe:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002702:	f7fe f883 	bl	800080c <HAL_GetTick>
 8002706:	61f8      	str	r0, [r7, #28]

    huart->RxXferSize = Size;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	88fa      	ldrh	r2, [r7, #6]
 800270c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	88fa      	ldrh	r2, [r7, #6]
 8002714:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002720:	d10e      	bne.n	8002740 <HAL_UART_Receive+0x94>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d105      	bne.n	8002736 <HAL_UART_Receive+0x8a>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002730:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002734:	e028      	b.n	8002788 <HAL_UART_Receive+0xdc>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	22ff      	movs	r2, #255	; 0xff
 800273a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800273e:	e023      	b.n	8002788 <HAL_UART_Receive+0xdc>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10d      	bne.n	8002764 <HAL_UART_Receive+0xb8>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d104      	bne.n	800275a <HAL_UART_Receive+0xae>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	22ff      	movs	r2, #255	; 0xff
 8002754:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002758:	e016      	b.n	8002788 <HAL_UART_Receive+0xdc>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	227f      	movs	r2, #127	; 0x7f
 800275e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002762:	e011      	b.n	8002788 <HAL_UART_Receive+0xdc>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800276c:	d10c      	bne.n	8002788 <HAL_UART_Receive+0xdc>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d104      	bne.n	8002780 <HAL_UART_Receive+0xd4>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	227f      	movs	r2, #127	; 0x7f
 800277a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800277e:	e003      	b.n	8002788 <HAL_UART_Receive+0xdc>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	223f      	movs	r2, #63	; 0x3f
 8002784:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800278e:	837b      	strh	r3, [r7, #26]

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 8002790:	e03a      	b.n	8002808 <HAL_UART_Receive+0x15c>
    {
      huart->RxXferCount--;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002798:	b29b      	uxth	r3, r3
 800279a:	3b01      	subs	r3, #1
 800279c:	b29a      	uxth	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	9300      	str	r3, [sp, #0]
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	2120      	movs	r1, #32
 80027ac:	2200      	movs	r2, #0
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	f000 fa90 	bl	8002cd4 <UART_WaitOnFlagUntilTimeout>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <HAL_UART_Receive+0x112>
      {
        return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e035      	b.n	800282a <HAL_UART_Receive+0x17e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027c6:	d112      	bne.n	80027ee <HAL_UART_Receive+0x142>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10e      	bne.n	80027ee <HAL_UART_Receive+0x142>
      {
        tmp = (uint16_t*) pData ;
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	617b      	str	r3, [r7, #20]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80027da:	b29a      	uxth	r2, r3
 80027dc:	8b7b      	ldrh	r3, [r7, #26]
 80027de:	4013      	ands	r3, r2
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	801a      	strh	r2, [r3, #0]
        pData +=2U;
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	3302      	adds	r3, #2
 80027ea:	60bb      	str	r3, [r7, #8]
 80027ec:	e00c      	b.n	8002808 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	1c5a      	adds	r2, r3, #1
 80027f2:	60ba      	str	r2, [r7, #8]
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	6812      	ldr	r2, [r2, #0]
 80027f8:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80027fa:	b292      	uxth	r2, r2
 80027fc:	b2d1      	uxtb	r1, r2
 80027fe:	8b7a      	ldrh	r2, [r7, #26]
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	400a      	ands	r2, r1
 8002804:	b2d2      	uxtb	r2, r2
 8002806:	701a      	strb	r2, [r3, #0]
    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
    uhMask = huart->Mask;

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800280e:	b29b      	uxth	r3, r3
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1be      	bne.n	8002792 <HAL_UART_Receive+0xe6>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2220      	movs	r2, #32
 8002818:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 8002824:	2300      	movs	r3, #0
 8002826:	e000      	b.n	800282a <HAL_UART_Receive+0x17e>
  }
  else
  {
    return HAL_BUSY;
 8002828:	2302      	movs	r3, #2
  }
}
 800282a:	4618      	mov	r0, r3
 800282c:	3720      	adds	r7, #32
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop

08002834 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002834:	b590      	push	{r4, r7, lr}
 8002836:	b087      	sub	sp, #28
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 800283c:	2300      	movs	r3, #0
 800283e:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002840:	2310      	movs	r3, #16
 8002842:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8002844:	2300      	movs	r3, #0
 8002846:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8002848:	2300      	movs	r3, #0
 800284a:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 800284c:	2300      	movs	r3, #0
 800284e:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	431a      	orrs	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	431a      	orrs	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	69db      	ldr	r3, [r3, #28]
 8002864:	4313      	orrs	r3, r2
 8002866:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6819      	ldr	r1, [r3, #0]
 8002872:	4b9d      	ldr	r3, [pc, #628]	; (8002ae8 <UART_SetConfig+0x2b4>)
 8002874:	400b      	ands	r3, r1
 8002876:	68f9      	ldr	r1, [r7, #12]
 8002878:	430b      	orrs	r3, r1
 800287a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	6812      	ldr	r2, [r2, #0]
 8002884:	6852      	ldr	r2, [r2, #4]
 8002886:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	68d2      	ldr	r2, [r2, #12]
 800288e:	430a      	orrs	r2, r1
 8002890:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	699a      	ldr	r2, [r3, #24]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	4313      	orrs	r3, r2
 800289c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	6812      	ldr	r2, [r2, #0]
 80028a6:	6892      	ldr	r2, [r2, #8]
 80028a8:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a8d      	ldr	r2, [pc, #564]	; (8002aec <UART_SetConfig+0x2b8>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d121      	bne.n	8002900 <UART_SetConfig+0xcc>
 80028bc:	4b8c      	ldr	r3, [pc, #560]	; (8002af0 <UART_SetConfig+0x2bc>)
 80028be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c0:	f003 0303 	and.w	r3, r3, #3
 80028c4:	2b03      	cmp	r3, #3
 80028c6:	d817      	bhi.n	80028f8 <UART_SetConfig+0xc4>
 80028c8:	a201      	add	r2, pc, #4	; (adr r2, 80028d0 <UART_SetConfig+0x9c>)
 80028ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ce:	bf00      	nop
 80028d0:	080028e1 	.word	0x080028e1
 80028d4:	080028ed 	.word	0x080028ed
 80028d8:	080028f3 	.word	0x080028f3
 80028dc:	080028e7 	.word	0x080028e7
 80028e0:	2300      	movs	r3, #0
 80028e2:	75fb      	strb	r3, [r7, #23]
 80028e4:	e00a      	b.n	80028fc <UART_SetConfig+0xc8>
 80028e6:	2302      	movs	r3, #2
 80028e8:	75fb      	strb	r3, [r7, #23]
 80028ea:	e007      	b.n	80028fc <UART_SetConfig+0xc8>
 80028ec:	2304      	movs	r3, #4
 80028ee:	75fb      	strb	r3, [r7, #23]
 80028f0:	e004      	b.n	80028fc <UART_SetConfig+0xc8>
 80028f2:	2308      	movs	r3, #8
 80028f4:	75fb      	strb	r3, [r7, #23]
 80028f6:	e001      	b.n	80028fc <UART_SetConfig+0xc8>
 80028f8:	2310      	movs	r3, #16
 80028fa:	75fb      	strb	r3, [r7, #23]
 80028fc:	bf00      	nop
 80028fe:	e011      	b.n	8002924 <UART_SetConfig+0xf0>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a7b      	ldr	r2, [pc, #492]	; (8002af4 <UART_SetConfig+0x2c0>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d102      	bne.n	8002910 <UART_SetConfig+0xdc>
 800290a:	2300      	movs	r3, #0
 800290c:	75fb      	strb	r3, [r7, #23]
 800290e:	e009      	b.n	8002924 <UART_SetConfig+0xf0>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a78      	ldr	r2, [pc, #480]	; (8002af8 <UART_SetConfig+0x2c4>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d102      	bne.n	8002920 <UART_SetConfig+0xec>
 800291a:	2300      	movs	r3, #0
 800291c:	75fb      	strb	r3, [r7, #23]
 800291e:	e001      	b.n	8002924 <UART_SetConfig+0xf0>
 8002920:	2310      	movs	r3, #16
 8002922:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	69db      	ldr	r3, [r3, #28]
 8002928:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800292c:	d16e      	bne.n	8002a0c <UART_SetConfig+0x1d8>
  {
    switch (clocksource)
 800292e:	7dfb      	ldrb	r3, [r7, #23]
 8002930:	2b08      	cmp	r3, #8
 8002932:	d857      	bhi.n	80029e4 <UART_SetConfig+0x1b0>
 8002934:	a201      	add	r2, pc, #4	; (adr r2, 800293c <UART_SetConfig+0x108>)
 8002936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800293a:	bf00      	nop
 800293c:	08002961 	.word	0x08002961
 8002940:	0800297d 	.word	0x0800297d
 8002944:	08002999 	.word	0x08002999
 8002948:	080029e5 	.word	0x080029e5
 800294c:	080029b3 	.word	0x080029b3
 8002950:	080029e5 	.word	0x080029e5
 8002954:	080029e5 	.word	0x080029e5
 8002958:	080029e5 	.word	0x080029e5
 800295c:	080029cf 	.word	0x080029cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002960:	f7ff fbc8 	bl	80020f4 <HAL_RCC_GetPCLK1Freq>
 8002964:	4603      	mov	r3, r0
 8002966:	005a      	lsls	r2, r3, #1
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	085b      	lsrs	r3, r3, #1
 800296e:	441a      	add	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	fbb2 f3f3 	udiv	r3, r2, r3
 8002978:	82bb      	strh	r3, [r7, #20]
        break;
 800297a:	e036      	b.n	80029ea <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800297c:	f7ff fbdc 	bl	8002138 <HAL_RCC_GetPCLK2Freq>
 8002980:	4603      	mov	r3, r0
 8002982:	005a      	lsls	r2, r3, #1
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	085b      	lsrs	r3, r3, #1
 800298a:	441a      	add	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	fbb2 f3f3 	udiv	r3, r2, r3
 8002994:	82bb      	strh	r3, [r7, #20]
        break;
 8002996:	e028      	b.n	80029ea <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	085b      	lsrs	r3, r3, #1
 800299e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80029a2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	6852      	ldr	r2, [r2, #4]
 80029aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80029ae:	82bb      	strh	r3, [r7, #20]
        break;
 80029b0:	e01b      	b.n	80029ea <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80029b2:	f7ff fb29 	bl	8002008 <HAL_RCC_GetSysClockFreq>
 80029b6:	4603      	mov	r3, r0
 80029b8:	005a      	lsls	r2, r3, #1
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	085b      	lsrs	r3, r3, #1
 80029c0:	441a      	add	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ca:	82bb      	strh	r3, [r7, #20]
        break;
 80029cc:	e00d      	b.n	80029ea <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	085b      	lsrs	r3, r3, #1
 80029d4:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e0:	82bb      	strh	r3, [r7, #20]
        break;
 80029e2:	e002      	b.n	80029ea <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	74fb      	strb	r3, [r7, #19]
        break;
 80029e8:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 80029ea:	8abb      	ldrh	r3, [r7, #20]
 80029ec:	f023 030f 	bic.w	r3, r3, #15
 80029f0:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029f2:	8abb      	ldrh	r3, [r7, #20]
 80029f4:	f003 030f 	and.w	r3, r3, #15
 80029f8:	105b      	asrs	r3, r3, #1
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	897b      	ldrh	r3, [r7, #10]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	897a      	ldrh	r2, [r7, #10]
 8002a08:	60da      	str	r2, [r3, #12]
 8002a0a:	e068      	b.n	8002ade <UART_SetConfig+0x2aa>
  }
  else
  {
    switch (clocksource)
 8002a0c:	7dfb      	ldrb	r3, [r7, #23]
 8002a0e:	2b08      	cmp	r3, #8
 8002a10:	d862      	bhi.n	8002ad8 <UART_SetConfig+0x2a4>
 8002a12:	a201      	add	r2, pc, #4	; (adr r2, 8002a18 <UART_SetConfig+0x1e4>)
 8002a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a18:	08002a3d 	.word	0x08002a3d
 8002a1c:	08002a5d 	.word	0x08002a5d
 8002a20:	08002a7d 	.word	0x08002a7d
 8002a24:	08002ad9 	.word	0x08002ad9
 8002a28:	08002a9d 	.word	0x08002a9d
 8002a2c:	08002ad9 	.word	0x08002ad9
 8002a30:	08002ad9 	.word	0x08002ad9
 8002a34:	08002ad9 	.word	0x08002ad9
 8002a38:	08002abd 	.word	0x08002abd
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681c      	ldr	r4, [r3, #0]
 8002a40:	f7ff fb58 	bl	80020f4 <HAL_RCC_GetPCLK1Freq>
 8002a44:	4602      	mov	r2, r0
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	085b      	lsrs	r3, r3, #1
 8002a4c:	441a      	add	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	60e3      	str	r3, [r4, #12]
        break;
 8002a5a:	e040      	b.n	8002ade <UART_SetConfig+0x2aa>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681c      	ldr	r4, [r3, #0]
 8002a60:	f7ff fb6a 	bl	8002138 <HAL_RCC_GetPCLK2Freq>
 8002a64:	4602      	mov	r2, r0
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	085b      	lsrs	r3, r3, #1
 8002a6c:	441a      	add	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	60e3      	str	r3, [r4, #12]
        break;
 8002a7a:	e030      	b.n	8002ade <UART_SetConfig+0x2aa>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	085b      	lsrs	r3, r3, #1
 8002a86:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002a8a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002a8e:	6879      	ldr	r1, [r7, #4]
 8002a90:	6849      	ldr	r1, [r1, #4]
 8002a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	60d3      	str	r3, [r2, #12]
        break;
 8002a9a:	e020      	b.n	8002ade <UART_SetConfig+0x2aa>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681c      	ldr	r4, [r3, #0]
 8002aa0:	f7ff fab2 	bl	8002008 <HAL_RCC_GetSysClockFreq>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	085b      	lsrs	r3, r3, #1
 8002aac:	441a      	add	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	60e3      	str	r3, [r4, #12]
        break;
 8002aba:	e010      	b.n	8002ade <UART_SetConfig+0x2aa>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	6852      	ldr	r2, [r2, #4]
 8002ac4:	0852      	lsrs	r2, r2, #1
 8002ac6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	6852      	ldr	r2, [r2, #4]
 8002ace:	fbb1 f2f2 	udiv	r2, r1, r2
 8002ad2:	b292      	uxth	r2, r2
 8002ad4:	60da      	str	r2, [r3, #12]
        break;
 8002ad6:	e002      	b.n	8002ade <UART_SetConfig+0x2aa>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	74fb      	strb	r3, [r7, #19]
        break;
 8002adc:	bf00      	nop
    }
  }

  return ret;
 8002ade:	7cfb      	ldrb	r3, [r7, #19]

}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	371c      	adds	r7, #28
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd90      	pop	{r4, r7, pc}
 8002ae8:	efff69f3 	.word	0xefff69f3
 8002aec:	40013800 	.word	0x40013800
 8002af0:	40021000 	.word	0x40021000
 8002af4:	40004400 	.word	0x40004400
 8002af8:	40004800 	.word	0x40004800

08002afc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart: UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d00a      	beq.n	8002b26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6812      	ldr	r2, [r2, #0]
 8002b18:	6852      	ldr	r2, [r2, #4]
 8002b1a:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002b22:	430a      	orrs	r2, r1
 8002b24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00a      	beq.n	8002b48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6812      	ldr	r2, [r2, #0]
 8002b3a:	6852      	ldr	r2, [r2, #4]
 8002b3c:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002b44:	430a      	orrs	r2, r1
 8002b46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d00a      	beq.n	8002b6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	6812      	ldr	r2, [r2, #0]
 8002b5c:	6852      	ldr	r2, [r2, #4]
 8002b5e:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b66:	430a      	orrs	r2, r1
 8002b68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6e:	f003 0308 	and.w	r3, r3, #8
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00a      	beq.n	8002b8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	6812      	ldr	r2, [r2, #0]
 8002b7e:	6852      	ldr	r2, [r2, #4]
 8002b80:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b90:	f003 0310 	and.w	r3, r3, #16
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00a      	beq.n	8002bae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	6812      	ldr	r2, [r2, #0]
 8002ba0:	6892      	ldr	r2, [r2, #8]
 8002ba2:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002baa:	430a      	orrs	r2, r1
 8002bac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb2:	f003 0320 	and.w	r3, r3, #32
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00a      	beq.n	8002bd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	6812      	ldr	r2, [r2, #0]
 8002bc2:	6892      	ldr	r2, [r2, #8]
 8002bc4:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d01a      	beq.n	8002c12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	6812      	ldr	r2, [r2, #0]
 8002be4:	6852      	ldr	r2, [r2, #4]
 8002be6:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bfa:	d10a      	bne.n	8002c12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	6812      	ldr	r2, [r2, #0]
 8002c04:	6852      	ldr	r2, [r2, #4]
 8002c06:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00a      	beq.n	8002c34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	6812      	ldr	r2, [r2, #0]
 8002c26:	6852      	ldr	r2, [r2, #4]
 8002c28:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c30:	430a      	orrs	r2, r1
 8002c32:	605a      	str	r2, [r3, #4]
  }
}
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop

08002c40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af02      	add	r7, sp, #8
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002c52:	f7fd fddb 	bl	800080c <HAL_GetTick>
 8002c56:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0308 	and.w	r3, r3, #8
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00e      	beq.n	8002c84 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c66:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c6a:	9300      	str	r3, [sp, #0]
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002c72:	2200      	movs	r2, #0
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f000 f82d 	bl	8002cd4 <UART_WaitOnFlagUntilTimeout>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e022      	b.n	8002cca <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0304 	and.w	r3, r3, #4
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00e      	beq.n	8002cb0 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c92:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c96:	9300      	str	r3, [sp, #0]
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f000 f817 	bl	8002cd4 <UART_WaitOnFlagUntilTimeout>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e00c      	b.n	8002cca <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2220      	movs	r2, #32
 8002cb4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2220      	movs	r2, #32
 8002cbc:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop

08002cd4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	603b      	str	r3, [r7, #0]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ce4:	e02c      	b.n	8002d40 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cec:	d028      	beq.n	8002d40 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d007      	beq.n	8002d04 <UART_WaitOnFlagUntilTimeout+0x30>
 8002cf4:	f7fd fd8a 	bl	800080c <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	1ad2      	subs	r2, r2, r3
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d91d      	bls.n	8002d40 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	6812      	ldr	r2, [r2, #0]
 8002d0c:	6812      	ldr	r2, [r2, #0]
 8002d0e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002d12:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	6812      	ldr	r2, [r2, #0]
 8002d1c:	6892      	ldr	r2, [r2, #8]
 8002d1e:	f022 0201 	bic.w	r2, r2, #1
 8002d22:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2220      	movs	r2, #32
 8002d28:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2220      	movs	r2, #32
 8002d30:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e00f      	b.n	8002d60 <UART_WaitOnFlagUntilTimeout+0x8c>
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	69da      	ldr	r2, [r3, #28]
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	401a      	ands	r2, r3
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	bf0c      	ite	eq
 8002d50:	2301      	moveq	r3, #1
 8002d52:	2300      	movne	r3, #0
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	461a      	mov	r2, r3
 8002d58:	79fb      	ldrb	r3, [r7, #7]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d0c3      	beq.n	8002ce6 <UART_WaitOnFlagUntilTimeout+0x12>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3710      	adds	r7, #16
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim: TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e01d      	b.n	8002db6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d106      	bne.n	8002d94 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 f816 	bl	8002dc0 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2202      	movs	r2, #2
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	3304      	adds	r3, #4
 8002da4:	4610      	mov	r0, r2
 8002da6:	4619      	mov	r1, r3
 8002da8:	f000 f960 	bl	800306c <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop

08002dc0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop

08002dd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim: TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	6812      	ldr	r2, [r2, #0]
 8002de4:	68d2      	ldr	r2, [r2, #12]
 8002de6:	f042 0201 	orr.w	r2, r2, #1
 8002dea:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6812      	ldr	r2, [r2, #0]
 8002df4:	6812      	ldr	r2, [r2, #0]
 8002df6:	f042 0201 	orr.w	r2, r2, #1
 8002dfa:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop

08002e0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim: TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d022      	beq.n	8002e68 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d01b      	beq.n	8002e68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f06f 0202 	mvn.w	r2, #2
 8002e38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	771a      	strb	r2, [r3, #28]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d003      	beq.n	8002e56 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 f8ee 	bl	8003030 <HAL_TIM_IC_CaptureCallback>
 8002e54:	e005      	b.n	8002e62 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 f8e0 	bl	800301c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f000 f8f1 	bl	8003044 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	f003 0304 	and.w	r3, r3, #4
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d022      	beq.n	8002ebc <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d01b      	beq.n	8002ebc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f06f 0204 	mvn.w	r2, #4
 8002e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2202      	movs	r2, #2
 8002e92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d003      	beq.n	8002eaa <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 f8c4 	bl	8003030 <HAL_TIM_IC_CaptureCallback>
 8002ea8:	e005      	b.n	8002eb6 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 f8b6 	bl	800301c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 f8c7 	bl	8003044 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	f003 0308 	and.w	r3, r3, #8
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d022      	beq.n	8002f10 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	f003 0308 	and.w	r3, r3, #8
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d01b      	beq.n	8002f10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f06f 0208 	mvn.w	r2, #8
 8002ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2204      	movs	r2, #4
 8002ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	f003 0303 	and.w	r3, r3, #3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 f89a 	bl	8003030 <HAL_TIM_IC_CaptureCallback>
 8002efc:	e005      	b.n	8002f0a <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f88c 	bl	800301c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 f89d 	bl	8003044 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	f003 0310 	and.w	r3, r3, #16
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d022      	beq.n	8002f64 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	f003 0310 	and.w	r3, r3, #16
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d01b      	beq.n	8002f64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f06f 0210 	mvn.w	r2, #16
 8002f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2208      	movs	r2, #8
 8002f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f870 	bl	8003030 <HAL_TIM_IC_CaptureCallback>
 8002f50:	e005      	b.n	8002f5e <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f862 	bl	800301c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 f873 	bl	8003044 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00e      	beq.n	8002f90 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d007      	beq.n	8002f90 <HAL_TIM_IRQHandler+0x184>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f06f 0201 	mvn.w	r2, #1
 8002f88:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f7fd fb70 	bl	8000670 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00e      	beq.n	8002fbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d007      	beq.n	8002fbc <HAL_TIM_IRQHandler+0x1b0>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fb4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7fd fbfa 	bl	80007b0 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00e      	beq.n	8002fe8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d007      	beq.n	8002fe8 <HAL_TIM_IRQHandler+0x1dc>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fe0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f838 	bl	8003058 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	f003 0320 	and.w	r3, r3, #32
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00e      	beq.n	8003014 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f003 0320 	and.w	r3, r3, #32
 8003000:	2b00      	cmp	r3, #0
 8003002:	d007      	beq.n	8003014 <HAL_TIM_IRQHandler+0x208>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f06f 0220 	mvn.w	r2, #32
 800300c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7fd fbc4 	bl	800079c <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop

0800301c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim: TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop

08003030 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim: TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop

08003044 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop

08003058 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop

0800306c <TIM_Base_SetConfig>:
  * @param  TIMx: TIM periheral
  * @param  Structure: TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8003076:	2300      	movs	r3, #0
 8003078:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a2d      	ldr	r2, [pc, #180]	; (8003138 <TIM_Base_SetConfig+0xcc>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d003      	beq.n	8003090 <TIM_Base_SetConfig+0x24>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800308e:	d108      	bne.n	80030a2 <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003096:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	4313      	orrs	r3, r2
 80030a0:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a24      	ldr	r2, [pc, #144]	; (8003138 <TIM_Base_SetConfig+0xcc>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d00f      	beq.n	80030ca <TIM_Base_SetConfig+0x5e>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030b0:	d00b      	beq.n	80030ca <TIM_Base_SetConfig+0x5e>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a21      	ldr	r2, [pc, #132]	; (800313c <TIM_Base_SetConfig+0xd0>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d007      	beq.n	80030ca <TIM_Base_SetConfig+0x5e>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a20      	ldr	r2, [pc, #128]	; (8003140 <TIM_Base_SetConfig+0xd4>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d003      	beq.n	80030ca <TIM_Base_SetConfig+0x5e>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a1f      	ldr	r2, [pc, #124]	; (8003144 <TIM_Base_SetConfig+0xd8>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d108      	bne.n	80030dc <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	4313      	orrs	r3, r2
 80030da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	629a      	str	r2, [r3, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a0d      	ldr	r2, [pc, #52]	; (8003138 <TIM_Base_SetConfig+0xcc>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d00b      	beq.n	8003120 <TIM_Base_SetConfig+0xb4>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a0c      	ldr	r2, [pc, #48]	; (800313c <TIM_Base_SetConfig+0xd0>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d007      	beq.n	8003120 <TIM_Base_SetConfig+0xb4>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a0b      	ldr	r2, [pc, #44]	; (8003140 <TIM_Base_SetConfig+0xd4>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d003      	beq.n	8003120 <TIM_Base_SetConfig+0xb4>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a0a      	ldr	r2, [pc, #40]	; (8003144 <TIM_Base_SetConfig+0xd8>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d103      	bne.n	8003128 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	691a      	ldr	r2, [r3, #16]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	615a      	str	r2, [r3, #20]
}
 800312e:	3714      	adds	r7, #20
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	40012c00 	.word	0x40012c00
 800313c:	40014000 	.word	0x40014000
 8003140:	40014400 	.word	0x40014400
 8003144:	40014800 	.word	0x40014800

08003148 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f103 0208 	add.w	r2, r3, #8
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003160:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f103 0208 	add.w	r2, r3, #8
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f103 0208 	add.w	r2, r3, #8
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop

08003188 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	689a      	ldr	r2, [r3, #8]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	1c5a      	adds	r2, r3, #1
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	601a      	str	r2, [r3, #0]
}
 80031dc:	3714      	adds	r7, #20
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop

080031e8 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	6892      	ldr	r2, [r2, #8]
 80031fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	6852      	ldr	r2, [r2, #4]
 8003208:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	685a      	ldr	r2, [r3, #4]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	429a      	cmp	r2, r3
 8003212:	d103      	bne.n	800321c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	1e5a      	subs	r2, r3, #1
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
}
 8003230:	4618      	mov	r0, r3
 8003232:	3714      	adds	r7, #20
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	3b04      	subs	r3, #4
 800324c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003254:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	3b04      	subs	r3, #4
 800325a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	f023 0201 	bic.w	r2, r3, #1
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	3b04      	subs	r3, #4
 800326a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800326c:	4a0c      	ldr	r2, [pc, #48]	; (80032a0 <pxPortInitialiseStack+0x64>)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	3b14      	subs	r3, #20
 8003276:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	3b04      	subs	r3, #4
 8003282:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f06f 0202 	mvn.w	r2, #2
 800328a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	3b20      	subs	r3, #32
 8003290:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003292:	68fb      	ldr	r3, [r7, #12]
}
 8003294:	4618      	mov	r0, r3
 8003296:	3714      	adds	r7, #20
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr
 80032a0:	080032a5 	.word	0x080032a5

080032a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80032aa:	4b0c      	ldr	r3, [pc, #48]	; (80032dc <prvTaskExitError+0x38>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032b2:	d009      	beq.n	80032c8 <prvTaskExitError+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80032b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b8:	f383 8811 	msr	BASEPRI, r3
 80032bc:	f3bf 8f6f 	isb	sy
 80032c0:	f3bf 8f4f 	dsb	sy
 80032c4:	607b      	str	r3, [r7, #4]
 80032c6:	e7fe      	b.n	80032c6 <prvTaskExitError+0x22>
 80032c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032cc:	f383 8811 	msr	BASEPRI, r3
 80032d0:	f3bf 8f6f 	isb	sy
 80032d4:	f3bf 8f4f 	dsb	sy
 80032d8:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 80032da:	e7fe      	b.n	80032da <prvTaskExitError+0x36>
 80032dc:	20000004 	.word	0x20000004

080032e0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80032e0:	4b07      	ldr	r3, [pc, #28]	; (8003300 <pxCurrentTCBConst2>)
 80032e2:	6819      	ldr	r1, [r3, #0]
 80032e4:	6808      	ldr	r0, [r1, #0]
 80032e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032ea:	f380 8809 	msr	PSP, r0
 80032ee:	f3bf 8f6f 	isb	sy
 80032f2:	f04f 0000 	mov.w	r0, #0
 80032f6:	f380 8811 	msr	BASEPRI, r0
 80032fa:	4770      	bx	lr
 80032fc:	f3af 8000 	nop.w

08003300 <pxCurrentTCBConst2>:
 8003300:	200014a8 	.word	0x200014a8

08003304 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003304:	4806      	ldr	r0, [pc, #24]	; (8003320 <prvPortStartFirstTask+0x1c>)
 8003306:	6800      	ldr	r0, [r0, #0]
 8003308:	6800      	ldr	r0, [r0, #0]
 800330a:	f380 8808 	msr	MSP, r0
 800330e:	b662      	cpsie	i
 8003310:	b661      	cpsie	f
 8003312:	f3bf 8f4f 	dsb	sy
 8003316:	f3bf 8f6f 	isb	sy
 800331a:	df00      	svc	0
 800331c:	bf00      	nop
 800331e:	0000      	.short	0x0000
 8003320:	e000ed08 	.word	0xe000ed08

08003324 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800332a:	4b3b      	ldr	r3, [pc, #236]	; (8003418 <xPortStartScheduler+0xf4>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a3b      	ldr	r2, [pc, #236]	; (800341c <xPortStartScheduler+0xf8>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d109      	bne.n	8003348 <xPortStartScheduler+0x24>
 8003334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003338:	f383 8811 	msr	BASEPRI, r3
 800333c:	f3bf 8f6f 	isb	sy
 8003340:	f3bf 8f4f 	dsb	sy
 8003344:	613b      	str	r3, [r7, #16]
 8003346:	e7fe      	b.n	8003346 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003348:	4b33      	ldr	r3, [pc, #204]	; (8003418 <xPortStartScheduler+0xf4>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a34      	ldr	r2, [pc, #208]	; (8003420 <xPortStartScheduler+0xfc>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d109      	bne.n	8003366 <xPortStartScheduler+0x42>
 8003352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003356:	f383 8811 	msr	BASEPRI, r3
 800335a:	f3bf 8f6f 	isb	sy
 800335e:	f3bf 8f4f 	dsb	sy
 8003362:	60fb      	str	r3, [r7, #12]
 8003364:	e7fe      	b.n	8003364 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003366:	4b2f      	ldr	r3, [pc, #188]	; (8003424 <xPortStartScheduler+0x100>)
 8003368:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	b2db      	uxtb	r3, r3
 8003370:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	22ff      	movs	r2, #255	; 0xff
 8003376:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	b2db      	uxtb	r3, r3
 800337e:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003380:	79fb      	ldrb	r3, [r7, #7]
 8003382:	b2db      	uxtb	r3, r3
 8003384:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003388:	b2da      	uxtb	r2, r3
 800338a:	4b27      	ldr	r3, [pc, #156]	; (8003428 <xPortStartScheduler+0x104>)
 800338c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800338e:	4b27      	ldr	r3, [pc, #156]	; (800342c <xPortStartScheduler+0x108>)
 8003390:	2207      	movs	r2, #7
 8003392:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003394:	e009      	b.n	80033aa <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003396:	4b25      	ldr	r3, [pc, #148]	; (800342c <xPortStartScheduler+0x108>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	3b01      	subs	r3, #1
 800339c:	4a23      	ldr	r2, [pc, #140]	; (800342c <xPortStartScheduler+0x108>)
 800339e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80033a0:	79fb      	ldrb	r3, [r7, #7]
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	71fb      	strb	r3, [r7, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80033aa:	79fb      	ldrb	r3, [r7, #7]
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	b25b      	sxtb	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	dbef      	blt.n	8003396 <xPortStartScheduler+0x72>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80033b6:	4b1d      	ldr	r3, [pc, #116]	; (800342c <xPortStartScheduler+0x108>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	021b      	lsls	r3, r3, #8
 80033bc:	4a1b      	ldr	r2, [pc, #108]	; (800342c <xPortStartScheduler+0x108>)
 80033be:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80033c0:	4b1a      	ldr	r3, [pc, #104]	; (800342c <xPortStartScheduler+0x108>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80033c8:	4a18      	ldr	r2, [pc, #96]	; (800342c <xPortStartScheduler+0x108>)
 80033ca:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	b2da      	uxtb	r2, r3
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80033d4:	4a16      	ldr	r2, [pc, #88]	; (8003430 <xPortStartScheduler+0x10c>)
 80033d6:	4b16      	ldr	r3, [pc, #88]	; (8003430 <xPortStartScheduler+0x10c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033de:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80033e0:	4a13      	ldr	r2, [pc, #76]	; (8003430 <xPortStartScheduler+0x10c>)
 80033e2:	4b13      	ldr	r3, [pc, #76]	; (8003430 <xPortStartScheduler+0x10c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80033ea:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80033ec:	f000 f8d8 	bl	80035a0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80033f0:	4b10      	ldr	r3, [pc, #64]	; (8003434 <xPortStartScheduler+0x110>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80033f6:	f000 f8ed 	bl	80035d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80033fa:	4a0f      	ldr	r2, [pc, #60]	; (8003438 <xPortStartScheduler+0x114>)
 80033fc:	4b0e      	ldr	r3, [pc, #56]	; (8003438 <xPortStartScheduler+0x114>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003404:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003406:	f7ff ff7d 	bl	8003304 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 800340a:	f7ff ff4b 	bl	80032a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3718      	adds	r7, #24
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	e000ed00 	.word	0xe000ed00
 800341c:	410fc271 	.word	0x410fc271
 8003420:	410fc270 	.word	0x410fc270
 8003424:	e000e400 	.word	0xe000e400
 8003428:	20000088 	.word	0x20000088
 800342c:	2000008c 	.word	0x2000008c
 8003430:	e000ed20 	.word	0xe000ed20
 8003434:	20000004 	.word	0x20000004
 8003438:	e000ef34 	.word	0xe000ef34

0800343c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003446:	f383 8811 	msr	BASEPRI, r3
 800344a:	f3bf 8f6f 	isb	sy
 800344e:	f3bf 8f4f 	dsb	sy
 8003452:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003454:	4b0e      	ldr	r3, [pc, #56]	; (8003490 <vPortEnterCritical+0x54>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	3301      	adds	r3, #1
 800345a:	4a0d      	ldr	r2, [pc, #52]	; (8003490 <vPortEnterCritical+0x54>)
 800345c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800345e:	4b0c      	ldr	r3, [pc, #48]	; (8003490 <vPortEnterCritical+0x54>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d10e      	bne.n	8003484 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003466:	4b0b      	ldr	r3, [pc, #44]	; (8003494 <vPortEnterCritical+0x58>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b00      	cmp	r3, #0
 800346e:	d009      	beq.n	8003484 <vPortEnterCritical+0x48>
 8003470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003474:	f383 8811 	msr	BASEPRI, r3
 8003478:	f3bf 8f6f 	isb	sy
 800347c:	f3bf 8f4f 	dsb	sy
 8003480:	603b      	str	r3, [r7, #0]
 8003482:	e7fe      	b.n	8003482 <vPortEnterCritical+0x46>
	}
}
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	20000004 	.word	0x20000004
 8003494:	e000ed04 	.word	0xe000ed04

08003498 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800349e:	4b10      	ldr	r3, [pc, #64]	; (80034e0 <vPortExitCritical+0x48>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d109      	bne.n	80034ba <vPortExitCritical+0x22>
 80034a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034aa:	f383 8811 	msr	BASEPRI, r3
 80034ae:	f3bf 8f6f 	isb	sy
 80034b2:	f3bf 8f4f 	dsb	sy
 80034b6:	607b      	str	r3, [r7, #4]
 80034b8:	e7fe      	b.n	80034b8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80034ba:	4b09      	ldr	r3, [pc, #36]	; (80034e0 <vPortExitCritical+0x48>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	3b01      	subs	r3, #1
 80034c0:	4a07      	ldr	r2, [pc, #28]	; (80034e0 <vPortExitCritical+0x48>)
 80034c2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80034c4:	4b06      	ldr	r3, [pc, #24]	; (80034e0 <vPortExitCritical+0x48>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d104      	bne.n	80034d6 <vPortExitCritical+0x3e>
 80034cc:	2300      	movs	r3, #0
 80034ce:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr
 80034e0:	20000004 	.word	0x20000004
	...

080034f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80034f0:	f3ef 8009 	mrs	r0, PSP
 80034f4:	f3bf 8f6f 	isb	sy
 80034f8:	4b15      	ldr	r3, [pc, #84]	; (8003550 <pxCurrentTCBConst>)
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	f01e 0f10 	tst.w	lr, #16
 8003500:	bf08      	it	eq
 8003502:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003506:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800350a:	6010      	str	r0, [r2, #0]
 800350c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8003510:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003514:	f380 8811 	msr	BASEPRI, r0
 8003518:	f3bf 8f4f 	dsb	sy
 800351c:	f3bf 8f6f 	isb	sy
 8003520:	f000 fd90 	bl	8004044 <vTaskSwitchContext>
 8003524:	f04f 0000 	mov.w	r0, #0
 8003528:	f380 8811 	msr	BASEPRI, r0
 800352c:	bc08      	pop	{r3}
 800352e:	6819      	ldr	r1, [r3, #0]
 8003530:	6808      	ldr	r0, [r1, #0]
 8003532:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003536:	f01e 0f10 	tst.w	lr, #16
 800353a:	bf08      	it	eq
 800353c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003540:	f380 8809 	msr	PSP, r0
 8003544:	f3bf 8f6f 	isb	sy
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	f3af 8000 	nop.w

08003550 <pxCurrentTCBConst>:
 8003550:	200014a8 	.word	0x200014a8

08003554 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800355a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800355e:	f383 8811 	msr	BASEPRI, r3
 8003562:	f3bf 8f6f 	isb	sy
 8003566:	f3bf 8f4f 	dsb	sy
 800356a:	607b      	str	r3, [r7, #4]
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 800356c:	f001 fea0 	bl	80052b0 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003570:	f000 fca6 	bl	8003ec0 <xTaskIncrementTick>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d006      	beq.n	8003588 <xPortSysTickHandler+0x34>
		{
			traceISR_EXIT_TO_SCHEDULER();
 800357a:	f001 fef5 	bl	8005368 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800357e:	4b07      	ldr	r3, [pc, #28]	; (800359c <xPortSysTickHandler+0x48>)
 8003580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	e001      	b.n	800358c <xPortSysTickHandler+0x38>
		}
		else
		{
			traceISR_EXIT();
 8003588:	f001 fed2 	bl	8005330 <SEGGER_SYSVIEW_RecordExitISR>
 800358c:	2300      	movs	r3, #0
 800358e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8003596:	3708      	adds	r7, #8
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	e000ed04 	.word	0xe000ed04

080035a0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80035a4:	4a07      	ldr	r2, [pc, #28]	; (80035c4 <vPortSetupTimerInterrupt+0x24>)
 80035a6:	4b08      	ldr	r3, [pc, #32]	; (80035c8 <vPortSetupTimerInterrupt+0x28>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4908      	ldr	r1, [pc, #32]	; (80035cc <vPortSetupTimerInterrupt+0x2c>)
 80035ac:	fba1 1303 	umull	r1, r3, r1, r3
 80035b0:	099b      	lsrs	r3, r3, #6
 80035b2:	3b01      	subs	r3, #1
 80035b4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80035b6:	4b06      	ldr	r3, [pc, #24]	; (80035d0 <vPortSetupTimerInterrupt+0x30>)
 80035b8:	2207      	movs	r2, #7
 80035ba:	601a      	str	r2, [r3, #0]
}
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	e000e014 	.word	0xe000e014
 80035c8:	20000000 	.word	0x20000000
 80035cc:	10624dd3 	.word	0x10624dd3
 80035d0:	e000e010 	.word	0xe000e010

080035d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80035d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80035e4 <vPortEnableVFP+0x10>
 80035d8:	6801      	ldr	r1, [r0, #0]
 80035da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80035de:	6001      	str	r1, [r0, #0]
 80035e0:	4770      	bx	lr
 80035e2:	0000      	.short	0x0000
 80035e4:	e000ed88 	.word	0xe000ed88

080035e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 80035ee:	f3ef 8305 	mrs	r3, IPSR
 80035f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2b0f      	cmp	r3, #15
 80035f8:	d913      	bls.n	8003622 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80035fa:	4a15      	ldr	r2, [pc, #84]	; (8003650 <vPortValidateInterruptPriority+0x68>)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	4413      	add	r3, r2
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003604:	4b13      	ldr	r3, [pc, #76]	; (8003654 <vPortValidateInterruptPriority+0x6c>)
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	7afa      	ldrb	r2, [r7, #11]
 800360a:	429a      	cmp	r2, r3
 800360c:	d209      	bcs.n	8003622 <vPortValidateInterruptPriority+0x3a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800360e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003612:	f383 8811 	msr	BASEPRI, r3
 8003616:	f3bf 8f6f 	isb	sy
 800361a:	f3bf 8f4f 	dsb	sy
 800361e:	607b      	str	r3, [r7, #4]
 8003620:	e7fe      	b.n	8003620 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003622:	4b0d      	ldr	r3, [pc, #52]	; (8003658 <vPortValidateInterruptPriority+0x70>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800362a:	4b0c      	ldr	r3, [pc, #48]	; (800365c <vPortValidateInterruptPriority+0x74>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	429a      	cmp	r2, r3
 8003630:	d909      	bls.n	8003646 <vPortValidateInterruptPriority+0x5e>
 8003632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003636:	f383 8811 	msr	BASEPRI, r3
 800363a:	f3bf 8f6f 	isb	sy
 800363e:	f3bf 8f4f 	dsb	sy
 8003642:	603b      	str	r3, [r7, #0]
 8003644:	e7fe      	b.n	8003644 <vPortValidateInterruptPriority+0x5c>
	}
 8003646:	3714      	adds	r7, #20
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr
 8003650:	e000e3f0 	.word	0xe000e3f0
 8003654:	20000088 	.word	0x20000088
 8003658:	e000ed0c 	.word	0xe000ed0c
 800365c:	2000008c 	.word	0x2000008c

08003660 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b08a      	sub	sp, #40	; 0x28
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003668:	2300      	movs	r3, #0
 800366a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800366c:	f000 fb66 	bl	8003d3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003670:	4b57      	ldr	r3, [pc, #348]	; (80037d0 <pvPortMalloc+0x170>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d101      	bne.n	800367c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003678:	f000 f90c 	bl	8003894 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800367c:	4b55      	ldr	r3, [pc, #340]	; (80037d4 <pvPortMalloc+0x174>)
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4013      	ands	r3, r2
 8003684:	2b00      	cmp	r3, #0
 8003686:	f040 808c 	bne.w	80037a2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d01c      	beq.n	80036ca <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003690:	2208      	movs	r2, #8
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4413      	add	r3, r2
 8003696:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f003 0307 	and.w	r3, r3, #7
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d013      	beq.n	80036ca <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f023 0307 	bic.w	r3, r3, #7
 80036a8:	3308      	adds	r3, #8
 80036aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f003 0307 	and.w	r3, r3, #7
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d009      	beq.n	80036ca <pvPortMalloc+0x6a>
 80036b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ba:	f383 8811 	msr	BASEPRI, r3
 80036be:	f3bf 8f6f 	isb	sy
 80036c2:	f3bf 8f4f 	dsb	sy
 80036c6:	617b      	str	r3, [r7, #20]
 80036c8:	e7fe      	b.n	80036c8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d068      	beq.n	80037a2 <pvPortMalloc+0x142>
 80036d0:	4b41      	ldr	r3, [pc, #260]	; (80037d8 <pvPortMalloc+0x178>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d863      	bhi.n	80037a2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80036da:	4b40      	ldr	r3, [pc, #256]	; (80037dc <pvPortMalloc+0x17c>)
 80036dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80036de:	4b3f      	ldr	r3, [pc, #252]	; (80037dc <pvPortMalloc+0x17c>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80036e4:	e004      	b.n	80036f0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	627b      	str	r3, [r7, #36]	; 0x24
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80036f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f2:	685a      	ldr	r2, [r3, #4]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d203      	bcs.n	8003702 <pvPortMalloc+0xa2>
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1f1      	bne.n	80036e6 <pvPortMalloc+0x86>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003702:	4b33      	ldr	r3, [pc, #204]	; (80037d0 <pvPortMalloc+0x170>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003708:	429a      	cmp	r2, r3
 800370a:	d04a      	beq.n	80037a2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800370c:	6a3b      	ldr	r3, [r7, #32]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2208      	movs	r2, #8
 8003712:	4413      	add	r3, r2
 8003714:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	6a3b      	ldr	r3, [r7, #32]
 800371c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	1ad2      	subs	r2, r2, r3
 8003726:	2308      	movs	r3, #8
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	429a      	cmp	r2, r3
 800372c:	d91e      	bls.n	800376c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800372e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4413      	add	r3, r2
 8003734:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	f003 0307 	and.w	r3, r3, #7
 800373c:	2b00      	cmp	r3, #0
 800373e:	d009      	beq.n	8003754 <pvPortMalloc+0xf4>
 8003740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003744:	f383 8811 	msr	BASEPRI, r3
 8003748:	f3bf 8f6f 	isb	sy
 800374c:	f3bf 8f4f 	dsb	sy
 8003750:	613b      	str	r3, [r7, #16]
 8003752:	e7fe      	b.n	8003752 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	1ad2      	subs	r2, r2, r3
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003766:	69b8      	ldr	r0, [r7, #24]
 8003768:	f000 f8f6 	bl	8003958 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800376c:	4b1a      	ldr	r3, [pc, #104]	; (80037d8 <pvPortMalloc+0x178>)
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	4a18      	ldr	r2, [pc, #96]	; (80037d8 <pvPortMalloc+0x178>)
 8003778:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800377a:	4b17      	ldr	r3, [pc, #92]	; (80037d8 <pvPortMalloc+0x178>)
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	4b18      	ldr	r3, [pc, #96]	; (80037e0 <pvPortMalloc+0x180>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	429a      	cmp	r2, r3
 8003784:	d203      	bcs.n	800378e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003786:	4b14      	ldr	r3, [pc, #80]	; (80037d8 <pvPortMalloc+0x178>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a15      	ldr	r2, [pc, #84]	; (80037e0 <pvPortMalloc+0x180>)
 800378c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	4b10      	ldr	r3, [pc, #64]	; (80037d4 <pvPortMalloc+0x174>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	431a      	orrs	r2, r3
 8003798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	2200      	movs	r2, #0
 80037a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80037a2:	f000 fad9 	bl	8003d58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d009      	beq.n	80037c4 <pvPortMalloc+0x164>
 80037b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b4:	f383 8811 	msr	BASEPRI, r3
 80037b8:	f3bf 8f6f 	isb	sy
 80037bc:	f3bf 8f4f 	dsb	sy
 80037c0:	60fb      	str	r3, [r7, #12]
 80037c2:	e7fe      	b.n	80037c2 <pvPortMalloc+0x162>
	return pvReturn;
 80037c4:	69fb      	ldr	r3, [r7, #28]
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3728      	adds	r7, #40	; 0x28
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	20001498 	.word	0x20001498
 80037d4:	200014a4 	.word	0x200014a4
 80037d8:	2000149c 	.word	0x2000149c
 80037dc:	20001490 	.word	0x20001490
 80037e0:	200014a0 	.word	0x200014a0

080037e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d046      	beq.n	8003884 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80037f6:	2308      	movs	r3, #8
 80037f8:	425b      	negs	r3, r3
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	4413      	add	r3, r2
 80037fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	685a      	ldr	r2, [r3, #4]
 8003808:	4b20      	ldr	r3, [pc, #128]	; (800388c <vPortFree+0xa8>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4013      	ands	r3, r2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d109      	bne.n	8003826 <vPortFree+0x42>
 8003812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003816:	f383 8811 	msr	BASEPRI, r3
 800381a:	f3bf 8f6f 	isb	sy
 800381e:	f3bf 8f4f 	dsb	sy
 8003822:	60fb      	str	r3, [r7, #12]
 8003824:	e7fe      	b.n	8003824 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d009      	beq.n	8003842 <vPortFree+0x5e>
 800382e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003832:	f383 8811 	msr	BASEPRI, r3
 8003836:	f3bf 8f6f 	isb	sy
 800383a:	f3bf 8f4f 	dsb	sy
 800383e:	60bb      	str	r3, [r7, #8]
 8003840:	e7fe      	b.n	8003840 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	4b11      	ldr	r3, [pc, #68]	; (800388c <vPortFree+0xa8>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4013      	ands	r3, r2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d019      	beq.n	8003884 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d115      	bne.n	8003884 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	685a      	ldr	r2, [r3, #4]
 800385c:	4b0b      	ldr	r3, [pc, #44]	; (800388c <vPortFree+0xa8>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	43db      	mvns	r3, r3
 8003862:	401a      	ands	r2, r3
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003868:	f000 fa68 	bl	8003d3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	4b07      	ldr	r3, [pc, #28]	; (8003890 <vPortFree+0xac>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4413      	add	r3, r2
 8003876:	4a06      	ldr	r2, [pc, #24]	; (8003890 <vPortFree+0xac>)
 8003878:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800387a:	6938      	ldr	r0, [r7, #16]
 800387c:	f000 f86c 	bl	8003958 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003880:	f000 fa6a 	bl	8003d58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003884:	3718      	adds	r7, #24
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	200014a4 	.word	0x200014a4
 8003890:	2000149c 	.word	0x2000149c

08003894 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800389a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800389e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80038a0:	4b27      	ldr	r3, [pc, #156]	; (8003940 <prvHeapInit+0xac>)
 80038a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f003 0307 	and.w	r3, r3, #7
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00c      	beq.n	80038c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	3307      	adds	r3, #7
 80038b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f023 0307 	bic.w	r3, r3, #7
 80038ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	4a1f      	ldr	r2, [pc, #124]	; (8003940 <prvHeapInit+0xac>)
 80038c4:	4413      	add	r3, r2
 80038c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80038cc:	4a1d      	ldr	r2, [pc, #116]	; (8003944 <prvHeapInit+0xb0>)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80038d2:	4b1c      	ldr	r3, [pc, #112]	; (8003944 <prvHeapInit+0xb0>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	4413      	add	r3, r2
 80038de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80038e0:	2208      	movs	r2, #8
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	1a9b      	subs	r3, r3, r2
 80038e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f023 0307 	bic.w	r3, r3, #7
 80038ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	4a15      	ldr	r2, [pc, #84]	; (8003948 <prvHeapInit+0xb4>)
 80038f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80038f6:	4b14      	ldr	r3, [pc, #80]	; (8003948 <prvHeapInit+0xb4>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2200      	movs	r2, #0
 80038fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80038fe:	4b12      	ldr	r3, [pc, #72]	; (8003948 <prvHeapInit+0xb4>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2200      	movs	r2, #0
 8003904:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	1ad2      	subs	r2, r2, r3
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003914:	4b0c      	ldr	r3, [pc, #48]	; (8003948 <prvHeapInit+0xb4>)
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	4a0a      	ldr	r2, [pc, #40]	; (800394c <prvHeapInit+0xb8>)
 8003922:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	4a09      	ldr	r2, [pc, #36]	; (8003950 <prvHeapInit+0xbc>)
 800392a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800392c:	4b09      	ldr	r3, [pc, #36]	; (8003954 <prvHeapInit+0xc0>)
 800392e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003932:	601a      	str	r2, [r3, #0]
}
 8003934:	3714      	adds	r7, #20
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	20000090 	.word	0x20000090
 8003944:	20001490 	.word	0x20001490
 8003948:	20001498 	.word	0x20001498
 800394c:	200014a0 	.word	0x200014a0
 8003950:	2000149c 	.word	0x2000149c
 8003954:	200014a4 	.word	0x200014a4

08003958 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003960:	4b27      	ldr	r3, [pc, #156]	; (8003a00 <prvInsertBlockIntoFreeList+0xa8>)
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	e002      	b.n	800396c <prvInsertBlockIntoFreeList+0x14>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	60fb      	str	r3, [r7, #12]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	429a      	cmp	r2, r3
 8003974:	d3f7      	bcc.n	8003966 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	68ba      	ldr	r2, [r7, #8]
 8003980:	441a      	add	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	429a      	cmp	r2, r3
 8003986:	d108      	bne.n	800399a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	441a      	add	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	68ba      	ldr	r2, [r7, #8]
 80039a4:	441a      	add	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d118      	bne.n	80039e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	4b14      	ldr	r3, [pc, #80]	; (8003a04 <prvInsertBlockIntoFreeList+0xac>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d00d      	beq.n	80039d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	441a      	add	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	601a      	str	r2, [r3, #0]
 80039d4:	e008      	b.n	80039e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80039d6:	4b0b      	ldr	r3, [pc, #44]	; (8003a04 <prvInsertBlockIntoFreeList+0xac>)
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	601a      	str	r2, [r3, #0]
 80039de:	e003      	b.n	80039e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d002      	beq.n	80039f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039f6:	3714      	adds	r7, #20
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr
 8003a00:	20001490 	.word	0x20001490
 8003a04:	20001498 	.word	0x20001498

08003a08 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b08c      	sub	sp, #48	; 0x30
 8003a0c:	af04      	add	r7, sp, #16
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	603b      	str	r3, [r7, #0]
 8003a14:	4613      	mov	r3, r2
 8003a16:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a18:	88fb      	ldrh	r3, [r7, #6]
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7ff fe1f 	bl	8003660 <pvPortMalloc>
 8003a22:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00e      	beq.n	8003a48 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003a2a:	205c      	movs	r0, #92	; 0x5c
 8003a2c:	f7ff fe18 	bl	8003660 <pvPortMalloc>
 8003a30:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d003      	beq.n	8003a40 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	631a      	str	r2, [r3, #48]	; 0x30
 8003a3e:	e005      	b.n	8003a4c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a40:	6978      	ldr	r0, [r7, #20]
 8003a42:	f7ff fecf 	bl	80037e4 <vPortFree>
 8003a46:	e001      	b.n	8003a4c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d013      	beq.n	8003a7a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a52:	88fa      	ldrh	r2, [r7, #6]
 8003a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a56:	9300      	str	r3, [sp, #0]
 8003a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a5a:	9301      	str	r3, [sp, #4]
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	9302      	str	r3, [sp, #8]
 8003a60:	2300      	movs	r3, #0
 8003a62:	9303      	str	r3, [sp, #12]
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	68b9      	ldr	r1, [r7, #8]
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	f000 f80f 	bl	8003a8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a6e:	69f8      	ldr	r0, [r7, #28]
 8003a70:	f000 f892 	bl	8003b98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a74:	2301      	movs	r3, #1
 8003a76:	61bb      	str	r3, [r7, #24]
 8003a78:	e002      	b.n	8003a80 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a7e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a80:	69bb      	ldr	r3, [r7, #24]
	}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3720      	adds	r7, #32
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop

08003a8c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b088      	sub	sp, #32
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
 8003a98:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	4610      	mov	r0, r2
 8003aa4:	21a5      	movs	r1, #165	; 0xa5
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	f001 fff7 	bl	8005a9a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4413      	add	r3, r2
 8003abc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	f023 0307 	bic.w	r3, r3, #7
 8003ac4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	f003 0307 	and.w	r3, r3, #7
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d009      	beq.n	8003ae4 <prvInitialiseNewTask+0x58>
 8003ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad4:	f383 8811 	msr	BASEPRI, r3
 8003ad8:	f3bf 8f6f 	isb	sy
 8003adc:	f3bf 8f4f 	dsb	sy
 8003ae0:	617b      	str	r3, [r7, #20]
 8003ae2:	e7fe      	b.n	8003ae2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	61fb      	str	r3, [r7, #28]
 8003ae8:	e013      	b.n	8003b12 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003aea:	68ba      	ldr	r2, [r7, #8]
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	4413      	add	r3, r2
 8003af0:	7819      	ldrb	r1, [r3, #0]
 8003af2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	4413      	add	r3, r2
 8003af8:	3330      	adds	r3, #48	; 0x30
 8003afa:	460a      	mov	r2, r1
 8003afc:	711a      	strb	r2, [r3, #4]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	4413      	add	r3, r2
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d100      	bne.n	8003b0c <prvInitialiseNewTask+0x80>
		{
			break;
 8003b0a:	e005      	b.n	8003b18 <prvInitialiseNewTask+0x8c>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	3301      	adds	r3, #1
 8003b10:	61fb      	str	r3, [r7, #28]
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	2b0f      	cmp	r3, #15
 8003b16:	d9e8      	bls.n	8003aea <prvInitialiseNewTask+0x5e>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b22:	2b06      	cmp	r3, #6
 8003b24:	d901      	bls.n	8003b2a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b26:	2306      	movs	r3, #6
 8003b28:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b2e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b34:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b38:	2200      	movs	r2, #0
 8003b3a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3e:	3304      	adds	r3, #4
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7ff fb21 	bl	8003188 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b48:	3318      	adds	r3, #24
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7ff fb1c 	bl	8003188 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b54:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b58:	f1c3 0207 	rsb	r2, r3, #7
 8003b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b64:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b68:	2200      	movs	r2, #0
 8003b6a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b74:	69b8      	ldr	r0, [r7, #24]
 8003b76:	68f9      	ldr	r1, [r7, #12]
 8003b78:	683a      	ldr	r2, [r7, #0]
 8003b7a:	f7ff fb5f 	bl	800323c <pxPortInitialiseStack>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b82:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d002      	beq.n	8003b90 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b8e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b90:	3720      	adds	r7, #32
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop

08003b98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003b98:	b5b0      	push	{r4, r5, r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af02      	add	r7, sp, #8
 8003b9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ba0:	f7ff fc4c 	bl	800343c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003ba4:	4b3c      	ldr	r3, [pc, #240]	; (8003c98 <prvAddNewTaskToReadyList+0x100>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	4a3b      	ldr	r2, [pc, #236]	; (8003c98 <prvAddNewTaskToReadyList+0x100>)
 8003bac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003bae:	4b3b      	ldr	r3, [pc, #236]	; (8003c9c <prvAddNewTaskToReadyList+0x104>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d109      	bne.n	8003bca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003bb6:	4a39      	ldr	r2, [pc, #228]	; (8003c9c <prvAddNewTaskToReadyList+0x104>)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003bbc:	4b36      	ldr	r3, [pc, #216]	; (8003c98 <prvAddNewTaskToReadyList+0x100>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d110      	bne.n	8003be6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003bc4:	f000 fac2 	bl	800414c <prvInitialiseTaskLists>
 8003bc8:	e00d      	b.n	8003be6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003bca:	4b35      	ldr	r3, [pc, #212]	; (8003ca0 <prvAddNewTaskToReadyList+0x108>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d109      	bne.n	8003be6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003bd2:	4b32      	ldr	r3, [pc, #200]	; (8003c9c <prvAddNewTaskToReadyList+0x104>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d802      	bhi.n	8003be6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003be0:	4a2e      	ldr	r2, [pc, #184]	; (8003c9c <prvAddNewTaskToReadyList+0x104>)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003be6:	4b2f      	ldr	r3, [pc, #188]	; (8003ca4 <prvAddNewTaskToReadyList+0x10c>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	3301      	adds	r3, #1
 8003bec:	4a2d      	ldr	r2, [pc, #180]	; (8003ca4 <prvAddNewTaskToReadyList+0x10c>)
 8003bee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003bf0:	4b2c      	ldr	r3, [pc, #176]	; (8003ca4 <prvAddNewTaskToReadyList+0x10c>)
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d016      	beq.n	8003c2c <prvAddNewTaskToReadyList+0x94>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f001 fbe9 	bl	80053d8 <SEGGER_SYSVIEW_OnTaskCreate>
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c16:	461d      	mov	r5, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	461c      	mov	r4, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c22:	1ae3      	subs	r3, r4, r3
 8003c24:	9300      	str	r3, [sp, #0]
 8003c26:	462b      	mov	r3, r5
 8003c28:	f001 fe46 	bl	80058b8 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f001 fc56 	bl	80054e0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c38:	461a      	mov	r2, r3
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	fa03 f202 	lsl.w	r2, r3, r2
 8003c40:	4b19      	ldr	r3, [pc, #100]	; (8003ca8 <prvAddNewTaskToReadyList+0x110>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	4a18      	ldr	r2, [pc, #96]	; (8003ca8 <prvAddNewTaskToReadyList+0x110>)
 8003c48:	6013      	str	r3, [r2, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c4e:	4613      	mov	r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	4413      	add	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4a15      	ldr	r2, [pc, #84]	; (8003cac <prvAddNewTaskToReadyList+0x114>)
 8003c58:	441a      	add	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	3304      	adds	r3, #4
 8003c5e:	4610      	mov	r0, r2
 8003c60:	4619      	mov	r1, r3
 8003c62:	f7ff fa9d 	bl	80031a0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c66:	f7ff fc17 	bl	8003498 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c6a:	4b0d      	ldr	r3, [pc, #52]	; (8003ca0 <prvAddNewTaskToReadyList+0x108>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00e      	beq.n	8003c90 <prvAddNewTaskToReadyList+0xf8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c72:	4b0a      	ldr	r3, [pc, #40]	; (8003c9c <prvAddNewTaskToReadyList+0x104>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d207      	bcs.n	8003c90 <prvAddNewTaskToReadyList+0xf8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c80:	4b0b      	ldr	r3, [pc, #44]	; (8003cb0 <prvAddNewTaskToReadyList+0x118>)
 8003c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	f3bf 8f4f 	dsb	sy
 8003c8c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c90:	3708      	adds	r7, #8
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bdb0      	pop	{r4, r5, r7, pc}
 8003c96:	bf00      	nop
 8003c98:	200015a8 	.word	0x200015a8
 8003c9c:	200014a8 	.word	0x200014a8
 8003ca0:	200015b4 	.word	0x200015b4
 8003ca4:	200015c4 	.word	0x200015c4
 8003ca8:	200015b0 	.word	0x200015b0
 8003cac:	200014ac 	.word	0x200014ac
 8003cb0:	e000ed04 	.word	0xe000ed04

08003cb4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8003cba:	2300      	movs	r3, #0
 8003cbc:	9300      	str	r3, [sp, #0]
 8003cbe:	4b19      	ldr	r3, [pc, #100]	; (8003d24 <vTaskStartScheduler+0x70>)
 8003cc0:	9301      	str	r3, [sp, #4]
 8003cc2:	4819      	ldr	r0, [pc, #100]	; (8003d28 <vTaskStartScheduler+0x74>)
 8003cc4:	4919      	ldr	r1, [pc, #100]	; (8003d2c <vTaskStartScheduler+0x78>)
 8003cc6:	2280      	movs	r2, #128	; 0x80
 8003cc8:	2300      	movs	r3, #0
 8003cca:	f7ff fe9d 	bl	8003a08 <xTaskCreate>
 8003cce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d115      	bne.n	8003d02 <vTaskStartScheduler+0x4e>
 8003cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cda:	f383 8811 	msr	BASEPRI, r3
 8003cde:	f3bf 8f6f 	isb	sy
 8003ce2:	f3bf 8f4f 	dsb	sy
 8003ce6:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003ce8:	4b11      	ldr	r3, [pc, #68]	; (8003d30 <vTaskStartScheduler+0x7c>)
 8003cea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003cee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003cf0:	4b10      	ldr	r3, [pc, #64]	; (8003d34 <vTaskStartScheduler+0x80>)
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003cf6:	4b10      	ldr	r3, [pc, #64]	; (8003d38 <vTaskStartScheduler+0x84>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003cfc:	f7ff fb12 	bl	8003324 <xPortStartScheduler>
 8003d00:	e00d      	b.n	8003d1e <vTaskStartScheduler+0x6a>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d08:	d109      	bne.n	8003d1e <vTaskStartScheduler+0x6a>
 8003d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d0e:	f383 8811 	msr	BASEPRI, r3
 8003d12:	f3bf 8f6f 	isb	sy
 8003d16:	f3bf 8f4f 	dsb	sy
 8003d1a:	607b      	str	r3, [r7, #4]
 8003d1c:	e7fe      	b.n	8003d1c <vTaskStartScheduler+0x68>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	200015cc 	.word	0x200015cc
 8003d28:	0800411d 	.word	0x0800411d
 8003d2c:	080061d4 	.word	0x080061d4
 8003d30:	200015c8 	.word	0x200015c8
 8003d34:	200015b4 	.word	0x200015b4
 8003d38:	200015ac 	.word	0x200015ac

08003d3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003d40:	4b04      	ldr	r3, [pc, #16]	; (8003d54 <vTaskSuspendAll+0x18>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	3301      	adds	r3, #1
 8003d46:	4a03      	ldr	r2, [pc, #12]	; (8003d54 <vTaskSuspendAll+0x18>)
 8003d48:	6013      	str	r3, [r2, #0]
}
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	200015d0 	.word	0x200015d0

08003d58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003d62:	2300      	movs	r3, #0
 8003d64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003d66:	4b44      	ldr	r3, [pc, #272]	; (8003e78 <xTaskResumeAll+0x120>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d109      	bne.n	8003d82 <xTaskResumeAll+0x2a>
 8003d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d72:	f383 8811 	msr	BASEPRI, r3
 8003d76:	f3bf 8f6f 	isb	sy
 8003d7a:	f3bf 8f4f 	dsb	sy
 8003d7e:	603b      	str	r3, [r7, #0]
 8003d80:	e7fe      	b.n	8003d80 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003d82:	f7ff fb5b 	bl	800343c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003d86:	4b3c      	ldr	r3, [pc, #240]	; (8003e78 <xTaskResumeAll+0x120>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	4a3a      	ldr	r2, [pc, #232]	; (8003e78 <xTaskResumeAll+0x120>)
 8003d8e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d90:	4b39      	ldr	r3, [pc, #228]	; (8003e78 <xTaskResumeAll+0x120>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d167      	bne.n	8003e68 <xTaskResumeAll+0x110>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d98:	4b38      	ldr	r3, [pc, #224]	; (8003e7c <xTaskResumeAll+0x124>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d063      	beq.n	8003e68 <xTaskResumeAll+0x110>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003da0:	e034      	b.n	8003e0c <xTaskResumeAll+0xb4>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003da2:	4b37      	ldr	r3, [pc, #220]	; (8003e80 <xTaskResumeAll+0x128>)
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	3318      	adds	r3, #24
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7ff fa1a 	bl	80031e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	3304      	adds	r3, #4
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7ff fa15 	bl	80031e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f001 fb8d 	bl	80054e0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dca:	461a      	mov	r2, r3
 8003dcc:	2301      	movs	r3, #1
 8003dce:	fa03 f202 	lsl.w	r2, r3, r2
 8003dd2:	4b2c      	ldr	r3, [pc, #176]	; (8003e84 <xTaskResumeAll+0x12c>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	4a2a      	ldr	r2, [pc, #168]	; (8003e84 <xTaskResumeAll+0x12c>)
 8003dda:	6013      	str	r3, [r2, #0]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003de0:	4613      	mov	r3, r2
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	4413      	add	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4a27      	ldr	r2, [pc, #156]	; (8003e88 <xTaskResumeAll+0x130>)
 8003dea:	441a      	add	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	3304      	adds	r3, #4
 8003df0:	4610      	mov	r0, r2
 8003df2:	4619      	mov	r1, r3
 8003df4:	f7ff f9d4 	bl	80031a0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dfc:	4b23      	ldr	r3, [pc, #140]	; (8003e8c <xTaskResumeAll+0x134>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d302      	bcc.n	8003e0c <xTaskResumeAll+0xb4>
					{
						xYieldPending = pdTRUE;
 8003e06:	4b22      	ldr	r3, [pc, #136]	; (8003e90 <xTaskResumeAll+0x138>)
 8003e08:	2201      	movs	r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e0c:	4b1c      	ldr	r3, [pc, #112]	; (8003e80 <xTaskResumeAll+0x128>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1c6      	bne.n	8003da2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <xTaskResumeAll+0xc6>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e1a:	f000 fa1f 	bl	800425c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003e1e:	4b1d      	ldr	r3, [pc, #116]	; (8003e94 <xTaskResumeAll+0x13c>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d010      	beq.n	8003e4c <xTaskResumeAll+0xf4>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003e2a:	f000 f849 	bl	8003ec0 <xTaskIncrementTick>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d002      	beq.n	8003e3a <xTaskResumeAll+0xe2>
							{
								xYieldPending = pdTRUE;
 8003e34:	4b16      	ldr	r3, [pc, #88]	; (8003e90 <xTaskResumeAll+0x138>)
 8003e36:	2201      	movs	r2, #1
 8003e38:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1f1      	bne.n	8003e2a <xTaskResumeAll+0xd2>

						uxPendedTicks = 0;
 8003e46:	4b13      	ldr	r3, [pc, #76]	; (8003e94 <xTaskResumeAll+0x13c>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003e4c:	4b10      	ldr	r3, [pc, #64]	; (8003e90 <xTaskResumeAll+0x138>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d009      	beq.n	8003e68 <xTaskResumeAll+0x110>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003e54:	2301      	movs	r3, #1
 8003e56:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003e58:	4b0f      	ldr	r3, [pc, #60]	; (8003e98 <xTaskResumeAll+0x140>)
 8003e5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e5e:	601a      	str	r2, [r3, #0]
 8003e60:	f3bf 8f4f 	dsb	sy
 8003e64:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e68:	f7ff fb16 	bl	8003498 <vPortExitCritical>

	return xAlreadyYielded;
 8003e6c:	68bb      	ldr	r3, [r7, #8]
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	200015d0 	.word	0x200015d0
 8003e7c:	200015a8 	.word	0x200015a8
 8003e80:	20001568 	.word	0x20001568
 8003e84:	200015b0 	.word	0x200015b0
 8003e88:	200014ac 	.word	0x200014ac
 8003e8c:	200014a8 	.word	0x200014a8
 8003e90:	200015bc 	.word	0x200015bc
 8003e94:	200015b8 	.word	0x200015b8
 8003e98:	e000ed04 	.word	0xe000ed04

08003e9c <xTaskGetTickCountFromISR>:
	return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003ea2:	f7ff fba1 	bl	80035e8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8003eaa:	4b04      	ldr	r3, [pc, #16]	; (8003ebc <xTaskGetTickCountFromISR+0x20>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003eb0:	683b      	ldr	r3, [r7, #0]
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	200015ac 	.word	0x200015ac

08003ec0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003eca:	4b53      	ldr	r3, [pc, #332]	; (8004018 <xTaskIncrementTick+0x158>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f040 8092 	bne.w	8003ff8 <xTaskIncrementTick+0x138>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8003ed4:	4b51      	ldr	r3, [pc, #324]	; (800401c <xTaskIncrementTick+0x15c>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	3301      	adds	r3, #1
 8003eda:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003edc:	4a4f      	ldr	r2, [pc, #316]	; (800401c <xTaskIncrementTick+0x15c>)
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d11f      	bne.n	8003f28 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003ee8:	4b4d      	ldr	r3, [pc, #308]	; (8004020 <xTaskIncrementTick+0x160>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d009      	beq.n	8003f06 <xTaskIncrementTick+0x46>
 8003ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef6:	f383 8811 	msr	BASEPRI, r3
 8003efa:	f3bf 8f6f 	isb	sy
 8003efe:	f3bf 8f4f 	dsb	sy
 8003f02:	603b      	str	r3, [r7, #0]
 8003f04:	e7fe      	b.n	8003f04 <xTaskIncrementTick+0x44>
 8003f06:	4b46      	ldr	r3, [pc, #280]	; (8004020 <xTaskIncrementTick+0x160>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	60fb      	str	r3, [r7, #12]
 8003f0c:	4b45      	ldr	r3, [pc, #276]	; (8004024 <xTaskIncrementTick+0x164>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a43      	ldr	r2, [pc, #268]	; (8004020 <xTaskIncrementTick+0x160>)
 8003f12:	6013      	str	r3, [r2, #0]
 8003f14:	4a43      	ldr	r2, [pc, #268]	; (8004024 <xTaskIncrementTick+0x164>)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6013      	str	r3, [r2, #0]
 8003f1a:	4b43      	ldr	r3, [pc, #268]	; (8004028 <xTaskIncrementTick+0x168>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	3301      	adds	r3, #1
 8003f20:	4a41      	ldr	r2, [pc, #260]	; (8004028 <xTaskIncrementTick+0x168>)
 8003f22:	6013      	str	r3, [r2, #0]
 8003f24:	f000 f99a 	bl	800425c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f28:	4b40      	ldr	r3, [pc, #256]	; (800402c <xTaskIncrementTick+0x16c>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d353      	bcc.n	8003fda <xTaskIncrementTick+0x11a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f32:	4b3b      	ldr	r3, [pc, #236]	; (8004020 <xTaskIncrementTick+0x160>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d101      	bne.n	8003f40 <xTaskIncrementTick+0x80>
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e000      	b.n	8003f42 <xTaskIncrementTick+0x82>
 8003f40:	2300      	movs	r3, #0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d004      	beq.n	8003f50 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f46:	4b39      	ldr	r3, [pc, #228]	; (800402c <xTaskIncrementTick+0x16c>)
 8003f48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f4c:	601a      	str	r2, [r3, #0]
					break;
 8003f4e:	e044      	b.n	8003fda <xTaskIncrementTick+0x11a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003f50:	4b33      	ldr	r3, [pc, #204]	; (8004020 <xTaskIncrementTick+0x160>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d203      	bcs.n	8003f70 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003f68:	4a30      	ldr	r2, [pc, #192]	; (800402c <xTaskIncrementTick+0x16c>)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6013      	str	r3, [r2, #0]
						break;
 8003f6e:	e034      	b.n	8003fda <xTaskIncrementTick+0x11a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	3304      	adds	r3, #4
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7ff f937 	bl	80031e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d004      	beq.n	8003f8c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	3318      	adds	r3, #24
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7ff f92e 	bl	80031e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f001 faa6 	bl	80054e0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f98:	461a      	mov	r2, r3
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	fa03 f202 	lsl.w	r2, r3, r2
 8003fa0:	4b23      	ldr	r3, [pc, #140]	; (8004030 <xTaskIncrementTick+0x170>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	4a22      	ldr	r2, [pc, #136]	; (8004030 <xTaskIncrementTick+0x170>)
 8003fa8:	6013      	str	r3, [r2, #0]
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fae:	4613      	mov	r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	4413      	add	r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4a1f      	ldr	r2, [pc, #124]	; (8004034 <xTaskIncrementTick+0x174>)
 8003fb8:	441a      	add	r2, r3
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	3304      	adds	r3, #4
 8003fbe:	4610      	mov	r0, r2
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	f7ff f8ed 	bl	80031a0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fca:	4b1b      	ldr	r3, [pc, #108]	; (8004038 <xTaskIncrementTick+0x178>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d301      	bcc.n	8003fd8 <xTaskIncrementTick+0x118>
						{
							xSwitchRequired = pdTRUE;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	617b      	str	r3, [r7, #20]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
 8003fd8:	e7ab      	b.n	8003f32 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003fda:	4b17      	ldr	r3, [pc, #92]	; (8004038 <xTaskIncrementTick+0x178>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fe0:	4914      	ldr	r1, [pc, #80]	; (8004034 <xTaskIncrementTick+0x174>)
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	4413      	add	r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	440b      	add	r3, r1
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d901      	bls.n	8003ff6 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	617b      	str	r3, [r7, #20]
 8003ff6:	e004      	b.n	8004002 <xTaskIncrementTick+0x142>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003ff8:	4b10      	ldr	r3, [pc, #64]	; (800403c <xTaskIncrementTick+0x17c>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	4a0f      	ldr	r2, [pc, #60]	; (800403c <xTaskIncrementTick+0x17c>)
 8004000:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004002:	4b0f      	ldr	r3, [pc, #60]	; (8004040 <xTaskIncrementTick+0x180>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <xTaskIncrementTick+0x14e>
		{
			xSwitchRequired = pdTRUE;
 800400a:	2301      	movs	r3, #1
 800400c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800400e:	697b      	ldr	r3, [r7, #20]
}
 8004010:	4618      	mov	r0, r3
 8004012:	3718      	adds	r7, #24
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	200015d0 	.word	0x200015d0
 800401c:	200015ac 	.word	0x200015ac
 8004020:	20001560 	.word	0x20001560
 8004024:	20001564 	.word	0x20001564
 8004028:	200015c0 	.word	0x200015c0
 800402c:	200015c8 	.word	0x200015c8
 8004030:	200015b0 	.word	0x200015b0
 8004034:	200014ac 	.word	0x200014ac
 8004038:	200014a8 	.word	0x200014a8
 800403c:	200015b8 	.word	0x200015b8
 8004040:	200015bc 	.word	0x200015bc

08004044 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800404a:	4b2e      	ldr	r3, [pc, #184]	; (8004104 <vTaskSwitchContext+0xc0>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d003      	beq.n	800405a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004052:	4b2d      	ldr	r3, [pc, #180]	; (8004108 <vTaskSwitchContext+0xc4>)
 8004054:	2201      	movs	r2, #1
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	e051      	b.n	80040fe <vTaskSwitchContext+0xba>
	}
	else
	{
		xYieldPending = pdFALSE;
 800405a:	4b2b      	ldr	r3, [pc, #172]	; (8004108 <vTaskSwitchContext+0xc4>)
 800405c:	2200      	movs	r2, #0
 800405e:	601a      	str	r2, [r3, #0]
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004060:	4b2a      	ldr	r3, [pc, #168]	; (800410c <vTaskSwitchContext+0xc8>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	60fb      	str	r3, [r7, #12]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	fab3 f383 	clz	r3, r3
 800406c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800406e:	7afb      	ldrb	r3, [r7, #11]
 8004070:	f1c3 031f 	rsb	r3, r3, #31
 8004074:	617b      	str	r3, [r7, #20]
 8004076:	4926      	ldr	r1, [pc, #152]	; (8004110 <vTaskSwitchContext+0xcc>)
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	4613      	mov	r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	4413      	add	r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	440b      	add	r3, r1
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d109      	bne.n	800409e <vTaskSwitchContext+0x5a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800408a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408e:	f383 8811 	msr	BASEPRI, r3
 8004092:	f3bf 8f6f 	isb	sy
 8004096:	f3bf 8f4f 	dsb	sy
 800409a:	607b      	str	r3, [r7, #4]
 800409c:	e7fe      	b.n	800409c <vTaskSwitchContext+0x58>
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	4613      	mov	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4413      	add	r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	4a19      	ldr	r2, [pc, #100]	; (8004110 <vTaskSwitchContext+0xcc>)
 80040aa:	4413      	add	r3, r2
 80040ac:	613b      	str	r3, [r7, #16]
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	605a      	str	r2, [r3, #4]
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	685a      	ldr	r2, [r3, #4]
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	3308      	adds	r3, #8
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d104      	bne.n	80040ce <vTaskSwitchContext+0x8a>
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	605a      	str	r2, [r3, #4]
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	4a0f      	ldr	r2, [pc, #60]	; (8004114 <vTaskSwitchContext+0xd0>)
 80040d6:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 80040d8:	4b0e      	ldr	r3, [pc, #56]	; (8004114 <vTaskSwitchContext+0xd0>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	3334      	adds	r3, #52	; 0x34
 80040de:	4618      	mov	r0, r3
 80040e0:	490d      	ldr	r1, [pc, #52]	; (8004118 <vTaskSwitchContext+0xd4>)
 80040e2:	2205      	movs	r2, #5
 80040e4:	f001 fcbe 	bl	8005a64 <memcmp>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d005      	beq.n	80040fa <vTaskSwitchContext+0xb6>
 80040ee:	4b09      	ldr	r3, [pc, #36]	; (8004114 <vTaskSwitchContext+0xd0>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f001 f9b2 	bl	800545c <SEGGER_SYSVIEW_OnTaskStartExec>
 80040f8:	e001      	b.n	80040fe <vTaskSwitchContext+0xba>
 80040fa:	f001 f951 	bl	80053a0 <SEGGER_SYSVIEW_OnIdle>
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80040fe:	3718      	adds	r7, #24
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	200015d0 	.word	0x200015d0
 8004108:	200015bc 	.word	0x200015bc
 800410c:	200015b0 	.word	0x200015b0
 8004110:	200014ac 	.word	0x200014ac
 8004114:	200014a8 	.word	0x200014a8
 8004118:	080061d4 	.word	0x080061d4

0800411c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004124:	f000 f850 	bl	80041c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004128:	4b06      	ldr	r3, [pc, #24]	; (8004144 <prvIdleTask+0x28>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d907      	bls.n	8004140 <prvIdleTask+0x24>
			{
				taskYIELD();
 8004130:	4b05      	ldr	r3, [pc, #20]	; (8004148 <prvIdleTask+0x2c>)
 8004132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004136:	601a      	str	r2, [r3, #0]
 8004138:	f3bf 8f4f 	dsb	sy
 800413c:	f3bf 8f6f 	isb	sy
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 8004140:	e7f0      	b.n	8004124 <prvIdleTask+0x8>
 8004142:	bf00      	nop
 8004144:	200014ac 	.word	0x200014ac
 8004148:	e000ed04 	.word	0xe000ed04

0800414c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004152:	2300      	movs	r3, #0
 8004154:	607b      	str	r3, [r7, #4]
 8004156:	e00c      	b.n	8004172 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	4613      	mov	r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	4413      	add	r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	4a11      	ldr	r2, [pc, #68]	; (80041a8 <prvInitialiseTaskLists+0x5c>)
 8004164:	4413      	add	r3, r2
 8004166:	4618      	mov	r0, r3
 8004168:	f7fe ffee 	bl	8003148 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	3301      	adds	r3, #1
 8004170:	607b      	str	r3, [r7, #4]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2b06      	cmp	r3, #6
 8004176:	d9ef      	bls.n	8004158 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8004178:	480c      	ldr	r0, [pc, #48]	; (80041ac <prvInitialiseTaskLists+0x60>)
 800417a:	f7fe ffe5 	bl	8003148 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800417e:	480c      	ldr	r0, [pc, #48]	; (80041b0 <prvInitialiseTaskLists+0x64>)
 8004180:	f7fe ffe2 	bl	8003148 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004184:	480b      	ldr	r0, [pc, #44]	; (80041b4 <prvInitialiseTaskLists+0x68>)
 8004186:	f7fe ffdf 	bl	8003148 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800418a:	480b      	ldr	r0, [pc, #44]	; (80041b8 <prvInitialiseTaskLists+0x6c>)
 800418c:	f7fe ffdc 	bl	8003148 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004190:	480a      	ldr	r0, [pc, #40]	; (80041bc <prvInitialiseTaskLists+0x70>)
 8004192:	f7fe ffd9 	bl	8003148 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004196:	4b0a      	ldr	r3, [pc, #40]	; (80041c0 <prvInitialiseTaskLists+0x74>)
 8004198:	4a04      	ldr	r2, [pc, #16]	; (80041ac <prvInitialiseTaskLists+0x60>)
 800419a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800419c:	4b09      	ldr	r3, [pc, #36]	; (80041c4 <prvInitialiseTaskLists+0x78>)
 800419e:	4a04      	ldr	r2, [pc, #16]	; (80041b0 <prvInitialiseTaskLists+0x64>)
 80041a0:	601a      	str	r2, [r3, #0]
}
 80041a2:	3708      	adds	r7, #8
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	200014ac 	.word	0x200014ac
 80041ac:	20001538 	.word	0x20001538
 80041b0:	2000154c 	.word	0x2000154c
 80041b4:	20001568 	.word	0x20001568
 80041b8:	2000157c 	.word	0x2000157c
 80041bc:	20001594 	.word	0x20001594
 80041c0:	20001560 	.word	0x20001560
 80041c4:	20001564 	.word	0x20001564

080041c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041ce:	e028      	b.n	8004222 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 80041d0:	f7ff fdb4 	bl	8003d3c <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80041d4:	4b16      	ldr	r3, [pc, #88]	; (8004230 <prvCheckTasksWaitingTermination+0x68>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	bf0c      	ite	eq
 80041dc:	2301      	moveq	r3, #1
 80041de:	2300      	movne	r3, #0
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 80041e4:	f7ff fdb8 	bl	8003d58 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d119      	bne.n	8004222 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 80041ee:	f7ff f925 	bl	800343c <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80041f2:	4b0f      	ldr	r3, [pc, #60]	; (8004230 <prvCheckTasksWaitingTermination+0x68>)
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	3304      	adds	r3, #4
 80041fe:	4618      	mov	r0, r3
 8004200:	f7fe fff2 	bl	80031e8 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8004204:	4b0b      	ldr	r3, [pc, #44]	; (8004234 <prvCheckTasksWaitingTermination+0x6c>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	3b01      	subs	r3, #1
 800420a:	4a0a      	ldr	r2, [pc, #40]	; (8004234 <prvCheckTasksWaitingTermination+0x6c>)
 800420c:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 800420e:	4b0a      	ldr	r3, [pc, #40]	; (8004238 <prvCheckTasksWaitingTermination+0x70>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	3b01      	subs	r3, #1
 8004214:	4a08      	ldr	r2, [pc, #32]	; (8004238 <prvCheckTasksWaitingTermination+0x70>)
 8004216:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8004218:	f7ff f93e 	bl	8003498 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 800421c:	6838      	ldr	r0, [r7, #0]
 800421e:	f000 f80d 	bl	800423c <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004222:	4b05      	ldr	r3, [pc, #20]	; (8004238 <prvCheckTasksWaitingTermination+0x70>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1d2      	bne.n	80041d0 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800422a:	3708      	adds	r7, #8
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	2000157c 	.word	0x2000157c
 8004234:	200015a8 	.word	0x200015a8
 8004238:	20001590 	.word	0x20001590

0800423c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004248:	4618      	mov	r0, r3
 800424a:	f7ff facb 	bl	80037e4 <vPortFree>
			vPortFree( pxTCB );
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7ff fac8 	bl	80037e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004254:	3708      	adds	r7, #8
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop

0800425c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004262:	4b0e      	ldr	r3, [pc, #56]	; (800429c <prvResetNextTaskUnblockTime+0x40>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <prvResetNextTaskUnblockTime+0x14>
 800426c:	2301      	movs	r3, #1
 800426e:	e000      	b.n	8004272 <prvResetNextTaskUnblockTime+0x16>
 8004270:	2300      	movs	r3, #0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d004      	beq.n	8004280 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004276:	4b0a      	ldr	r3, [pc, #40]	; (80042a0 <prvResetNextTaskUnblockTime+0x44>)
 8004278:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800427c:	601a      	str	r2, [r3, #0]
 800427e:	e008      	b.n	8004292 <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004280:	4b06      	ldr	r3, [pc, #24]	; (800429c <prvResetNextTaskUnblockTime+0x40>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	4a04      	ldr	r2, [pc, #16]	; (80042a0 <prvResetNextTaskUnblockTime+0x44>)
 8004290:	6013      	str	r3, [r2, #0]
	}
}
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	20001560 	.word	0x20001560
 80042a0:	200015c8 	.word	0x200015c8

080042a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80042aa:	4b0b      	ldr	r3, [pc, #44]	; (80042d8 <xTaskGetSchedulerState+0x34>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d102      	bne.n	80042b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80042b2:	2301      	movs	r3, #1
 80042b4:	607b      	str	r3, [r7, #4]
 80042b6:	e008      	b.n	80042ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042b8:	4b08      	ldr	r3, [pc, #32]	; (80042dc <xTaskGetSchedulerState+0x38>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d102      	bne.n	80042c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80042c0:	2302      	movs	r3, #2
 80042c2:	607b      	str	r3, [r7, #4]
 80042c4:	e001      	b.n	80042ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80042c6:	2300      	movs	r3, #0
 80042c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80042ca:	687b      	ldr	r3, [r7, #4]
	}
 80042cc:	4618      	mov	r0, r3
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr
 80042d8:	200015b4 	.word	0x200015b4
 80042dc:	200015d0 	.word	0x200015d0

080042e0 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 80042e6:	4b21      	ldr	r3, [pc, #132]	; (800436c <_DoInit+0x8c>)
 80042e8:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2203      	movs	r2, #3
 80042ee:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2203      	movs	r2, #3
 80042f4:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a1d      	ldr	r2, [pc, #116]	; (8004370 <_DoInit+0x90>)
 80042fa:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a1d      	ldr	r2, [pc, #116]	; (8004374 <_DoInit+0x94>)
 8004300:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004308:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a14      	ldr	r2, [pc, #80]	; (8004370 <_DoInit+0x90>)
 8004320:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a14      	ldr	r2, [pc, #80]	; (8004378 <_DoInit+0x98>)
 8004326:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2210      	movs	r2, #16
 800432c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	3307      	adds	r3, #7
 8004344:	4a0d      	ldr	r2, [pc, #52]	; (800437c <_DoInit+0x9c>)
 8004346:	6810      	ldr	r0, [r2, #0]
 8004348:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a0c      	ldr	r2, [pc, #48]	; (8004380 <_DoInit+0xa0>)
 800434e:	6810      	ldr	r0, [r2, #0]
 8004350:	6018      	str	r0, [r3, #0]
 8004352:	8891      	ldrh	r1, [r2, #4]
 8004354:	7992      	ldrb	r2, [r2, #6]
 8004356:	8099      	strh	r1, [r3, #4]
 8004358:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2220      	movs	r2, #32
 800435e:	719a      	strb	r2, [r3, #6]
}
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	20002c78 	.word	0x20002c78
 8004370:	080061ec 	.word	0x080061ec
 8004374:	200015d4 	.word	0x200015d4
 8004378:	200019d4 	.word	0x200019d4
 800437c:	080061f8 	.word	0x080061f8
 8004380:	080061fc 	.word	0x080061fc

08004384 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004384:	b580      	push	{r7, lr}
 8004386:	b08a      	sub	sp, #40	; 0x28
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]
  unsigned                RdOff;
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  //
  INIT();
 8004390:	4b3c      	ldr	r3, [pc, #240]	; (8004484 <SEGGER_RTT_ReadNoLock+0x100>)
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <SEGGER_RTT_ReadNoLock+0x18>
 8004398:	f7ff ffa2 	bl	80042e0 <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	4613      	mov	r3, r2
 80043a0:	005b      	lsls	r3, r3, #1
 80043a2:	4413      	add	r3, r2
 80043a4:	00db      	lsls	r3, r3, #3
 80043a6:	3360      	adds	r3, #96	; 0x60
 80043a8:	4a36      	ldr	r2, [pc, #216]	; (8004484 <SEGGER_RTT_ReadNoLock+0x100>)
 80043aa:	4413      	add	r3, r2
 80043ac:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 80043be:	2300      	movs	r3, #0
 80043c0:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80043c2:	6a3a      	ldr	r2, [r7, #32]
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d92a      	bls.n	8004420 <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	689a      	ldr	r2, [r3, #8]
 80043ce:	6a3b      	ldr	r3, [r7, #32]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4293      	cmp	r3, r2
 80043da:	bf28      	it	cs
 80043dc:	4613      	movcs	r3, r2
 80043de:	613b      	str	r3, [r7, #16]
    memcpy(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	685a      	ldr	r2, [r3, #4]
 80043e4:	6a3b      	ldr	r3, [r7, #32]
 80043e6:	4413      	add	r3, r2
 80043e8:	69f8      	ldr	r0, [r7, #28]
 80043ea:	4619      	mov	r1, r3
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	f001 fb49 	bl	8005a84 <memcpy>
    NumBytesRead += NumBytesRem;
 80043f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	4413      	add	r3, r2
 80043f8:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 80043fa:	69fa      	ldr	r2, [r7, #28]
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	4413      	add	r3, r2
 8004400:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800440a:	6a3a      	ldr	r2, [r7, #32]
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	4413      	add	r3, r2
 8004410:	623b      	str	r3, [r7, #32]
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	689a      	ldr	r2, [r3, #8]
 8004416:	6a3b      	ldr	r3, [r7, #32]
 8004418:	429a      	cmp	r2, r3
 800441a:	d101      	bne.n	8004420 <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 800441c:	2300      	movs	r3, #0
 800441e:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004420:	697a      	ldr	r2, [r7, #20]
 8004422:	6a3b      	ldr	r3, [r7, #32]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4293      	cmp	r3, r2
 800442e:	bf28      	it	cs
 8004430:	4613      	movcs	r3, r2
 8004432:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d018      	beq.n	800446c <SEGGER_RTT_ReadNoLock+0xe8>
    memcpy(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	685a      	ldr	r2, [r3, #4]
 800443e:	6a3b      	ldr	r3, [r7, #32]
 8004440:	4413      	add	r3, r2
 8004442:	69f8      	ldr	r0, [r7, #28]
 8004444:	4619      	mov	r1, r3
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	f001 fb1c 	bl	8005a84 <memcpy>
    NumBytesRead += NumBytesRem;
 800444c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	4413      	add	r3, r2
 8004452:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8004454:	69fa      	ldr	r2, [r7, #28]
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	4413      	add	r3, r2
 800445a:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004464:	6a3a      	ldr	r2, [r7, #32]
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	4413      	add	r3, r2
 800446a:	623b      	str	r3, [r7, #32]
  }
  if (NumBytesRead) {
 800446c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446e:	2b00      	cmp	r3, #0
 8004470:	d002      	beq.n	8004478 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	6a3a      	ldr	r2, [r7, #32]
 8004476:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800447a:	4618      	mov	r0, r3
 800447c:	3728      	adds	r7, #40	; 0x28
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	20002c78 	.word	0x20002c78

08004488 <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004488:	b580      	push	{r7, lr}
 800448a:	b08c      	sub	sp, #48	; 0x30
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
  unsigned              Avail;
  unsigned              RdOff;
  unsigned              WrOff;
  unsigned              Rem;

  pData = (const char *)pBuffer;
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	1c5a      	adds	r2, r3, #1
 800449c:	4613      	mov	r3, r2
 800449e:	005b      	lsls	r3, r3, #1
 80044a0:	4413      	add	r3, r2
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	4a46      	ldr	r2, [pc, #280]	; (80045c0 <SEGGER_RTT_WriteSkipNoLock+0x138>)
 80044a6:	4413      	add	r3, r2
 80044a8:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80044aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80044b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	61fb      	str	r3, [r7, #28]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 80044b6:	6a3a      	ldr	r2, [r7, #32]
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d862      	bhi.n	8004584 <SEGGER_RTT_WriteSkipNoLock+0xfc>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 80044be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c0:	689a      	ldr	r2, [r3, #8]
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	3b01      	subs	r3, #1
 80044c8:	61bb      	str	r3, [r7, #24]
    if (Avail >= NumBytes) {
 80044ca:	69ba      	ldr	r2, [r7, #24]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d31d      	bcc.n	800450e <SEGGER_RTT_WriteSkipNoLock+0x86>
#if 1 // memcpy() is good for large amounts of data, but the overhead is too big for small amounts. Use a simple byte loop instead.
      char* pDst;
      pDst = pRing->pBuffer + WrOff;
 80044d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d4:	685a      	ldr	r2, [r3, #4]
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	4413      	add	r3, r2
 80044da:	62bb      	str	r3, [r7, #40]	; 0x28
      WrOff += NumBytes;
 80044dc:	69fa      	ldr	r2, [r7, #28]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4413      	add	r3, r2
 80044e2:	61fb      	str	r3, [r7, #28]
      do {
        *pDst++ = *pData++;
 80044e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e6:	1c5a      	adds	r2, r3, #1
 80044e8:	62ba      	str	r2, [r7, #40]	; 0x28
 80044ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044ec:	1c51      	adds	r1, r2, #1
 80044ee:	62f9      	str	r1, [r7, #44]	; 0x2c
 80044f0:	7812      	ldrb	r2, [r2, #0]
 80044f2:	701a      	strb	r2, [r3, #0]
      } while (--NumBytes);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	3b01      	subs	r3, #1
 80044f8:	607b      	str	r3, [r7, #4]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1f1      	bne.n	80044e4 <SEGGER_RTT_WriteSkipNoLock+0x5c>
      pRing->WrOff = WrOff + NumBytes;
 8004500:	69fa      	ldr	r2, [r7, #28]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	441a      	add	r2, r3
 8004506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004508:	60da      	str	r2, [r3, #12]
#else
      memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
      pRing->WrOff = WrOff + NumBytes;
#endif
      return 1;
 800450a:	2301      	movs	r3, #1
 800450c:	e054      	b.n	80045b8 <SEGGER_RTT_WriteSkipNoLock+0x130>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	6a3b      	ldr	r3, [r7, #32]
 8004512:	4413      	add	r3, r2
 8004514:	61bb      	str	r3, [r7, #24]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 8004516:	69ba      	ldr	r2, [r7, #24]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	429a      	cmp	r2, r3
 800451c:	d34b      	bcc.n	80045b6 <SEGGER_RTT_WriteSkipNoLock+0x12e>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 800451e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004520:	689a      	ldr	r2, [r3, #8]
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	617b      	str	r3, [r7, #20]
      if (Rem > NumBytes) {
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	429a      	cmp	r2, r3
 800452e:	d90e      	bls.n	800454e <SEGGER_RTT_WriteSkipNoLock+0xc6>
        memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
 8004530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	4413      	add	r3, r2
 8004538:	4618      	mov	r0, r3
 800453a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	f001 faa1 	bl	8005a84 <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 8004542:	69fa      	ldr	r2, [r7, #28]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	441a      	add	r2, r3
 8004548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454a:	60da      	str	r2, [r3, #12]
 800454c:	e018      	b.n	8004580 <SEGGER_RTT_WriteSkipNoLock+0xf8>
      } else {
        //
        // We reach the end of the buffer, so need to wrap around
        //
        memcpy(pRing->pBuffer + WrOff, pData, Rem);
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004550:	685a      	ldr	r2, [r3, #4]
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	4413      	add	r3, r2
 8004556:	4618      	mov	r0, r3
 8004558:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	f001 fa92 	bl	8005a84 <memcpy>
        memcpy(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 8004560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004562:	6858      	ldr	r0, [r3, #4]
 8004564:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	18d1      	adds	r1, r2, r3
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	461a      	mov	r2, r3
 8004572:	f001 fa87 	bl	8005a84 <memcpy>
        pRing->WrOff = NumBytes - Rem;
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	1ad2      	subs	r2, r2, r3
 800457c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457e:	60da      	str	r2, [r3, #12]
      }
      return 1;
 8004580:	2301      	movs	r3, #1
 8004582:	e019      	b.n	80045b8 <SEGGER_RTT_WriteSkipNoLock+0x130>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 8004584:	6a3a      	ldr	r2, [r7, #32]
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	3b01      	subs	r3, #1
 800458c:	61bb      	str	r3, [r7, #24]
    if (Avail >= NumBytes) {
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	429a      	cmp	r2, r3
 8004594:	d30f      	bcc.n	80045b6 <SEGGER_RTT_WriteSkipNoLock+0x12e>
      memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
 8004596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004598:	685a      	ldr	r2, [r3, #4]
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	4413      	add	r3, r2
 800459e:	4618      	mov	r0, r3
 80045a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	f001 fa6e 	bl	8005a84 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 80045a8:	69fa      	ldr	r2, [r7, #28]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	441a      	add	r2, r3
 80045ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b0:	60da      	str	r2, [r3, #12]
      return 1;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e000      	b.n	80045b8 <SEGGER_RTT_WriteSkipNoLock+0x130>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3730      	adds	r7, #48	; 0x30
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	20002c78 	.word	0x20002c78

080045c4 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
 80045d0:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 80045d2:	4b30      	ldr	r3, [pc, #192]	; (8004694 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <SEGGER_RTT_ConfigUpBuffer+0x1a>
 80045da:	f7ff fe81 	bl	80042e0 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 80045de:	4b2d      	ldr	r3, [pc, #180]	; (8004694 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	461a      	mov	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d94b      	bls.n	8004682 <SEGGER_RTT_ConfigUpBuffer+0xbe>
    SEGGER_RTT_LOCK();
 80045ea:	f3ef 8311 	mrs	r3, BASEPRI
 80045ee:	f04f 0120 	mov.w	r1, #32
 80045f2:	f381 8811 	msr	BASEPRI, r1
 80045f6:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d031      	beq.n	8004662 <SEGGER_RTT_ConfigUpBuffer+0x9e>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 80045fe:	4925      	ldr	r1, [pc, #148]	; (8004694 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	1c5a      	adds	r2, r3, #1
 8004604:	4613      	mov	r3, r2
 8004606:	005b      	lsls	r3, r3, #1
 8004608:	4413      	add	r3, r2
 800460a:	00db      	lsls	r3, r3, #3
 800460c:	440b      	add	r3, r1
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004612:	4920      	ldr	r1, [pc, #128]	; (8004694 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	1c5a      	adds	r2, r3, #1
 8004618:	4613      	mov	r3, r2
 800461a:	005b      	lsls	r3, r3, #1
 800461c:	4413      	add	r3, r2
 800461e:	00db      	lsls	r3, r3, #3
 8004620:	440b      	add	r3, r1
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	605a      	str	r2, [r3, #4]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004626:	491b      	ldr	r1, [pc, #108]	; (8004694 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	4613      	mov	r3, r2
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	4413      	add	r3, r2
 8004630:	00db      	lsls	r3, r3, #3
 8004632:	440b      	add	r3, r1
 8004634:	3320      	adds	r3, #32
 8004636:	683a      	ldr	r2, [r7, #0]
 8004638:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 800463a:	4916      	ldr	r1, [pc, #88]	; (8004694 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	4613      	mov	r3, r2
 8004640:	005b      	lsls	r3, r3, #1
 8004642:	4413      	add	r3, r2
 8004644:	00db      	lsls	r3, r3, #3
 8004646:	440b      	add	r3, r1
 8004648:	3328      	adds	r3, #40	; 0x28
 800464a:	2200      	movs	r2, #0
 800464c:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 800464e:	4911      	ldr	r1, [pc, #68]	; (8004694 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	4613      	mov	r3, r2
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	4413      	add	r3, r2
 8004658:	00db      	lsls	r3, r3, #3
 800465a:	440b      	add	r3, r1
 800465c:	3320      	adds	r3, #32
 800465e:	2200      	movs	r2, #0
 8004660:	605a      	str	r2, [r3, #4]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 8004662:	490c      	ldr	r1, [pc, #48]	; (8004694 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	4613      	mov	r3, r2
 8004668:	005b      	lsls	r3, r3, #1
 800466a:	4413      	add	r3, r2
 800466c:	00db      	lsls	r3, r3, #3
 800466e:	440b      	add	r3, r1
 8004670:	3328      	adds	r3, #40	; 0x28
 8004672:	6a3a      	ldr	r2, [r7, #32]
 8004674:	605a      	str	r2, [r3, #4]
    SEGGER_RTT_UNLOCK();
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800467c:	2300      	movs	r3, #0
 800467e:	617b      	str	r3, [r7, #20]
 8004680:	e002      	b.n	8004688 <SEGGER_RTT_ConfigUpBuffer+0xc4>
  } else {
    r = -1;
 8004682:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004686:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004688:	697b      	ldr	r3, [r7, #20]
}
 800468a:	4618      	mov	r0, r3
 800468c:	3718      	adds	r7, #24
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	20002c78 	.word	0x20002c78

08004698 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004698:	b580      	push	{r7, lr}
 800469a:	b086      	sub	sp, #24
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
 80046a4:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 80046a6:	4b30      	ldr	r3, [pc, #192]	; (8004768 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <SEGGER_RTT_ConfigDownBuffer+0x1a>
 80046ae:	f7ff fe17 	bl	80042e0 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 80046b2:	4b2d      	ldr	r3, [pc, #180]	; (8004768 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	461a      	mov	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d94b      	bls.n	8004756 <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 80046be:	f3ef 8311 	mrs	r3, BASEPRI
 80046c2:	f04f 0120 	mov.w	r1, #32
 80046c6:	f381 8811 	msr	BASEPRI, r1
 80046ca:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d031      	beq.n	8004736 <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 80046d2:	4925      	ldr	r1, [pc, #148]	; (8004768 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	4613      	mov	r3, r2
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	4413      	add	r3, r2
 80046dc:	00db      	lsls	r3, r3, #3
 80046de:	440b      	add	r3, r1
 80046e0:	3360      	adds	r3, #96	; 0x60
 80046e2:	68ba      	ldr	r2, [r7, #8]
 80046e4:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80046e6:	4920      	ldr	r1, [pc, #128]	; (8004768 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	4613      	mov	r3, r2
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	4413      	add	r3, r2
 80046f0:	00db      	lsls	r3, r3, #3
 80046f2:	440b      	add	r3, r1
 80046f4:	3360      	adds	r3, #96	; 0x60
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	605a      	str	r2, [r3, #4]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80046fa:	491b      	ldr	r1, [pc, #108]	; (8004768 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	4613      	mov	r3, r2
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	4413      	add	r3, r2
 8004704:	00db      	lsls	r3, r3, #3
 8004706:	440b      	add	r3, r1
 8004708:	3368      	adds	r3, #104	; 0x68
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 800470e:	4916      	ldr	r1, [pc, #88]	; (8004768 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	4613      	mov	r3, r2
 8004714:	005b      	lsls	r3, r3, #1
 8004716:	4413      	add	r3, r2
 8004718:	00db      	lsls	r3, r3, #3
 800471a:	440b      	add	r3, r1
 800471c:	3370      	adds	r3, #112	; 0x70
 800471e:	2200      	movs	r2, #0
 8004720:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 8004722:	4911      	ldr	r1, [pc, #68]	; (8004768 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	4613      	mov	r3, r2
 8004728:	005b      	lsls	r3, r3, #1
 800472a:	4413      	add	r3, r2
 800472c:	00db      	lsls	r3, r3, #3
 800472e:	440b      	add	r3, r1
 8004730:	3368      	adds	r3, #104	; 0x68
 8004732:	2200      	movs	r2, #0
 8004734:	605a      	str	r2, [r3, #4]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 8004736:	490c      	ldr	r1, [pc, #48]	; (8004768 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	4613      	mov	r3, r2
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	4413      	add	r3, r2
 8004740:	00db      	lsls	r3, r3, #3
 8004742:	440b      	add	r3, r1
 8004744:	3370      	adds	r3, #112	; 0x70
 8004746:	6a3a      	ldr	r2, [r7, #32]
 8004748:	605a      	str	r2, [r3, #4]
    SEGGER_RTT_UNLOCK();
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004750:	2300      	movs	r3, #0
 8004752:	617b      	str	r3, [r7, #20]
 8004754:	e002      	b.n	800475c <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 8004756:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800475a:	617b      	str	r3, [r7, #20]
  }
  return r;
 800475c:	697b      	ldr	r3, [r7, #20]
}
 800475e:	4618      	mov	r0, r3
 8004760:	3718      	adds	r7, #24
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	20002c78 	.word	0x20002c78

0800476c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800476c:	b480      	push	{r7}
 800476e:	b087      	sub	sp, #28
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004778:	2300      	movs	r3, #0
 800477a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800477c:	e002      	b.n	8004784 <_EncodeStr+0x18>
    Len++;
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	3301      	adds	r3, #1
 8004782:	613b      	str	r3, [r7, #16]
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
  while(*(pText + Len) != 0) {
 8004784:	68ba      	ldr	r2, [r7, #8]
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	4413      	add	r3, r2
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1f6      	bne.n	800477e <_EncodeStr+0x12>
    Len++;
  }
  if (Len > Limit) {
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	429a      	cmp	r2, r3
 8004796:	d901      	bls.n	800479c <_EncodeStr+0x30>
    Len = Limit;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	2bfe      	cmp	r3, #254	; 0xfe
 80047a0:	d806      	bhi.n	80047b0 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	1c5a      	adds	r2, r3, #1
 80047a6:	60fa      	str	r2, [r7, #12]
 80047a8:	693a      	ldr	r2, [r7, #16]
 80047aa:	b2d2      	uxtb	r2, r2
 80047ac:	701a      	strb	r2, [r3, #0]
 80047ae:	e011      	b.n	80047d4 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	1c5a      	adds	r2, r3, #1
 80047b4:	60fa      	str	r2, [r7, #12]
 80047b6:	22ff      	movs	r2, #255	; 0xff
 80047b8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	1c5a      	adds	r2, r3, #1
 80047be:	60fa      	str	r2, [r7, #12]
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	b2d2      	uxtb	r2, r2
 80047c4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	1c5a      	adds	r2, r3, #1
 80047ca:	60fa      	str	r2, [r7, #12]
 80047cc:	693a      	ldr	r2, [r7, #16]
 80047ce:	0a12      	lsrs	r2, r2, #8
 80047d0:	b2d2      	uxtb	r2, r2
 80047d2:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80047d4:	2300      	movs	r3, #0
 80047d6:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80047d8:	e00a      	b.n	80047f0 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	1c5a      	adds	r2, r3, #1
 80047de:	60fa      	str	r2, [r7, #12]
 80047e0:	68ba      	ldr	r2, [r7, #8]
 80047e2:	1c51      	adds	r1, r2, #1
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	7812      	ldrb	r2, [r2, #0]
 80047e8:	701a      	strb	r2, [r3, #0]
    n++;
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	3301      	adds	r3, #1
 80047ee:	617b      	str	r3, [r7, #20]
  }
  //
  // copy string
  //
  n = 0;
  while (n < Len) {
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d3f0      	bcc.n	80047da <_EncodeStr+0x6e>
    *pPayload++ = *pText++;
    n++;
  }
  return pPayload;
 80047f8:	68fb      	ldr	r3, [r7, #12]
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	371c      	adds	r7, #28
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop

08004808 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	3304      	adds	r3, #4
}
 8004814:	4618      	mov	r0, r3
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004826:	1cfb      	adds	r3, r7, #3
 8004828:	2001      	movs	r0, #1
 800482a:	4619      	mov	r1, r3
 800482c:	2201      	movs	r2, #1
 800482e:	f7ff fda9 	bl	8004384 <SEGGER_RTT_ReadNoLock>
 8004832:	4603      	mov	r3, r0
 8004834:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	dd46      	ble.n	80048ca <_HandleIncomingPacket+0xaa>
    switch (Cmd) {
 800483c:	78fb      	ldrb	r3, [r7, #3]
 800483e:	2b04      	cmp	r3, #4
 8004840:	d01a      	beq.n	8004878 <_HandleIncomingPacket+0x58>
 8004842:	2b04      	cmp	r3, #4
 8004844:	dc06      	bgt.n	8004854 <_HandleIncomingPacket+0x34>
 8004846:	2b02      	cmp	r3, #2
 8004848:	d010      	beq.n	800486c <_HandleIncomingPacket+0x4c>
 800484a:	2b02      	cmp	r3, #2
 800484c:	dc11      	bgt.n	8004872 <_HandleIncomingPacket+0x52>
 800484e:	2b01      	cmp	r3, #1
 8004850:	d009      	beq.n	8004866 <_HandleIncomingPacket+0x46>
 8004852:	e02e      	b.n	80048b2 <_HandleIncomingPacket+0x92>
 8004854:	2b06      	cmp	r3, #6
 8004856:	d015      	beq.n	8004884 <_HandleIncomingPacket+0x64>
 8004858:	2b06      	cmp	r3, #6
 800485a:	db10      	blt.n	800487e <_HandleIncomingPacket+0x5e>
 800485c:	2b07      	cmp	r3, #7
 800485e:	d014      	beq.n	800488a <_HandleIncomingPacket+0x6a>
 8004860:	2b80      	cmp	r3, #128	; 0x80
 8004862:	d015      	beq.n	8004890 <_HandleIncomingPacket+0x70>
 8004864:	e025      	b.n	80048b2 <_HandleIncomingPacket+0x92>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004866:	f000 fa67 	bl	8004d38 <SEGGER_SYSVIEW_Start>
      break;
 800486a:	e02e      	b.n	80048ca <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800486c:	f000 fb20 	bl	8004eb0 <SEGGER_SYSVIEW_Stop>
      break;
 8004870:	e02b      	b.n	80048ca <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004872:	f000 fcf3 	bl	800525c <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004876:	e028      	b.n	80048ca <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004878:	f000 fcbc 	bl	80051f4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800487c:	e025      	b.n	80048ca <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800487e:	f000 fb3b 	bl	8004ef8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004882:	e022      	b.n	80048ca <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004884:	f000 ff08 	bl	8005698 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004888:	e01f      	b.n	80048ca <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800488a:	f000 fee9 	bl	8005660 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800488e:	e01c      	b.n	80048ca <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004890:	1cfb      	adds	r3, r7, #3
 8004892:	2001      	movs	r0, #1
 8004894:	4619      	mov	r1, r3
 8004896:	2201      	movs	r2, #1
 8004898:	f7ff fd74 	bl	8004384 <SEGGER_RTT_ReadNoLock>
 800489c:	4603      	mov	r3, r0
 800489e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	dd04      	ble.n	80048b0 <_HandleIncomingPacket+0x90>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80048a6:	78fb      	ldrb	r3, [r7, #3]
 80048a8:	4618      	mov	r0, r3
 80048aa:	f000 fe5b 	bl	8005564 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80048ae:	e00c      	b.n	80048ca <_HandleIncomingPacket+0xaa>
 80048b0:	e00b      	b.n	80048ca <_HandleIncomingPacket+0xaa>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80048b2:	78fb      	ldrb	r3, [r7, #3]
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	b25b      	sxtb	r3, r3
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	da05      	bge.n	80048c8 <_HandleIncomingPacket+0xa8>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80048bc:	1cfb      	adds	r3, r7, #3
 80048be:	2001      	movs	r0, #1
 80048c0:	4619      	mov	r1, r3
 80048c2:	2201      	movs	r2, #1
 80048c4:	f7ff fd5e 	bl	8004384 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80048c8:	bf00      	nop
    }
  }
}
 80048ca:	3708      	adds	r7, #8
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b08c      	sub	sp, #48	; 0x30
 80048d4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80048d6:	2301      	movs	r3, #1
 80048d8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80048da:	1d3b      	adds	r3, r7, #4
 80048dc:	3301      	adds	r3, #1
 80048de:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048e4:	4b30      	ldr	r3, [pc, #192]	; (80049a8 <_TrySendOverflowPacket+0xd8>)
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80048ea:	e00b      	b.n	8004904 <_TrySendOverflowPacket+0x34>
 80048ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ee:	1c5a      	adds	r2, r3, #1
 80048f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048f4:	b2d2      	uxtb	r2, r2
 80048f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048fa:	b2d2      	uxtb	r2, r2
 80048fc:	701a      	strb	r2, [r3, #0]
 80048fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004900:	09db      	lsrs	r3, r3, #7
 8004902:	62bb      	str	r3, [r7, #40]	; 0x28
 8004904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004906:	2b7f      	cmp	r3, #127	; 0x7f
 8004908:	d8f0      	bhi.n	80048ec <_TrySendOverflowPacket+0x1c>
 800490a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800490c:	1c5a      	adds	r2, r3, #1
 800490e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004910:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004912:	b2d2      	uxtb	r2, r2
 8004914:	701a      	strb	r2, [r3, #0]
 8004916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004918:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800491a:	4b24      	ldr	r3, [pc, #144]	; (80049ac <_TrySendOverflowPacket+0xdc>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004920:	4b21      	ldr	r3, [pc, #132]	; (80049a8 <_TrySendOverflowPacket+0xd8>)
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	627b      	str	r3, [r7, #36]	; 0x24
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	623b      	str	r3, [r7, #32]
 8004932:	e00b      	b.n	800494c <_TrySendOverflowPacket+0x7c>
 8004934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004936:	1c5a      	adds	r2, r3, #1
 8004938:	627a      	str	r2, [r7, #36]	; 0x24
 800493a:	6a3a      	ldr	r2, [r7, #32]
 800493c:	b2d2      	uxtb	r2, r2
 800493e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004942:	b2d2      	uxtb	r2, r2
 8004944:	701a      	strb	r2, [r3, #0]
 8004946:	6a3b      	ldr	r3, [r7, #32]
 8004948:	09db      	lsrs	r3, r3, #7
 800494a:	623b      	str	r3, [r7, #32]
 800494c:	6a3b      	ldr	r3, [r7, #32]
 800494e:	2b7f      	cmp	r3, #127	; 0x7f
 8004950:	d8f0      	bhi.n	8004934 <_TrySendOverflowPacket+0x64>
 8004952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004954:	1c5a      	adds	r2, r3, #1
 8004956:	627a      	str	r2, [r7, #36]	; 0x24
 8004958:	6a3a      	ldr	r2, [r7, #32]
 800495a:	b2d2      	uxtb	r2, r2
 800495c:	701a      	strb	r2, [r3, #0]
 800495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004960:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8004962:	69fa      	ldr	r2, [r7, #28]
 8004964:	1d3b      	adds	r3, r7, #4
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	461a      	mov	r2, r3
 800496a:	1d3b      	adds	r3, r7, #4
 800496c:	2001      	movs	r0, #1
 800496e:	4619      	mov	r1, r3
 8004970:	f7ff fd8a 	bl	8004488 <SEGGER_RTT_WriteSkipNoLock>
 8004974:	4603      	mov	r3, r0
 8004976:	613b      	str	r3, [r7, #16]
  if (Status) {
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d009      	beq.n	8004992 <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800497e:	4a0a      	ldr	r2, [pc, #40]	; (80049a8 <_TrySendOverflowPacket+0xd8>)
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004984:	4b08      	ldr	r3, [pc, #32]	; (80049a8 <_TrySendOverflowPacket+0xd8>)
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	3b01      	subs	r3, #1
 800498a:	b2da      	uxtb	r2, r3
 800498c:	4b06      	ldr	r3, [pc, #24]	; (80049a8 <_TrySendOverflowPacket+0xd8>)
 800498e:	701a      	strb	r2, [r3, #0]
 8004990:	e004      	b.n	800499c <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004992:	4b05      	ldr	r3, [pc, #20]	; (80049a8 <_TrySendOverflowPacket+0xd8>)
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	3301      	adds	r3, #1
 8004998:	4a03      	ldr	r2, [pc, #12]	; (80049a8 <_TrySendOverflowPacket+0xd8>)
 800499a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800499c:	693b      	ldr	r3, [r7, #16]
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3730      	adds	r7, #48	; 0x30
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	200029ec 	.word	0x200029ec
 80049ac:	e0001004 	.word	0xe0001004

080049b0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b08a      	sub	sp, #40	; 0x28
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80049bc:	4b5e      	ldr	r3, [pc, #376]	; (8004b38 <_SendPacket+0x188>)
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d100      	bne.n	80049c6 <_SendPacket+0x16>
    goto Send;
 80049c4:	e00f      	b.n	80049e6 <_SendPacket+0x36>
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80049c6:	4b5c      	ldr	r3, [pc, #368]	; (8004b38 <_SendPacket+0x188>)
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d100      	bne.n	80049d0 <_SendPacket+0x20>
    goto SendDone;
 80049ce:	e09b      	b.n	8004b08 <_SendPacket+0x158>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80049d0:	4b59      	ldr	r3, [pc, #356]	; (8004b38 <_SendPacket+0x188>)
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d106      	bne.n	80049e6 <_SendPacket+0x36>
    _TrySendOverflowPacket();
 80049d8:	f7ff ff7a 	bl	80048d0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80049dc:	4b56      	ldr	r3, [pc, #344]	; (8004b38 <_SendPacket+0x188>)
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d000      	beq.n	80049e6 <_SendPacket+0x36>
      goto SendDone;
 80049e4:	e090      	b.n	8004b08 <_SendPacket+0x158>
Send:
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2b1f      	cmp	r3, #31
 80049ea:	d809      	bhi.n	8004a00 <_SendPacket+0x50>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80049ec:	4b52      	ldr	r3, [pc, #328]	; (8004b38 <_SendPacket+0x188>)
 80049ee:	69da      	ldr	r2, [r3, #28]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	fa22 f303 	lsr.w	r3, r2, r3
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d000      	beq.n	8004a00 <_SendPacket+0x50>
      goto SendDone;
 80049fe:	e083      	b.n	8004b08 <_SendPacket+0x158>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b17      	cmp	r3, #23
 8004a04:	d807      	bhi.n	8004a16 <_SendPacket+0x66>
    *--pStartPacket = EventId;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	60fb      	str	r3, [r7, #12]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	701a      	strb	r2, [r3, #0]
 8004a14:	e03d      	b.n	8004a92 <_SendPacket+0xe2>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004a16:	68ba      	ldr	r2, [r7, #8]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	2b7f      	cmp	r3, #127	; 0x7f
 8004a22:	d912      	bls.n	8004a4a <_SendPacket+0x9a>
      *--pStartPacket = (NumBytes >> 7);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	3b01      	subs	r3, #1
 8004a28:	60fb      	str	r3, [r7, #12]
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	09db      	lsrs	r3, r3, #7
 8004a2e:	b2da      	uxtb	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	3b01      	subs	r3, #1
 8004a38:	60fb      	str	r3, [r7, #12]
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a42:	b2da      	uxtb	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	701a      	strb	r2, [r3, #0]
 8004a48:	e006      	b.n	8004a58 <_SendPacket+0xa8>
    } else {
      *--pStartPacket = NumBytes;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	60fb      	str	r3, [r7, #12]
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	b2da      	uxtb	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b7f      	cmp	r3, #127	; 0x7f
 8004a5c:	d912      	bls.n	8004a84 <_SendPacket+0xd4>
      *--pStartPacket = (EventId >> 7);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	3b01      	subs	r3, #1
 8004a62:	60fb      	str	r3, [r7, #12]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	09db      	lsrs	r3, r3, #7
 8004a68:	b2da      	uxtb	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	3b01      	subs	r3, #1
 8004a72:	60fb      	str	r3, [r7, #12]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a7c:	b2da      	uxtb	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	701a      	strb	r2, [r3, #0]
 8004a82:	e006      	b.n	8004a92 <_SendPacket+0xe2>
    } else {
      *--pStartPacket = EventId;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	3b01      	subs	r3, #1
 8004a88:	60fb      	str	r3, [r7, #12]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	b2da      	uxtb	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004a92:	4b2a      	ldr	r3, [pc, #168]	; (8004b3c <_SendPacket+0x18c>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004a98:	4b27      	ldr	r3, [pc, #156]	; (8004b38 <_SendPacket+0x188>)
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	623b      	str	r3, [r7, #32]
 8004aaa:	e00b      	b.n	8004ac4 <_SendPacket+0x114>
 8004aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aae:	1c5a      	adds	r2, r3, #1
 8004ab0:	627a      	str	r2, [r7, #36]	; 0x24
 8004ab2:	6a3a      	ldr	r2, [r7, #32]
 8004ab4:	b2d2      	uxtb	r2, r2
 8004ab6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004aba:	b2d2      	uxtb	r2, r2
 8004abc:	701a      	strb	r2, [r3, #0]
 8004abe:	6a3b      	ldr	r3, [r7, #32]
 8004ac0:	09db      	lsrs	r3, r3, #7
 8004ac2:	623b      	str	r3, [r7, #32]
 8004ac4:	6a3b      	ldr	r3, [r7, #32]
 8004ac6:	2b7f      	cmp	r3, #127	; 0x7f
 8004ac8:	d8f0      	bhi.n	8004aac <_SendPacket+0xfc>
 8004aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004acc:	1c5a      	adds	r2, r3, #1
 8004ace:	627a      	str	r2, [r7, #36]	; 0x24
 8004ad0:	6a3a      	ldr	r2, [r7, #32]
 8004ad2:	b2d2      	uxtb	r2, r2
 8004ad4:	701a      	strb	r2, [r3, #0]
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad8:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	2001      	movs	r0, #1
 8004ae2:	68f9      	ldr	r1, [r7, #12]
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	f7ff fccf 	bl	8004488 <SEGGER_RTT_WriteSkipNoLock>
 8004aea:	4603      	mov	r3, r0
 8004aec:	613b      	str	r3, [r7, #16]
  if (Status) {
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d003      	beq.n	8004afc <_SendPacket+0x14c>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004af4:	4a10      	ldr	r2, [pc, #64]	; (8004b38 <_SendPacket+0x188>)
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	60d3      	str	r3, [r2, #12]
 8004afa:	e005      	b.n	8004b08 <_SendPacket+0x158>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004afc:	4b0e      	ldr	r3, [pc, #56]	; (8004b38 <_SendPacket+0x188>)
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	3301      	adds	r3, #1
 8004b02:	b2da      	uxtb	r2, r3
 8004b04:	4b0c      	ldr	r3, [pc, #48]	; (8004b38 <_SendPacket+0x188>)
 8004b06:	701a      	strb	r2, [r3, #0]
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004b08:	4b0d      	ldr	r3, [pc, #52]	; (8004b40 <_SendPacket+0x190>)
 8004b0a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004b0e:	4b0c      	ldr	r3, [pc, #48]	; (8004b40 <_SendPacket+0x190>)
 8004b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d00b      	beq.n	8004b30 <_SendPacket+0x180>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004b18:	4b07      	ldr	r3, [pc, #28]	; (8004b38 <_SendPacket+0x188>)
 8004b1a:	789b      	ldrb	r3, [r3, #2]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d107      	bne.n	8004b30 <_SendPacket+0x180>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004b20:	4b05      	ldr	r3, [pc, #20]	; (8004b38 <_SendPacket+0x188>)
 8004b22:	2201      	movs	r2, #1
 8004b24:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004b26:	f7ff fe7b 	bl	8004820 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004b2a:	4b03      	ldr	r3, [pc, #12]	; (8004b38 <_SendPacket+0x188>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004b30:	3728      	adds	r7, #40	; 0x28
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	200029ec 	.word	0x200029ec
 8004b3c:	e0001004 	.word	0xe0001004
 8004b40:	20002c78 	.word	0x20002c78

08004b44 <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b086      	sub	sp, #24
 8004b48:	af02      	add	r7, sp, #8
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
 8004b50:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004b52:	2300      	movs	r3, #0
 8004b54:	9300      	str	r3, [sp, #0]
 8004b56:	2001      	movs	r0, #1
 8004b58:	4913      	ldr	r1, [pc, #76]	; (8004ba8 <SEGGER_SYSVIEW_Init+0x64>)
 8004b5a:	4a14      	ldr	r2, [pc, #80]	; (8004bac <SEGGER_SYSVIEW_Init+0x68>)
 8004b5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b60:	f7ff fd30 	bl	80045c4 <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004b64:	2300      	movs	r3, #0
 8004b66:	9300      	str	r3, [sp, #0]
 8004b68:	2001      	movs	r0, #1
 8004b6a:	490f      	ldr	r1, [pc, #60]	; (8004ba8 <SEGGER_SYSVIEW_Init+0x64>)
 8004b6c:	4a10      	ldr	r2, [pc, #64]	; (8004bb0 <SEGGER_SYSVIEW_Init+0x6c>)
 8004b6e:	2308      	movs	r3, #8
 8004b70:	f7ff fd92 	bl	8004698 <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004b74:	4b0f      	ldr	r3, [pc, #60]	; (8004bb4 <SEGGER_SYSVIEW_Init+0x70>)
 8004b76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b7a:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004b7c:	4b0e      	ldr	r3, [pc, #56]	; (8004bb8 <SEGGER_SYSVIEW_Init+0x74>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a0c      	ldr	r2, [pc, #48]	; (8004bb4 <SEGGER_SYSVIEW_Init+0x70>)
 8004b82:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004b84:	4a0b      	ldr	r2, [pc, #44]	; (8004bb4 <SEGGER_SYSVIEW_Init+0x70>)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004b8a:	4a0a      	ldr	r2, [pc, #40]	; (8004bb4 <SEGGER_SYSVIEW_Init+0x70>)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004b90:	4a08      	ldr	r2, [pc, #32]	; (8004bb4 <SEGGER_SYSVIEW_Init+0x70>)
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004b96:	4a07      	ldr	r2, [pc, #28]	; (8004bb4 <SEGGER_SYSVIEW_Init+0x70>)
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004b9c:	4b05      	ldr	r3, [pc, #20]	; (8004bb4 <SEGGER_SYSVIEW_Init+0x70>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004ba2:	3710      	adds	r7, #16
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	08006204 	.word	0x08006204
 8004bac:	200019e4 	.word	0x200019e4
 8004bb0:	200029e4 	.word	0x200029e4
 8004bb4:	200029ec 	.word	0x200029ec
 8004bb8:	e0001004 	.word	0xe0001004

08004bbc <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004bc4:	4a03      	ldr	r2, [pc, #12]	; (8004bd4 <SEGGER_SYSVIEW_SetRAMBase+0x18>)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6113      	str	r3, [r2, #16]
}
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	200029ec 	.word	0x200029ec

08004bd8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004be0:	f3ef 8311 	mrs	r3, BASEPRI
 8004be4:	f04f 0120 	mov.w	r1, #32
 8004be8:	f381 8811 	msr	BASEPRI, r1
 8004bec:	60fb      	str	r3, [r7, #12]
 8004bee:	4807      	ldr	r0, [pc, #28]	; (8004c0c <SEGGER_SYSVIEW_RecordVoid+0x34>)
 8004bf0:	f7ff fe0a 	bl	8004808 <_PreparePacket>
 8004bf4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004bf6:	68b8      	ldr	r0, [r7, #8]
 8004bf8:	68b9      	ldr	r1, [r7, #8]
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	f7ff fed8 	bl	80049b0 <_SendPacket>
  RECORD_END();
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f383 8811 	msr	BASEPRI, r3
}
 8004c06:	3710      	adds	r7, #16
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	20002a1c 	.word	0x20002a1c

08004c10 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b088      	sub	sp, #32
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004c1a:	f3ef 8311 	mrs	r3, BASEPRI
 8004c1e:	f04f 0120 	mov.w	r1, #32
 8004c22:	f381 8811 	msr	BASEPRI, r1
 8004c26:	617b      	str	r3, [r7, #20]
 8004c28:	4816      	ldr	r0, [pc, #88]	; (8004c84 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004c2a:	f7ff fded 	bl	8004808 <_PreparePacket>
 8004c2e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	61fb      	str	r3, [r7, #28]
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	61bb      	str	r3, [r7, #24]
 8004c3c:	e00b      	b.n	8004c56 <SEGGER_SYSVIEW_RecordU32+0x46>
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	1c5a      	adds	r2, r3, #1
 8004c42:	61fa      	str	r2, [r7, #28]
 8004c44:	69ba      	ldr	r2, [r7, #24]
 8004c46:	b2d2      	uxtb	r2, r2
 8004c48:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c4c:	b2d2      	uxtb	r2, r2
 8004c4e:	701a      	strb	r2, [r3, #0]
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	09db      	lsrs	r3, r3, #7
 8004c54:	61bb      	str	r3, [r7, #24]
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	2b7f      	cmp	r3, #127	; 0x7f
 8004c5a:	d8f0      	bhi.n	8004c3e <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	1c5a      	adds	r2, r3, #1
 8004c60:	61fa      	str	r2, [r7, #28]
 8004c62:	69ba      	ldr	r2, [r7, #24]
 8004c64:	b2d2      	uxtb	r2, r2
 8004c66:	701a      	strb	r2, [r3, #0]
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004c6c:	6938      	ldr	r0, [r7, #16]
 8004c6e:	68f9      	ldr	r1, [r7, #12]
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	f7ff fe9d 	bl	80049b0 <_SendPacket>
  RECORD_END();
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	f383 8811 	msr	BASEPRI, r3
}
 8004c7c:	3720      	adds	r7, #32
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	20002a1c 	.word	0x20002a1c

08004c88 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b08c      	sub	sp, #48	; 0x30
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004c94:	f3ef 8311 	mrs	r3, BASEPRI
 8004c98:	f04f 0120 	mov.w	r1, #32
 8004c9c:	f381 8811 	msr	BASEPRI, r1
 8004ca0:	61fb      	str	r3, [r7, #28]
 8004ca2:	4824      	ldr	r0, [pc, #144]	; (8004d34 <SEGGER_SYSVIEW_RecordU32x2+0xac>)
 8004ca4:	f7ff fdb0 	bl	8004808 <_PreparePacket>
 8004ca8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cb6:	e00b      	b.n	8004cd0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cba:	1c5a      	adds	r2, r3, #1
 8004cbc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cc0:	b2d2      	uxtb	r2, r2
 8004cc2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cc6:	b2d2      	uxtb	r2, r2
 8004cc8:	701a      	strb	r2, [r3, #0]
 8004cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ccc:	09db      	lsrs	r3, r3, #7
 8004cce:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd2:	2b7f      	cmp	r3, #127	; 0x7f
 8004cd4:	d8f0      	bhi.n	8004cb8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd8:	1c5a      	adds	r2, r3, #1
 8004cda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cde:	b2d2      	uxtb	r2, r2
 8004ce0:	701a      	strb	r2, [r3, #0]
 8004ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	623b      	str	r3, [r7, #32]
 8004cee:	e00b      	b.n	8004d08 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	1c5a      	adds	r2, r3, #1
 8004cf4:	627a      	str	r2, [r7, #36]	; 0x24
 8004cf6:	6a3a      	ldr	r2, [r7, #32]
 8004cf8:	b2d2      	uxtb	r2, r2
 8004cfa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cfe:	b2d2      	uxtb	r2, r2
 8004d00:	701a      	strb	r2, [r3, #0]
 8004d02:	6a3b      	ldr	r3, [r7, #32]
 8004d04:	09db      	lsrs	r3, r3, #7
 8004d06:	623b      	str	r3, [r7, #32]
 8004d08:	6a3b      	ldr	r3, [r7, #32]
 8004d0a:	2b7f      	cmp	r3, #127	; 0x7f
 8004d0c:	d8f0      	bhi.n	8004cf0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d10:	1c5a      	adds	r2, r3, #1
 8004d12:	627a      	str	r2, [r7, #36]	; 0x24
 8004d14:	6a3a      	ldr	r2, [r7, #32]
 8004d16:	b2d2      	uxtb	r2, r2
 8004d18:	701a      	strb	r2, [r3, #0]
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004d1e:	69b8      	ldr	r0, [r7, #24]
 8004d20:	6979      	ldr	r1, [r7, #20]
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	f7ff fe44 	bl	80049b0 <_SendPacket>
  RECORD_END();
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	f383 8811 	msr	BASEPRI, r3
}
 8004d2e:	3730      	adds	r7, #48	; 0x30
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	20002a1c 	.word	0x20002a1c

08004d38 <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b08c      	sub	sp, #48	; 0x30
 8004d3c:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004d3e:	4b59      	ldr	r3, [pc, #356]	; (8004ea4 <SEGGER_SYSVIEW_Start+0x16c>)
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	f040 80aa 	bne.w	8004e9c <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 8004d48:	4b56      	ldr	r3, [pc, #344]	; (8004ea4 <SEGGER_SYSVIEW_Start+0x16c>)
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004d4e:	f3ef 8311 	mrs	r3, BASEPRI
 8004d52:	f04f 0120 	mov.w	r1, #32
 8004d56:	f381 8811 	msr	BASEPRI, r1
 8004d5a:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004d5c:	2001      	movs	r0, #1
 8004d5e:	4952      	ldr	r1, [pc, #328]	; (8004ea8 <SEGGER_SYSVIEW_Start+0x170>)
 8004d60:	220a      	movs	r2, #10
 8004d62:	f7ff fb91 	bl	8004488 <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004d6c:	200a      	movs	r0, #10
 8004d6e:	f7ff ff33 	bl	8004bd8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004d72:	f3ef 8311 	mrs	r3, BASEPRI
 8004d76:	f04f 0120 	mov.w	r1, #32
 8004d7a:	f381 8811 	msr	BASEPRI, r1
 8004d7e:	60bb      	str	r3, [r7, #8]
 8004d80:	484a      	ldr	r0, [pc, #296]	; (8004eac <SEGGER_SYSVIEW_Start+0x174>)
 8004d82:	f7ff fd41 	bl	8004808 <_PreparePacket>
 8004d86:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d90:	4b44      	ldr	r3, [pc, #272]	; (8004ea4 <SEGGER_SYSVIEW_Start+0x16c>)
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d96:	e00b      	b.n	8004db0 <SEGGER_SYSVIEW_Start+0x78>
 8004d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d9a:	1c5a      	adds	r2, r3, #1
 8004d9c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004da0:	b2d2      	uxtb	r2, r2
 8004da2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004da6:	b2d2      	uxtb	r2, r2
 8004da8:	701a      	strb	r2, [r3, #0]
 8004daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dac:	09db      	lsrs	r3, r3, #7
 8004dae:	62bb      	str	r3, [r7, #40]	; 0x28
 8004db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db2:	2b7f      	cmp	r3, #127	; 0x7f
 8004db4:	d8f0      	bhi.n	8004d98 <SEGGER_SYSVIEW_Start+0x60>
 8004db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db8:	1c5a      	adds	r2, r3, #1
 8004dba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dbe:	b2d2      	uxtb	r2, r2
 8004dc0:	701a      	strb	r2, [r3, #0]
 8004dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8004dca:	4b36      	ldr	r3, [pc, #216]	; (8004ea4 <SEGGER_SYSVIEW_Start+0x16c>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	623b      	str	r3, [r7, #32]
 8004dd0:	e00b      	b.n	8004dea <SEGGER_SYSVIEW_Start+0xb2>
 8004dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd4:	1c5a      	adds	r2, r3, #1
 8004dd6:	627a      	str	r2, [r7, #36]	; 0x24
 8004dd8:	6a3a      	ldr	r2, [r7, #32]
 8004dda:	b2d2      	uxtb	r2, r2
 8004ddc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004de0:	b2d2      	uxtb	r2, r2
 8004de2:	701a      	strb	r2, [r3, #0]
 8004de4:	6a3b      	ldr	r3, [r7, #32]
 8004de6:	09db      	lsrs	r3, r3, #7
 8004de8:	623b      	str	r3, [r7, #32]
 8004dea:	6a3b      	ldr	r3, [r7, #32]
 8004dec:	2b7f      	cmp	r3, #127	; 0x7f
 8004dee:	d8f0      	bhi.n	8004dd2 <SEGGER_SYSVIEW_Start+0x9a>
 8004df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df2:	1c5a      	adds	r2, r3, #1
 8004df4:	627a      	str	r2, [r7, #36]	; 0x24
 8004df6:	6a3a      	ldr	r2, [r7, #32]
 8004df8:	b2d2      	uxtb	r2, r2
 8004dfa:	701a      	strb	r2, [r3, #0]
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfe:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	61fb      	str	r3, [r7, #28]
 8004e04:	4b27      	ldr	r3, [pc, #156]	; (8004ea4 <SEGGER_SYSVIEW_Start+0x16c>)
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	61bb      	str	r3, [r7, #24]
 8004e0a:	e00b      	b.n	8004e24 <SEGGER_SYSVIEW_Start+0xec>
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	1c5a      	adds	r2, r3, #1
 8004e10:	61fa      	str	r2, [r7, #28]
 8004e12:	69ba      	ldr	r2, [r7, #24]
 8004e14:	b2d2      	uxtb	r2, r2
 8004e16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e1a:	b2d2      	uxtb	r2, r2
 8004e1c:	701a      	strb	r2, [r3, #0]
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	09db      	lsrs	r3, r3, #7
 8004e22:	61bb      	str	r3, [r7, #24]
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	2b7f      	cmp	r3, #127	; 0x7f
 8004e28:	d8f0      	bhi.n	8004e0c <SEGGER_SYSVIEW_Start+0xd4>
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	1c5a      	adds	r2, r3, #1
 8004e2e:	61fa      	str	r2, [r7, #28]
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	b2d2      	uxtb	r2, r2
 8004e34:	701a      	strb	r2, [r3, #0]
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	617b      	str	r3, [r7, #20]
 8004e3e:	2302      	movs	r3, #2
 8004e40:	613b      	str	r3, [r7, #16]
 8004e42:	e00b      	b.n	8004e5c <SEGGER_SYSVIEW_Start+0x124>
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	1c5a      	adds	r2, r3, #1
 8004e48:	617a      	str	r2, [r7, #20]
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	b2d2      	uxtb	r2, r2
 8004e4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e52:	b2d2      	uxtb	r2, r2
 8004e54:	701a      	strb	r2, [r3, #0]
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	09db      	lsrs	r3, r3, #7
 8004e5a:	613b      	str	r3, [r7, #16]
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	2b7f      	cmp	r3, #127	; 0x7f
 8004e60:	d8f0      	bhi.n	8004e44 <SEGGER_SYSVIEW_Start+0x10c>
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	1c5a      	adds	r2, r3, #1
 8004e66:	617a      	str	r2, [r7, #20]
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	b2d2      	uxtb	r2, r2
 8004e6c:	701a      	strb	r2, [r3, #0]
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	6839      	ldr	r1, [r7, #0]
 8004e76:	2218      	movs	r2, #24
 8004e78:	f7ff fd9a 	bl	80049b0 <_SendPacket>
      RECORD_END();
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004e82:	4b08      	ldr	r3, [pc, #32]	; (8004ea4 <SEGGER_SYSVIEW_Start+0x16c>)
 8004e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d002      	beq.n	8004e90 <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004e8a:	4b06      	ldr	r3, [pc, #24]	; (8004ea4 <SEGGER_SYSVIEW_Start+0x16c>)
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8e:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004e90:	f000 f9e4 	bl	800525c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004e94:	f000 f9ae 	bl	80051f4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004e98:	f000 fbfe 	bl	8005698 <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 8004e9c:	3730      	adds	r7, #48	; 0x30
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	200029ec 	.word	0x200029ec
 8004ea8:	0800629c 	.word	0x0800629c
 8004eac:	20002a1c 	.word	0x20002a1c

08004eb0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004eb6:	f3ef 8311 	mrs	r3, BASEPRI
 8004eba:	f04f 0120 	mov.w	r1, #32
 8004ebe:	f381 8811 	msr	BASEPRI, r1
 8004ec2:	607b      	str	r3, [r7, #4]
 8004ec4:	480a      	ldr	r0, [pc, #40]	; (8004ef0 <SEGGER_SYSVIEW_Stop+0x40>)
 8004ec6:	f7ff fc9f 	bl	8004808 <_PreparePacket>
 8004eca:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004ecc:	4b09      	ldr	r3, [pc, #36]	; (8004ef4 <SEGGER_SYSVIEW_Stop+0x44>)
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d007      	beq.n	8004ee4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004ed4:	6838      	ldr	r0, [r7, #0]
 8004ed6:	6839      	ldr	r1, [r7, #0]
 8004ed8:	220b      	movs	r2, #11
 8004eda:	f7ff fd69 	bl	80049b0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004ede:	4b05      	ldr	r3, [pc, #20]	; (8004ef4 <SEGGER_SYSVIEW_Stop+0x44>)
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f383 8811 	msr	BASEPRI, r3
}
 8004eea:	3708      	adds	r7, #8
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	20002a1c 	.word	0x20002a1c
 8004ef4:	200029ec 	.word	0x200029ec

08004ef8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b08c      	sub	sp, #48	; 0x30
 8004efc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004efe:	f3ef 8311 	mrs	r3, BASEPRI
 8004f02:	f04f 0120 	mov.w	r1, #32
 8004f06:	f381 8811 	msr	BASEPRI, r1
 8004f0a:	60fb      	str	r3, [r7, #12]
 8004f0c:	4845      	ldr	r0, [pc, #276]	; (8005024 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004f0e:	f7ff fc7b 	bl	8004808 <_PreparePacket>
 8004f12:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f1c:	4b42      	ldr	r3, [pc, #264]	; (8005028 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f22:	e00b      	b.n	8004f3c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f26:	1c5a      	adds	r2, r3, #1
 8004f28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f2c:	b2d2      	uxtb	r2, r2
 8004f2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f32:	b2d2      	uxtb	r2, r2
 8004f34:	701a      	strb	r2, [r3, #0]
 8004f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f38:	09db      	lsrs	r3, r3, #7
 8004f3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3e:	2b7f      	cmp	r3, #127	; 0x7f
 8004f40:	d8f0      	bhi.n	8004f24 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f44:	1c5a      	adds	r2, r3, #1
 8004f46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f4a:	b2d2      	uxtb	r2, r2
 8004f4c:	701a      	strb	r2, [r3, #0]
 8004f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f50:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	627b      	str	r3, [r7, #36]	; 0x24
 8004f56:	4b34      	ldr	r3, [pc, #208]	; (8005028 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	623b      	str	r3, [r7, #32]
 8004f5c:	e00b      	b.n	8004f76 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f60:	1c5a      	adds	r2, r3, #1
 8004f62:	627a      	str	r2, [r7, #36]	; 0x24
 8004f64:	6a3a      	ldr	r2, [r7, #32]
 8004f66:	b2d2      	uxtb	r2, r2
 8004f68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f6c:	b2d2      	uxtb	r2, r2
 8004f6e:	701a      	strb	r2, [r3, #0]
 8004f70:	6a3b      	ldr	r3, [r7, #32]
 8004f72:	09db      	lsrs	r3, r3, #7
 8004f74:	623b      	str	r3, [r7, #32]
 8004f76:	6a3b      	ldr	r3, [r7, #32]
 8004f78:	2b7f      	cmp	r3, #127	; 0x7f
 8004f7a:	d8f0      	bhi.n	8004f5e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	1c5a      	adds	r2, r3, #1
 8004f80:	627a      	str	r2, [r7, #36]	; 0x24
 8004f82:	6a3a      	ldr	r2, [r7, #32]
 8004f84:	b2d2      	uxtb	r2, r2
 8004f86:	701a      	strb	r2, [r3, #0]
 8004f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	61fb      	str	r3, [r7, #28]
 8004f90:	4b25      	ldr	r3, [pc, #148]	; (8005028 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	61bb      	str	r3, [r7, #24]
 8004f96:	e00b      	b.n	8004fb0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	1c5a      	adds	r2, r3, #1
 8004f9c:	61fa      	str	r2, [r7, #28]
 8004f9e:	69ba      	ldr	r2, [r7, #24]
 8004fa0:	b2d2      	uxtb	r2, r2
 8004fa2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fa6:	b2d2      	uxtb	r2, r2
 8004fa8:	701a      	strb	r2, [r3, #0]
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	09db      	lsrs	r3, r3, #7
 8004fae:	61bb      	str	r3, [r7, #24]
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	2b7f      	cmp	r3, #127	; 0x7f
 8004fb4:	d8f0      	bhi.n	8004f98 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	1c5a      	adds	r2, r3, #1
 8004fba:	61fa      	str	r2, [r7, #28]
 8004fbc:	69ba      	ldr	r2, [r7, #24]
 8004fbe:	b2d2      	uxtb	r2, r2
 8004fc0:	701a      	strb	r2, [r3, #0]
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	617b      	str	r3, [r7, #20]
 8004fca:	2302      	movs	r3, #2
 8004fcc:	613b      	str	r3, [r7, #16]
 8004fce:	e00b      	b.n	8004fe8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	1c5a      	adds	r2, r3, #1
 8004fd4:	617a      	str	r2, [r7, #20]
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	b2d2      	uxtb	r2, r2
 8004fda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fde:	b2d2      	uxtb	r2, r2
 8004fe0:	701a      	strb	r2, [r3, #0]
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	09db      	lsrs	r3, r3, #7
 8004fe6:	613b      	str	r3, [r7, #16]
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	2b7f      	cmp	r3, #127	; 0x7f
 8004fec:	d8f0      	bhi.n	8004fd0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	1c5a      	adds	r2, r3, #1
 8004ff2:	617a      	str	r2, [r7, #20]
 8004ff4:	693a      	ldr	r2, [r7, #16]
 8004ff6:	b2d2      	uxtb	r2, r2
 8004ff8:	701a      	strb	r2, [r3, #0]
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004ffe:	68b8      	ldr	r0, [r7, #8]
 8005000:	6879      	ldr	r1, [r7, #4]
 8005002:	2218      	movs	r2, #24
 8005004:	f7ff fcd4 	bl	80049b0 <_SendPacket>
  RECORD_END();
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800500e:	4b06      	ldr	r3, [pc, #24]	; (8005028 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005012:	2b00      	cmp	r3, #0
 8005014:	d002      	beq.n	800501c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005016:	4b04      	ldr	r3, [pc, #16]	; (8005028 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501a:	4798      	blx	r3
  }
}
 800501c:	3730      	adds	r7, #48	; 0x30
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	20002a1c 	.word	0x20002a1c
 8005028:	200029ec 	.word	0x200029ec

0800502c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800502c:	b580      	push	{r7, lr}
 800502e:	b092      	sub	sp, #72	; 0x48
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005034:	f3ef 8311 	mrs	r3, BASEPRI
 8005038:	f04f 0120 	mov.w	r1, #32
 800503c:	f381 8811 	msr	BASEPRI, r1
 8005040:	617b      	str	r3, [r7, #20]
 8005042:	486a      	ldr	r0, [pc, #424]	; (80051ec <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005044:	f7ff fbe0 	bl	8004808 <_PreparePacket>
 8005048:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	647b      	str	r3, [r7, #68]	; 0x44
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	4b66      	ldr	r3, [pc, #408]	; (80051f0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	089b      	lsrs	r3, r3, #2
 800505e:	643b      	str	r3, [r7, #64]	; 0x40
 8005060:	e00b      	b.n	800507a <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 8005062:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005064:	1c5a      	adds	r2, r3, #1
 8005066:	647a      	str	r2, [r7, #68]	; 0x44
 8005068:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800506a:	b2d2      	uxtb	r2, r2
 800506c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005070:	b2d2      	uxtb	r2, r2
 8005072:	701a      	strb	r2, [r3, #0]
 8005074:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005076:	09db      	lsrs	r3, r3, #7
 8005078:	643b      	str	r3, [r7, #64]	; 0x40
 800507a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800507c:	2b7f      	cmp	r3, #127	; 0x7f
 800507e:	d8f0      	bhi.n	8005062 <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 8005080:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005082:	1c5a      	adds	r2, r3, #1
 8005084:	647a      	str	r2, [r7, #68]	; 0x44
 8005086:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005088:	b2d2      	uxtb	r2, r2
 800508a:	701a      	strb	r2, [r3, #0]
 800508c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800508e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	63bb      	str	r3, [r7, #56]	; 0x38
 800509a:	e00b      	b.n	80050b4 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 800509c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800509e:	1c5a      	adds	r2, r3, #1
 80050a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80050a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050a4:	b2d2      	uxtb	r2, r2
 80050a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050aa:	b2d2      	uxtb	r2, r2
 80050ac:	701a      	strb	r2, [r3, #0]
 80050ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b0:	09db      	lsrs	r3, r3, #7
 80050b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80050b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b6:	2b7f      	cmp	r3, #127	; 0x7f
 80050b8:	d8f0      	bhi.n	800509c <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 80050ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050bc:	1c5a      	adds	r2, r3, #1
 80050be:	63fa      	str	r2, [r7, #60]	; 0x3c
 80050c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050c2:	b2d2      	uxtb	r2, r2
 80050c4:	701a      	strb	r2, [r3, #0]
 80050c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050c8:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	4619      	mov	r1, r3
 80050d2:	2220      	movs	r2, #32
 80050d4:	f7ff fb4a 	bl	800476c <_EncodeStr>
 80050d8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80050da:	6938      	ldr	r0, [r7, #16]
 80050dc:	68f9      	ldr	r1, [r7, #12]
 80050de:	2209      	movs	r2, #9
 80050e0:	f7ff fc66 	bl	80049b0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	637b      	str	r3, [r7, #52]	; 0x34
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	4b3f      	ldr	r3, [pc, #252]	; (80051f0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	089b      	lsrs	r3, r3, #2
 80050f8:	633b      	str	r3, [r7, #48]	; 0x30
 80050fa:	e00b      	b.n	8005114 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 80050fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050fe:	1c5a      	adds	r2, r3, #1
 8005100:	637a      	str	r2, [r7, #52]	; 0x34
 8005102:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005104:	b2d2      	uxtb	r2, r2
 8005106:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800510a:	b2d2      	uxtb	r2, r2
 800510c:	701a      	strb	r2, [r3, #0]
 800510e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005110:	09db      	lsrs	r3, r3, #7
 8005112:	633b      	str	r3, [r7, #48]	; 0x30
 8005114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005116:	2b7f      	cmp	r3, #127	; 0x7f
 8005118:	d8f0      	bhi.n	80050fc <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 800511a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800511c:	1c5a      	adds	r2, r3, #1
 800511e:	637a      	str	r2, [r7, #52]	; 0x34
 8005120:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005122:	b2d2      	uxtb	r2, r2
 8005124:	701a      	strb	r2, [r3, #0]
 8005126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005128:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	62bb      	str	r3, [r7, #40]	; 0x28
 8005134:	e00b      	b.n	800514e <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 8005136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005138:	1c5a      	adds	r2, r3, #1
 800513a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800513c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800513e:	b2d2      	uxtb	r2, r2
 8005140:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005144:	b2d2      	uxtb	r2, r2
 8005146:	701a      	strb	r2, [r3, #0]
 8005148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514a:	09db      	lsrs	r3, r3, #7
 800514c:	62bb      	str	r3, [r7, #40]	; 0x28
 800514e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005150:	2b7f      	cmp	r3, #127	; 0x7f
 8005152:	d8f0      	bhi.n	8005136 <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 8005154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005156:	1c5a      	adds	r2, r3, #1
 8005158:	62fa      	str	r2, [r7, #44]	; 0x2c
 800515a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800515c:	b2d2      	uxtb	r2, r2
 800515e:	701a      	strb	r2, [r3, #0]
 8005160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005162:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	627b      	str	r3, [r7, #36]	; 0x24
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	623b      	str	r3, [r7, #32]
 800516e:	e00b      	b.n	8005188 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 8005170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005172:	1c5a      	adds	r2, r3, #1
 8005174:	627a      	str	r2, [r7, #36]	; 0x24
 8005176:	6a3a      	ldr	r2, [r7, #32]
 8005178:	b2d2      	uxtb	r2, r2
 800517a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800517e:	b2d2      	uxtb	r2, r2
 8005180:	701a      	strb	r2, [r3, #0]
 8005182:	6a3b      	ldr	r3, [r7, #32]
 8005184:	09db      	lsrs	r3, r3, #7
 8005186:	623b      	str	r3, [r7, #32]
 8005188:	6a3b      	ldr	r3, [r7, #32]
 800518a:	2b7f      	cmp	r3, #127	; 0x7f
 800518c:	d8f0      	bhi.n	8005170 <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 800518e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005190:	1c5a      	adds	r2, r3, #1
 8005192:	627a      	str	r2, [r7, #36]	; 0x24
 8005194:	6a3a      	ldr	r2, [r7, #32]
 8005196:	b2d2      	uxtb	r2, r2
 8005198:	701a      	strb	r2, [r3, #0]
 800519a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	61fb      	str	r3, [r7, #28]
 80051a2:	2300      	movs	r3, #0
 80051a4:	61bb      	str	r3, [r7, #24]
 80051a6:	e00b      	b.n	80051c0 <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	1c5a      	adds	r2, r3, #1
 80051ac:	61fa      	str	r2, [r7, #28]
 80051ae:	69ba      	ldr	r2, [r7, #24]
 80051b0:	b2d2      	uxtb	r2, r2
 80051b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051b6:	b2d2      	uxtb	r2, r2
 80051b8:	701a      	strb	r2, [r3, #0]
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	09db      	lsrs	r3, r3, #7
 80051be:	61bb      	str	r3, [r7, #24]
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	2b7f      	cmp	r3, #127	; 0x7f
 80051c4:	d8f0      	bhi.n	80051a8 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	1c5a      	adds	r2, r3, #1
 80051ca:	61fa      	str	r2, [r7, #28]
 80051cc:	69ba      	ldr	r2, [r7, #24]
 80051ce:	b2d2      	uxtb	r2, r2
 80051d0:	701a      	strb	r2, [r3, #0]
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80051d6:	6938      	ldr	r0, [r7, #16]
 80051d8:	68f9      	ldr	r1, [r7, #12]
 80051da:	2215      	movs	r2, #21
 80051dc:	f7ff fbe8 	bl	80049b0 <_SendPacket>
  RECORD_END();
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	f383 8811 	msr	BASEPRI, r3
}
 80051e6:	3748      	adds	r7, #72	; 0x48
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	20002a1c 	.word	0x20002a1c
 80051f0:	200029ec 	.word	0x200029ec

080051f4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80051f4:	b580      	push	{r7, lr}
 80051f6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80051f8:	4b06      	ldr	r3, [pc, #24]	; (8005214 <SEGGER_SYSVIEW_SendTaskList+0x20>)
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d008      	beq.n	8005212 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005200:	4b04      	ldr	r3, [pc, #16]	; (8005214 <SEGGER_SYSVIEW_SendTaskList+0x20>)
 8005202:	6a1b      	ldr	r3, [r3, #32]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d003      	beq.n	8005212 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800520a:	4b02      	ldr	r3, [pc, #8]	; (8005214 <SEGGER_SYSVIEW_SendTaskList+0x20>)
 800520c:	6a1b      	ldr	r3, [r3, #32]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	4798      	blx	r3
  }
}
 8005212:	bd80      	pop	{r7, pc}
 8005214:	200029ec 	.word	0x200029ec

08005218 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005220:	f3ef 8311 	mrs	r3, BASEPRI
 8005224:	f04f 0120 	mov.w	r1, #32
 8005228:	f381 8811 	msr	BASEPRI, r1
 800522c:	617b      	str	r3, [r7, #20]
 800522e:	480a      	ldr	r0, [pc, #40]	; (8005258 <SEGGER_SYSVIEW_SendSysDesc+0x40>)
 8005230:	f7ff faea 	bl	8004808 <_PreparePacket>
 8005234:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005236:	6938      	ldr	r0, [r7, #16]
 8005238:	6879      	ldr	r1, [r7, #4]
 800523a:	2280      	movs	r2, #128	; 0x80
 800523c:	f7ff fa96 	bl	800476c <_EncodeStr>
 8005240:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005242:	6938      	ldr	r0, [r7, #16]
 8005244:	68f9      	ldr	r1, [r7, #12]
 8005246:	220e      	movs	r2, #14
 8005248:	f7ff fbb2 	bl	80049b0 <_SendPacket>
  RECORD_END();
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	f383 8811 	msr	BASEPRI, r3
}
 8005252:	3718      	adds	r7, #24
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	20002a1c 	.word	0x20002a1c

0800525c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800525c:	b5b0      	push	{r4, r5, r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005262:	4b11      	ldr	r3, [pc, #68]	; (80052a8 <SEGGER_SYSVIEW_RecordSystime+0x4c>)
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d015      	beq.n	8005296 <SEGGER_SYSVIEW_RecordSystime+0x3a>
 800526a:	4b0f      	ldr	r3, [pc, #60]	; (80052a8 <SEGGER_SYSVIEW_RecordSystime+0x4c>)
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d010      	beq.n	8005296 <SEGGER_SYSVIEW_RecordSystime+0x3a>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005274:	4b0c      	ldr	r3, [pc, #48]	; (80052a8 <SEGGER_SYSVIEW_RecordSystime+0x4c>)
 8005276:	6a1b      	ldr	r3, [r3, #32]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4798      	blx	r3
 800527c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005280:	6839      	ldr	r1, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005282:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005286:	001c      	movs	r4, r3
 8005288:	2500      	movs	r5, #0
void SEGGER_SYSVIEW_RecordSystime(void) {
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800528a:	4623      	mov	r3, r4
 800528c:	200d      	movs	r0, #13
 800528e:	461a      	mov	r2, r3
 8005290:	f7ff fcfa 	bl	8004c88 <SEGGER_SYSVIEW_RecordU32x2>
 8005294:	e005      	b.n	80052a2 <SEGGER_SYSVIEW_RecordSystime+0x46>
                               (U32)(Systime),
                               (U32)(Systime >> 32));
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005296:	4b05      	ldr	r3, [pc, #20]	; (80052ac <SEGGER_SYSVIEW_RecordSystime+0x50>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	200c      	movs	r0, #12
 800529c:	4619      	mov	r1, r3
 800529e:	f7ff fcb7 	bl	8004c10 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80052a2:	3708      	adds	r7, #8
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bdb0      	pop	{r4, r5, r7, pc}
 80052a8:	200029ec 	.word	0x200029ec
 80052ac:	e0001004 	.word	0xe0001004

080052b0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80052b6:	f3ef 8311 	mrs	r3, BASEPRI
 80052ba:	f04f 0120 	mov.w	r1, #32
 80052be:	f381 8811 	msr	BASEPRI, r1
 80052c2:	60fb      	str	r3, [r7, #12]
 80052c4:	4818      	ldr	r0, [pc, #96]	; (8005328 <SEGGER_SYSVIEW_RecordEnterISR+0x78>)
 80052c6:	f7ff fa9f 	bl	8004808 <_PreparePacket>
 80052ca:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80052d0:	4b16      	ldr	r3, [pc, #88]	; (800532c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052d8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	617b      	str	r3, [r7, #20]
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	613b      	str	r3, [r7, #16]
 80052e2:	e00b      	b.n	80052fc <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	1c5a      	adds	r2, r3, #1
 80052e8:	617a      	str	r2, [r7, #20]
 80052ea:	693a      	ldr	r2, [r7, #16]
 80052ec:	b2d2      	uxtb	r2, r2
 80052ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052f2:	b2d2      	uxtb	r2, r2
 80052f4:	701a      	strb	r2, [r3, #0]
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	09db      	lsrs	r3, r3, #7
 80052fa:	613b      	str	r3, [r7, #16]
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	2b7f      	cmp	r3, #127	; 0x7f
 8005300:	d8f0      	bhi.n	80052e4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	1c5a      	adds	r2, r3, #1
 8005306:	617a      	str	r2, [r7, #20]
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	b2d2      	uxtb	r2, r2
 800530c:	701a      	strb	r2, [r3, #0]
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005312:	68b8      	ldr	r0, [r7, #8]
 8005314:	6879      	ldr	r1, [r7, #4]
 8005316:	2202      	movs	r2, #2
 8005318:	f7ff fb4a 	bl	80049b0 <_SendPacket>
  RECORD_END();
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f383 8811 	msr	BASEPRI, r3
}
 8005322:	3718      	adds	r7, #24
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	20002a1c 	.word	0x20002a1c
 800532c:	e000ed04 	.word	0xe000ed04

08005330 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005336:	f3ef 8311 	mrs	r3, BASEPRI
 800533a:	f04f 0120 	mov.w	r1, #32
 800533e:	f381 8811 	msr	BASEPRI, r1
 8005342:	607b      	str	r3, [r7, #4]
 8005344:	4807      	ldr	r0, [pc, #28]	; (8005364 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005346:	f7ff fa5f 	bl	8004808 <_PreparePacket>
 800534a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800534c:	6838      	ldr	r0, [r7, #0]
 800534e:	6839      	ldr	r1, [r7, #0]
 8005350:	2203      	movs	r2, #3
 8005352:	f7ff fb2d 	bl	80049b0 <_SendPacket>
  RECORD_END();
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f383 8811 	msr	BASEPRI, r3
}
 800535c:	3708      	adds	r7, #8
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	20002a1c 	.word	0x20002a1c

08005368 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800536e:	f3ef 8311 	mrs	r3, BASEPRI
 8005372:	f04f 0120 	mov.w	r1, #32
 8005376:	f381 8811 	msr	BASEPRI, r1
 800537a:	607b      	str	r3, [r7, #4]
 800537c:	4807      	ldr	r0, [pc, #28]	; (800539c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800537e:	f7ff fa43 	bl	8004808 <_PreparePacket>
 8005382:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005384:	6838      	ldr	r0, [r7, #0]
 8005386:	6839      	ldr	r1, [r7, #0]
 8005388:	2212      	movs	r2, #18
 800538a:	f7ff fb11 	bl	80049b0 <_SendPacket>
  RECORD_END();
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f383 8811 	msr	BASEPRI, r3
}
 8005394:	3708      	adds	r7, #8
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	20002a1c 	.word	0x20002a1c

080053a0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80053a6:	f3ef 8311 	mrs	r3, BASEPRI
 80053aa:	f04f 0120 	mov.w	r1, #32
 80053ae:	f381 8811 	msr	BASEPRI, r1
 80053b2:	607b      	str	r3, [r7, #4]
 80053b4:	4807      	ldr	r0, [pc, #28]	; (80053d4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80053b6:	f7ff fa27 	bl	8004808 <_PreparePacket>
 80053ba:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80053bc:	6838      	ldr	r0, [r7, #0]
 80053be:	6839      	ldr	r1, [r7, #0]
 80053c0:	2211      	movs	r2, #17
 80053c2:	f7ff faf5 	bl	80049b0 <_SendPacket>
  RECORD_END();
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f383 8811 	msr	BASEPRI, r3
}
 80053cc:	3708      	adds	r7, #8
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	20002a1c 	.word	0x20002a1c

080053d8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80053d8:	b580      	push	{r7, lr}
 80053da:	b088      	sub	sp, #32
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80053e0:	f3ef 8311 	mrs	r3, BASEPRI
 80053e4:	f04f 0120 	mov.w	r1, #32
 80053e8:	f381 8811 	msr	BASEPRI, r1
 80053ec:	617b      	str	r3, [r7, #20]
 80053ee:	4819      	ldr	r0, [pc, #100]	; (8005454 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80053f0:	f7ff fa0a 	bl	8004808 <_PreparePacket>
 80053f4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80053fa:	4b17      	ldr	r3, [pc, #92]	; (8005458 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	089b      	lsrs	r3, r3, #2
 8005404:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	61fb      	str	r3, [r7, #28]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	61bb      	str	r3, [r7, #24]
 800540e:	e00b      	b.n	8005428 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	1c5a      	adds	r2, r3, #1
 8005414:	61fa      	str	r2, [r7, #28]
 8005416:	69ba      	ldr	r2, [r7, #24]
 8005418:	b2d2      	uxtb	r2, r2
 800541a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800541e:	b2d2      	uxtb	r2, r2
 8005420:	701a      	strb	r2, [r3, #0]
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	09db      	lsrs	r3, r3, #7
 8005426:	61bb      	str	r3, [r7, #24]
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	2b7f      	cmp	r3, #127	; 0x7f
 800542c:	d8f0      	bhi.n	8005410 <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	1c5a      	adds	r2, r3, #1
 8005432:	61fa      	str	r2, [r7, #28]
 8005434:	69ba      	ldr	r2, [r7, #24]
 8005436:	b2d2      	uxtb	r2, r2
 8005438:	701a      	strb	r2, [r3, #0]
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800543e:	6938      	ldr	r0, [r7, #16]
 8005440:	68f9      	ldr	r1, [r7, #12]
 8005442:	2208      	movs	r2, #8
 8005444:	f7ff fab4 	bl	80049b0 <_SendPacket>
  RECORD_END();
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	f383 8811 	msr	BASEPRI, r3
}
 800544e:	3720      	adds	r7, #32
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}
 8005454:	20002a1c 	.word	0x20002a1c
 8005458:	200029ec 	.word	0x200029ec

0800545c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800545c:	b580      	push	{r7, lr}
 800545e:	b088      	sub	sp, #32
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005464:	f3ef 8311 	mrs	r3, BASEPRI
 8005468:	f04f 0120 	mov.w	r1, #32
 800546c:	f381 8811 	msr	BASEPRI, r1
 8005470:	617b      	str	r3, [r7, #20]
 8005472:	4819      	ldr	r0, [pc, #100]	; (80054d8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005474:	f7ff f9c8 	bl	8004808 <_PreparePacket>
 8005478:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800547e:	4b17      	ldr	r3, [pc, #92]	; (80054dc <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	089b      	lsrs	r3, r3, #2
 8005488:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	61fb      	str	r3, [r7, #28]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	61bb      	str	r3, [r7, #24]
 8005492:	e00b      	b.n	80054ac <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	1c5a      	adds	r2, r3, #1
 8005498:	61fa      	str	r2, [r7, #28]
 800549a:	69ba      	ldr	r2, [r7, #24]
 800549c:	b2d2      	uxtb	r2, r2
 800549e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054a2:	b2d2      	uxtb	r2, r2
 80054a4:	701a      	strb	r2, [r3, #0]
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	09db      	lsrs	r3, r3, #7
 80054aa:	61bb      	str	r3, [r7, #24]
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	2b7f      	cmp	r3, #127	; 0x7f
 80054b0:	d8f0      	bhi.n	8005494 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	1c5a      	adds	r2, r3, #1
 80054b6:	61fa      	str	r2, [r7, #28]
 80054b8:	69ba      	ldr	r2, [r7, #24]
 80054ba:	b2d2      	uxtb	r2, r2
 80054bc:	701a      	strb	r2, [r3, #0]
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80054c2:	6938      	ldr	r0, [r7, #16]
 80054c4:	68f9      	ldr	r1, [r7, #12]
 80054c6:	2204      	movs	r2, #4
 80054c8:	f7ff fa72 	bl	80049b0 <_SendPacket>
  RECORD_END();
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	f383 8811 	msr	BASEPRI, r3
}
 80054d2:	3720      	adds	r7, #32
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	20002a1c 	.word	0x20002a1c
 80054dc:	200029ec 	.word	0x200029ec

080054e0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b088      	sub	sp, #32
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80054e8:	f3ef 8311 	mrs	r3, BASEPRI
 80054ec:	f04f 0120 	mov.w	r1, #32
 80054f0:	f381 8811 	msr	BASEPRI, r1
 80054f4:	617b      	str	r3, [r7, #20]
 80054f6:	4819      	ldr	r0, [pc, #100]	; (800555c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80054f8:	f7ff f986 	bl	8004808 <_PreparePacket>
 80054fc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005502:	4b17      	ldr	r3, [pc, #92]	; (8005560 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	089b      	lsrs	r3, r3, #2
 800550c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	61fb      	str	r3, [r7, #28]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	61bb      	str	r3, [r7, #24]
 8005516:	e00b      	b.n	8005530 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	1c5a      	adds	r2, r3, #1
 800551c:	61fa      	str	r2, [r7, #28]
 800551e:	69ba      	ldr	r2, [r7, #24]
 8005520:	b2d2      	uxtb	r2, r2
 8005522:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005526:	b2d2      	uxtb	r2, r2
 8005528:	701a      	strb	r2, [r3, #0]
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	09db      	lsrs	r3, r3, #7
 800552e:	61bb      	str	r3, [r7, #24]
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	2b7f      	cmp	r3, #127	; 0x7f
 8005534:	d8f0      	bhi.n	8005518 <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	1c5a      	adds	r2, r3, #1
 800553a:	61fa      	str	r2, [r7, #28]
 800553c:	69ba      	ldr	r2, [r7, #24]
 800553e:	b2d2      	uxtb	r2, r2
 8005540:	701a      	strb	r2, [r3, #0]
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005546:	6938      	ldr	r0, [r7, #16]
 8005548:	68f9      	ldr	r1, [r7, #12]
 800554a:	2206      	movs	r2, #6
 800554c:	f7ff fa30 	bl	80049b0 <_SendPacket>
  RECORD_END();
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	f383 8811 	msr	BASEPRI, r3
}
 8005556:	3720      	adds	r7, #32
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	20002a1c 	.word	0x20002a1c
 8005560:	200029ec 	.word	0x200029ec

08005564 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005564:	b580      	push	{r7, lr}
 8005566:	b08c      	sub	sp, #48	; 0x30
 8005568:	af00      	add	r7, sp, #0
 800556a:	4603      	mov	r3, r0
 800556c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800556e:	4b3a      	ldr	r3, [pc, #232]	; (8005658 <SEGGER_SYSVIEW_SendModule+0xf4>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d06c      	beq.n	8005650 <SEGGER_SYSVIEW_SendModule+0xec>
    pModule = _pFirstModule;
 8005576:	4b38      	ldr	r3, [pc, #224]	; (8005658 <SEGGER_SYSVIEW_SendModule+0xf4>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800557c:	2300      	movs	r3, #0
 800557e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005580:	e009      	b.n	8005596 <SEGGER_SYSVIEW_SendModule+0x32>
      pModule = pModule->pNext;
 8005582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800558a:	2b00      	cmp	r3, #0
 800558c:	d100      	bne.n	8005590 <SEGGER_SYSVIEW_SendModule+0x2c>
        break;
 800558e:	e006      	b.n	800559e <SEGGER_SYSVIEW_SendModule+0x3a>
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
    pModule = _pFirstModule;
    for (n = 0; n < ModuleId; n++) {
 8005590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005592:	3301      	adds	r3, #1
 8005594:	62bb      	str	r3, [r7, #40]	; 0x28
 8005596:	79fa      	ldrb	r2, [r7, #7]
 8005598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559a:	429a      	cmp	r2, r3
 800559c:	d8f1      	bhi.n	8005582 <SEGGER_SYSVIEW_SendModule+0x1e>
      pModule = pModule->pNext;
      if (pModule == 0) {
        break;
      }
    }
    if (pModule != 0) {
 800559e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d055      	beq.n	8005650 <SEGGER_SYSVIEW_SendModule+0xec>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80055a4:	f3ef 8311 	mrs	r3, BASEPRI
 80055a8:	f04f 0120 	mov.w	r1, #32
 80055ac:	f381 8811 	msr	BASEPRI, r1
 80055b0:	617b      	str	r3, [r7, #20]
 80055b2:	482a      	ldr	r0, [pc, #168]	; (800565c <SEGGER_SYSVIEW_SendModule+0xf8>)
 80055b4:	f7ff f928 	bl	8004808 <_PreparePacket>
 80055b8:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	627b      	str	r3, [r7, #36]	; 0x24
 80055c2:	79fb      	ldrb	r3, [r7, #7]
 80055c4:	623b      	str	r3, [r7, #32]
 80055c6:	e00b      	b.n	80055e0 <SEGGER_SYSVIEW_SendModule+0x7c>
 80055c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ca:	1c5a      	adds	r2, r3, #1
 80055cc:	627a      	str	r2, [r7, #36]	; 0x24
 80055ce:	6a3a      	ldr	r2, [r7, #32]
 80055d0:	b2d2      	uxtb	r2, r2
 80055d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055d6:	b2d2      	uxtb	r2, r2
 80055d8:	701a      	strb	r2, [r3, #0]
 80055da:	6a3b      	ldr	r3, [r7, #32]
 80055dc:	09db      	lsrs	r3, r3, #7
 80055de:	623b      	str	r3, [r7, #32]
 80055e0:	6a3b      	ldr	r3, [r7, #32]
 80055e2:	2b7f      	cmp	r3, #127	; 0x7f
 80055e4:	d8f0      	bhi.n	80055c8 <SEGGER_SYSVIEW_SendModule+0x64>
 80055e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e8:	1c5a      	adds	r2, r3, #1
 80055ea:	627a      	str	r2, [r7, #36]	; 0x24
 80055ec:	6a3a      	ldr	r2, [r7, #32]
 80055ee:	b2d2      	uxtb	r2, r2
 80055f0:	701a      	strb	r2, [r3, #0]
 80055f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f4:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	61fb      	str	r3, [r7, #28]
 80055fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	61bb      	str	r3, [r7, #24]
 8005600:	e00b      	b.n	800561a <SEGGER_SYSVIEW_SendModule+0xb6>
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	1c5a      	adds	r2, r3, #1
 8005606:	61fa      	str	r2, [r7, #28]
 8005608:	69ba      	ldr	r2, [r7, #24]
 800560a:	b2d2      	uxtb	r2, r2
 800560c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005610:	b2d2      	uxtb	r2, r2
 8005612:	701a      	strb	r2, [r3, #0]
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	09db      	lsrs	r3, r3, #7
 8005618:	61bb      	str	r3, [r7, #24]
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	2b7f      	cmp	r3, #127	; 0x7f
 800561e:	d8f0      	bhi.n	8005602 <SEGGER_SYSVIEW_SendModule+0x9e>
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	1c5a      	adds	r2, r3, #1
 8005624:	61fa      	str	r2, [r7, #28]
 8005626:	69ba      	ldr	r2, [r7, #24]
 8005628:	b2d2      	uxtb	r2, r2
 800562a:	701a      	strb	r2, [r3, #0]
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	4619      	mov	r1, r3
 8005638:	2280      	movs	r2, #128	; 0x80
 800563a:	f7ff f897 	bl	800476c <_EncodeStr>
 800563e:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005640:	6938      	ldr	r0, [r7, #16]
 8005642:	68f9      	ldr	r1, [r7, #12]
 8005644:	2216      	movs	r2, #22
 8005646:	f7ff f9b3 	bl	80049b0 <_SendPacket>
      RECORD_END();
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8005650:	3730      	adds	r7, #48	; 0x30
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	20002a14 	.word	0x20002a14
 800565c:	20002a1c 	.word	0x20002a1c

08005660 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005666:	4b0b      	ldr	r3, [pc, #44]	; (8005694 <SEGGER_SYSVIEW_SendModuleDescription+0x34>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00f      	beq.n	800568e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800566e:	4b09      	ldr	r3, [pc, #36]	; (8005694 <SEGGER_SYSVIEW_SendModuleDescription+0x34>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d002      	beq.n	8005682 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1f2      	bne.n	8005674 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800568e:	3708      	adds	r7, #8
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	20002a14 	.word	0x20002a14

08005698 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005698:	b580      	push	{r7, lr}
 800569a:	b086      	sub	sp, #24
 800569c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800569e:	f3ef 8311 	mrs	r3, BASEPRI
 80056a2:	f04f 0120 	mov.w	r1, #32
 80056a6:	f381 8811 	msr	BASEPRI, r1
 80056aa:	60fb      	str	r3, [r7, #12]
 80056ac:	4816      	ldr	r0, [pc, #88]	; (8005708 <SEGGER_SYSVIEW_SendNumModules+0x70>)
 80056ae:	f7ff f8ab 	bl	8004808 <_PreparePacket>
 80056b2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	617b      	str	r3, [r7, #20]
 80056bc:	4b13      	ldr	r3, [pc, #76]	; (800570c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	613b      	str	r3, [r7, #16]
 80056c2:	e00b      	b.n	80056dc <SEGGER_SYSVIEW_SendNumModules+0x44>
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	1c5a      	adds	r2, r3, #1
 80056c8:	617a      	str	r2, [r7, #20]
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	b2d2      	uxtb	r2, r2
 80056ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056d2:	b2d2      	uxtb	r2, r2
 80056d4:	701a      	strb	r2, [r3, #0]
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	09db      	lsrs	r3, r3, #7
 80056da:	613b      	str	r3, [r7, #16]
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	2b7f      	cmp	r3, #127	; 0x7f
 80056e0:	d8f0      	bhi.n	80056c4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	1c5a      	adds	r2, r3, #1
 80056e6:	617a      	str	r2, [r7, #20]
 80056e8:	693a      	ldr	r2, [r7, #16]
 80056ea:	b2d2      	uxtb	r2, r2
 80056ec:	701a      	strb	r2, [r3, #0]
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80056f2:	68b8      	ldr	r0, [r7, #8]
 80056f4:	6879      	ldr	r1, [r7, #4]
 80056f6:	221b      	movs	r2, #27
 80056f8:	f7ff f95a 	bl	80049b0 <_SendPacket>
  RECORD_END();
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f383 8811 	msr	BASEPRI, r3
}
 8005702:	3718      	adds	r7, #24
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	20002a1c 	.word	0x20002a1c
 800570c:	20002a18 	.word	0x20002a18

08005710 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005710:	b580      	push	{r7, lr}
 8005712:	b08a      	sub	sp, #40	; 0x28
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005718:	f3ef 8311 	mrs	r3, BASEPRI
 800571c:	f04f 0120 	mov.w	r1, #32
 8005720:	f381 8811 	msr	BASEPRI, r1
 8005724:	617b      	str	r3, [r7, #20]
 8005726:	4826      	ldr	r0, [pc, #152]	; (80057c0 <SEGGER_SYSVIEW_Warn+0xb0>)
 8005728:	f7ff f86e 	bl	8004808 <_PreparePacket>
 800572c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800572e:	6938      	ldr	r0, [r7, #16]
 8005730:	6879      	ldr	r1, [r7, #4]
 8005732:	2280      	movs	r2, #128	; 0x80
 8005734:	f7ff f81a 	bl	800476c <_EncodeStr>
 8005738:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	627b      	str	r3, [r7, #36]	; 0x24
 800573e:	2301      	movs	r3, #1
 8005740:	623b      	str	r3, [r7, #32]
 8005742:	e00b      	b.n	800575c <SEGGER_SYSVIEW_Warn+0x4c>
 8005744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005746:	1c5a      	adds	r2, r3, #1
 8005748:	627a      	str	r2, [r7, #36]	; 0x24
 800574a:	6a3a      	ldr	r2, [r7, #32]
 800574c:	b2d2      	uxtb	r2, r2
 800574e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005752:	b2d2      	uxtb	r2, r2
 8005754:	701a      	strb	r2, [r3, #0]
 8005756:	6a3b      	ldr	r3, [r7, #32]
 8005758:	09db      	lsrs	r3, r3, #7
 800575a:	623b      	str	r3, [r7, #32]
 800575c:	6a3b      	ldr	r3, [r7, #32]
 800575e:	2b7f      	cmp	r3, #127	; 0x7f
 8005760:	d8f0      	bhi.n	8005744 <SEGGER_SYSVIEW_Warn+0x34>
 8005762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005764:	1c5a      	adds	r2, r3, #1
 8005766:	627a      	str	r2, [r7, #36]	; 0x24
 8005768:	6a3a      	ldr	r2, [r7, #32]
 800576a:	b2d2      	uxtb	r2, r2
 800576c:	701a      	strb	r2, [r3, #0]
 800576e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005770:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	61fb      	str	r3, [r7, #28]
 8005776:	2300      	movs	r3, #0
 8005778:	61bb      	str	r3, [r7, #24]
 800577a:	e00b      	b.n	8005794 <SEGGER_SYSVIEW_Warn+0x84>
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	1c5a      	adds	r2, r3, #1
 8005780:	61fa      	str	r2, [r7, #28]
 8005782:	69ba      	ldr	r2, [r7, #24]
 8005784:	b2d2      	uxtb	r2, r2
 8005786:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800578a:	b2d2      	uxtb	r2, r2
 800578c:	701a      	strb	r2, [r3, #0]
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	09db      	lsrs	r3, r3, #7
 8005792:	61bb      	str	r3, [r7, #24]
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	2b7f      	cmp	r3, #127	; 0x7f
 8005798:	d8f0      	bhi.n	800577c <SEGGER_SYSVIEW_Warn+0x6c>
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	1c5a      	adds	r2, r3, #1
 800579e:	61fa      	str	r2, [r7, #28]
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	b2d2      	uxtb	r2, r2
 80057a4:	701a      	strb	r2, [r3, #0]
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80057aa:	6938      	ldr	r0, [r7, #16]
 80057ac:	68f9      	ldr	r1, [r7, #12]
 80057ae:	221a      	movs	r2, #26
 80057b0:	f7ff f8fe 	bl	80049b0 <_SendPacket>
  RECORD_END();
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	f383 8811 	msr	BASEPRI, r3
}
 80057ba:	3728      	adds	r7, #40	; 0x28
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	20002a1c 	.word	0x20002a1c

080057c4 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80057c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80057ca:	2300      	movs	r3, #0
 80057cc:	607b      	str	r3, [r7, #4]
 80057ce:	e033      	b.n	8005838 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80057d0:	491d      	ldr	r1, [pc, #116]	; (8005848 <_cbSendTaskList+0x84>)
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	4613      	mov	r3, r2
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	4413      	add	r3, r2
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	440b      	add	r3, r1
 80057de:	6818      	ldr	r0, [r3, #0]
 80057e0:	4919      	ldr	r1, [pc, #100]	; (8005848 <_cbSendTaskList+0x84>)
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	4613      	mov	r3, r2
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4413      	add	r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	440b      	add	r3, r1
 80057ee:	685e      	ldr	r6, [r3, #4]
 80057f0:	4915      	ldr	r1, [pc, #84]	; (8005848 <_cbSendTaskList+0x84>)
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	4613      	mov	r3, r2
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4413      	add	r3, r2
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	440b      	add	r3, r1
 80057fe:	3308      	adds	r3, #8
 8005800:	681d      	ldr	r5, [r3, #0]
 8005802:	4911      	ldr	r1, [pc, #68]	; (8005848 <_cbSendTaskList+0x84>)
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	4613      	mov	r3, r2
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	4413      	add	r3, r2
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	440b      	add	r3, r1
 8005810:	3308      	adds	r3, #8
 8005812:	685c      	ldr	r4, [r3, #4]
 8005814:	490c      	ldr	r1, [pc, #48]	; (8005848 <_cbSendTaskList+0x84>)
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	4613      	mov	r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	4413      	add	r3, r2
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	440b      	add	r3, r1
 8005822:	3310      	adds	r3, #16
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	9300      	str	r3, [sp, #0]
 8005828:	4631      	mov	r1, r6
 800582a:	462a      	mov	r2, r5
 800582c:	4623      	mov	r3, r4
 800582e:	f000 f8a9 	bl	8005984 <SYSVIEW_SendTaskInfo>
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	3301      	adds	r3, #1
 8005836:	607b      	str	r3, [r7, #4]
 8005838:	4b04      	ldr	r3, [pc, #16]	; (800584c <_cbSendTaskList+0x88>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	429a      	cmp	r2, r3
 8005840:	d3c6      	bcc.n	80057d0 <_cbSendTaskList+0xc>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
  }
}
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005848:	20002b00 	.word	0x20002b00
 800584c:	20002ba0 	.word	0x20002ba0

08005850 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8005850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005854:	b082      	sub	sp, #8
 8005856:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8005858:	f7fe fb20 	bl	8003e9c <xTaskGetTickCountFromISR>
 800585c:	4603      	mov	r3, r0
 800585e:	461a      	mov	r2, r3
 8005860:	f04f 0300 	mov.w	r3, #0
 8005864:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8005868:	e9d7 0100 	ldrd	r0, r1, [r7]
 800586c:	4602      	mov	r2, r0
 800586e:	460b      	mov	r3, r1
 8005870:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 8005874:	ea4b 7b92 	orr.w	fp, fp, r2, lsr #30
 8005878:	ea4f 0a82 	mov.w	sl, r2, lsl #2
 800587c:	4652      	mov	r2, sl
 800587e:	465b      	mov	r3, fp
 8005880:	015d      	lsls	r5, r3, #5
 8005882:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8005886:	0154      	lsls	r4, r2, #5
 8005888:	1aa4      	subs	r4, r4, r2
 800588a:	eb65 0503 	sbc.w	r5, r5, r3
 800588e:	1824      	adds	r4, r4, r0
 8005890:	eb45 0501 	adc.w	r5, r5, r1
 8005894:	ea4f 09c5 	mov.w	r9, r5, lsl #3
 8005898:	ea49 7954 	orr.w	r9, r9, r4, lsr #29
 800589c:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 80058a0:	4644      	mov	r4, r8
 80058a2:	464d      	mov	r5, r9
 80058a4:	e9c7 4500 	strd	r4, r5, [r7]
  return Time;
 80058a8:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80058ac:	4610      	mov	r0, r2
 80058ae:	4619      	mov	r1, r3
 80058b0:	3708      	adds	r7, #8
 80058b2:	46bd      	mov	sp, r7
 80058b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080058b8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b086      	sub	sp, #24
 80058bc:	af02      	add	r7, sp, #8
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	607a      	str	r2, [r7, #4]
 80058c4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80058c6:	68b8      	ldr	r0, [r7, #8]
 80058c8:	492a      	ldr	r1, [pc, #168]	; (8005974 <SYSVIEW_AddTask+0xbc>)
 80058ca:	2205      	movs	r2, #5
 80058cc:	f000 f8ca 	bl	8005a64 <memcmp>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d100      	bne.n	80058d8 <SYSVIEW_AddTask+0x20>
    return;
 80058d6:	e049      	b.n	800596c <SYSVIEW_AddTask+0xb4>
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80058d8:	4b27      	ldr	r3, [pc, #156]	; (8005978 <SYSVIEW_AddTask+0xc0>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2b07      	cmp	r3, #7
 80058de:	d903      	bls.n	80058e8 <SYSVIEW_AddTask+0x30>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80058e0:	4826      	ldr	r0, [pc, #152]	; (800597c <SYSVIEW_AddTask+0xc4>)
 80058e2:	f7ff ff15 	bl	8005710 <SEGGER_SYSVIEW_Warn>
    return;
 80058e6:	e041      	b.n	800596c <SYSVIEW_AddTask+0xb4>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80058e8:	4b23      	ldr	r3, [pc, #140]	; (8005978 <SYSVIEW_AddTask+0xc0>)
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	4924      	ldr	r1, [pc, #144]	; (8005980 <SYSVIEW_AddTask+0xc8>)
 80058ee:	4613      	mov	r3, r2
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	4413      	add	r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	440b      	add	r3, r1
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80058fc:	4b1e      	ldr	r3, [pc, #120]	; (8005978 <SYSVIEW_AddTask+0xc0>)
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	491f      	ldr	r1, [pc, #124]	; (8005980 <SYSVIEW_AddTask+0xc8>)
 8005902:	4613      	mov	r3, r2
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	4413      	add	r3, r2
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	440b      	add	r3, r1
 800590c:	68ba      	ldr	r2, [r7, #8]
 800590e:	605a      	str	r2, [r3, #4]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8005910:	4b19      	ldr	r3, [pc, #100]	; (8005978 <SYSVIEW_AddTask+0xc0>)
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	491a      	ldr	r1, [pc, #104]	; (8005980 <SYSVIEW_AddTask+0xc8>)
 8005916:	4613      	mov	r3, r2
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	4413      	add	r3, r2
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	440b      	add	r3, r1
 8005920:	3308      	adds	r3, #8
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005926:	4b14      	ldr	r3, [pc, #80]	; (8005978 <SYSVIEW_AddTask+0xc0>)
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	4915      	ldr	r1, [pc, #84]	; (8005980 <SYSVIEW_AddTask+0xc8>)
 800592c:	4613      	mov	r3, r2
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	4413      	add	r3, r2
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	440b      	add	r3, r1
 8005936:	3308      	adds	r3, #8
 8005938:	683a      	ldr	r2, [r7, #0]
 800593a:	605a      	str	r2, [r3, #4]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800593c:	4b0e      	ldr	r3, [pc, #56]	; (8005978 <SYSVIEW_AddTask+0xc0>)
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	490f      	ldr	r1, [pc, #60]	; (8005980 <SYSVIEW_AddTask+0xc8>)
 8005942:	4613      	mov	r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	4413      	add	r3, r2
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	440b      	add	r3, r1
 800594c:	3310      	adds	r3, #16
 800594e:	69ba      	ldr	r2, [r7, #24]
 8005950:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8005952:	4b09      	ldr	r3, [pc, #36]	; (8005978 <SYSVIEW_AddTask+0xc0>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	3301      	adds	r3, #1
 8005958:	4a07      	ldr	r2, [pc, #28]	; (8005978 <SYSVIEW_AddTask+0xc0>)
 800595a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	9300      	str	r3, [sp, #0]
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	68b9      	ldr	r1, [r7, #8]
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	f000 f80c 	bl	8005984 <SYSVIEW_SendTaskInfo>

}
 800596c:	3710      	adds	r7, #16
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	0800620c 	.word	0x0800620c
 8005978:	20002ba0 	.word	0x20002ba0
 800597c:	08006214 	.word	0x08006214
 8005980:	20002b00 	.word	0x20002b00

08005984 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005984:	b580      	push	{r7, lr}
 8005986:	b08a      	sub	sp, #40	; 0x28
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]
 8005990:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005992:	f107 0314 	add.w	r3, r7, #20
 8005996:	4618      	mov	r0, r3
 8005998:	2100      	movs	r1, #0
 800599a:	2214      	movs	r2, #20
 800599c:	f000 f87d 	bl	8005a9a <memset>
  TaskInfo.TaskID     = TaskID;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80059b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b2:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80059b4:	f107 0314 	add.w	r3, r7, #20
 80059b8:	4618      	mov	r0, r3
 80059ba:	f7ff fb37 	bl	800502c <SEGGER_SYSVIEW_SendTaskInfo>
}
 80059be:	3728      	adds	r7, #40	; 0x28
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80059c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80059fc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80059c8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80059ca:	e003      	b.n	80059d4 <LoopCopyDataInit>

080059cc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80059cc:	4b0c      	ldr	r3, [pc, #48]	; (8005a00 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80059ce:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80059d0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80059d2:	3104      	adds	r1, #4

080059d4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80059d4:	480b      	ldr	r0, [pc, #44]	; (8005a04 <LoopForever+0xa>)
	ldr	r3, =_edata
 80059d6:	4b0c      	ldr	r3, [pc, #48]	; (8005a08 <LoopForever+0xe>)
	adds	r2, r0, r1
 80059d8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80059da:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80059dc:	d3f6      	bcc.n	80059cc <CopyDataInit>
	ldr	r2, =_sbss
 80059de:	4a0b      	ldr	r2, [pc, #44]	; (8005a0c <LoopForever+0x12>)
	b	LoopFillZerobss
 80059e0:	e002      	b.n	80059e8 <LoopFillZerobss>

080059e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80059e2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80059e4:	f842 3b04 	str.w	r3, [r2], #4

080059e8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80059e8:	4b09      	ldr	r3, [pc, #36]	; (8005a10 <LoopForever+0x16>)
	cmp	r2, r3
 80059ea:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80059ec:	d3f9      	bcc.n	80059e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80059ee:	f7fa fe53 	bl	8000698 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80059f2:	f000 f811 	bl	8005a18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80059f6:	f7fa fd3b 	bl	8000470 <main>

080059fa <LoopForever>:

LoopForever:
    b LoopForever
 80059fa:	e7fe      	b.n	80059fa <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80059fc:	20004000 	.word	0x20004000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8005a00:	08006320 	.word	0x08006320
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005a04:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005a08:	2000006c 	.word	0x2000006c
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8005a0c:	2000006c 	.word	0x2000006c
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8005a10:	20002d24 	.word	0x20002d24

08005a14 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005a14:	e7fe      	b.n	8005a14 <ADC1_IRQHandler>
	...

08005a18 <__libc_init_array>:
 8005a18:	b570      	push	{r4, r5, r6, lr}
 8005a1a:	4b0e      	ldr	r3, [pc, #56]	; (8005a54 <__libc_init_array+0x3c>)
 8005a1c:	4c0e      	ldr	r4, [pc, #56]	; (8005a58 <__libc_init_array+0x40>)
 8005a1e:	1ae4      	subs	r4, r4, r3
 8005a20:	10a4      	asrs	r4, r4, #2
 8005a22:	2500      	movs	r5, #0
 8005a24:	461e      	mov	r6, r3
 8005a26:	42a5      	cmp	r5, r4
 8005a28:	d004      	beq.n	8005a34 <__libc_init_array+0x1c>
 8005a2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005a2e:	4798      	blx	r3
 8005a30:	3501      	adds	r5, #1
 8005a32:	e7f8      	b.n	8005a26 <__libc_init_array+0xe>
 8005a34:	f000 fb9a 	bl	800616c <_init>
 8005a38:	4c08      	ldr	r4, [pc, #32]	; (8005a5c <__libc_init_array+0x44>)
 8005a3a:	4b09      	ldr	r3, [pc, #36]	; (8005a60 <__libc_init_array+0x48>)
 8005a3c:	1ae4      	subs	r4, r4, r3
 8005a3e:	10a4      	asrs	r4, r4, #2
 8005a40:	2500      	movs	r5, #0
 8005a42:	461e      	mov	r6, r3
 8005a44:	42a5      	cmp	r5, r4
 8005a46:	d004      	beq.n	8005a52 <__libc_init_array+0x3a>
 8005a48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005a4c:	4798      	blx	r3
 8005a4e:	3501      	adds	r5, #1
 8005a50:	e7f8      	b.n	8005a44 <__libc_init_array+0x2c>
 8005a52:	bd70      	pop	{r4, r5, r6, pc}
 8005a54:	08006318 	.word	0x08006318
 8005a58:	08006318 	.word	0x08006318
 8005a5c:	0800631c 	.word	0x0800631c
 8005a60:	08006318 	.word	0x08006318

08005a64 <memcmp>:
 8005a64:	b510      	push	{r4, lr}
 8005a66:	440a      	add	r2, r1
 8005a68:	1e44      	subs	r4, r0, #1
 8005a6a:	4291      	cmp	r1, r2
 8005a6c:	d008      	beq.n	8005a80 <memcmp+0x1c>
 8005a6e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005a72:	7808      	ldrb	r0, [r1, #0]
 8005a74:	4283      	cmp	r3, r0
 8005a76:	d001      	beq.n	8005a7c <memcmp+0x18>
 8005a78:	1a18      	subs	r0, r3, r0
 8005a7a:	bd10      	pop	{r4, pc}
 8005a7c:	3101      	adds	r1, #1
 8005a7e:	e7f4      	b.n	8005a6a <memcmp+0x6>
 8005a80:	2000      	movs	r0, #0
 8005a82:	bd10      	pop	{r4, pc}

08005a84 <memcpy>:
 8005a84:	b510      	push	{r4, lr}
 8005a86:	1e43      	subs	r3, r0, #1
 8005a88:	440a      	add	r2, r1
 8005a8a:	4291      	cmp	r1, r2
 8005a8c:	d004      	beq.n	8005a98 <memcpy+0x14>
 8005a8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a96:	e7f8      	b.n	8005a8a <memcpy+0x6>
 8005a98:	bd10      	pop	{r4, pc}

08005a9a <memset>:
 8005a9a:	4402      	add	r2, r0
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d002      	beq.n	8005aa8 <memset+0xe>
 8005aa2:	f803 1b01 	strb.w	r1, [r3], #1
 8005aa6:	e7fa      	b.n	8005a9e <memset+0x4>
 8005aa8:	4770      	bx	lr
	...

08005aac <setvbuf>:
 8005aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ab0:	461d      	mov	r5, r3
 8005ab2:	4b3d      	ldr	r3, [pc, #244]	; (8005ba8 <setvbuf+0xfc>)
 8005ab4:	681e      	ldr	r6, [r3, #0]
 8005ab6:	4604      	mov	r4, r0
 8005ab8:	460f      	mov	r7, r1
 8005aba:	4690      	mov	r8, r2
 8005abc:	b126      	cbz	r6, 8005ac8 <setvbuf+0x1c>
 8005abe:	69b3      	ldr	r3, [r6, #24]
 8005ac0:	b913      	cbnz	r3, 8005ac8 <setvbuf+0x1c>
 8005ac2:	4630      	mov	r0, r6
 8005ac4:	f000 f968 	bl	8005d98 <__sinit>
 8005ac8:	4b38      	ldr	r3, [pc, #224]	; (8005bac <setvbuf+0x100>)
 8005aca:	429c      	cmp	r4, r3
 8005acc:	d101      	bne.n	8005ad2 <setvbuf+0x26>
 8005ace:	6874      	ldr	r4, [r6, #4]
 8005ad0:	e008      	b.n	8005ae4 <setvbuf+0x38>
 8005ad2:	4b37      	ldr	r3, [pc, #220]	; (8005bb0 <setvbuf+0x104>)
 8005ad4:	429c      	cmp	r4, r3
 8005ad6:	d101      	bne.n	8005adc <setvbuf+0x30>
 8005ad8:	68b4      	ldr	r4, [r6, #8]
 8005ada:	e003      	b.n	8005ae4 <setvbuf+0x38>
 8005adc:	4b35      	ldr	r3, [pc, #212]	; (8005bb4 <setvbuf+0x108>)
 8005ade:	429c      	cmp	r4, r3
 8005ae0:	bf08      	it	eq
 8005ae2:	68f4      	ldreq	r4, [r6, #12]
 8005ae4:	f1b8 0f02 	cmp.w	r8, #2
 8005ae8:	d85a      	bhi.n	8005ba0 <setvbuf+0xf4>
 8005aea:	2d00      	cmp	r5, #0
 8005aec:	db58      	blt.n	8005ba0 <setvbuf+0xf4>
 8005aee:	4630      	mov	r0, r6
 8005af0:	4621      	mov	r1, r4
 8005af2:	f000 f8e7 	bl	8005cc4 <_fflush_r>
 8005af6:	2300      	movs	r3, #0
 8005af8:	6063      	str	r3, [r4, #4]
 8005afa:	61a3      	str	r3, [r4, #24]
 8005afc:	89a3      	ldrh	r3, [r4, #12]
 8005afe:	061b      	lsls	r3, r3, #24
 8005b00:	d503      	bpl.n	8005b0a <setvbuf+0x5e>
 8005b02:	4630      	mov	r0, r6
 8005b04:	6921      	ldr	r1, [r4, #16]
 8005b06:	f000 f9d7 	bl	8005eb8 <_free_r>
 8005b0a:	89a3      	ldrh	r3, [r4, #12]
 8005b0c:	f1b8 0f02 	cmp.w	r8, #2
 8005b10:	f023 0383 	bic.w	r3, r3, #131	; 0x83
 8005b14:	81a3      	strh	r3, [r4, #12]
 8005b16:	d012      	beq.n	8005b3e <setvbuf+0x92>
 8005b18:	bb37      	cbnz	r7, 8005b68 <setvbuf+0xbc>
 8005b1a:	2d00      	cmp	r5, #0
 8005b1c:	bf08      	it	eq
 8005b1e:	f44f 6580 	moveq.w	r5, #1024	; 0x400
 8005b22:	4628      	mov	r0, r5
 8005b24:	f000 f9c0 	bl	8005ea8 <malloc>
 8005b28:	4607      	mov	r7, r0
 8005b2a:	b9c8      	cbnz	r0, 8005b60 <setvbuf+0xb4>
 8005b2c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005b30:	f000 f9ba 	bl	8005ea8 <malloc>
 8005b34:	4607      	mov	r7, r0
 8005b36:	b988      	cbnz	r0, 8005b5c <setvbuf+0xb0>
 8005b38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b3c:	e000      	b.n	8005b40 <setvbuf+0x94>
 8005b3e:	2000      	movs	r0, #0
 8005b40:	89a3      	ldrh	r3, [r4, #12]
 8005b42:	f043 0302 	orr.w	r3, r3, #2
 8005b46:	81a3      	strh	r3, [r4, #12]
 8005b48:	2300      	movs	r3, #0
 8005b4a:	60a3      	str	r3, [r4, #8]
 8005b4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005b50:	6023      	str	r3, [r4, #0]
 8005b52:	6123      	str	r3, [r4, #16]
 8005b54:	2301      	movs	r3, #1
 8005b56:	6163      	str	r3, [r4, #20]
 8005b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b5c:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8005b60:	89a3      	ldrh	r3, [r4, #12]
 8005b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b66:	81a3      	strh	r3, [r4, #12]
 8005b68:	f1b8 0f01 	cmp.w	r8, #1
 8005b6c:	bf01      	itttt	eq
 8005b6e:	89a3      	ldrheq	r3, [r4, #12]
 8005b70:	f043 0301 	orreq.w	r3, r3, #1
 8005b74:	81a3      	strheq	r3, [r4, #12]
 8005b76:	426b      	negeq	r3, r5
 8005b78:	bf08      	it	eq
 8005b7a:	61a3      	streq	r3, [r4, #24]
 8005b7c:	4b0e      	ldr	r3, [pc, #56]	; (8005bb8 <setvbuf+0x10c>)
 8005b7e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005b80:	89a3      	ldrh	r3, [r4, #12]
 8005b82:	6027      	str	r7, [r4, #0]
 8005b84:	f003 0008 	and.w	r0, r3, #8
 8005b88:	b280      	uxth	r0, r0
 8005b8a:	6127      	str	r7, [r4, #16]
 8005b8c:	6165      	str	r5, [r4, #20]
 8005b8e:	b148      	cbz	r0, 8005ba4 <setvbuf+0xf8>
 8005b90:	f013 0f03 	tst.w	r3, #3
 8005b94:	bf18      	it	ne
 8005b96:	2500      	movne	r5, #0
 8005b98:	60a5      	str	r5, [r4, #8]
 8005b9a:	2000      	movs	r0, #0
 8005b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ba8:	20000068 	.word	0x20000068
 8005bac:	080062b8 	.word	0x080062b8
 8005bb0:	080062d8 	.word	0x080062d8
 8005bb4:	080062f8 	.word	0x080062f8
 8005bb8:	08005d19 	.word	0x08005d19

08005bbc <__sflush_r>:
 8005bbc:	898a      	ldrh	r2, [r1, #12]
 8005bbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bc2:	4605      	mov	r5, r0
 8005bc4:	0710      	lsls	r0, r2, #28
 8005bc6:	460c      	mov	r4, r1
 8005bc8:	d457      	bmi.n	8005c7a <__sflush_r+0xbe>
 8005bca:	684b      	ldr	r3, [r1, #4]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	dc02      	bgt.n	8005bd6 <__sflush_r+0x1a>
 8005bd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	dd18      	ble.n	8005c08 <__sflush_r+0x4c>
 8005bd6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005bd8:	b1b6      	cbz	r6, 8005c08 <__sflush_r+0x4c>
 8005bda:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005bde:	2300      	movs	r3, #0
 8005be0:	b292      	uxth	r2, r2
 8005be2:	682f      	ldr	r7, [r5, #0]
 8005be4:	602b      	str	r3, [r5, #0]
 8005be6:	b10a      	cbz	r2, 8005bec <__sflush_r+0x30>
 8005be8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005bea:	e010      	b.n	8005c0e <__sflush_r+0x52>
 8005bec:	6a21      	ldr	r1, [r4, #32]
 8005bee:	4628      	mov	r0, r5
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	47b0      	blx	r6
 8005bf4:	1c41      	adds	r1, r0, #1
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	d109      	bne.n	8005c0e <__sflush_r+0x52>
 8005bfa:	682b      	ldr	r3, [r5, #0]
 8005bfc:	b13b      	cbz	r3, 8005c0e <__sflush_r+0x52>
 8005bfe:	2b1d      	cmp	r3, #29
 8005c00:	d001      	beq.n	8005c06 <__sflush_r+0x4a>
 8005c02:	2b16      	cmp	r3, #22
 8005c04:	d147      	bne.n	8005c96 <__sflush_r+0xda>
 8005c06:	602f      	str	r7, [r5, #0]
 8005c08:	2000      	movs	r0, #0
 8005c0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c0e:	89a3      	ldrh	r3, [r4, #12]
 8005c10:	075b      	lsls	r3, r3, #29
 8005c12:	d505      	bpl.n	8005c20 <__sflush_r+0x64>
 8005c14:	6863      	ldr	r3, [r4, #4]
 8005c16:	1ad2      	subs	r2, r2, r3
 8005c18:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c1a:	b10b      	cbz	r3, 8005c20 <__sflush_r+0x64>
 8005c1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c1e:	1ad2      	subs	r2, r2, r3
 8005c20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c22:	6a21      	ldr	r1, [r4, #32]
 8005c24:	2300      	movs	r3, #0
 8005c26:	4628      	mov	r0, r5
 8005c28:	47b0      	blx	r6
 8005c2a:	1c46      	adds	r6, r0, #1
 8005c2c:	89a3      	ldrh	r3, [r4, #12]
 8005c2e:	d105      	bne.n	8005c3c <__sflush_r+0x80>
 8005c30:	682a      	ldr	r2, [r5, #0]
 8005c32:	b11a      	cbz	r2, 8005c3c <__sflush_r+0x80>
 8005c34:	2a1d      	cmp	r2, #29
 8005c36:	d001      	beq.n	8005c3c <__sflush_r+0x80>
 8005c38:	2a16      	cmp	r2, #22
 8005c3a:	d119      	bne.n	8005c70 <__sflush_r+0xb4>
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	6062      	str	r2, [r4, #4]
 8005c40:	04d9      	lsls	r1, r3, #19
 8005c42:	6922      	ldr	r2, [r4, #16]
 8005c44:	6022      	str	r2, [r4, #0]
 8005c46:	d504      	bpl.n	8005c52 <__sflush_r+0x96>
 8005c48:	1c42      	adds	r2, r0, #1
 8005c4a:	d101      	bne.n	8005c50 <__sflush_r+0x94>
 8005c4c:	682b      	ldr	r3, [r5, #0]
 8005c4e:	b903      	cbnz	r3, 8005c52 <__sflush_r+0x96>
 8005c50:	6560      	str	r0, [r4, #84]	; 0x54
 8005c52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c54:	602f      	str	r7, [r5, #0]
 8005c56:	2900      	cmp	r1, #0
 8005c58:	d0d6      	beq.n	8005c08 <__sflush_r+0x4c>
 8005c5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c5e:	4299      	cmp	r1, r3
 8005c60:	d002      	beq.n	8005c68 <__sflush_r+0xac>
 8005c62:	4628      	mov	r0, r5
 8005c64:	f000 f928 	bl	8005eb8 <_free_r>
 8005c68:	2000      	movs	r0, #0
 8005c6a:	6360      	str	r0, [r4, #52]	; 0x34
 8005c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c74:	81a3      	strh	r3, [r4, #12]
 8005c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c7a:	690f      	ldr	r7, [r1, #16]
 8005c7c:	2f00      	cmp	r7, #0
 8005c7e:	d0c3      	beq.n	8005c08 <__sflush_r+0x4c>
 8005c80:	0793      	lsls	r3, r2, #30
 8005c82:	680e      	ldr	r6, [r1, #0]
 8005c84:	bf08      	it	eq
 8005c86:	694b      	ldreq	r3, [r1, #20]
 8005c88:	600f      	str	r7, [r1, #0]
 8005c8a:	bf18      	it	ne
 8005c8c:	2300      	movne	r3, #0
 8005c8e:	ebc7 0806 	rsb	r8, r7, r6
 8005c92:	608b      	str	r3, [r1, #8]
 8005c94:	e012      	b.n	8005cbc <__sflush_r+0x100>
 8005c96:	89a3      	ldrh	r3, [r4, #12]
 8005c98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c9c:	81a3      	strh	r3, [r4, #12]
 8005c9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	6a21      	ldr	r1, [r4, #32]
 8005caa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005cac:	463a      	mov	r2, r7
 8005cae:	4643      	mov	r3, r8
 8005cb0:	47b0      	blx	r6
 8005cb2:	2800      	cmp	r0, #0
 8005cb4:	ddef      	ble.n	8005c96 <__sflush_r+0xda>
 8005cb6:	4407      	add	r7, r0
 8005cb8:	ebc0 0808 	rsb	r8, r0, r8
 8005cbc:	f1b8 0f00 	cmp.w	r8, #0
 8005cc0:	dcf1      	bgt.n	8005ca6 <__sflush_r+0xea>
 8005cc2:	e7a1      	b.n	8005c08 <__sflush_r+0x4c>

08005cc4 <_fflush_r>:
 8005cc4:	b538      	push	{r3, r4, r5, lr}
 8005cc6:	690b      	ldr	r3, [r1, #16]
 8005cc8:	4605      	mov	r5, r0
 8005cca:	460c      	mov	r4, r1
 8005ccc:	b1db      	cbz	r3, 8005d06 <_fflush_r+0x42>
 8005cce:	b118      	cbz	r0, 8005cd8 <_fflush_r+0x14>
 8005cd0:	6983      	ldr	r3, [r0, #24]
 8005cd2:	b90b      	cbnz	r3, 8005cd8 <_fflush_r+0x14>
 8005cd4:	f000 f860 	bl	8005d98 <__sinit>
 8005cd8:	4b0c      	ldr	r3, [pc, #48]	; (8005d0c <_fflush_r+0x48>)
 8005cda:	429c      	cmp	r4, r3
 8005cdc:	d101      	bne.n	8005ce2 <_fflush_r+0x1e>
 8005cde:	686c      	ldr	r4, [r5, #4]
 8005ce0:	e008      	b.n	8005cf4 <_fflush_r+0x30>
 8005ce2:	4b0b      	ldr	r3, [pc, #44]	; (8005d10 <_fflush_r+0x4c>)
 8005ce4:	429c      	cmp	r4, r3
 8005ce6:	d101      	bne.n	8005cec <_fflush_r+0x28>
 8005ce8:	68ac      	ldr	r4, [r5, #8]
 8005cea:	e003      	b.n	8005cf4 <_fflush_r+0x30>
 8005cec:	4b09      	ldr	r3, [pc, #36]	; (8005d14 <_fflush_r+0x50>)
 8005cee:	429c      	cmp	r4, r3
 8005cf0:	bf08      	it	eq
 8005cf2:	68ec      	ldreq	r4, [r5, #12]
 8005cf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cf8:	b12b      	cbz	r3, 8005d06 <_fflush_r+0x42>
 8005cfa:	4628      	mov	r0, r5
 8005cfc:	4621      	mov	r1, r4
 8005cfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d02:	f7ff bf5b 	b.w	8005bbc <__sflush_r>
 8005d06:	2000      	movs	r0, #0
 8005d08:	bd38      	pop	{r3, r4, r5, pc}
 8005d0a:	bf00      	nop
 8005d0c:	080062b8 	.word	0x080062b8
 8005d10:	080062d8 	.word	0x080062d8
 8005d14:	080062f8 	.word	0x080062f8

08005d18 <_cleanup_r>:
 8005d18:	4901      	ldr	r1, [pc, #4]	; (8005d20 <_cleanup_r+0x8>)
 8005d1a:	f000 b8a7 	b.w	8005e6c <_fwalk_reent>
 8005d1e:	bf00      	nop
 8005d20:	08005cc5 	.word	0x08005cc5

08005d24 <std.isra.0>:
 8005d24:	2300      	movs	r3, #0
 8005d26:	b510      	push	{r4, lr}
 8005d28:	4604      	mov	r4, r0
 8005d2a:	6003      	str	r3, [r0, #0]
 8005d2c:	6043      	str	r3, [r0, #4]
 8005d2e:	6083      	str	r3, [r0, #8]
 8005d30:	8181      	strh	r1, [r0, #12]
 8005d32:	6643      	str	r3, [r0, #100]	; 0x64
 8005d34:	81c2      	strh	r2, [r0, #14]
 8005d36:	6103      	str	r3, [r0, #16]
 8005d38:	6143      	str	r3, [r0, #20]
 8005d3a:	6183      	str	r3, [r0, #24]
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	305c      	adds	r0, #92	; 0x5c
 8005d40:	2208      	movs	r2, #8
 8005d42:	f7ff feaa 	bl	8005a9a <memset>
 8005d46:	4b05      	ldr	r3, [pc, #20]	; (8005d5c <std.isra.0+0x38>)
 8005d48:	6263      	str	r3, [r4, #36]	; 0x24
 8005d4a:	4b05      	ldr	r3, [pc, #20]	; (8005d60 <std.isra.0+0x3c>)
 8005d4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d4e:	4b05      	ldr	r3, [pc, #20]	; (8005d64 <std.isra.0+0x40>)
 8005d50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d52:	4b05      	ldr	r3, [pc, #20]	; (8005d68 <std.isra.0+0x44>)
 8005d54:	6224      	str	r4, [r4, #32]
 8005d56:	6323      	str	r3, [r4, #48]	; 0x30
 8005d58:	bd10      	pop	{r4, pc}
 8005d5a:	bf00      	nop
 8005d5c:	0800600d 	.word	0x0800600d
 8005d60:	0800602f 	.word	0x0800602f
 8005d64:	08006067 	.word	0x08006067
 8005d68:	0800608b 	.word	0x0800608b

08005d6c <__sfmoreglue>:
 8005d6c:	b570      	push	{r4, r5, r6, lr}
 8005d6e:	2368      	movs	r3, #104	; 0x68
 8005d70:	1e4d      	subs	r5, r1, #1
 8005d72:	435d      	muls	r5, r3
 8005d74:	460e      	mov	r6, r1
 8005d76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005d7a:	f000 f8e1 	bl	8005f40 <_malloc_r>
 8005d7e:	4604      	mov	r4, r0
 8005d80:	b140      	cbz	r0, 8005d94 <__sfmoreglue+0x28>
 8005d82:	2100      	movs	r1, #0
 8005d84:	e880 0042 	stmia.w	r0, {r1, r6}
 8005d88:	300c      	adds	r0, #12
 8005d8a:	60a0      	str	r0, [r4, #8]
 8005d8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005d90:	f7ff fe83 	bl	8005a9a <memset>
 8005d94:	4620      	mov	r0, r4
 8005d96:	bd70      	pop	{r4, r5, r6, pc}

08005d98 <__sinit>:
 8005d98:	6983      	ldr	r3, [r0, #24]
 8005d9a:	b510      	push	{r4, lr}
 8005d9c:	4604      	mov	r4, r0
 8005d9e:	bb33      	cbnz	r3, 8005dee <__sinit+0x56>
 8005da0:	6483      	str	r3, [r0, #72]	; 0x48
 8005da2:	64c3      	str	r3, [r0, #76]	; 0x4c
 8005da4:	6503      	str	r3, [r0, #80]	; 0x50
 8005da6:	4b12      	ldr	r3, [pc, #72]	; (8005df0 <__sinit+0x58>)
 8005da8:	4a12      	ldr	r2, [pc, #72]	; (8005df4 <__sinit+0x5c>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	6282      	str	r2, [r0, #40]	; 0x28
 8005dae:	4298      	cmp	r0, r3
 8005db0:	bf04      	itt	eq
 8005db2:	2301      	moveq	r3, #1
 8005db4:	6183      	streq	r3, [r0, #24]
 8005db6:	f000 f81f 	bl	8005df8 <__sfp>
 8005dba:	6060      	str	r0, [r4, #4]
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	f000 f81b 	bl	8005df8 <__sfp>
 8005dc2:	60a0      	str	r0, [r4, #8]
 8005dc4:	4620      	mov	r0, r4
 8005dc6:	f000 f817 	bl	8005df8 <__sfp>
 8005dca:	2104      	movs	r1, #4
 8005dcc:	60e0      	str	r0, [r4, #12]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	6860      	ldr	r0, [r4, #4]
 8005dd2:	f7ff ffa7 	bl	8005d24 <std.isra.0>
 8005dd6:	68a0      	ldr	r0, [r4, #8]
 8005dd8:	2109      	movs	r1, #9
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f7ff ffa2 	bl	8005d24 <std.isra.0>
 8005de0:	68e0      	ldr	r0, [r4, #12]
 8005de2:	2112      	movs	r1, #18
 8005de4:	2202      	movs	r2, #2
 8005de6:	f7ff ff9d 	bl	8005d24 <std.isra.0>
 8005dea:	2301      	movs	r3, #1
 8005dec:	61a3      	str	r3, [r4, #24]
 8005dee:	bd10      	pop	{r4, pc}
 8005df0:	080062b4 	.word	0x080062b4
 8005df4:	08005d19 	.word	0x08005d19

08005df8 <__sfp>:
 8005df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dfa:	4b1b      	ldr	r3, [pc, #108]	; (8005e68 <__sfp+0x70>)
 8005dfc:	681e      	ldr	r6, [r3, #0]
 8005dfe:	69b3      	ldr	r3, [r6, #24]
 8005e00:	4607      	mov	r7, r0
 8005e02:	b913      	cbnz	r3, 8005e0a <__sfp+0x12>
 8005e04:	4630      	mov	r0, r6
 8005e06:	f7ff ffc7 	bl	8005d98 <__sinit>
 8005e0a:	3648      	adds	r6, #72	; 0x48
 8005e0c:	68b4      	ldr	r4, [r6, #8]
 8005e0e:	6873      	ldr	r3, [r6, #4]
 8005e10:	3b01      	subs	r3, #1
 8005e12:	d404      	bmi.n	8005e1e <__sfp+0x26>
 8005e14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005e18:	b175      	cbz	r5, 8005e38 <__sfp+0x40>
 8005e1a:	3468      	adds	r4, #104	; 0x68
 8005e1c:	e7f8      	b.n	8005e10 <__sfp+0x18>
 8005e1e:	6833      	ldr	r3, [r6, #0]
 8005e20:	b92b      	cbnz	r3, 8005e2e <__sfp+0x36>
 8005e22:	4638      	mov	r0, r7
 8005e24:	2104      	movs	r1, #4
 8005e26:	f7ff ffa1 	bl	8005d6c <__sfmoreglue>
 8005e2a:	6030      	str	r0, [r6, #0]
 8005e2c:	b108      	cbz	r0, 8005e32 <__sfp+0x3a>
 8005e2e:	6836      	ldr	r6, [r6, #0]
 8005e30:	e7ec      	b.n	8005e0c <__sfp+0x14>
 8005e32:	230c      	movs	r3, #12
 8005e34:	603b      	str	r3, [r7, #0]
 8005e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005e3c:	81e3      	strh	r3, [r4, #14]
 8005e3e:	2301      	movs	r3, #1
 8005e40:	81a3      	strh	r3, [r4, #12]
 8005e42:	6665      	str	r5, [r4, #100]	; 0x64
 8005e44:	6025      	str	r5, [r4, #0]
 8005e46:	60a5      	str	r5, [r4, #8]
 8005e48:	6065      	str	r5, [r4, #4]
 8005e4a:	6125      	str	r5, [r4, #16]
 8005e4c:	6165      	str	r5, [r4, #20]
 8005e4e:	61a5      	str	r5, [r4, #24]
 8005e50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005e54:	4629      	mov	r1, r5
 8005e56:	2208      	movs	r2, #8
 8005e58:	f7ff fe1f 	bl	8005a9a <memset>
 8005e5c:	6365      	str	r5, [r4, #52]	; 0x34
 8005e5e:	63a5      	str	r5, [r4, #56]	; 0x38
 8005e60:	64a5      	str	r5, [r4, #72]	; 0x48
 8005e62:	64e5      	str	r5, [r4, #76]	; 0x4c
 8005e64:	4620      	mov	r0, r4
 8005e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e68:	080062b4 	.word	0x080062b4

08005e6c <_fwalk_reent>:
 8005e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e70:	4680      	mov	r8, r0
 8005e72:	4689      	mov	r9, r1
 8005e74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005e78:	2600      	movs	r6, #0
 8005e7a:	b194      	cbz	r4, 8005ea2 <_fwalk_reent+0x36>
 8005e7c:	68a5      	ldr	r5, [r4, #8]
 8005e7e:	6867      	ldr	r7, [r4, #4]
 8005e80:	3f01      	subs	r7, #1
 8005e82:	d40c      	bmi.n	8005e9e <_fwalk_reent+0x32>
 8005e84:	89ab      	ldrh	r3, [r5, #12]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d907      	bls.n	8005e9a <_fwalk_reent+0x2e>
 8005e8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e8e:	3301      	adds	r3, #1
 8005e90:	d003      	beq.n	8005e9a <_fwalk_reent+0x2e>
 8005e92:	4640      	mov	r0, r8
 8005e94:	4629      	mov	r1, r5
 8005e96:	47c8      	blx	r9
 8005e98:	4306      	orrs	r6, r0
 8005e9a:	3568      	adds	r5, #104	; 0x68
 8005e9c:	e7f0      	b.n	8005e80 <_fwalk_reent+0x14>
 8005e9e:	6824      	ldr	r4, [r4, #0]
 8005ea0:	e7eb      	b.n	8005e7a <_fwalk_reent+0xe>
 8005ea2:	4630      	mov	r0, r6
 8005ea4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005ea8 <malloc>:
 8005ea8:	4b02      	ldr	r3, [pc, #8]	; (8005eb4 <malloc+0xc>)
 8005eaa:	4601      	mov	r1, r0
 8005eac:	6818      	ldr	r0, [r3, #0]
 8005eae:	f000 b847 	b.w	8005f40 <_malloc_r>
 8005eb2:	bf00      	nop
 8005eb4:	20000068 	.word	0x20000068

08005eb8 <_free_r>:
 8005eb8:	b530      	push	{r4, r5, lr}
 8005eba:	2900      	cmp	r1, #0
 8005ebc:	d03d      	beq.n	8005f3a <_free_r+0x82>
 8005ebe:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8005ec2:	1f0b      	subs	r3, r1, #4
 8005ec4:	491d      	ldr	r1, [pc, #116]	; (8005f3c <_free_r+0x84>)
 8005ec6:	2a00      	cmp	r2, #0
 8005ec8:	bfb8      	it	lt
 8005eca:	189b      	addlt	r3, r3, r2
 8005ecc:	680a      	ldr	r2, [r1, #0]
 8005ece:	460c      	mov	r4, r1
 8005ed0:	b912      	cbnz	r2, 8005ed8 <_free_r+0x20>
 8005ed2:	605a      	str	r2, [r3, #4]
 8005ed4:	600b      	str	r3, [r1, #0]
 8005ed6:	bd30      	pop	{r4, r5, pc}
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d20d      	bcs.n	8005ef8 <_free_r+0x40>
 8005edc:	6819      	ldr	r1, [r3, #0]
 8005ede:	1858      	adds	r0, r3, r1
 8005ee0:	4290      	cmp	r0, r2
 8005ee2:	bf01      	itttt	eq
 8005ee4:	585a      	ldreq	r2, [r3, r1]
 8005ee6:	1852      	addeq	r2, r2, r1
 8005ee8:	601a      	streq	r2, [r3, #0]
 8005eea:	6842      	ldreq	r2, [r0, #4]
 8005eec:	605a      	str	r2, [r3, #4]
 8005eee:	6023      	str	r3, [r4, #0]
 8005ef0:	bd30      	pop	{r4, r5, pc}
 8005ef2:	4299      	cmp	r1, r3
 8005ef4:	d803      	bhi.n	8005efe <_free_r+0x46>
 8005ef6:	460a      	mov	r2, r1
 8005ef8:	6851      	ldr	r1, [r2, #4]
 8005efa:	2900      	cmp	r1, #0
 8005efc:	d1f9      	bne.n	8005ef2 <_free_r+0x3a>
 8005efe:	6814      	ldr	r4, [r2, #0]
 8005f00:	1915      	adds	r5, r2, r4
 8005f02:	429d      	cmp	r5, r3
 8005f04:	d10a      	bne.n	8005f1c <_free_r+0x64>
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4423      	add	r3, r4
 8005f0a:	18d0      	adds	r0, r2, r3
 8005f0c:	4288      	cmp	r0, r1
 8005f0e:	6013      	str	r3, [r2, #0]
 8005f10:	d113      	bne.n	8005f3a <_free_r+0x82>
 8005f12:	6808      	ldr	r0, [r1, #0]
 8005f14:	4403      	add	r3, r0
 8005f16:	6013      	str	r3, [r2, #0]
 8005f18:	684b      	ldr	r3, [r1, #4]
 8005f1a:	e00d      	b.n	8005f38 <_free_r+0x80>
 8005f1c:	d902      	bls.n	8005f24 <_free_r+0x6c>
 8005f1e:	230c      	movs	r3, #12
 8005f20:	6003      	str	r3, [r0, #0]
 8005f22:	bd30      	pop	{r4, r5, pc}
 8005f24:	681c      	ldr	r4, [r3, #0]
 8005f26:	1918      	adds	r0, r3, r4
 8005f28:	4288      	cmp	r0, r1
 8005f2a:	bf04      	itt	eq
 8005f2c:	6808      	ldreq	r0, [r1, #0]
 8005f2e:	6849      	ldreq	r1, [r1, #4]
 8005f30:	6059      	str	r1, [r3, #4]
 8005f32:	bf04      	itt	eq
 8005f34:	1900      	addeq	r0, r0, r4
 8005f36:	6018      	streq	r0, [r3, #0]
 8005f38:	6053      	str	r3, [r2, #4]
 8005f3a:	bd30      	pop	{r4, r5, pc}
 8005f3c:	20002ba8 	.word	0x20002ba8

08005f40 <_malloc_r>:
 8005f40:	b570      	push	{r4, r5, r6, lr}
 8005f42:	1ccc      	adds	r4, r1, #3
 8005f44:	f024 0403 	bic.w	r4, r4, #3
 8005f48:	3408      	adds	r4, #8
 8005f4a:	2c0c      	cmp	r4, #12
 8005f4c:	bf38      	it	cc
 8005f4e:	240c      	movcc	r4, #12
 8005f50:	2c00      	cmp	r4, #0
 8005f52:	4606      	mov	r6, r0
 8005f54:	da03      	bge.n	8005f5e <_malloc_r+0x1e>
 8005f56:	230c      	movs	r3, #12
 8005f58:	6033      	str	r3, [r6, #0]
 8005f5a:	2000      	movs	r0, #0
 8005f5c:	bd70      	pop	{r4, r5, r6, pc}
 8005f5e:	428c      	cmp	r4, r1
 8005f60:	d3f9      	bcc.n	8005f56 <_malloc_r+0x16>
 8005f62:	4a20      	ldr	r2, [pc, #128]	; (8005fe4 <_malloc_r+0xa4>)
 8005f64:	6813      	ldr	r3, [r2, #0]
 8005f66:	4610      	mov	r0, r2
 8005f68:	4619      	mov	r1, r3
 8005f6a:	b1a1      	cbz	r1, 8005f96 <_malloc_r+0x56>
 8005f6c:	680a      	ldr	r2, [r1, #0]
 8005f6e:	1b12      	subs	r2, r2, r4
 8005f70:	d40e      	bmi.n	8005f90 <_malloc_r+0x50>
 8005f72:	2a0b      	cmp	r2, #11
 8005f74:	d903      	bls.n	8005f7e <_malloc_r+0x3e>
 8005f76:	600a      	str	r2, [r1, #0]
 8005f78:	188b      	adds	r3, r1, r2
 8005f7a:	508c      	str	r4, [r1, r2]
 8005f7c:	e01f      	b.n	8005fbe <_malloc_r+0x7e>
 8005f7e:	428b      	cmp	r3, r1
 8005f80:	bf0d      	iteet	eq
 8005f82:	685a      	ldreq	r2, [r3, #4]
 8005f84:	684a      	ldrne	r2, [r1, #4]
 8005f86:	605a      	strne	r2, [r3, #4]
 8005f88:	6002      	streq	r2, [r0, #0]
 8005f8a:	bf18      	it	ne
 8005f8c:	460b      	movne	r3, r1
 8005f8e:	e016      	b.n	8005fbe <_malloc_r+0x7e>
 8005f90:	460b      	mov	r3, r1
 8005f92:	6849      	ldr	r1, [r1, #4]
 8005f94:	e7e9      	b.n	8005f6a <_malloc_r+0x2a>
 8005f96:	4d14      	ldr	r5, [pc, #80]	; (8005fe8 <_malloc_r+0xa8>)
 8005f98:	682b      	ldr	r3, [r5, #0]
 8005f9a:	b91b      	cbnz	r3, 8005fa4 <_malloc_r+0x64>
 8005f9c:	4630      	mov	r0, r6
 8005f9e:	f000 f825 	bl	8005fec <_sbrk_r>
 8005fa2:	6028      	str	r0, [r5, #0]
 8005fa4:	4630      	mov	r0, r6
 8005fa6:	4621      	mov	r1, r4
 8005fa8:	f000 f820 	bl	8005fec <_sbrk_r>
 8005fac:	1c42      	adds	r2, r0, #1
 8005fae:	4603      	mov	r3, r0
 8005fb0:	d0d1      	beq.n	8005f56 <_malloc_r+0x16>
 8005fb2:	1cc5      	adds	r5, r0, #3
 8005fb4:	f025 0503 	bic.w	r5, r5, #3
 8005fb8:	4285      	cmp	r5, r0
 8005fba:	d10a      	bne.n	8005fd2 <_malloc_r+0x92>
 8005fbc:	601c      	str	r4, [r3, #0]
 8005fbe:	f103 000b 	add.w	r0, r3, #11
 8005fc2:	1d1a      	adds	r2, r3, #4
 8005fc4:	f020 0007 	bic.w	r0, r0, #7
 8005fc8:	1a82      	subs	r2, r0, r2
 8005fca:	d00a      	beq.n	8005fe2 <_malloc_r+0xa2>
 8005fcc:	4251      	negs	r1, r2
 8005fce:	5099      	str	r1, [r3, r2]
 8005fd0:	bd70      	pop	{r4, r5, r6, pc}
 8005fd2:	4630      	mov	r0, r6
 8005fd4:	1ae9      	subs	r1, r5, r3
 8005fd6:	f000 f809 	bl	8005fec <_sbrk_r>
 8005fda:	3001      	adds	r0, #1
 8005fdc:	d0bb      	beq.n	8005f56 <_malloc_r+0x16>
 8005fde:	462b      	mov	r3, r5
 8005fe0:	e7ec      	b.n	8005fbc <_malloc_r+0x7c>
 8005fe2:	bd70      	pop	{r4, r5, r6, pc}
 8005fe4:	20002ba8 	.word	0x20002ba8
 8005fe8:	20002ba4 	.word	0x20002ba4

08005fec <_sbrk_r>:
 8005fec:	b538      	push	{r3, r4, r5, lr}
 8005fee:	4c06      	ldr	r4, [pc, #24]	; (8006008 <_sbrk_r+0x1c>)
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	4605      	mov	r5, r0
 8005ff4:	4608      	mov	r0, r1
 8005ff6:	6023      	str	r3, [r4, #0]
 8005ff8:	f000 f8a2 	bl	8006140 <_sbrk>
 8005ffc:	1c43      	adds	r3, r0, #1
 8005ffe:	d102      	bne.n	8006006 <_sbrk_r+0x1a>
 8006000:	6823      	ldr	r3, [r4, #0]
 8006002:	b103      	cbz	r3, 8006006 <_sbrk_r+0x1a>
 8006004:	602b      	str	r3, [r5, #0]
 8006006:	bd38      	pop	{r3, r4, r5, pc}
 8006008:	20002d20 	.word	0x20002d20

0800600c <__sread>:
 800600c:	b510      	push	{r4, lr}
 800600e:	460c      	mov	r4, r1
 8006010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006014:	f000 f872 	bl	80060fc <_read_r>
 8006018:	2800      	cmp	r0, #0
 800601a:	bfab      	itete	ge
 800601c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800601e:	89a3      	ldrhlt	r3, [r4, #12]
 8006020:	181b      	addge	r3, r3, r0
 8006022:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006026:	bfac      	ite	ge
 8006028:	6563      	strge	r3, [r4, #84]	; 0x54
 800602a:	81a3      	strhlt	r3, [r4, #12]
 800602c:	bd10      	pop	{r4, pc}

0800602e <__swrite>:
 800602e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006032:	461d      	mov	r5, r3
 8006034:	898b      	ldrh	r3, [r1, #12]
 8006036:	05db      	lsls	r3, r3, #23
 8006038:	4607      	mov	r7, r0
 800603a:	460c      	mov	r4, r1
 800603c:	4616      	mov	r6, r2
 800603e:	d505      	bpl.n	800604c <__swrite+0x1e>
 8006040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006044:	2200      	movs	r2, #0
 8006046:	2302      	movs	r3, #2
 8006048:	f000 f846 	bl	80060d8 <_lseek_r>
 800604c:	89a3      	ldrh	r3, [r4, #12]
 800604e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006052:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006056:	81a3      	strh	r3, [r4, #12]
 8006058:	4638      	mov	r0, r7
 800605a:	4632      	mov	r2, r6
 800605c:	462b      	mov	r3, r5
 800605e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006062:	f000 b817 	b.w	8006094 <_write_r>

08006066 <__sseek>:
 8006066:	b510      	push	{r4, lr}
 8006068:	460c      	mov	r4, r1
 800606a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800606e:	f000 f833 	bl	80060d8 <_lseek_r>
 8006072:	1c43      	adds	r3, r0, #1
 8006074:	89a3      	ldrh	r3, [r4, #12]
 8006076:	bf15      	itete	ne
 8006078:	6560      	strne	r0, [r4, #84]	; 0x54
 800607a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800607e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006082:	81a3      	strheq	r3, [r4, #12]
 8006084:	bf18      	it	ne
 8006086:	81a3      	strhne	r3, [r4, #12]
 8006088:	bd10      	pop	{r4, pc}

0800608a <__sclose>:
 800608a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800608e:	f000 b813 	b.w	80060b8 <_close_r>
	...

08006094 <_write_r>:
 8006094:	b538      	push	{r3, r4, r5, lr}
 8006096:	4c07      	ldr	r4, [pc, #28]	; (80060b4 <_write_r+0x20>)
 8006098:	4605      	mov	r5, r0
 800609a:	2000      	movs	r0, #0
 800609c:	6020      	str	r0, [r4, #0]
 800609e:	4608      	mov	r0, r1
 80060a0:	4611      	mov	r1, r2
 80060a2:	461a      	mov	r2, r3
 80060a4:	f000 f85a 	bl	800615c <_write>
 80060a8:	1c43      	adds	r3, r0, #1
 80060aa:	d102      	bne.n	80060b2 <_write_r+0x1e>
 80060ac:	6823      	ldr	r3, [r4, #0]
 80060ae:	b103      	cbz	r3, 80060b2 <_write_r+0x1e>
 80060b0:	602b      	str	r3, [r5, #0]
 80060b2:	bd38      	pop	{r3, r4, r5, pc}
 80060b4:	20002d20 	.word	0x20002d20

080060b8 <_close_r>:
 80060b8:	b538      	push	{r3, r4, r5, lr}
 80060ba:	4c06      	ldr	r4, [pc, #24]	; (80060d4 <_close_r+0x1c>)
 80060bc:	2300      	movs	r3, #0
 80060be:	4605      	mov	r5, r0
 80060c0:	4608      	mov	r0, r1
 80060c2:	6023      	str	r3, [r4, #0]
 80060c4:	f000 f82c 	bl	8006120 <_close>
 80060c8:	1c43      	adds	r3, r0, #1
 80060ca:	d102      	bne.n	80060d2 <_close_r+0x1a>
 80060cc:	6823      	ldr	r3, [r4, #0]
 80060ce:	b103      	cbz	r3, 80060d2 <_close_r+0x1a>
 80060d0:	602b      	str	r3, [r5, #0]
 80060d2:	bd38      	pop	{r3, r4, r5, pc}
 80060d4:	20002d20 	.word	0x20002d20

080060d8 <_lseek_r>:
 80060d8:	b538      	push	{r3, r4, r5, lr}
 80060da:	4c07      	ldr	r4, [pc, #28]	; (80060f8 <_lseek_r+0x20>)
 80060dc:	4605      	mov	r5, r0
 80060de:	2000      	movs	r0, #0
 80060e0:	6020      	str	r0, [r4, #0]
 80060e2:	4608      	mov	r0, r1
 80060e4:	4611      	mov	r1, r2
 80060e6:	461a      	mov	r2, r3
 80060e8:	f000 f822 	bl	8006130 <_lseek>
 80060ec:	1c43      	adds	r3, r0, #1
 80060ee:	d102      	bne.n	80060f6 <_lseek_r+0x1e>
 80060f0:	6823      	ldr	r3, [r4, #0]
 80060f2:	b103      	cbz	r3, 80060f6 <_lseek_r+0x1e>
 80060f4:	602b      	str	r3, [r5, #0]
 80060f6:	bd38      	pop	{r3, r4, r5, pc}
 80060f8:	20002d20 	.word	0x20002d20

080060fc <_read_r>:
 80060fc:	b538      	push	{r3, r4, r5, lr}
 80060fe:	4c07      	ldr	r4, [pc, #28]	; (800611c <_read_r+0x20>)
 8006100:	4605      	mov	r5, r0
 8006102:	2000      	movs	r0, #0
 8006104:	6020      	str	r0, [r4, #0]
 8006106:	4608      	mov	r0, r1
 8006108:	4611      	mov	r1, r2
 800610a:	461a      	mov	r2, r3
 800610c:	f7fa f95a 	bl	80003c4 <_read>
 8006110:	1c43      	adds	r3, r0, #1
 8006112:	d102      	bne.n	800611a <_read_r+0x1e>
 8006114:	6823      	ldr	r3, [r4, #0]
 8006116:	b103      	cbz	r3, 800611a <_read_r+0x1e>
 8006118:	602b      	str	r3, [r5, #0]
 800611a:	bd38      	pop	{r3, r4, r5, pc}
 800611c:	20002d20 	.word	0x20002d20

08006120 <_close>:
 8006120:	4b02      	ldr	r3, [pc, #8]	; (800612c <_close+0xc>)
 8006122:	2258      	movs	r2, #88	; 0x58
 8006124:	601a      	str	r2, [r3, #0]
 8006126:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800612a:	4770      	bx	lr
 800612c:	20002d20 	.word	0x20002d20

08006130 <_lseek>:
 8006130:	4b02      	ldr	r3, [pc, #8]	; (800613c <_lseek+0xc>)
 8006132:	2258      	movs	r2, #88	; 0x58
 8006134:	601a      	str	r2, [r3, #0]
 8006136:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800613a:	4770      	bx	lr
 800613c:	20002d20 	.word	0x20002d20

08006140 <_sbrk>:
 8006140:	4a04      	ldr	r2, [pc, #16]	; (8006154 <_sbrk+0x14>)
 8006142:	4905      	ldr	r1, [pc, #20]	; (8006158 <_sbrk+0x18>)
 8006144:	6813      	ldr	r3, [r2, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	bf08      	it	eq
 800614a:	460b      	moveq	r3, r1
 800614c:	4418      	add	r0, r3
 800614e:	6010      	str	r0, [r2, #0]
 8006150:	4618      	mov	r0, r3
 8006152:	4770      	bx	lr
 8006154:	20002bac 	.word	0x20002bac
 8006158:	20002d28 	.word	0x20002d28

0800615c <_write>:
 800615c:	4b02      	ldr	r3, [pc, #8]	; (8006168 <_write+0xc>)
 800615e:	2258      	movs	r2, #88	; 0x58
 8006160:	601a      	str	r2, [r3, #0]
 8006162:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006166:	4770      	bx	lr
 8006168:	20002d20 	.word	0x20002d20

0800616c <_init>:
 800616c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800616e:	bf00      	nop
 8006170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006172:	bc08      	pop	{r3}
 8006174:	469e      	mov	lr, r3
 8006176:	4770      	bx	lr

08006178 <_fini>:
 8006178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800617a:	bf00      	nop
 800617c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800617e:	bc08      	pop	{r3}
 8006180:	469e      	mov	lr, r3
 8006182:	4770      	bx	lr
